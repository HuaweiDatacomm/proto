syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-01 20:16:01
// ProtoYang-version 1
// module ietf-system
// revision 2014-08-06
// namespace urn:ietf:params:xml:ns:yang:ietf-system

package ietf_system;

message System {
   message Authentication {
      message User {
         message AuthorizedKey {
            string algorithm = 1 [json_name = "algorithm"];
            bytes key_data = 2 [json_name = "key-data"];
            string name = 3 [json_name = "name"];
         }
         repeated AuthorizedKey authorized_key = 1 [json_name = "authorized-key"];
         string name = 2 [json_name = "name"];
         string password = 3 [json_name = "password"];
         enum ServiceType {
            ServiceType_CLI = 0;
            ServiceType_NETCONF = 1;
         };
         ServiceType service_type = 4 [json_name = "service-type"];
         enum AuthenticationType {
            INVALID_ENUM_VALUE_AuthenticationType = 0;
            AuthenticationType_PASSWORD = 1;
            AuthenticationType_X509V3X_RSA = 11;
            AuthenticationType_PASSWORDX_X509V3X_RSA = 12;
         };
         AuthenticationType authentication_type = 5 [json_name = "authentication-type"];
         uint32 reenter_num = 6 [json_name = "reenter-num"];
      }
      repeated User user = 1 [json_name = "user"];
      repeated string user_authentication_order = 2 [json_name = "user-authentication-order"];
   }
   Authentication authentication = 1 [json_name = "authentication"];
   message Clock {
      message Timezone_TimezoneName {
         string timezone_name = 1 [json_name = "timezone-name"];
      }
      message Timezone_TimezoneUtcOffset {
         int32 timezone_utc_offset = 1 [json_name = "timezone-utc-offset"];
         string timezone_name = 2 [json_name = "timezone-name"];
      }
      oneof Timezone {
         Timezone_TimezoneName timezone_timezone_name = 2 [json_name = "timezone-name"];
         Timezone_TimezoneUtcOffset timezone_timezone_utc_offset = 3 [json_name = "timezone-utc-offset"];
      }
      message DstConfiguration {
         string dst_name = 1 [json_name = "dst-name"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_ONEX_YEAR = 1;
            Type_REPEATX_DATE = 2;
            Type_REPEATX_WEEK = 3;
         };
         Type type = 2 [json_name = "type"];
         uint32 start_year = 3 [json_name = "start-year"];
         enum StartMonth {
            INVALID_ENUM_VALUE_StartMonth = 0;
            StartMonth_JAN = 1;
            StartMonth_FEB = 2;
            StartMonth_MAR = 3;
            StartMonth_APR = 4;
            StartMonth_MAY = 5;
            StartMonth_JUN = 6;
            StartMonth_JUL = 7;
            StartMonth_AUG = 8;
            StartMonth_SEP = 9;
            StartMonth_OCT = 10;
            StartMonth_NOV = 11;
            StartMonth_DEC = 12;
         };
         StartMonth start_month = 4 [json_name = "start-month"];
         enum StartDay {
            INVALID_ENUM_VALUE_StartDay = 0;
            StartDay_X_1ST = 1;
            StartDay_X_2ND = 2;
            StartDay_X_3RD = 3;
            StartDay_X_4TH = 4;
            StartDay_X_5TH = 5;
            StartDay_X_6TH = 6;
            StartDay_X_7TH = 7;
            StartDay_X_8TH = 8;
            StartDay_X_9TH = 9;
            StartDay_X_10TH = 10;
            StartDay_X_11ST = 11;
            StartDay_X_12ND = 12;
            StartDay_X_13RD = 13;
            StartDay_X_14TH = 14;
            StartDay_X_15TH = 15;
            StartDay_X_16TH = 16;
            StartDay_X_17TH = 17;
            StartDay_X_18TH = 18;
            StartDay_X_19TH = 19;
            StartDay_X_20TH = 20;
            StartDay_X_21ST = 21;
            StartDay_X_22ND = 22;
            StartDay_X_23RD = 23;
            StartDay_X_24TH = 24;
            StartDay_X_25TH = 25;
            StartDay_X_26TH = 26;
            StartDay_X_27TH = 27;
            StartDay_X_28TH = 28;
            StartDay_X_29TH = 29;
            StartDay_X_30TH = 30;
            StartDay_X_31ST = 31;
         };
         StartDay start_day = 5 [json_name = "start-day"];
         enum StartWeeknum {
            INVALID_ENUM_VALUE_StartWeeknum = 0;
            StartWeeknum_FIRST = 1;
            StartWeeknum_SECOND = 2;
            StartWeeknum_THIRD = 3;
            StartWeeknum_FOURTH = 4;
            StartWeeknum_LAST = 5;
         };
         StartWeeknum start_weeknum = 6 [json_name = "start-weeknum"];
         enum StartWeekday {
            StartWeekday_SUN = 0;
            StartWeekday_MON = 1;
            StartWeekday_TUE = 2;
            StartWeekday_WED = 3;
            StartWeekday_THU = 4;
            StartWeekday_FRI = 5;
            StartWeekday_SAT = 6;
         };
         StartWeekday start_weekday = 7 [json_name = "start-weekday"];
         string start_time = 8 [json_name = "start-time"];
         uint32 end_year = 9 [json_name = "end-year"];
         enum EndMonth {
            INVALID_ENUM_VALUE_EndMonth = 0;
            EndMonth_JAN = 1;
            EndMonth_FEB = 2;
            EndMonth_MAR = 3;
            EndMonth_APR = 4;
            EndMonth_MAY = 5;
            EndMonth_JUN = 6;
            EndMonth_JUL = 7;
            EndMonth_AUG = 8;
            EndMonth_SEP = 9;
            EndMonth_OCT = 10;
            EndMonth_NOV = 11;
            EndMonth_DEC = 12;
         };
         EndMonth end_month = 10 [json_name = "end-month"];
         enum EndDay {
            INVALID_ENUM_VALUE_EndDay = 0;
            EndDay_X_1ST = 1;
            EndDay_X_2ND = 2;
            EndDay_X_3RD = 3;
            EndDay_X_4TH = 4;
            EndDay_X_5TH = 5;
            EndDay_X_6TH = 6;
            EndDay_X_7TH = 7;
            EndDay_X_8TH = 8;
            EndDay_X_9TH = 9;
            EndDay_X_10TH = 10;
            EndDay_X_11ST = 11;
            EndDay_X_12ND = 12;
            EndDay_X_13RD = 13;
            EndDay_X_14TH = 14;
            EndDay_X_15TH = 15;
            EndDay_X_16TH = 16;
            EndDay_X_17TH = 17;
            EndDay_X_18TH = 18;
            EndDay_X_19TH = 19;
            EndDay_X_20TH = 20;
            EndDay_X_21ST = 21;
            EndDay_X_22ND = 22;
            EndDay_X_23RD = 23;
            EndDay_X_24TH = 24;
            EndDay_X_25TH = 25;
            EndDay_X_26TH = 26;
            EndDay_X_27TH = 27;
            EndDay_X_28TH = 28;
            EndDay_X_29TH = 29;
            EndDay_X_30TH = 30;
            EndDay_X_31ST = 31;
         };
         EndDay end_day = 11 [json_name = "end-day"];
         enum EndWeeknum {
            INVALID_ENUM_VALUE_EndWeeknum = 0;
            EndWeeknum_FIRST = 1;
            EndWeeknum_SECOND = 2;
            EndWeeknum_THIRD = 3;
            EndWeeknum_FOURTH = 4;
            EndWeeknum_LAST = 5;
         };
         EndWeeknum end_weeknum = 12 [json_name = "end-weeknum"];
         enum EndWeekday {
            EndWeekday_SUN = 0;
            EndWeekday_MON = 1;
            EndWeekday_TUE = 2;
            EndWeekday_WED = 3;
            EndWeekday_THU = 4;
            EndWeekday_FRI = 5;
            EndWeekday_SAT = 6;
         };
         EndWeekday end_weekday = 13 [json_name = "end-weekday"];
         string end_time = 14 [json_name = "end-time"];
         string dst_offset = 15 [json_name = "dst-offset"];
      }
      DstConfiguration dst_configuration = 4 [json_name = "dst-configuration"];
   }
   Clock clock = 2 [json_name = "clock"];
   string contact = 3 [json_name = "contact"];
   message DnsResolver {
      message Options {
         uint32 attempts = 1 [json_name = "attempts"];
         uint32 timeout = 2 [json_name = "timeout"];
      }
      Options options = 1 [json_name = "options"];
      repeated string search = 2 [json_name = "search"];
      message Server {
         string name = 1 [json_name = "name"];
         message Transport_UdpAndTcp {
            message UdpAndTcp5 {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
            }
            UdpAndTcp5 udp_and_tcp = 1 [json_name = "udp-and-tcp"];
         }
         oneof Transport {
            Transport_UdpAndTcp transport_udp_and_tcp = 3 [json_name = "udp-and-tcp"];
         }
      }
      repeated Server server = 3 [json_name = "server"];
   }
   DnsResolver dns_resolver = 4 [json_name = "dns-resolver"];
   string hostname = 5 [json_name = "hostname"];
   string location = 6 [json_name = "location"];
   message Ntp {
      bool enabled = 1 [json_name = "enabled"];
      message Server {
         enum AssociationType {
            AssociationType_PEER = 0;
            AssociationType_POOL = 1;
            AssociationType_SERVER = 2;
         };
         AssociationType association_type = 1 [json_name = "association-type"];
         bool iburst = 2 [json_name = "iburst"];
         string name = 3 [json_name = "name"];
         bool prefer = 4 [json_name = "prefer"];
         message Transport_Udp {
            message Udp5 {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
            }
            Udp5 udp5 = 1 [json_name = "udp"];
         }
         oneof Transport {
            Transport_Udp transport_udp = 6 [json_name = "udp"];
         }
      }
      repeated Server server = 2 [json_name = "server"];
   }
   Ntp ntp = 7 [json_name = "ntp"];
   message Radius {
      message Options {
         uint32 attempts = 1 [json_name = "attempts"];
         uint32 timeout = 2 [json_name = "timeout"];
      }
      Options options = 1 [json_name = "options"];
      message Server {
         string authentication_type = 1 [json_name = "authentication-type"];
         string name = 2 [json_name = "name"];
         message Transport_Udp {
            message Udp5 {
               string address = 1 [json_name = "address"];
               uint32 authentication_port = 2 [json_name = "authentication-port"];
               string shared_secret = 3 [json_name = "shared-secret"];
            }
            Udp5 udp5 = 1 [json_name = "udp"];
         }
         oneof Transport {
            Transport_Udp transport_udp = 4 [json_name = "udp"];
         }
      }
      repeated Server server = 2 [json_name = "server"];
   }
   Radius radius = 8 [json_name = "radius"];
   message NetworkServer {
      message NetworkServerSourceInterfaces {
         message NetworkServerSourceInterface {
            enum ProtocolType {
               INVALID_ENUM_VALUE_ProtocolType = 0;
               ProtocolType_SSH = 1;
               ProtocolType_SNMP = 2;
               ProtocolType_NETCONF = 3;
               ProtocolType_TELNETX_PROXY = 4;
               ProtocolType_TRACE = 5;
               ProtocolType_TELNET = 6;
               ProtocolType_TWAMP = 7;
               ProtocolType_ANCPX_PROXY = 8;
               ProtocolType_WEBX_PROXY = 9;
               ProtocolType_IPDR = 10;
               ProtocolType_DHCPX_RELAY = 11;
               ProtocolType_PORTAL = 12;
            };
            ProtocolType protocol_type = 1 [json_name = "protocol-type"];
            string source_interface = 2 [json_name = "source-interface"];
         }
         repeated NetworkServerSourceInterface network_server_source_interface = 1 [json_name = "network-server-source-interface"];
      }
      NetworkServerSourceInterfaces network_server_source_interfaces = 1 [json_name = "network-server-source-interfaces"];
      message NetworkServerSourceIps {
         message NetworkServerSourceIp {
            enum ProtocolType {
               INVALID_ENUM_VALUE_ProtocolType = 0;
               ProtocolType_SSH = 1;
               ProtocolType_SNMP = 2;
               ProtocolType_NETCONF = 3;
               ProtocolType_TELNETX_PROXY = 4;
               ProtocolType_TRACE = 5;
               ProtocolType_TELNET = 6;
               ProtocolType_TWAMP = 7;
               ProtocolType_ANCPX_PROXY = 8;
               ProtocolType_WEBX_PROXY = 9;
               ProtocolType_IPDR = 10;
               ProtocolType_DHCPX_RELAY = 11;
               ProtocolType_PORTAL = 12;
            };
            ProtocolType protocol_type = 1 [json_name = "protocol-type"];
            string source_ip = 2 [json_name = "source-ip"];
            string vrf_name = 3 [json_name = "vrf-name"];
         }
         repeated NetworkServerSourceIp network_server_source_ip = 1 [json_name = "network-server-source-ip"];
      }
      NetworkServerSourceIps network_server_source_ips = 2 [json_name = "network-server-source-ips"];
   }
   NetworkServer network_server = 9 [json_name = "network-server"];
   message ManagementModes {
      message ManagementMode {
         string configuration_type = 1 [json_name = "configuration-type"];
         enum Mode {
            Mode_DEFAULT = 0;
            Mode_NETCONF = 1;
         };
         Mode mode = 2 [json_name = "mode"];
      }
      repeated ManagementMode management_mode = 1 [json_name = "management-mode"];
   }
   ManagementModes management_modes = 10 [json_name = "management-modes"];
}
message SystemState {
   message Clock {
      string boot_datetime = 1 [json_name = "boot-datetime"];
      string current_datetime = 2 [json_name = "current-datetime"];
   }
   Clock clock = 1 [json_name = "clock"];
   message Platform {
      string machine = 1 [json_name = "machine"];
      string os_name = 2 [json_name = "os-name"];
      string os_release = 3 [json_name = "os-release"];
      string os_version = 4 [json_name = "os-version"];
   }
   Platform platform = 2 [json_name = "platform"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-24 20:18:03
// ProtoYang-version 1
// module huawei-devm-vnf
// revision 2022-02-07
// revision 2021-04-26
// revision 2020-04-10
// revision 2019-07-01
// namespace urn:huawei:yang:huawei-devm-vnf

package huawei_devm_vnf;

message DevmVnf {
   message VnfBoards {
      message VnfBoard {
         string vnfc_name = 1 [json_name = "vnfc-name"];
         uint32 id = 2 [json_name = "id"];
         string type_name = 3 [json_name = "type-name"];
         string name = 4 [json_name = "name"];
         enum RunState {
            RunState_ABNORMAL = 0;
            RunState_NORMAL = 1;
            RunState_ISOLATED = 2;
            RunState_NOTINSTALL = 3;
            RunState_WRONGTYPE = 4;
            RunState_ACTIVE = 5;
            RunState_INACTIVE = 6;
            RunState_OFFLINE = 7;
            RunState_STOP = 8;
         };
         RunState run_state = 5 [json_name = "run-state"];
         enum ResourceType {
            ResourceType_VM = 0;
         };
         ResourceType resource_type = 6 [json_name = "resource-type"];
         string resource_name = 7 [json_name = "resource-name"];
         enum StandbyState {
            StandbyState_NOTX_SUPPORTED = 0;
            StandbyState_MASTER = 1;
            StandbyState_SLAVE = 2;
         };
         StandbyState standby_state = 8 [json_name = "standby-state"];
         enum Role {
            Role_UNKNOWN = 0;
            Role_MMB = 1;
            Role_MB = 4;
            Role_LC = 5;
            Role_OTHER = 200;
            Role_NA = 255;
         };
         Role role = 9 [json_name = "role"];
         uint32 up_time = 10 [json_name = "up-time"];
         uint32 physical_index = 11 [json_name = "physical-index"];
         message Loadbalance {
            message HashArithmetic {
               enum Arithmetic {
                  INVALID_ENUM_VALUE_Arithmetic = 0;
                  Arithmetic_ARITHMETIC1 = 1;
                  Arithmetic_ARITHMETIC2 = 2;
                  Arithmetic_ARITHMETIC3 = 3;
                  Arithmetic_ARITHMETIC4 = 4;
                  Arithmetic_ARITHMETIC5 = 5;
                  Arithmetic_RANDOM = 6;
               };
               Arithmetic arithmetic = 1 [json_name = "arithmetic"];
               bool second_hash_flag = 2 [json_name = "second-hash-flag"];
            }
            HashArithmetic hash_arithmetic = 1 [json_name = "hash-arithmetic"];
            message HashFields {
               message HashField {
                  enum TrunkEcmp {
                     INVALID_ENUM_VALUE_TrunkEcmp = 0;
                     TrunkEcmp_IP = 5;
                     TrunkEcmp_MAC = 6;
                     TrunkEcmp_VLL = 7;
                     TrunkEcmp_TUNNELX_INFO = 8;
                     TrunkEcmp_TUNNELX_INNERX_IP = 9;
                     TrunkEcmp_GTP = 10;
                     TrunkEcmp_FEC = 11;
                     TrunkEcmp_GTPX_INNERX_IP = 12;
                  };
                  TrunkEcmp trunk_ecmp = 1 [json_name = "trunk-ecmp"];
                  enum Material {
                     INVALID_ENUM_VALUE_Material = 0;
                     Material_L2 = 1;
                     Material_L3 = 2;
                     Material_L4 = 3;
                     Material_UNDOX_DISABLE = 4;
                     Material_DISABLE = 5;
                     Material_LABELX_IP = 6;
                     Material_LABEL = 7;
                  };
                  Material material = 2 [json_name = "material"];
               }
               repeated HashField hash_field = 1 [json_name = "hash-field"];
            }
            HashFields hash_fields = 2 [json_name = "hash-fields"];
            message HashSeed {
               bool random_flag = 1 [json_name = "random-flag"];
               string custom_seed = 2 [json_name = "custom-seed"];
            }
            HashSeed hash_seed = 3 [json_name = "hash-seed"];
         }
         Loadbalance loadbalance = 12 [json_name = "loadbalance"];
         message Pbr {
            message RoutingFilters {
               message RoutingFilter {
                  enum Type {
                     Type_IPV4 = 0;
                     Type_IPV6 = 1;
                     Type_IPV4IPV6 = 2;
                  };
                  Type type = 1 [json_name = "type"];
                  enum RoutingType {
                     INVALID_ENUM_VALUE_RoutingType = 0;
                     RoutingType_DEFAULT = 1;
                     RoutingType_BLACKHOLE = 2;
                     RoutingType_DEFAULTX_BLACKHOLE = 3;
                  };
                  RoutingType routing_type = 2 [json_name = "routing-type"];
               }
               repeated RoutingFilter routing_filter = 1 [json_name = "routing-filter"];
            }
            RoutingFilters routing_filters = 1 [json_name = "routing-filters"];
         }
         Pbr pbr = 13 [json_name = "pbr"];
         message Qos {
            message TrafficPolicyMatchs {
               message TrafficPolicyMatch {
                  enum Type {
                     Type_IPX_LAYERX_PUSH = 0;
                     Type_IPV6X_ADDRESSX_RULEX_MASK = 1;
                     Type_PROTOCOLX_MCX_RESERVED = 2;
                     Type_MPLSX_LAYERX_PUSH = 3;
                     Type_MPLSX_LAYERX_L2X_INBOUND = 4;
                     Type_RULEX_PACKET = 5;
                     Type_MPLSX_LAYERX_POP = 6;
                     Type_IPX_LAYERX_POP = 7;
                  };
                  Type type = 1 [json_name = "type"];
               }
               repeated TrafficPolicyMatch traffic_policy_match = 1 [json_name = "traffic-policy-match"];
            }
            TrafficPolicyMatchs traffic_policy_matchs = 1 [json_name = "traffic-policy-matchs"];
            message TrafficPolicyMatchType {
               message DestinationUser {
               }
               DestinationUser destination_user = 1 [json_name = "destination-user"];
               message InterfaceAcl {
               }
               InterfaceAcl interface_acl = 2 [json_name = "interface-acl"];
            }
            TrafficPolicyMatchType traffic_policy_match_type = 2 [json_name = "traffic-policy-match-type"];
         }
         Qos qos = 14 [json_name = "qos"];
         message UnicastForward {
            message Ipv4Uc {
               bool force_frag = 1 [json_name = "force-frag"];
               bool icmp_reply_fast = 2 [json_name = "icmp-reply-fast"];
            }
            Ipv4Uc ipv4_uc = 1 [json_name = "ipv4-uc"];
            message ArpFastReply {
               bool enable = 1 [json_name = "enable"];
            }
            ArpFastReply arp_fast_reply = 2 [json_name = "arp-fast-reply"];
            message GreTtlMode {
               enum TtlMode {
                  TtlMode_PIPE = 0;
                  TtlMode_UNIFORM = 1;
               };
               TtlMode ttl_mode = 1 [json_name = "ttl-mode"];
            }
            GreTtlMode gre_ttl_mode = 3 [json_name = "gre-ttl-mode"];
         }
         UnicastForward unicast_forward = 15 [json_name = "unicast-forward"];
         message L2Tp {
            message IcrqLimit {
               uint32 set_value = 1 [json_name = "set-value"];
            }
            IcrqLimit icrq_limit = 1 [json_name = "icrq-limit"];
         }
         L2Tp l2tp = 16 [json_name = "l2tp"];
         message Cpudefend {
            uint32 policy_id = 1 [json_name = "policy-id"];
         }
         Cpudefend cpudefend = 17 [json_name = "cpudefend"];
         message CpudefendDevm {
            message IgnoreHostcarAcl {
               string ipv6_acl = 1 [json_name = "ipv6-acl"];
               message Ipv4AclType_ByIdentity {
                  string ipv4_acl = 1 [json_name = "ipv4-acl"];
               }
               message Ipv4AclType_ByNumber {
                  uint32 ipv4_acl_number = 1 [json_name = "ipv4-acl-number"];
               }
               oneof Ipv4AclType {
                  Ipv4AclType_ByIdentity ipv4_acl_type_by_identity = 2 [json_name = "by-identity"];
                  Ipv4AclType_ByNumber ipv4_acl_type_by_number = 3 [json_name = "by-number"];
               }
            }
            IgnoreHostcarAcl ignore_hostcar_acl = 1 [json_name = "ignore-hostcar-acl"];
            message BrasHostCars {
               message BrasHostCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_HOSTX_CAR = 1;
                     Type_HTTPX_HOSTX_CAR = 2;
                     Type_VLANX_HOSTX_CAR = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  message RateLimit {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                     uint32 pir = 3 [json_name = "pir"];
                     uint32 pbs = 4 [json_name = "pbs"];
                     bool auto_adjust_enable = 5 [json_name = "auto-adjust-enable"];
                  }
                  RateLimit rate_limit = 2 [json_name = "rate-limit"];
                  message Logging {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 discard_threshold = 2 [json_name = "discard-threshold"];
                  }
                  Logging logging = 3 [json_name = "logging"];
                  message AttackDetect {
                     uint32 drop_rate_threshold = 1 [json_name = "drop-rate-threshold"];
                  }
                  AttackDetect attack_detect = 4 [json_name = "attack-detect"];
               }
               repeated BrasHostCar bras_host_car = 1 [json_name = "bras-host-car"];
            }
            BrasHostCars bras_host_cars = 2 [json_name = "bras-host-cars"];
            message SpuCars {
               message SpuCar {
                  enum CarType {
                     INVALID_ENUM_VALUE_CarType = 0;
                     CarType_ICMP = 1;
                     CarType_TCP = 2;
                     CarType_UDP = 3;
                     CarType_GRE = 4;
                     CarType_BGP = 5;
                     CarType_DEFAULT = 6;
                     CarType_TOTAL = 7;
                     CarType_IKEX_TOTALX_CAR = 8;
                     CarType_IKEX_TUNNELX_CAR = 9;
                     CarType_PLAINX_SAX_MISS = 10;
                     CarType_CIPHERX_SAX_MISS = 11;
                     CarType_IPSECX_REKEY = 12;
                     CarType_IKEX_DPD = 13;
                     CarType_FASTX_CHANNEL = 14;
                     CarType_BFDX_DOWN = 15;
                     CarType_PST = 16;
                     CarType_DSLITEX_PRIVATEX_IPV4 = 17;
                     CarType_IPX_OPTION = 18;
                     CarType_MTUX_EXCEED = 19;
                     CarType_CGNX_ICMP = 20;
                     CarType_CGNX_ICMPV6 = 21;
                     CarType_CGNX_IPV4X_OTHER = 22;
                     CarType_CGNX_IPV6X_OTHER = 23;
                     CarType_CGNX_IPV6X_RAW = 24;
                     CarType_CGNX_TOTAL = 25;
                     CarType_TSUX_DETECTX_KEEPLIVE = 26;
                  };
                  CarType car_type = 1 [json_name = "car-type"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
               }
               repeated SpuCar spu_car = 1 [json_name = "spu-car"];
            }
            SpuCars spu_cars = 3 [json_name = "spu-cars"];
            message ArpVlanCar {
               bool alarm_drop_rate = 1 [json_name = "alarm-drop-rate"];
               message Level2Car {
                  uint32 rate_limit_percent = 1 [json_name = "rate-limit-percent"];
               }
               Level2Car level_2_car = 2 [json_name = "level-2-car"];
            }
            ArpVlanCar arp_vlan_car = 4 [json_name = "arp-vlan-car"];
            message NdVlanCar {
               message NdAttackAlarms {
                  message NdAttackAlarm {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     bool alarm_enable = 2 [json_name = "alarm-enable"];
                  }
                  repeated NdAttackAlarm nd_attack_alarm = 1 [json_name = "nd-attack-alarm"];
               }
               NdAttackAlarms nd_attack_alarms = 1 [json_name = "nd-attack-alarms"];
               message Level2Cars {
                  message Level2Car {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 rate_limit_percent = 2 [json_name = "rate-limit-percent"];
                  }
                  repeated Level2Car level_2_car = 1 [json_name = "level-2-car"];
               }
               Level2Cars level_2_cars = 2 [json_name = "level-2-cars"];
            }
            NdVlanCar nd_vlan_car = 5 [json_name = "nd-vlan-car"];
         }
         CpudefendDevm cpudefend_devm = 18 [json_name = "cpudefend-devm"];
         message Soc {
            message L2LoopDetect {
               message SlotL2Loopdet {
                  bool enable = 1 [json_name = "enable"];
                  uint32 packets_drop_threshold = 2 [json_name = "packets-drop-threshold"];
               }
               SlotL2Loopdet slot_l2loopdet = 1 [json_name = "slot-l2loopdet"];
               message Action {
                  message Shutdown {
                     uint32 up_times = 1 [json_name = "up-times"];
                     uint32 up_interval = 2 [json_name = "up-interval"];
                  }
                  Shutdown shutdown = 1 [json_name = "shutdown"];
                  message Trap {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Trap trap = 2 [json_name = "trap"];
               }
               Action action = 2 [json_name = "action"];
               message LoopLevelThresholds {
                  message LoopLevelThreshold {
                     enum InterfaceType {
                        InterfaceType_MAINX_INTERFACE = 0;
                        InterfaceType_SUBX_INTERFACE = 1;
                     };
                     InterfaceType interface_type = 1 [json_name = "interface-type"];
                     uint32 determined = 2 [json_name = "determined"];
                     uint32 suspect = 3 [json_name = "suspect"];
                     uint32 notification = 4 [json_name = "notification"];
                  }
                  repeated LoopLevelThreshold loop_level_threshold = 1 [json_name = "loop-level-threshold"];
               }
               LoopLevelThresholds loop_level_thresholds = 3 [json_name = "loop-level-thresholds"];
            }
            L2LoopDetect l2_loop_detect = 1 [json_name = "l2-loop-detect"];
         }
         Soc soc = 19 [json_name = "soc"];
         message CpCpuDefend {
            message VmTotalCar {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
            }
            VmTotalCar vm_total_car = 1 [json_name = "vm-total-car"];
         }
         CpCpuDefend cp_cpu_defend = 20 [json_name = "cp-cpu-defend"];
         message Bras {
            message UserArpReply {
               bool enable = 1 [json_name = "enable"];
            }
            UserArpReply user_arp_reply = 1 [json_name = "user-arp-reply"];
         }
         Bras bras = 21 [json_name = "bras"];
      }
      repeated VnfBoard vnf_board = 1 [json_name = "vnf-board"];
   }
   VnfBoards vnf_boards = 1 [json_name = "vnf-boards"];
   message Vms {
      message Vm {
         string name = 1 [json_name = "name"];
         uint32 logic_id = 2 [json_name = "logic-id"];
         string id = 3 [json_name = "id"];
         string phy_id = 4 [json_name = "phy-id"];
         string type_name = 5 [json_name = "type-name"];
         enum RunState {
            RunState_ABNORMAL = 0;
            RunState_NORMAL = 1;
            RunState_ISOLATED = 2;
            RunState_NOTINSTALL = 3;
            RunState_WRONGTYPE = 4;
            RunState_ACTIVE = 5;
            RunState_INACTIVE = 6;
            RunState_OFFLINE = 7;
            RunState_STOP = 8;
         };
         RunState run_state = 6 [json_name = "run-state"];
         uint32 memory_size = 7 [json_name = "memory-size"];
         uint32 storage_size = 8 [json_name = "storage-size"];
         uint32 cpu_number = 9 [json_name = "cpu-number"];
         uint32 memory_usage = 10 [json_name = "memory-usage"];
         uint32 cpu_usage = 11 [json_name = "cpu-usage"];
         uint32 storage_usage = 12 [json_name = "storage-usage"];
         uint32 up_time = 13 [json_name = "up-time"];
         message VethPorts {
            message VethPort {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               bool is_bind_pae = 3 [json_name = "is-bind-pae"];
               bool is_external = 4 [json_name = "is-external"];
               enum NetworkPlane {
                  NetworkPlane_BASE = 0;
                  NetworkPlane_INNERMNG = 1;
                  NetworkPlane_OUTERMNG = 2;
                  NetworkPlane_OUTERLINK = 3;
                  NetworkPlane_INTRASERV = 4;
                  NetworkPlane_INNERPAE = 5;
                  NetworkPlane_OUTERLINUX = 6;
                  NetworkPlane_NLSOUTERMNG = 7;
                  NetworkPlane_INNERSLE = 8;
                  NetworkPlane_INNERDIRECTLOGIC = 9;
                  NetworkPlane_INNERCHAINLOGIC = 10;
                  NetworkPlane_INNERLOGICSERV = 11;
                  NetworkPlane_EXTBASE = 12;
                  NetworkPlane_EXTINNERLOGICSERV = 13;
                  NetworkPlane_INNERCTRL = 14;
                  NetworkPlane_TUNNEL = 15;
               };
               NetworkPlane network_plane = 5 [json_name = "network-plane"];
               string netmac = 6 [json_name = "netmac"];
               string netmask = 7 [json_name = "netmask"];
               string netip = 8 [json_name = "netip"];
               enum RunState {
                  RunState_DOWN = 0;
                  RunState_UP = 1;
                  RunState_ADMINDOWN = 2;
               };
               RunState run_state = 9 [json_name = "run-state"];
            }
            repeated VethPort veth_port = 1 [json_name = "veth-port"];
         }
         VethPorts veth_ports = 14 [json_name = "veth-ports"];
      }
      repeated Vm vm = 1 [json_name = "vm"];
   }
   Vms vms = 2 [json_name = "vms"];
}


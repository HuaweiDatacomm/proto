syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-clocksync-vaccess
// revision 2020-03-04
// revision 2020-01-21
// revision 2019-12-03
// revision 2019-09-19
// namespace urn:huawei:yang:huawei-clocksync-vaccess

package huawei_clocksync_vaccess;

message ClocksyncVaccess {
   message NetworkPlane {
      message VaCommon {
         bool freq_enable = 1 [json_name = "freq-enable"];
         bool time_enable = 2 [json_name = "time-enable"];
      }
      VaCommon va_common = 1 [json_name = "va-common"];
      message VaClock {
         bool freq_check_enable = 1 [json_name = "freq-check-enable"];
         uint32 wtr_time = 2 [json_name = "wtr-time"];
         uint32 holdoff_time = 3 [json_name = "holdoff-time"];
         enum OutThreshold {
            INVALID_ENUM_VALUE_OutThreshold = 0;
            OutThreshold_PRC = 2;
            OutThreshold_SSUA = 4;
            OutThreshold_SSUB = 8;
            OutThreshold_SEC = 11;
            OutThreshold_DNU = 15;
         };
         OutThreshold out_threshold = 4 [json_name = "out-threshold"];
         enum SsmUnkMap {
            INVALID_ENUM_VALUE_SsmUnkMap = 0;
            SsmUnkMap_PRC = 2;
            SsmUnkMap_SSUA = 4;
            SsmUnkMap_SSUB = 8;
            SsmUnkMap_SEC = 11;
            SsmUnkMap_DNU = 15;
         };
         SsmUnkMap ssm_unk_map = 5 [json_name = "ssm-unk-map"];
         enum MaxOutSsmSys {
            INVALID_ENUM_VALUE_MaxOutSsmSys = 0;
            MaxOutSsmSys_PRC = 2;
            MaxOutSsmSys_SSUA = 4;
            MaxOutSsmSys_SSUB = 8;
            MaxOutSsmSys_SEC = 11;
         };
         MaxOutSsmSys max_out_ssm_sys = 6 [json_name = "max-out-ssm-sys"];
         enum MaxOutSsm2M1 {
            INVALID_ENUM_VALUE_MaxOutSsm2M1 = 0;
            MaxOutSsm2M1_PRC = 2;
            MaxOutSsm2M1_SSUA = 4;
            MaxOutSsm2M1_SSUB = 8;
            MaxOutSsm2M1_SEC = 11;
         };
         MaxOutSsm2M1 max_out_ssm_2m1 = 7 [json_name = "max-out-ssm-2m1"];
         enum MaxOutSsm2M2 {
            INVALID_ENUM_VALUE_MaxOutSsm2M2 = 0;
            MaxOutSsm2M2_PRC = 2;
            MaxOutSsm2M2_SSUA = 4;
            MaxOutSsm2M2_SSUB = 8;
            MaxOutSsm2M2_SEC = 11;
         };
         MaxOutSsm2M2 max_out_ssm_2m2 = 8 [json_name = "max-out-ssm-2m2"];
      }
      VaClock va_clock = 2 [json_name = "va-clock"];
      message VaPtp {
         uint32 domain = 1 [json_name = "domain"];
         bool dly_measure_enable = 2 [json_name = "dly-measure-enable"];
         bool passive_measure_enable = 3 [json_name = "passive-measure-enable"];
         int32 passive_alarm_threshold = 4 [json_name = "passive-alarm-threshold"];
         enum TimeSource {
            INVALID_ENUM_VALUE_TimeSource = 0;
            TimeSource_ATOMICCLOCK = 1;
            TimeSource_GPS = 2;
            TimeSource_TERRESTRIALRADIO = 3;
            TimeSource_PTP = 4;
            TimeSource_NTP = 5;
            TimeSource_HANDSET = 6;
            TimeSource_OTHER = 7;
            TimeSource_INTERNALOSCILLATOR = 8;
         };
         TimeSource time_source = 5 [json_name = "time-source"];
         string accuracy = 6 [json_name = "accuracy"];
         uint32 clk_class = 7 [json_name = "clk-class"];
         uint32 priority1 = 8 [json_name = "priority1"];
         uint32 priority2 = 9 [json_name = "priority2"];
      }
      VaPtp va_ptp = 3 [json_name = "va-ptp"];
   }
   NetworkPlane network_plane = 1 [json_name = "network-plane"];
   message NvclockSync {
      message VaApComms {
         message VaApComm {
            uint32 ap_id = 1 [json_name = "ap-id"];
            enum ClockTodProtocol {
               ClockTodProtocol_UBX = 0;
               ClockTodProtocol_NMEA = 1;
               ClockTodProtocol_CCSA = 2;
            };
            ClockTodProtocol clock_tod_protocol = 2 [json_name = "clock-tod-protocol"];
            string ptp_local_clock_id = 3 [json_name = "ptp-local-clock-id"];
         }
         repeated VaApComm va_ap_comm = 1 [json_name = "va-ap-comm"];
      }
      VaApComms va_ap_comms = 1 [json_name = "va-ap-comms"];
      message VaApBitsSrcs {
         message VaApBitsSrc {
            uint32 ap_id = 1 [json_name = "ap-id"];
            enum PtpBitsId {
               PtpBitsId_BITS0 = 0;
               PtpBitsId_BITS1 = 1;
            };
            PtpBitsId ptp_bits_id = 2 [json_name = "ptp-bits-id"];
            uint32 slot_id = 3 [json_name = "slot-id"];
            enum PhyBitsSabit {
               INVALID_ENUM_VALUE_PhyBitsSabit = 0;
               PhyBitsSabit_SA4 = 4;
               PhyBitsSabit_SA5 = 5;
               PhyBitsSabit_SA6 = 6;
               PhyBitsSabit_SA7 = 7;
               PhyBitsSabit_SA8 = 8;
            };
            PhyBitsSabit phy_bits_sabit = 4 [json_name = "phy-bits-sabit"];
            enum PhyBitsType {
               PhyBitsType_X_2MBPS = 0;
               PhyBitsType_X_2MHZ = 1;
               PhyBitsType_DCLS = 2;
               PhyBitsType_X_1PPS = 3;
               PhyBitsType_NONE = 255;
            };
            PhyBitsType phy_bits_type = 5 [json_name = "phy-bits-type"];
            enum PtpBitsDirection {
               PtpBitsDirection_IN = 0;
               PtpBitsDirection_OUT = 1;
               PtpBitsDirection_BOTH = 2;
               PtpBitsDirection_NONE = 4;
            };
            PtpBitsDirection ptp_bits_direction = 6 [json_name = "ptp-bits-direction"];
            int32 ptp_bits_recv_delay = 7 [json_name = "ptp-bits-recv-delay"];
            int32 ptp_bits_send_delay = 8 [json_name = "ptp-bits-send-delay"];
            bool sync_enable = 9 [json_name = "sync-enable"];
         }
         repeated VaApBitsSrc va_ap_bits_src = 1 [json_name = "va-ap-bits-src"];
      }
      VaApBitsSrcs va_ap_bits_srcs = 2 [json_name = "va-ap-bits-srcs"];
      message VaRemoteClocks {
         message VaRemoteClock {
            string clock_if_name = 1 [json_name = "clock-if-name"];
            bool phy_sync_enable = 2 [json_name = "phy-sync-enable"];
            enum CfgSsm {
               INVALID_ENUM_VALUE_CfgSsm = 0;
               CfgSsm_PRC = 2;
               CfgSsm_SSUA = 4;
               CfgSsm_SSUB = 8;
               CfgSsm_SEC = 11;
               CfgSsm_DNU = 15;
            };
            CfgSsm cfg_ssm = 3 [json_name = "cfg-ssm"];
         }
         repeated VaRemoteClock va_remote_clock = 1 [json_name = "va-remote-clock"];
      }
      VaRemoteClocks va_remote_clocks = 3 [json_name = "va-remote-clocks"];
      message VaRemotePtps {
         message VaRemotePtp {
            string ptp_if_name = 1 [json_name = "ptp-if-name"];
            bool ptp_port_enable = 2 [json_name = "ptp-port-enable"];
            enum PtpDelayMechanism {
               PtpDelayMechanism_DELAY = 0;
               PtpDelayMechanism_PDELAY = 1;
            };
            PtpDelayMechanism ptp_delay_mechanism = 3 [json_name = "ptp-delay-mechanism"];
            enum PtpClockStep {
               PtpClockStep_ONESTEP = 0;
               PtpClockStep_TWOSTEP = 1;
            };
            PtpClockStep ptp_clock_step = 4 [json_name = "ptp-clock-step"];
            enum PtpPktPackType {
               PtpPktPackType_MAC = 0;
               PtpPktPackType_UDP = 1;
            };
            PtpPktPackType ptp_pkt_pack_type = 5 [json_name = "ptp-pkt-pack-type"];
            string ptp_mac_egress_dest_mac = 6 [json_name = "ptp-mac-egress-dest-mac"];
            int32 ptp_mac_egress_vlan_id = 7 [json_name = "ptp-mac-egress-vlan-id"];
            int32 ptp_mac_egress_pkt_priority = 8 [json_name = "ptp-mac-egress-pkt-priority"];
            string ptp_udp_egress_src_ip = 9 [json_name = "ptp-udp-egress-src-ip"];
            string ptp_udp_egress_dest_ip = 10 [json_name = "ptp-udp-egress-dest-ip"];
            int32 ptp_udp_egress_dscp = 11 [json_name = "ptp-udp-egress-dscp"];
            int32 ptp_udp_egress_vlan_id = 12 [json_name = "ptp-udp-egress-vlan-id"];
            int32 ptp_udp_egress_pkt_priority = 13 [json_name = "ptp-udp-egress-pkt-priority"];
            string ptp_udp_egress_dest_mac = 14 [json_name = "ptp-udp-egress-dest-mac"];
            int32 ptp_announce_interval = 15 [json_name = "ptp-announce-interval"];
            int32 ptp_announce_receipt_timeout = 16 [json_name = "ptp-announce-receipt-timeout"];
            int32 ptp_sync_interval = 17 [json_name = "ptp-sync-interval"];
            int32 ptp_min_delay_req_interval = 18 [json_name = "ptp-min-delay-req-interval"];
            int32 ptp_min_pdelay_req_interval = 19 [json_name = "ptp-min-pdelay-req-interval"];
            bool ptp_announce_drop = 20 [json_name = "ptp-announce-drop"];
         }
         repeated VaRemotePtp va_remote_ptp = 1 [json_name = "va-remote-ptp"];
      }
      VaRemotePtps va_remote_ptps = 4 [json_name = "va-remote-ptps"];
      message VaClockPorts {
         message VaClockPort {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string ap_if_name = 2 [json_name = "ap-if-name"];
            enum PtpCorrectionFlag {
               PtpCorrectionFlag_NEGATIVE = 0;
               PtpCorrectionFlag_POSITIVE = 1;
            };
            PtpCorrectionFlag ptp_correction_flag = 3 [json_name = "ptp-correction-flag"];
            int32 ptp_correction_value = 4 [json_name = "ptp-correction-value"];
         }
         repeated VaClockPort va_clock_port = 1 [json_name = "va-clock-port"];
      }
      VaClockPorts va_clock_ports = 5 [json_name = "va-clock-ports"];
   }
   NvclockSync nvclock_sync = 2 [json_name = "nvclock-sync"];
}


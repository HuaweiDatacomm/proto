syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-02 20:17:02
// ProtoYang-version 1
// module huawei-flexe
// revision 2020-02-18
// namespace urn:huawei:yang:huawei-flexe

package huawei_flexe;

message Flexe {
   message FlexESysCfgs {
      message FlexESysCfg {
         string cardPosition = 1;
         enum FlexeConfigMode {
            FlexeConfigMode_BANDWIDTH = 0;
            FlexeConfigMode_TIMESLOT = 1;
         };
         FlexeConfigMode flexeConfigMode = 2;
         message FlexeGroupInfos {
            message FlexeGroupInfo {
               uint32 allocBandwidth = 1;
               uint32 confBandwidth = 2;
               uint32 groupID = 3;
               uint32 leftBandwidth = 4;
            }
            repeated FlexeGroupInfo flexeGroupInfo = 1;
         }
         FlexeGroupInfos flexeGroupInfos = 3;
         enum FlexeSubTsGranulaValue {
            FlexeSubTsGranulaValue_NONE = 0;
            FlexeSubTsGranulaValue_X_1G = 1;
            FlexeSubTsGranulaValue_X_1X_25G = 2;
         };
         FlexeSubTsGranulaValue flexeSubTsGranulaValue = 4;
      }
      repeated FlexESysCfg flexESysCfg = 1;
   }
   FlexESysCfgs flexESysCfgs = 1;
   message LogicInterfaces {
      message LogicInterface {
         uint32 bandPercent = 1;
         uint32 bandwidth = 2;
         message BindingRelations {
            message BindingRelation {
               string flexephyIfName = 1;
               string freeTSINFO = 2;
               uint32 groupID = 3;
               enum LinkState {
                  LinkState_DOWN = 0;
                  LinkState_UP = 1;
               };
               LinkState linkState = 4;
               string subTSToSet = 5;
               string tSINFO = 6;
            }
            repeated BindingRelation bindingRelation = 1;
         }
         BindingRelations bindingRelations = 3;
         string cardPosition = 4;
         uint32 clientID = 5;
         uint32 groupID = 6;
         string ifName = 7;
      }
      repeated LogicInterface logicInterface = 1;
   }
   LogicInterfaces logicInterfaces = 2;
   message PhyInterfaces {
      message PhyInterface {
         string cardPosition = 1;
         enum FlexEthMode {
            FlexEthMode_DISABLED = 0;
            FlexEthMode_ENABLED = 1;
         };
         FlexEthMode flexEthMode = 2;
         message FlexEthPhyInfo {
            uint32 groupIDToRecv = 1;
            uint32 groupIDToSet = 2;
            uint32 phyNumberToRecv = 3;
            uint32 phyNumberToSet = 4;
         }
         FlexEthPhyInfo flexEthPhyInfo = 3;
         string portPosition = 4;
      }
      repeated PhyInterface phyInterface = 1;
   }
   PhyInterfaces phyInterfaces = 3;
   message CardAttributes {
      message CardAttribute {
         string card_position = 1 [json_name = "card-position"];
         enum ConfigMode {
            ConfigMode_BANDWIDTH = 0;
            ConfigMode_TIMESLOT = 1;
         };
         ConfigMode config_mode = 2 [json_name = "config-mode"];
         enum SubTimeslotGranula {
            SubTimeslotGranula_X_5G = 0;
            SubTimeslotGranula_X_1G = 1;
            SubTimeslotGranula_X_1X_25G = 2;
         };
         SubTimeslotGranula sub_timeslot_granula = 3 [json_name = "sub-timeslot-granula"];
      }
      repeated CardAttribute card_attribute = 1 [json_name = "card-attribute"];
   }
   CardAttributes card_attributes = 4 [json_name = "card-attributes"];
   message Groups {
      message Group {
         uint32 index = 1 [json_name = "index"];
         uint32 number4 = 2 [json_name = "number"];
         bool padding_enable = 3 [json_name = "padding-enable"];
         bool timeslot_negotiation_enable = 4 [json_name = "timeslot-negotiation-enable"];
         string total_bandwidth = 5 [json_name = "total-bandwidth"];
         string left_bandwidth = 6 [json_name = "left-bandwidth"];
         message PhysicalPorts {
            message PhysicalPort {
               string port_position = 1 [json_name = "port-position"];
            }
            repeated PhysicalPort physical_port = 1 [json_name = "physical-port"];
         }
         PhysicalPorts physical_ports = 7 [json_name = "physical-ports"];
         enum Padding {
            Padding_DISABLE = 0;
            Padding_ENABLE = 1;
            Padding_AUTO = 2;
         };
         Padding padding = 8 [json_name = "padding"];
      }
      repeated Group group = 1 [json_name = "group"];
   }
   Groups groups = 5 [json_name = "groups"];
   message PhysicalPorts {
      message PhysicalPort {
         string position = 1 [json_name = "position"];
         bool mode_enable = 2 [json_name = "mode-enable"];
         message PhysicalAttribute {
            uint32 number5 = 1 [json_name = "number"];
            bool dcn_auto_nego_enable = 2 [json_name = "dcn-auto-nego-enable"];
            enum MngChannelMode {
               MngChannelMode_UNION = 0;
               MngChannelMode_SECTION = 1;
               MngChannelMode_SHIM2SHIM = 2;
               MngChannelMode_SHIM2SHIMOP2 = 3;
            };
            MngChannelMode mng_channel_mode = 3 [json_name = "mng-channel-mode"];
            uint32 number_to_receive = 4 [json_name = "number-to-receive"];
            bool padding_enable = 5 [json_name = "padding-enable"];
            string idle_timeslot = 6 [json_name = "idle-timeslot"];
            string idle_sub_timeslot = 7 [json_name = "idle-sub-timeslot"];
            string used_timeslot = 8 [json_name = "used-timeslot"];
            string used_sub_timeslot = 9 [json_name = "used-sub-timeslot"];
            string sub_timeslot_scope = 10 [json_name = "sub-timeslot-scope"];
            enum PhysicalMode {
               PhysicalMode_FLEXE = 0;
               PhysicalMode_ETHERNET = 1;
            };
            PhysicalMode physical_mode = 11 [json_name = "physical-mode"];
            string card_position = 13 [json_name = "card-position"];
         }
         PhysicalAttribute physical_attribute = 3 [json_name = "physical-attribute"];
         message FlexeRelations {
            message FlexeRelation {
               string port_name = 1 [json_name = "port-name"];
               string binding_timeslot = 2 [json_name = "binding-timeslot"];
            }
            repeated FlexeRelation flexe_relation = 1 [json_name = "flexe-relation"];
         }
         FlexeRelations flexe_relations = 4 [json_name = "flexe-relations"];
      }
      repeated PhysicalPort physical_port = 1 [json_name = "physical-port"];
   }
   PhysicalPorts physical_ports = 6 [json_name = "physical-ports"];
   message Clients {
      message Client {
         uint32 index = 1 [json_name = "index"];
         uint32 group_index = 2 [json_name = "group-index"];
         enum BusinessType {
            BusinessType_CROSS = 0;
            BusinessType_FULLX_FUNCTION = 1;
         };
         BusinessType business_type = 3 [json_name = "business-type"];
         uint32 port_id = 4 [json_name = "port-id"];
         uint32 id = 5 [json_name = "id"];
         uint32 min_avail_bandwidth = 6 [json_name = "min-avail-bandwidth"];
         string port_name = 7 [json_name = "port-name"];
         string bandwidth_value = 8 [json_name = "bandwidth-value"];
         message BindingType_Bandwidth {
            message BindingBandwidth {
               string bandwidth6 = 1 [json_name = "bandwidth"];
            }
            BindingBandwidth binding_bandwidth = 1 [json_name = "binding-bandwidth"];
         }
         message BindingType_Timeslots {
            message BindingTimeslots {
               message BindingTimeslot {
                  string physical_port_name = 1 [json_name = "physical-port-name"];
                  message BindingTimeslot7_BigTimeslot {
                     string timeslot = 1 [json_name = "timeslot"];
                  }
                  message BindingTimeslot7_SubTimeslot {
                     uint32 big_timeslot = 1 [json_name = "big-timeslot"];
                     string sub_timeslot = 2 [json_name = "sub-timeslot"];
                     string sub_timeslot_scope = 3 [json_name = "sub-timeslot-scope"];
                  }
                  oneof BindingTimeslot7 {
                     BindingTimeslot7_BigTimeslot binding_timeslot_big_timeslot = 2 [json_name = "big-timeslot"];
                     BindingTimeslot7_SubTimeslot binding_timeslot_sub_timeslot = 3 [json_name = "sub-timeslot"];
                  }
               }
               repeated BindingTimeslot binding_timeslot = 1 [json_name = "binding-timeslot"];
            }
            BindingTimeslots binding_timeslots = 1 [json_name = "binding-timeslots"];
         }
         oneof BindingType {
            BindingType_Bandwidth binding_type_bandwidth = 9 [json_name = "bandwidth"];
            BindingType_Timeslots binding_type_timeslots = 10 [json_name = "timeslots"];
         }
      }
      repeated Client client = 1 [json_name = "client"];
   }
   Clients clients = 7 [json_name = "clients"];
}


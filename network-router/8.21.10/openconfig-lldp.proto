syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-31 09:28:06
// ProtoYang-version 1
// module openconfig-lldp
// revision 2018-11-21
// revision 2018-07-17
// revision 2016-05-16
// namespace http://openconfig.net/yang/lldp

package openconfig_lldp;

message Lldp {
   message Config {
      string chassis_id = 1 [json_name = "chassis-id"];
      enum ChassisIdType {
         ChassisIdType_CHASSIS_COMPONENT = 0;
         ChassisIdType_INTERFACE_ALIAS = 1;
         ChassisIdType_INTERFACE_NAME = 2;
         ChassisIdType_LOCAL = 3;
         ChassisIdType_MAC_ADDRESS = 4;
         ChassisIdType_NETWORK_ADDRESS = 5;
         ChassisIdType_PORT_COMPONENT = 6;
      };
      ChassisIdType chassis_id_type = 2 [json_name = "chassis-id-type"];
      bool enabled = 3 [json_name = "enabled"];
      uint64 hello_timer = 4 [json_name = "hello-timer"];
      repeated string suppress_tlv_advertisement = 5 [json_name = "suppress-tlv-advertisement"];
      string system_description = 6 [json_name = "system-description"];
      string system_name = 7 [json_name = "system-name"];
   }
   Config config = 1 [json_name = "config"];
   message Interfaces {
      message Interface {
         message Config {
            bool enabled = 1 [json_name = "enabled"];
            string name = 2 [json_name = "name"];
         }
         Config config = 1 [json_name = "config"];
         string name = 2 [json_name = "name"];
         message Neighbors {
            message Neighbor {
               message Capabilities {
                  message Capability {
                     message Config {
                     }
                     Config config = 1 [json_name = "config"];
                     string name = 2 [json_name = "name"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        string name = 2 [json_name = "name"];
                     }
                     State state = 3 [json_name = "state"];
                  }
                  repeated Capability capability = 1 [json_name = "capability"];
               }
               Capabilities capabilities = 1 [json_name = "capabilities"];
               message Config {
               }
               Config config = 2 [json_name = "config"];
               message CustomTlvs {
                  message Tlv {
                     message Config {
                     }
                     Config config = 1 [json_name = "config"];
                     string oui = 2 [json_name = "oui"];
                     string oui_subtype = 3 [json_name = "oui-subtype"];
                     message State {
                        string oui = 1 [json_name = "oui"];
                        string oui_subtype = 2 [json_name = "oui-subtype"];
                        int32 type = 3 [json_name = "type"];
                        bytes value = 4 [json_name = "value"];
                     }
                     State state = 4 [json_name = "state"];
                     int32 type = 5 [json_name = "type"];
                  }
                  repeated Tlv tlv = 1 [json_name = "tlv"];
               }
               CustomTlvs custom_tlvs = 3 [json_name = "custom-tlvs"];
               string id = 4 [json_name = "id"];
               message State {
                  uint64 age = 1 [json_name = "age"];
                  string chassis_id = 2 [json_name = "chassis-id"];
                  enum ChassisIdType {
                     ChassisIdType_CHASSIS_COMPONENT = 0;
                     ChassisIdType_INTERFACE_ALIAS = 1;
                     ChassisIdType_INTERFACE_NAME = 2;
                     ChassisIdType_LOCAL = 3;
                     ChassisIdType_MAC_ADDRESS = 4;
                     ChassisIdType_NETWORK_ADDRESS = 5;
                     ChassisIdType_PORT_COMPONENT = 6;
                  };
                  ChassisIdType chassis_id_type = 3 [json_name = "chassis-id-type"];
                  string id = 4 [json_name = "id"];
                  int64 last_update = 5 [json_name = "last-update"];
                  string management_address = 6 [json_name = "management-address"];
                  string management_address_type = 7 [json_name = "management-address-type"];
                  string port_description = 8 [json_name = "port-description"];
                  string port_id = 9 [json_name = "port-id"];
                  enum PortIdType {
                     PortIdType_AGENT_CIRCUIT_ID = 0;
                     PortIdType_INTERFACE_ALIAS = 1;
                     PortIdType_INTERFACE_NAME = 2;
                     PortIdType_LOCAL = 3;
                     PortIdType_MAC_ADDRESS = 4;
                     PortIdType_NETWORK_ADDRESS = 5;
                     PortIdType_PORT_COMPONENT = 6;
                  };
                  PortIdType port_id_type = 10 [json_name = "port-id-type"];
                  string system_description = 11 [json_name = "system-description"];
                  string system_name = 12 [json_name = "system-name"];
                  uint32 ttl = 13 [json_name = "ttl"];
               }
               State state = 5 [json_name = "state"];
            }
            repeated Neighbor neighbor = 1 [json_name = "neighbor"];
         }
         Neighbors neighbors = 3 [json_name = "neighbors"];
         message State {
            message Counters {
               uint64 frame_discard = 1 [json_name = "frame-discard"];
               uint64 frame_error_in = 2 [json_name = "frame-error-in"];
               uint64 frame_error_out = 3 [json_name = "frame-error-out"];
               uint64 frame_in = 4 [json_name = "frame-in"];
               uint64 frame_out = 5 [json_name = "frame-out"];
               string last_clear = 6 [json_name = "last-clear"];
               uint64 tlv_discard = 7 [json_name = "tlv-discard"];
               uint64 tlv_unknown = 8 [json_name = "tlv-unknown"];
            }
            Counters counters = 1 [json_name = "counters"];
            bool enabled = 2 [json_name = "enabled"];
            string name = 3 [json_name = "name"];
         }
         State state = 4 [json_name = "state"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 2 [json_name = "interfaces"];
   message State {
      string chassis_id = 1 [json_name = "chassis-id"];
      enum ChassisIdType {
         ChassisIdType_CHASSIS_COMPONENT = 0;
         ChassisIdType_INTERFACE_ALIAS = 1;
         ChassisIdType_INTERFACE_NAME = 2;
         ChassisIdType_LOCAL = 3;
         ChassisIdType_MAC_ADDRESS = 4;
         ChassisIdType_NETWORK_ADDRESS = 5;
         ChassisIdType_PORT_COMPONENT = 6;
      };
      ChassisIdType chassis_id_type = 2 [json_name = "chassis-id-type"];
      message Counters {
         uint64 entries_aged_out = 1 [json_name = "entries-aged-out"];
         uint64 frame_discard = 2 [json_name = "frame-discard"];
         uint64 frame_error_in = 3 [json_name = "frame-error-in"];
         uint64 frame_in = 4 [json_name = "frame-in"];
         uint64 frame_out = 5 [json_name = "frame-out"];
         string last_clear = 6 [json_name = "last-clear"];
         uint64 tlv_accepted = 7 [json_name = "tlv-accepted"];
         uint64 tlv_discard = 8 [json_name = "tlv-discard"];
         uint64 tlv_unknown = 9 [json_name = "tlv-unknown"];
      }
      Counters counters = 3 [json_name = "counters"];
      bool enabled = 4 [json_name = "enabled"];
      uint64 hello_timer = 5 [json_name = "hello-timer"];
      repeated string suppress_tlv_advertisement = 6 [json_name = "suppress-tlv-advertisement"];
      string system_description = 7 [json_name = "system-description"];
      string system_name = 8 [json_name = "system-name"];
   }
   State state = 3 [json_name = "state"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-21 15:14:51
// ProtoYang-version 1
// module huawei-socket
// revision 2022-02-09
// revision 2022-01-20
// revision 2020-12-15
// revision 2020-03-06
// namespace urn:huawei:yang:huawei-socket

package huawei_socket;

message Socket {
   message TcpGlobal {
      uint32 tcp_fin_timeout = 1 [json_name = "tcp-fin-timeout"];
      uint32 tcp_syn_timeout = 2 [json_name = "tcp-syn-timeout"];
      uint32 tcp_window = 3 [json_name = "tcp-window"];
      uint32 tcp6_fin_timeout = 4 [json_name = "tcp6-fin-timeout"];
      uint32 tcp6_syn_timeout = 5 [json_name = "tcp6-syn-timeout"];
      uint32 tcp6_window = 6 [json_name = "tcp6-window"];
      uint32 tcp_max_mss = 7 [json_name = "tcp-max-mss"];
      uint32 tcp6_max_mss = 8 [json_name = "tcp6-max-mss"];
      uint32 tcp_min_mss = 9 [json_name = "tcp-min-mss"];
      uint32 tcp6_min_mss = 10 [json_name = "tcp6-min-mss"];
      uint32 tcp_pathmtu_timeout = 11 [json_name = "tcp-pathmtu-timeout"];
   }
   TcpGlobal tcp_global = 1 [json_name = "tcp-global"];
   message TcpInfos {
      message TcpInfo {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         uint32 socket_id = 2 [json_name = "socket-id"];
         string cid = 3 [json_name = "cid"];
         string local_addr = 4 [json_name = "local-addr"];
         uint32 local_port = 5 [json_name = "local-port"];
         string remote_addr = 6 [json_name = "remote-addr"];
         uint32 remote_port = 7 [json_name = "remote-port"];
         enum TcpState {
            INVALID_ENUM_VALUE_TcpState = 0;
            TcpState_CLOSED = 1;
            TcpState_LISTEN = 2;
            TcpState_SYNX_SENT = 3;
            TcpState_SYNX_RECEIVED = 4;
            TcpState_ESTABLISHED = 5;
            TcpState_CLOSEX_WAIT = 6;
            TcpState_FINX_WAITX_1 = 7;
            TcpState_CLOSING = 8;
            TcpState_LASTX_ACK = 9;
            TcpState_FINX_WAITX_2 = 10;
            TcpState_TIMEX_WAIT = 11;
         };
         TcpState tcp_state = 8 [json_name = "tcp-state"];
      }
      repeated TcpInfo tcp_info = 1 [json_name = "tcp-info"];
   }
   TcpInfos tcp_infos = 2 [json_name = "tcp-infos"];
   message UdpInfos {
      message UdpInfo {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         uint32 socket_id = 2 [json_name = "socket-id"];
         string cid = 3 [json_name = "cid"];
         string local_addr = 4 [json_name = "local-addr"];
         uint32 local_port = 5 [json_name = "local-port"];
         string remote_addr = 6 [json_name = "remote-addr"];
         uint32 remote_port = 7 [json_name = "remote-port"];
         uint32 fenode = 8 [json_name = "fenode"];
      }
      repeated UdpInfo udp_info = 1 [json_name = "udp-info"];
   }
   UdpInfos udp_infos = 3 [json_name = "udp-infos"];
   message RawipInfos {
      message RawipInfo {
         uint32 socket_id = 1 [json_name = "socket-id"];
         string cid = 2 [json_name = "cid"];
         string local_addr = 3 [json_name = "local-addr"];
         string remote_addr = 4 [json_name = "remote-addr"];
      }
      repeated RawipInfo rawip_info = 1 [json_name = "rawip-info"];
   }
   RawipInfos rawip_infos = 4 [json_name = "rawip-infos"];
   message RawlinkInfos {
      message RawlinkInfo {
         uint32 socket_id = 1 [json_name = "socket-id"];
         string cid = 2 [json_name = "cid"];
      }
      repeated RawlinkInfo rawlink_info = 1 [json_name = "rawlink-info"];
   }
   RawlinkInfos rawlink_infos = 5 [json_name = "rawlink-infos"];
   message IpSocketInfos {
      message IpSocketInfo {
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_SOCKETX_STREAM = 1;
            Type_SOCKETX_DGRAM = 2;
            Type_SOCKETX_RAW = 3;
            Type_SOCKETX_RAWLINK = 4;
         };
         Type type = 1 [json_name = "type"];
         string cid = 2 [json_name = "cid"];
         uint32 socket_id = 3 [json_name = "socket-id"];
         uint32 protocol = 4 [json_name = "protocol"];
         string local_addr = 5 [json_name = "local-addr"];
         uint32 local_port = 6 [json_name = "local-port"];
         string remote_addr = 7 [json_name = "remote-addr"];
         uint32 remote_port = 8 [json_name = "remote-port"];
         uint32 snd_buff = 9 [json_name = "snd-buff"];
         uint32 rcv_buff = 10 [json_name = "rcv-buff"];
         uint32 snd_pkt_number = 11 [json_name = "snd-pkt-number"];
         uint32 rcv_pkt_number = 12 [json_name = "rcv-pkt-number"];
         string sock_option = 13 [json_name = "sock-option"];
         string sock_state = 14 [json_name = "sock-state"];
      }
      repeated IpSocketInfo ip_socket_info = 1 [json_name = "ip-socket-info"];
   }
   IpSocketInfos ip_socket_infos = 6 [json_name = "ip-socket-infos"];
   message Ip6SockInfos {
      message Ip6SockInfo {
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_SOCKETX_STREAM = 1;
            Type_SOCKETX_DGRAM = 2;
            Type_SOCKETX_RAW = 3;
            Type_SOCKETX_RAWLINK = 4;
         };
         Type type = 1 [json_name = "type"];
         string cid = 2 [json_name = "cid"];
         uint32 socket_id = 3 [json_name = "socket-id"];
         uint32 protocol = 4 [json_name = "protocol"];
         uint32 local_port = 5 [json_name = "local-port"];
         uint32 remote_port = 6 [json_name = "remote-port"];
         string local_addr = 7 [json_name = "local-addr"];
         string remote_addr = 8 [json_name = "remote-addr"];
         uint32 snd_buff = 9 [json_name = "snd-buff"];
         uint32 rcv_buff = 10 [json_name = "rcv-buff"];
         uint32 snd_pkt_number = 11 [json_name = "snd-pkt-number"];
         uint32 rcv_pkt_number = 12 [json_name = "rcv-pkt-number"];
         string sock_option = 13 [json_name = "sock-option"];
         string sock_state = 14 [json_name = "sock-state"];
      }
      repeated Ip6SockInfo ip6_sock_info = 1 [json_name = "ip6-sock-info"];
   }
   Ip6SockInfos ip6_sock_infos = 7 [json_name = "ip6-sock-infos"];
   message TcpAos {
      message TcpAo {
         string name = 1 [json_name = "name"];
         bool accept_mismatch = 2 [json_name = "accept-mismatch"];
         message Keychains {
            message Keychain {
               string kc_name = 1 [json_name = "kc-name"];
               message KeyIds {
                  message KeyId {
                     uint32 kc_keyid = 1 [json_name = "kc-keyid"];
                     uint32 send_id = 2 [json_name = "send-id"];
                     uint32 receive_id = 3 [json_name = "receive-id"];
                     bool include_tcp_options = 4 [json_name = "include-tcp-options"];
                  }
                  repeated KeyId key_id = 1 [json_name = "key-id"];
               }
               KeyIds key_ids = 2 [json_name = "key-ids"];
            }
            repeated Keychain keychain = 1 [json_name = "keychain"];
         }
         Keychains keychains = 3 [json_name = "keychains"];
      }
      repeated TcpAo tcp_ao = 1 [json_name = "tcp-ao"];
   }
   TcpAos tcp_aos = 8 [json_name = "tcp-aos"];
   message TcpStatisticss {
      message TcpStatistics {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         uint32 rcv_packet = 2 [json_name = "rcv-packet"];
         uint32 rcv_count = 3 [json_name = "rcv-count"];
         uint32 pkt_in_seq = 4 [json_name = "pkt-in-seq"];
         uint32 rcv_win_probe_pkt = 5 [json_name = "rcv-win-probe-pkt"];
         uint32 rcv_win_update_pkt = 6 [json_name = "rcv-win-update-pkt"];
         uint32 rcv_cksum_err = 7 [json_name = "rcv-cksum-err"];
         uint32 rcv_offset_err = 8 [json_name = "rcv-offset-err"];
         uint32 rcv_short_err = 9 [json_name = "rcv-short-err"];
         uint32 rcv_duplicate_pkt = 10 [json_name = "rcv-duplicate-pkt"];
         uint32 rcv_part_dup_pkt = 11 [json_name = "rcv-part-dup-pkt"];
         uint32 rcv_outoforder_pkt = 12 [json_name = "rcv-outoforder-pkt"];
         uint32 rcv_after_win_pkt = 13 [json_name = "rcv-after-win-pkt"];
         uint32 rcv_after_close = 14 [json_name = "rcv-after-close"];
         uint32 rcv_ack_pkt = 15 [json_name = "rcv-ack-pkt"];
         uint32 rcv_dup_ack_pkt = 16 [json_name = "rcv-dup-ack-pkt"];
         uint32 rcv_ack_toomuch = 17 [json_name = "rcv-ack-toomuch"];
         uint32 snd_pkt = 18 [json_name = "snd-pkt"];
         uint32 snd_count = 19 [json_name = "snd-count"];
         uint32 snd_urgent_pkt = 20 [json_name = "snd-urgent-pkt"];
         uint32 snd_reset_pkt = 21 [json_name = "snd-reset-pkt"];
         uint32 snd_win_probe_pkt = 22 [json_name = "snd-win-probe-pkt"];
         uint32 snd_win_update = 23 [json_name = "snd-win-update"];
         uint32 snd_data_pkt = 24 [json_name = "snd-data-pkt"];
         uint32 snd_data_rexmit = 25 [json_name = "snd-data-rexmit"];
         uint32 snd_ack_only_pkt = 26 [json_name = "snd-ack-only-pkt"];
         uint32 rexmit_timeout = 27 [json_name = "rexmit-timeout"];
         uint32 timeout_drop = 28 [json_name = "timeout-drop"];
         uint32 keepalive_timeout = 29 [json_name = "keepalive-timeout"];
         uint32 keepalive_probe = 30 [json_name = "keepalive-probe"];
         uint32 keepalive_drop = 31 [json_name = "keepalive-drop"];
         uint32 conn_attempt = 32 [json_name = "conn-attempt"];
         uint32 accepts = 33 [json_name = "accepts"];
         uint32 connects = 34 [json_name = "connects"];
         uint32 closed = 35 [json_name = "closed"];
         uint32 md5_drop = 36 [json_name = "md5-drop"];
         uint32 md5_pass = 37 [json_name = "md5-pass"];
         uint32 snd_kc_permit = 38 [json_name = "snd-kc-permit"];
         uint32 rcv_kc_permit = 39 [json_name = "rcv-kc-permit"];
         uint32 rcv_kc_drop = 40 [json_name = "rcv-kc-drop"];
         uint32 tcp_ao_pass = 41 [json_name = "tcp-ao-pass"];
         uint32 tcp_ao_drop = 42 [json_name = "tcp-ao-drop"];
         uint32 attempt_fails = 43 [json_name = "attempt-fails"];
         uint32 established_resets = 44 [json_name = "established-resets"];
      }
      repeated TcpStatistics tcp_statistics = 1 [json_name = "tcp-statistics"];
   }
   TcpStatisticss tcp_statisticss = 9 [json_name = "tcp-statisticss"];
   message UdpStatisticss {
      message UdpStatistics {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         uint32 rcv_packets = 2 [json_name = "rcv-packets"];
         uint32 badsum = 3 [json_name = "badsum"];
         uint32 short_error = 4 [json_name = "short-error"];
         uint32 badlen = 5 [json_name = "badlen"];
         uint32 no_port = 6 [json_name = "no-port"];
         uint32 broadcast = 7 [json_name = "broadcast"];
         uint32 full_sock = 8 [json_name = "full-sock"];
         uint32 pcb_cache_miss = 9 [json_name = "pcb-cache-miss"];
         uint32 snd_packets = 10 [json_name = "snd-packets"];
      }
      repeated UdpStatistics udp_statistics = 1 [json_name = "udp-statistics"];
   }
   UdpStatisticss udp_statisticss = 10 [json_name = "udp-statisticss"];
   message TcpStatisticsVerboses {
      message TcpStatisticsVerbose {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_BGP = 1;
            Type_FTP = 2;
            Type_LDP = 3;
            Type_MSDP = 4;
            Type_TELNET = 5;
            Type_SSH = 6;
            Type_PCEP = 7;
            Type_OTHERS = 8;
         };
         Type type = 2 [json_name = "type"];
         uint32 cksum_err = 3 [json_name = "cksum-err"];
         uint32 fmt_err = 4 [json_name = "fmt-err"];
         uint32 no_port = 5 [json_name = "no-port"];
         uint32 md5_err = 6 [json_name = "md5-err"];
         uint32 kc_err = 7 [json_name = "kc-err"];
         uint32 ao_err = 8 [json_name = "ao-err"];
         uint32 out_drop = 9 [json_name = "out-drop"];
      }
      repeated TcpStatisticsVerbose tcp_statistics_verbose = 1 [json_name = "tcp-statistics-verbose"];
   }
   TcpStatisticsVerboses tcp_statistics_verboses = 11 [json_name = "tcp-statistics-verboses"];
   message UdpStatisticsVerboses {
      message UdpStatisticsVerbose {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_LDP = 1;
            Type_DHCP = 2;
            Type_BFD = 3;
            Type_RIP = 4;
            Type_SNMP = 5;
            Type_OTHERS = 6;
         };
         Type type = 2 [json_name = "type"];
         uint32 fmt_err = 3 [json_name = "fmt-err"];
         uint32 cksum_err = 4 [json_name = "cksum-err"];
         uint32 no_port = 5 [json_name = "no-port"];
         uint32 out_drop = 6 [json_name = "out-drop"];
      }
      repeated UdpStatisticsVerbose udp_statistics_verbose = 1 [json_name = "udp-statistics-verbose"];
   }
   UdpStatisticsVerboses udp_statistics_verboses = 12 [json_name = "udp-statistics-verboses"];
   message RawipStatisticss {
      message RawipStatistics {
         enum Family {
            Family_IPV4 = 0;
            Family_IPV6 = 1;
         };
         Family family = 1 [json_name = "family"];
         uint32 rcv_packets = 2 [json_name = "rcv-packets"];
         uint32 pcbcachemiss = 3 [json_name = "pcbcachemiss"];
         uint32 snd_packets = 4 [json_name = "snd-packets"];
      }
      repeated RawipStatistics rawip_statistics = 1 [json_name = "rawip-statistics"];
   }
   RawipStatisticss rawip_statisticss = 13 [json_name = "rawip-statisticss"];
   message RawlinkStatisticss {
      uint32 rcv_packets = 1 [json_name = "rcv-packets"];
      uint32 pcbcachemiss = 2 [json_name = "pcbcachemiss"];
      uint32 snd_packets = 3 [json_name = "snd-packets"];
   }
   RawlinkStatisticss rawlink_statisticss = 14 [json_name = "rawlink-statisticss"];
}


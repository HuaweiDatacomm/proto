syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-24 19:29:49
// ProtoYang-version 1
// module huawei-nqa
// revision 2022-04-24
// revision 2022-03-29
// revision 2022-03-14
// revision 2022-02-21
// revision 2022-02-14
// revision 2022-02-12
// revision 2022-02-11
// revision 2022-02-10
// revision 2022-02-07
// revision 2022-01-27
// revision 2021-12-16
// revision 2021-04-29
// revision 2021-03-19
// revision 2020-09-24
// revision 2020-07-04
// revision 2020-06-30
// revision 2019-10-25
// namespace urn:huawei:yang:huawei-nqa

package huawei_nqa;

message Nqa {
   message Global {
      bool fec_validation_ldp_enable = 1 [json_name = "fec-validation-ldp-enable"];
      bool fec_validation_sr_prefix_enable = 2 [json_name = "fec-validation-sr-prefix-enable"];
      uint32 jitter_tag_version = 3 [json_name = "jitter-tag-version"];
      bool lbm_receive_enable = 4 [json_name = "lbm-receive-enable"];
      bool ltm_receive_enable = 5 [json_name = "ltm-receive-enable"];
      bool gmac_ltm_receive_enable = 6 [json_name = "gmac-ltm-receive-enable"];
      bool lspv_enable = 7 [json_name = "lspv-enable"];
      bool lspv_ipv6_enable = 8 [json_name = "lspv-ipv6-enable"];
      bool lspv_fec_compitable_enable = 9 [json_name = "lspv-fec-compitable-enable"];
      bool gmac_ping_enable = 10 [json_name = "gmac-ping-enable"];
      bool gmac_trace_enable = 11 [json_name = "gmac-trace-enable"];
      message VxlanEchoV4 {
         uint32 port = 1 [json_name = "port"];
         string source_ip_if_name = 2 [json_name = "source-ip-if-name"];
      }
      VxlanEchoV4 vxlan_echo_v4 = 12 [json_name = "vxlan-echo-v4"];
      uint32 lspv_cpu_limit = 13 [json_name = "lspv-cpu-limit"];
      message Bier6Oam {
         uint32 dest_port = 1 [json_name = "dest-port"];
         bool echo_reply_disable = 2 [json_name = "echo-reply-disable"];
         uint32 rate_limit = 3 [json_name = "rate-limit"];
      }
      Bier6Oam bier6_oam = 14 [json_name = "bier6-oam"];
      uint32 test_max_flow_id = 15 [json_name = "test-max-flow-id"];
      uint32 reflector_max_id = 16 [json_name = "reflector-max-id"];
      bool trunk_member_inspect_enable = 17 [json_name = "trunk-member-inspect-enable"];
      bool mtrace_echo_enable = 18 [json_name = "mtrace-echo-enable"];
      message VxlanEchoV6 {
         uint32 port = 1 [json_name = "port"];
         string source_ip_if_name = 2 [json_name = "source-ip-if-name"];
      }
      VxlanEchoV6 vxlan_echo_v6 = 19 [json_name = "vxlan-echo-v6"];
      message IcmpSessionCar {
         bool enable = 1 [json_name = "enable"];
         uint32 cir_interval = 2 [json_name = "cir-interval"];
         uint32 cbs_interval = 3 [json_name = "cbs-interval"];
         uint32 pir_interval = 4 [json_name = "pir-interval"];
         uint32 pbs_interval = 5 [json_name = "pbs-interval"];
      }
      IcmpSessionCar icmp_session_car = 20 [json_name = "icmp-session-car"];
      message Icmpv6SessionCar {
         bool enable = 1 [json_name = "enable"];
         uint32 cir_interval = 2 [json_name = "cir-interval"];
         uint32 cbs_interval = 3 [json_name = "cbs-interval"];
         uint32 pir_interval = 4 [json_name = "pir-interval"];
         uint32 pbs_interval = 5 [json_name = "pbs-interval"];
      }
      Icmpv6SessionCar icmpv6_session_car = 21 [json_name = "icmpv6-session-car"];
   }
   Global global = 1 [json_name = "global"];
   message Server {
      message IcmpServers {
         message IcmpServer {
            string server_address = 1 [json_name = "server-address"];
            string ni_name = 2 [json_name = "ni-name"];
         }
         repeated IcmpServer icmp_server = 1 [json_name = "icmp-server"];
      }
      IcmpServers icmp_servers = 1 [json_name = "icmp-servers"];
      message UdpServers {
         message UdpServer {
            string server_address = 1 [json_name = "server-address"];
            uint32 server_port = 2 [json_name = "server-port"];
            string ni_name = 3 [json_name = "ni-name"];
         }
         repeated UdpServer udp_server = 1 [json_name = "udp-server"];
      }
      UdpServers udp_servers = 2 [json_name = "udp-servers"];
      message TcpServers {
         message TcpServer {
            string server_address = 1 [json_name = "server-address"];
            uint32 server_port = 2 [json_name = "server-port"];
            string ni_name = 3 [json_name = "ni-name"];
         }
         repeated TcpServer tcp_server = 1 [json_name = "tcp-server"];
      }
      TcpServers tcp_servers = 3 [json_name = "tcp-servers"];
   }
   Server server = 2 [json_name = "server"];
   message Record {
      message Results {
         message Result {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completions {
               Completions_SUCCESS = 0;
               Completions_FAILED = 1;
               Completions_NOX_RESULT = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 5 [json_name = "completions"];
            uint32 sent_probes = 6 [json_name = "sent-probes"];
            uint32 response_probes = 7 [json_name = "response-probes"];
            uint32 rtd_thresholds = 8 [json_name = "rtd-thresholds"];
            uint32 test_attempts = 9 [json_name = "test-attempts"];
            uint32 drops = 10 [json_name = "drops"];
            uint32 disconnects = 11 [json_name = "disconnects"];
            uint32 timeouts = 12 [json_name = "timeouts"];
            uint32 busies = 13 [json_name = "busies"];
            uint32 no_connections = 14 [json_name = "no-connections"];
            uint32 sequence_errors = 15 [json_name = "sequence-errors"];
            uint32 rtt_status_errors = 16 [json_name = "rtt-status-errors"];
            string dest_address = 17 [json_name = "dest-address"];
            uint32 rtt_min = 18 [json_name = "rtt-min"];
            uint32 rtt_average = 19 [json_name = "rtt-average"];
            uint32 rtt_max = 20 [json_name = "rtt-max"];
            uint32 rtt_sum = 21 [json_name = "rtt-sum"];
            uint64 rtt_sum_square = 22 [json_name = "rtt-sum-square"];
            uint32 packet_loss_ratio = 23 [json_name = "packet-loss-ratio"];
            string last_probe_time = 24 [json_name = "last-probe-time"];
            string begin_time = 25 [json_name = "begin-time"];
            string end_time = 26 [json_name = "end-time"];
         }
         repeated Result result = 1 [json_name = "result"];
      }
      Results results = 1 [json_name = "results"];
      message TraceResults {
         message TraceResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completions {
               Completions_SUCCESS = 0;
               Completions_FAILED = 1;
               Completions_NOX_RESULT = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 5 [json_name = "completions"];
            uint32 disconnects = 6 [json_name = "disconnects"];
            uint32 test_attempts = 7 [json_name = "test-attempts"];
            uint32 timeouts = 8 [json_name = "timeouts"];
            uint32 busies = 9 [json_name = "busies"];
            uint32 no_connections = 10 [json_name = "no-connections"];
            uint32 sequence_errors = 11 [json_name = "sequence-errors"];
            uint32 rtt_status_errors = 12 [json_name = "rtt-status-errors"];
            uint32 drops = 13 [json_name = "drops"];
            message Hops {
               message Hop {
                  uint32 index = 1 [json_name = "index"];
                  uint32 sent_probes = 2 [json_name = "sent-probes"];
                  uint32 response_probes = 3 [json_name = "response-probes"];
                  uint32 rtt_min = 4 [json_name = "rtt-min"];
                  uint32 rtt_average = 5 [json_name = "rtt-average"];
                  uint32 rtt_max = 6 [json_name = "rtt-max"];
                  uint32 rtt_sum = 7 [json_name = "rtt-sum"];
                  uint64 rtt_sum_square = 8 [json_name = "rtt-sum-square"];
                  uint32 rtd_thresholds = 9 [json_name = "rtd-thresholds"];
                  string last_probe_time = 10 [json_name = "last-probe-time"];
                  string dest_address = 11 [json_name = "dest-address"];
                  uint32 packet_loss_ratio = 12 [json_name = "packet-loss-ratio"];
               }
               repeated Hop hop = 1 [json_name = "hop"];
            }
            Hops hops = 14 [json_name = "hops"];
            string last_good_path = 15 [json_name = "last-good-path"];
         }
         repeated TraceResult trace_result = 1 [json_name = "trace-result"];
      }
      TraceResults trace_results = 2 [json_name = "trace-results"];
      message JitterResults {
         message JitterResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completions {
               Completions_SUCCESS = 0;
               Completions_FAILED = 1;
               Completions_NOX_RESULT = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 5 [json_name = "completions"];
            uint32 sent_probes = 6 [json_name = "sent-probes"];
            uint32 response_probes = 7 [json_name = "response-probes"];
            uint32 rtd_over_threshold_num = 8 [json_name = "rtd-over-threshold-num"];
            uint32 sd_owd_over_threshold_num = 9 [json_name = "sd-owd-over-threshold-num"];
            uint32 ds_owd_over_threshold_num = 10 [json_name = "ds-owd-over-threshold-num"];
            uint32 rtt_min = 11 [json_name = "rtt-min"];
            uint32 rtt_average = 12 [json_name = "rtt-average"];
            uint32 rtt_max = 13 [json_name = "rtt-max"];
            uint32 rtt_sum = 14 [json_name = "rtt-sum"];
            uint64 rtt_square_sum = 15 [json_name = "rtt-square-sum"];
            uint32 num_of_rtt = 16 [json_name = "num-of-rtt"];
            uint32 drop_num = 17 [json_name = "drop-num"];
            uint32 sequence_error_num = 18 [json_name = "sequence-error-num"];
            uint32 rtt_status_error_num = 19 [json_name = "rtt-status-error-num"];
            uint32 busy_num = 20 [json_name = "busy-num"];
            uint32 timeout_num = 21 [json_name = "timeout-num"];
            uint32 src2dst_min_positive_jitter = 22 [json_name = "src2dst-min-positive-jitter"];
            uint32 src2dst_max_positive_jitter = 23 [json_name = "src2dst-max-positive-jitter"];
            uint32 src2dst_positive_jitter_num = 24 [json_name = "src2dst-positive-jitter-num"];
            uint32 src2dst_positive_jitter_sum = 25 [json_name = "src2dst-positive-jitter-sum"];
            uint64 src2dst_positive_jit_square_sum = 26 [json_name = "src2dst-positive-jit-square-sum"];
            uint32 src2dst_min_negative_jitter = 27 [json_name = "src2dst-min-negative-jitter"];
            uint32 src2dst_max_negative_jitter = 28 [json_name = "src2dst-max-negative-jitter"];
            uint32 src2dst_negative_jitter_num = 29 [json_name = "src2dst-negative-jitter-num"];
            uint32 src2dst_negative_jitter_sum = 30 [json_name = "src2dst-negative-jitter-sum"];
            uint64 src2dst_negative_jit_square_sum = 31 [json_name = "src2dst-negative-jit-square-sum"];
            uint32 dst2src_min_positive_jitter = 32 [json_name = "dst2src-min-positive-jitter"];
            uint32 dst2src_max_positive_jitter = 33 [json_name = "dst2src-max-positive-jitter"];
            uint32 dst2src_positive_jitter_num = 34 [json_name = "dst2src-positive-jitter-num"];
            uint32 dst2src_positive_jitter_sum = 35 [json_name = "dst2src-positive-jitter-sum"];
            uint32 dst2src_positive_jit_square_sum = 36 [json_name = "dst2src-positive-jit-square-sum"];
            uint32 dst2src_min_negative_jitter = 37 [json_name = "dst2src-min-negative-jitter"];
            uint32 dst2src_max_negative_jitter = 38 [json_name = "dst2src-max-negative-jitter"];
            uint32 dst2src_negative_jitter_num = 39 [json_name = "dst2src-negative-jitter-num"];
            uint32 dst2src_negative_jitter_sum = 40 [json_name = "dst2src-negative-jitter-sum"];
            uint32 dst2src_negative_jit_square_num = 41 [json_name = "dst2src-negative-jit-square-num"];
            uint32 src2dst_min_delay = 42 [json_name = "src2dst-min-delay"];
            uint32 src2dst_avg_delay = 43 [json_name = "src2dst-avg-delay"];
            uint32 src2dst_max_delay = 44 [json_name = "src2dst-max-delay"];
            uint64 src2dst_delay_square_sum = 45 [json_name = "src2dst-delay-square-sum"];
            uint32 dst2src_min_delay = 46 [json_name = "dst2src-min-delay"];
            uint32 dst2src_avg_delay = 47 [json_name = "dst2src-avg-delay"];
            uint32 dst2src_max_delay = 48 [json_name = "dst2src-max-delay"];
            uint32 dst2src_delay_square_sum = 49 [json_name = "dst2src-delay-square-sum"];
            uint32 src2dst_packet_loss_num = 50 [json_name = "src2dst-packet-loss-num"];
            uint32 dst2src_packet_loss_num = 51 [json_name = "dst2src-packet-loss-num"];
            uint32 unknown_reason_packet_loss_num = 52 [json_name = "unknown-reason-packet-loss-num"];
            uint32 average_jitter = 53 [json_name = "average-jitter"];
            uint32 src2dst_average_jitter = 54 [json_name = "src2dst-average-jitter"];
            uint32 dst2src_average_jitter = 55 [json_name = "dst2src-average-jitter"];
            string average_jitter_out = 56 [json_name = "average-jitter-out"];
            string average_jitter_in = 57 [json_name = "average-jitter-in"];
            uint32 num_of_owd = 58 [json_name = "num-of-owd"];
            uint32 packet_loss_ratio = 59 [json_name = "packet-loss-ratio"];
            uint32 src2dst_owd_sum = 60 [json_name = "src2dst-owd-sum"];
            uint32 dst2src_owd_sum = 61 [json_name = "dst2src-owd-sum"];
            uint32 icpif = 62 [json_name = "icpif"];
            uint32 mos_cq = 63 [json_name = "mos-cq"];
            enum TimeUnit {
               TimeUnit_MS = 0;
               TimeUnit_US = 1;
            };
            TimeUnit time_unit = 64 [json_name = "time-unit"];
            uint32 attempts_num = 65 [json_name = "attempts-num"];
            uint32 disconnect_operation_num = 66 [json_name = "disconnect-operation-num"];
            uint32 connection_fail_num = 67 [json_name = "connection-fail-num"];
            string dest_address = 68 [json_name = "dest-address"];
            string last_good_probe_time = 69 [json_name = "last-good-probe-time"];
            uint32 packet_rewrite_num = 70 [json_name = "packet-rewrite-num"];
            uint32 packet_rewrite_ratio = 71 [json_name = "packet-rewrite-ratio"];
            uint32 packet_disorder_num = 72 [json_name = "packet-disorder-num"];
            uint32 packet_disorder_ratio = 73 [json_name = "packet-disorder-ratio"];
            uint32 fragment_disorder_num = 74 [json_name = "fragment-disorder-num"];
            uint32 fragment_disorder_ratio = 75 [json_name = "fragment-disorder-ratio"];
            uint32 jitter_overthresholds_sd_num = 76 [json_name = "jitter-overthresholds-sd-num"];
            uint32 jitter_overthresholds_ds_num = 77 [json_name = "jitter-overthresholds-ds-num"];
            uint32 overalloverthresholds_num = 78 [json_name = "overalloverthresholds-num"];
         }
         repeated JitterResult jitter_result = 1 [json_name = "jitter-result"];
      }
      JitterResults jitter_results = 3 [json_name = "jitter-results"];
      message ArpPingIpResults {
         message ArpPingIpResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completion {
               Completion_SUCCESS = 0;
               Completion_FAILED = 1;
               Completion_NOX_RESULT = 2;
               Completion_NEGOTIATEX_FAILED = 3;
            };
            Completion completion = 5 [json_name = "completion"];
            uint32 sent_probes = 6 [json_name = "sent-probes"];
            uint32 response_probes = 7 [json_name = "response-probes"];
            uint32 test_attempts = 8 [json_name = "test-attempts"];
            uint32 drops = 9 [json_name = "drops"];
            uint32 timeouts = 10 [json_name = "timeouts"];
            uint32 busies = 11 [json_name = "busies"];
            string dest_mac_address = 12 [json_name = "dest-mac-address"];
            string last_probe_time = 13 [json_name = "last-probe-time"];
         }
         repeated ArpPingIpResult arp_ping_ip_result = 1 [json_name = "arp-ping-ip-result"];
      }
      ArpPingIpResults arp_ping_ip_results = 4 [json_name = "arp-ping-ip-results"];
      message MultiPathResults {
         message MultiPathResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            uint32 path_index = 4 [json_name = "path-index"];
            uint32 preference = 5 [json_name = "preference"];
            enum PathType {
               PathType_UNKNOWN = 0;
               PathType_MAINX_PATH = 1;
               PathType_BACKUPX_PATH = 2;
            };
            PathType path_type = 6 [json_name = "path-type"];
            enum ProtocolOrigin {
               INVALID_ENUM_VALUE_ProtocolOrigin = 0;
               ProtocolOrigin_PECP = 10;
               ProtocolOrigin_BGP = 20;
               ProtocolOrigin_LOCAL = 30;
               ProtocolOrigin_UNKNOWN = 255;
            };
            ProtocolOrigin protocol_origin = 7 [json_name = "protocol-origin"];
            uint32 asn = 8 [json_name = "asn"];
            string node_address = 9 [json_name = "node-address"];
            uint32 discriminator = 10 [json_name = "discriminator"];
            uint32 segment_list_id = 11 [json_name = "segment-list-id"];
            uint32 xc_index = 12 [json_name = "xc-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 13 [json_name = "status"];
            enum Completions {
               Completions_NOX_RESULT = 0;
               Completions_SUCCESS = 1;
               Completions_FAILED = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 14 [json_name = "completions"];
            uint32 sent_probes = 15 [json_name = "sent-probes"];
            uint32 response_probes = 16 [json_name = "response-probes"];
            uint32 rtd_over_threshold_num = 17 [json_name = "rtd-over-threshold-num"];
            uint32 test_attempts_num = 18 [json_name = "test-attempts-num"];
            uint32 drop_num = 19 [json_name = "drop-num"];
            uint32 disconnect_operation_num = 20 [json_name = "disconnect-operation-num"];
            uint32 timeout_num = 21 [json_name = "timeout-num"];
            uint32 busy_num = 22 [json_name = "busy-num"];
            uint32 connection_fail_num = 23 [json_name = "connection-fail-num"];
            uint32 sequence_error_num = 24 [json_name = "sequence-error-num"];
            uint32 rtt_status_error_num = 25 [json_name = "rtt-status-error-num"];
            string dest_address = 26 [json_name = "dest-address"];
            uint32 rtt_min = 27 [json_name = "rtt-min"];
            uint32 rtt_average = 28 [json_name = "rtt-average"];
            uint32 rtt_max = 29 [json_name = "rtt-max"];
            uint32 rtt_sum = 30 [json_name = "rtt-sum"];
            uint64 rtt_square_sum = 31 [json_name = "rtt-square-sum"];
            uint32 packet_loss_ratio = 32 [json_name = "packet-loss-ratio"];
            string last_probe_time = 33 [json_name = "last-probe-time"];
         }
         repeated MultiPathResult multi_path_result = 1 [json_name = "multi-path-result"];
      }
      MultiPathResults multi_path_results = 5 [json_name = "multi-path-results"];
      message TraceMultiPathResults {
         message TraceMultiPathResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            uint32 path_index = 4 [json_name = "path-index"];
            uint32 preference = 5 [json_name = "preference"];
            enum PathType {
               PathType_UNKNOWN = 0;
               PathType_MAINX_PATH = 1;
               PathType_BACKUPX_PATH = 2;
            };
            PathType path_type = 6 [json_name = "path-type"];
            enum ProtocolOrigin {
               INVALID_ENUM_VALUE_ProtocolOrigin = 0;
               ProtocolOrigin_PECP = 10;
               ProtocolOrigin_BGP = 20;
               ProtocolOrigin_LOCAL = 30;
               ProtocolOrigin_UNKNOWN = 255;
            };
            ProtocolOrigin protocol_origin = 7 [json_name = "protocol-origin"];
            uint32 asn = 8 [json_name = "asn"];
            string node_address = 9 [json_name = "node-address"];
            uint32 discriminator = 10 [json_name = "discriminator"];
            uint32 segment_list_id = 11 [json_name = "segment-list-id"];
            uint32 xc_index = 12 [json_name = "xc-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 13 [json_name = "status"];
            enum Completions {
               Completions_NOX_RESULT = 0;
               Completions_SUCCESS = 1;
               Completions_FAILED = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 14 [json_name = "completions"];
            uint32 disconnect_operation_num = 15 [json_name = "disconnect-operation-num"];
            uint32 test_attempts_num = 16 [json_name = "test-attempts-num"];
            uint32 timeout_num = 17 [json_name = "timeout-num"];
            uint32 busy_num = 18 [json_name = "busy-num"];
            uint32 connection_fail_num = 19 [json_name = "connection-fail-num"];
            uint32 sequence_error_num = 20 [json_name = "sequence-error-num"];
            uint32 rtt_status_error_num = 21 [json_name = "rtt-status-error-num"];
            uint32 drop_num = 22 [json_name = "drop-num"];
            message Hops {
               message Hop {
                  uint32 index = 1 [json_name = "index"];
                  uint32 sent_probes = 2 [json_name = "sent-probes"];
                  uint32 response_probes = 3 [json_name = "response-probes"];
                  uint32 rtt_min = 4 [json_name = "rtt-min"];
                  uint32 rtt_average = 5 [json_name = "rtt-average"];
                  uint32 rtt_max = 6 [json_name = "rtt-max"];
                  uint32 rtt_sum = 7 [json_name = "rtt-sum"];
                  uint64 rtt_square_sum = 8 [json_name = "rtt-square-sum"];
                  uint32 rtd_over_threshold_num = 9 [json_name = "rtd-over-threshold-num"];
                  string last_probe_time = 10 [json_name = "last-probe-time"];
                  string dest_address = 11 [json_name = "dest-address"];
                  uint32 packet_loss_ratio = 12 [json_name = "packet-loss-ratio"];
               }
               repeated Hop hop = 1 [json_name = "hop"];
            }
            Hops hops = 23 [json_name = "hops"];
         }
         repeated TraceMultiPathResult trace_multi_path_result = 1 [json_name = "trace-multi-path-result"];
      }
      TraceMultiPathResults trace_multi_path_results = 6 [json_name = "trace-multi-path-results"];
      message LspJitterResults {
         message LspJitterResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completions {
               Completions_NOX_RESULT = 0;
               Completions_SUCCESS = 1;
               Completions_FAILED = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 5 [json_name = "completions"];
            uint32 sent_probes = 6 [json_name = "sent-probes"];
            uint32 response_probes = 7 [json_name = "response-probes"];
            uint32 rtd_thresholds = 8 [json_name = "rtd-thresholds"];
            uint32 rtt_min = 9 [json_name = "rtt-min"];
            uint32 rtt_max = 10 [json_name = "rtt-max"];
            uint32 rtt_average = 11 [json_name = "rtt-average"];
            uint32 rtt_sum = 12 [json_name = "rtt-sum"];
            uint64 rtt_sum_square = 13 [json_name = "rtt-sum-square"];
            uint32 num_of_rtt = 14 [json_name = "num-of-rtt"];
            uint32 sequence_errors = 15 [json_name = "sequence-errors"];
            uint32 rtt_status_errors = 16 [json_name = "rtt-status-errors"];
            uint32 busies = 17 [json_name = "busies"];
            uint32 timeouts = 18 [json_name = "timeouts"];
            uint32 drops = 19 [json_name = "drops"];
            uint32 src2dst_min_positive_jitter = 20 [json_name = "src2dst-min-positive-jitter"];
            uint32 src2dst_max_positive_jitter = 21 [json_name = "src2dst-max-positive-jitter"];
            uint32 src2dst_positive_jitter_num = 22 [json_name = "src2dst-positive-jitter-num"];
            uint32 src2dst_positive_jitter_sum = 23 [json_name = "src2dst-positive-jitter-sum"];
            uint64 src2dst_positive_jit_square_sum = 24 [json_name = "src2dst-positive-jit-square-sum"];
            uint32 src2dst_min_negative_jitter = 25 [json_name = "src2dst-min-negative-jitter"];
            uint32 src2dst_max_negative_jitter = 26 [json_name = "src2dst-max-negative-jitter"];
            uint32 src2dst_negative_jitter_num = 27 [json_name = "src2dst-negative-jitter-num"];
            uint32 src2dst_negative_jitter_sum = 28 [json_name = "src2dst-negative-jitter-sum"];
            uint64 src2dst_negative_jit_square_sum = 29 [json_name = "src2dst-negative-jit-square-sum"];
            uint32 src2dst_average_jitter_num = 30 [json_name = "src2dst-average-jitter-num"];
            uint32 unknown_reason_packet_loss_num = 31 [json_name = "unknown-reason-packet-loss-num"];
            string jitter_out = 32 [json_name = "jitter-out"];
            uint32 packet_loss_ratio = 33 [json_name = "packet-loss-ratio"];
         }
         repeated LspJitterResult lsp_jitter_result = 1 [json_name = "lsp-jitter-result"];
      }
      LspJitterResults lsp_jitter_results = 7 [json_name = "lsp-jitter-results"];
      message PathMtuResults {
         message PathMtuResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 4 [json_name = "status"];
            enum Completions {
               Completions_NOX_RESULT = 0;
               Completions_SUCCESS = 1;
               Completions_FAILED = 2;
               Completions_NEGOTIATEX_FAILED = 3;
            };
            Completions completions = 5 [json_name = "completions"];
            string dest_address = 6 [json_name = "dest-address"];
            uint32 mtu_min = 7 [json_name = "mtu-min"];
            uint32 mtu_max = 8 [json_name = "mtu-max"];
            uint32 mtu = 9 [json_name = "mtu"];
            uint32 step = 10 [json_name = "step"];
            uint32 sent_probes = 11 [json_name = "sent-probes"];
            uint32 response_probes = 12 [json_name = "response-probes"];
            uint32 busies = 13 [json_name = "busies"];
            uint32 drops = 14 [json_name = "drops"];
            uint32 timeouts = 15 [json_name = "timeouts"];
            uint32 optimum_first_step = 16 [json_name = "optimum-first-step"];
         }
         repeated PathMtuResult path_mtu_result = 1 [json_name = "path-mtu-result"];
      }
      PathMtuResults path_mtu_results = 8 [json_name = "path-mtu-results"];
      message PathJitterResults {
         message PathJitterResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum PathJitterStage {
               PathJitterStage_INITIAL = 0;
               PathJitterStage_TRACEX_START = 1;
               PathJitterStage_TRACEX_END = 2;
               PathJitterStage_JITTERX_START = 3;
               PathJitterStage_JITTERX_END = 4;
               PathJitterStage_CLOSE = 5;
            };
            PathJitterStage path_jitter_stage = 4 [json_name = "path-jitter-stage"];
            enum Status {
               Status_RUNNING = 0;
               Status_FINISHED = 1;
            };
            Status status = 5 [json_name = "status"];
            enum TraceCompletions {
               TraceCompletions_SUCCESS = 0;
               TraceCompletions_FAILED = 1;
               TraceCompletions_NOX_RESULT = 2;
               TraceCompletions_NEGOTIATEX_FAILED = 3;
            };
            TraceCompletions trace_completions = 6 [json_name = "trace-completions"];
            message PathJitterHops {
               message PathJitterHop {
                  uint32 index = 1 [json_name = "index"];
                  string dest_address = 2 [json_name = "dest-address"];
                  enum HopJitterCompletions {
                     HopJitterCompletions_SUCCESS = 0;
                     HopJitterCompletions_FAILED = 1;
                     HopJitterCompletions_NOX_RESULT = 2;
                     HopJitterCompletions_NEGOTIATEX_FAILED = 3;
                  };
                  HopJitterCompletions hop_jitter_completions = 3 [json_name = "hop-jitter-completions"];
                  enum HopJitterStatus {
                     HopJitterStatus_RUNNING = 0;
                     HopJitterStatus_FINISHED = 1;
                  };
                  HopJitterStatus hop_jitter_status = 4 [json_name = "hop-jitter-status"];
                  uint32 sent_probes = 5 [json_name = "sent-probes"];
                  uint32 response_probes = 6 [json_name = "response-probes"];
                  uint32 rtt_min = 7 [json_name = "rtt-min"];
                  uint32 rtt_max = 8 [json_name = "rtt-max"];
                  uint32 rtt_average = 9 [json_name = "rtt-average"];
                  uint32 rtt_sum = 10 [json_name = "rtt-sum"];
                  uint64 rtt_square_sum = 11 [json_name = "rtt-square-sum"];
                  uint32 num_of_rtt = 12 [json_name = "num-of-rtt"];
                  uint32 drop_num = 13 [json_name = "drop-num"];
                  uint32 sequence_error_num = 14 [json_name = "sequence-error-num"];
                  uint32 rtt_status_error_num = 15 [json_name = "rtt-status-error-num"];
                  uint32 busy_num = 16 [json_name = "busy-num"];
                  uint32 timeout_num = 17 [json_name = "timeout-num"];
                  uint32 src2dst_min_positive_jitter = 18 [json_name = "src2dst-min-positive-jitter"];
                  uint32 src2dst_max_positive_jitter = 19 [json_name = "src2dst-max-positive-jitter"];
                  uint32 src2dst_positive_jitter_num = 20 [json_name = "src2dst-positive-jitter-num"];
                  uint32 src2dst_positive_jitter_sum = 21 [json_name = "src2dst-positive-jitter-sum"];
                  uint64 src2dst_positive_jit_square_sum = 22 [json_name = "src2dst-positive-jit-square-sum"];
                  uint32 src2dst_min_negative_jitter = 23 [json_name = "src2dst-min-negative-jitter"];
                  uint32 src2dst_max_negative_jitter = 24 [json_name = "src2dst-max-negative-jitter"];
                  uint32 src2dst_negative_jitter_num = 25 [json_name = "src2dst-negative-jitter-num"];
                  uint32 src2dst_negative_jitter_sum = 26 [json_name = "src2dst-negative-jitter-sum"];
                  uint64 src2dst_negative_jit_square_sum = 27 [json_name = "src2dst-negative-jit-square-sum"];
                  uint32 dst2src_min_positive_jitter = 28 [json_name = "dst2src-min-positive-jitter"];
                  uint32 dst2src_max_positive_jitter = 29 [json_name = "dst2src-max-positive-jitter"];
                  uint32 dst2src_positive_jitter_num = 30 [json_name = "dst2src-positive-jitter-num"];
                  uint32 dst2src_positive_jitter_sum = 31 [json_name = "dst2src-positive-jitter-sum"];
                  uint64 dst2src_positive_jit_square_sum = 32 [json_name = "dst2src-positive-jit-square-sum"];
                  uint32 dst2src_min_negative_jitter = 33 [json_name = "dst2src-min-negative-jitter"];
                  uint32 dst2src_max_negative_jitter = 34 [json_name = "dst2src-max-negative-jitter"];
                  uint32 dst2src_negative_jitter_num = 35 [json_name = "dst2src-negative-jitter-num"];
                  uint32 dst2src_negative_jitter_sum = 36 [json_name = "dst2src-negative-jitter-sum"];
                  uint64 dst2src_negative_jit_square_num = 37 [json_name = "dst2src-negative-jit-square-num"];
                  uint32 src2dst_max_delay = 38 [json_name = "src2dst-max-delay"];
                  uint32 dst2src_max_delay = 39 [json_name = "dst2src-max-delay"];
                  uint32 jitter_average = 40 [json_name = "jitter-average"];
                  uint32 src2dst_average_jitter = 41 [json_name = "src2dst-average-jitter"];
                  uint32 dst2src_average_jitter = 42 [json_name = "dst2src-average-jitter"];
                  uint32 num_of_owd = 43 [json_name = "num-of-owd"];
                  uint32 src2dst_owd_sum = 44 [json_name = "src2dst-owd-sum"];
                  uint32 dst2src_owd_sum = 45 [json_name = "dst2src-owd-sum"];
                  string average_jitter_out = 46 [json_name = "average-jitter-out"];
                  string average_jitter_in = 47 [json_name = "average-jitter-in"];
               }
               repeated PathJitterHop path_jitter_hop = 1 [json_name = "path-jitter-hop"];
            }
            PathJitterHops path_jitter_hops = 7 [json_name = "path-jitter-hops"];
         }
         repeated PathJitterResult path_jitter_result = 1 [json_name = "path-jitter-result"];
      }
      PathJitterResults path_jitter_results = 9 [json_name = "path-jitter-results"];
      message EthernetServiceResults {
         message EthernetServiceResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 test_result_index = 3 [json_name = "test-result-index"];
            uint32 running_index = 4 [json_name = "running-index"];
            enum TestFinishStatus {
               TestFinishStatus_RUNNING = 0;
               TestFinishStatus_FINISHED = 1;
            };
            TestFinishStatus test_finish_status = 5 [json_name = "test-finish-status"];
            enum TestResultStatus {
               TestResultStatus_PASS = 0;
               TestResultStatus_FAILED = 1;
               TestResultStatus_ABORT = 2;
               TestResultStatus_ABNORMAL = 3;
               TestResultStatus_NIL = 4;
            };
            TestResultStatus test_result_status = 6 [json_name = "test-result-status"];
            uint32 test_flow_num = 7 [json_name = "test-flow-num"];
            enum TestMode {
               TestMode_ROUNDX_TRIP = 0;
            };
            TestMode test_mode = 8 [json_name = "test-mode"];
            enum LastStep {
               LastStep_SIMPLEX_CIR = 0;
               LastStep_PERCENTX_25X_CIR = 1;
               LastStep_PERCENTX_50X_CIR = 2;
               LastStep_PERCENTX_75X_CIR = 3;
               LastStep_PERCENTX_100X_CIR = 4;
               LastStep_COLORX_BLINDX_EIR = 5;
               LastStep_COLORX_AWAREX_EIR = 6;
               LastStep_COLORX_BLINDX_TRAFFICX_POLICING = 7;
               LastStep_COLORX_AWAREX_TRAFFICX_POLICING = 8;
               LastStep_PERFORMANCE = 9;
               LastStep_GREENX_EIR = 10;
               LastStep_YELLOWX_EIR = 11;
               LastStep_TOTALX_EIR = 12;
               LastStep_GREENX_TRAFFICX_POLICING = 13;
               LastStep_YELLOWX_TRAFFICX_POLICING = 14;
               LastStep_TOTALX_TRAFFICX_POLICING = 15;
               LastStep_INIT = 16;
            };
            LastStep last_step = 9 [json_name = "last-step"];
            uint32 estimate_test_time = 10 [json_name = "estimate-test-time"];
            uint32 real_test_time = 11 [json_name = "real-test-time"];
            message TestSteps {
               message TestStep {
                  enum Stage {
                     Stage_CONFIGURATIONX_TEST = 0;
                     Stage_PERFORMANCEX_TEST = 1;
                  };
                  Stage stage = 1 [json_name = "stage"];
                  uint32 flow_id = 2 [json_name = "flow-id"];
                  enum Step {
                     Step_SIMPLEX_CIR = 0;
                     Step_PERCENTX_25X_CIR = 1;
                     Step_PERCENTX_50X_CIR = 2;
                     Step_PERCENTX_75X_CIR = 3;
                     Step_PERCENTX_100X_CIR = 4;
                     Step_EIR = 5;
                     Step_COLORX_AWAREX_EIR = 6;
                     Step_TRAFFICX_POLICING = 7;
                     Step_COLORX_AWAREX_TRAFFICX_POLICING = 8;
                     Step_PERFORMANCE = 9;
                     Step_GREENX_EIR = 10;
                     Step_YELLOWX_EIR = 11;
                     Step_TOTALX_EIR = 12;
                     Step_GREENX_TRAFFICX_POLICING = 13;
                     Step_YELLOWX_TRAFFICX_POLICING = 14;
                     Step_TOTALX_TRAFFICX_POLICING = 15;
                     Step_INIT = 16;
                  };
                  Step step = 3 [json_name = "step"];
                  string begin_time = 4 [json_name = "begin-time"];
                  string end_time = 5 [json_name = "end-time"];
                  enum ResultStatus {
                     ResultStatus_PASS = 0;
                     ResultStatus_FAILED = 1;
                     ResultStatus_ABORT = 2;
                     ResultStatus_ABNORMAL = 3;
                     ResultStatus_NIL = 4;
                  };
                  ResultStatus result_status = 6 [json_name = "result-status"];
                  uint32 min_ir = 7 [json_name = "min-ir"];
                  uint32 max_ir = 8 [json_name = "max-ir"];
                  uint32 mean_ir = 9 [json_name = "mean-ir"];
                  uint32 min_ftd = 10 [json_name = "min-ftd"];
                  uint32 max_ftd = 11 [json_name = "max-ftd"];
                  uint32 mean_ftd = 12 [json_name = "mean-ftd"];
                  uint32 min_fdv = 13 [json_name = "min-fdv"];
                  uint32 max_fdv = 14 [json_name = "max-fdv"];
                  uint32 mean_fdv = 15 [json_name = "mean-fdv"];
                  uint64 fl_count = 16 [json_name = "fl-count"];
                  string flr = 17 [json_name = "flr"];
                  uint32 unavail_count = 18 [json_name = "unavail-count"];
                  string avail_ratio = 19 [json_name = "avail-ratio"];
               }
               repeated TestStep test_step = 1 [json_name = "test-step"];
            }
            TestSteps test_steps = 12 [json_name = "test-steps"];
         }
         repeated EthernetServiceResult ethernet_service_result = 1 [json_name = "ethernet-service-result"];
      }
      EthernetServiceResults ethernet_service_results = 10 [json_name = "ethernet-service-results"];
      message GeneralFlowResults {
         message GflowResult {
            string admin_name = 1 [json_name = "admin-name"];
            string test_name = 2 [json_name = "test-name"];
            uint32 running_index = 3 [json_name = "running-index"];
            enum TestFinStatus {
               TestFinStatus_RUNNING = 0;
               TestFinStatus_FINISHED = 1;
            };
            TestFinStatus test_fin_status = 4 [json_name = "test-fin-status"];
            enum Measure {
               INVALID_ENUM_VALUE_Measure = 0;
               Measure_DELAY = 1;
               Measure_LOSS = 2;
               Measure_THROUGHPUT = 3;
            };
            Measure measure = 5 [json_name = "measure"];
            enum RateClass {
               INVALID_ENUM_VALUE_RateClass = 0;
               RateClass_UTILIZEDX_LINEX_RATE = 1;
               RateClass_INFORMATIONX_RATE = 2;
            };
            RateClass rate_class = 6 [json_name = "rate-class"];
            uint32 total_time = 7 [json_name = "total-time"];
            uint32 path_learning_time = 8 [json_name = "path-learning-time"];
            uint32 test_time = 9 [json_name = "test-time"];
            uint32 estimate_remain_time = 10 [json_name = "estimate-remain-time"];
            string start_test_time = 11 [json_name = "start-test-time"];
            string end_test_time = 12 [json_name = "end-test-time"];
            message GflowDetails {
               message GflowDetail {
                  uint32 index = 1 [json_name = "index"];
                  enum Completion {
                     Completion_NOX_RESULT = 0;
                     Completion_SUCCESS = 1;
                     Completion_FAILED = 2;
                     Completion_FINISHED = 3;
                  };
                  Completion completion = 2 [json_name = "completion"];
                  uint32 packet_size = 3 [json_name = "packet-size"];
                  uint32 throughput = 4 [json_name = "throughput"];
                  uint32 precision = 5 [json_name = "precision"];
                  string loss_ratio = 6 [json_name = "loss-ratio"];
                  uint32 rtt_min = 7 [json_name = "rtt-min"];
                  uint32 rtt_max = 8 [json_name = "rtt-max"];
                  uint32 rtt_average = 9 [json_name = "rtt-average"];
                  uint32 jitter_min = 10 [json_name = "jitter-min"];
                  uint32 jitter_max = 11 [json_name = "jitter-max"];
                  uint32 jitter_average = 12 [json_name = "jitter-average"];
                  uint32 send_rate = 13 [json_name = "send-rate"];
                  uint32 rcv_rate = 14 [json_name = "rcv-rate"];
                  uint64 send_pkt_num = 15 [json_name = "send-pkt-num"];
                  uint64 rcv_pkt_num = 16 [json_name = "rcv-pkt-num"];
               }
               repeated GflowDetail gflow_detail = 1 [json_name = "gflow-detail"];
            }
            GflowDetails gflow_details = 13 [json_name = "gflow-details"];
         }
         repeated GflowResult gflow_result = 1 [json_name = "gflow-result"];
      }
      GeneralFlowResults general_flow_results = 11 [json_name = "general-flow-results"];
   }
   Record record = 4 [json_name = "record"];
   message Reflectors {
      message Reflector {
         uint32 reflector_id = 1 [json_name = "reflector-id"];
         string if_name = 2 [json_name = "if-name"];
         enum ReflectorType {
            INVALID_ENUM_VALUE_ReflectorType = 0;
            ReflectorType_FLOWX_GENERAL = 2;
         };
         ReflectorType reflector_type = 3 [json_name = "reflector-type"];
         bool exchange_port = 4 [json_name = "exchange-port"];
         uint32 pe_vlan = 5 [json_name = "pe-vlan"];
         uint32 ce_vlan = 6 [json_name = "ce-vlan"];
         uint32 source_port = 7 [json_name = "source-port"];
         uint32 dest_port = 8 [json_name = "dest-port"];
         string end_time = 9 [json_name = "end-time"];
         bool share_mode = 10 [json_name = "share-mode"];
         uint32 survival_time = 11 [json_name = "survival-time"];
         string recommended_test_mac = 12 [json_name = "recommended-test-mac"];
         message ReflectType_InterfaceExclusive {
            enum Exclusive {
               INVALID_ENUM_VALUE_Exclusive = 0;
               Exclusive_EXCLUSIVE = 1;
            };
            Exclusive exclusive = 1 [json_name = "exclusive"];
         }
         message ReflectType_GeneralFlow {
            enum ReflectorType {
               INVALID_ENUM_VALUE_ReflectorType = 0;
               ReflectorType_FLOWX_GENERAL = 2;
            };
            ReflectorType reflector_type = 1 [json_name = "reflector-type"];
            message Address_Ipv4Address {
               string ipv4_address = 1 [json_name = "ipv4-address"];
            }
            message Address_SimulateIpv4Address {
               string simulate_ipv4_address = 1 [json_name = "simulate-ipv4-address"];
            }
            message Address_MacAddress {
               string mac_address = 1 [json_name = "mac-address"];
            }
            oneof Address {
               Address_Ipv4Address address_ipv4_address = 2 [json_name = "ipv4-address"];
               Address_SimulateIpv4Address address_simulate_ipv4_address = 3 [json_name = "simulate-ipv4-address"];
               Address_MacAddress address_mac_address = 4 [json_name = "mac-address"];
            }
            message VlanTagConfig_OneVlanTag {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
            }
            message VlanTagConfig_TwoVlanTag {
               uint32 ce_vlan = 1 [json_name = "ce-vlan"];
               uint32 pe_vlan = 2 [json_name = "pe-vlan"];
            }
            oneof VlanTagConfig {
               VlanTagConfig_OneVlanTag vlan_tag_config_one_vlan_tag = 5 [json_name = "one-vlan-tag"];
               VlanTagConfig_TwoVlanTag vlan_tag_config_two_vlan_tag = 6 [json_name = "two-vlan-tag"];
            }
            uint32 source_port = 7 [json_name = "source-port"];
            uint32 dest_port = 8 [json_name = "dest-port"];
            bool share_mode = 9 [json_name = "share-mode"];
         }
         message ReflectType_TestFlow {
            repeated uint32 test_flow_id = 1 [json_name = "test-flow-id"];
         }
         oneof ReflectType {
            ReflectType_InterfaceExclusive reflect_type_interface_exclusive = 13 [json_name = "interface-exclusive"];
            ReflectType_GeneralFlow reflect_type_general_flow = 14 [json_name = "general-flow"];
            ReflectType_TestFlow reflect_type_test_flow = 15 [json_name = "test-flow"];
         }
      }
      repeated Reflector reflector = 1 [json_name = "reflector"];
   }
   Reflectors reflectors = 5 [json_name = "reflectors"];
   message Instances {
      message Instance {
         string admin_name = 1 [json_name = "admin-name"];
         string test_name = 2 [json_name = "test-name"];
         message ExecutionPolicy {
            message ExecutionPolicy5_Start {
               message StartType_StartNow {
                  enum StartNow7 {
                     INVALID_ENUM_VALUE_StartNow7 = 0;
                     StartNow7_STARTX_NOW = 1;
                  };
                  StartNow7 start_now = 1 [json_name = "start-now"];
                  message StartNowEndType_At {
                     string start_now_end_date_time = 1 [json_name = "start-now-end-date-time"];
                  }
                  message StartNowEndType_Delay {
                     uint32 start_now_end_delay_seconds = 1 [json_name = "start-now-end-delay-seconds"];
                  }
                  message StartNowEndType_Lifetime {
                     uint32 start_now_end_lifetime_seconds = 1 [json_name = "start-now-end-lifetime-seconds"];
                  }
                  oneof StartNowEndType {
                     StartNowEndType_At start_now_end_type_at = 2 [json_name = "at"];
                     StartNowEndType_Delay start_now_end_type_delay = 3 [json_name = "delay"];
                     StartNowEndType_Lifetime start_now_end_type_lifetime = 4 [json_name = "lifetime"];
                  }
               }
               message StartType_StartAt {
                  string start_date_time = 1 [json_name = "start-date-time"];
                  message StartAtEndType_At {
                     string start_at_end_date_time = 1 [json_name = "start-at-end-date-time"];
                  }
                  message StartAtEndType_Delay {
                     uint32 start_at_end_delay_seconds = 1 [json_name = "start-at-end-delay-seconds"];
                  }
                  message StartAtEndType_Lifetime {
                     uint32 start_at_end_lifetime_seconds = 1 [json_name = "start-at-end-lifetime-seconds"];
                  }
                  oneof StartAtEndType {
                     StartAtEndType_At start_at_end_type_at = 2 [json_name = "at"];
                     StartAtEndType_Delay start_at_end_type_delay = 3 [json_name = "delay"];
                     StartAtEndType_Lifetime start_at_end_type_lifetime = 4 [json_name = "lifetime"];
                  }
               }
               message StartType_StartDelay {
                  uint32 start_delay_seconds = 1 [json_name = "start-delay-seconds"];
                  message StartDelayEndType_At {
                     string start_delay_end_date_time = 1 [json_name = "start-delay-end-date-time"];
                  }
                  message StartDelayEndType_Delay {
                     uint32 start_delay_end_delay_seconds = 1 [json_name = "start-delay-end-delay-seconds"];
                  }
                  message StartDelayEndType_Lifetime {
                     uint32 start_delay_end_lifetime_seconds = 1 [json_name = "start-delay-end-lifetime-seconds"];
                  }
                  oneof StartDelayEndType {
                     StartDelayEndType_At start_delay_end_type_at = 2 [json_name = "at"];
                     StartDelayEndType_Delay start_delay_end_type_delay = 3 [json_name = "delay"];
                     StartDelayEndType_Lifetime start_delay_end_type_lifetime = 4 [json_name = "lifetime"];
                  }
               }
               message StartType_StartDaily {
                  string daily_start_time = 1 [json_name = "daily-start-time"];
                  string daily_start_date = 2 [json_name = "daily-start-date"];
                  string daily_end_time = 3 [json_name = "daily-end-time"];
                  string daily_end_date = 4 [json_name = "daily-end-date"];
               }
               oneof StartType {
                  StartType_StartNow start_type_start_now = 1 [json_name = "start-now"];
                  StartType_StartAt start_type_start_at = 2 [json_name = "start-at"];
                  StartType_StartDelay start_type_start_delay = 3 [json_name = "start-delay"];
                  StartType_StartDaily start_type_start_daily = 4 [json_name = "start-daily"];
               }
            }
            message ExecutionPolicy5_Stop {
               enum Stop6 {
                  INVALID_ENUM_VALUE_Stop6 = 0;
                  Stop6_STOP = 1;
               };
               Stop6 stop6 = 1 [json_name = "stop"];
            }
            oneof ExecutionPolicy5 {
               ExecutionPolicy5_Start execution_policy_start = 1 [json_name = "start"];
               ExecutionPolicy5_Stop execution_policy_stop = 2 [json_name = "stop"];
            }
         }
         ExecutionPolicy execution_policy = 3 [json_name = "execution-policy"];
         message Type_Icmp {
            message IcmpInput {
               message Address_Ipv4Address {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
                  string ipv4_next_hop = 3 [json_name = "ipv4-next-hop"];
               }
               message Address_Ipv6Address {
                  string ipv6_dest_address = 1 [json_name = "ipv6-dest-address"];
                  string ipv6_source_address = 2 [json_name = "ipv6-source-address"];
                  string ipv6_next_hop = 3 [json_name = "ipv6-next-hop"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
                  Address_Ipv6Address address_ipv6_address = 2 [json_name = "ipv6-address"];
               }
               string ni_name = 3 [json_name = "ni-name"];
               string out_if_name = 4 [json_name = "out-if-name"];
               string fwd_if_name = 5 [json_name = "fwd-if-name"];
               uint32 interval = 6 [json_name = "interval"];
               uint32 probe_count = 7 [json_name = "probe-count"];
               uint32 timeout = 8 [json_name = "timeout"];
               uint32 frequency = 9 [json_name = "frequency"];
               uint32 fail_percent = 10 [json_name = "fail-percent"];
               uint32 data_size = 11 [json_name = "data-size"];
               string data_fill = 12 [json_name = "data-fill"];
               uint32 ttl = 13 [json_name = "ttl"];
               bool pass_route = 14 [json_name = "pass-route"];
               uint32 probe_fails = 15 [json_name = "probe-fails"];
               uint32 test_fails = 16 [json_name = "test-fails"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 17 [json_name = "send-trap-bits"];
               bool compatibility = 18 [json_name = "compatibility"];
               uint32 result_num = 19 [json_name = "result-num"];
               uint32 history_num = 20 [json_name = "history-num"];
               string description = 21 [json_name = "description"];
               string age_time = 22 [json_name = "age-time"];
               enum PathType {
                  INVALID_ENUM_VALUE_PathType = 0;
                  PathType_BYPASS = 1;
               };
               PathType path_type = 23 [json_name = "path-type"];
               uint32 threshold_rtd = 24 [json_name = "threshold-rtd"];
               message Priority_TosValue {
                  uint32 tos = 1 [json_name = "tos"];
               }
               message Priority_DscpValue {
                  uint32 dscp = 1 [json_name = "dscp"];
               }
               oneof Priority {
                  Priority_TosValue priority_tos_value = 25 [json_name = "tos-value"];
                  Priority_DscpValue priority_dscp_value = 26 [json_name = "dscp-value"];
               }
            }
            IcmpInput icmp_input = 1 [json_name = "icmp-input"];
         }
         message Type_Trace {
            message TraceInput {
               message Address_Ipv4Address {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
                  string ipv4_next_hop = 3 [json_name = "ipv4-next-hop"];
               }
               message Address_Ipv6Address {
                  string ipv6_dest_address = 1 [json_name = "ipv6-dest-address"];
                  string ipv6_source_address = 2 [json_name = "ipv6-source-address"];
                  string ipv6_next_hop = 3 [json_name = "ipv6-next-hop"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
                  Address_Ipv6Address address_ipv6_address = 2 [json_name = "ipv6-address"];
               }
               uint32 timeout = 3 [json_name = "timeout"];
               uint32 first_ttl = 4 [json_name = "first-ttl"];
               uint32 max_ttl = 5 [json_name = "max-ttl"];
               uint32 probe_count = 6 [json_name = "probe-count"];
               uint32 data_size = 7 [json_name = "data-size"];
               string ni_name = 8 [json_name = "ni-name"];
               uint32 result_num = 9 [json_name = "result-num"];
               uint32 history_num = 10 [json_name = "history-num"];
               string description = 11 [json_name = "description"];
               string age_time = 12 [json_name = "age-time"];
               uint32 frequency = 13 [json_name = "frequency"];
               message Priority_TosValue {
                  uint32 tos = 1 [json_name = "tos"];
               }
               message Priority_DscpValue {
                  uint32 dscp = 1 [json_name = "dscp"];
               }
               oneof Priority {
                  Priority_TosValue priority_tos_value = 14 [json_name = "tos-value"];
                  Priority_DscpValue priority_dscp_value = 15 [json_name = "dscp-value"];
               }
               string data_fill = 16 [json_name = "data-fill"];
               uint32 dest_port = 17 [json_name = "dest-port"];
               uint32 hop_fail_times = 18 [json_name = "hop-fail-times"];
               bool pass_route = 19 [json_name = "pass-route"];
               string out_if_name = 20 [json_name = "out-if-name"];
               uint32 test_fail_times = 21 [json_name = "test-fail-times"];
               uint32 threshold_rtd = 22 [json_name = "threshold-rtd"];
               bool non_fragment = 23 [json_name = "non-fragment"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_RESULTCHANGE = 3;
               };
               repeated SendTrapBits send_trap_bits = 24 [json_name = "send-trap-bits"];
            }
            TraceInput trace_input = 1 [json_name = "trace-input"];
         }
         message Type_Udp {
            message UdpInput {
               message Address_Ipv4Address {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
               }
               message Address_Ipv6Address {
                  string ipv6_dest_address = 1 [json_name = "ipv6-dest-address"];
                  string ipv6_source_address = 2 [json_name = "ipv6-source-address"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
                  Address_Ipv6Address address_ipv6_address = 2 [json_name = "ipv6-address"];
               }
               uint32 dest_port = 3 [json_name = "dest-port"];
               uint32 source_port = 4 [json_name = "source-port"];
               uint32 ttl = 5 [json_name = "ttl"];
               uint32 data_size = 6 [json_name = "data-size"];
               bool pass_route = 7 [json_name = "pass-route"];
               uint32 probe_count = 8 [json_name = "probe-count"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 9 [json_name = "send-trap-bits"];
               uint32 threshold_rtd = 10 [json_name = "threshold-rtd"];
               uint32 probe_failtimes = 11 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 12 [json_name = "test-failtimes"];
               uint32 tos = 13 [json_name = "tos"];
               uint32 fail_percent = 14 [json_name = "fail-percent"];
               uint32 interval = 15 [json_name = "interval"];
               string ni_name = 16 [json_name = "ni-name"];
               uint32 timeout = 17 [json_name = "timeout"];
               string data_fill = 18 [json_name = "data-fill"];
               string description = 19 [json_name = "description"];
               uint32 result_num = 20 [json_name = "result-num"];
               uint32 history_num = 21 [json_name = "history-num"];
               string age_time = 22 [json_name = "age-time"];
               uint32 frequency = 23 [json_name = "frequency"];
            }
            UdpInput udp_input = 1 [json_name = "udp-input"];
         }
         message Type_Tcp {
            message TcpInput {
               string dest_address = 1 [json_name = "dest-address"];
               string source_address = 2 [json_name = "source-address"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 timeout = 4 [json_name = "timeout"];
               uint32 ttl = 5 [json_name = "ttl"];
               uint32 probe_count = 6 [json_name = "probe-count"];
               uint32 tos = 7 [json_name = "tos"];
               uint32 dest_port = 8 [json_name = "dest-port"];
               uint32 source_port = 9 [json_name = "source-port"];
               bool pass_route = 10 [json_name = "pass-route"];
               string ni_name = 11 [json_name = "ni-name"];
               uint32 threshold_rtd = 12 [json_name = "threshold-rtd"];
               uint32 probe_fails = 13 [json_name = "probe-fails"];
               uint32 fail_percent = 14 [json_name = "fail-percent"];
               uint32 test_fail_times = 15 [json_name = "test-fail-times"];
               uint32 result_num = 16 [json_name = "result-num"];
               uint32 history_num = 17 [json_name = "history-num"];
               string description = 18 [json_name = "description"];
               string age_time = 19 [json_name = "age-time"];
               uint32 frequency = 20 [json_name = "frequency"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 21 [json_name = "send-trap-bits"];
            }
            TcpInput tcp_input = 1 [json_name = "tcp-input"];
         }
         message Type_Jitter {
            message JitterInput {
               message Address_Ipv4Address {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
               }
               message Address_Ipv6Address {
                  string ipv6_dest_address = 1 [json_name = "ipv6-dest-address"];
                  string ipv6_source_address = 2 [json_name = "ipv6-source-address"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
                  Address_Ipv6Address address_ipv6_address = 2 [json_name = "ipv6-address"];
               }
               uint32 dest_port = 3 [json_name = "dest-port"];
               uint32 source_port = 4 [json_name = "source-port"];
               uint32 ttl = 5 [json_name = "ttl"];
               bool hardware_enable = 6 [json_name = "hardware-enable"];
               uint32 interval = 7 [json_name = "interval"];
               uint32 probe_count = 8 [json_name = "probe-count"];
               uint32 jitter_packet_num = 9 [json_name = "jitter-packet-num"];
               uint32 data_size = 10 [json_name = "data-size"];
               string data_fill = 11 [json_name = "data-fill"];
               bool pass_route = 12 [json_name = "pass-route"];
               uint32 tos = 13 [json_name = "tos"];
               string ni_name = 14 [json_name = "ni-name"];
               enum CodeType {
                  INVALID_ENUM_VALUE_CodeType = 0;
                  CodeType_NONE = 1;
                  CodeType_G711A = 2;
                  CodeType_G711U = 3;
                  CodeType_G729A = 4;
               };
               CodeType code_type = 15 [json_name = "code-type"];
               uint32 adv_factor = 16 [json_name = "adv-factor"];
               uint32 threshold_owd_ds = 17 [json_name = "threshold-owd-ds"];
               uint32 threshold_owd_sd = 18 [json_name = "threshold-owd-sd"];
               uint32 threshold_rtd = 19 [json_name = "threshold-rtd"];
               uint32 fail_percent = 20 [json_name = "fail-percent"];
               uint32 test_failtimes = 21 [json_name = "test-failtimes"];
               enum Timestamp {
                  Timestamp_MILLISECOND = 0;
                  Timestamp_MICROSECOND = 1;
               };
               Timestamp timestamp = 22 [json_name = "timestamp"];
               string out_if_name = 23 [json_name = "out-if-name"];
               uint32 timeout = 24 [json_name = "timeout"];
               uint32 result_num = 25 [json_name = "result-num"];
               uint32 history_num = 26 [json_name = "history-num"];
               string description = 27 [json_name = "description"];
               string age_time = 28 [json_name = "age-time"];
               uint32 frequency = 29 [json_name = "frequency"];
               enum SendTrapBits {
                  SendTrapBits_OWDX_DS = 0;
                  SendTrapBits_OWDX_SD = 1;
                  SendTrapBits_RTD = 2;
                  SendTrapBits_TESTFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 30 [json_name = "send-trap-bits"];
            }
            JitterInput jitter_input = 1 [json_name = "jitter-input"];
         }
         message Type_IcmpJitter {
            message IcmpJitterInput {
               message Address_Ipv4Address {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
               }
               message Address_Ipv6Address {
                  string ipv6_dest_address = 1 [json_name = "ipv6-dest-address"];
                  string ipv6_source_address = 2 [json_name = "ipv6-source-address"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
                  Address_Ipv6Address address_ipv6_address = 2 [json_name = "ipv6-address"];
               }
               uint32 ttl = 3 [json_name = "ttl"];
               uint32 probe_count = 4 [json_name = "probe-count"];
               bool hardware_enable = 5 [json_name = "hardware-enable"];
               uint32 jitter_packet_num = 6 [json_name = "jitter-packet-num"];
               uint32 data_size = 7 [json_name = "data-size"];
               string data_fill = 8 [json_name = "data-fill"];
               uint32 tos = 9 [json_name = "tos"];
               string ni_name = 10 [json_name = "ni-name"];
               enum JitterMode {
                  INVALID_ENUM_VALUE_JitterMode = 0;
                  JitterMode_ICMPX_TIMESTAMP = 1;
                  JitterMode_ICMPX_ECHO = 2;
               };
               JitterMode jitter_mode = 11 [json_name = "jitter-mode"];
               uint32 interval = 12 [json_name = "interval"];
               enum Timestamp {
                  Timestamp_MILLISECOND = 0;
                  Timestamp_MICROSECOND = 1;
               };
               Timestamp timestamp = 13 [json_name = "timestamp"];
               string out_if_name = 14 [json_name = "out-if-name"];
               uint32 timeout = 15 [json_name = "timeout"];
               enum ReceiveTimeunit {
                  ReceiveTimeunit_UNKNOWN = 0;
                  ReceiveTimeunit_MILLISECOND = 1;
                  ReceiveTimeunit_MICROSECOND = 2;
               };
               ReceiveTimeunit receive_timeunit = 16 [json_name = "receive-timeunit"];
               uint32 fail_percent = 17 [json_name = "fail-percent"];
               uint32 result_num = 18 [json_name = "result-num"];
               uint32 history_num = 19 [json_name = "history-num"];
               string description = 20 [json_name = "description"];
               string age_time = 21 [json_name = "age-time"];
               uint32 frequency = 22 [json_name = "frequency"];
               uint32 test_failtimes = 23 [json_name = "test-failtimes"];
               enum SendTrapBits {
                  SendTrapBits_JITTERX_DS = 0;
                  SendTrapBits_JITTERX_SD = 1;
                  SendTrapBits_OWDX_DS = 2;
                  SendTrapBits_OWDX_SD = 3;
                  SendTrapBits_RTD = 4;
                  SendTrapBits_TESTCOMPLETE = 5;
                  SendTrapBits_TESTFAILURE = 6;
                  SendTrapBits_RESULTCHANGE = 7;
               };
               repeated SendTrapBits send_trap_bits = 24 [json_name = "send-trap-bits"];
               uint32 threshold_owd_ds = 25 [json_name = "threshold-owd-ds"];
               uint32 threshold_owd_sd = 26 [json_name = "threshold-owd-sd"];
               uint32 threshold_rtd = 27 [json_name = "threshold-rtd"];
               uint32 threshold_jitter_ds = 28 [json_name = "threshold-jitter-ds"];
               uint32 threshold_jitter_sd = 29 [json_name = "threshold-jitter-sd"];
            }
            IcmpJitterInput icmp_jitter_input = 1 [json_name = "icmp-jitter-input"];
         }
         message Type_LspPing {
            message LspPingInput {
               message LspProtocol_Ipv4 {
                  message LdpLspPing {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     string loopback_address = 3 [json_name = "loopback-address"];
                     string next_hop = 4 [json_name = "next-hop"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                     };
                     ReplyMode reply_mode = 5 [json_name = "reply-mode"];
                  }
                  LdpLspPing ldp_lsp_ping = 1 [json_name = "ldp-lsp-ping"];
               }
               message LspProtocol_Bgp {
                  message BgpLspPing {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     string loopback_address = 3 [json_name = "loopback-address"];
                     string next_hop = 4 [json_name = "next-hop"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                     };
                     ReplyMode reply_mode = 5 [json_name = "reply-mode"];
                  }
                  BgpLspPing bgp_lsp_ping = 1 [json_name = "bgp-lsp-ping"];
               }
               message LspProtocol_Te {
                  message TeLspPing {
                     string tunnel_name = 1 [json_name = "tunnel-name"];
                     enum LspPath {
                        INVALID_ENUM_VALUE_LspPath = 0;
                        LspPath_HOTX_STANDBY = 1;
                        LspPath_PRIMARY = 2;
                     };
                     LspPath lsp_path = 2 [json_name = "lsp-path"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                        ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
                     };
                     ReplyMode reply_mode = 3 [json_name = "reply-mode"];
                  }
                  TeLspPing te_lsp_ping = 1 [json_name = "te-lsp-ping"];
               }
               message LspProtocol_Srte {
                  message SrteLspPing {
                     string tunnel_name = 1 [json_name = "tunnel-name"];
                     enum LspPath {
                        INVALID_ENUM_VALUE_LspPath = 0;
                        LspPath_HOTX_STANDBY = 1;
                        LspPath_PRIMARY = 2;
                     };
                     LspPath lsp_path = 2 [json_name = "lsp-path"];
                  }
                  SrteLspPing srte_lsp_ping = 1 [json_name = "srte-lsp-ping"];
               }
               message LspProtocol_Srbe {
                  message SrbeLspPing {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     uint32 flex_algo_id = 3 [json_name = "flex-algo-id"];
                     enum PathType {
                        INVALID_ENUM_VALUE_PathType = 0;
                        PathType_BYPASS = 1;
                     };
                     PathType path_type = 4 [json_name = "path-type"];
                     message RemoteFec_Ldp {
                        message RemoteFecLdp {
                           string remote_fec_ip_address = 1 [json_name = "remote-fec-ip-address"];
                           uint32 remote_mask_len = 2 [json_name = "remote-mask-len"];
                        }
                        RemoteFecLdp remote_fec_ldp = 1 [json_name = "remote-fec-ldp"];
                     }
                     oneof RemoteFec {
                        RemoteFec_Ldp remote_fec_ldp = 5 [json_name = "ldp"];
                     }
                  }
                  SrbeLspPing srbe_lsp_ping = 1 [json_name = "srbe-lsp-ping"];
               }
               message LspProtocol_SrtePolicy {
                  message SrtePolicyLspPing {
                     message ProbeType_PolicyName {
                        string policy_name = 1 [json_name = "policy-name"];
                     }
                     message ProbeType_EndPoint {
                        string end_point_ip = 1 [json_name = "end-point-ip"];
                        uint32 color = 2 [json_name = "color"];
                     }
                     message ProbeType_BindingSid {
                        uint32 binding_sid = 1 [json_name = "binding-sid"];
                     }
                     oneof ProbeType {
                        ProbeType_PolicyName probe_type_policy_name = 1 [json_name = "policy-name"];
                        ProbeType_EndPoint probe_type_end_point = 2 [json_name = "end-point"];
                        ProbeType_BindingSid probe_type_binding_sid = 3 [json_name = "binding-sid"];
                     }
                  }
                  SrtePolicyLspPing srte_policy_lsp_ping = 1 [json_name = "srte-policy-lsp-ping"];
               }
               oneof LspProtocol {
                  LspProtocol_Ipv4 lsp_protocol_ipv4 = 1 [json_name = "ipv4"];
                  LspProtocol_Bgp lsp_protocol_bgp = 2 [json_name = "bgp"];
                  LspProtocol_Te lsp_protocol_te = 3 [json_name = "te"];
                  LspProtocol_Srte lsp_protocol_srte = 4 [json_name = "srte"];
                  LspProtocol_Srbe lsp_protocol_srbe = 5 [json_name = "srbe"];
                  LspProtocol_SrtePolicy lsp_protocol_srte_policy = 6 [json_name = "srte-policy"];
               }
               uint32 timeout = 7 [json_name = "timeout"];
               bool frag_flag = 8 [json_name = "frag-flag"];
               string source_address = 9 [json_name = "source-address"];
               uint32 exp = 10 [json_name = "exp"];
               uint32 ttl = 11 [json_name = "ttl"];
               uint32 interval = 12 [json_name = "interval"];
               uint32 probe_count = 13 [json_name = "probe-count"];
               uint32 data_size = 14 [json_name = "data-size"];
               string data_fill = 15 [json_name = "data-fill"];
               uint32 fail_percent = 16 [json_name = "fail-percent"];
               uint32 result_num = 17 [json_name = "result-num"];
               uint32 history_num = 18 [json_name = "history-num"];
               string description = 19 [json_name = "description"];
               string age_time = 20 [json_name = "age-time"];
               uint32 frequency = 21 [json_name = "frequency"];
            }
            LspPingInput lsp_ping_input = 1 [json_name = "lsp-ping-input"];
         }
         message Type_LspTrace {
            message LspTraceInput {
               message LspProtocol_Ipv4 {
                  message LdpLspTrace {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     string loopback_address = 3 [json_name = "loopback-address"];
                     string next_hop = 4 [json_name = "next-hop"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                     };
                     ReplyMode reply_mode = 5 [json_name = "reply-mode"];
                  }
                  LdpLspTrace ldp_lsp_trace = 1 [json_name = "ldp-lsp-trace"];
               }
               message LspProtocol_Bgp {
                  message BgpLspTrace {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     string loopback_address = 3 [json_name = "loopback-address"];
                     string next_hop = 4 [json_name = "next-hop"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                     };
                     ReplyMode reply_mode = 5 [json_name = "reply-mode"];
                  }
                  BgpLspTrace bgp_lsp_trace = 1 [json_name = "bgp-lsp-trace"];
               }
               message LspProtocol_Te {
                  message TeLspTrace {
                     string tunnel_name = 1 [json_name = "tunnel-name"];
                     string next_hop = 2 [json_name = "next-hop"];
                     enum LspPath {
                        INVALID_ENUM_VALUE_LspPath = 0;
                        LspPath_HOTX_STANDBY = 1;
                        LspPath_PRIMARY = 2;
                     };
                     LspPath lsp_path = 3 [json_name = "lsp-path"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                        ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
                     };
                     ReplyMode reply_mode = 4 [json_name = "reply-mode"];
                  }
                  TeLspTrace te_lsp_trace = 1 [json_name = "te-lsp-trace"];
               }
               message LspProtocol_Srte {
                  message SrteLspTrace {
                     string tunnel_name = 1 [json_name = "tunnel-name"];
                     enum LspPath {
                        INVALID_ENUM_VALUE_LspPath = 0;
                        LspPath_HOTX_STANDBY = 1;
                        LspPath_PRIMARY = 2;
                     };
                     LspPath lsp_path = 2 [json_name = "lsp-path"];
                  }
                  SrteLspTrace srte_lsp_trace = 1 [json_name = "srte-lsp-trace"];
               }
               message LspProtocol_Srbe {
                  message SrbeLspTrace {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     uint32 flex_algo_id = 3 [json_name = "flex-algo-id"];
                     enum PathType {
                        INVALID_ENUM_VALUE_PathType = 0;
                        PathType_BYPASS = 1;
                     };
                     PathType path_type = 4 [json_name = "path-type"];
                     message RemoteFec_Ldp {
                        message RemoteFecLdp {
                           string remote_fec_ip_address = 1 [json_name = "remote-fec-ip-address"];
                           uint32 remote_mask_len = 2 [json_name = "remote-mask-len"];
                        }
                        RemoteFecLdp remote_fec_ldp = 1 [json_name = "remote-fec-ldp"];
                     }
                     oneof RemoteFec {
                        RemoteFec_Ldp remote_fec_ldp = 5 [json_name = "ldp"];
                     }
                  }
                  SrbeLspTrace srbe_lsp_trace = 1 [json_name = "srbe-lsp-trace"];
               }
               message LspProtocol_SrtePolicy {
                  message SrtePolicyLspTrace {
                     message ProbeType_PolicyName {
                        string policy_name = 1 [json_name = "policy-name"];
                     }
                     message ProbeType_EndPoint {
                        string end_point_ip = 1 [json_name = "end-point-ip"];
                        uint32 color = 2 [json_name = "color"];
                     }
                     message ProbeType_BindingSid {
                        uint32 binding_sid = 1 [json_name = "binding-sid"];
                     }
                     oneof ProbeType {
                        ProbeType_PolicyName probe_type_policy_name = 1 [json_name = "policy-name"];
                        ProbeType_EndPoint probe_type_end_point = 2 [json_name = "end-point"];
                        ProbeType_BindingSid probe_type_binding_sid = 3 [json_name = "binding-sid"];
                     }
                  }
                  SrtePolicyLspTrace srte_policy_lsp_trace = 1 [json_name = "srte-policy-lsp-trace"];
               }
               oneof LspProtocol {
                  LspProtocol_Ipv4 lsp_protocol_ipv4 = 1 [json_name = "ipv4"];
                  LspProtocol_Bgp lsp_protocol_bgp = 2 [json_name = "bgp"];
                  LspProtocol_Te lsp_protocol_te = 3 [json_name = "te"];
                  LspProtocol_Srte lsp_protocol_srte = 4 [json_name = "srte"];
                  LspProtocol_Srbe lsp_protocol_srbe = 5 [json_name = "srbe"];
                  LspProtocol_SrtePolicy lsp_protocol_srte_policy = 6 [json_name = "srte-policy"];
               }
               bool frag_flag = 7 [json_name = "frag-flag"];
               uint32 exp = 8 [json_name = "exp"];
               uint32 probe_count = 9 [json_name = "probe-count"];
               string source_address = 10 [json_name = "source-address"];
               uint32 first_ttl = 11 [json_name = "first-ttl"];
               uint32 max_ttl = 12 [json_name = "max-ttl"];
               uint32 timeout = 13 [json_name = "timeout"];
               uint32 hop_fail_times = 14 [json_name = "hop-fail-times"];
               uint32 result_num = 15 [json_name = "result-num"];
               uint32 history_num = 16 [json_name = "history-num"];
               string description = 17 [json_name = "description"];
               string age_time = 18 [json_name = "age-time"];
               uint32 frequency = 19 [json_name = "frequency"];
            }
            LspTraceInput lsp_trace_input = 1 [json_name = "lsp-trace-input"];
         }
         message Type_LspJitter {
            message LspJitterInput {
               message LspProtocol_Ipv4 {
                  message LdpLspJitter {
                     string dest_address = 1 [json_name = "dest-address"];
                     uint32 mask_len = 2 [json_name = "mask-len"];
                     string loopback_address = 3 [json_name = "loopback-address"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                     };
                     ReplyMode reply_mode = 4 [json_name = "reply-mode"];
                  }
                  LdpLspJitter ldp_lsp_jitter = 1 [json_name = "ldp-lsp-jitter"];
               }
               message LspProtocol_Te {
                  message TeLspJitter {
                     string tunnel_name = 1 [json_name = "tunnel-name"];
                     enum LspPath {
                        LspPath_WORKING = 0;
                        LspPath_HOTX_STANDBY = 1;
                        LspPath_PRIMARY = 2;
                     };
                     LspPath lsp_path = 2 [json_name = "lsp-path"];
                     enum ReplyMode {
                        INVALID_ENUM_VALUE_ReplyMode = 0;
                        ReplyMode_NOX_REPLY = 1;
                        ReplyMode_UDP = 2;
                        ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
                     };
                     ReplyMode reply_mode = 3 [json_name = "reply-mode"];
                  }
                  TeLspJitter te_lsp_jitter = 1 [json_name = "te-lsp-jitter"];
               }
               oneof LspProtocol {
                  LspProtocol_Ipv4 lsp_protocol_ipv4 = 1 [json_name = "ipv4"];
                  LspProtocol_Te lsp_protocol_te = 2 [json_name = "te"];
               }
               uint32 timeout = 3 [json_name = "timeout"];
               bool frag_flag = 4 [json_name = "frag-flag"];
               string source_address = 5 [json_name = "source-address"];
               uint32 exp = 6 [json_name = "exp"];
               uint32 ttl = 7 [json_name = "ttl"];
               uint32 interval = 8 [json_name = "interval"];
               uint32 probe_count = 9 [json_name = "probe-count"];
               uint32 jitter_packet_num = 10 [json_name = "jitter-packet-num"];
               uint32 data_size = 11 [json_name = "data-size"];
               string data_fill = 12 [json_name = "data-fill"];
               uint32 fail_percent = 13 [json_name = "fail-percent"];
               uint32 result_num = 14 [json_name = "result-num"];
               uint32 history_num = 15 [json_name = "history-num"];
               string description = 16 [json_name = "description"];
               string age_time = 17 [json_name = "age-time"];
               uint32 frequency = 18 [json_name = "frequency"];
            }
            LspJitterInput lsp_jitter_input = 1 [json_name = "lsp-jitter-input"];
         }
         message Type_Pwe3Ping {
            message Pwe3PingInput {
               enum VcType {
                  INVALID_ENUM_VALUE_VcType = 0;
                  VcType_LDP = 1;
               };
               VcType vc_type = 1 [json_name = "vc-type"];
               enum LocalPwType {
                  INVALID_ENUM_VALUE_LocalPwType = 0;
                  LocalPwType_ATMX_AAL5 = 2;
                  LocalPwType_ATMX_CELLX_TRANSPORT = 3;
                  LocalPwType_VLAN = 4;
                  LocalPwType_ETHERNET = 5;
                  LocalPwType_HDLC = 6;
                  LocalPwType_PPP = 7;
                  LocalPwType_ATMX_NTO1X_VCC = 9;
                  LocalPwType_ATMX_NTO1X_VPC = 10;
                  LocalPwType_IPX_LAYER2 = 11;
                  LocalPwType_ATMX_1TO1X_VCC = 12;
                  LocalPwType_ATMX_1TO1X_VPC = 13;
                  LocalPwType_SATOPX_E1 = 17;
                  LocalPwType_CESOPSNX_BASIC = 21;
                  LocalPwType_IPX_INTERWORKING = 64;
               };
               LocalPwType local_pw_type = 2 [json_name = "local-pw-type"];
               uint32 local_pw_id = 3 [json_name = "local-pw-id"];
               enum LabelType {
                  INVALID_ENUM_VALUE_LabelType = 0;
                  LabelType_LABELX_ALERT = 1;
                  LabelType_CONTROLX_WORD = 2;
                  LabelType_NORMAL = 3;
               };
               LabelType label_type = 4 [json_name = "label-type"];
               uint32 remote_pw_id = 5 [json_name = "remote-pw-id"];
               string dest_address = 6 [json_name = "dest-address"];
               uint32 timeout = 7 [json_name = "timeout"];
               uint32 max_ttl = 8 [json_name = "max-ttl"];
               uint32 exp = 9 [json_name = "exp"];
               enum ReplyMode {
                  INVALID_ENUM_VALUE_ReplyMode = 0;
                  ReplyMode_NOX_REPLY = 1;
                  ReplyMode_UDP = 2;
                  ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
               };
               ReplyMode reply_mode = 10 [json_name = "reply-mode"];
               uint32 interval = 11 [json_name = "interval"];
               uint32 probe_count = 12 [json_name = "probe-count"];
               uint32 data_size = 13 [json_name = "data-size"];
               string data_fill = 14 [json_name = "data-fill"];
               uint32 fail_percent = 15 [json_name = "fail-percent"];
               uint32 probe_failtimes = 16 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 17 [json_name = "test-failtimes"];
               uint32 threshold_rtd = 18 [json_name = "threshold-rtd"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 19 [json_name = "send-trap-bits"];
               string sender_address = 20 [json_name = "sender-address"];
               bool no_cw_flag = 21 [json_name = "no-cw-flag"];
               enum TtlMode {
                  INVALID_ENUM_VALUE_TtlMode = 0;
                  TtlMode_UNIFORM = 1;
                  TtlMode_PIPE = 2;
               };
               TtlMode ttl_mode = 22 [json_name = "ttl-mode"];
               bool frag_flag = 23 [json_name = "frag-flag"];
               string peer_address = 24 [json_name = "peer-address"];
               uint32 result_num = 25 [json_name = "result-num"];
               uint32 history_num = 26 [json_name = "history-num"];
               string description = 27 [json_name = "description"];
               string age_time = 28 [json_name = "age-time"];
               uint32 frequency = 29 [json_name = "frequency"];
            }
            Pwe3PingInput pwe3_ping_input = 1 [json_name = "pwe3-ping-input"];
         }
         message Type_PathMtu {
            message PathMtuInput {
               string dest_address = 1 [json_name = "dest-address"];
               string source_address = 2 [json_name = "source-address"];
               string ni_name = 3 [json_name = "ni-name"];
               uint32 max_mtu = 4 [json_name = "max-mtu"];
               uint32 step = 5 [json_name = "step"];
               uint32 probe_count = 6 [json_name = "probe-count"];
               uint32 timeout = 7 [json_name = "timeout"];
               string out_if_name = 8 [json_name = "out-if-name"];
               uint32 result_num = 9 [json_name = "result-num"];
               string description = 10 [json_name = "description"];
               string age_time = 11 [json_name = "age-time"];
               uint32 frequency = 12 [json_name = "frequency"];
            }
            PathMtuInput path_mtu_input = 1 [json_name = "path-mtu-input"];
         }
         message Type_Pwe3Trace {
            message Pwe3TraceInput {
               enum VcType {
                  INVALID_ENUM_VALUE_VcType = 0;
                  VcType_LDP = 1;
               };
               VcType vc_type = 1 [json_name = "vc-type"];
               enum LocalPwType {
                  INVALID_ENUM_VALUE_LocalPwType = 0;
                  LocalPwType_ATMX_AAL5 = 2;
                  LocalPwType_ATMX_CELLX_TRANSPORT = 3;
                  LocalPwType_VLAN = 4;
                  LocalPwType_ETHERNET = 5;
                  LocalPwType_HDLC = 6;
                  LocalPwType_PPP = 7;
                  LocalPwType_ATMX_NTO1X_VCC = 9;
                  LocalPwType_ATMX_NTO1X_VPC = 10;
                  LocalPwType_IPX_LAYER2 = 11;
                  LocalPwType_ATMX_1TO1X_VCC = 12;
                  LocalPwType_ATMX_1TO1X_VPC = 13;
                  LocalPwType_SATOPX_E1 = 17;
                  LocalPwType_CESOPSNX_BASIC = 21;
                  LocalPwType_IPX_INTERWORKING = 64;
               };
               LocalPwType local_pw_type = 2 [json_name = "local-pw-type"];
               uint32 local_pw_id = 3 [json_name = "local-pw-id"];
               enum LabelType {
                  INVALID_ENUM_VALUE_LabelType = 0;
                  LabelType_LABELX_ALERT = 1;
                  LabelType_CONTROLX_WORD = 2;
                  LabelType_NORMAL = 3;
               };
               LabelType label_type = 4 [json_name = "label-type"];
               string dest_address = 5 [json_name = "dest-address"];
               uint32 timeout = 6 [json_name = "timeout"];
               uint32 first_ttl = 7 [json_name = "first-ttl"];
               uint32 max_ttl = 8 [json_name = "max-ttl"];
               uint32 exp = 9 [json_name = "exp"];
               enum ReplyMode {
                  INVALID_ENUM_VALUE_ReplyMode = 0;
                  ReplyMode_NOX_REPLY = 1;
                  ReplyMode_UDP = 2;
                  ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
               };
               ReplyMode reply_mode = 10 [json_name = "reply-mode"];
               uint32 packet_count = 11 [json_name = "packet-count"];
               uint32 probe_failtimes = 12 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 13 [json_name = "test-failtimes"];
               enum LspVersion {
                  INVALID_ENUM_VALUE_LspVersion = 0;
                  LspVersion_RFC4379 = 2;
                  LspVersion_PTNX_MODE = 3;
               };
               LspVersion lsp_version = 14 [json_name = "lsp-version"];
               uint32 threshold_rtd = 15 [json_name = "threshold-rtd"];
               enum TtlMode {
                  INVALID_ENUM_VALUE_TtlMode = 0;
                  TtlMode_UNIFORM = 1;
                  TtlMode_PIPE = 2;
               };
               TtlMode ttl_mode = 16 [json_name = "ttl-mode"];
               uint32 hop_fail_times = 17 [json_name = "hop-fail-times"];
               bool frag_flag = 18 [json_name = "frag-flag"];
               string peer_address = 19 [json_name = "peer-address"];
               bool no_cw_flag = 20 [json_name = "no-cw-flag"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 21 [json_name = "send-trap-bits"];
               uint32 result_num = 22 [json_name = "result-num"];
               uint32 history_num = 23 [json_name = "history-num"];
               string description = 24 [json_name = "description"];
               string age_time = 25 [json_name = "age-time"];
               uint32 frequency = 26 [json_name = "frequency"];
            }
            Pwe3TraceInput pwe3_trace_input = 1 [json_name = "pwe3-trace-input"];
         }
         message Type_MacPing {
            message MacPingInput {
               message Destination_MacAddress {
                  string dest_mac_address = 1 [json_name = "dest-mac-address"];
               }
               message Destination_RemoteMepId {
                  uint32 remote_mep_id = 1 [json_name = "remote-mep-id"];
               }
               oneof Destination {
                  Destination_MacAddress destination_mac_address = 1 [json_name = "mac-address"];
                  Destination_RemoteMepId destination_remote_mep_id = 2 [json_name = "remote-mep-id"];
               }
               uint32 mep_id = 3 [json_name = "mep-id"];
               string md_name = 4 [json_name = "md-name"];
               string ma_name = 5 [json_name = "ma-name"];
               uint32 interval = 6 [json_name = "interval"];
               uint32 probe_count = 7 [json_name = "probe-count"];
               uint32 timeout = 8 [json_name = "timeout"];
               uint32 data_size = 9 [json_name = "data-size"];
               string source_if_name = 10 [json_name = "source-if-name"];
               uint32 fail_percent = 11 [json_name = "fail-percent"];
               uint32 probe_fails = 12 [json_name = "probe-fails"];
               uint32 test_fails = 13 [json_name = "test-fails"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 14 [json_name = "send-trap-bits"];
               uint32 threshold_rtd = 15 [json_name = "threshold-rtd"];
               uint32 jitter_packet_num = 16 [json_name = "jitter-packet-num"];
               uint32 frequency = 17 [json_name = "frequency"];
               uint32 result_num = 18 [json_name = "result-num"];
               uint32 history_num = 19 [json_name = "history-num"];
               string description = 20 [json_name = "description"];
               string age_time = 21 [json_name = "age-time"];
            }
            MacPingInput mac_ping_input = 1 [json_name = "mac-ping-input"];
         }
         message Type_ArpPingIp {
            message ArpPingIpInput {
               string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
               uint32 probe_count = 2 [json_name = "probe-count"];
               string out_if_name = 3 [json_name = "out-if-name"];
               uint32 timeout = 4 [json_name = "timeout"];
               uint32 result_num = 5 [json_name = "result-num"];
               uint32 history_num = 6 [json_name = "history-num"];
               string description = 7 [json_name = "description"];
               string age_time = 8 [json_name = "age-time"];
               uint32 frequency = 9 [json_name = "frequency"];
            }
            ArpPingIpInput arp_ping_ip_input = 1 [json_name = "arp-ping-ip-input"];
         }
         message Type_PathJitter {
            message PathJitterInput {
               string dest_address = 1 [json_name = "dest-address"];
               string source_address = 2 [json_name = "source-address"];
               uint32 fail_percent = 3 [json_name = "fail-percent"];
               uint32 timeout = 4 [json_name = "timeout"];
               uint32 first_ttl = 5 [json_name = "first-ttl"];
               uint32 max_ttl = 6 [json_name = "max-ttl"];
               uint32 interval = 7 [json_name = "interval"];
               uint32 probe_count = 8 [json_name = "probe-count"];
               uint32 jitter_packet_num = 9 [json_name = "jitter-packet-num"];
               uint32 data_size = 10 [json_name = "data-size"];
               string data_fill = 11 [json_name = "data-fill"];
               enum JitterMode {
                  INVALID_ENUM_VALUE_JitterMode = 0;
                  JitterMode_ICMPX_TIMESTAMP = 1;
                  JitterMode_ICMPX_ECHO = 2;
               };
               JitterMode jitter_mode = 12 [json_name = "jitter-mode"];
               uint32 tos = 13 [json_name = "tos"];
               string ni_name = 14 [json_name = "ni-name"];
               uint32 result_num = 15 [json_name = "result-num"];
               uint32 history_num = 16 [json_name = "history-num"];
               string description = 17 [json_name = "description"];
               string age_time = 18 [json_name = "age-time"];
               uint32 frequency = 19 [json_name = "frequency"];
            }
            PathJitterInput path_jitter_input = 1 [json_name = "path-jitter-input"];
         }
         message Type_VplsMacPing {
            message VplsMacPingInput {
               string vsi_name = 1 [json_name = "vsi-name"];
               string dest_address = 2 [json_name = "dest-address"];
               string data_fill = 3 [json_name = "data-fill"];
               uint32 data_size = 4 [json_name = "data-size"];
               uint32 exp = 5 [json_name = "exp"];
               enum ReplyMode {
                  INVALID_ENUM_VALUE_ReplyMode = 0;
                  ReplyMode_NOX_REPLY = 1;
                  ReplyMode_UDP = 2;
                  ReplyMode_UDPX_VIAX_VPLS = 5;
               };
               ReplyMode reply_mode = 6 [json_name = "reply-mode"];
               uint32 ttl = 7 [json_name = "ttl"];
               uint32 interval = 8 [json_name = "interval"];
               uint32 fail_percent = 9 [json_name = "fail-percent"];
               uint32 test_fail_times = 10 [json_name = "test-fail-times"];
               uint32 probe_fail_times = 11 [json_name = "probe-fail-times"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 12 [json_name = "send-trap-bits"];
               uint32 probe_count = 13 [json_name = "probe-count"];
               uint32 timeout = 14 [json_name = "timeout"];
               uint32 threshold_rtd = 15 [json_name = "threshold-rtd"];
               uint32 vlan = 16 [json_name = "vlan"];
               bool frag_flag = 17 [json_name = "frag-flag"];
               uint32 result_num = 18 [json_name = "result-num"];
               uint32 history_num = 19 [json_name = "history-num"];
               string description = 20 [json_name = "description"];
               string age_time = 21 [json_name = "age-time"];
               uint32 frequency = 22 [json_name = "frequency"];
            }
            VplsMacPingInput vpls_mac_ping_input = 1 [json_name = "vpls-mac-ping-input"];
         }
         message Type_EthernetService {
            message EthernetServiceInput {
               string fwd_if_name = 1 [json_name = "fwd-if-name"];
               uint32 config_test_duration = 2 [json_name = "config-test-duration"];
               uint32 perf_test_duration = 3 [json_name = "perf-test-duration"];
               message TestPacketSizeMode_Profile {
                  enum Profile7 {
                     INVALID_ENUM_VALUE_Profile7 = 0;
                     Profile7_PROFILEX_IMIX = 1;
                  };
                  Profile7 profile7 = 1 [json_name = "profile"];
               }
               message TestPacketSizeMode_PacketSizeList {
                  string datasizes = 1 [json_name = "datasizes"];
               }
               oneof TestPacketSizeMode {
                  TestPacketSizeMode_Profile test_packet_size_mode_profile = 4 [json_name = "profile"];
                  TestPacketSizeMode_PacketSizeList test_packet_size_mode_packet_size_list = 5 [json_name = "packet-size-list"];
               }
               repeated uint32 test_flow_id = 6 [json_name = "test-flow-id"];
               uint32 result_num = 7 [json_name = "result-num"];
               string description = 8 [json_name = "description"];
               string age_time = 9 [json_name = "age-time"];
            }
            EthernetServiceInput ethernet_service_input = 1 [json_name = "ethernet-service-input"];
         }
         message Type_GeneralFlow {
            message GeneralFlowInput {
               message DestinationAddress_L3DestAddress {
                  string dest_ipv4_address = 1 [json_name = "dest-ipv4-address"];
               }
               message DestinationAddress_L2DestAddress {
                  string dest_mac_address = 1 [json_name = "dest-mac-address"];
               }
               message DestinationAddress_L2L3DestAddress {
                  string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                  string mac_dest_address = 2 [json_name = "mac-dest-address"];
               }
               oneof DestinationAddress {
                  DestinationAddress_L3DestAddress destination_address_l3_dest_address = 1 [json_name = "l3-dest-address"];
                  DestinationAddress_L2DestAddress destination_address_l2_dest_address = 2 [json_name = "l2-dest-address"];
                  DestinationAddress_L2L3DestAddress destination_address_l2l3_dest_address = 3 [json_name = "l2l3-dest-address"];
               }
               string source_mac_address = 4 [json_name = "source-mac-address"];
               string source_ipv4_address = 5 [json_name = "source-ipv4-address"];
               message Interface_SourceInterface {
                  string source_if_name = 1 [json_name = "source-if-name"];
               }
               message Interface_FwdInterface {
                  string fwd_simu_if_name = 1 [json_name = "fwd-simu-if-name"];
                  bool share_mode_enable = 2 [json_name = "share-mode-enable"];
               }
               oneof Interface {
                  Interface_SourceInterface interface_source_interface = 6 [json_name = "source-interface"];
                  Interface_FwdInterface interface_fwd_interface = 7 [json_name = "fwd-interface"];
               }
               message Vlan_OneVlanTag {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
               }
               message Vlan_TwoVlanTag {
                  uint32 ce_vlan = 1 [json_name = "ce-vlan"];
                  uint32 pe_vlan = 2 [json_name = "pe-vlan"];
               }
               oneof Vlan {
                  Vlan_OneVlanTag vlan_one_vlan_tag = 8 [json_name = "one-vlan-tag"];
                  Vlan_TwoVlanTag vlan_two_vlan_tag = 9 [json_name = "two-vlan-tag"];
               }
               message FailPercent_FailRatio {
                  uint32 fail_ratio = 1 [json_name = "fail-ratio"];
               }
               message FailPercent_FailRatioBillionth {
                  uint32 fail_ratio_billionth = 1 [json_name = "fail-ratio-billionth"];
               }
               oneof FailPercent {
                  FailPercent_FailRatio fail_percent_fail_ratio = 10 [json_name = "fail-ratio"];
                  FailPercent_FailRatioBillionth fail_percent_fail_ratio_billionth = 11 [json_name = "fail-ratio-billionth"];
               }
               enum Measure {
                  INVALID_ENUM_VALUE_Measure = 0;
                  Measure_DELAY = 1;
                  Measure_LOSS = 2;
                  Measure_THROUGHPUT = 3;
               };
               Measure measure = 12 [json_name = "measure"];
               uint32 duration = 13 [json_name = "duration"];
               string datasizes = 14 [json_name = "datasizes"];
               uint32 tos = 15 [json_name = "tos"];
               uint32 rate_low = 16 [json_name = "rate-low"];
               uint32 rate_high = 17 [json_name = "rate-high"];
               uint32 interval = 18 [json_name = "interval"];
               uint32 priority = 19 [json_name = "priority"];
               uint32 precision = 20 [json_name = "precision"];
               bool exchange_port_enable = 21 [json_name = "exchange-port-enable"];
               enum RateClass {
                  INVALID_ENUM_VALUE_RateClass = 0;
                  RateClass_UTILIZEDX_LINEX_RATE = 1;
                  RateClass_INFORMATIONX_RATE = 2;
               };
               RateClass rate_class = 22 [json_name = "rate-class"];
               uint32 result_num = 23 [json_name = "result-num"];
               string description = 24 [json_name = "description"];
               string age_time = 25 [json_name = "age-time"];
            }
            GeneralFlowInput general_flow_input = 1 [json_name = "general-flow-input"];
         }
         message Type_VplsPwPing {
            message VplsPwPingInput {
               string vsi_name = 1 [json_name = "vsi-name"];
               string peer_address = 2 [json_name = "peer-address"];
               enum VcType {
                  INVALID_ENUM_VALUE_VcType = 0;
                  VcType_LDP = 1;
               };
               VcType vc_type = 3 [json_name = "vc-type"];
               uint32 local_pw_id = 4 [json_name = "local-pw-id"];
               enum LabelType {
                  INVALID_ENUM_VALUE_LabelType = 0;
                  LabelType_LABELX_ALERT = 1;
                  LabelType_CONTROLX_WORD = 2;
               };
               LabelType label_type = 5 [json_name = "label-type"];
               uint32 remote_pw_id = 6 [json_name = "remote-pw-id"];
               string remote_address = 7 [json_name = "remote-address"];
               uint32 timeout = 8 [json_name = "timeout"];
               uint32 max_ttl = 9 [json_name = "max-ttl"];
               uint32 exp = 10 [json_name = "exp"];
               enum ReplyMode {
                  INVALID_ENUM_VALUE_ReplyMode = 0;
                  ReplyMode_NOX_REPLY = 1;
                  ReplyMode_UDP = 2;
                  ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
               };
               ReplyMode reply_mode = 11 [json_name = "reply-mode"];
               uint32 interval = 12 [json_name = "interval"];
               uint32 probe_count = 13 [json_name = "probe-count"];
               uint32 data_size = 14 [json_name = "data-size"];
               string data_fill = 15 [json_name = "data-fill"];
               uint32 fail_percent = 16 [json_name = "fail-percent"];
               uint32 probe_failtimes = 17 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 18 [json_name = "test-failtimes"];
               uint32 threshold_rtd = 19 [json_name = "threshold-rtd"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 20 [json_name = "send-trap-bits"];
               string sender_address = 21 [json_name = "sender-address"];
               bool no_cw_flag = 22 [json_name = "no-cw-flag"];
               bool frag_flag = 23 [json_name = "frag-flag"];
               uint32 result_num = 24 [json_name = "result-num"];
               uint32 history_num = 25 [json_name = "history-num"];
               string description = 26 [json_name = "description"];
               string age_time = 27 [json_name = "age-time"];
               uint32 frequency = 28 [json_name = "frequency"];
            }
            VplsPwPingInput vpls_pw_ping_input = 1 [json_name = "vpls-pw-ping-input"];
         }
         message Type_VplsPwTrace {
            message VplsPwTraceInput {
               string vsi_name = 1 [json_name = "vsi-name"];
               string peer_address = 2 [json_name = "peer-address"];
               enum VcType {
                  INVALID_ENUM_VALUE_VcType = 0;
                  VcType_LDP = 1;
               };
               VcType vc_type = 3 [json_name = "vc-type"];
               uint32 local_pw_id = 4 [json_name = "local-pw-id"];
               enum LabelType {
                  INVALID_ENUM_VALUE_LabelType = 0;
                  LabelType_LABELX_ALERT = 1;
                  LabelType_CONTROLX_WORD = 2;
               };
               LabelType label_type = 5 [json_name = "label-type"];
               uint32 timeout = 6 [json_name = "timeout"];
               uint32 first_ttl = 7 [json_name = "first-ttl"];
               uint32 max_ttl = 8 [json_name = "max-ttl"];
               uint32 exp = 9 [json_name = "exp"];
               enum ReplyMode {
                  INVALID_ENUM_VALUE_ReplyMode = 0;
                  ReplyMode_NOX_REPLY = 1;
                  ReplyMode_UDP = 2;
                  ReplyMode_LEVELX_CONTROLX_CHANNEL = 4;
               };
               ReplyMode reply_mode = 10 [json_name = "reply-mode"];
               uint32 probe_count = 11 [json_name = "probe-count"];
               uint32 probe_failtimes = 12 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 13 [json_name = "test-failtimes"];
               uint32 threshold_rtd = 14 [json_name = "threshold-rtd"];
               enum TtlMode {
                  INVALID_ENUM_VALUE_TtlMode = 0;
                  TtlMode_UNIFORM = 1;
                  TtlMode_PIPE = 2;
               };
               TtlMode ttl_mode = 15 [json_name = "ttl-mode"];
               uint32 hop_fail_times = 16 [json_name = "hop-fail-times"];
               bool frag_flag = 17 [json_name = "frag-flag"];
               bool no_cw_flag = 18 [json_name = "no-cw-flag"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 19 [json_name = "send-trap-bits"];
               bool full_display_flag = 20 [json_name = "full-display-flag"];
               uint32 result_num = 21 [json_name = "result-num"];
               uint32 history_num = 22 [json_name = "history-num"];
               string description = 23 [json_name = "description"];
               string age_time = 24 [json_name = "age-time"];
               uint32 frequency = 25 [json_name = "frequency"];
            }
            VplsPwTraceInput vpls_pw_trace_input = 1 [json_name = "vpls-pw-trace-input"];
         }
         message Type_Dns {
            message DnsInput {
               message Address_Ipv4Address {
                  string ipv4_url_address = 1 [json_name = "ipv4-url-address"];
                  string ipv4_source_address = 2 [json_name = "ipv4-source-address"];
                  string ipv4_dns_server_address = 3 [json_name = "ipv4-dns-server-address"];
               }
               oneof Address {
                  Address_Ipv4Address address_ipv4_address = 1 [json_name = "ipv4-address"];
               }
               string ni_name = 2 [json_name = "ni-name"];
               uint32 timeout = 3 [json_name = "timeout"];
               uint32 frequency = 4 [json_name = "frequency"];
               uint32 probe_failtimes = 5 [json_name = "probe-failtimes"];
               uint32 test_failtimes = 6 [json_name = "test-failtimes"];
               enum SendTrapBits {
                  SendTrapBits_RTD = 0;
                  SendTrapBits_TESTCOMPLETE = 1;
                  SendTrapBits_TESTFAILURE = 2;
                  SendTrapBits_PROBEFAILURE = 3;
                  SendTrapBits_RESULTCHANGE = 4;
               };
               repeated SendTrapBits send_trap_bits = 7 [json_name = "send-trap-bits"];
               uint32 result_num = 8 [json_name = "result-num"];
               uint32 history_num = 9 [json_name = "history-num"];
               string description = 10 [json_name = "description"];
               uint32 threshold_rtd = 11 [json_name = "threshold-rtd"];
               string age_time = 12 [json_name = "age-time"];
            }
            DnsInput dns_input = 1 [json_name = "dns-input"];
         }
         oneof Type {
            Type_Icmp type_icmp = 4 [json_name = "icmp"];
            Type_Trace type_trace = 5 [json_name = "trace"];
            Type_Udp type_udp = 6 [json_name = "udp"];
            Type_Tcp type_tcp = 7 [json_name = "tcp"];
            Type_Jitter type_jitter = 8 [json_name = "jitter"];
            Type_IcmpJitter type_icmp_jitter = 9 [json_name = "icmp-jitter"];
            Type_LspPing type_lsp_ping = 10 [json_name = "lsp-ping"];
            Type_LspTrace type_lsp_trace = 11 [json_name = "lsp-trace"];
            Type_LspJitter type_lsp_jitter = 12 [json_name = "lsp-jitter"];
            Type_Pwe3Ping type_pwe3_ping = 13 [json_name = "pwe3-ping"];
            Type_PathMtu type_path_mtu = 14 [json_name = "path-mtu"];
            Type_Pwe3Trace type_pwe3_trace = 15 [json_name = "pwe3-trace"];
            Type_MacPing type_mac_ping = 16 [json_name = "mac-ping"];
            Type_ArpPingIp type_arp_ping_ip = 17 [json_name = "arp-ping-ip"];
            Type_PathJitter type_path_jitter = 18 [json_name = "path-jitter"];
            Type_VplsMacPing type_vpls_mac_ping = 19 [json_name = "vpls-mac-ping"];
            Type_EthernetService type_ethernet_service = 20 [json_name = "ethernet-service"];
            Type_GeneralFlow type_general_flow = 22 [json_name = "general-flow"];
            Type_VplsPwPing type_vpls_pw_ping = 23 [json_name = "vpls-pw-ping"];
            Type_VplsPwTrace type_vpls_pw_trace = 24 [json_name = "vpls-pw-trace"];
            Type_Dns type_dns = 25 [json_name = "dns"];
         }
         message NqaExecutionPolicy {
            string start_date_time = 1 [json_name = "start-date-time"];
            string end_date_time = 2 [json_name = "end-date-time"];
         }
         NqaExecutionPolicy nqa_execution_policy = 21 [json_name = "nqa-execution-policy"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 6 [json_name = "instances"];
   message Testflows {
      message TestFlow {
         uint32 test_flow_id = 1 [json_name = "test-flow-id"];
         string dest_mac = 2 [json_name = "dest-mac"];
         string src_mac = 3 [json_name = "src-mac"];
         string dest_ipv4 = 4 [json_name = "dest-ipv4"];
         string src_ipv4 = 5 [json_name = "src-ipv4"];
         uint32 dest_port = 6 [json_name = "dest-port"];
         uint32 src_port = 7 [json_name = "src-port"];
         message VlanTagConfig_OneVlanTag {
            uint32 vlan_id = 1 [json_name = "vlan-id"];
         }
         message VlanTagConfig_TwoVlanTag {
            uint32 ce_vid = 1 [json_name = "ce-vid"];
            uint32 pe_vid = 2 [json_name = "pe-vid"];
         }
         oneof VlanTagConfig {
            VlanTagConfig_OneVlanTag vlan_tag_config_one_vlan_tag = 8 [json_name = "one-vlan-tag"];
            VlanTagConfig_TwoVlanTag vlan_tag_config_two_vlan_tag = 9 [json_name = "two-vlan-tag"];
         }
         message ColorMode_ColorBlind {
            message BlindPriorityType_BlindPriority8021P {
               uint32 color_blind_8021p = 1 [json_name = "color-blind-8021p"];
            }
            message BlindPriorityType_BlindPriorityDscp {
               uint32 color_blind_dscp = 1 [json_name = "color-blind-dscp"];
            }
            oneof BlindPriorityType {
               BlindPriorityType_BlindPriority8021P blind_priority_type_blind_priority_8021p = 1 [json_name = "blind-priority-8021p"];
               BlindPriorityType_BlindPriorityDscp blind_priority_type_blind_priority_dscp = 2 [json_name = "blind-priority-dscp"];
            }
         }
         message ColorMode_ColorAware {
            message AwarePriorityType_AwarePriority8021P {
               uint32 color_aware_green_8021p = 1 [json_name = "color-aware-green-8021p"];
               uint32 color_aware_yellow_8021p = 2 [json_name = "color-aware-yellow-8021p"];
            }
            message AwarePriorityType_AwarePriorityDscp {
               uint32 color_aware_green_dscp = 1 [json_name = "color-aware-green-dscp"];
               uint32 color_aware_yellow_dscp = 2 [json_name = "color-aware-yellow-dscp"];
            }
            oneof AwarePriorityType {
               AwarePriorityType_AwarePriority8021P aware_priority_type_aware_priority_8021p = 1 [json_name = "aware-priority-8021p"];
               AwarePriorityType_AwarePriorityDscp aware_priority_type_aware_priority_dscp = 2 [json_name = "aware-priority-dscp"];
            }
         }
         oneof ColorMode {
            ColorMode_ColorBlind color_mode_color_blind = 10 [json_name = "color-blind"];
            ColorMode_ColorAware color_mode_color_aware = 11 [json_name = "color-aware"];
         }
         message RangeType_DestMac {
            message DestMacRangeType_EndDestMac {
               string end_dest_mac = 1 [json_name = "end-dest-mac"];
            }
            message DestMacRangeType_IncrementDestMac {
               string dest_mac_mask = 1 [json_name = "dest-mac-mask"];
               uint32 dest_mac_increment_step = 2 [json_name = "dest-mac-increment-step"];
               uint32 dest_mac_increment_count = 3 [json_name = "dest-mac-increment-count"];
            }
            oneof DestMacRangeType {
               DestMacRangeType_EndDestMac dest_mac_range_type_end_dest_mac = 1 [json_name = "end-dest-mac"];
               DestMacRangeType_IncrementDestMac dest_mac_range_type_increment_dest_mac = 2 [json_name = "increment-dest-mac"];
            }
         }
         message RangeType_SourceMac {
            message SrcMacRangeType_EndSrcMac {
               string end_src_mac = 1 [json_name = "end-src-mac"];
            }
            message SrcMacRangeType_IncrementSrcMac {
               string src_mac_mask = 1 [json_name = "src-mac-mask"];
               uint32 src_mac_increment_step = 2 [json_name = "src-mac-increment-step"];
               uint32 src_mac_increment_count = 3 [json_name = "src-mac-increment-count"];
            }
            oneof SrcMacRangeType {
               SrcMacRangeType_EndSrcMac src_mac_range_type_end_src_mac = 1 [json_name = "end-src-mac"];
               SrcMacRangeType_IncrementSrcMac src_mac_range_type_increment_src_mac = 2 [json_name = "increment-src-mac"];
            }
         }
         message RangeType_DestIpv4 {
            message DestIpv4RangeType_EndDestIpv4 {
               string end_dest_ipv4 = 1 [json_name = "end-dest-ipv4"];
            }
            message DestIpv4RangeType_IncrementDestIpv4 {
               string dest_ipv4_mask = 1 [json_name = "dest-ipv4-mask"];
               uint32 dest_ipv4_increment_step = 2 [json_name = "dest-ipv4-increment-step"];
               uint32 dest_ipv4_increment_count = 3 [json_name = "dest-ipv4-increment-count"];
            }
            oneof DestIpv4RangeType {
               DestIpv4RangeType_EndDestIpv4 dest_ipv4_range_type_end_dest_ipv4 = 1 [json_name = "end-dest-ipv4"];
               DestIpv4RangeType_IncrementDestIpv4 dest_ipv4_range_type_increment_dest_ipv4 = 2 [json_name = "increment-dest-ipv4"];
            }
         }
         message RangeType_SourceIpv4 {
            message SrcIpv4RangeType_EndSrcIpv4 {
               string end_src_ipv4 = 1 [json_name = "end-src-ipv4"];
            }
            message SrcIpv4RangeType_IncrementSrcIpv4 {
               string src_ipv4_mask = 1 [json_name = "src-ipv4-mask"];
               uint32 src_ipv4_increment_step = 2 [json_name = "src-ipv4-increment-step"];
               uint32 src_ipv4_increment_count = 3 [json_name = "src-ipv4-increment-count"];
            }
            oneof SrcIpv4RangeType {
               SrcIpv4RangeType_EndSrcIpv4 src_ipv4_range_type_end_src_ipv4 = 1 [json_name = "end-src-ipv4"];
               SrcIpv4RangeType_IncrementSrcIpv4 src_ipv4_range_type_increment_src_ipv4 = 2 [json_name = "increment-src-ipv4"];
            }
         }
         message RangeType_DestPort {
            uint32 end_dest_port = 1 [json_name = "end-dest-port"];
         }
         message RangeType_SourcePort {
            uint32 end_src_port = 1 [json_name = "end-src-port"];
         }
         message RangeType_VlanId {
            uint32 end_vlan_id = 1 [json_name = "end-vlan-id"];
         }
         message RangeType_CeVid {
            uint32 end_ce_vid = 1 [json_name = "end-ce-vid"];
         }
         message RangeType_ColorBlind8021P {
            uint32 end_color_blind_8021p = 1 [json_name = "end-color-blind-8021p"];
         }
         message RangeType_ColorBlindDscp {
            uint32 end_color_blind_dscp = 1 [json_name = "end-color-blind-dscp"];
         }
         message RangeType_ColorAware8021P {
            uint32 end_color_aware_green_8021p = 1 [json_name = "end-color-aware-green-8021p"];
            uint32 end_color_aware_yellow_8021p = 2 [json_name = "end-color-aware-yellow-8021p"];
         }
         message RangeType_ColorAwareDscp {
            uint32 end_color_aware_green_dscp = 1 [json_name = "end-color-aware-green-dscp"];
            uint32 end_color_aware_yellow_dscp = 2 [json_name = "end-color-aware-yellow-dscp"];
         }
         oneof RangeType {
            RangeType_DestMac range_type_dest_mac = 12 [json_name = "dest-mac"];
            RangeType_SourceMac range_type_source_mac = 13 [json_name = "source-mac"];
            RangeType_DestIpv4 range_type_dest_ipv4 = 14 [json_name = "dest-ipv4"];
            RangeType_SourceIpv4 range_type_source_ipv4 = 15 [json_name = "source-ipv4"];
            RangeType_DestPort range_type_dest_port = 16 [json_name = "dest-port"];
            RangeType_SourcePort range_type_source_port = 17 [json_name = "source-port"];
            RangeType_VlanId range_type_vlan_id = 18 [json_name = "vlan-id"];
            RangeType_CeVid range_type_ce_vid = 19 [json_name = "ce-vid"];
            RangeType_ColorBlind8021P range_type_color_blind_8021p = 20 [json_name = "color-blind-8021p"];
            RangeType_ColorBlindDscp range_type_color_blind_dscp = 21 [json_name = "color-blind-dscp"];
            RangeType_ColorAware8021P range_type_color_aware_8021p = 22 [json_name = "color-aware-8021p"];
            RangeType_ColorAwareDscp range_type_color_aware_dscp = 23 [json_name = "color-aware-dscp"];
         }
         uint32 cir = 24 [json_name = "cir"];
         uint32 eir = 25 [json_name = "eir"];
         uint32 flr = 26 [json_name = "flr"];
         uint32 ftd = 27 [json_name = "ftd"];
         uint32 fdv = 28 [json_name = "fdv"];
         bool cir_simple_test = 29 [json_name = "cir-simple-test"];
         bool traffic_policing_test = 30 [json_name = "traffic-policing-test"];
         string description = 31 [json_name = "description"];
      }
      repeated TestFlow test_flow = 1 [json_name = "test-flow"];
   }
   Testflows testflows = 7 [json_name = "testflows"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-05-05 10:03:15
// ProtoYang-version 1
// module huawei-ifit
// revision 2020-04-08
// revision 2020-03-25
// revision 2020-03-16
// revision 2020-03-09
// revision 2019-05-21
// namespace urn:huawei:yang:huawei-ifit

package huawei_ifit;

message Ifit {
   message Global {
      bool enable = 1 [json_name = "enable"];
      uint32 node_id = 2 [json_name = "node-id"];
   }
   Global global = 1 [json_name = "global"];
   message FlowStatistics {
      message FlowStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         enum AddressFamily {
            AddressFamily_IPV4 = 0;
            AddressFamily_IPV6 = 1;
         };
         AddressFamily address_family = 3 [json_name = "address-family"];
         string source_ip = 4 [json_name = "source-ip"];
         string destination_ip = 5 [json_name = "destination-ip"];
         uint32 source_mask = 6 [json_name = "source-mask"];
         uint32 destination_mask = 7 [json_name = "destination-mask"];
         uint32 source_port = 8 [json_name = "source-port"];
         uint32 destination_port = 9 [json_name = "destination-port"];
         uint32 protocol = 10 [json_name = "protocol"];
         string vpn_name = 11 [json_name = "vpn-name"];
         uint32 if_index = 12 [json_name = "if-index"];
         uint32 error_info = 13 [json_name = "error-info"];
         uint32 interval = 14 [json_name = "interval"];
         uint64 period_id = 15 [json_name = "period-id"];
         uint64 packet_count = 16 [json_name = "packet-count"];
         uint64 byte_count = 17 [json_name = "byte-count"];
         uint32 timestamp_second = 18 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 19 [json_name = "timestamp-nanosecond"];
         string tunnel_if_index = 20 [json_name = "tunnel-if-index"];
         uint32 ttl = 21 [json_name = "ttl"];
         uint32 dscp = 22 [json_name = "dscp"];
         uint32 vlan = 23 [json_name = "vlan"];
         uint32 cfg_id = 24 [json_name = "cfg-id"];
         uint32 measure_mode = 25 [json_name = "measure-mode"];
         enum GtpMode {
            GtpMode_DISABLED = 0;
            GtpMode_ENABLE = 1;
            GtpMode_SNX_ENABLE = 2;
         };
         GtpMode gtp_mode = 26 [json_name = "gtp-mode"];
         uint32 gtp_te_id = 27 [json_name = "gtp-te-id"];
         uint64 disorder_count = 28 [json_name = "disorder-count"];
         uint64 sn_packet_loss_count = 29 [json_name = "sn-packet-loss-count"];
         uint32 vuni_if_index = 30 [json_name = "vuni-if-index"];
         uint32 service_type = 31 [json_name = "service-type"];
         string if_name = 32 [json_name = "if-name"];
         uint32 error_info_ext = 33 [json_name = "error-info-ext"];
      }
      repeated FlowStatistic flow_statistic = 1 [json_name = "flow-statistic"];
   }
   FlowStatistics flow_statistics = 2 [json_name = "flow-statistics"];
   message FlowHopStatistics {
      message FlowHopStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         uint32 if_index = 3 [json_name = "if-index"];
         uint32 error_info = 4 [json_name = "error-info"];
         uint64 period_id = 5 [json_name = "period-id"];
         uint64 packet_count = 6 [json_name = "packet-count"];
         uint64 byte_count = 7 [json_name = "byte-count"];
         uint32 timestamp_second = 8 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 9 [json_name = "timestamp-nanosecond"];
         string tunnel_if_index = 10 [json_name = "tunnel-if-index"];
         uint32 ttl = 11 [json_name = "ttl"];
         uint32 cfg_id = 12 [json_name = "cfg-id"];
         uint32 measure_mode = 13 [json_name = "measure-mode"];
         uint64 maximum_delay = 14 [json_name = "maximum-delay"];
         uint64 minimum_delay = 15 [json_name = "minimum-delay"];
         uint64 total_delay = 16 [json_name = "total-delay"];
         uint64 total_count = 17 [json_name = "total-count"];
         uint64 disorder_count = 18 [json_name = "disorder-count"];
         uint64 sn_packet_loss_count = 19 [json_name = "sn-packet-loss-count"];
         uint32 sub_if_index = 20 [json_name = "sub-if-index"];
         enum MapFlag {
            MapFlag_DISABLED = 0;
            MapFlag_INGRESSX_ENABLE = 1;
            MapFlag_EGRESSX_ENABLE = 2;
            MapFlag_INGRESSX_EGRESSX_ENABLE = 3;
         };
         MapFlag map_flag = 21 [json_name = "map-flag"];
         string if_name = 22 [json_name = "if-name"];
         uint32 error_info_ext = 23 [json_name = "error-info-ext"];
      }
      repeated FlowHopStatistic flow_hop_statistic = 1 [json_name = "flow-hop-statistic"];
   }
   FlowHopStatistics flow_hop_statistics = 3 [json_name = "flow-hop-statistics"];
   message FlowPeerIpStatistics {
      message FlowPeerIpStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         string peer_ip = 3 [json_name = "peer-ip"];
         string vpn_name = 4 [json_name = "vpn-name"];
         uint32 error_info = 5 [json_name = "error-info"];
         uint32 interval = 6 [json_name = "interval"];
         uint32 if_index = 7 [json_name = "if-index"];
         uint64 period_id = 8 [json_name = "period-id"];
         uint64 packet_count = 9 [json_name = "packet-count"];
         uint64 byte_count = 10 [json_name = "byte-count"];
         uint32 timestamp_second = 11 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 12 [json_name = "timestamp-nanosecond"];
         enum VpnType {
            VpnType_VPN = 0;
            VpnType_EVPNX_VPWS = 1;
            VpnType_VPNV4 = 2;
            VpnType_VPNV6 = 3;
         };
         VpnType vpn_type = 13 [json_name = "vpn-type"];
         string evpn_name = 14 [json_name = "evpn-name"];
         uint32 ttl = 15 [json_name = "ttl"];
         uint32 evpl_id = 16 [json_name = "evpl-id"];
         uint32 measure_mode = 17 [json_name = "measure-mode"];
         enum AddressFamily {
            AddressFamily_IPV4 = 0;
            AddressFamily_IPV6 = 1;
         };
         AddressFamily address_family = 18 [json_name = "address-family"];
         uint32 error_info_ext = 19 [json_name = "error-info-ext"];
      }
      repeated FlowPeerIpStatistic flow_peer_ip_statistic = 1 [json_name = "flow-peer-ip-statistic"];
   }
   FlowPeerIpStatistics flow_peer_ip_statistics = 4 [json_name = "flow-peer-ip-statistics"];
   message FlowLocatorStatistics {
      message FlowLocatorStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         string locator_prefix = 3 [json_name = "locator-prefix"];
         uint32 prefix_length = 4 [json_name = "prefix-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         uint32 error_info = 6 [json_name = "error-info"];
         uint32 interval = 7 [json_name = "interval"];
         uint64 period_id = 8 [json_name = "period-id"];
         uint32 if_index = 9 [json_name = "if-index"];
         uint64 packet_count = 10 [json_name = "packet-count"];
         uint64 byte_count = 11 [json_name = "byte-count"];
         uint32 timestamp_second = 12 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 13 [json_name = "timestamp-nanosecond"];
         enum VpnType {
            VpnType_VPN = 0;
            VpnType_EVPNX_VPWS = 1;
            VpnType_VPNV4 = 2;
            VpnType_VPNV6 = 3;
         };
         VpnType vpn_type = 14 [json_name = "vpn-type"];
         string evpn_name = 15 [json_name = "evpn-name"];
         uint32 ttl = 16 [json_name = "ttl"];
         uint32 evpl_id = 17 [json_name = "evpl-id"];
         uint32 measure_mode = 18 [json_name = "measure-mode"];
         enum AddressFamily {
            AddressFamily_IPV4 = 0;
            AddressFamily_IPV6 = 1;
         };
         AddressFamily address_family = 19 [json_name = "address-family"];
         uint32 error_info_ext = 20 [json_name = "error-info-ext"];
      }
      repeated FlowLocatorStatistic flow_locator_statistic = 1 [json_name = "flow-locator-statistic"];
   }
   FlowLocatorStatistics flow_locator_statistics = 5 [json_name = "flow-locator-statistics"];
   message IfitCommon {
      message Global {
         uint32 node_id = 1 [json_name = "node-id"];
         uint32 dynamic_flow_aging_multiplier = 2 [json_name = "dynamic-flow-aging-multiplier"];
         enum ClockMode {
            ClockMode_COMMON = 0;
            ClockMode_PRECISIONX_SAMPLING = 1;
            ClockMode_PRECISIONX_FULL = 2;
         };
         ClockMode clock_mode = 3 [json_name = "clock-mode"];
         bool measure_enable = 4 [json_name = "measure-enable"];
         enum PeriodTimeSecond {
            INVALID_ENUM_VALUE_PeriodTimeSecond = 0;
            PeriodTimeSecond_PTP = 1;
            PeriodTimeSecond_NTP = 2;
         };
         PeriodTimeSecond period_time_second = 5 [json_name = "period-time-second"];
         uint32 ptp_utp_offset = 6 [json_name = "ptp-utp-offset"];
      }
      Global global = 1 [json_name = "global"];
      message NextHops {
         message NextHop {
            string address = 1 [json_name = "address"];
         }
         repeated NextHop next_hop = 1 [json_name = "next-hop"];
      }
      NextHops next_hops = 2 [json_name = "next-hops"];
      message PeerLocators {
         message PeerLocator {
            string prefix = 1 [json_name = "prefix"];
            uint32 prefix_mask_length = 2 [json_name = "prefix-mask-length"];
         }
         repeated PeerLocator peer_locator = 1 [json_name = "peer-locator"];
      }
      PeerLocators peer_locators = 3 [json_name = "peer-locators"];
      message StaticInstances {
         message StaticInstance {
            string name = 1 [json_name = "name"];
            uint32 interval = 2 [json_name = "interval"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 3 [json_name = "measure-mode"];
            bool loss_measure_enable = 4 [json_name = "loss-measure-enable"];
            bool delay_measure_enable = 5 [json_name = "delay-measure-enable"];
            bool disorder_measure_enable = 6 [json_name = "disorder-measure-enable"];
            message Flow {
               enum FlowType {
                  INVALID_ENUM_VALUE_FlowType = 0;
                  FlowType_BIDIRECTION = 1;
                  FlowType_UNIDIRECTION = 2;
               };
               FlowType flow_type = 1 [json_name = "flow-type"];
               message BindIfs {
                  message BindIf {
                     string if_name = 1 [json_name = "if-name"];
                     uint64 flow_id = 2 [json_name = "flow-id"];
                  }
                  repeated BindIf bind_if = 1 [json_name = "bind-if"];
               }
               BindIfs bind_ifs = 2 [json_name = "bind-ifs"];
               message FlowFilter_FilterCondition1 {
                  message FlowAddressType_Ipv4Condition {
                     string source_ip = 1 [json_name = "source-ip"];
                     string destination_ip = 2 [json_name = "destination-ip"];
                     uint32 source_mask = 3 [json_name = "source-mask"];
                     uint32 destination_mask = 4 [json_name = "destination-mask"];
                  }
                  message FlowAddressType_Ipv6Condition {
                     string source_ipv6 = 1 [json_name = "source-ipv6"];
                     string destination_ipv6 = 2 [json_name = "destination-ipv6"];
                     uint32 source_ipv6_mask = 3 [json_name = "source-ipv6-mask"];
                     uint32 destination_ipv6_mask = 4 [json_name = "destination-ipv6-mask"];
                  }
                  oneof FlowAddressType {
                     FlowAddressType_Ipv4Condition flow_address_type_ipv4_condition = 1 [json_name = "ipv4-condition"];
                     FlowAddressType_Ipv6Condition flow_address_type_ipv6_condition = 2 [json_name = "ipv6-condition"];
                  }
                  uint32 protocol = 3 [json_name = "protocol"];
                  uint32 source_port = 4 [json_name = "source-port"];
                  uint32 destination_port = 5 [json_name = "destination-port"];
                  bool gtp_enable = 6 [json_name = "gtp-enable"];
                  uint32 gtp_teid = 7 [json_name = "gtp-teid"];
                  string ni_name = 8 [json_name = "ni-name"];
                  uint32 dscp = 9 [json_name = "dscp"];
               }
               message FlowFilter_FilterCondition2 {
                  message VpnFilter_NiCondition {
                     enum AddressType {
                        INVALID_ENUM_VALUE_AddressType = 0;
                        AddressType_IPV4X_UNICAST = 1;
                        AddressType_IPV6X_UNICAST = 2;
                     };
                     AddressType address_type = 1 [json_name = "address-type"];
                     string peer_ni_name = 2 [json_name = "peer-ni-name"];
                  }
                  message VpnFilter_EvplCondition {
                     uint32 peer_evpl_id = 1 [json_name = "peer-evpl-id"];
                  }
                  oneof VpnFilter {
                     VpnFilter_NiCondition vpn_filter_ni_condition = 1 [json_name = "ni-condition"];
                     VpnFilter_EvplCondition vpn_filter_evpl_condition = 2 [json_name = "evpl-condition"];
                  }
                  message PeerFilter_IpCondition {
                     string peer_ip = 1 [json_name = "peer-ip"];
                  }
                  message PeerFilter_LocatorCondition {
                     string peer_locator_prefix = 1 [json_name = "peer-locator-prefix"];
                     uint32 peer_locator_prefix_mask_len = 2 [json_name = "peer-locator-prefix-mask-len"];
                  }
                  oneof PeerFilter {
                     PeerFilter_IpCondition peer_filter_ip_condition = 3 [json_name = "ip-condition"];
                     PeerFilter_LocatorCondition peer_filter_locator_condition = 4 [json_name = "locator-condition"];
                  }
               }
               message FlowFilter_FlowApn {
                  message ApnFilter_ApnIdIpv6 {
                     string inst_name = 1 [json_name = "inst-name"];
                  }
                  oneof ApnFilter {
                     ApnFilter_ApnIdIpv6 apn_filter_apn_id_ipv6 = 1 [json_name = "apn-id-ipv6"];
                  }
               }
               oneof FlowFilter {
                  FlowFilter_FilterCondition1 flow_filter_filter_condition1 = 3 [json_name = "filter-condition1"];
                  FlowFilter_FilterCondition2 flow_filter_filter_condition2 = 4 [json_name = "filter-condition2"];
                  FlowFilter_FlowApn flow_filter_flow_apn = 5 [json_name = "flow-apn"];
               }
            }
            Flow flow = 7 [json_name = "flow"];
            bool gtpu_sn_measure_enable = 8 [json_name = "gtpu-sn-measure-enable"];
            bool delay_per_packet_enable = 9 [json_name = "delay-per-packet-enable"];
         }
         repeated StaticInstance static_instance = 1 [json_name = "static-instance"];
      }
      StaticInstances static_instances = 4 [json_name = "static-instances"];
      message DynamicFlowHops {
         message DynamicFlowHop {
            uint64 flow_id = 1 [json_name = "flow-id"];
            enum FlowType {
               INVALID_ENUM_VALUE_FlowType = 0;
               FlowType_BIDIRECTION = 1;
               FlowType_UNIDIRECTION = 2;
            };
            FlowType flow_type = 2 [json_name = "flow-type"];
            string if_name = 3 [json_name = "if-name"];
            uint32 interval = 4 [json_name = "interval"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_INGRESS = 1;
               Direction_TRANSITX_INPUT = 2;
               Direction_TRANSITX_OUTPUT = 3;
               Direction_EGRESS = 4;
               Direction_INGRESSX_OUTPUT = 5;
               Direction_EGRESSX_INPUT = 6;
               Direction_EGRESSX_TOX_CPU = 7;
               Direction_EGRESSX_NORMALX_DROP = 8;
               Direction_CONVERSIONX_INPUT = 9;
               Direction_CONVERSIONX_OUTPUT = 10;
            };
            Direction direction = 5 [json_name = "direction"];
            bool loss_measure_enable = 6 [json_name = "loss-measure-enable"];
            bool delay_measure_enable = 7 [json_name = "delay-measure-enable"];
            bool disorder_measure_enable = 8 [json_name = "disorder-measure-enable"];
            uint32 flow_monitor_id = 9 [json_name = "flow-monitor-id"];
            uint32 node_id = 10 [json_name = "node-id"];
            enum InstanceType {
               InstanceType_INSTANCE = 0;
               InstanceType_INSTANCEX_HT16 = 2;
            };
            InstanceType instance_type = 11 [json_name = "instance-type"];
         }
         repeated DynamicFlowHop dynamic_flow_hop = 1 [json_name = "dynamic-flow-hop"];
      }
      DynamicFlowHops dynamic_flow_hops = 5 [json_name = "dynamic-flow-hops"];
      message DynamicFlows {
         message DynamicFlow {
            uint64 flow_id = 1 [json_name = "flow-id"];
            enum FlowType {
               INVALID_ENUM_VALUE_FlowType = 0;
               FlowType_BIDIRECTION = 1;
               FlowType_UNIDIRECTION = 2;
            };
            FlowType flow_type = 2 [json_name = "flow-type"];
            enum AddressType {
               AddressType_IPV4 = 0;
               AddressType_IPV6 = 1;
            };
            AddressType address_type = 3 [json_name = "address-type"];
            string source_ip = 4 [json_name = "source-ip"];
            string destination_ip = 5 [json_name = "destination-ip"];
            uint32 source_mask = 6 [json_name = "source-mask"];
            uint32 destination_mask = 7 [json_name = "destination-mask"];
            uint32 protocol = 8 [json_name = "protocol"];
            uint32 source_port = 9 [json_name = "source-port"];
            uint32 destination_port = 10 [json_name = "destination-port"];
            string ni_name = 11 [json_name = "ni-name"];
            string if_name = 12 [json_name = "if-name"];
            uint32 interval = 13 [json_name = "interval"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 14 [json_name = "measure-mode"];
            bool delay_measure_enable = 15 [json_name = "delay-measure-enable"];
            bool loss_measure_enable = 16 [json_name = "loss-measure-enable"];
            bool disorder_measure_enable = 17 [json_name = "disorder-measure-enable"];
            uint32 dscp = 18 [json_name = "dscp"];
            bool delay_per_packet_enable = 19 [json_name = "delay-per-packet-enable"];
         }
         repeated DynamicFlow dynamic_flow = 1 [json_name = "dynamic-flow"];
      }
      DynamicFlows dynamic_flows = 6 [json_name = "dynamic-flows"];
      message WhitelistGroups {
         message WhitelistGroup {
            string group_name = 1 [json_name = "group-name"];
            message WhitelistRules {
               message WhitelistRule {
                  string rule_name = 1 [json_name = "rule-name"];
                  enum AddressFamily {
                     AddressFamily_IPV4 = 0;
                     AddressFamily_IPV6 = 1;
                  };
                  AddressFamily address_family = 2 [json_name = "address-family"];
                  message AddressType_Ipv4Condition {
                     string source_ipv4_address = 1 [json_name = "source-ipv4-address"];
                     uint32 source_ipv4_mask = 2 [json_name = "source-ipv4-mask"];
                     string destination_ipv4_address = 3 [json_name = "destination-ipv4-address"];
                     uint32 destination_ipv4_mask = 4 [json_name = "destination-ipv4-mask"];
                  }
                  message AddressType_Ipv6Condition {
                     string source_ipv6_address = 1 [json_name = "source-ipv6-address"];
                     uint32 source_ipv6_mask = 2 [json_name = "source-ipv6-mask"];
                     string destination_ipv6_address = 3 [json_name = "destination-ipv6-address"];
                     uint32 destination_ipv6_mask = 4 [json_name = "destination-ipv6-mask"];
                  }
                  oneof AddressType {
                     AddressType_Ipv4Condition address_type_ipv4_condition = 3 [json_name = "ipv4-condition"];
                     AddressType_Ipv6Condition address_type_ipv6_condition = 4 [json_name = "ipv6-condition"];
                  }
                  uint32 protocol = 5 [json_name = "protocol"];
                  uint32 source_port = 6 [json_name = "source-port"];
                  uint32 destination_port = 7 [json_name = "destination-port"];
                  uint32 source_port_end = 8 [json_name = "source-port-end"];
                  uint32 destination_port_end = 9 [json_name = "destination-port-end"];
               }
               repeated WhitelistRule whitelist_rule = 1 [json_name = "whitelist-rule"];
            }
            WhitelistRules whitelist_rules = 2 [json_name = "whitelist-rules"];
            enum Mode {
               Mode_COMMON = 0;
               Mode_NATIVEX_IP = 1;
            };
            Mode mode = 3 [json_name = "mode"];
         }
         repeated WhitelistGroup whitelist_group = 1 [json_name = "whitelist-group"];
      }
      WhitelistGroups whitelist_groups = 7 [json_name = "whitelist-groups"];
      message NativeIpLearning {
         uint32 interval = 1 [json_name = "interval"];
         enum ColorFlag {
            ColorFlag_FLAGSX_BIT0 = 0;
            ColorFlag_TOSX_BIT3 = 3;
            ColorFlag_TOSX_BIT4 = 4;
            ColorFlag_TOSX_BIT5 = 5;
            ColorFlag_TOSX_BIT6 = 6;
            ColorFlag_TOSX_BIT7 = 7;
         };
         ColorFlag color_flag = 2 [json_name = "color-flag"];
         bool report_loss_enable = 3 [json_name = "report-loss-enable"];
         message BindLearningInterfaces {
            message BindLearningInterface {
               string interface_name = 1 [json_name = "interface-name"];
               string rule_name = 2 [json_name = "rule-name"];
               enum MeasurePoint {
                  INVALID_ENUM_VALUE_MeasurePoint = 0;
                  MeasurePoint_INX_POINT = 1;
                  MeasurePoint_OUTX_POINT = 2;
                  MeasurePoint_MIDX_POINT = 3;
               };
               MeasurePoint measure_point = 3 [json_name = "measure-point"];
               enum MeasureDirection {
                  INVALID_ENUM_VALUE_MeasureDirection = 0;
                  MeasureDirection_INGRESS = 1;
                  MeasureDirection_EGRESS = 2;
               };
               MeasureDirection measure_direction = 4 [json_name = "measure-direction"];
               enum FlowType {
                  INVALID_ENUM_VALUE_FlowType = 0;
                  FlowType_BIDIRECTION = 1;
                  FlowType_UNIDIRECTION = 2;
               };
               FlowType flow_type = 5 [json_name = "flow-type"];
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INGRESS = 1;
                  Direction_TRANSITX_INPUT = 2;
                  Direction_TRANSITX_OUTPUT = 3;
                  Direction_EGRESS = 4;
                  Direction_INGRESSX_OUTPUT = 5;
                  Direction_EGRESSX_INPUT = 6;
                  Direction_EGRESSX_TOX_CPU = 7;
                  Direction_EGRESSX_NORMALX_DROP = 8;
                  Direction_CONVERSIONX_INPUT = 9;
                  Direction_CONVERSIONX_OUTPUT = 10;
               };
               Direction direction = 6 [json_name = "direction"];
            }
            repeated BindLearningInterface bind_learning_interface = 1 [json_name = "bind-learning-interface"];
         }
         BindLearningInterfaces bind_learning_interfaces = 4 [json_name = "bind-learning-interfaces"];
      }
      NativeIpLearning native_ip_learning = 8 [json_name = "native-ip-learning"];
      message Srv6SegmentListFlows {
         message Srv6SegmentListFlow {
            uint64 flow_id = 1 [json_name = "flow-id"];
            uint32 segment_list_id = 2 [json_name = "segment-list-id"];
            enum FlowType {
               INVALID_ENUM_VALUE_FlowType = 0;
               FlowType_BIDIRECTION = 1;
               FlowType_UNIDIRECTION = 2;
            };
            FlowType flow_type = 3 [json_name = "flow-type"];
            bool loss_measure_enable = 4 [json_name = "loss-measure-enable"];
            bool delay_measure_enable = 5 [json_name = "delay-measure-enable"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 6 [json_name = "measure-mode"];
            uint32 interval = 7 [json_name = "interval"];
            uint32 color = 8 [json_name = "color"];
            string binding_sid = 9 [json_name = "binding-sid"];
            string reverse_binding_sid = 10 [json_name = "reverse-binding-sid"];
            string end_point = 11 [json_name = "end-point"];
         }
         repeated Srv6SegmentListFlow srv6_segment_list_flow = 1 [json_name = "srv6-segment-list-flow"];
      }
      Srv6SegmentListFlows srv6_segment_list_flows = 9 [json_name = "srv6-segment-list-flows"];
      message WorkMode {
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_MCP = 1;
            Mode_DCP = 2;
         };
         Mode mode = 1 [json_name = "mode"];
         enum ServiceType {
            INVALID_ENUM_VALUE_ServiceType = 0;
            ServiceType_SRV6X_SEGMENTX_LIST = 1;
         };
         ServiceType service_type = 2 [json_name = "service-type"];
      }
      WorkMode work_mode = 10 [json_name = "work-mode"];
      message FlowStatisticResults {
         message FlowStatisticResult {
            uint64 flow_id = 1 [json_name = "flow-id"];
            uint32 segment_list_id = 2 [json_name = "segment-list-id"];
            uint32 color = 3 [json_name = "color"];
            message OneWayDelays {
               message OneWayDelay {
                  uint64 period = 1 [json_name = "period"];
                  int64 local_delay = 2 [json_name = "local-delay"];
                  uint64 local_delay_jitter = 3 [json_name = "local-delay-jitter"];
                  int64 remote_delay = 4 [json_name = "remote-delay"];
                  uint64 remote_delay_jitter = 5 [json_name = "remote-delay-jitter"];
               }
               repeated OneWayDelay one_way_delay = 1 [json_name = "one-way-delay"];
            }
            OneWayDelays one_way_delays = 4 [json_name = "one-way-delays"];
            message TwoWayDelays {
               message TwoWayDelay {
                  uint64 period = 1 [json_name = "period"];
                  uint64 delay = 2 [json_name = "delay"];
                  uint64 jitter = 3 [json_name = "jitter"];
               }
               repeated TwoWayDelay two_way_delay = 1 [json_name = "two-way-delay"];
            }
            TwoWayDelays two_way_delays = 5 [json_name = "two-way-delays"];
            message OneWayLosses {
               message OneWayLoss {
                  uint64 period = 1 [json_name = "period"];
                  uint64 local_loss = 2 [json_name = "local-loss"];
                  uint32 local_loss_ratio = 3 [json_name = "local-loss-ratio"];
                  uint64 remote_loss = 4 [json_name = "remote-loss"];
                  uint32 remote_loss_ratio = 5 [json_name = "remote-loss-ratio"];
               }
               repeated OneWayLoss one_way_loss = 1 [json_name = "one-way-loss"];
            }
            OneWayLosses one_way_losses = 6 [json_name = "one-way-losses"];
            string end_point = 7 [json_name = "end-point"];
         }
         repeated FlowStatisticResult flow_statistic_result = 1 [json_name = "flow-statistic-result"];
      }
      FlowStatisticResults flow_statistic_results = 11 [json_name = "flow-statistic-results"];
      message InstanceHt16S {
         message InstanceHt16 {
            string name = 1 [json_name = "name"];
            enum Interval {
               Interval_X_1S = 0;
               Interval_X_10S = 1;
               Interval_X_30S = 2;
               Interval_X_60S = 3;
               Interval_X_300S = 4;
            };
            Interval interval = 2 [json_name = "interval"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 3 [json_name = "measure-mode"];
            bool measure_enable = 4 [json_name = "measure-enable"];
            bool delay_measure_enable = 5 [json_name = "delay-measure-enable"];
            message Flow {
               enum FlowType {
                  INVALID_ENUM_VALUE_FlowType = 0;
                  FlowType_BIDIRECTION = 1;
                  FlowType_UNIDIRECTION = 2;
               };
               FlowType flow_type = 1 [json_name = "flow-type"];
               message FlowFilter_FilterCondition1 {
                  enum AddressFamily {
                     AddressFamily_IPV4 = 0;
                     AddressFamily_IPV6 = 1;
                  };
                  AddressFamily address_family = 1 [json_name = "address-family"];
                  message FlowAddressType_Ipv4Condition {
                     string source_ip = 1 [json_name = "source-ip"];
                     string destination_ip = 2 [json_name = "destination-ip"];
                     uint32 source_mask = 3 [json_name = "source-mask"];
                     uint32 destination_mask = 4 [json_name = "destination-mask"];
                  }
                  message FlowAddressType_Ipv6Condition {
                     string source_ipv6 = 1 [json_name = "source-ipv6"];
                     string destination_ipv6 = 2 [json_name = "destination-ipv6"];
                     uint32 source_ipv6_mask = 3 [json_name = "source-ipv6-mask"];
                     uint32 destination_ipv6_mask = 4 [json_name = "destination-ipv6-mask"];
                  }
                  oneof FlowAddressType {
                     FlowAddressType_Ipv4Condition flow_address_type_ipv4_condition = 2 [json_name = "ipv4-condition"];
                     FlowAddressType_Ipv6Condition flow_address_type_ipv6_condition = 3 [json_name = "ipv6-condition"];
                  }
                  uint32 protocol = 4 [json_name = "protocol"];
                  uint32 source_port = 5 [json_name = "source-port"];
                  uint32 destination_port = 6 [json_name = "destination-port"];
                  string ni_name = 7 [json_name = "ni-name"];
                  uint32 dscp = 8 [json_name = "dscp"];
               }
               oneof FlowFilter {
                  FlowFilter_FilterCondition1 flow_filter_filter_condition1 = 2 [json_name = "filter-condition1"];
               }
               message BindIfs {
                  message BindIf {
                     string if_name = 1 [json_name = "if-name"];
                     uint64 flow_id = 2 [json_name = "flow-id"];
                     uint32 flow_monitor_id = 3 [json_name = "flow-monitor-id"];
                     bool measure_state = 4 [json_name = "measure-state"];
                  }
                  repeated BindIf bind_if = 1 [json_name = "bind-if"];
               }
               BindIfs bind_ifs = 3 [json_name = "bind-ifs"];
            }
            Flow flow = 6 [json_name = "flow"];
         }
         repeated InstanceHt16 instance_ht16 = 1 [json_name = "instance-ht16"];
      }
      InstanceHt16S instance_ht16s = 12 [json_name = "instance-ht16s"];
   }
   IfitCommon ifit_common = 6 [json_name = "ifit-common"];
   message FlowVpwsStatistics {
      message FlowVpwsStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         uint32 if_index = 3 [json_name = "if-index"];
         uint32 error_info = 4 [json_name = "error-info"];
         uint32 interval = 5 [json_name = "interval"];
         uint64 period_id = 6 [json_name = "period-id"];
         uint64 packet_count = 7 [json_name = "packet-count"];
         uint64 byte_count = 8 [json_name = "byte-count"];
         uint32 timestamp_second = 9 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 10 [json_name = "timestamp-nanosecond"];
         string tunnel_if_index = 11 [json_name = "tunnel-if-index"];
         uint32 vpws_instance_id = 12 [json_name = "vpws-instance-id"];
         uint32 cfg_id = 13 [json_name = "cfg-id"];
         uint32 measure_mode = 14 [json_name = "measure-mode"];
         uint32 error_info_ext = 15 [json_name = "error-info-ext"];
      }
      repeated FlowVpwsStatistic flow_vpws_statistic = 1 [json_name = "flow-vpws-statistic"];
   }
   FlowVpwsStatistics flow_vpws_statistics = 7 [json_name = "flow-vpws-statistics"];
   message FlowNativeIpStatistics {
      message FlowNativeIpStatistic {
         string source_ip = 1 [json_name = "source-ip"];
         uint32 source_ip_mask_length = 2 [json_name = "source-ip-mask-length"];
         string destination_ip = 3 [json_name = "destination-ip"];
         uint32 destination_ip_mask_length = 4 [json_name = "destination-ip-mask-length"];
         uint32 source_port = 5 [json_name = "source-port"];
         uint32 destination_port = 6 [json_name = "destination-port"];
         uint32 protocol = 7 [json_name = "protocol"];
         string if_name = 8 [json_name = "if-name"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 9 [json_name = "direction"];
         uint64 flow_id = 10 [json_name = "flow-id"];
         uint32 interval = 11 [json_name = "interval"];
         uint64 period_id = 12 [json_name = "period-id"];
         uint64 packet_count = 13 [json_name = "packet-count"];
         uint64 byte_count = 14 [json_name = "byte-count"];
         uint32 time_nanoseconds = 15 [json_name = "time-nanoseconds"];
         uint32 app_id = 16 [json_name = "app-id"];
         string app_name = 17 [json_name = "app-name"];
         uint64 discarded_packet_count = 18 [json_name = "discarded-packet-count"];
         uint64 discarded_byte_count = 19 [json_name = "discarded-byte-count"];
         uint32 discard_reason = 20 [json_name = "discard-reason"];
         uint32 start_time = 21 [json_name = "start-time"];
         enum Role {
            INVALID_ENUM_VALUE_Role = 0;
            Role_INX_POINT = 1;
            Role_MIDX_POINT = 2;
            Role_OUTX_POINT = 3;
         };
         Role role = 22 [json_name = "role"];
         string client_mac = 23 [json_name = "client-mac"];
         uint32 time_seconds = 24 [json_name = "time-seconds"];
         uint32 timestamp_second = 25 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 26 [json_name = "timestamp-nanosecond"];
      }
      repeated FlowNativeIpStatistic flow_native_ip_statistic = 1 [json_name = "flow-native-ip-statistic"];
   }
   FlowNativeIpStatistics flow_native_ip_statistics = 8 [json_name = "flow-native-ip-statistics"];
   message FlowSrPolicyStatistics {
      message FlowSrPolicyStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
            Direction_EGRESSX_TOX_CPU = 5;
            Direction_EGRESSX_NORMALX_DROP = 6;
            Direction_INGRESSX_OUTPUT = 7;
            Direction_EGRESSX_INPUT = 8;
         };
         Direction direction = 2 [json_name = "direction"];
         uint32 measure_mode = 3 [json_name = "measure-mode"];
         uint32 interval = 4 [json_name = "interval"];
         uint32 if_index = 5 [json_name = "if-index"];
         uint32 error_info = 6 [json_name = "error-info"];
         uint32 xctype = 7 [json_name = "xctype"];
         uint32 segment_list_id = 8 [json_name = "segment-list-id"];
         uint32 color = 9 [json_name = "color"];
         string end_point = 10 [json_name = "end-point"];
         enum AddressFamily {
            AddressFamily_IPV4 = 0;
            AddressFamily_IPV6 = 1;
         };
         AddressFamily address_family = 11 [json_name = "address-family"];
         uint64 period_id = 12 [json_name = "period-id"];
         uint64 packet_count = 13 [json_name = "packet-count"];
         uint64 byte_count = 14 [json_name = "byte-count"];
         uint32 timestamp_second = 15 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 16 [json_name = "timestamp-nanosecond"];
      }
      repeated FlowSrPolicyStatistic flow_sr_policy_statistic = 1 [json_name = "flow-sr-policy-statistic"];
   }
   FlowSrPolicyStatistics flow_sr_policy_statistics = 9 [json_name = "flow-sr-policy-statistics"];
}


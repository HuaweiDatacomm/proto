syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-18 11:35:07
// ProtoYang-version 1
// module huawei-bfd
// revision 2022-02-16
// revision 2021-12-17
// revision 2021-11-23
// revision 2021-11-04
// revision 2021-09-09
// revision 2021-08-25
// revision 2021-03-22
// revision 2020-12-11
// revision 2020-05-30
// revision 2020-05-25
// revision 2020-03-16
// revision 2020-02-26
// revision 2020-02-20
// revision 2019-12-28
// revision 2019-07-05
// revision 2019-03-27
// namespace urn:huawei:yang:huawei-bfd

package huawei_bfd;

message Bfd {
   message Global {
      uint32 delay_up_timer = 1 [json_name = "delay-up-timer"];
      bool mpls_passive = 2 [json_name = "mpls-passive"];
      uint32 ping_interval = 3 [json_name = "ping-interval"];
      enum ProcessMode {
         ProcessMode_DISTRIBUTE = 0;
         ProcessMode_CENTRAL = 1;
      };
      ProcessMode process_mode = 4 [json_name = "process-mode"];
      string process_central_slot = 5 [json_name = "process-central-slot"];
      string process_central_slot2 = 6 [json_name = "process-central-slot2"];
      string default_ip = 7 [json_name = "default-ip"];
      uint32 tos_exp = 8 [json_name = "tos-exp"];
      uint32 tos_exp_static = 9 [json_name = "tos-exp-static"];
      bool echo_passive = 10 [json_name = "echo-passive"];
      string basic_acl_num = 11 [json_name = "basic-acl-num"];
      uint32 init_wait_time = 12 [json_name = "init-wait-time"];
      uint32 max_wait_time = 13 [json_name = "max-wait-time"];
      uint32 second_wait_time = 14 [json_name = "second-wait-time"];
      uint32 link_bundle_init_time = 15 [json_name = "link-bundle-init-time"];
      uint32 link_bundle_max_time = 16 [json_name = "link-bundle-max-time"];
      uint32 link_bundle_second_time = 17 [json_name = "link-bundle-second-time"];
      bool link_bundle_l3_mode = 18 [json_name = "link-bundle-l3-mode"];
      bool lsp_path_check = 19 [json_name = "lsp-path-check"];
      bool ipv6_trap_separated = 20 [json_name = "ipv6-trap-separated"];
   }
   Global global = 1 [json_name = "global"];
   message Sessions {
      message Session {
         string name = 1 [json_name = "name"];
         bool admin_down = 2 [json_name = "admin-down"];
         string description = 3 [json_name = "description"];
         uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
         uint32 wtr_time = 5 [json_name = "wtr-time"];
         message Groups {
            message Group {
               uint32 sub_local_discriminator = 1 [json_name = "sub-local-discriminator"];
               uint32 sub_remote_discriminator = 2 [json_name = "sub-remote-discriminator"];
               string sub_select_slot_id = 3 [json_name = "sub-select-slot-id"];
            }
            repeated Group group = 1 [json_name = "group"];
         }
         Groups groups = 7 [json_name = "groups"];
         message Running {
            enum State {
               State_ADMINX_DOWN = 0;
               State_DOWN = 1;
               State_INIT = 2;
               State_UP = 3;
            };
            State state = 1 [json_name = "state"];
            uint32 udp_destination_port = 2 [json_name = "udp-destination-port"];
            enum DetectMode {
               DetectMode_ASYNCX_WITHX_ECHO = 0;
               DetectMode_ASYNCX_WITHOUTX_ECHO = 1;
               DetectMode_DEMANDX_WITHX_ECHO = 2;
               DetectMode_DEMANDX_WITHOUTX_ECHO = 3;
               DetectMode_ASYNCX_ONEX_ARMX_ECHO = 4;
               DetectMode_SEAMLESSX_WITHOUTX_ECHO = 5;
               DetectMode_ASYNCX_UNAFFILIATED = 6;
            };
            DetectMode detect_mode = 3 [json_name = "detect-mode"];
            bool remote_demand_mode = 4 [json_name = "remote-demand-mode"];
            uint32 actual_tx_interval = 5 [json_name = "actual-tx-interval"];
            uint32 actual_rx_interval = 6 [json_name = "actual-rx-interval"];
            uint32 actual_multiplier = 7 [json_name = "actual-multiplier"];
            uint32 detect_time = 8 [json_name = "detect-time"];
            uint32 ttl = 9 [json_name = "ttl"];
            uint64 tx_timer_id = 10 [json_name = "tx-timer-id"];
            uint64 detect_timer_id = 11 [json_name = "detect-timer-id"];
            uint64 init_timer_id = 12 [json_name = "init-timer-id"];
            uint64 wtr_timer_id = 13 [json_name = "wtr-timer-id"];
            enum NotUpReason {
               NotUpReason_INX_NEGOTIATION = 0;
               NotUpReason_INX_NEGOTIATIONX_1 = 1;
               NotUpReason_BOARDX_SELECTINGX_FAILED = 2;
               NotUpReason_SESSX_STATEX_UP = 3;
               NotUpReason_BOARDX_DELAYUP = 4;
               NotUpReason_REACHX_CENTRALIZEDX_MODEX_LIMIT = 5;
               NotUpReason_BOARDX_HARDBADX_MACFCSX_FAULT = 6;
               NotUpReason_UNSUPPORTEDX_TUNNELX_TYPE = 7;
               NotUpReason_REMOTEX_RXX_EQUALX_ZERO = 8;
            };
            NotUpReason not_up_reason = 14 [json_name = "not-up-reason"];
            uint32 acl_num = 15 [json_name = "acl-num"];
            enum LocalDiag {
               LocalDiag_NONE = 0;
               LocalDiag_DETECTX_DOWN = 1;
               LocalDiag_ECHOX_DOWN = 2;
               LocalDiag_NEIGHBORX_DOWN = 3;
               LocalDiag_FORWARDINGX_RESET = 4;
               LocalDiag_PATHX_DOWN = 5;
               LocalDiag_CONCATX_PATHX_DOWN = 6;
               LocalDiag_ADMINX_DOWN = 7;
               LocalDiag_REVERSEX_CONCATX_PATHX_DOWN = 8;
               LocalDiag_RECEIVEX_ADMINX_DOWN = 9;
            };
            LocalDiag local_diag = 16 [json_name = "local-diag"];
            uint32 echo_tx_timer_id = 17 [json_name = "echo-tx-timer-id"];
            uint32 local_discriminator = 18 [json_name = "local-discriminator"];
            uint32 remote_discriminator = 19 [json_name = "remote-discriminator"];
            uint32 min_tx_interval = 20 [json_name = "min-tx-interval"];
            uint32 min_rx_interval = 21 [json_name = "min-rx-interval"];
         }
         Running running = 8 [json_name = "running"];
         message VpwsGroups {
            message VpwsGroup {
               uint32 sub_local_discriminator = 1 [json_name = "sub-local-discriminator"];
               uint32 sub_remote_discriminator = 2 [json_name = "sub-remote-discriminator"];
               string sub_select_slot_id = 3 [json_name = "sub-select-slot-id"];
            }
            repeated VpwsGroup vpws_group = 1 [json_name = "vpws-group"];
         }
         VpwsGroups vpws_groups = 9 [json_name = "vpws-groups"];
         message MplsTeGroups {
            message MplsTeGroup {
               uint32 sub_local_discriminator = 1 [json_name = "sub-local-discriminator"];
               uint32 sub_remote_discriminator = 2 [json_name = "sub-remote-discriminator"];
               string sub_select_slot_id = 3 [json_name = "sub-select-slot-id"];
            }
            repeated MplsTeGroup mpls_te_group = 1 [json_name = "mpls-te-group"];
         }
         MplsTeGroups mpls_te_groups = 10 [json_name = "mpls-te-groups"];
         message VplsGroups {
            message VplsGroup {
               uint32 sub_local_discriminator = 1 [json_name = "sub-local-discriminator"];
               uint32 sub_remote_discriminator = 2 [json_name = "sub-remote-discriminator"];
               string sub_select_slot_id = 3 [json_name = "sub-select-slot-id"];
            }
            repeated VplsGroup vpls_group = 1 [json_name = "vpls-group"];
         }
         VplsGroups vpls_groups = 11 [json_name = "vpls-groups"];
         message SessionType_Static {
            uint32 tos_exp = 1 [json_name = "tos-exp"];
            message StaticSessionLinkType_Ip {
               message IpAddressType_Ipv4 {
                  string source_address_static_ipv4 = 1 [json_name = "source-address-static-ipv4"];
                  string select_board_slot_static_ipv4 = 2 [json_name = "select-board-slot-static-ipv4"];
                  string select_board_slot2_static_ipv4 = 3 [json_name = "select-board-slot2-static-ipv4"];
                  message MulticastOrUnicastIp_Multicast {
                     uint32 min_tx_interval_multicast_ipv4 = 1 [json_name = "min-tx-interval-multicast-ipv4"];
                     uint32 min_rx_interval_multicast_ipv4 = 2 [json_name = "min-rx-interval-multicast-ipv4"];
                     uint32 local_discriminator_multicast_ipv4 = 3 [json_name = "local-discriminator-multicast-ipv4"];
                     uint32 remote_discriminator_multicast_ipv4 = 4 [json_name = "remote-discriminator-multicast-ipv4"];
                     string out_if_name_multicast_ipv4 = 5 [json_name = "out-if-name-multicast-ipv4"];
                     bool process_pst_multicast_ipv4 = 6 [json_name = "process-pst-multicast-ipv4"];
                     bool lag_multicast_ipv4 = 7 [json_name = "lag-multicast-ipv4"];
                     bool pis_multicast_ipv4 = 8 [json_name = "pis-multicast-ipv4"];
                     bool pis_sub_if_multicast_ipv4 = 9 [json_name = "pis-sub-if-multicast-ipv4"];
                     bool pis_no_impact_multicast_ipv4 = 10 [json_name = "pis-no-impact-multicast-ipv4"];
                     uint32 dot1q_vid_multicast_ipv4 = 11 [json_name = "dot1q-vid-multicast-ipv4"];
                     uint32 qinq_pe_vid_multicast_ipv4 = 12 [json_name = "qinq-pe-vid-multicast-ipv4"];
                     uint32 qinq_ce_vid_multicast_ipv4 = 13 [json_name = "qinq-ce-vid-multicast-ipv4"];
                     enum AuthAlgorithmMulticastIpv4 {
                        AuthAlgorithmMulticastIpv4_NONE = 0;
                        AuthAlgorithmMulticastIpv4_METX_SHA1 = 1;
                     };
                     AuthAlgorithmMulticastIpv4 auth_algorithm_multicast_ipv4 = 14 [json_name = "auth-algorithm-multicast-ipv4"];
                     uint32 key_id_multicast_ipv4 = 15 [json_name = "key-id-multicast-ipv4"];
                     string cipher_string_multicast_ipv4 = 16 [json_name = "cipher-string-multicast-ipv4"];
                     uint32 negotiation_timeout_multicast_ipv4 = 17 [json_name = "negotiation-timeout-multicast-ipv4"];
                     bool unlimited_nego_multicast_ipv4 = 18 [json_name = "unlimited-nego-multicast-ipv4"];
                  }
                  message MulticastOrUnicastIp_Unicast {
                     uint32 min_tx_interval = 1 [json_name = "min-tx-interval"];
                     uint32 min_rx_interval = 2 [json_name = "min-rx-interval"];
                     uint32 min_echo_rx_interval = 3 [json_name = "min-echo-rx-interval"];
                     uint32 local_discriminator = 4 [json_name = "local-discriminator"];
                     uint32 remote_discriminator = 5 [json_name = "remote-discriminator"];
                     string out_if_name_static_unicast_ipv4 = 6 [json_name = "out-if-name-static-unicast-ipv4"];
                     bool is_set_track_if_static_ipv4 = 7 [json_name = "is-set-track-if-static-ipv4"];
                     string track_if_name_static_ipv4 = 8 [json_name = "track-if-name-static-ipv4"];
                     bool process_pst_static_unicast_ipv4 = 9 [json_name = "process-pst-static-unicast-ipv4"];
                     string destination_address_static_unicast_ipv4 = 10 [json_name = "destination-address-static-unicast-ipv4"];
                     string vrf_name_static_unicast_ipv4 = 11 [json_name = "vrf-name-static-unicast-ipv4"];
                     bool one_arm_echo_static_unicast_ipv4 = 12 [json_name = "one-arm-echo-static-unicast-ipv4"];
                     string one_arm_echo_destination_address_static_unicast_ipv4 = 13 [json_name = "one-arm-echo-destination-address-static-unicast-ipv4"];
                     bool per_link_static_unicast_ipv4 = 14 [json_name = "per-link-static-unicast-ipv4"];
                     bool is_group_static_unicast_ipv4 = 15 [json_name = "is-group-static-unicast-ipv4"];
                  }
                  oneof MulticastOrUnicastIp {
                     MulticastOrUnicastIp_Multicast multicast_or_unicast_ip_multicast = 4 [json_name = "multicast"];
                     MulticastOrUnicastIp_Unicast multicast_or_unicast_ip_unicast = 5 [json_name = "unicast"];
                  }
               }
               message IpAddressType_Ipv6 {
                  string select_board_slot_static_ipv6 = 1 [json_name = "select-board-slot-static-ipv6"];
                  string select_board_slot2_static_ipv6 = 2 [json_name = "select-board-slot2-static-ipv6"];
                  uint32 min_tx_interval_static_ipv6 = 3 [json_name = "min-tx-interval-static-ipv6"];
                  uint32 min_rx_interval_static_ipv6 = 4 [json_name = "min-rx-interval-static-ipv6"];
                  uint32 min_echo_rx_interval_static_ipv6 = 5 [json_name = "min-echo-rx-interval-static-ipv6"];
                  uint32 local_discriminator_static_ipv6 = 6 [json_name = "local-discriminator-static-ipv6"];
                  uint32 remote_discriminator_static_ipv6 = 7 [json_name = "remote-discriminator-static-ipv6"];
                  string out_if_name_static_ipv6 = 8 [json_name = "out-if-name-static-ipv6"];
                  string destination_address_static_ipv6 = 9 [json_name = "destination-address-static-ipv6"];
                  string source_address_static_ipv6 = 10 [json_name = "source-address-static-ipv6"];
                  string vrf_name_static_ipv6 = 11 [json_name = "vrf-name-static-ipv6"];
                  bool is_set_track_if_static_ipv6 = 12 [json_name = "is-set-track-if-static-ipv6"];
                  string track_if_name_static_ipv6 = 13 [json_name = "track-if-name-static-ipv6"];
                  bool one_arm_echo_static_ipv6 = 14 [json_name = "one-arm-echo-static-ipv6"];
                  string one_arm_echo_destination_address_static_ipv6 = 15 [json_name = "one-arm-echo-destination-address-static-ipv6"];
                  bool process_pst_static_ipv6 = 16 [json_name = "process-pst-static-ipv6"];
                  bool is_group_static_ipv6 = 17 [json_name = "is-group-static-ipv6"];
               }
               oneof IpAddressType {
                  IpAddressType_Ipv4 ip_address_type_ipv4 = 1 [json_name = "ipv4"];
                  IpAddressType_Ipv6 ip_address_type_ipv6 = 2 [json_name = "ipv6"];
               }
            }
            message StaticSessionLinkType_LdpLsp {
               uint32 min_tx_interval_static_ldp_lsp = 1 [json_name = "min-tx-interval-static-ldp-lsp"];
               uint32 min_rx_interval_static_ldp_lsp = 2 [json_name = "min-rx-interval-static-ldp-lsp"];
               uint32 local_discriminator_static_ldp_lsp = 3 [json_name = "local-discriminator-static-ldp-lsp"];
               uint32 remote_discriminator_static_ldp_lsp = 4 [json_name = "remote-discriminator-static-ldp-lsp"];
               string out_if_name_static_ldp_lsp = 5 [json_name = "out-if-name-static-ldp-lsp"];
               string destination_address_static_ldp_lsp = 6 [json_name = "destination-address-static-ldp-lsp"];
               string next_hop_address_static_ldp_lsp = 7 [json_name = "next-hop-address-static-ldp-lsp"];
               bool process_pst_static_ldp_lsp = 8 [json_name = "process-pst-static-ldp-lsp"];
            }
            message StaticSessionLinkType_TeLsp {
               uint32 min_tx_interval_static_te_lsp = 1 [json_name = "min-tx-interval-static-te-lsp"];
               uint32 min_rx_interval_static_te_lsp = 2 [json_name = "min-rx-interval-static-te-lsp"];
               uint32 min_echo_rx_interval_static_te_lsp = 3 [json_name = "min-echo-rx-interval-static-te-lsp"];
               uint32 local_discriminator_static_te_lsp = 4 [json_name = "local-discriminator-static-te-lsp"];
               uint32 remote_discriminator_static_te_lsp = 5 [json_name = "remote-discriminator-static-te-lsp"];
               string tunnel_name_static_te_lsp = 6 [json_name = "tunnel-name-static-te-lsp"];
               bool te_backup_lsp_static_te_lsp = 7 [json_name = "te-backup-lsp-static-te-lsp"];
               bool one_arm_echo_static_te_lsp = 8 [json_name = "one-arm-echo-static-te-lsp"];
               bool is_group_static_te_lsp = 9 [json_name = "is-group-static-te-lsp"];
               bool process_pst_static_te_lsp = 10 [json_name = "process-pst-static-te-lsp"];
               bool sr_bit_err_det_static_te_lsp = 11 [json_name = "sr-bit-err-det-static-te-lsp"];
            }
            message StaticSessionLinkType_TeTunnel {
               uint32 min_tx_interval_static_te_tunnel = 1 [json_name = "min-tx-interval-static-te-tunnel"];
               uint32 min_rx_interval_static_te_tunnel = 2 [json_name = "min-rx-interval-static-te-tunnel"];
               uint32 min_echo_rx_interval_static_te_tunnel = 3 [json_name = "min-echo-rx-interval-static-te-tunnel"];
               uint32 local_discriminator_static_te_tunnel = 4 [json_name = "local-discriminator-static-te-tunnel"];
               uint32 remote_discriminator_static_te_tunnel = 5 [json_name = "remote-discriminator-static-te-tunnel"];
               string tunnel_name_static_te_tunnel = 6 [json_name = "tunnel-name-static-te-tunnel"];
               bool one_arm_echo_static_te_tunnel = 7 [json_name = "one-arm-echo-static-te-tunnel"];
               string select_board_slot_static_te_tunnel = 8 [json_name = "select-board-slot-static-te-tunnel"];
               bool is_group_static_te_tunnel = 9 [json_name = "is-group-static-te-tunnel"];
               bool process_pst_static_te_tunnel = 10 [json_name = "process-pst-static-te-tunnel"];
            }
            message StaticSessionLinkType_VsiPw {
               uint32 min_tx_interval_static_vsi_pw = 1 [json_name = "min-tx-interval-static-vsi-pw"];
               uint32 min_rx_interval_static_vsi_pw = 2 [json_name = "min-rx-interval-static-vsi-pw"];
               uint32 local_discriminator_static_vsi_pw = 3 [json_name = "local-discriminator-static-vsi-pw"];
               uint32 remote_discriminator_static_vsi_pw = 4 [json_name = "remote-discriminator-static-vsi-pw"];
               bool use_default_ip_static_vsi_pw = 5 [json_name = "use-default-ip-static-vsi-pw"];
               string vsi_name_static_vsi_pw = 6 [json_name = "vsi-name-static-vsi-pw"];
               string peer_ip_static_vsi_pw = 7 [json_name = "peer-ip-static-vsi-pw"];
               uint32 vc_id_static_vsi_pw = 8 [json_name = "vc-id-static-vsi-pw"];
               string remote_peer_static_vsi_pw = 9 [json_name = "remote-peer-static-vsi-pw"];
               bool auto_calc_ttl_static_vsi_pw = 10 [json_name = "auto-calc-ttl-static-vsi-pw"];
               uint32 pw_ttl_static_vsi_pw = 11 [json_name = "pw-ttl-static-vsi-pw"];
               bool is_group_static_vsi_pw = 12 [json_name = "is-group-static-vsi-pw"];
               bool process_pst_static_vsi_pw = 13 [json_name = "process-pst-static-vsi-pw"];
            }
            message StaticSessionLinkType_VllPw {
               uint32 min_tx_interval_static_vll_pw = 1 [json_name = "min-tx-interval-static-vll-pw"];
               uint32 min_rx_interval_static_vll_pw = 2 [json_name = "min-rx-interval-static-vll-pw"];
               uint32 local_discriminator_static_vll_pw = 3 [json_name = "local-discriminator-static-vll-pw"];
               uint32 remote_discriminator_static_vll_pw = 4 [json_name = "remote-discriminator-static-vll-pw"];
               string out_if_name_static_vll_pw = 5 [json_name = "out-if-name-static-vll-pw"];
               enum PwRoleStaticVllPw {
                  INVALID_ENUM_VALUE_PwRoleStaticVllPw = 0;
                  PwRoleStaticVllPw_PRIMARY = 1;
                  PwRoleStaticVllPw_BACKUP = 2;
                  PwRoleStaticVllPw_BYPASS = 3;
                  PwRoleStaticVllPw_ACX_BYPASS = 7;
                  PwRoleStaticVllPw_PWX_BYPASS = 8;
               };
               PwRoleStaticVllPw pw_role_static_vll_pw = 6 [json_name = "pw-role-static-vll-pw"];
               string remote_peer_static_vll_pw = 7 [json_name = "remote-peer-static-vll-pw"];
               bool auto_calc_ttl_static_vll_pw = 8 [json_name = "auto-calc-ttl-static-vll-pw"];
               uint32 pw_ttl_static_vll_pw = 9 [json_name = "pw-ttl-static-vll-pw"];
               string select_board_slot_static_vll_pw = 10 [json_name = "select-board-slot-static-vll-pw"];
               bool is_set_track_if_static_vll_pw = 11 [json_name = "is-set-track-if-static-vll-pw"];
               string track_if_name_static_vll_pw = 12 [json_name = "track-if-name-static-vll-pw"];
               bool is_group_static_vll_pw = 13 [json_name = "is-group-static-vll-pw"];
            }
            oneof StaticSessionLinkType {
               StaticSessionLinkType_Ip static_session_link_type_ip = 2 [json_name = "ip"];
               StaticSessionLinkType_LdpLsp static_session_link_type_ldp_lsp = 3 [json_name = "ldp-lsp"];
               StaticSessionLinkType_TeLsp static_session_link_type_te_lsp = 4 [json_name = "te-lsp"];
               StaticSessionLinkType_TeTunnel static_session_link_type_te_tunnel = 5 [json_name = "te-tunnel"];
               StaticSessionLinkType_VsiPw static_session_link_type_vsi_pw = 6 [json_name = "vsi-pw"];
               StaticSessionLinkType_VllPw static_session_link_type_vll_pw = 7 [json_name = "vll-pw"];
            }
         }
         message SessionType_Auto {
            message AutoSessionLinkType_Ip {
               string out_if_name_auto_ip = 1 [json_name = "out-if-name-auto-ip"];
               bool process_pst_auto_ip = 2 [json_name = "process-pst-auto-ip"];
               message AddressType_Ipv4 {
                  uint32 min_tx_interval_auto_ipv4 = 1 [json_name = "min-tx-interval-auto-ipv4"];
                  uint32 min_rx_interval_auto_ipv4 = 2 [json_name = "min-rx-interval-auto-ipv4"];
                  string destination_address_auto_ipv4 = 3 [json_name = "destination-address-auto-ipv4"];
                  string source_address_auto_ipv4 = 4 [json_name = "source-address-auto-ipv4"];
                  string vrf_name_auto_ipv4 = 5 [json_name = "vrf-name-auto-ipv4"];
                  string select_board_slot_auto_ipv4 = 6 [json_name = "select-board-slot-auto-ipv4"];
                  string select_board_slot2_auto_ipv4 = 7 [json_name = "select-board-slot2-auto-ipv4"];
                  enum BundleModeAutoIpv4 {
                     BundleModeAutoIpv4_NONE = 0;
                     BundleModeAutoIpv4_BUNDLEX_STANDARD = 1;
                     BundleModeAutoIpv4_BUNDLEX_COMPATIBLE = 2;
                     BundleModeAutoIpv4_BUNDLEX_STDX_UNSHARE = 5;
                     BundleModeAutoIpv4_BUNDLEX_COMX_UNSHARE = 6;
                  };
                  BundleModeAutoIpv4 bundle_mode_auto_ipv4 = 8 [json_name = "bundle-mode-auto-ipv4"];
                  bool pis_auto_ipv4 = 9 [json_name = "pis-auto-ipv4"];
                  bool pis_no_impact_auto_ipv4 = 10 [json_name = "pis-no-impact-auto-ipv4"];
               }
               message AddressType_Ipv6 {
                  uint32 min_tx_interval_auto_ipv6 = 1 [json_name = "min-tx-interval-auto-ipv6"];
                  uint32 min_rx_interval_auto_ipv6 = 2 [json_name = "min-rx-interval-auto-ipv6"];
                  string destination_address_auto_ipv6 = 3 [json_name = "destination-address-auto-ipv6"];
                  string source_address_auto_ipv6 = 4 [json_name = "source-address-auto-ipv6"];
                  string vrf_name_auto_ipv6 = 5 [json_name = "vrf-name-auto-ipv6"];
                  string select_board_slot_auto_ipv6 = 6 [json_name = "select-board-slot-auto-ipv6"];
                  string select_board_slot2_auto_ipv6 = 7 [json_name = "select-board-slot2-auto-ipv6"];
                  enum BundleModeAutoIpv6 {
                     BundleModeAutoIpv6_NONE = 0;
                     BundleModeAutoIpv6_BUNDLEX_STANDARD = 1;
                     BundleModeAutoIpv6_BUNDLEX_COMPATIBLE = 2;
                     BundleModeAutoIpv6_BUNDLEX_STDX_UNSHARE = 5;
                     BundleModeAutoIpv6_BUNDLEX_COMX_UNSHARE = 6;
                  };
                  BundleModeAutoIpv6 bundle_mode_auto_ipv6 = 8 [json_name = "bundle-mode-auto-ipv6"];
                  bool pis_auto_ipv6 = 9 [json_name = "pis-auto-ipv6"];
                  bool pis_no_impact_auto_ipv6 = 10 [json_name = "pis-no-impact-auto-ipv6"];
               }
               oneof AddressType {
                  AddressType_Ipv4 address_type_ipv4 = 3 [json_name = "ipv4"];
                  AddressType_Ipv6 address_type_ipv6 = 4 [json_name = "ipv6"];
               }
            }
            message AutoSessionLinkType_Vxlan {
               uint32 min_tx_interval_auto_vxlan = 1 [json_name = "min-tx-interval-auto-vxlan"];
               uint32 min_rx_interval_auto_vxlan = 2 [json_name = "min-rx-interval-auto-vxlan"];
               string destination_address_auto_vxlan = 3 [json_name = "destination-address-auto-vxlan"];
               string source_address_auto_vxlan = 4 [json_name = "source-address-auto-vxlan"];
               string peer_mac_auto_vxlan = 5 [json_name = "peer-mac-auto-vxlan"];
            }
            message AutoSessionLinkType_TeLsp {
               uint32 min_tx_interval_auto_te_lsp = 1 [json_name = "min-tx-interval-auto-te-lsp"];
               uint32 min_rx_interval_auto_te_lsp = 2 [json_name = "min-rx-interval-auto-te-lsp"];
               string tunnel_name_auto_te_lsp = 3 [json_name = "tunnel-name-auto-te-lsp"];
               bool te_backup_lsp_auto_te_lsp = 4 [json_name = "te-backup-lsp-auto-te-lsp"];
               string reverse_lsr_id_auto_te_lsp = 5 [json_name = "reverse-lsr-id-auto-te-lsp"];
               uint32 reverse_tunnel_id_auto_te_lsp = 6 [json_name = "reverse-tunnel-id-auto-te-lsp"];
               bool process_pst_auto_te_lsp = 7 [json_name = "process-pst-auto-te-lsp"];
            }
            message AutoSessionLinkType_TeTunnel {
               uint32 min_tx_interval_auto_te_tunnel = 1 [json_name = "min-tx-interval-auto-te-tunnel"];
               uint32 min_rx_interval_auto_te_tunnel = 2 [json_name = "min-rx-interval-auto-te-tunnel"];
               string tunnel_name_auto_te_tunnel = 3 [json_name = "tunnel-name-auto-te-tunnel"];
               string reverse_lsr_id_auto_te_tunnel = 4 [json_name = "reverse-lsr-id-auto-te-tunnel"];
               uint32 reverse_tunnel_id_auto_te_tunnel = 5 [json_name = "reverse-tunnel-id-auto-te-tunnel"];
               bool process_pst_auto_te_tunnel = 6 [json_name = "process-pst-auto-te-tunnel"];
            }
            oneof AutoSessionLinkType {
               AutoSessionLinkType_Ip auto_session_link_type_ip = 1 [json_name = "ip"];
               AutoSessionLinkType_Vxlan auto_session_link_type_vxlan = 2 [json_name = "vxlan"];
               AutoSessionLinkType_TeLsp auto_session_link_type_te_lsp = 3 [json_name = "te-lsp"];
               AutoSessionLinkType_TeTunnel auto_session_link_type_te_tunnel = 4 [json_name = "te-tunnel"];
            }
         }
         oneof SessionType {
            SessionType_Static session_type_static = 12 [json_name = "static"];
            SessionType_Auto session_type_auto = 13 [json_name = "auto"];
         }
      }
      repeated Session session = 1 [json_name = "session"];
   }
   Sessions sessions = 2 [json_name = "sessions"];
   message PassiveSession {
      message DestinationUdps {
         message DestinationUdp {
            string peer_ip = 1 [json_name = "peer-ip"];
         }
         repeated DestinationUdp destination_udp = 1 [json_name = "destination-udp"];
      }
      DestinationUdps destination_udps = 1 [json_name = "destination-udps"];
      message DetectMultipliers {
         message DetectMultiplier {
            string peer_ip = 1 [json_name = "peer-ip"];
            uint32 detect_multiplier = 2 [json_name = "detect-multiplier"];
         }
         repeated DetectMultiplier detect_multiplier = 1 [json_name = "detect-multiplier"];
      }
      DetectMultipliers detect_multipliers = 2 [json_name = "detect-multipliers"];
   }
   PassiveSession passive_session = 3 [json_name = "passive-session"];
   message DiscriminatorUse {
      uint32 reserved_num = 1 [json_name = "reserved-num"];
      repeated uint32 reserved_discriminators = 2 [json_name = "reserved-discriminators"];
      message IsUsed {
         uint32 local_discriminator = 1 [json_name = "local-discriminator"];
         bool is_used = 2 [json_name = "is-used"];
      }
      repeated IsUsed is_used = 3 [json_name = "is-used"];
   }
   DiscriminatorUse discriminator_use = 4 [json_name = "discriminator-use"];
   message Sbfd {
      message DiscriminatorMaps {
         message DiscriminatorMap {
            string peer_ip = 1 [json_name = "peer-ip"];
            uint32 remote_discriminator = 2 [json_name = "remote-discriminator"];
         }
         repeated DiscriminatorMap discriminator_map = 1 [json_name = "discriminator-map"];
      }
      DiscriminatorMaps discriminator_maps = 1 [json_name = "discriminator-maps"];
      message ReflectorDiscriminatorIds {
         message ReflectorDiscriminatorId {
            uint32 discriminator_id = 1 [json_name = "discriminator-id"];
         }
         repeated ReflectorDiscriminatorId reflector_discriminator_id = 1 [json_name = "reflector-discriminator-id"];
      }
      ReflectorDiscriminatorIds reflector_discriminator_ids = 2 [json_name = "reflector-discriminator-ids"];
      message ReflectorDiscriminatorIps {
         message ReflectorDiscriminatorIp {
            string discriminator_ip = 1 [json_name = "discriminator-ip"];
         }
         repeated ReflectorDiscriminatorIp reflector_discriminator_ip = 1 [json_name = "reflector-discriminator-ip"];
      }
      ReflectorDiscriminatorIps reflector_discriminator_ips = 3 [json_name = "reflector-discriminator-ips"];
      message ReflectorDiscriminators {
         message ReflectorDiscriminator {
            uint32 reflector_discriminator_id = 1 [json_name = "reflector-discriminator-id"];
            string reflector_discriminator_ip = 2 [json_name = "reflector-discriminator-ip"];
            enum DiscriminatorState {
               DiscriminatorState_INACTIVE = 0;
               DiscriminatorState_ACTIVE = 1;
            };
            DiscriminatorState discriminator_state = 3 [json_name = "discriminator-state"];
            enum CreateType {
               CreateType_INTEGER = 0;
               CreateType_IPV4 = 1;
               CreateType_IPV6 = 2;
               CreateType_DYNAMIC = 3;
               CreateType_INTERFACE = 4;
            };
            CreateType create_type = 4 [json_name = "create-type"];
            enum DiscriminatorAdvertisement {
               DiscriminatorAdvertisement_NO = 0;
               DiscriminatorAdvertisement_YES = 1;
            };
            DiscriminatorAdvertisement discriminator_advertisement = 5 [json_name = "discriminator-advertisement"];
         }
         repeated ReflectorDiscriminator reflector_discriminator = 1 [json_name = "reflector-discriminator"];
      }
      ReflectorDiscriminators reflector_discriminators = 4 [json_name = "reflector-discriminators"];
      message DiscriminatorIpMaps {
         message DiscriminatorIpMap {
            string peer_ipv6 = 1 [json_name = "peer-ipv6"];
            string remote_discriminator_ip = 2 [json_name = "remote-discriminator-ip"];
         }
         repeated DiscriminatorIpMap discriminator_ip_map = 1 [json_name = "discriminator-ip-map"];
      }
      DiscriminatorIpMaps discriminator_ip_maps = 5 [json_name = "discriminator-ip-maps"];
      message AuthenticationKeys {
         message AuthenticationKey {
            string destination_address = 1 [json_name = "destination-address"];
            enum SessionType {
               SessionType_IPX_SINGLEX_HOP = 0;
               SessionType_IPX_MULTIX_HOP = 1;
               SessionType_MPLSX_PASSIVE = 2;
               SessionType_LSPX_TUNNEL = 3;
               SessionType_SBFDX_IPX_MULTIX_HOP = 4;
               SessionType_SBFDX_LSPX_TUNNEL = 5;
               SessionType_SBFDX_SRX_TEX_POLICYX_SEGMENTX_LIST = 6;
            };
            SessionType session_type = 2 [json_name = "session-type"];
            enum AuthAlgorithm {
               AuthAlgorithm_NONE = 0;
               AuthAlgorithm_METX_SHA1 = 1;
            };
            AuthAlgorithm auth_algorithm = 3 [json_name = "auth-algorithm"];
            uint32 key_id = 4 [json_name = "key-id"];
            string cipher_string = 5 [json_name = "cipher-string"];
         }
         repeated AuthenticationKey authentication_key = 1 [json_name = "authentication-key"];
      }
      AuthenticationKeys authentication_keys = 6 [json_name = "authentication-keys"];
   }
   Sbfd sbfd = 5 [json_name = "sbfd"];
   message AuthenticationKeys {
      message AuthenticationKey {
         string peer_ip = 1 [json_name = "peer-ip"];
         string vpn_name = 2 [json_name = "vpn-name"];
         enum SessionType {
            SessionType_IPX_SINGLEX_HOP = 0;
            SessionType_IPX_MULTIX_HOP = 1;
            SessionType_MPLSX_PASSIVE = 2;
            SessionType_LSPX_TUNNEL = 3;
            SessionType_SBFDX_IPX_MULTIX_HOP = 4;
            SessionType_SBFDX_LSPX_TUNNEL = 5;
            SessionType_SBFDX_SRX_TEX_POLICYX_SEGMENTX_LIST = 6;
         };
         SessionType session_type = 3 [json_name = "session-type"];
         enum AuthAlgorithm {
            AuthAlgorithm_NONE = 0;
            AuthAlgorithm_METX_SHA1 = 1;
         };
         AuthAlgorithm auth_algorithm = 4 [json_name = "auth-algorithm"];
         uint32 key_id = 5 [json_name = "key-id"];
         string cipher_string = 6 [json_name = "cipher-string"];
      }
      repeated AuthenticationKey authentication_key = 1 [json_name = "authentication-key"];
   }
   AuthenticationKeys authentication_keys = 6 [json_name = "authentication-keys"];
   message Statistics {
      enum InnerState {
         InnerState_INIT = 0;
         InnerState_BATCHX_BACKUP = 1;
         InnerState_AWAIT = 2;
         InnerState_SMOOTHX_INSIDE = 3;
         InnerState_SMOOTHX_FEI = 4;
         InnerState_SMOOTHX_FES = 5;
         InnerState_SMOOTHX_APP = 6;
         InnerState_WORK = 7;
      };
      InnerState inner_state = 1 [json_name = "inner-state"];
      uint32 ip_session_num = 2 [json_name = "ip-session-num"];
      uint32 ldp_lsp_session_num = 3 [json_name = "ldp-lsp-session-num"];
      uint32 static_lsp_session_num = 4 [json_name = "static-lsp-session-num"];
      uint32 te_lsp_session_num = 5 [json_name = "te-lsp-session-num"];
      uint32 total_session_num = 6 [json_name = "total-session-num"];
      uint32 session_up_num = 7 [json_name = "session-up-num"];
      uint32 session_down_num = 8 [json_name = "session-down-num"];
      uint32 static_session_num = 9 [json_name = "static-session-num"];
      uint32 dyn_session_num = 10 [json_name = "dyn-session-num"];
      uint32 auto_session_num = 11 [json_name = "auto-session-num"];
      uint32 passive_session_num = 12 [json_name = "passive-session-num"];
      uint32 te_tunnel_session_num = 13 [json_name = "te-tunnel-session-num"];
      uint32 used_discriminator_num = 14 [json_name = "used-discriminator-num"];
      uint32 pw_session_num = 15 [json_name = "pw-session-num"];
      uint32 vsi_pw_session_num = 16 [json_name = "vsi-pw-session-num"];
      uint32 ldp_tunnel_session_num = 17 [json_name = "ldp-tunnel-session-num"];
      uint32 bgp_tunnel_session_num = 18 [json_name = "bgp-tunnel-session-num"];
      uint32 vxlan_session_num = 19 [json_name = "vxlan-session-num"];
      uint32 srbe_tunnel_session_num = 20 [json_name = "srbe-tunnel-session-num"];
      uint32 main_session_up_num = 21 [json_name = "main-session-up-num"];
      uint32 main_session_down_num = 22 [json_name = "main-session-down-num"];
      uint32 sub_session_up_num = 23 [json_name = "sub-session-up-num"];
      uint32 sub_session_down_num = 24 [json_name = "sub-session-down-num"];
      uint32 used_bfd_res_num = 25 [json_name = "used-bfd-res-num"];
      uint32 max_bfd_res_num = 26 [json_name = "max-bfd-res-num"];
      uint32 max_crc_session_num = 27 [json_name = "max-crc-session-num"];
      uint32 current_crc_session_num = 28 [json_name = "current-crc-session-num"];
      uint32 sid_list_session_num = 29 [json_name = "sid-list-session-num"];
      uint32 sbfd_ref_session_num = 30 [json_name = "sbfd-ref-session-num"];
      uint32 p2mp_session_num = 31 [json_name = "p2mp-session-num"];
      uint32 flex_algo_tunnel_session_num = 32 [json_name = "flex-algo-tunnel-session-num"];
      uint32 evpn_vpws_session_num = 33 [json_name = "evpn-vpws-session-num"];
   }
   Statistics statistics = 7 [json_name = "statistics"];
   message AllSessions {
      message AllSession {
         string name = 1 [json_name = "name"];
         enum CreateType {
            CreateType_SESSIONX_STATIC = 0;
            CreateType_SESSIONX_AUTO = 1;
            CreateType_SESSIONX_DYNAMIC = 2;
            CreateType_PASSIVE = 3;
         };
         CreateType create_type = 2 [json_name = "create-type"];
         enum Type {
            Type_SINGLEX_HOPX_IP = 0;
            Type_MULTIX_HOPX_IP = 1;
            Type_STATICX_LSP = 2;
            Type_LDPX_LSP = 3;
            Type_TEX_LDP = 4;
            Type_TUNNEL = 5;
            Type_VLLX_PW = 6;
            Type_VSIX_PW = 7;
            Type_P2MPX_TE = 8;
            Type_LDPX_TNL = 9;
            Type_BGPX_TNL = 10;
            Type_P2MPX_LDP = 11;
            Type_VXLAN = 12;
            Type_SRX_BEX_TNL = 13;
            Type_SIDX_LIST = 14;
            Type_FLEXX_ALGOX_TNL = 15;
            Type_EVPNX_VPWS = 16;
         };
         Type type = 3 [json_name = "type"];
         uint32 local_discriminator = 4 [json_name = "local-discriminator"];
         uint32 remote_discriminator = 5 [json_name = "remote-discriminator"];
         enum LinkType {
            LinkType_IP = 0;
            LinkType_LDPX_LSP = 1;
            LinkType_STATICX_LSP = 2;
            LinkType_TEX_LSP = 3;
            LinkType_TEX_TUNNEL = 4;
            LinkType_LDPX_TUNNEL = 5;
            LinkType_VLLX_PW = 6;
            LinkType_VSIX_PW = 7;
            LinkType_P2MPX_TE = 8;
            LinkType_BGPX_TUNNEL = 9;
            LinkType_P2MPX_LDP = 10;
            LinkType_VXLAN = 11;
            LinkType_SRX_BEX_TUNNEL = 12;
            LinkType_SIDX_LIST = 13;
            LinkType_FLEXX_ALGOX_TUNNEL = 14;
            LinkType_EVPNX_VPWS = 16;
         };
         LinkType link_type = 6 [json_name = "link-type"];
         string destination_address = 7 [json_name = "destination-address"];
         string source_address = 8 [json_name = "source-address"];
         string next_hop = 9 [json_name = "next-hop"];
         string out_if_name = 10 [json_name = "out-if-name"];
         string vrf_name = 11 [json_name = "vrf-name"];
         string tunnel_name = 12 [json_name = "tunnel-name"];
         enum TeBackup {
            TeBackup_PRIMARY = 0;
            TeBackup_BACKUP = 1;
            TeBackup_NONE = 2;
         };
         TeBackup te_backup = 13 [json_name = "te-backup"];
         uint32 min_tx_interval = 14 [json_name = "min-tx-interval"];
         uint32 min_rx_interval = 15 [json_name = "min-rx-interval"];
         uint32 detect_multiplier = 16 [json_name = "detect-multiplier"];
         bool demand_enable = 17 [json_name = "demand-enable"];
         uint32 wtr_timer_int = 18 [json_name = "wtr-timer-int"];
         uint32 tos_exp = 19 [json_name = "tos-exp"];
         bool shut_down = 20 [json_name = "shut-down"];
         string description = 21 [json_name = "description"];
         enum ConfigPst {
            ConfigPst_DISABLE = 0;
            ConfigPst_ENABLE = 1;
         };
         ConfigPst config_pst = 22 [json_name = "config-pst"];
         enum ProcessPst {
            ProcessPst_DISABLE = 0;
            ProcessPst_ENABLE = 1;
         };
         ProcessPst process_pst = 23 [json_name = "process-pst"];
         enum Pis {
            Pis_DISABLE = 0;
            Pis_ENABLE = 1;
            Pis_ENABLEX_SUBIF = 2;
         };
         Pis pis = 24 [json_name = "pis"];
         string bind_application = 25 [json_name = "bind-application"];
         string fsm_board_slot = 26 [json_name = "fsm-board-slot"];
         enum PwTtlMode {
            INVALID_ENUM_VALUE_PwTtlMode = 0;
            PwTtlMode_DEFAULT = 1;
            PwTtlMode_AUTO = 2;
            PwTtlMode_CONFIG = 3;
         };
         PwTtlMode pw_ttl_mode = 27 [json_name = "pw-ttl-mode"];
         uint32 pw_ttl = 28 [json_name = "pw-ttl"];
         enum Node {
            Node_NONE = 0;
            Node_UPE = 1;
         };
         Node node = 29 [json_name = "node"];
         enum EncapType {
            INVALID_ENUM_VALUE_EncapType = 0;
            EncapType_FR = 1;
            EncapType_ATMX_AAL5X_SDU = 2;
            EncapType_ATMX_TRANSX_CELL = 3;
            EncapType_VLAN = 4;
            EncapType_ETHERNET = 5;
            EncapType_HDLC = 6;
            EncapType_PPP = 7;
            EncapType_CEM = 8;
            EncapType_ATMX_NTO1X_VCC = 9;
            EncapType_ATMX_NTO1X_VPC = 10;
            EncapType_IPX_LAYER2 = 11;
            EncapType_ATMX_1TO1X_VCC = 12;
            EncapType_ATMX_1TO1X_VPC = 13;
            EncapType_ATMX_AAL5X_PDU = 14;
            EncapType_FRX_PORTX_MODE = 15;
            EncapType_CEP = 16;
            EncapType_SATOPX_E1 = 17;
            EncapType_SATOPX_T1 = 18;
            EncapType_SATOPX_E3 = 19;
            EncapType_SATOPX_T3 = 20;
            EncapType_CESOPSNX_BASIC = 21;
            EncapType_TDMOIPX_AAL1 = 22;
            EncapType_CESOPSNX_TDM = 23;
            EncapType_TDMOIPX_AAL2 = 24;
            EncapType_FRX_DLCI = 25;
            EncapType_IPX_INTERWORKING = 64;
            EncapType_UNSUPPORT = 255;
         };
         EncapType encap_type = 30 [json_name = "encap-type"];
         string track_interface = 31 [json_name = "track-interface"];
         uint32 local_vc_label = 32 [json_name = "local-vc-label"];
         uint32 remote_vc_label = 33 [json_name = "remote-vc-label"];
         uint32 swap_vc_label = 34 [json_name = "swap-vc-label"];
         uint32 lsp_token = 35 [json_name = "lsp-token"];
         string vsi_name = 36 [json_name = "vsi-name"];
         string vsi_peer_address = 37 [json_name = "vsi-peer-address"];
         uint32 vc_id = 38 [json_name = "vc-id"];
         string remote_peer = 39 [json_name = "remote-peer"];
         enum PwSecondary {
            INVALID_ENUM_VALUE_PwSecondary = 0;
            PwSecondary_MASTER = 1;
            PwSecondary_SECONDARY = 2;
         };
         PwSecondary pw_secondary = 40 [json_name = "pw-secondary"];
         uint32 dot1q_vid = 41 [json_name = "dot1q-vid"];
         uint32 qinq_pe_vid = 42 [json_name = "qinq-pe-vid"];
         uint32 qinq_ce_vid = 43 [json_name = "qinq-ce-vid"];
         enum EchoPassive {
            EchoPassive_DISABLE = 0;
            EchoPassive_ENABLE = 1;
         };
         EchoPassive echo_passive = 44 [json_name = "echo-passive"];
         uint32 basic_acl_num = 45 [json_name = "basic-acl-num"];
         uint32 min_echo_rx_int = 46 [json_name = "min-echo-rx-int"];
         bool lag = 47 [json_name = "lag"];
         enum MainSubRole {
            MainSubRole_NONE = 0;
            MainSubRole_BUNDLEX_MAIN = 1;
            MainSubRole_BUNDLEX_SUB = 2;
         };
         MainSubRole main_sub_role = 48 [json_name = "main-sub-role"];
         enum BundleMode {
            BundleMode_NONE = 0;
            BundleMode_BUNDLEX_STANDARD = 1;
            BundleMode_BUNDLEX_COMPATIBLE = 2;
            BundleMode_BUNDLEX_STDX_UNSHARE = 5;
            BundleMode_BUNDLEX_COMX_UNSHARE = 6;
         };
         BundleMode bundle_mode = 49 [json_name = "bundle-mode"];
         uint32 color = 50 [json_name = "color"];
         uint32 segment_list_id = 51 [json_name = "segment-list-id"];
         message Running {
            enum State {
               State_ADMINX_DOWN = 0;
               State_DOWN = 1;
               State_INIT = 2;
               State_UP = 3;
            };
            State state = 1 [json_name = "state"];
            uint32 udp_destination_port = 2 [json_name = "udp-destination-port"];
            enum DetectMode {
               DetectMode_ASYNCX_WITHX_ECHO = 0;
               DetectMode_ASYNCX_WITHOUTX_ECHO = 1;
               DetectMode_DEMANDX_WITHX_ECHO = 2;
               DetectMode_DEMANDX_WITHOUTX_ECHO = 3;
               DetectMode_ASYNCX_ONEX_ARMX_ECHO = 4;
               DetectMode_SEAMLESSX_WITHOUTX_ECHO = 5;
               DetectMode_ASYNCX_UNAFFILIATED = 6;
            };
            DetectMode detect_mode = 3 [json_name = "detect-mode"];
            bool remote_demand_mode = 4 [json_name = "remote-demand-mode"];
            uint32 actual_tx_interval = 5 [json_name = "actual-tx-interval"];
            uint32 actual_rx_interval = 6 [json_name = "actual-rx-interval"];
            uint32 actual_multiplier = 7 [json_name = "actual-multiplier"];
            uint32 detect_time = 8 [json_name = "detect-time"];
            uint32 ttl = 9 [json_name = "ttl"];
            uint64 tx_timer_id = 10 [json_name = "tx-timer-id"];
            uint64 detect_timer_id = 11 [json_name = "detect-timer-id"];
            uint64 init_timer_id = 12 [json_name = "init-timer-id"];
            uint64 wtr_timer_id = 13 [json_name = "wtr-timer-id"];
            enum NotUpReason {
               NotUpReason_INX_NEGOTIATION = 0;
               NotUpReason_INX_NEGOTIATIONX_1 = 1;
               NotUpReason_BOARDX_SELECTINGX_FAILED = 2;
               NotUpReason_SESSX_STATEX_UP = 3;
               NotUpReason_BOARDX_DELAYUP = 4;
               NotUpReason_REACHX_CENTRALIZEDX_MODEX_LIMIT = 5;
               NotUpReason_BOARDX_HARDBADX_MACFCSX_FAULT = 6;
               NotUpReason_UNSUPPORTEDX_TUNNELX_TYPE = 7;
               NotUpReason_REMOTEX_RXX_EQUALX_ZERO = 8;
            };
            NotUpReason not_up_reason = 14 [json_name = "not-up-reason"];
            uint32 acl_num = 15 [json_name = "acl-num"];
            enum LocalDiag {
               LocalDiag_NONE = 0;
               LocalDiag_DETECTX_DOWN = 1;
               LocalDiag_ECHOX_DOWN = 2;
               LocalDiag_NEIGHBORX_DOWN = 3;
               LocalDiag_FORWARDINGX_RESET = 4;
               LocalDiag_PATHX_DOWN = 5;
               LocalDiag_CONCATX_PATHX_DOWN = 6;
               LocalDiag_ADMINX_DOWN = 7;
               LocalDiag_REVERSEX_CONCATX_PATHX_DOWN = 8;
               LocalDiag_RECEIVEX_ADMINX_DOWN = 9;
            };
            LocalDiag local_diag = 16 [json_name = "local-diag"];
            uint32 echo_tx_timer_id = 17 [json_name = "echo-tx-timer-id"];
            uint32 local_discriminator = 18 [json_name = "local-discriminator"];
            uint32 remote_discriminator = 19 [json_name = "remote-discriminator"];
            uint32 min_tx_interval = 20 [json_name = "min-tx-interval"];
            uint32 min_rx_interval = 21 [json_name = "min-rx-interval"];
         }
         Running running = 52 [json_name = "running"];
         message Statistics {
            string last_down_time = 1 [json_name = "last-down-time"];
            string time_from_down = 2 [json_name = "time-from-down"];
            string create_time = 3 [json_name = "create-time"];
            string time_from_create = 4 [json_name = "time-from-create"];
            string last_up_time = 5 [json_name = "last-up-time"];
            string time_from_up = 6 [json_name = "time-from-up"];
            uint64 receive_packet = 7 [json_name = "receive-packet"];
            uint64 send_packet = 8 [json_name = "send-packet"];
            uint32 down_count = 9 [json_name = "down-count"];
            uint64 receive_bad_packet = 10 [json_name = "receive-bad-packet"];
            uint64 send_bad_packet = 11 [json_name = "send-bad-packet"];
            uint32 short_break_count = 12 [json_name = "short-break-count"];
            uint32 lsp_ping_count = 13 [json_name = "lsp-ping-count"];
         }
         Statistics statistics = 53 [json_name = "statistics"];
         enum AddressType {
            AddressType_IPV4 = 0;
            AddressType_IPV6 = 1;
         };
         AddressType address_type = 54 [json_name = "address-type"];
         enum MulticastOrUnicastIp {
            MulticastOrUnicastIp_MULTICAST = 0;
            MulticastOrUnicastIp_UNICAST = 1;
         };
         MulticastOrUnicastIp multicast_or_unicast_ip = 55 [json_name = "multicast-or-unicast-ip"];
         uint32 evpl_instance_id = 56 [json_name = "evpl-instance-id"];
      }
      repeated AllSession all_session = 1 [json_name = "all-session"];
   }
   AllSessions all_sessions = 8 [json_name = "all-sessions"];
   message BindInterfaces {
      message BindInterface {
         string if_name = 1 [json_name = "if-name"];
         uint32 session_count = 2 [json_name = "session-count"];
         enum IfOperStatus {
            IfOperStatus_DOWN = 0;
            IfOperStatus_UP = 1;
         };
         IfOperStatus if_oper_status = 3 [json_name = "if-oper-status"];
      }
      repeated BindInterface bind_interface = 1 [json_name = "bind-interface"];
   }
   BindInterfaces bind_interfaces = 9 [json_name = "bind-interfaces"];
   message CrcLspSessions {
      message CrcLspSession {
         string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
         uint32 tunnel_id = 2 [json_name = "tunnel-id"];
         uint32 lsp_id = 3 [json_name = "lsp-id"];
         enum SessionType {
            SessionType_PE = 0;
            SessionType_P = 1;
            SessionType_IPX_PEER = 2;
            SessionType_SECTION = 3;
         };
         SessionType session_type = 4 [json_name = "session-type"];
         enum FaultType {
            FaultType_INTERFACEX_FAULT = 0;
            FaultType_TRANSITX_FAULT = 1;
            FaultType_REMOTEX_PEX_FAULT = 2;
            FaultType_INTERFACEX_FAULTX_ANDX_TRANSITX_FAULT = 3;
            FaultType_INTERFACEX_FAULTX_ANDX_REMOTEX_PEX_FAULT = 4;
            FaultType_TRANSITX_FAULTX_ANDX_REMOTEX_PEX_FAULT = 5;
            FaultType_INTERFACEX_FAULTX_ANDX_TRANSITX_FAULTX_ANDX_REMOTEX_PEX_FAULT = 6;
         };
         FaultType fault_type = 5 [json_name = "fault-type"];
         string tunnel_name = 6 [json_name = "tunnel-name"];
         enum LspRole {
            LspRole_PRIMARY = 0;
            LspRole_BACKUP = 1;
            LspRole_INVALID = 2;
         };
         LspRole lsp_role = 7 [json_name = "lsp-role"];
         string out_if_name = 8 [json_name = "out-if-name"];
         uint32 lsp_token = 9 [json_name = "lsp-token"];
         uint32 fsm_board_id = 10 [json_name = "fsm-board-id"];
         uint32 min_tx_interval = 11 [json_name = "min-tx-interval"];
         uint32 max_tx_interval = 12 [json_name = "max-tx-interval"];
         uint32 actual_tx_interval = 13 [json_name = "actual-tx-interval"];
         uint32 detect_multiplier = 14 [json_name = "detect-multiplier"];
         string source_address = 15 [json_name = "source-address"];
         string destination_address = 16 [json_name = "destination-address"];
         uint32 dest_port = 17 [json_name = "dest-port"];
         uint32 tos_exp = 18 [json_name = "tos-exp"];
         repeated string lsp_inbount_interfaces = 19 [json_name = "lsp-inbount-interfaces"];
      }
      repeated CrcLspSession crc_lsp_session = 1 [json_name = "crc-lsp-session"];
   }
   CrcLspSessions crc_lsp_sessions = 10 [json_name = "crc-lsp-sessions"];
   message CrcSecSessions {
      message CrcSecSession {
         string if_name = 1 [json_name = "if-name"];
         enum SessionType {
            SessionType_PE = 0;
            SessionType_P = 1;
            SessionType_IPX_PEER = 2;
            SessionType_SECTION = 3;
         };
         SessionType session_type = 2 [json_name = "session-type"];
         enum FaultType {
            FaultType_LOCALX_SECTIONX_FAULT = 0;
            FaultType_REMOTEX_SECTIONX_FAULT = 1;
            FaultType_LOCALX_SECTIONX_FAULTX_ANDX_REMOTEX_SECTIONX_FAULT = 2;
         };
         FaultType fault_type = 3 [json_name = "fault-type"];
         uint32 fsm_board_id = 4 [json_name = "fsm-board-id"];
         uint32 min_tx_interval = 5 [json_name = "min-tx-interval"];
         uint32 max_tx_interval = 6 [json_name = "max-tx-interval"];
         uint32 actual_tx_interval = 7 [json_name = "actual-tx-interval"];
         uint32 detect_multiplier = 8 [json_name = "detect-multiplier"];
         string destination_address = 9 [json_name = "destination-address"];
         uint32 dest_port = 10 [json_name = "dest-port"];
         uint32 tos_exp = 11 [json_name = "tos-exp"];
      }
      repeated CrcSecSession crc_sec_session = 1 [json_name = "crc-sec-session"];
   }
   CrcSecSessions crc_sec_sessions = 11 [json_name = "crc-sec-sessions"];
   message CrcIpSessions {
      message CrcIpSession {
         string if_name = 1 [json_name = "if-name"];
         string destination_address = 2 [json_name = "destination-address"];
         string source_address = 3 [json_name = "source-address"];
         uint32 dest_port = 4 [json_name = "dest-port"];
         enum SessionType {
            SessionType_PE = 0;
            SessionType_P = 1;
            SessionType_IPX_PEER = 2;
            SessionType_SECTION = 3;
         };
         SessionType session_type = 5 [json_name = "session-type"];
         enum FaultType {
            FaultType_LOCALX_INTERFACEX_FAULT = 0;
            FaultType_REMOTEX_INTERFACEX_FAULT = 1;
            FaultType_LOCALX_INTERFACEX_FAULTX_ANDX_REMOTEX_INTERFACEX_FAULT = 2;
         };
         FaultType fault_type = 6 [json_name = "fault-type"];
         uint32 fsm_board_id = 7 [json_name = "fsm-board-id"];
         uint32 min_tx_interval = 8 [json_name = "min-tx-interval"];
         uint32 max_tx_interval = 9 [json_name = "max-tx-interval"];
         uint32 actual_tx_interval = 10 [json_name = "actual-tx-interval"];
         uint32 detect_multiplier = 11 [json_name = "detect-multiplier"];
         uint32 tos_exp = 12 [json_name = "tos-exp"];
         string vrf_name = 13 [json_name = "vrf-name"];
         string local_bit_err_rate = 14 [json_name = "local-bit-err-rate"];
         string remote_bit_err_rate = 15 [json_name = "remote-bit-err-rate"];
      }
      repeated CrcIpSession crc_ip_session = 1 [json_name = "crc-ip-session"];
   }
   CrcIpSessions crc_ip_sessions = 12 [json_name = "crc-ip-sessions"];
   message MulCastSessions {
      message MulCastSession {
         string session_name = 1 [json_name = "session-name"];
         uint32 local_discriminator = 2 [json_name = "local-discriminator"];
         enum CreateType {
            INVALID_ENUM_VALUE_CreateType = 0;
            CreateType_SESSIONX_DYNAMIC = 2;
            CreateType_PASSIVE = 3;
         };
         CreateType create_type = 3 [json_name = "create-type"];
         enum SessionType {
            SessionType_SINGLEX_HOPX_IP = 0;
            SessionType_MULTIX_HOPX_IP = 1;
            SessionType_STATICX_LSP = 2;
            SessionType_LDPX_LSP = 3;
            SessionType_TEX_LDP = 4;
            SessionType_TUNNEL = 5;
            SessionType_VLLX_PW = 6;
            SessionType_VSIX_PW = 7;
            SessionType_P2MPX_TE = 8;
            SessionType_LDPX_TNL = 9;
            SessionType_BGPX_TNL = 10;
            SessionType_P2MPX_LDP = 11;
            SessionType_VXLAN = 12;
            SessionType_SRX_BEX_TNL = 13;
            SessionType_SIDX_LIST = 14;
            SessionType_FLEXX_ALGOX_TNL = 15;
            SessionType_EVPNX_VPWS = 16;
         };
         SessionType session_type = 4 [json_name = "session-type"];
         enum MulticastSessionType {
            MulticastSessionType_MULTIX_POINTX_HEAD = 0;
            MulticastSessionType_MULTIX_POINTX_TAIL = 1;
            MulticastSessionType_MULTIX_POINTX_CLIENT = 2;
         };
         MulticastSessionType multicast_session_type = 5 [json_name = "multicast-session-type"];
         string p2mp_id = 6 [json_name = "p2mp-id"];
         string p2mp_ingress_lsr_id = 7 [json_name = "p2mp-ingress-lsr-id"];
         uint32 p2mp_tunnel_id = 8 [json_name = "p2mp-tunnel-id"];
         string root_ip = 9 [json_name = "root-ip"];
         uint32 lsp_id = 10 [json_name = "lsp-id"];
         string opaque_id = 11 [json_name = "opaque-id"];
         uint32 remote_discriminator = 12 [json_name = "remote-discriminator"];
         enum LinkType {
            LinkType_IP = 0;
            LinkType_LDPX_LSP = 1;
            LinkType_STATICX_LSP = 2;
            LinkType_TEX_LSP = 3;
            LinkType_TEX_TUNNEL = 4;
            LinkType_LDPX_TUNNEL = 5;
            LinkType_VLLX_PW = 6;
            LinkType_VSIX_PW = 7;
            LinkType_P2MPX_TE = 8;
            LinkType_BGPX_TUNNEL = 9;
            LinkType_P2MPX_LDP = 10;
            LinkType_VXLAN = 11;
            LinkType_SRX_BEX_TUNNEL = 12;
            LinkType_SIDX_LIST = 13;
            LinkType_FLEXX_ALGOX_TUNNEL = 14;
            LinkType_EVPNX_VPWS = 16;
         };
         LinkType link_type = 13 [json_name = "link-type"];
         string destination_address = 14 [json_name = "destination-address"];
         uint32 min_tx_interval = 15 [json_name = "min-tx-interval"];
         uint32 min_rx_interval = 16 [json_name = "min-rx-interval"];
         uint32 detect_multiplier = 17 [json_name = "detect-multiplier"];
         uint32 tos_exp = 18 [json_name = "tos-exp"];
         string description = 19 [json_name = "description"];
         string bind_application = 20 [json_name = "bind-application"];
         string fsm_board_slot = 21 [json_name = "fsm-board-slot"];
         string track_interface = 22 [json_name = "track-interface"];
         message MultiCastSessionRunning {
            enum SessionState {
               SessionState_ADMINX_DOWN = 0;
               SessionState_DOWN = 1;
               SessionState_INIT = 2;
               SessionState_UP = 3;
            };
            SessionState session_state = 1 [json_name = "session-state"];
            uint32 udp_dst_port = 2 [json_name = "udp-dst-port"];
            enum DetectMode {
               DetectMode_ASYNCX_WITHX_ECHO = 0;
               DetectMode_ASYNCX_WITHOUTX_ECHO = 1;
               DetectMode_DEMANDX_WITHX_ECHO = 2;
               DetectMode_DEMANDX_WITHOUTX_ECHO = 3;
               DetectMode_ASYNCX_ONEX_ARMX_ECHO = 4;
               DetectMode_SEAMLESSX_WITHOUTX_ECHO = 5;
               DetectMode_ASYNCX_UNAFFILIATED = 6;
            };
            DetectMode detect_mode = 3 [json_name = "detect-mode"];
            bool re_demand_mode = 4 [json_name = "re-demand-mode"];
            uint32 act_tx_interval = 5 [json_name = "act-tx-interval"];
            uint32 act_rx_interval = 6 [json_name = "act-rx-interval"];
            uint32 act_multiplier = 7 [json_name = "act-multiplier"];
            uint32 detect_time = 8 [json_name = "detect-time"];
            uint32 ttl = 9 [json_name = "ttl"];
            uint64 tx_timer_id = 10 [json_name = "tx-timer-id"];
            uint64 detect_timer_id = 11 [json_name = "detect-timer-id"];
            uint64 init_timer_id = 12 [json_name = "init-timer-id"];
            uint64 wtr_timer_id = 13 [json_name = "wtr-timer-id"];
            enum NotUpReason {
               NotUpReason_INX_NEGOTIATION = 0;
               NotUpReason_INX_NEGOTIATIONX_1 = 1;
               NotUpReason_BOARDX_SELECTINGX_FAILED = 2;
               NotUpReason_SESSX_STATEX_UP = 3;
               NotUpReason_BOARDX_DELAYUP = 4;
               NotUpReason_REACHX_CENTRALIZEDX_MODEX_LIMIT = 5;
               NotUpReason_BOARDX_HARDBADX_MACFCSX_FAULT = 6;
               NotUpReason_UNSUPPORTEDX_TUNNELX_TYPE = 7;
               NotUpReason_REMOTEX_RXX_EQUALX_ZERO = 8;
            };
            NotUpReason not_up_reason = 14 [json_name = "not-up-reason"];
            uint32 acl_num = 15 [json_name = "acl-num"];
            enum LocalDiag {
               LocalDiag_NONE = 0;
               LocalDiag_DETECTX_DOWN = 1;
               LocalDiag_ECHOX_DOWN = 2;
               LocalDiag_NEIGHBORX_DOWN = 3;
               LocalDiag_FORWARDINGX_RESET = 4;
               LocalDiag_PATHX_DOWN = 5;
               LocalDiag_CONCATX_PATHX_DOWN = 6;
               LocalDiag_ADMINX_DOWN = 7;
               LocalDiag_REVERSEX_CONCATX_PATHX_DOWN = 8;
               LocalDiag_RECEIVEX_ADMINX_DOWN = 9;
            };
            LocalDiag local_diag = 16 [json_name = "local-diag"];
            uint64 echo_tx_timer_id = 17 [json_name = "echo-tx-timer-id"];
            uint32 remote_discriminator = 18 [json_name = "remote-discriminator"];
            uint32 min_tx_interval = 19 [json_name = "min-tx-interval"];
            uint32 min_rx_interval = 20 [json_name = "min-rx-interval"];
         }
         MultiCastSessionRunning multi_cast_session_running = 23 [json_name = "multi-cast-session-running"];
      }
      repeated MulCastSession mul_cast_session = 1 [json_name = "mul-cast-session"];
   }
   MulCastSessions mul_cast_sessions = 13 [json_name = "mul-cast-sessions"];
   message BfdBundleSessions {
      message BfdBundleSession {
         uint32 local_discriminator = 1 [json_name = "local-discriminator"];
         uint32 remote_discriminator = 2 [json_name = "remote-discriminator"];
         string session_name = 3 [json_name = "session-name"];
         enum MainSubRole {
            MainSubRole_NONE = 0;
            MainSubRole_BUNDLEX_MAIN = 1;
            MainSubRole_BUNDLEX_SUB = 2;
         };
         MainSubRole main_sub_role = 4 [json_name = "main-sub-role"];
         string main_session_name = 5 [json_name = "main-session-name"];
         enum State {
            State_ADMINX_DOWN = 0;
            State_DOWN = 1;
            State_INIT = 2;
            State_UP = 3;
         };
         State state = 6 [json_name = "state"];
         enum DetectMode {
            DetectMode_ASYNCX_WITHX_ECHO = 0;
            DetectMode_ASYNCX_WITHOUTX_ECHO = 1;
            DetectMode_DEMANDX_WITHX_ECHO = 2;
            DetectMode_DEMANDX_WITHOUTX_ECHO = 3;
            DetectMode_ASYNCX_ONEX_ARMX_ECHO = 4;
            DetectMode_SEAMLESSX_WITHOUTX_ECHO = 5;
            DetectMode_ASYNCX_UNAFFILIATED = 6;
         };
         DetectMode detect_mode = 7 [json_name = "detect-mode"];
         enum CreateType {
            CreateType_SESSIONX_STATIC = 0;
            CreateType_SESSIONX_AUTO = 1;
            CreateType_SESSIONX_DYNAMIC = 2;
            CreateType_PASSIVE = 3;
         };
         CreateType create_type = 8 [json_name = "create-type"];
         enum LinkType {
            LinkType_IP = 0;
            LinkType_LDPX_LSP = 1;
            LinkType_STATICX_LSP = 2;
            LinkType_TEX_LSP = 3;
            LinkType_TEX_TUNNEL = 4;
            LinkType_LDPX_TUNNEL = 5;
            LinkType_VLLX_PW = 6;
            LinkType_VSIX_PW = 7;
            LinkType_P2MPX_TE = 8;
            LinkType_BGPX_TUNNEL = 9;
            LinkType_P2MPX_LDP = 10;
            LinkType_VXLAN = 11;
            LinkType_SRX_BEX_TUNNEL = 12;
            LinkType_SIDX_LIST = 13;
            LinkType_FLEXX_ALGOX_TUNNEL = 14;
            LinkType_EVPNX_VPWS = 16;
         };
         LinkType link_type = 9 [json_name = "link-type"];
         string destination_address = 10 [json_name = "destination-address"];
         string source_address = 11 [json_name = "source-address"];
         string fsm_board_slot = 12 [json_name = "fsm-board-slot"];
         uint32 tos_exp = 13 [json_name = "tos-exp"];
         uint32 min_tx_interval = 14 [json_name = "min-tx-interval"];
         uint32 min_rx_interval = 15 [json_name = "min-rx-interval"];
         uint32 detect_multiplier = 16 [json_name = "detect-multiplier"];
         uint32 act_tx_interval = 17 [json_name = "act-tx-interval"];
         uint32 act_rx_interval = 18 [json_name = "act-rx-interval"];
         uint32 act_detect_multiplier = 19 [json_name = "act-detect-multiplier"];
         uint32 detect_time = 20 [json_name = "detect-time"];
         uint32 dest_port = 21 [json_name = "dest-port"];
         uint32 wtr_timer_int = 22 [json_name = "wtr-timer-int"];
         enum LocalDiag {
            LocalDiag_NONE = 0;
            LocalDiag_DETECTX_DOWN = 1;
            LocalDiag_ECHOX_DOWN = 2;
            LocalDiag_NEIGHBORX_DOWN = 3;
            LocalDiag_FORWARDINGX_RESET = 4;
            LocalDiag_PATHX_DOWN = 5;
            LocalDiag_CONCATX_PATHX_DOWN = 6;
            LocalDiag_ADMINX_DOWN = 7;
            LocalDiag_REVERSEX_CONCATX_PATHX_DOWN = 8;
            LocalDiag_RECEIVEX_ADMINX_DOWN = 9;
         };
         LocalDiag local_diag = 23 [json_name = "local-diag"];
         string bind_application = 24 [json_name = "bind-application"];
         uint32 sub_session_count = 25 [json_name = "sub-session-count"];
         string out_if_name = 26 [json_name = "out-if-name"];
         enum BundleMode {
            BundleMode_NONE = 0;
            BundleMode_BUNDLEX_STANDARD = 1;
            BundleMode_BUNDLEX_COMPATIBLE = 2;
            BundleMode_BUNDLEX_STDX_UNSHARE = 5;
            BundleMode_BUNDLEX_COMX_UNSHARE = 6;
         };
         BundleMode bundle_mode = 27 [json_name = "bundle-mode"];
         string vrf_name = 28 [json_name = "vrf-name"];
         enum DispSessionType {
            INVALID_ENUM_VALUE_DispSessionType = 0;
            DispSessionType_LINKX_BUNDLE = 1;
            DispSessionType_PERLINK = 2;
            DispSessionType_GROUP = 3;
         };
         DispSessionType disp_session_type = 29 [json_name = "disp-session-type"];
         bool te_backup = 30 [json_name = "te-backup"];
         uint32 tunnel_id = 31 [json_name = "tunnel-id"];
         bool pw_secondary = 32 [json_name = "pw-secondary"];
         string vsi_name = 33 [json_name = "vsi-name"];
      }
      repeated BfdBundleSession bfd_bundle_session = 1 [json_name = "bfd-bundle-session"];
   }
   BfdBundleSessions bfd_bundle_sessions = 14 [json_name = "bfd-bundle-sessions"];
   message ForwardingMatch {
      repeated uint32 remote_discriminator_values = 1 [json_name = "remote-discriminator-values"];
   }
   ForwardingMatch forwarding_match = 15 [json_name = "forwarding-match"];
   message ForwardingSamediscr {
      bool same_discriminator_disable = 1 [json_name = "same-discriminator-disable"];
   }
   ForwardingSamediscr forwarding_samediscr = 16 [json_name = "forwarding-samediscr"];
}


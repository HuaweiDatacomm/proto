syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module openconfig-bgp
// revision 2019-07-10
// revision 2019-05-28
// revision 2019-04-16
// revision 2018-11-21
// revision 2018-08-20
// revision 2018-04-11
// revision 2018-03-20
// revision 2017-07-30
// revision 2017-07-10
// revision 2017-02-02
// revision 2017-01-26
// revision 2016-06-21
// revision 2016-06-06
// revision 2016-03-31
// namespace http://openconfig.net/yang/bgp

package openconfig_bgp;

message Bgp {
   message Global {
      message AfiSafis {
         message AfiSafi {
            message AddPaths {
               message Config {
                  string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                  bool receive = 2 [json_name = "receive"];
                  bool send = 3 [json_name = "send"];
                  uint32 send_max = 4 [json_name = "send-max"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                  bool receive = 2 [json_name = "receive"];
                  bool send = 3 [json_name = "send"];
                  uint32 send_max = 4 [json_name = "send-max"];
               }
               State state = 2 [json_name = "state"];
            }
            AddPaths add_paths = 1 [json_name = "add-paths"];
            string afi_safi_name = 2 [json_name = "afi-safi-name"];
            message Config {
               string afi_safi_name = 1 [json_name = "afi-safi-name"];
               bool enabled = 2 [json_name = "enabled"];
            }
            Config config = 3 [json_name = "config"];
            message GracefulRestart {
               message Config {
                  bool enabled = 1 [json_name = "enabled"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  bool enabled = 1 [json_name = "enabled"];
               }
               State state = 2 [json_name = "state"];
            }
            GracefulRestart graceful_restart = 4 [json_name = "graceful-restart"];
            message Ipv4LabeledUnicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            Ipv4LabeledUnicast ipv4_labeled_unicast = 5 [json_name = "ipv4-labeled-unicast"];
            message Ipv4Unicast {
               message Config {
                  bool send_default_route = 1 [json_name = "send-default-route"];
               }
               Config config = 1 [json_name = "config"];
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
               message State {
                  bool send_default_route = 1 [json_name = "send-default-route"];
               }
               State state = 3 [json_name = "state"];
            }
            Ipv4Unicast ipv4_unicast = 6 [json_name = "ipv4-unicast"];
            message Ipv6LabeledUnicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            Ipv6LabeledUnicast ipv6_labeled_unicast = 7 [json_name = "ipv6-labeled-unicast"];
            message Ipv6Unicast {
               message Config {
                  bool send_default_route = 1 [json_name = "send-default-route"];
               }
               Config config = 1 [json_name = "config"];
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
               message State {
                  bool send_default_route = 1 [json_name = "send-default-route"];
               }
               State state = 3 [json_name = "state"];
            }
            Ipv6Unicast ipv6_unicast = 8 [json_name = "ipv6-unicast"];
            message L2VpnEvpn {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L2VpnEvpn l2vpn_evpn = 9 [json_name = "l2vpn-evpn"];
            message L2VpnVpls {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L2VpnVpls l2vpn_vpls = 10 [json_name = "l2vpn-vpls"];
            message L3VpnIpv4Multicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L3VpnIpv4Multicast l3vpn_ipv4_multicast = 11 [json_name = "l3vpn-ipv4-multicast"];
            message L3VpnIpv4Unicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L3VpnIpv4Unicast l3vpn_ipv4_unicast = 12 [json_name = "l3vpn-ipv4-unicast"];
            message L3VpnIpv6Multicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L3VpnIpv6Multicast l3vpn_ipv6_multicast = 13 [json_name = "l3vpn-ipv6-multicast"];
            message L3VpnIpv6Unicast {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            L3VpnIpv6Unicast l3vpn_ipv6_unicast = 14 [json_name = "l3vpn-ipv6-unicast"];
            message RouteSelectionOptions {
               message Config {
                  bool advertise_inactive_routes = 1 [json_name = "advertise-inactive-routes"];
                  bool always_compare_med = 2 [json_name = "always-compare-med"];
                  bool enable_aigp = 3 [json_name = "enable-aigp"];
                  bool external_compare_router_id = 4 [json_name = "external-compare-router-id"];
                  bool ignore_as_path_length = 5 [json_name = "ignore-as-path-length"];
                  bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  bool advertise_inactive_routes = 1 [json_name = "advertise-inactive-routes"];
                  bool always_compare_med = 2 [json_name = "always-compare-med"];
                  bool enable_aigp = 3 [json_name = "enable-aigp"];
                  bool external_compare_router_id = 4 [json_name = "external-compare-router-id"];
                  bool ignore_as_path_length = 5 [json_name = "ignore-as-path-length"];
                  bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
               }
               State state = 2 [json_name = "state"];
            }
            RouteSelectionOptions route_selection_options = 15 [json_name = "route-selection-options"];
            message SrtePolicyIpv4 {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            SrtePolicyIpv4 srte_policy_ipv4 = 16 [json_name = "srte-policy-ipv4"];
            message SrtePolicyIpv6 {
               message PrefixLimit {
                  message Config {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                     bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                     Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                     uint32 shutdown_threshold_pct = 4;
                     uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                  }
                  State state = 2 [json_name = "state"];
               }
               PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
            }
            SrtePolicyIpv6 srte_policy_ipv6 = 17 [json_name = "srte-policy-ipv6"];
            message State {
               string afi_safi_name = 1 [json_name = "afi-safi-name"];
               bool enabled = 2 [json_name = "enabled"];
               uint32 total_paths = 3 [json_name = "total-paths"];
               uint32 total_prefixes = 4 [json_name = "total-prefixes"];
            }
            State state = 18 [json_name = "state"];
            message UseMultiplePaths {
               message Config {
                  bool enabled = 1 [json_name = "enabled"];
               }
               Config config = 1 [json_name = "config"];
               message Ebgp {
                  message Config {
                     bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                     uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                     uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Ebgp ebgp = 2 [json_name = "ebgp"];
               message Ibgp {
                  message Config {
                     uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Ibgp ibgp = 3 [json_name = "ibgp"];
               message State {
                  bool enabled = 1 [json_name = "enabled"];
               }
               State state = 4 [json_name = "state"];
            }
            UseMultiplePaths use_multiple_paths = 19 [json_name = "use-multiple-paths"];
         }
         repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
      }
      AfiSafis afi_safis = 1 [json_name = "afi-safis"];
      message Confederation {
         message Config {
            uint32 identifier = 1 [json_name = "identifier"];
            repeated uint32 member_as = 2 [json_name = "member-as"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            uint32 identifier = 1 [json_name = "identifier"];
            repeated uint32 member_as = 2 [json_name = "member-as"];
         }
         State state = 2 [json_name = "state"];
      }
      Confederation confederation = 2 [json_name = "confederation"];
      message Config {
         uint32 as = 1 [json_name = "as"];
         string router_id = 2 [json_name = "router-id"];
      }
      Config config = 3 [json_name = "config"];
      message DefaultRouteDistance {
         message Config {
            uint32 external_route_distance = 1 [json_name = "external-route-distance"];
            uint32 internal_route_distance = 2 [json_name = "internal-route-distance"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            uint32 external_route_distance = 1 [json_name = "external-route-distance"];
            uint32 internal_route_distance = 2 [json_name = "internal-route-distance"];
         }
         State state = 2 [json_name = "state"];
      }
      DefaultRouteDistance default_route_distance = 4 [json_name = "default-route-distance"];
      message DynamicNeighborPrefixes {
         message DynamicNeighborPrefix {
            message Config {
               string peer_group = 1 [json_name = "peer-group"];
               string prefix = 2 [json_name = "prefix"];
            }
            Config config = 1 [json_name = "config"];
            string prefix = 2 [json_name = "prefix"];
            message State {
               string peer_group = 1 [json_name = "peer-group"];
               string prefix = 2 [json_name = "prefix"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated DynamicNeighborPrefix dynamic_neighbor_prefix = 1 [json_name = "dynamic-neighbor-prefix"];
      }
      DynamicNeighborPrefixes dynamic_neighbor_prefixes = 5 [json_name = "dynamic-neighbor-prefixes"];
      message GracefulRestart {
         message Config {
            bool enabled = 1 [json_name = "enabled"];
            bool helper_only = 2 [json_name = "helper-only"];
            uint32 restart_time = 3 [json_name = "restart-time"];
            Decimal64 stale_routes_time = 4 [json_name = "stale-routes-time"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            bool enabled = 1 [json_name = "enabled"];
            bool helper_only = 2 [json_name = "helper-only"];
            uint32 restart_time = 3 [json_name = "restart-time"];
            Decimal64 stale_routes_time = 4 [json_name = "stale-routes-time"];
         }
         State state = 2 [json_name = "state"];
      }
      GracefulRestart graceful_restart = 6 [json_name = "graceful-restart"];
      message RouteSelectionOptions {
         message Config {
            bool advertise_inactive_routes = 1 [json_name = "advertise-inactive-routes"];
            bool always_compare_med = 2 [json_name = "always-compare-med"];
            bool enable_aigp = 3 [json_name = "enable-aigp"];
            bool external_compare_router_id = 4 [json_name = "external-compare-router-id"];
            bool ignore_as_path_length = 5 [json_name = "ignore-as-path-length"];
            bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            bool advertise_inactive_routes = 1 [json_name = "advertise-inactive-routes"];
            bool always_compare_med = 2 [json_name = "always-compare-med"];
            bool enable_aigp = 3 [json_name = "enable-aigp"];
            bool external_compare_router_id = 4 [json_name = "external-compare-router-id"];
            bool ignore_as_path_length = 5 [json_name = "ignore-as-path-length"];
            bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
         }
         State state = 2 [json_name = "state"];
      }
      RouteSelectionOptions route_selection_options = 7 [json_name = "route-selection-options"];
      message State {
         uint32 as = 1 [json_name = "as"];
         string router_id = 2 [json_name = "router-id"];
         uint32 total_paths = 3 [json_name = "total-paths"];
         uint32 total_prefixes = 4 [json_name = "total-prefixes"];
      }
      State state = 8 [json_name = "state"];
      message UseMultiplePaths {
         message Config {
            bool enabled = 1 [json_name = "enabled"];
         }
         Config config = 1 [json_name = "config"];
         message Ebgp {
            message Config {
               bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
               uint32 maximum_paths = 2 [json_name = "maximum-paths"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
               uint32 maximum_paths = 2 [json_name = "maximum-paths"];
            }
            State state = 2 [json_name = "state"];
         }
         Ebgp ebgp = 2 [json_name = "ebgp"];
         message Ibgp {
            message Config {
               uint32 maximum_paths = 1 [json_name = "maximum-paths"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               uint32 maximum_paths = 1 [json_name = "maximum-paths"];
            }
            State state = 2 [json_name = "state"];
         }
         Ibgp ibgp = 3 [json_name = "ibgp"];
         message State {
            bool enabled = 1 [json_name = "enabled"];
         }
         State state = 4 [json_name = "state"];
      }
      UseMultiplePaths use_multiple_paths = 9 [json_name = "use-multiple-paths"];
   }
   Global global = 1 [json_name = "global"];
   message Neighbors {
      message Neighbor {
         message AfiSafis {
            message AfiSafi {
               message AddPaths {
                  message Config {
                     string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                     bool receive = 2 [json_name = "receive"];
                     bool send = 3 [json_name = "send"];
                     uint32 send_max = 4 [json_name = "send-max"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                     bool receive = 2 [json_name = "receive"];
                     bool send = 3 [json_name = "send"];
                     uint32 send_max = 4 [json_name = "send-max"];
                  }
                  State state = 2 [json_name = "state"];
               }
               AddPaths add_paths = 1 [json_name = "add-paths"];
               string afi_safi_name = 2 [json_name = "afi-safi-name"];
               message ApplyPolicy {
                  message Config {
                     enum DefaultExportPolicy {
                        DefaultExportPolicy_ACCEPT_ROUTE = 0;
                        DefaultExportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
                     enum DefaultImportPolicy {
                        DefaultImportPolicy_ACCEPT_ROUTE = 0;
                        DefaultImportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                     repeated string export_policy = 3 [json_name = "export-policy"];
                     repeated string import_policy = 4 [json_name = "import-policy"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum DefaultExportPolicy {
                        DefaultExportPolicy_ACCEPT_ROUTE = 0;
                        DefaultExportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
                     enum DefaultImportPolicy {
                        DefaultImportPolicy_ACCEPT_ROUTE = 0;
                        DefaultImportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                     repeated string export_policy = 3 [json_name = "export-policy"];
                     repeated string import_policy = 4 [json_name = "import-policy"];
                  }
                  State state = 2 [json_name = "state"];
               }
               ApplyPolicy apply_policy = 3 [json_name = "apply-policy"];
               message Config {
                  string afi_safi_name = 1 [json_name = "afi-safi-name"];
                  bool enabled = 2 [json_name = "enabled"];
               }
               Config config = 4 [json_name = "config"];
               message GracefulRestart {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool advertised = 1 [json_name = "advertised"];
                     bool enabled = 2 [json_name = "enabled"];
                     bool received = 3 [json_name = "received"];
                  }
                  State state = 2 [json_name = "state"];
               }
               GracefulRestart graceful_restart = 5 [json_name = "graceful-restart"];
               message Ipv4LabeledUnicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               Ipv4LabeledUnicast ipv4_labeled_unicast = 6 [json_name = "ipv4-labeled-unicast"];
               message Ipv4Unicast {
                  message Config {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  Config config = 1 [json_name = "config"];
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
                  message State {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  State state = 3 [json_name = "state"];
               }
               Ipv4Unicast ipv4_unicast = 7 [json_name = "ipv4-unicast"];
               message Ipv6LabeledUnicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               Ipv6LabeledUnicast ipv6_labeled_unicast = 8 [json_name = "ipv6-labeled-unicast"];
               message Ipv6Unicast {
                  message Config {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  Config config = 1 [json_name = "config"];
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
                  message State {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  State state = 3 [json_name = "state"];
               }
               Ipv6Unicast ipv6_unicast = 9 [json_name = "ipv6-unicast"];
               message L2VpnEvpn {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L2VpnEvpn l2vpn_evpn = 10 [json_name = "l2vpn-evpn"];
               message L2VpnVpls {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L2VpnVpls l2vpn_vpls = 11 [json_name = "l2vpn-vpls"];
               message L3VpnIpv4Multicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv4Multicast l3vpn_ipv4_multicast = 12 [json_name = "l3vpn-ipv4-multicast"];
               message L3VpnIpv4Unicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv4Unicast l3vpn_ipv4_unicast = 13 [json_name = "l3vpn-ipv4-unicast"];
               message L3VpnIpv6Multicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv6Multicast l3vpn_ipv6_multicast = 14 [json_name = "l3vpn-ipv6-multicast"];
               message L3VpnIpv6Unicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv6Unicast l3vpn_ipv6_unicast = 15 [json_name = "l3vpn-ipv6-unicast"];
               message SrtePolicyIpv4 {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               SrtePolicyIpv4 srte_policy_ipv4 = 16 [json_name = "srte-policy-ipv4"];
               message SrtePolicyIpv6 {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               SrtePolicyIpv6 srte_policy_ipv6 = 17 [json_name = "srte-policy-ipv6"];
               message State {
                  bool active = 1 [json_name = "active"];
                  string afi_safi_name = 2 [json_name = "afi-safi-name"];
                  bool enabled = 3 [json_name = "enabled"];
                  message Prefixes {
                     uint32 installed = 1 [json_name = "installed"];
                     uint32 received = 2 [json_name = "received"];
                     uint32 sent = 3 [json_name = "sent"];
                     uint32 received_pre_policy = 4 [json_name = "received-pre-policy"];
                  }
                  Prefixes prefixes = 4 [json_name = "prefixes"];
               }
               State state = 18 [json_name = "state"];
               message UseMultiplePaths {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message Ebgp {
                     message Config {
                        bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ebgp ebgp = 2 [json_name = "ebgp"];
                  message State {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  State state = 3 [json_name = "state"];
               }
               UseMultiplePaths use_multiple_paths = 19 [json_name = "use-multiple-paths"];
            }
            repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
         }
         AfiSafis afi_safis = 1 [json_name = "afi-safis"];
         message ApplyPolicy {
            message Config {
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               repeated string import_policy = 4 [json_name = "import-policy"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               repeated string import_policy = 4 [json_name = "import-policy"];
            }
            State state = 2 [json_name = "state"];
         }
         ApplyPolicy apply_policy = 2 [json_name = "apply-policy"];
         message AsPathOptions {
            message Config {
               uint32 allow_own_as = 1 [json_name = "allow-own-as"];
               bool disable_peer_as_filter = 2 [json_name = "disable-peer-as-filter"];
               bool replace_peer_as = 3 [json_name = "replace-peer-as"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               uint32 allow_own_as = 1 [json_name = "allow-own-as"];
               bool disable_peer_as_filter = 2 [json_name = "disable-peer-as-filter"];
               bool replace_peer_as = 3 [json_name = "replace-peer-as"];
            }
            State state = 2 [json_name = "state"];
         }
         AsPathOptions as_path_options = 3 [json_name = "as-path-options"];
         message Config {
            string auth_password = 1 [json_name = "auth-password"];
            string description = 2 [json_name = "description"];
            bool enabled = 3 [json_name = "enabled"];
            uint32 local_as = 4 [json_name = "local-as"];
            string neighbor_address = 5 [json_name = "neighbor-address"];
            uint32 peer_as = 6 [json_name = "peer-as"];
            string peer_group = 7 [json_name = "peer-group"];
            enum PeerType {
               PeerType_EXTERNAL = 0;
               PeerType_INTERNAL = 1;
            };
            PeerType peer_type = 8 [json_name = "peer-type"];
            string remove_private_as = 9 [json_name = "remove-private-as"];
            bool route_flap_damping = 10 [json_name = "route-flap-damping"];
            enum SendCommunity {
               SendCommunity_BOTH = 0;
               SendCommunity_EXTENDED = 1;
               SendCommunity_NONE = 2;
               SendCommunity_STANDARD = 3;
            };
            SendCommunity send_community = 11 [json_name = "send-community"];
         }
         Config config = 4 [json_name = "config"];
         message EbgpMultihop {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
               uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
               uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
            }
            State state = 2 [json_name = "state"];
         }
         EbgpMultihop ebgp_multihop = 5 [json_name = "ebgp-multihop"];
         message ErrorHandling {
            message Config {
               bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               uint32 erroneous_update_messages = 1 [json_name = "erroneous-update-messages"];
               bool treat_as_withdraw = 2 [json_name = "treat-as-withdraw"];
            }
            State state = 2 [json_name = "state"];
         }
         ErrorHandling error_handling = 6 [json_name = "error-handling"];
         message GracefulRestart {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
               bool helper_only = 2 [json_name = "helper-only"];
               uint32 restart_time = 3 [json_name = "restart-time"];
               Decimal64 stale_routes_time = 4 [json_name = "stale-routes-time"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
               bool helper_only = 2 [json_name = "helper-only"];
               bool local_restarting = 3 [json_name = "local-restarting"];
               enum Mode {
                  Mode_BILATERAL = 0;
                  Mode_HELPER_ONLY = 1;
                  Mode_REMOTE_HELPER = 2;
               };
               Mode mode = 4 [json_name = "mode"];
               uint32 peer_restart_time = 5 [json_name = "peer-restart-time"];
               bool peer_restarting = 6 [json_name = "peer-restarting"];
               uint32 restart_time = 7 [json_name = "restart-time"];
               Decimal64 stale_routes_time = 8 [json_name = "stale-routes-time"];
            }
            State state = 2 [json_name = "state"];
         }
         GracefulRestart graceful_restart = 7 [json_name = "graceful-restart"];
         message LoggingOptions {
            message Config {
               bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
            }
            State state = 2 [json_name = "state"];
         }
         LoggingOptions logging_options = 8 [json_name = "logging-options"];
         string neighbor_address = 9 [json_name = "neighbor-address"];
         message RouteReflector {
            message Config {
               bool route_reflector_client = 1 [json_name = "route-reflector-client"];
               string route_reflector_cluster_id = 2 [json_name = "route-reflector-cluster-id"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool route_reflector_client = 1 [json_name = "route-reflector-client"];
               string route_reflector_cluster_id = 2 [json_name = "route-reflector-cluster-id"];
            }
            State state = 2 [json_name = "state"];
         }
         RouteReflector route_reflector = 10 [json_name = "route-reflector"];
         message State {
            string auth_password = 1 [json_name = "auth-password"];
            string description = 2 [json_name = "description"];
            bool dynamically_configured = 3 [json_name = "dynamically-configured"];
            bool enabled = 4 [json_name = "enabled"];
            uint64 established_transitions = 5 [json_name = "established-transitions"];
            uint64 last_established = 6 [json_name = "last-established"];
            uint32 local_as = 7 [json_name = "local-as"];
            message Messages {
               message Received {
                  uint64 NOTIFICATION = 1 [json_name = "NOTIFICATION"];
                  uint64 UPDATE = 2 [json_name = "UPDATE"];
                  string last_notification_error_code = 3 [json_name = "last-notification-error-code"];
                  string last_notification_error_subcode = 4 [json_name = "last-notification-error-subcode"];
                  uint64 last_notification_time = 5 [json_name = "last-notification-time"];
               }
               Received received = 1 [json_name = "received"];
               message Sent {
                  uint64 NOTIFICATION = 1 [json_name = "NOTIFICATION"];
                  uint64 UPDATE = 2 [json_name = "UPDATE"];
                  string last_notification_error_code = 3 [json_name = "last-notification-error-code"];
                  string last_notification_error_subcode = 4 [json_name = "last-notification-error-subcode"];
                  uint64 last_notification_time = 5 [json_name = "last-notification-time"];
               }
               Sent sent = 2 [json_name = "sent"];
            }
            Messages messages = 8 [json_name = "messages"];
            string neighbor_address = 9 [json_name = "neighbor-address"];
            uint32 peer_as = 10 [json_name = "peer-as"];
            string peer_group = 11 [json_name = "peer-group"];
            enum PeerType {
               PeerType_EXTERNAL = 0;
               PeerType_INTERNAL = 1;
            };
            PeerType peer_type = 12 [json_name = "peer-type"];
            message Queues {
               uint32 input = 1 [json_name = "input"];
               uint32 output = 2 [json_name = "output"];
            }
            Queues queues = 13 [json_name = "queues"];
            string remove_private_as = 14 [json_name = "remove-private-as"];
            bool route_flap_damping = 15 [json_name = "route-flap-damping"];
            enum SendCommunity {
               SendCommunity_BOTH = 0;
               SendCommunity_EXTENDED = 1;
               SendCommunity_NONE = 2;
               SendCommunity_STANDARD = 3;
            };
            SendCommunity send_community = 16 [json_name = "send-community"];
            enum SessionState {
               SessionState_ACTIVE = 0;
               SessionState_CONNECT = 1;
               SessionState_ESTABLISHED = 2;
               SessionState_IDLE = 3;
               SessionState_OPENCONFIRM = 4;
               SessionState_OPENSENT = 5;
            };
            SessionState session_state = 17 [json_name = "session-state"];
            repeated string supported_capabilities = 18 [json_name = "supported-capabilities"];
         }
         State state = 11 [json_name = "state"];
         message Timers {
            message Config {
               Decimal64 connect_retry = 1 [json_name = "connect-retry"];
               Decimal64 hold_time = 2 [json_name = "hold-time"];
               Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
               Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               Decimal64 connect_retry = 1 [json_name = "connect-retry"];
               Decimal64 hold_time = 2 [json_name = "hold-time"];
               Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
               Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
               Decimal64 negotiated_hold_time = 5 [json_name = "negotiated-hold-time"];
            }
            State state = 2 [json_name = "state"];
         }
         Timers timers = 12 [json_name = "timers"];
         message Transport {
            message Config {
               string local_address = 1 [json_name = "local-address"];
               bool mtu_discovery = 2 [json_name = "mtu-discovery"];
               bool passive_mode = 3 [json_name = "passive-mode"];
               uint32 tcp_mss = 4 [json_name = "tcp-mss"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string local_address = 1 [json_name = "local-address"];
               uint32 local_port = 2 [json_name = "local-port"];
               bool mtu_discovery = 3 [json_name = "mtu-discovery"];
               bool passive_mode = 4 [json_name = "passive-mode"];
               string remote_address = 5 [json_name = "remote-address"];
               uint32 remote_port = 6 [json_name = "remote-port"];
               uint32 tcp_mss = 7 [json_name = "tcp-mss"];
            }
            State state = 2 [json_name = "state"];
         }
         Transport transport = 13 [json_name = "transport"];
         message UseMultiplePaths {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
            }
            Config config = 1 [json_name = "config"];
            message Ebgp {
               message Config {
                  bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
               }
               State state = 2 [json_name = "state"];
            }
            Ebgp ebgp = 2 [json_name = "ebgp"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
            }
            State state = 3 [json_name = "state"];
         }
         UseMultiplePaths use_multiple_paths = 14 [json_name = "use-multiple-paths"];
      }
      repeated Neighbor neighbor = 1 [json_name = "neighbor"];
   }
   Neighbors neighbors = 2 [json_name = "neighbors"];
   message PeerGroups {
      message PeerGroup {
         message AfiSafis {
            message AfiSafi {
               message AddPaths {
                  message Config {
                     string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                     bool receive = 2 [json_name = "receive"];
                     bool send = 3 [json_name = "send"];
                     uint32 send_max = 4 [json_name = "send-max"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string eligible_prefix_policy = 1 [json_name = "eligible-prefix-policy"];
                     bool receive = 2 [json_name = "receive"];
                     bool send = 3 [json_name = "send"];
                     uint32 send_max = 4 [json_name = "send-max"];
                  }
                  State state = 2 [json_name = "state"];
               }
               AddPaths add_paths = 1 [json_name = "add-paths"];
               string afi_safi_name = 2 [json_name = "afi-safi-name"];
               message ApplyPolicy {
                  message Config {
                     enum DefaultExportPolicy {
                        DefaultExportPolicy_ACCEPT_ROUTE = 0;
                        DefaultExportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
                     enum DefaultImportPolicy {
                        DefaultImportPolicy_ACCEPT_ROUTE = 0;
                        DefaultImportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                     repeated string export_policy = 3 [json_name = "export-policy"];
                     repeated string import_policy = 4 [json_name = "import-policy"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum DefaultExportPolicy {
                        DefaultExportPolicy_ACCEPT_ROUTE = 0;
                        DefaultExportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
                     enum DefaultImportPolicy {
                        DefaultImportPolicy_ACCEPT_ROUTE = 0;
                        DefaultImportPolicy_REJECT_ROUTE = 1;
                     };
                     DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                     repeated string export_policy = 3 [json_name = "export-policy"];
                     repeated string import_policy = 4 [json_name = "import-policy"];
                  }
                  State state = 2 [json_name = "state"];
               }
               ApplyPolicy apply_policy = 3 [json_name = "apply-policy"];
               message Config {
                  string afi_safi_name = 1 [json_name = "afi-safi-name"];
                  bool enabled = 2 [json_name = "enabled"];
               }
               Config config = 4 [json_name = "config"];
               message GracefulRestart {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  State state = 2 [json_name = "state"];
               }
               GracefulRestart graceful_restart = 5 [json_name = "graceful-restart"];
               message Ipv4LabeledUnicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               Ipv4LabeledUnicast ipv4_labeled_unicast = 6 [json_name = "ipv4-labeled-unicast"];
               message Ipv4Unicast {
                  message Config {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  Config config = 1 [json_name = "config"];
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
                  message State {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  State state = 3 [json_name = "state"];
               }
               Ipv4Unicast ipv4_unicast = 7 [json_name = "ipv4-unicast"];
               message Ipv6LabeledUnicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               Ipv6LabeledUnicast ipv6_labeled_unicast = 8 [json_name = "ipv6-labeled-unicast"];
               message Ipv6Unicast {
                  message Config {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  Config config = 1 [json_name = "config"];
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 2 [json_name = "prefix-limit"];
                  message State {
                     bool send_default_route = 1 [json_name = "send-default-route"];
                  }
                  State state = 3 [json_name = "state"];
               }
               Ipv6Unicast ipv6_unicast = 9 [json_name = "ipv6-unicast"];
               message L2VpnEvpn {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L2VpnEvpn l2vpn_evpn = 10 [json_name = "l2vpn-evpn"];
               message L2VpnVpls {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L2VpnVpls l2vpn_vpls = 11 [json_name = "l2vpn-vpls"];
               message L3VpnIpv4Multicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv4Multicast l3vpn_ipv4_multicast = 12 [json_name = "l3vpn-ipv4-multicast"];
               message L3VpnIpv4Unicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv4Unicast l3vpn_ipv4_unicast = 13 [json_name = "l3vpn-ipv4-unicast"];
               message L3VpnIpv6Multicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv6Multicast l3vpn_ipv6_multicast = 14 [json_name = "l3vpn-ipv6-multicast"];
               message L3VpnIpv6Unicast {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               L3VpnIpv6Unicast l3vpn_ipv6_unicast = 15 [json_name = "l3vpn-ipv6-unicast"];
               message SrtePolicyIpv4 {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               SrtePolicyIpv4 srte_policy_ipv4 = 16 [json_name = "srte-policy-ipv4"];
               message SrtePolicyIpv6 {
                  message PrefixLimit {
                     message Config {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                        bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                        Decimal64 restart_timer = 3 [json_name = "restart-timer"];
                        uint32 shutdown_threshold_pct = 4;
                        uint32 warning_threshold_pct = 5 [json_name = "warning-threshold-pct"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
               }
               SrtePolicyIpv6 srte_policy_ipv6 = 17 [json_name = "srte-policy-ipv6"];
               message State {
                  string afi_safi_name = 1 [json_name = "afi-safi-name"];
                  bool enabled = 2 [json_name = "enabled"];
               }
               State state = 18 [json_name = "state"];
               message UseMultiplePaths {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message Ebgp {
                     message Config {
                        bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                        uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                        uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ebgp ebgp = 2 [json_name = "ebgp"];
                  message Ibgp {
                     message Config {
                        uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ibgp ibgp = 3 [json_name = "ibgp"];
                  message State {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  State state = 4 [json_name = "state"];
               }
               UseMultiplePaths use_multiple_paths = 19 [json_name = "use-multiple-paths"];
            }
            repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
         }
         AfiSafis afi_safis = 1 [json_name = "afi-safis"];
         message ApplyPolicy {
            message Config {
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               repeated string import_policy = 4 [json_name = "import-policy"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 1 [json_name = "default-export-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               repeated string import_policy = 4 [json_name = "import-policy"];
            }
            State state = 2 [json_name = "state"];
         }
         ApplyPolicy apply_policy = 2 [json_name = "apply-policy"];
         message AsPathOptions {
            message Config {
               uint32 allow_own_as = 1 [json_name = "allow-own-as"];
               bool disable_peer_as_filter = 2 [json_name = "disable-peer-as-filter"];
               bool replace_peer_as = 3 [json_name = "replace-peer-as"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               uint32 allow_own_as = 1 [json_name = "allow-own-as"];
               bool disable_peer_as_filter = 2 [json_name = "disable-peer-as-filter"];
               bool replace_peer_as = 3 [json_name = "replace-peer-as"];
            }
            State state = 2 [json_name = "state"];
         }
         AsPathOptions as_path_options = 3 [json_name = "as-path-options"];
         message Config {
            string auth_password = 1 [json_name = "auth-password"];
            string description = 2 [json_name = "description"];
            uint32 local_as = 3 [json_name = "local-as"];
            uint32 peer_as = 4 [json_name = "peer-as"];
            string peer_group_name = 5 [json_name = "peer-group-name"];
            enum PeerType {
               PeerType_EXTERNAL = 0;
               PeerType_INTERNAL = 1;
            };
            PeerType peer_type = 6 [json_name = "peer-type"];
            string remove_private_as = 7 [json_name = "remove-private-as"];
            bool route_flap_damping = 8 [json_name = "route-flap-damping"];
            enum SendCommunity {
               SendCommunity_BOTH = 0;
               SendCommunity_EXTENDED = 1;
               SendCommunity_NONE = 2;
               SendCommunity_STANDARD = 3;
            };
            SendCommunity send_community = 9 [json_name = "send-community"];
         }
         Config config = 4 [json_name = "config"];
         message EbgpMultihop {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
               uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
               uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
            }
            State state = 2 [json_name = "state"];
         }
         EbgpMultihop ebgp_multihop = 5 [json_name = "ebgp-multihop"];
         message ErrorHandling {
            message Config {
               bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
            }
            State state = 2 [json_name = "state"];
         }
         ErrorHandling error_handling = 6 [json_name = "error-handling"];
         message GracefulRestart {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
               bool helper_only = 2 [json_name = "helper-only"];
               uint32 restart_time = 3 [json_name = "restart-time"];
               Decimal64 stale_routes_time = 4 [json_name = "stale-routes-time"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
               bool helper_only = 2 [json_name = "helper-only"];
               uint32 restart_time = 3 [json_name = "restart-time"];
               Decimal64 stale_routes_time = 4 [json_name = "stale-routes-time"];
            }
            State state = 2 [json_name = "state"];
         }
         GracefulRestart graceful_restart = 7 [json_name = "graceful-restart"];
         message LoggingOptions {
            message Config {
               bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
            }
            State state = 2 [json_name = "state"];
         }
         LoggingOptions logging_options = 8 [json_name = "logging-options"];
         string peer_group_name = 9 [json_name = "peer-group-name"];
         message RouteReflector {
            message Config {
               bool route_reflector_client = 1 [json_name = "route-reflector-client"];
               string route_reflector_cluster_id = 2 [json_name = "route-reflector-cluster-id"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               bool route_reflector_client = 1 [json_name = "route-reflector-client"];
               string route_reflector_cluster_id = 2 [json_name = "route-reflector-cluster-id"];
            }
            State state = 2 [json_name = "state"];
         }
         RouteReflector route_reflector = 10 [json_name = "route-reflector"];
         message State {
            string auth_password = 1 [json_name = "auth-password"];
            string description = 2 [json_name = "description"];
            uint32 local_as = 3 [json_name = "local-as"];
            uint32 peer_as = 4 [json_name = "peer-as"];
            string peer_group_name = 5 [json_name = "peer-group-name"];
            enum PeerType {
               PeerType_EXTERNAL = 0;
               PeerType_INTERNAL = 1;
            };
            PeerType peer_type = 6 [json_name = "peer-type"];
            string remove_private_as = 7 [json_name = "remove-private-as"];
            bool route_flap_damping = 8 [json_name = "route-flap-damping"];
            enum SendCommunity {
               SendCommunity_BOTH = 0;
               SendCommunity_EXTENDED = 1;
               SendCommunity_NONE = 2;
               SendCommunity_STANDARD = 3;
            };
            SendCommunity send_community = 9 [json_name = "send-community"];
            uint32 total_paths = 10 [json_name = "total-paths"];
            uint32 total_prefixes = 11 [json_name = "total-prefixes"];
         }
         State state = 11 [json_name = "state"];
         message Timers {
            message Config {
               Decimal64 connect_retry = 1 [json_name = "connect-retry"];
               Decimal64 hold_time = 2 [json_name = "hold-time"];
               Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
               Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               Decimal64 connect_retry = 1 [json_name = "connect-retry"];
               Decimal64 hold_time = 2 [json_name = "hold-time"];
               Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
               Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
            }
            State state = 2 [json_name = "state"];
         }
         Timers timers = 12 [json_name = "timers"];
         message Transport {
            message Config {
               string local_address = 1 [json_name = "local-address"];
               bool mtu_discovery = 2 [json_name = "mtu-discovery"];
               bool passive_mode = 3 [json_name = "passive-mode"];
               uint32 tcp_mss = 4 [json_name = "tcp-mss"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string local_address = 1 [json_name = "local-address"];
               bool mtu_discovery = 2 [json_name = "mtu-discovery"];
               bool passive_mode = 3 [json_name = "passive-mode"];
               uint32 tcp_mss = 4 [json_name = "tcp-mss"];
            }
            State state = 2 [json_name = "state"];
         }
         Transport transport = 13 [json_name = "transport"];
         message UseMultiplePaths {
            message Config {
               bool enabled = 1 [json_name = "enabled"];
            }
            Config config = 1 [json_name = "config"];
            message Ebgp {
               message Config {
                  bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                  uint32 maximum_paths = 2 [json_name = "maximum-paths"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                  uint32 maximum_paths = 2 [json_name = "maximum-paths"];
               }
               State state = 2 [json_name = "state"];
            }
            Ebgp ebgp = 2 [json_name = "ebgp"];
            message Ibgp {
               message Config {
                  uint32 maximum_paths = 1 [json_name = "maximum-paths"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  uint32 maximum_paths = 1 [json_name = "maximum-paths"];
               }
               State state = 2 [json_name = "state"];
            }
            Ibgp ibgp = 3 [json_name = "ibgp"];
            message State {
               bool enabled = 1 [json_name = "enabled"];
            }
            State state = 4 [json_name = "state"];
         }
         UseMultiplePaths use_multiple_paths = 14 [json_name = "use-multiple-paths"];
      }
      repeated PeerGroup peer_group = 1 [json_name = "peer-group"];
   }
   PeerGroups peer_groups = 3 [json_name = "peer-groups"];
   message Rib {
      message AttrSets {
         message AttrSet {
            uint64 index = 1 [json_name = "index"];
            message State {
               uint64 index = 1 [json_name = "index"];
               enum Origin {
                  Origin_IGP = 0;
                  Origin_EGP = 1;
                  Origin_INCOMPLETE = 2;
               };
               Origin origin = 2 [json_name = "origin"];
               bool atomic_aggregate = 3 [json_name = "atomic-aggregate"];
               string next_hop = 4 [json_name = "next-hop"];
               uint32 med = 5 [json_name = "med"];
               uint32 local_pref = 6 [json_name = "local-pref"];
               string originator_id = 7 [json_name = "originator-id"];
               repeated string cluster_list = 8 [json_name = "cluster-list"];
               uint64 aigp = 9 [json_name = "aigp"];
            }
            State state = 2 [json_name = "state"];
            message Aggregator {
               message State {
                  uint32 as = 1 [json_name = "as"];
                  uint32 as4 = 2 [json_name = "as4"];
                  string address = 3 [json_name = "address"];
               }
               State state = 1 [json_name = "state"];
            }
            Aggregator aggregator = 3 [json_name = "aggregator"];
            message AsPath {
               message AsSegment {
                  message State {
                     enum Type {
                        Type_AS_SEQ = 0;
                        Type_AS_SET = 1;
                        Type_AS_CONFED_SEQUENCE = 2;
                        Type_AS_CONFED_SET = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     repeated uint32 member = 2 [json_name = "member"];
                  }
                  State state = 1 [json_name = "state"];
               }
               repeated AsSegment as_segment = 1 [json_name = "as-segment"];
            }
            AsPath as_path = 4 [json_name = "as-path"];
            message As4Path {
               message As4Segment {
                  message State {
                     enum Type {
                        Type_AS_SEQ = 0;
                        Type_AS_SET = 1;
                        Type_AS_CONFED_SEQUENCE = 2;
                        Type_AS_CONFED_SET = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     repeated uint32 member = 2 [json_name = "member"];
                  }
                  State state = 1 [json_name = "state"];
               }
               repeated As4Segment as4_segment = 1 [json_name = "as4-segment"];
            }
            As4Path as4_path = 5 [json_name = "as4-path"];
            message TunnelEncapsulation {
               message Tunnels {
                  message Tunnel {
                     string type = 1 [json_name = "type"];
                     message State {
                        string type = 1 [json_name = "type"];
                     }
                     State state = 2 [json_name = "state"];
                     message Subtlvs {
                        message Subtlv {
                           string type = 1 [json_name = "type"];
                           message State {
                              string type = 1 [json_name = "type"];
                              repeated uint32 colors = 2 [json_name = "colors"];
                              uint32 preference = 3 [json_name = "preference"];
                              string binding_sid = 4 [json_name = "binding-sid"];
                           }
                           State state = 2 [json_name = "state"];
                           message RemoteEndpoints {
                              message RemoteEndpoint {
                                 string endpoint = 1 [json_name = "endpoint"];
                                 message State {
                                    uint32 as = 1 [json_name = "as"];
                                    string endpoint = 2 [json_name = "endpoint"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              repeated RemoteEndpoint remote_endpoint = 1 [json_name = "remote-endpoint"];
                           }
                           RemoteEndpoints remote_endpoints = 3 [json_name = "remote-endpoints"];
                           message SegmentLists {
                              message SegmentList {
                                 uint64 instance_id = 1 [json_name = "instance-id"];
                                 message State {
                                    uint64 instance_id = 1 [json_name = "instance-id"];
                                    uint32 weight = 2 [json_name = "weight"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message Segments {
                                    message Segment {
                                       uint64 index = 1 [json_name = "index"];
                                       message State {
                                          uint64 index = 1 [json_name = "index"];
                                          enum Type {
                                             INVALID_ENUM_VALUE_Type = 0;
                                             Type_MPLS_SID = 1;
                                             Type_IPV6_SID = 2;
                                             Type_IPV4_NODE_ADDRESS = 3;
                                             Type_IPV6_NODE_ADDRESS = 4;
                                             Type_IPV4_LOCAL_INTF_ID = 5;
                                             Type_IPV4_LOCAL_REMOTE_ADDR = 6;
                                             Type_IPV6_LOCAL_INTF_ID = 7;
                                             Type_IPV6_LOCAL_REMOTE_ADDR = 8;
                                          };
                                          Type type = 2 [json_name = "type"];
                                          string sid = 3 [json_name = "sid"];
                                          uint32 mpls_tc = 4 [json_name = "mpls-tc"];
                                          bool mpls_bos = 5 [json_name = "mpls-bos"];
                                          uint32 mpls_ttl = 6 [json_name = "mpls-ttl"];
                                          string remote_ipv4_address = 7 [json_name = "remote-ipv4-address"];
                                          string local_ipv4_address = 8 [json_name = "local-ipv4-address"];
                                          string remote_ipv6_address = 9 [json_name = "remote-ipv6-address"];
                                          string local_ipv6_address = 10 [json_name = "local-ipv6-address"];
                                          uint32 local_interface_id = 11 [json_name = "local-interface-id"];
                                       }
                                       State state = 2 [json_name = "state"];
                                    }
                                    repeated Segment segment = 1 [json_name = "segment"];
                                 }
                                 Segments segments = 3 [json_name = "segments"];
                              }
                              repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                           }
                           SegmentLists segment_lists = 4 [json_name = "segment-lists"];
                        }
                        repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                     }
                     Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                  }
                  repeated Tunnel tunnel = 1 [json_name = "tunnel"];
               }
               Tunnels tunnels = 1 [json_name = "tunnels"];
            }
            TunnelEncapsulation tunnel_encapsulation = 6 [json_name = "tunnel-encapsulation"];
         }
         repeated AttrSet attr_set = 1 [json_name = "attr-set"];
      }
      AttrSets attr_sets = 1 [json_name = "attr-sets"];
      message Communities {
         message Community {
            uint64 index = 1 [json_name = "index"];
            message State {
               uint64 index = 1 [json_name = "index"];
               repeated string community6 = 2 [json_name = "community"];
            }
            State state = 2 [json_name = "state"];
         }
         repeated Community community = 1 [json_name = "community"];
      }
      Communities communities = 2 [json_name = "communities"];
      message ExtCommunities {
         message ExtCommunity {
            uint64 index = 1 [json_name = "index"];
            message State {
               uint64 index = 1 [json_name = "index"];
               repeated string ext_community = 2 [json_name = "ext-community"];
            }
            State state = 2 [json_name = "state"];
         }
         repeated ExtCommunity ext_community = 1 [json_name = "ext-community"];
      }
      ExtCommunities ext_communities = 3 [json_name = "ext-communities"];
      message AfiSafis {
         message AfiSafi {
            string afi_safi_name = 1 [json_name = "afi-safi-name"];
            message State {
               string afi_safi_name = 1 [json_name = "afi-safi-name"];
            }
            State state = 2 [json_name = "state"];
            message Ipv4Unicast {
               message LocRib {
                  message State {
                  }
                  State state = 1 [json_name = "state"];
                  message Routes {
                     message Route {
                        string prefix = 1 [json_name = "prefix"];
                        string origin = 2 [json_name = "origin"];
                        uint32 path_id = 3 [json_name = "path-id"];
                        message State {
                           string prefix = 1 [json_name = "prefix"];
                           string origin = 2 [json_name = "origin"];
                           uint32 path_id = 3 [json_name = "path-id"];
                           uint64 attr_index = 4 [json_name = "attr-index"];
                           uint64 community_index = 5 [json_name = "community-index"];
                           uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                           uint64 last_modified = 7 [json_name = "last-modified"];
                           bool valid_route = 8 [json_name = "valid-route"];
                           string invalid_reason = 9 [json_name = "invalid-reason"];
                        }
                        State state = 4 [json_name = "state"];
                        message UnknownAttributes {
                           message UnknownAttribute {
                              uint32 attr_type = 1 [json_name = "attr-type"];
                              message State {
                                 bool optional = 1 [json_name = "optional"];
                                 bool transitive = 2 [json_name = "transitive"];
                                 bool partial = 3 [json_name = "partial"];
                                 bool extended = 4 [json_name = "extended"];
                                 uint32 attr_type = 5 [json_name = "attr-type"];
                                 uint32 attr_len = 6 [json_name = "attr-len"];
                                 bytes attr_value = 7 [json_name = "attr-value"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                        }
                        UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 2 [json_name = "routes"];
               }
               LocRib loc_rib = 1 [json_name = "loc-rib"];
               message Neighbors {
                  message Neighbor {
                     string neighbor_address = 1 [json_name = "neighbor-address"];
                     message State {
                        string neighbor_address = 1 [json_name = "neighbor-address"];
                     }
                     State state = 2 [json_name = "state"];
                     message AdjRibInPre {
                        message State {
                        }
                        State state = 1 [json_name = "state"];
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 2 [json_name = "routes"];
                     }
                     AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                     message AdjRibInPost {
                        message State {
                        }
                        State state = 1 [json_name = "state"];
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                                 bool best_path = 9 [json_name = "best-path"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 2 [json_name = "routes"];
                     }
                     AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                     message AdjRibOutPre {
                        message State {
                        }
                        State state = 1 [json_name = "state"];
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 2 [json_name = "routes"];
                     }
                     AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                     message AdjRibOutPost {
                        message State {
                        }
                        State state = 1 [json_name = "state"];
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 2 [json_name = "routes"];
                     }
                     AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
            }
            Ipv4Unicast ipv4_unicast = 3 [json_name = "ipv4-unicast"];
            message Ipv6Unicast {
               message LocRib {
                  message State {
                  }
                  State state = 1 [json_name = "state"];
                  message Routes {
                     message Route {
                        string prefix = 1 [json_name = "prefix"];
                        string origin = 2 [json_name = "origin"];
                        uint32 path_id = 3 [json_name = "path-id"];
                        message State {
                           string prefix = 1 [json_name = "prefix"];
                           string origin = 2 [json_name = "origin"];
                           uint32 path_id = 3 [json_name = "path-id"];
                           uint64 attr_index = 4 [json_name = "attr-index"];
                           uint64 community_index = 5 [json_name = "community-index"];
                           uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                           uint64 last_modified = 7 [json_name = "last-modified"];
                           bool valid_route = 8 [json_name = "valid-route"];
                           string invalid_reason = 9 [json_name = "invalid-reason"];
                        }
                        State state = 4 [json_name = "state"];
                        message UnknownAttributes {
                           message UnknownAttribute {
                              uint32 attr_type = 1 [json_name = "attr-type"];
                              message State {
                                 bool optional = 1 [json_name = "optional"];
                                 bool transitive = 2 [json_name = "transitive"];
                                 bool partial = 3 [json_name = "partial"];
                                 bool extended = 4 [json_name = "extended"];
                                 uint32 attr_type = 5 [json_name = "attr-type"];
                                 uint32 attr_len = 6 [json_name = "attr-len"];
                                 bytes attr_value = 7 [json_name = "attr-value"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                        }
                        UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 2 [json_name = "routes"];
               }
               LocRib loc_rib = 1 [json_name = "loc-rib"];
               message Neighbors {
                  message Neighbor {
                     string neighbor_address = 1 [json_name = "neighbor-address"];
                     message State {
                        string neighbor_address = 1 [json_name = "neighbor-address"];
                     }
                     State state = 2 [json_name = "state"];
                     message AdjRibInPre {
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                     message AdjRibInPost {
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                                 bool best_path = 9 [json_name = "best-path"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                     message AdjRibOutPre {
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                     message AdjRibOutPost {
                        message Routes {
                           message Route {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 path_id = 2 [json_name = "path-id"];
                              message State {
                                 string prefix = 1 [json_name = "prefix"];
                                 uint32 path_id = 2 [json_name = "path-id"];
                                 uint64 attr_index = 3 [json_name = "attr-index"];
                                 uint64 community_index = 4 [json_name = "community-index"];
                                 uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                 uint64 last_modified = 6 [json_name = "last-modified"];
                                 bool valid_route = 7 [json_name = "valid-route"];
                                 string invalid_reason = 8 [json_name = "invalid-reason"];
                              }
                              State state = 3 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
            }
            Ipv6Unicast ipv6_unicast = 4 [json_name = "ipv6-unicast"];
            message Ipv4SrtePolicy {
               message LocRib {
                  message Routes {
                     message Route {
                        uint32 path_id = 1 [json_name = "path-id"];
                        string endpoint = 2 [json_name = "endpoint"];
                        uint32 color = 3 [json_name = "color"];
                        message State {
                           uint32 path_id = 1 [json_name = "path-id"];
                           string endpoint = 2 [json_name = "endpoint"];
                           uint32 color = 3 [json_name = "color"];
                           uint64 attr_index = 4 [json_name = "attr-index"];
                           uint64 community_index = 5 [json_name = "community-index"];
                           uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                           uint64 last_modified = 7 [json_name = "last-modified"];
                           bool valid_route = 8 [json_name = "valid-route"];
                           string invalid_reason = 9 [json_name = "invalid-reason"];
                        }
                        State state = 4 [json_name = "state"];
                        message UnknownAttributes {
                           message UnknownAttribute {
                              uint32 attr_type = 1 [json_name = "attr-type"];
                              message State {
                                 bool optional = 1 [json_name = "optional"];
                                 bool transitive = 2 [json_name = "transitive"];
                                 bool partial = 3 [json_name = "partial"];
                                 bool extended = 4 [json_name = "extended"];
                                 uint32 attr_type = 5 [json_name = "attr-type"];
                                 uint32 attr_len = 6 [json_name = "attr-len"];
                                 bytes attr_value = 7 [json_name = "attr-value"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                        }
                        UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 1 [json_name = "routes"];
               }
               LocRib loc_rib = 1 [json_name = "loc-rib"];
               message Neighbors {
                  message Neighbor {
                     string neighbor_address = 1 [json_name = "neighbor-address"];
                     message State {
                        string neighbor_address = 1 [json_name = "neighbor-address"];
                     }
                     State state = 2 [json_name = "state"];
                     message AdjRibInPre {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                     message AdjRibInPost {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                                 bool best_path = 10 [json_name = "best-path"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                     message AdjRibOutPre {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                     message AdjRibOutPost {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
            }
            Ipv4SrtePolicy ipv4_srte_policy = 5 [json_name = "ipv4-srte-policy"];
            message Ipv6SrtePolicy {
               message LocRib {
                  message Routes {
                     message Route {
                        uint32 path_id = 1 [json_name = "path-id"];
                        string endpoint = 2 [json_name = "endpoint"];
                        uint32 color = 3 [json_name = "color"];
                        message State {
                           uint32 path_id = 1 [json_name = "path-id"];
                           string endpoint = 2 [json_name = "endpoint"];
                           uint32 color = 3 [json_name = "color"];
                           uint64 attr_index = 4 [json_name = "attr-index"];
                           uint64 community_index = 5 [json_name = "community-index"];
                           uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                           uint64 last_modified = 7 [json_name = "last-modified"];
                           bool valid_route = 8 [json_name = "valid-route"];
                           string invalid_reason = 9 [json_name = "invalid-reason"];
                        }
                        State state = 4 [json_name = "state"];
                        message UnknownAttributes {
                           message UnknownAttribute {
                              uint32 attr_type = 1 [json_name = "attr-type"];
                              message State {
                                 bool optional = 1 [json_name = "optional"];
                                 bool transitive = 2 [json_name = "transitive"];
                                 bool partial = 3 [json_name = "partial"];
                                 bool extended = 4 [json_name = "extended"];
                                 uint32 attr_type = 5 [json_name = "attr-type"];
                                 uint32 attr_len = 6 [json_name = "attr-len"];
                                 bytes attr_value = 7 [json_name = "attr-value"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                        }
                        UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 1 [json_name = "routes"];
               }
               LocRib loc_rib = 1 [json_name = "loc-rib"];
               message Neighbors {
                  message Neighbor {
                     string neighbor_address = 1 [json_name = "neighbor-address"];
                     message State {
                        string neighbor_address = 1 [json_name = "neighbor-address"];
                     }
                     State state = 2 [json_name = "state"];
                     message AdjRibInPre {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                     message AdjRibInPost {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                                 bool best_path = 10 [json_name = "best-path"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                     message AdjRibOutPre {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                     message AdjRibOutPost {
                        message Routes {
                           message Route {
                              uint32 path_id = 1 [json_name = "path-id"];
                              string endpoint = 2 [json_name = "endpoint"];
                              uint32 color = 3 [json_name = "color"];
                              message State {
                                 uint32 path_id = 1 [json_name = "path-id"];
                                 string endpoint = 2 [json_name = "endpoint"];
                                 uint32 color = 3 [json_name = "color"];
                                 uint64 attr_index = 4 [json_name = "attr-index"];
                                 uint64 community_index = 5 [json_name = "community-index"];
                                 uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                 uint64 last_modified = 7 [json_name = "last-modified"];
                                 bool valid_route = 8 [json_name = "valid-route"];
                                 string invalid_reason = 9 [json_name = "invalid-reason"];
                              }
                              State state = 4 [json_name = "state"];
                              message UnknownAttributes {
                                 message UnknownAttribute {
                                    uint32 attr_type = 1 [json_name = "attr-type"];
                                    message State {
                                       bool optional = 1 [json_name = "optional"];
                                       bool transitive = 2 [json_name = "transitive"];
                                       bool partial = 3 [json_name = "partial"];
                                       bool extended = 4 [json_name = "extended"];
                                       uint32 attr_type = 5 [json_name = "attr-type"];
                                       uint32 attr_len = 6 [json_name = "attr-len"];
                                       bytes attr_value = 7 [json_name = "attr-value"];
                                    }
                                    State state = 2 [json_name = "state"];
                                 }
                                 repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                              }
                              UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                           }
                           repeated Route route = 1 [json_name = "route"];
                        }
                        Routes routes = 1 [json_name = "routes"];
                     }
                     AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
            }
            Ipv6SrtePolicy ipv6_srte_policy = 6 [json_name = "ipv6-srte-policy"];
         }
         repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
      }
      AfiSafis afi_safis = 4 [json_name = "afi-safis"];
   }
   Rib rib = 4 [json_name = "rib"];
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


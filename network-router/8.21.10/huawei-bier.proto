syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-11-08 11:06:26
// ProtoYang-version 1
// module huawei-bier
// revision 2021-07-29
// revision 2020-12-16
// revision 2020-02-21
// revision 2019-09-06
// namespace urn:huawei:yang:huawei-bier

package huawei_bier;

message Bier {
   message SubDomains {
      message SubDomain {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         uint32 sub_domain_id = 2 [json_name = "sub-domain-id"];
         string bfr_prefix_interface = 3 [json_name = "bfr-prefix-interface"];
         string ipv6_specified_address = 4 [json_name = "ipv6-specified-address"];
         enum UnderlayProtocol {
            INVALID_ENUM_VALUE_UnderlayProtocol = 0;
            UnderlayProtocol_OSPF = 1;
            UnderlayProtocol_ISIS = 2;
            UnderlayProtocol_STATICX_BIFT = 3;
         };
         UnderlayProtocol underlay_protocol = 5 [json_name = "underlay-protocol"];
         uint32 bfr_id = 6 [json_name = "bfr-id"];
         uint32 load_balance_num = 7 [json_name = "load-balance-num"];
         uint32 mt_id = 8 [json_name = "mt-id"];
         enum IgpAlgorithm {
            IgpAlgorithm_SPF = 0;
            IgpAlgorithm_SSPF = 1;
         };
         IgpAlgorithm igp_algorithm = 9 [json_name = "igp-algorithm"];
         enum BierAlgorithm {
            BierAlgorithm_NOX_SPECIFIC = 0;
         };
         BierAlgorithm bier_algorithm = 10 [json_name = "bier-algorithm"];
         message Encapsulations {
            message Encapsulation {
               enum Bsl {
                  INVALID_ENUM_VALUE_Bsl = 0;
                  Bsl_X_64X_BIT = 1;
                  Bsl_X_128X_BIT = 2;
                  Bsl_X_256X_BIT = 3;
               };
               Bsl bsl = 1 [json_name = "bsl"];
               enum EncapsulationType {
                  INVALID_ENUM_VALUE_EncapsulationType = 0;
                  EncapsulationType_MPLS = 1;
                  EncapsulationType_IPV6 = 2;
               };
               EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
               uint32 max_si = 3 [json_name = "max-si"];
               uint32 bift_id = 4 [json_name = "bift-id"];
            }
            repeated Encapsulation encapsulation = 1 [json_name = "encapsulation"];
         }
         Encapsulations encapsulations = 11 [json_name = "encapsulations"];
         message LocalInfos {
            uint32 igp_process_id = 1 [json_name = "igp-process-id"];
            uint32 igp_sub_process_id = 2 [json_name = "igp-sub-process-id"];
            string bfr_prefix = 3 [json_name = "bfr-prefix"];
            uint32 bfr_prefix_mask_len = 4 [json_name = "bfr-prefix-mask-len"];
            string end_bier_sid = 5 [json_name = "end-bier-sid"];
         }
         LocalInfos local_infos = 12 [json_name = "local-infos"];
         message Routings {
            message Routing {
               enum Bsl {
                  INVALID_ENUM_VALUE_Bsl = 0;
                  Bsl_X_64X_BIT = 1;
                  Bsl_X_128X_BIT = 2;
                  Bsl_X_256X_BIT = 3;
               };
               Bsl bsl = 1 [json_name = "bsl"];
               string destination_prefix = 2 [json_name = "destination-prefix"];
               enum UnderlayProtocol {
                  INVALID_ENUM_VALUE_UnderlayProtocol = 0;
                  UnderlayProtocol_OSPF = 1;
                  UnderlayProtocol_ISIS = 2;
                  UnderlayProtocol_STATICX_BIFT = 3;
               };
               UnderlayProtocol underlay_protocol = 3 [json_name = "underlay-protocol"];
               uint32 bfr_id = 4 [json_name = "bfr-id"];
               uint32 up_time = 5 [json_name = "up-time"];
               message Nexthops {
                  message Nexthop {
                     string next_hop_addr = 1 [json_name = "next-hop-addr"];
                     string next_hop_outbound_if = 2 [json_name = "next-hop-outbound-if"];
                     string bfr_neighbor = 3 [json_name = "bfr-neighbor"];
                     enum UnderlayProtocol {
                        INVALID_ENUM_VALUE_UnderlayProtocol = 0;
                        UnderlayProtocol_OSPF = 1;
                        UnderlayProtocol_ISIS = 2;
                        UnderlayProtocol_STATICX_BIFT = 3;
                     };
                     UnderlayProtocol underlay_protocol = 4 [json_name = "underlay-protocol"];
                     uint32 up_time = 5 [json_name = "up-time"];
                     uint32 bift_id = 6 [json_name = "bift-id"];
                     bool direct_flag = 7 [json_name = "direct-flag"];
                     message IgpAttribute_OspfProtocol {
                        string router_id = 1 [json_name = "router-id"];
                     }
                     message IgpAttribute_IsisProtocol {
                        string system_id = 1 [json_name = "system-id"];
                     }
                     message IgpAttribute_LocalSystem {
                        bool is_local_system = 1 [json_name = "is-local-system"];
                     }
                     oneof IgpAttribute {
                        IgpAttribute_OspfProtocol igp_attribute_ospf_protocol = 8 [json_name = "ospf-protocol"];
                        IgpAttribute_IsisProtocol igp_attribute_isis_protocol = 9 [json_name = "isis-protocol"];
                        IgpAttribute_LocalSystem igp_attribute_local_system = 10 [json_name = "local-system"];
                     }
                  }
                  repeated Nexthop nexthop = 1 [json_name = "nexthop"];
               }
               Nexthops nexthops = 6 [json_name = "nexthops"];
               message InvalidNexthops {
                  message InvalidNexthop {
                     string next_hop_addr = 1 [json_name = "next-hop-addr"];
                     string next_hop_outbound_if = 2 [json_name = "next-hop-outbound-if"];
                     string bfr_neighbor = 3 [json_name = "bfr-neighbor"];
                     enum UnderlayProtocol {
                        INVALID_ENUM_VALUE_UnderlayProtocol = 0;
                        UnderlayProtocol_OSPF = 1;
                        UnderlayProtocol_ISIS = 2;
                        UnderlayProtocol_STATICX_BIFT = 3;
                     };
                     UnderlayProtocol underlay_protocol = 4 [json_name = "underlay-protocol"];
                     uint32 up_time = 5 [json_name = "up-time"];
                     uint32 bift_id = 6 [json_name = "bift-id"];
                     enum InvalidReason {
                        InvalidReason_NONE = 0;
                        InvalidReason_MISSINGX_NEIGHBOR = 1;
                        InvalidReason_LACKX_LABEL = 2;
                        InvalidReason_EXCEEDX_LOADX_BALANCEX_NUMBER = 3;
                        InvalidReason_INVALIDX_NEXTHOPX_TYPE = 4;
                        InvalidReason_MISSX_ENDX_BIER = 5;
                        InvalidReason_MISSX_BSL = 6;
                     };
                     InvalidReason invalid_reason = 7 [json_name = "invalid-reason"];
                     message IgpAttribute_OspfProtocol {
                        string router_id = 1 [json_name = "router-id"];
                     }
                     message IgpAttribute_IsisProtocol {
                        string system_id = 1 [json_name = "system-id"];
                     }
                     message IgpAttribute_LocalSystem {
                        bool is_local_system = 1 [json_name = "is-local-system"];
                     }
                     oneof IgpAttribute {
                        IgpAttribute_OspfProtocol igp_attribute_ospf_protocol = 8 [json_name = "ospf-protocol"];
                        IgpAttribute_IsisProtocol igp_attribute_isis_protocol = 9 [json_name = "isis-protocol"];
                        IgpAttribute_LocalSystem igp_attribute_local_system = 10 [json_name = "local-system"];
                     }
                  }
                  repeated InvalidNexthop invalid_nexthop = 1 [json_name = "invalid-nexthop"];
               }
               InvalidNexthops invalid_nexthops = 7 [json_name = "invalid-nexthops"];
               message PrefixIgpAttribute_OspfProtocol {
                  string router_id = 1 [json_name = "router-id"];
               }
               message PrefixIgpAttribute_IsisProtocol {
                  string system_id = 1 [json_name = "system-id"];
               }
               message PrefixIgpAttribute_LocalSystem {
                  bool is_local_system = 1 [json_name = "is-local-system"];
               }
               oneof PrefixIgpAttribute {
                  PrefixIgpAttribute_OspfProtocol prefix_igp_attribute_ospf_protocol = 8 [json_name = "ospf-protocol"];
                  PrefixIgpAttribute_IsisProtocol prefix_igp_attribute_isis_protocol = 9 [json_name = "isis-protocol"];
                  PrefixIgpAttribute_LocalSystem prefix_igp_attribute_local_system = 10 [json_name = "local-system"];
               }
            }
            repeated Routing routing = 1 [json_name = "routing"];
         }
         Routings routings = 13 [json_name = "routings"];
         message PipeModeTtl {
            uint32 ttl_value = 1 [json_name = "ttl-value"];
         }
         PipeModeTtl pipe_mode_ttl = 14 [json_name = "pipe-mode-ttl"];
         message StaticBifts {
            message StaticBift {
               string end_bier = 1 [json_name = "end-bier"];
               uint32 bfr_id_start = 2 [json_name = "bfr-id-start"];
               uint32 bfr_id_end = 3 [json_name = "bfr-id-end"];
            }
            repeated StaticBift static_bift = 1 [json_name = "static-bift"];
         }
         StaticBifts static_bifts = 15 [json_name = "static-bifts"];
         message EndBierAddress_Srv6Locator {
            message Srv6Locator5 {
               string locator = 1 [json_name = "locator"];
               bool auto_sid = 2 [json_name = "auto-sid"];
               string sid = 3 [json_name = "sid"];
            }
            Srv6Locator5 srv6_locator = 1 [json_name = "srv6-locator"];
         }
         oneof EndBierAddress {
            EndBierAddress_Srv6Locator end_bier_address_srv6_locator = 16 [json_name = "srv6-locator"];
         }
         message StaticRoutings {
            message StaticRouting {
               enum Bsl {
                  INVALID_ENUM_VALUE_Bsl = 0;
                  Bsl_X_64X_BIT = 1;
                  Bsl_X_128X_BIT = 2;
                  Bsl_X_256X_BIT = 3;
               };
               Bsl bsl = 1 [json_name = "bsl"];
               string dest_end_bier_sid = 2 [json_name = "dest-end-bier-sid"];
               message BfrIdRanges {
                  message BfrIdRange {
                     uint32 bfr_id_start = 1 [json_name = "bfr-id-start"];
                     uint32 bfr_id_end = 2 [json_name = "bfr-id-end"];
                  }
                  repeated BfrIdRange bfr_id_range = 1 [json_name = "bfr-id-range"];
               }
               BfrIdRanges bfr_id_ranges = 3 [json_name = "bfr-id-ranges"];
               uint32 up_time = 4 [json_name = "up-time"];
               message Nexthops {
                  message Nexthop {
                     string next_hop_addr = 1 [json_name = "next-hop-addr"];
                     string next_hop_outbound_if = 2 [json_name = "next-hop-outbound-if"];
                     uint32 bift_id = 3 [json_name = "bift-id"];
                  }
                  repeated Nexthop nexthop = 1 [json_name = "nexthop"];
               }
               Nexthops nexthops = 5 [json_name = "nexthops"];
               message InvalidNexthops {
                  message InvalidNexthop {
                     string next_hop_addr = 1 [json_name = "next-hop-addr"];
                     string next_hop_outbound_if = 2 [json_name = "next-hop-outbound-if"];
                     uint32 bift_id = 3 [json_name = "bift-id"];
                     enum InvalidReason {
                        InvalidReason_NONE = 0;
                        InvalidReason_MISSINGX_NEIGHBOR = 1;
                        InvalidReason_LACKX_LABEL = 2;
                        InvalidReason_EXCEEDX_LOADX_BALANCEX_NUMBER = 3;
                        InvalidReason_INVALIDX_NEXTHOPX_TYPE = 4;
                        InvalidReason_MISSX_ENDX_BIER = 5;
                        InvalidReason_MISSX_BSL = 6;
                     };
                     InvalidReason invalid_reason = 4 [json_name = "invalid-reason"];
                  }
                  repeated InvalidNexthop invalid_nexthop = 1 [json_name = "invalid-nexthop"];
               }
               InvalidNexthops invalid_nexthops = 6 [json_name = "invalid-nexthops"];
            }
            repeated StaticRouting static_routing = 1 [json_name = "static-routing"];
         }
         StaticRoutings static_routings = 17 [json_name = "static-routings"];
         message MultiProcesses {
            message MultiProcess {
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_OSPF = 1;
                  Protocol_ISIS = 2;
                  Protocol_STATICX_BIFT = 3;
               };
               Protocol protocol = 1 [json_name = "protocol"];
               uint32 process_id = 2 [json_name = "process-id"];
            }
            repeated MultiProcess multi_process = 1 [json_name = "multi-process"];
         }
         MultiProcesses multi_processes = 18 [json_name = "multi-processes"];
         message Forwardings {
            message Forwarding {
               enum Bsl {
                  INVALID_ENUM_VALUE_Bsl = 0;
                  Bsl_X_64X_BIT = 1;
                  Bsl_X_128X_BIT = 2;
                  Bsl_X_256X_BIT = 3;
               };
               Bsl bsl = 1 [json_name = "bsl"];
               uint32 set_id = 2 [json_name = "set-id"];
               uint32 load_balance_order = 3 [json_name = "load-balance-order"];
               uint32 in_bift_id = 4 [json_name = "in-bift-id"];
               message Nexthops {
                  message Nexthop {
                     string next_hop_addr = 1 [json_name = "next-hop-addr"];
                     string next_hop_outbound_if = 2 [json_name = "next-hop-outbound-if"];
                     string bfr_neighbor = 3 [json_name = "bfr-neighbor"];
                     uint32 bift_id = 4 [json_name = "bift-id"];
                     uint32 up_time = 5 [json_name = "up-time"];
                     string forwarding_bit_mask = 6 [json_name = "forwarding-bit-mask"];
                     message BferInfos {
                        message BferInfo {
                           uint32 bfr_id = 1 [json_name = "bfr-id"];
                           string bfr_prefix = 2 [json_name = "bfr-prefix"];
                        }
                        repeated BferInfo bfer_info = 1 [json_name = "bfer-info"];
                     }
                     BferInfos bfer_infos = 7 [json_name = "bfer-infos"];
                  }
                  repeated Nexthop nexthop = 1 [json_name = "nexthop"];
               }
               Nexthops nexthops = 5 [json_name = "nexthops"];
            }
            repeated Forwarding forwarding = 1 [json_name = "forwarding"];
         }
         Forwardings forwardings = 19 [json_name = "forwardings"];
         message LoadBalanceEnhanceFactor {
            uint32 factor_value = 1 [json_name = "factor-value"];
         }
         LoadBalanceEnhanceFactor load_balance_enhance_factor = 20 [json_name = "load-balance-enhance-factor"];
         message Statistics {
            message Statistic {
               enum Bsl {
                  INVALID_ENUM_VALUE_Bsl = 0;
                  Bsl_X_64X_BIT = 1;
                  Bsl_X_128X_BIT = 2;
                  Bsl_X_256X_BIT = 3;
               };
               Bsl bsl = 1 [json_name = "bsl"];
               uint32 si = 2 [json_name = "si"];
               uint32 flow_label = 3 [json_name = "flow-label"];
               string source_dt = 4 [json_name = "source-dt"];
               string incoming_interface = 5 [json_name = "incoming-interface"];
               uint64 packet_number = 6 [json_name = "packet-number"];
               uint64 byte_number = 7 [json_name = "byte-number"];
               uint64 packet_rate = 8 [json_name = "packet-rate"];
               uint64 byte_rate = 9 [json_name = "byte-rate"];
            }
            repeated Statistic statistic = 1 [json_name = "statistic"];
         }
         Statistics statistics = 21 [json_name = "statistics"];
      }
      repeated SubDomain sub_domain = 1 [json_name = "sub-domain"];
   }
   SubDomains sub_domains = 1 [json_name = "sub-domains"];
   message Prefixs {
      message Prefix {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         uint32 sub_domain_id = 2 [json_name = "sub-domain-id"];
         string bfr_prefix = 3 [json_name = "bfr-prefix"];
         uint32 bfr_prefix_mask_len = 4 [json_name = "bfr-prefix-mask-len"];
         enum UnderlayProtocol {
            INVALID_ENUM_VALUE_UnderlayProtocol = 0;
            UnderlayProtocol_OSPF = 1;
            UnderlayProtocol_ISIS = 2;
            UnderlayProtocol_STATICX_BIFT = 3;
         };
         UnderlayProtocol underlay_protocol = 5 [json_name = "underlay-protocol"];
         uint32 bfr_id = 6 [json_name = "bfr-id"];
         string end_bier_sid = 7 [json_name = "end-bier-sid"];
         uint32 igp_process_id = 8 [json_name = "igp-process-id"];
         uint32 mt_id = 9 [json_name = "mt-id"];
         uint32 igp_sub_process_id = 10 [json_name = "igp-sub-process-id"];
         enum PrefixIgpFlags {
            PrefixIgpFlags_LOCAL = 0;
            PrefixIgpFlags_INTRA = 1;
            PrefixIgpFlags_INVALID = 2;
            PrefixIgpFlags_DUPLICATE = 3;
            PrefixIgpFlags_BEST = 4;
         };
         repeated PrefixIgpFlags prefix_igp_flags = 11 [json_name = "prefix-igp-flags"];
         enum PrefixSdFlags {
            PrefixSdFlags_DUPLICATEX_SD = 0;
            PrefixSdFlags_INVALIDX_IGPX_CFG = 1;
            PrefixSdFlags_INVALIDX_BAR = 2;
            PrefixSdFlags_INVALIDX_IPA = 3;
            PrefixSdFlags_DUPLICATEX_BFRX_ID = 4;
            PrefixSdFlags_INVALIDX_MT = 5;
            PrefixSdFlags_SUPRESSX_BFRX_IDX_ADV = 6;
         };
         repeated PrefixSdFlags prefix_sd_flags = 12 [json_name = "prefix-sd-flags"];
         enum IgpAlgorithm {
            IgpAlgorithm_SPF = 0;
            IgpAlgorithm_SSPF = 1;
         };
         IgpAlgorithm igp_algorithm = 13 [json_name = "igp-algorithm"];
         enum BierAlgorithm {
            BierAlgorithm_NOX_SPECIFIC = 0;
         };
         BierAlgorithm bier_algorithm = 14 [json_name = "bier-algorithm"];
         message EncapsulationInfos {
            message Encapsulations {
               message Encapsulation {
                  enum Bsl {
                     INVALID_ENUM_VALUE_Bsl = 0;
                     Bsl_X_64X_BIT = 1;
                     Bsl_X_128X_BIT = 2;
                     Bsl_X_256X_BIT = 3;
                  };
                  Bsl bsl = 1 [json_name = "bsl"];
                  enum EncapsulationType {
                     INVALID_ENUM_VALUE_EncapsulationType = 0;
                     EncapsulationType_MPLS = 1;
                     EncapsulationType_IPV6 = 2;
                  };
                  EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
                  uint32 max_si = 3 [json_name = "max-si"];
                  uint32 up_time = 4 [json_name = "up-time"];
                  uint32 bift_id_base = 5 [json_name = "bift-id-base"];
               }
               repeated Encapsulation encapsulation = 1 [json_name = "encapsulation"];
            }
            Encapsulations encapsulations = 1 [json_name = "encapsulations"];
            message InvalidEncapsulations {
               message InvalidEncapsulation {
                  enum Bsl {
                     INVALID_ENUM_VALUE_Bsl = 0;
                     Bsl_X_64X_BIT = 1;
                     Bsl_X_128X_BIT = 2;
                     Bsl_X_256X_BIT = 3;
                  };
                  Bsl bsl = 1 [json_name = "bsl"];
                  enum EncapsulationType {
                     INVALID_ENUM_VALUE_EncapsulationType = 0;
                     EncapsulationType_MPLS = 1;
                     EncapsulationType_IPV6 = 2;
                  };
                  EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
                  uint32 max_si = 3 [json_name = "max-si"];
                  uint32 up_time = 4 [json_name = "up-time"];
                  uint32 bift_id_base = 5 [json_name = "bift-id-base"];
                  enum InvalidReason {
                     InvalidReason_UNKNOWNX_SD = 0;
                     InvalidReason_INVALIDX_IGPX_CFG = 1;
                     InvalidReason_DUPLICATEX_BSL = 2;
                     InvalidReason_INVALIDX_BSL = 3;
                     InvalidReason_UNSUPPORTX_BSL = 4;
                     InvalidReason_INVALIDX_LABEL = 5;
                     InvalidReason_INVALIDX_LABELX_RANGE = 6;
                     InvalidReason_OVERLAPX_LABELX_RANGE = 7;
                     InvalidReason_SDX_UNSUPPORTX_BSL = 8;
                     InvalidReason_INVALIDX_BSLX_BFRIDX_MAXSIX_ASSO = 9;
                     InvalidReason_INVALIDX_PREFIXX_MASK = 10;
                  };
                  repeated InvalidReason invalid_reason = 6 [json_name = "invalid-reason"];
               }
               repeated InvalidEncapsulation invalid_encapsulation = 1 [json_name = "invalid-encapsulation"];
            }
            InvalidEncapsulations invalid_encapsulations = 2 [json_name = "invalid-encapsulations"];
         }
         EncapsulationInfos encapsulation_infos = 15 [json_name = "encapsulation-infos"];
      }
      repeated Prefix prefix = 1 [json_name = "prefix"];
   }
   Prefixs prefixs = 2 [json_name = "prefixs"];
   message Forward {
      message ReserveInterfaceEnhancement {
         bool enable = 1 [json_name = "enable"];
      }
      ReserveInterfaceEnhancement reserve_interface_enhancement = 1 [json_name = "reserve-interface-enhancement"];
   }
   Forward forward = 3 [json_name = "forward"];
   message BierPrefixs {
      message IsisPrefixs {
         message IsisPrefix {
            enum AddressFamily {
               INVALID_ENUM_VALUE_AddressFamily = 0;
               AddressFamily_IPV4X_UNICAST = 1;
               AddressFamily_IPV6X_UNICAST = 2;
            };
            AddressFamily address_family = 1 [json_name = "address-family"];
            uint32 igp_process_id = 2 [json_name = "igp-process-id"];
            uint32 mt_id = 3 [json_name = "mt-id"];
            uint32 igp_sub_process_id = 4 [json_name = "igp-sub-process-id"];
            message IsisSystems {
               message IsisSystem {
                  string system_id = 1 [json_name = "system-id"];
                  message PrefixInfos {
                     message PrefixInfo {
                        string prefix = 1 [json_name = "prefix"];
                        uint32 prefix_mask_len = 2 [json_name = "prefix-mask-len"];
                        enum PrefixIgpFlags {
                           PrefixIgpFlags_LOCAL = 0;
                           PrefixIgpFlags_INTRA = 1;
                           PrefixIgpFlags_INVALID = 2;
                           PrefixIgpFlags_DUPLICATE = 3;
                           PrefixIgpFlags_BEST = 4;
                        };
                        repeated PrefixIgpFlags prefix_igp_flags = 3 [json_name = "prefix-igp-flags"];
                        message SubDomainInfos {
                           message SubDomainInfo {
                              uint32 sub_domain_id = 1 [json_name = "sub-domain-id"];
                              uint32 bfr_id = 2 [json_name = "bfr-id"];
                              string end_bier_sid = 3 [json_name = "end-bier-sid"];
                              enum PrefixSdFlags {
                                 PrefixSdFlags_DUPLICATEX_SD = 0;
                                 PrefixSdFlags_INVALIDX_IGPX_CFG = 1;
                                 PrefixSdFlags_INVALIDX_BAR = 2;
                                 PrefixSdFlags_INVALIDX_IPA = 3;
                                 PrefixSdFlags_DUPLICATEX_BFRX_ID = 4;
                                 PrefixSdFlags_INVALIDX_MT = 5;
                                 PrefixSdFlags_SUPRESSX_BFRX_IDX_ADV = 6;
                              };
                              repeated PrefixSdFlags prefix_sd_flags = 4 [json_name = "prefix-sd-flags"];
                              enum IgpAlgorithm {
                                 IgpAlgorithm_SPF = 0;
                                 IgpAlgorithm_SSPF = 1;
                              };
                              IgpAlgorithm igp_algorithm = 5 [json_name = "igp-algorithm"];
                              enum BierAlgorithm {
                                 BierAlgorithm_NOX_SPECIFIC = 0;
                              };
                              BierAlgorithm bier_algorithm = 6 [json_name = "bier-algorithm"];
                              message EncapsulationInfos {
                                 message Encapsulations {
                                    message Encapsulation {
                                       enum Bsl {
                                          INVALID_ENUM_VALUE_Bsl = 0;
                                          Bsl_X_64X_BIT = 1;
                                          Bsl_X_128X_BIT = 2;
                                          Bsl_X_256X_BIT = 3;
                                       };
                                       Bsl bsl = 1 [json_name = "bsl"];
                                       enum EncapsulationType {
                                          INVALID_ENUM_VALUE_EncapsulationType = 0;
                                          EncapsulationType_MPLS = 1;
                                          EncapsulationType_IPV6 = 2;
                                       };
                                       EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
                                       uint32 max_si = 3 [json_name = "max-si"];
                                       uint32 up_time = 4 [json_name = "up-time"];
                                       uint32 bift_id_base = 5 [json_name = "bift-id-base"];
                                    }
                                    repeated Encapsulation encapsulation = 1 [json_name = "encapsulation"];
                                 }
                                 Encapsulations encapsulations = 1 [json_name = "encapsulations"];
                                 message InvalidEncapsulations {
                                    message InvalidEncapsulation {
                                       enum Bsl {
                                          INVALID_ENUM_VALUE_Bsl = 0;
                                          Bsl_X_64X_BIT = 1;
                                          Bsl_X_128X_BIT = 2;
                                          Bsl_X_256X_BIT = 3;
                                       };
                                       Bsl bsl = 1 [json_name = "bsl"];
                                       enum EncapsulationType {
                                          INVALID_ENUM_VALUE_EncapsulationType = 0;
                                          EncapsulationType_MPLS = 1;
                                          EncapsulationType_IPV6 = 2;
                                       };
                                       EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
                                       uint32 max_si = 3 [json_name = "max-si"];
                                       uint32 up_time = 4 [json_name = "up-time"];
                                       uint32 bift_id_base = 5 [json_name = "bift-id-base"];
                                       enum InvalidReason {
                                          InvalidReason_UNKNOWNX_SD = 0;
                                          InvalidReason_INVALIDX_IGPX_CFG = 1;
                                          InvalidReason_DUPLICATEX_BSL = 2;
                                          InvalidReason_INVALIDX_BSL = 3;
                                          InvalidReason_UNSUPPORTX_BSL = 4;
                                          InvalidReason_INVALIDX_LABEL = 5;
                                          InvalidReason_INVALIDX_LABELX_RANGE = 6;
                                          InvalidReason_OVERLAPX_LABELX_RANGE = 7;
                                          InvalidReason_SDX_UNSUPPORTX_BSL = 8;
                                          InvalidReason_INVALIDX_BSLX_BFRIDX_MAXSIX_ASSO = 9;
                                          InvalidReason_INVALIDX_PREFIXX_MASK = 10;
                                       };
                                       repeated InvalidReason invalid_reason = 6 [json_name = "invalid-reason"];
                                    }
                                    repeated InvalidEncapsulation invalid_encapsulation = 1 [json_name = "invalid-encapsulation"];
                                 }
                                 InvalidEncapsulations invalid_encapsulations = 2 [json_name = "invalid-encapsulations"];
                              }
                              EncapsulationInfos encapsulation_infos = 7 [json_name = "encapsulation-infos"];
                           }
                           repeated SubDomainInfo sub_domain_info = 1 [json_name = "sub-domain-info"];
                        }
                        SubDomainInfos sub_domain_infos = 4 [json_name = "sub-domain-infos"];
                     }
                     repeated PrefixInfo prefix_info = 1 [json_name = "prefix-info"];
                  }
                  PrefixInfos prefix_infos = 2 [json_name = "prefix-infos"];
               }
               repeated IsisSystem isis_system = 1 [json_name = "isis-system"];
            }
            IsisSystems isis_systems = 5 [json_name = "isis-systems"];
         }
         repeated IsisPrefix isis_prefix = 1 [json_name = "isis-prefix"];
      }
      IsisPrefixs isis_prefixs = 1 [json_name = "isis-prefixs"];
   }
   BierPrefixs bier_prefixs = 4 [json_name = "bier-prefixs"];
   message EnableStatistics {
      message EnableStatistic {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
      }
      repeated EnableStatistic enable_statistic = 1 [json_name = "enable-statistic"];
   }
   EnableStatistics enable_statistics = 5 [json_name = "enable-statistics"];
}


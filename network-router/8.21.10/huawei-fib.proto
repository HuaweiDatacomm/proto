syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-fib
// revision 2021-06-27
// revision 2021-06-22
// revision 2021-04-16
// revision 2020-03-06
// revision 2019-04-01
// namespace urn:huawei:yang:huawei-fib

package huawei_fib;

message Fib {
   message UniAfs {
      message UniAf {
         enum AfType {
            AfType_IPV4UNICAST = 0;
            AfType_IPV6UNICAST = 1;
         };
         AfType afType = 1;
         message FibRoutes {
            message FibRoute {
               string bakIfName = 1;
               string bakInLabel = 2;
               string bakLspToken = 3;
               string bakNexthop = 4;
               string destination = 5;
               string ifName = 6;
               string inLabel = 7;
               string lspToken = 8;
               uint32 maskLength = 9;
               string nextHop = 10;
               string tunnelID = 11;
               uint32 vlanId = 12;
            }
            repeated FibRoute fibRoute = 1;
         }
         FibRoutes fibRoutes = 2;
         message FibStatisticss {
            message FibStatistics {
               uint32 totalNum = 1;
            }
            repeated FibStatistics fibStatistics = 1;
         }
         FibStatisticss fibStatisticss = 3;
         string position = 4;
         string vrfName = 5;
      }
      repeated UniAf uniAf = 1;
   }
   UniAfs uniAfs = 1;
   message UnicastAfs {
      message UnicastAf {
         string vrf_name = 1 [json_name = "vrf-name"];
         enum AfType {
            INVALID_ENUM_VALUE_AfType = 0;
            AfType_IPV4UNICAST = 1;
            AfType_IPV6UNICAST = 2;
         };
         AfType af_type = 2 [json_name = "af-type"];
         string position = 3 [json_name = "position"];
         message Routes {
            message Route {
               string destination = 1 [json_name = "destination"];
               uint32 mask = 2 [json_name = "mask"];
               string nexthop = 3 [json_name = "nexthop"];
               string if_name = 4 [json_name = "if-name"];
               string tunnel_id = 5 [json_name = "tunnel-id"];
               uint32 vlan_id = 6 [json_name = "vlan-id"];
               string inner_label = 7 [json_name = "inner-label"];
               string lsp_token = 8 [json_name = "lsp-token"];
               string bak_nexthop = 9 [json_name = "bak-nexthop"];
               string bak_if_name = 10 [json_name = "bak-if-name"];
               string bak_inner_lable = 11 [json_name = "bak-inner-lable"];
               string bak_lsp_token = 12 [json_name = "bak-lsp-token"];
               string bgp_nexthop = 13 [json_name = "bgp-nexthop"];
            }
            repeated Route route = 1 [json_name = "route"];
         }
         Routes routes = 4 [json_name = "routes"];
         message Statistics {
            uint32 total_num = 1 [json_name = "total-num"];
         }
         Statistics statistics = 5 [json_name = "statistics"];
      }
      repeated UnicastAf unicast_af = 1 [json_name = "unicast-af"];
   }
   UnicastAfs unicast_afs = 2 [json_name = "unicast-afs"];
   message RouteStatistics {
      message IpRouteResources {
         message IpRouteResource {
            string slot = 1 [json_name = "slot"];
            uint32 total = 2 [json_name = "total"];
            uint32 used = 3 [json_name = "used"];
         }
         repeated IpRouteResource ip_route_resource = 1 [json_name = "ip-route-resource"];
      }
      IpRouteResources ip_route_resources = 1 [json_name = "ip-route-resources"];
      message IpRouteEntryCounts {
         message IpRouteEntryCount {
            string slot = 1 [json_name = "slot"];
            string vpn_name = 2 [json_name = "vpn-name"];
            uint32 entrycount = 3 [json_name = "entrycount"];
         }
         repeated IpRouteEntryCount ip_route_entry_count = 1 [json_name = "ip-route-entry-count"];
      }
      IpRouteEntryCounts ip_route_entry_counts = 2 [json_name = "ip-route-entry-counts"];
      message Ipv6RouteResources {
         message Ipv6RouteResource {
            string slot = 1 [json_name = "slot"];
            uint32 total = 2 [json_name = "total"];
            uint32 used = 3 [json_name = "used"];
         }
         repeated Ipv6RouteResource ipv6_route_resource = 1 [json_name = "ipv6-route-resource"];
      }
      Ipv6RouteResources ipv6_route_resources = 3 [json_name = "ipv6-route-resources"];
      message Ipv6RouteEntryCounts {
         message Ipv6RouteEntryCount {
            string slot = 1 [json_name = "slot"];
            string vpn_name = 2 [json_name = "vpn-name"];
            uint32 entry_count = 3 [json_name = "entry-count"];
         }
         repeated Ipv6RouteEntryCount ipv6_route_entry_count = 1 [json_name = "ipv6-route-entry-count"];
      }
      Ipv6RouteEntryCounts ipv6_route_entry_counts = 4 [json_name = "ipv6-route-entry-counts"];
   }
   RouteStatistics route_statistics = 3 [json_name = "route-statistics"];
   message MLagRouteConvergenceEnhanced {
      bool enable = 1 [json_name = "enable"];
   }
   MLagRouteConvergenceEnhanced m_lag_route_convergence_enhanced = 4 [json_name = "m-lag-route-convergence-enhanced"];
   message Ipv4FibChecks {
      message Ipv4FibCheck {
         string slot_id = 1 [json_name = "slot-id"];
         string vpn_name = 2 [json_name = "vpn-name"];
         string ipaddr = 3 [json_name = "ipaddr"];
         enum CheckResult {
            CheckResult_OK = 0;
            CheckResult_SOFTX_NOTX_EXIST = 1;
            CheckResult_HARDX_NOTX_EXIST = 2;
            CheckResult_NHPX_DIFF = 3;
            CheckResult_OUTIFX_DIFF = 4;
            CheckResult_NOTX_SUPPORT = 5;
         };
         CheckResult check_result = 4 [json_name = "check-result"];
         uint32 nexthop_num = 5 [json_name = "nexthop-num"];
         repeated string nexthop4 = 6 [json_name = "nexthop4"];
         repeated string nexthop6 = 7 [json_name = "nexthop6"];
      }
      repeated Ipv4FibCheck ipv4_fib_check = 1 [json_name = "ipv4-fib-check"];
   }
   Ipv4FibChecks ipv4_fib_checks = 5 [json_name = "ipv4-fib-checks"];
   message Ipv6FibChecks {
      message Ipv6FibCheck {
         string slot_id = 1 [json_name = "slot-id"];
         string vpn_name = 2 [json_name = "vpn-name"];
         string ip6addr = 3 [json_name = "ip6addr"];
         enum CheckResult {
            CheckResult_OK = 0;
            CheckResult_SOFTX_NOTX_EXIST = 1;
            CheckResult_HARDX_NOTX_EXIST = 2;
            CheckResult_NHPX_DIFF = 3;
            CheckResult_OUTIFX_DIFF = 4;
            CheckResult_NOTX_SUPPORT = 5;
         };
         CheckResult check_result = 4 [json_name = "check-result"];
         uint32 nexthop_num = 5 [json_name = "nexthop-num"];
         repeated string nexthop6 = 6 [json_name = "nexthop6"];
      }
      repeated Ipv6FibCheck ipv6_fib_check = 1 [json_name = "ipv6-fib-check"];
   }
   Ipv6FibChecks ipv6_fib_checks = 6 [json_name = "ipv6-fib-checks"];
   message ForwardTableResources {
      message ForwardTableResource {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 fib4_total = 2 [json_name = "fib4-total"];
         uint32 fib4_used = 3 [json_name = "fib4-used"];
         uint32 fib6_total = 4 [json_name = "fib6-total"];
         uint32 fib6_used = 5 [json_name = "fib6-used"];
      }
      repeated ForwardTableResource forward_table_resource = 1 [json_name = "forward-table-resource"];
   }
   ForwardTableResources forward_table_resources = 7 [json_name = "forward-table-resources"];
   message SoftTableResources {
      message SoftTableResource {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 fib4_total = 2 [json_name = "fib4-total"];
         uint32 fib4_used = 3 [json_name = "fib4-used"];
         uint32 fib6_total = 4 [json_name = "fib6-total"];
         uint32 fib6_used = 5 [json_name = "fib6-used"];
      }
      repeated SoftTableResource soft_table_resource = 1 [json_name = "soft-table-resource"];
   }
   SoftTableResources soft_table_resources = 8 [json_name = "soft-table-resources"];
}


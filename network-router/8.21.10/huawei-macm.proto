syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-macm
// revision 2020-03-30
// revision 2020-01-10
// namespace urn:huawei:yang:huawei-macm

package huawei_macm;

message Macm {
   message Macmevpnbase {
      message EvpnStatisticss {
         message EvpnStatistics {
            uint32 activeNum = 1;
            uint32 addedNum = 2;
            uint32 deletedNum = 3;
            uint32 freedNum = 4;
            enum ProtocolId {
               ProtocolId_BGP = 0;
               ProtocolId_LOCAL = 1;
               ProtocolId_TOTAL = 2;
            };
            ProtocolId protocolId = 5;
            uint32 totalNum = 6;
         }
         repeated EvpnStatistics evpnStatistics = 1;
      }
      EvpnStatisticss evpnStatisticss = 1;
      message Evpns {
         message Evpn {
            string evpnName = 1;
            message EvpnRoutes {
               message EvpnRoute {
                  string age = 1;
                  enum Flags {
                     Flags_D = 0;
                     Flags_ND = 1;
                  };
                  Flags flags = 2;
                  string ifName = 3;
                  string indirectID = 4;
                  uint32 label = 5;
                  string macAddress = 6;
                  string peerIP = 7;
                  enum ProtocolId {
                     ProtocolId_BGP = 0;
                     ProtocolId_LOCAL = 1;
                     ProtocolId_TOTAL = 2;
                  };
                  ProtocolId protocolId = 8;
                  enum RouteType {
                     RouteType_DYNAMIC = 0;
                     RouteType_STATIC = 1;
                  };
                  RouteType routeType = 9;
                  enum State {
                     State_ACTIVE = 0;
                     State_INVALID = 1;
                  };
                  State state = 10;
                  string tunnelInfo = 11;
                  uint32 vlanId = 12;
               }
               repeated EvpnRoute evpnRoute = 1;
            }
            EvpnRoutes evpnRoutes = 2;
            message EvpnStatisticss {
               message EvpnStatistics {
                  uint32 activeNum = 1;
                  uint32 addedNum = 2;
                  uint32 deletedNum = 3;
                  uint32 freedNum = 4;
                  enum ProtocolId {
                     ProtocolId_BGP = 0;
                     ProtocolId_LOCAL = 1;
                     ProtocolId_TOTAL = 2;
                  };
                  ProtocolId protocolId = 5;
                  uint32 totalNum = 6;
               }
               repeated EvpnStatistics evpnStatistics = 1;
            }
            EvpnStatisticss evpnStatisticss = 3;
            uint32 lowerPercent = 4;
            uint32 macLimitNum = 5;
            bool macUnchanged = 6;
            bool simplyAlert = 7;
            uint32 upperPercent = 8;
         }
         repeated Evpn evpn = 1;
      }
      Evpns evpns = 2;
   }
   Macmevpnbase macmevpnbase = 1;
   message EvpnGlobal {
      message Statistics {
         message Statistic {
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_LOCAL = 1;
               Protocol_BGP = 2;
               Protocol_TOTAL = 3;
            };
            Protocol protocol = 1 [json_name = "protocol"];
            uint32 total = 2 [json_name = "total"];
            uint32 active = 3 [json_name = "active"];
            uint32 added = 4 [json_name = "added"];
            uint32 deleted = 5 [json_name = "deleted"];
            uint32 freed = 6 [json_name = "freed"];
         }
         repeated Statistic statistic = 1 [json_name = "statistic"];
      }
      Statistics statistics = 1 [json_name = "statistics"];
   }
   EvpnGlobal evpn_global = 2 [json_name = "evpn-global"];
   message EvpnInstances {
      message EvpnInstance {
         string name = 1 [json_name = "name"];
         message Statistics {
            message Statistic {
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_LOCAL = 1;
                  Protocol_BGP = 2;
                  Protocol_TOTAL = 3;
               };
               Protocol protocol = 1 [json_name = "protocol"];
               uint32 total = 2 [json_name = "total"];
               uint32 active = 3 [json_name = "active"];
               uint32 added = 4 [json_name = "added"];
               uint32 deleted = 5 [json_name = "deleted"];
               uint32 freed = 6 [json_name = "freed"];
            }
            repeated Statistic statistic = 1 [json_name = "statistic"];
         }
         Statistics statistics = 2 [json_name = "statistics"];
         message Routes {
            message Route {
               string mac = 1 [json_name = "mac"];
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_LOCAL = 1;
                  Protocol_BGP = 2;
                  Protocol_TOTAL = 3;
               };
               Protocol protocol = 2 [json_name = "protocol"];
               uint32 domain_id = 3 [json_name = "domain-id"];
               string peer = 4 [json_name = "peer"];
               string interface = 5 [json_name = "interface"];
               enum Flag {
                  INVALID_ENUM_VALUE_Flag = 0;
                  Flag_DOWNLOAD = 1;
                  Flag_NOX_DOWNLOAD = 2;
               };
               Flag flag = 6 [json_name = "flag"];
               uint32 label = 7 [json_name = "label"];
               string indirect_id = 8 [json_name = "indirect-id"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_ACTIVE = 1;
                  Status_INACTIVE = 2;
                  Status_INVALID = 3;
               };
               Status status = 9 [json_name = "status"];
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_DYNAMIC = 1;
                  Type_STATIC = 2;
                  Type_DYNAMICX_BLACKX_HOLE = 3;
                  Type_DYNAMICX_LEAF = 4;
                  Type_STATICX_LEAF = 5;
               };
               Type type = 10 [json_name = "type"];
               string age = 11 [json_name = "age"];
               string tunnel = 12 [json_name = "tunnel"];
               uint32 ce_vlan = 13 [json_name = "ce-vlan"];
               uint32 pe_vlan = 14 [json_name = "pe-vlan"];
               string vtep_ip = 15 [json_name = "vtep-ip"];
               uint32 vlan_tag_id = 16 [json_name = "vlan-tag-id"];
            }
            repeated Route route = 1 [json_name = "route"];
         }
         Routes routes = 3 [json_name = "routes"];
      }
      repeated EvpnInstance evpn_instance = 1 [json_name = "evpn-instance"];
   }
   EvpnInstances evpn_instances = 3 [json_name = "evpn-instances"];
}
message HwEvpnMacExceed {
   uint32 EVPNInstanceMACCount = 1;
   uint32 EVPNInstanceMaxMACValue = 2;
   string EVPNInstanceName = 3;
}
message HwEvpnMacExceedClear {
   uint32 EVPNInstanceMACCount = 1;
   uint32 EVPNInstanceMaxMACValue = 2;
   string EVPNInstanceName = 3;
}
message HwEvpnMacThresholdExceed {
   uint32 EVPNInstanceMACCount = 1;
   uint32 EVPNInstanceMaxMACValue = 2;
   string EVPNInstanceName = 3;
}
message HwEvpnMacThresholdExceedClear {
   uint32 EVPNInstanceMACCount = 1;
   uint32 EVPNInstanceMaxMACValue = 2;
   string EVPNInstanceName = 3;
}


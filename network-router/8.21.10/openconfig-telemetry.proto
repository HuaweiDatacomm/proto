syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-10 18:07:17
// ProtoYang-version 1
// module openconfig-telemetry
// revision 2017-08-24
// revision 2017-02-20
// revision 2016-04-05
// namespace http://openconfig.net/yang/telemetry

package openconfig_telemetry;

message TelemetrySystem {
   message SensorGroups {
      message SensorGroup {
         string sensor_group_id = 1 [json_name = "sensor-group-id"];
         message Config {
            string sensor_group_id = 1 [json_name = "sensor-group-id"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string sensor_group_id = 1 [json_name = "sensor-group-id"];
         }
         State state = 3 [json_name = "state"];
         message SensorPaths {
            message SensorPath {
               string path = 1 [json_name = "path"];
               message Config {
                  string path = 1 [json_name = "path"];
                  string exclude_filter = 2 [json_name = "exclude-filter"];
                  bool reset_when_start = 3 [json_name = "reset-when-start"];
                  uint32 depth = 4 [json_name = "depth"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string path = 1 [json_name = "path"];
                  string exclude_filter = 2 [json_name = "exclude-filter"];
                  bool reset_when_start = 3 [json_name = "reset-when-start"];
                  uint32 depth = 4 [json_name = "depth"];
               }
               State state = 3 [json_name = "state"];
               message Filters {
                  message Filter {
                     string name = 1 [json_name = "name"];
                     message Config {
                        string name = 1 [json_name = "name"];
                        enum ConditionRelation {
                           INVALID_ENUM_VALUE_ConditionRelation = 0;
                           ConditionRelation_AND = 1;
                           ConditionRelation_OR = 2;
                        };
                        ConditionRelation condition_relation = 2 [json_name = "condition-relation"];
                        string op_object = 3 [json_name = "op-object"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string name = 1 [json_name = "name"];
                        enum ConditionRelation {
                           INVALID_ENUM_VALUE_ConditionRelation = 0;
                           ConditionRelation_AND = 1;
                           ConditionRelation_OR = 2;
                        };
                        ConditionRelation condition_relation = 2 [json_name = "condition-relation"];
                        string op_object = 3 [json_name = "op-object"];
                     }
                     State state = 3 [json_name = "state"];
                     message Conditions {
                        message Condition {
                           string op_field = 1 [json_name = "op-field"];
                           enum OpType {
                              OpType_EQ = 0;
                              OpType_GT = 1;
                              OpType_GE = 2;
                              OpType_LT = 3;
                              OpType_LE = 4;
                           };
                           OpType op_type = 2 [json_name = "op-type"];
                           string op_value = 3 [json_name = "op-value"];
                           message Config {
                              string op_field = 1 [json_name = "op-field"];
                              enum OpType {
                                 OpType_EQ = 0;
                                 OpType_GT = 1;
                                 OpType_GE = 2;
                                 OpType_LT = 3;
                                 OpType_LE = 4;
                              };
                              OpType op_type = 2 [json_name = "op-type"];
                              string op_value = 3 [json_name = "op-value"];
                           }
                           Config config = 4 [json_name = "config"];
                           message State {
                              string op_field = 1 [json_name = "op-field"];
                              enum OpType {
                                 OpType_EQ = 0;
                                 OpType_GT = 1;
                                 OpType_GE = 2;
                                 OpType_LT = 3;
                                 OpType_LE = 4;
                              };
                              OpType op_type = 2 [json_name = "op-type"];
                              string op_value = 3 [json_name = "op-value"];
                           }
                           State state = 5 [json_name = "state"];
                        }
                        repeated Condition condition = 1 [json_name = "condition"];
                     }
                     Conditions conditions = 4 [json_name = "conditions"];
                  }
                  repeated Filter filter = 1 [json_name = "filter"];
               }
               Filters filters = 4 [json_name = "filters"];
            }
            repeated SensorPath sensor_path = 1 [json_name = "sensor-path"];
         }
         SensorPaths sensor_paths = 4 [json_name = "sensor-paths"];
         message SensorPathsSelfDefineEvent {
            message SensorPath {
               string path = 1 [json_name = "path"];
               message Config {
                  string path = 1 [json_name = "path"];
                  string description = 2 [json_name = "description"];
                  uint32 level = 3 [json_name = "level"];
                  uint32 suppress_period = 4 [json_name = "suppress-period"];
                  uint32 depth = 5 [json_name = "depth"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string path = 1 [json_name = "path"];
                  string description = 2 [json_name = "description"];
                  uint32 level = 3 [json_name = "level"];
                  uint32 suppress_period = 4 [json_name = "suppress-period"];
                  uint32 depth = 5 [json_name = "depth"];
               }
               State state = 3 [json_name = "state"];
               message Filters {
                  message Filter {
                     string name = 1 [json_name = "name"];
                     message Config {
                        string name = 1 [json_name = "name"];
                        enum ConditionRelation {
                           INVALID_ENUM_VALUE_ConditionRelation = 0;
                           ConditionRelation_AND = 1;
                           ConditionRelation_OR = 2;
                        };
                        ConditionRelation condition_relation = 2 [json_name = "condition-relation"];
                        string op_object = 3 [json_name = "op-object"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string name = 1 [json_name = "name"];
                        enum ConditionRelation {
                           INVALID_ENUM_VALUE_ConditionRelation = 0;
                           ConditionRelation_AND = 1;
                           ConditionRelation_OR = 2;
                        };
                        ConditionRelation condition_relation = 2 [json_name = "condition-relation"];
                        string op_object = 3 [json_name = "op-object"];
                     }
                     State state = 3 [json_name = "state"];
                     message Conditions {
                        message Condition {
                           string op_field = 1 [json_name = "op-field"];
                           enum OpType {
                              OpType_EQ = 0;
                              OpType_GT = 1;
                              OpType_GE = 2;
                              OpType_LT = 3;
                              OpType_LE = 4;
                           };
                           OpType op_type = 2 [json_name = "op-type"];
                           string op_value = 3 [json_name = "op-value"];
                           message Config {
                              string op_field = 1 [json_name = "op-field"];
                              enum OpType {
                                 OpType_EQ = 0;
                                 OpType_GT = 1;
                                 OpType_GE = 2;
                                 OpType_LT = 3;
                                 OpType_LE = 4;
                              };
                              OpType op_type = 2 [json_name = "op-type"];
                              string op_value = 3 [json_name = "op-value"];
                           }
                           Config config = 4 [json_name = "config"];
                           message State {
                              string op_field = 1 [json_name = "op-field"];
                              enum OpType {
                                 OpType_EQ = 0;
                                 OpType_GT = 1;
                                 OpType_GE = 2;
                                 OpType_LT = 3;
                                 OpType_LE = 4;
                              };
                              OpType op_type = 2 [json_name = "op-type"];
                              string op_value = 3 [json_name = "op-value"];
                           }
                           State state = 5 [json_name = "state"];
                        }
                        repeated Condition condition = 1 [json_name = "condition"];
                     }
                     Conditions conditions = 4 [json_name = "conditions"];
                  }
                  repeated Filter filter = 1 [json_name = "filter"];
               }
               Filters filters = 4 [json_name = "filters"];
            }
            repeated SensorPath sensor_path = 1 [json_name = "sensor-path"];
         }
         SensorPathsSelfDefineEvent sensor_paths_self_define_event = 5 [json_name = "sensor-paths-self-define-event"];
      }
      repeated SensorGroup sensor_group = 1 [json_name = "sensor-group"];
   }
   SensorGroups sensor_groups = 1 [json_name = "sensor-groups"];
   message DestinationGroups {
      message DestinationGroup {
         string group_id = 1 [json_name = "group-id"];
         message Config {
            string group_id = 1 [json_name = "group-id"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string group_id = 1 [json_name = "group-id"];
         }
         State state = 3 [json_name = "state"];
         message Destinations {
            message Destination {
               string destination_address = 1 [json_name = "destination-address"];
               uint32 destination_port = 2 [json_name = "destination-port"];
               message Config {
                  string destination_address = 1 [json_name = "destination-address"];
                  uint32 destination_port = 2 [json_name = "destination-port"];
                  string protocol = 3 [json_name = "protocol"];
                  bool tls = 4 [json_name = "tls"];
                  string compression = 5 [json_name = "compression"];
               }
               Config config = 3 [json_name = "config"];
               message State {
                  string destination_address = 1 [json_name = "destination-address"];
                  uint32 destination_port = 2 [json_name = "destination-port"];
                  string protocol = 3 [json_name = "protocol"];
                  bool tls = 4 [json_name = "tls"];
                  string compression = 5 [json_name = "compression"];
               }
               State state = 4 [json_name = "state"];
            }
            repeated Destination destination = 1 [json_name = "destination"];
         }
         Destinations destinations = 4 [json_name = "destinations"];
         message DestinationsWithVpn {
            message DestinationWithVpn {
               string destination_address = 1 [json_name = "destination-address"];
               uint32 destination_port = 2 [json_name = "destination-port"];
               string vpn_instance = 3 [json_name = "vpn-instance"];
               message Config {
                  string destination_address = 1 [json_name = "destination-address"];
                  uint32 destination_port = 2 [json_name = "destination-port"];
                  string vpn_instance = 3 [json_name = "vpn-instance"];
                  string protocol = 4 [json_name = "protocol"];
                  bool tls = 5 [json_name = "tls"];
                  string compression = 6 [json_name = "compression"];
               }
               Config config = 4 [json_name = "config"];
               message State {
                  string destination_address = 1 [json_name = "destination-address"];
                  uint32 destination_port = 2 [json_name = "destination-port"];
                  string vpn_instance = 3 [json_name = "vpn-instance"];
                  string protocol = 4 [json_name = "protocol"];
                  bool tls = 5 [json_name = "tls"];
                  string compression = 6 [json_name = "compression"];
               }
               State state = 5 [json_name = "state"];
            }
            repeated DestinationWithVpn destination_with_vpn = 1 [json_name = "destination-with-vpn"];
         }
         DestinationsWithVpn destinations_with_vpn = 5 [json_name = "destinations-with-vpn"];
      }
      repeated DestinationGroup destination_group = 1 [json_name = "destination-group"];
   }
   DestinationGroups destination_groups = 2 [json_name = "destination-groups"];
   message Subscriptions {
      message Persistent {
         message Subscription {
            string subscription_name = 1 [json_name = "subscription-name"];
            message Config {
               string subscription_name = 1 [json_name = "subscription-name"];
               string local_source_address = 2 [json_name = "local-source-address"];
               uint32 originated_qos_marking = 3 [json_name = "originated-qos-marking"];
               string protocol = 4 [json_name = "protocol"];
               string encoding = 5 [json_name = "encoding"];
               uint32 local_source_port = 6 [json_name = "local-source-port"];
               bool tls = 7 [json_name = "tls"];
               string local_source_interface = 8 [json_name = "local-source-interface"];
               string compression = 9 [json_name = "compression"];
               bool pack_enable = 10 [json_name = "pack-enable"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string subscription_name = 1 [json_name = "subscription-name"];
               uint64 subscription_id = 2 [json_name = "subscription-id"];
               string local_source_address = 3 [json_name = "local-source-address"];
               uint32 originated_qos_marking = 4 [json_name = "originated-qos-marking"];
               string protocol = 5 [json_name = "protocol"];
               string encoding = 6 [json_name = "encoding"];
               uint32 local_source_port = 7 [json_name = "local-source-port"];
               bool tls = 8 [json_name = "tls"];
               string local_source_interface = 9 [json_name = "local-source-interface"];
               string compression = 10 [json_name = "compression"];
               bool pack_enable = 11 [json_name = "pack-enable"];
            }
            State state = 3 [json_name = "state"];
            message SensorProfiles {
               message SensorProfile {
                  string sensor_group = 1 [json_name = "sensor-group"];
                  message Config {
                     string sensor_group = 1 [json_name = "sensor-group"];
                     uint64 sample_interval = 2 [json_name = "sample-interval"];
                     uint64 heartbeat_interval = 3 [json_name = "heartbeat-interval"];
                     bool suppress_redundant = 4 [json_name = "suppress-redundant"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string sensor_group = 1 [json_name = "sensor-group"];
                     uint64 sample_interval = 2 [json_name = "sample-interval"];
                     uint64 heartbeat_interval = 3 [json_name = "heartbeat-interval"];
                     bool suppress_redundant = 4 [json_name = "suppress-redundant"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated SensorProfile sensor_profile = 1 [json_name = "sensor-profile"];
            }
            SensorProfiles sensor_profiles = 4 [json_name = "sensor-profiles"];
            message DestinationGroups {
               message DestinationGroup {
                  string group_id = 1 [json_name = "group-id"];
                  message Config {
                     string group_id = 1 [json_name = "group-id"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string group_id = 1 [json_name = "group-id"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated DestinationGroup destination_group = 1 [json_name = "destination-group"];
            }
            DestinationGroups destination_groups = 5 [json_name = "destination-groups"];
            message SamplePolicys {
               message SamplePolicy {
                  string sensor_group = 1 [json_name = "sensor-group"];
                  uint32 sample_interval = 2 [json_name = "sample-interval"];
                  string op_field = 3 [json_name = "op-field"];
                  enum OpType {
                     OpType_EQ = 0;
                     OpType_GT = 1;
                     OpType_GE = 2;
                     OpType_LT = 3;
                     OpType_LE = 4;
                  };
                  OpType op_type = 4 [json_name = "op-type"];
                  string op_value = 5 [json_name = "op-value"];
                  message Config {
                     string sensor_group = 1 [json_name = "sensor-group"];
                     uint32 sample_interval = 2 [json_name = "sample-interval"];
                     string op_field = 3 [json_name = "op-field"];
                     enum OpType {
                        OpType_EQ = 0;
                        OpType_GT = 1;
                        OpType_GE = 2;
                        OpType_LT = 3;
                        OpType_LE = 4;
                     };
                     OpType op_type = 4 [json_name = "op-type"];
                     string op_value = 5 [json_name = "op-value"];
                  }
                  Config config = 6 [json_name = "config"];
                  message State {
                     string sensor_group = 1 [json_name = "sensor-group"];
                     uint32 sample_interval = 2 [json_name = "sample-interval"];
                     string op_field = 3 [json_name = "op-field"];
                     enum OpType {
                        OpType_EQ = 0;
                        OpType_GT = 1;
                        OpType_GE = 2;
                        OpType_LT = 3;
                        OpType_LE = 4;
                     };
                     OpType op_type = 4 [json_name = "op-type"];
                     string op_value = 5 [json_name = "op-value"];
                  }
                  State state = 7 [json_name = "state"];
               }
               repeated SamplePolicy sample_policy = 1 [json_name = "sample-policy"];
            }
            SamplePolicys sample_policys = 6 [json_name = "sample-policys"];
         }
         repeated Subscription subscription = 1 [json_name = "subscription"];
      }
      Persistent persistent = 1 [json_name = "persistent"];
      message Dynamic {
         message Subscription {
            uint64 subscription_id = 1 [json_name = "subscription-id"];
            message State {
               uint64 subscription_id = 1 [json_name = "subscription-id"];
               string destination_address = 2 [json_name = "destination-address"];
               uint32 destination_port = 3 [json_name = "destination-port"];
               uint64 sample_interval = 4 [json_name = "sample-interval"];
               uint64 heartbeat_interval = 5 [json_name = "heartbeat-interval"];
               bool suppress_redundant = 6 [json_name = "suppress-redundant"];
               uint32 originated_qos_marking = 7 [json_name = "originated-qos-marking"];
               string protocol = 8 [json_name = "protocol"];
               string encoding = 9 [json_name = "encoding"];
            }
            State state = 2 [json_name = "state"];
            message SensorPaths {
               message SensorPath {
                  string path = 1 [json_name = "path"];
                  message State {
                     string path = 1 [json_name = "path"];
                     string exclude_filter = 2 [json_name = "exclude-filter"];
                  }
                  State state = 2 [json_name = "state"];
               }
               repeated SensorPath sensor_path = 1 [json_name = "sensor-path"];
            }
            SensorPaths sensor_paths = 3 [json_name = "sensor-paths"];
         }
         repeated Subscription subscription = 1 [json_name = "subscription"];
      }
      Dynamic dynamic = 2 [json_name = "dynamic"];
   }
   Subscriptions subscriptions = 3 [json_name = "subscriptions"];
   message Global {
      message Config {
         bool json_only_content = 1 [json_name = "json-only-content"];
         uint32 cpu_max_usage = 2 [json_name = "cpu-max-usage"];
      }
      Config config = 1 [json_name = "config"];
      message State {
         bool json_only_content = 1 [json_name = "json-only-content"];
         uint32 cpu_max_usage = 2 [json_name = "cpu-max-usage"];
      }
      State state = 2 [json_name = "state"];
   }
   Global global = 4 [json_name = "global"];
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


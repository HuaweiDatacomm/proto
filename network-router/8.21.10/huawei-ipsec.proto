syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-01-19 09:15:52
// ProtoYang-version 1
// module huawei-ipsec
// revision 2022-01-05
// revision 2021-11-23
// revision 2020-02-11
// revision 2019-12-07
// namespace urn:huawei:yang:huawei-ipsec

package huawei_ipsec;

message Ipsec {
   message Global {
      bool df_bit_clear = 1 [json_name = "df-bit-clear"];
      bool fragment_before_encryption = 2 [json_name = "fragment-before-encryption"];
      bool pre_check = 3 [json_name = "pre-check"];
      bool succeed_check = 4 [json_name = "succeed-check"];
      bool lifetime_traffic_based_enable = 5 [json_name = "lifetime-traffic-based-enable"];
      uint32 lifetime_kilobytes = 6 [json_name = "lifetime-kilobytes"];
      uint32 lifetime_seconds = 7 [json_name = "lifetime-seconds"];
      bool anti_replay_enable = 8 [json_name = "anti-replay-enable"];
      uint32 anti_replay_window = 9 [json_name = "anti-replay-window"];
      string local_name = 10 [json_name = "local-name"];
      uint32 nat_keepalive_interval = 11 [json_name = "nat-keepalive-interval"];
      message Dpd {
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_PERIODIC = 1;
            Type_ONX_DEMAND = 2;
            Type_NONE = 3;
         };
         Type type = 1 [json_name = "type"];
         enum Msg {
            INVALID_ENUM_VALUE_Msg = 0;
            Msg_SEQX_HASHX_NOTIFY = 1;
            Msg_SEQX_NOTIFYX_HASH = 2;
         };
         Msg msg = 2 [json_name = "msg"];
         uint32 interval = 3 [json_name = "interval"];
         uint32 retry_interval = 4 [json_name = "retry-interval"];
         uint32 retry_times = 5 [json_name = "retry-times"];
         bool if_related = 6 [json_name = "if-related"];
         bool immediately_enable = 7 [json_name = "immediately-enable"];
      }
      Dpd dpd = 12 [json_name = "dpd"];
      bool dos_log_enable = 13 [json_name = "dos-log-enable"];
      uint32 dos_log_threshold = 14 [json_name = "dos-log-threshold"];
      enum SmVersion {
         INVALID_ENUM_VALUE_SmVersion = 0;
         SmVersion_DRAFT = 1;
         SmVersion_STANDARD = 2;
      };
      SmVersion sm_version = 15 [json_name = "sm-version"];
      bool mtu_check = 16 [json_name = "mtu-check"];
      bool flow_overlap_check = 17 [json_name = "flow-overlap-check"];
   }
   Global global = 1 [json_name = "global"];
   message IpsecProposals {
      message IpsecProposal {
         string name = 1 [json_name = "name"];
         enum TransformProtocol {
            INVALID_ENUM_VALUE_TransformProtocol = 0;
            TransformProtocol_AH = 1;
            TransformProtocol_ESP = 2;
            TransformProtocol_AHX_ESP = 3;
         };
         TransformProtocol transform_protocol = 2 [json_name = "transform-protocol"];
         enum EncapsulationMode {
            INVALID_ENUM_VALUE_EncapsulationMode = 0;
            EncapsulationMode_TUNNEL = 1;
            EncapsulationMode_TRANSPORT = 2;
            EncapsulationMode_AUTO = 3;
         };
         EncapsulationMode encapsulation_mode = 3 [json_name = "encapsulation-mode"];
         enum AhAuthAlgorithm {
            INVALID_ENUM_VALUE_AhAuthAlgorithm = 0;
            AhAuthAlgorithm_MD5 = 1;
            AhAuthAlgorithm_SHA1 = 2;
            AhAuthAlgorithm_SHA2X_256 = 3;
            AhAuthAlgorithm_SHA2X_384 = 4;
            AhAuthAlgorithm_SHA2X_512 = 5;
            AhAuthAlgorithm_SM3 = 6;
            AhAuthAlgorithm_NONE = 255;
         };
         repeated AhAuthAlgorithm ah_auth_algorithm = 4 [json_name = "ah-auth-algorithm"];
         enum EspAuthAlgorithm {
            INVALID_ENUM_VALUE_EspAuthAlgorithm = 0;
            EspAuthAlgorithm_MD5 = 1;
            EspAuthAlgorithm_SHA1 = 2;
            EspAuthAlgorithm_SHA2X_256 = 3;
            EspAuthAlgorithm_SHA2X_384 = 4;
            EspAuthAlgorithm_SHA2X_512 = 5;
            EspAuthAlgorithm_SM3 = 6;
            EspAuthAlgorithm_NONE = 255;
         };
         repeated EspAuthAlgorithm esp_auth_algorithm = 5 [json_name = "esp-auth-algorithm"];
         enum EspEncryptionAlgorithm {
            INVALID_ENUM_VALUE_EspEncryptionAlgorithm = 0;
            EspEncryptionAlgorithm_DESX_CBC = 1;
            EspEncryptionAlgorithm_X_3DESX_CBC = 2;
            EspEncryptionAlgorithm_SM1X_CBC = 3;
            EspEncryptionAlgorithm_SM4X_CBC = 4;
            EspEncryptionAlgorithm_AESX_128X_CBC = 5;
            EspEncryptionAlgorithm_AESX_192X_CBC = 6;
            EspEncryptionAlgorithm_AESX_256X_CBC = 7;
            EspEncryptionAlgorithm_AESX_128X_GCM = 8;
            EspEncryptionAlgorithm_AESX_192X_GCM = 9;
            EspEncryptionAlgorithm_AESX_256X_GCM = 10;
            EspEncryptionAlgorithm_AESX_128X_GMAC = 11;
            EspEncryptionAlgorithm_AESX_192X_GMAC = 12;
            EspEncryptionAlgorithm_AESX_256X_GMAC = 13;
            EspEncryptionAlgorithm_AESX_128X_CTR = 14;
            EspEncryptionAlgorithm_AESX_192X_CTR = 15;
            EspEncryptionAlgorithm_AESX_256X_CTR = 16;
            EspEncryptionAlgorithm_NONE = 255;
         };
         repeated EspEncryptionAlgorithm esp_encryption_algorithm = 6 [json_name = "esp-encryption-algorithm"];
      }
      repeated IpsecProposal ipsec_proposal = 1 [json_name = "ipsec-proposal"];
   }
   IpsecProposals ipsec_proposals = 2 [json_name = "ipsec-proposals"];
   message IkeProposals {
      message IkeProposal {
         uint32 id = 1 [json_name = "id"];
         enum EncryptionAlgorithm {
            INVALID_ENUM_VALUE_EncryptionAlgorithm = 0;
            EncryptionAlgorithm_DESX_CBC = 1;
            EncryptionAlgorithm_X_3DESX_CBC = 2;
            EncryptionAlgorithm_SM1X_CBC = 3;
            EncryptionAlgorithm_SM4X_CBC = 4;
            EncryptionAlgorithm_AESX_128X_CBC = 5;
            EncryptionAlgorithm_AESX_192X_CBC = 6;
            EncryptionAlgorithm_AESX_256X_CBC = 7;
            EncryptionAlgorithm_AESX_128X_GCM = 8;
            EncryptionAlgorithm_AESX_192X_GCM = 9;
            EncryptionAlgorithm_AESX_256X_GCM = 10;
            EncryptionAlgorithm_AESX_128X_GMAC = 11;
            EncryptionAlgorithm_AESX_192X_GMAC = 12;
            EncryptionAlgorithm_AESX_256X_GMAC = 13;
            EncryptionAlgorithm_AESX_128X_CTR = 14;
            EncryptionAlgorithm_AESX_192X_CTR = 15;
            EncryptionAlgorithm_AESX_256X_CTR = 16;
            EncryptionAlgorithm_NONE = 255;
         };
         repeated EncryptionAlgorithm encryption_algorithm = 2 [json_name = "encryption-algorithm"];
         enum AuthAlgorithm {
            INVALID_ENUM_VALUE_AuthAlgorithm = 0;
            AuthAlgorithm_MD5 = 1;
            AuthAlgorithm_SHA1 = 2;
            AuthAlgorithm_SHA2X_256 = 3;
            AuthAlgorithm_SHA2X_384 = 4;
            AuthAlgorithm_SHA2X_512 = 5;
            AuthAlgorithm_SM3 = 6;
            AuthAlgorithm_NONE = 255;
         };
         repeated AuthAlgorithm auth_algorithm = 3 [json_name = "auth-algorithm"];
         enum IntegrityAlgorithm {
            INVALID_ENUM_VALUE_IntegrityAlgorithm = 0;
            IntegrityAlgorithm_HMACX_MD5X_96 = 1;
            IntegrityAlgorithm_HMACX_SHA1X_96 = 2;
            IntegrityAlgorithm_HMACX_SHA2X_256 = 3;
            IntegrityAlgorithm_HMACX_SHA2X_384 = 4;
            IntegrityAlgorithm_HMACX_SHA2X_512 = 5;
            IntegrityAlgorithm_AESX_XCBCX_96 = 6;
            IntegrityAlgorithm_AESX_XCBCX_128 = 7;
         };
         repeated IntegrityAlgorithm integrity_algorithm = 4 [json_name = "integrity-algorithm"];
         enum Prf {
            INVALID_ENUM_VALUE_Prf = 0;
            Prf_HMACX_MD5X_96 = 1;
            Prf_HMACX_SHA1X_96 = 2;
            Prf_HMACX_SHA2X_256 = 3;
            Prf_HMACX_SHA2X_384 = 4;
            Prf_HMACX_SHA2X_512 = 5;
            Prf_AESX_XCBCX_96 = 6;
            Prf_AESX_XCBCX_128 = 7;
         };
         repeated Prf prf = 5 [json_name = "prf"];
         enum Dh {
            INVALID_ENUM_VALUE_Dh = 0;
            Dh_GROUP1 = 1;
            Dh_GROUP2 = 2;
            Dh_GROUP5 = 5;
            Dh_GROUP8 = 8;
            Dh_GROUP14 = 14;
            Dh_GROUP15 = 15;
            Dh_GROUP16 = 16;
            Dh_GROUP18 = 18;
            Dh_GROUP19 = 19;
            Dh_GROUP20 = 20;
            Dh_GROUP21 = 21;
            Dh_GROUP24 = 24;
         };
         repeated Dh dh = 6 [json_name = "dh"];
         enum AuthMethod {
            INVALID_ENUM_VALUE_AuthMethod = 0;
            AuthMethod_PREX_SHAREDX_KEY = 1;
            AuthMethod_RSAX_SIGNATURE = 2;
            AuthMethod_DIGITALX_ENVELOPE = 3;
         };
         AuthMethod auth_method = 7 [json_name = "auth-method"];
         uint32 reauth_interval = 8 [json_name = "reauth-interval"];
         uint32 lifetime = 9 [json_name = "lifetime"];
      }
      repeated IkeProposal ike_proposal = 1 [json_name = "ike-proposal"];
   }
   IkeProposals ike_proposals = 3 [json_name = "ike-proposals"];
   message IkePeers {
      message IkePeer {
         string name = 1 [json_name = "name"];
         uint32 ike_proposal = 2 [json_name = "ike-proposal"];
         enum IkeVersion {
            INVALID_ENUM_VALUE_IkeVersion = 0;
            IkeVersion_V1 = 1;
            IkeVersion_V2 = 2;
            IkeVersion_ALL = 3;
         };
         IkeVersion ike_version = 3 [json_name = "ike-version"];
         enum Phase1Mode {
            INVALID_ENUM_VALUE_Phase1Mode = 0;
            Phase1Mode_MAIN = 1;
            Phase1Mode_AGGRESSIVE = 2;
            Phase1Mode_AUTO = 3;
         };
         Phase1Mode phase1_mode = 4 [json_name = "phase1-mode"];
         enum DhGroup {
            INVALID_ENUM_VALUE_DhGroup = 0;
            DhGroup_GROUP1 = 1;
            DhGroup_GROUP2 = 2;
            DhGroup_GROUP5 = 5;
            DhGroup_GROUP8 = 8;
            DhGroup_GROUP14 = 14;
            DhGroup_GROUP15 = 15;
            DhGroup_GROUP16 = 16;
            DhGroup_GROUP18 = 18;
            DhGroup_GROUP19 = 19;
            DhGroup_GROUP20 = 20;
            DhGroup_GROUP21 = 21;
            DhGroup_GROUP24 = 24;
         };
         DhGroup dh_group = 5 [json_name = "dh-group"];
         message LocalId {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_IP = 1;
               Type_FQDN = 2;
               Type_USERX_FQDN = 3;
               Type_DN = 4;
               Type_ESN = 5;
               Type_KEYX_ID = 6;
               Type_ANY = 254;
               Type_NONE = 255;
            };
            Type type = 1 [json_name = "type"];
            string value = 2 [json_name = "value"];
            bool certificate_preference = 3 [json_name = "certificate-preference"];
            bool reflect_enable = 4 [json_name = "reflect-enable"];
         }
         LocalId local_id = 6 [json_name = "local-id"];
         message PeerId {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_IP = 1;
               Type_FQDN = 2;
               Type_USERX_FQDN = 3;
               Type_DN = 4;
               Type_ESN = 5;
               Type_KEYX_ID = 6;
               Type_ANY = 254;
               Type_NONE = 255;
            };
            Type type = 1 [json_name = "type"];
            string value = 2 [json_name = "value"];
         }
         PeerId peer_id = 7 [json_name = "peer-id"];
         message AuthMethod_Certificate {
            string local_cert_filename = 1 [json_name = "local-cert-filename"];
            string peer_cert_filename = 2 [json_name = "peer-cert-filename"];
         }
         message AuthMethod_PreSharedKey {
            string pre_shared_key = 1 [json_name = "pre-shared-key"];
         }
         oneof AuthMethod {
            AuthMethod_Certificate auth_method_certificate = 8 [json_name = "certificate"];
            AuthMethod_PreSharedKey auth_method_pre_shared_key = 9 [json_name = "pre-shared-key"];
         }
         uint32 user_table_id = 10 [json_name = "user-table-id"];
         message Dpd {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_PERIODIC = 1;
               Type_ONX_DEMAND = 2;
               Type_NONE = 3;
            };
            Type type = 1 [json_name = "type"];
            enum Msg {
               INVALID_ENUM_VALUE_Msg = 0;
               Msg_SEQX_HASHX_NOTIFY = 1;
               Msg_SEQX_NOTIFYX_HASH = 2;
            };
            Msg msg = 2 [json_name = "msg"];
            uint32 interval = 3 [json_name = "interval"];
            uint32 retry_interval = 4 [json_name = "retry-interval"];
            uint32 retry_times = 5 [json_name = "retry-times"];
            bool if_related = 6 [json_name = "if-related"];
            bool immediately_enable = 7 [json_name = "immediately-enable"];
         }
         Dpd dpd = 11 [json_name = "dpd"];
         bool nat_traversal = 12 [json_name = "nat-traversal"];
         message PeerAddress {
            message PeerAddress5_AddressSection {
               string address_begin = 1 [json_name = "address-begin"];
               string address_end = 2 [json_name = "address-end"];
            }
            message PeerAddress5_AddressList {
               repeated string host_name = 1 [json_name = "host-name"];
            }
            oneof PeerAddress5 {
               PeerAddress5_AddressSection peer_address_address_section = 1 [json_name = "address-section"];
               PeerAddress5_AddressList peer_address_address_list = 2 [json_name = "address-list"];
            }
            string vpn_name = 3 [json_name = "vpn-name"];
            string auth_address_begin = 4 [json_name = "auth-address-begin"];
            string auth_address_end = 5 [json_name = "auth-address-end"];
         }
         PeerAddress peer_address = 13 [json_name = "peer-address"];
         string flow_vpn_name = 14 [json_name = "flow-vpn-name"];
         enum SmVersion {
            INVALID_ENUM_VALUE_SmVersion = 0;
            SmVersion_DRAFT = 1;
            SmVersion_STANDARD = 2;
         };
         SmVersion sm_version = 15 [json_name = "sm-version"];
         bool pki_whitelist_enable = 16 [json_name = "pki-whitelist-enable"];
      }
      repeated IkePeer ike_peer = 1 [json_name = "ike-peer"];
   }
   IkePeers ike_peers = 4 [json_name = "ike-peers"];
   message UserTables {
      message UserTable {
         uint32 id = 1 [json_name = "id"];
         message RemoteUsers {
            message RemoteUser {
               string user_name = 1 [json_name = "user-name"];
               enum IdType {
                  INVALID_ENUM_VALUE_IdType = 0;
                  IdType_IP = 1;
                  IdType_FQDN = 2;
                  IdType_USERX_FQDN = 3;
                  IdType_DN = 4;
                  IdType_ESN = 5;
                  IdType_KEYX_ID = 6;
                  IdType_ANY = 254;
                  IdType_NONE = 255;
               };
               IdType id_type = 2 [json_name = "id-type"];
               string id_value = 3 [json_name = "id-value"];
               string if_name = 4 [json_name = "if-name"];
               string vpn_name = 5 [json_name = "vpn-name"];
               string pre_shared_key = 6 [json_name = "pre-shared-key"];
            }
            repeated RemoteUser remote_user = 1 [json_name = "remote-user"];
         }
         RemoteUsers remote_users = 2 [json_name = "remote-users"];
      }
      repeated UserTable user_table = 1 [json_name = "user-table"];
   }
   UserTables user_tables = 5 [json_name = "user-tables"];
   message Policys {
      message Policy {
         string name = 1 [json_name = "name"];
         message SubPolicys {
            message SubPolicy {
               uint32 id = 1 [json_name = "id"];
               enum PolicyMode {
                  INVALID_ENUM_VALUE_PolicyMode = 0;
                  PolicyMode_ISAKMP = 1;
                  PolicyMode_ISAKMPX_TEMPLATE = 2;
                  PolicyMode_PROFILE = 3;
                  PolicyMode_EFFICIENTX_VPNX_CLIENT = 4;
               };
               PolicyMode policy_mode = 2 [json_name = "policy-mode"];
               string template_name = 3 [json_name = "template-name"];
               message LocalAddress {
                  message Address_IpAddress {
                     string ip_address = 1 [json_name = "ip-address"];
                  }
                  message Address_UseInterfaceAddress {
                     bool use_interface_address = 1 [json_name = "use-interface-address"];
                  }
                  oneof Address {
                     Address_IpAddress address_ip_address = 1 [json_name = "ip-address"];
                     Address_UseInterfaceAddress address_use_interface_address = 2 [json_name = "use-interface-address"];
                  }
               }
               LocalAddress local_address = 4 [json_name = "local-address"];
               string acl_identity = 5 [json_name = "acl-identity"];
               string filter_acl = 6 [json_name = "filter-acl"];
               bool flow_vpn_check_enable = 7 [json_name = "flow-vpn-check-enable"];
               message ReverseRoute {
                  bool enable = 1 [json_name = "enable"];
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_STATIC = 1;
                     Mode_DYNAMIC = 2;
                  };
                  Mode mode = 2 [json_name = "mode"];
                  message Nexthop_NexthopAddress {
                     string nexthop_address = 1 [json_name = "nexthop-address"];
                  }
                  message Nexthop_AutoMode {
                     bool auto_mode = 1 [json_name = "auto-mode"];
                  }
                  oneof Nexthop {
                     Nexthop_NexthopAddress nexthop_nexthop_address = 3 [json_name = "nexthop-address"];
                     Nexthop_AutoMode nexthop_auto_mode = 4 [json_name = "auto-mode"];
                  }
                  uint32 preference = 5 [json_name = "preference"];
               }
               ReverseRoute reverse_route = 8 [json_name = "reverse-route"];
               enum TriggerMode {
                  INVALID_ENUM_VALUE_TriggerMode = 0;
                  TriggerMode_AUTO = 1;
                  TriggerMode_TRAFFICX_BASED = 2;
               };
               TriggerMode trigger_mode = 9 [json_name = "trigger-mode"];
               bool response_only = 10 [json_name = "response-only"];
               enum AdminState {
                  INVALID_ENUM_VALUE_AdminState = 0;
                  AdminState_UP = 1;
                  AdminState_DOWN = 2;
               };
               AdminState admin_state = 11 [json_name = "admin-state"];
               string identity_name = 12 [json_name = "identity-name"];
               bool shared = 13 [json_name = "shared"];
               message ConnectTrack {
                  enum TrackObjType {
                     INVALID_ENUM_VALUE_TrackObjType = 0;
                     TrackObjType_NQA = 1;
                     TrackObjType_NQAX_GROUP = 2;
                     TrackObjType_BFD = 3;
                     TrackObjType_BFDX_GROUP = 4;
                     TrackObjType_VRRP = 5;
                  };
                  TrackObjType track_obj_type = 1 [json_name = "track-obj-type"];
                  string track_obj_name = 2 [json_name = "track-obj-name"];
                  string track_obj_extend_name = 3 [json_name = "track-obj-extend-name"];
                  enum TrackObjState {
                     INVALID_ENUM_VALUE_TrackObjState = 0;
                     TrackObjState_UP = 1;
                     TrackObjState_DOWN = 2;
                  };
                  TrackObjState track_obj_state = 4 [json_name = "track-obj-state"];
               }
               ConnectTrack connect_track = 14 [json_name = "connect-track"];
               message DisconnectTrack {
                  enum TrackObjType {
                     INVALID_ENUM_VALUE_TrackObjType = 0;
                     TrackObjType_NQA = 1;
                     TrackObjType_NQAX_GROUP = 2;
                     TrackObjType_BFD = 3;
                     TrackObjType_BFDX_GROUP = 4;
                     TrackObjType_VRRP = 5;
                  };
                  TrackObjType track_obj_type = 1 [json_name = "track-obj-type"];
                  string track_obj_name = 2 [json_name = "track-obj-name"];
                  string track_obj_extend_name = 3 [json_name = "track-obj-extend-name"];
                  enum TrackObjState {
                     INVALID_ENUM_VALUE_TrackObjState = 0;
                     TrackObjState_UP = 1;
                     TrackObjState_DOWN = 2;
                  };
                  TrackObjState track_obj_state = 4 [json_name = "track-obj-state"];
               }
               DisconnectTrack disconnect_track = 15 [json_name = "disconnect-track"];
               message IkePacketsOutIf {
                  message OutputType_IfName {
                     string if_name = 1 [json_name = "if-name"];
                  }
                  message OutputType_AppliedIf {
                     bool applied_if = 1 [json_name = "applied-if"];
                  }
                  oneof OutputType {
                     OutputType_IfName output_type_if_name = 1 [json_name = "if-name"];
                     OutputType_AppliedIf output_type_applied_if = 2 [json_name = "applied-if"];
                  }
               }
               IkePacketsOutIf ike_packets_out_if = 16 [json_name = "ike-packets-out-if"];
               message ConnectionLimit {
                  uint32 max_sub_tunnels = 1 [json_name = "max-sub-tunnels"];
               }
               ConnectionLimit connection_limit = 17 [json_name = "connection-limit"];
               message CommonAttrs {
                  string ike_peer_name = 1 [json_name = "ike-peer-name"];
                  repeated string ipsec_proposal_name = 2 [json_name = "ipsec-proposal-name"];
                  bool lifetime_traffic_based_enable = 3 [json_name = "lifetime-traffic-based-enable"];
                  uint32 lifetime_traffic_based = 4 [json_name = "lifetime-traffic-based"];
                  uint32 lifetime_time_based = 5 [json_name = "lifetime-time-based"];
                  enum Pfs {
                     INVALID_ENUM_VALUE_Pfs = 0;
                     Pfs_GROUP1 = 1;
                     Pfs_GROUP2 = 2;
                     Pfs_GROUP5 = 5;
                     Pfs_GROUP8 = 8;
                     Pfs_GROUP14 = 14;
                     Pfs_GROUP15 = 15;
                     Pfs_GROUP16 = 16;
                     Pfs_GROUP18 = 18;
                     Pfs_GROUP19 = 19;
                     Pfs_GROUP20 = 20;
                     Pfs_GROUP21 = 21;
                     Pfs_GROUP24 = 24;
                  };
                  Pfs pfs = 6 [json_name = "pfs"];
                  uint32 in_dscp = 7 [json_name = "in-dscp"];
                  uint32 out_dscp = 8 [json_name = "out-dscp"];
                  bool anti_replay_enable = 9 [json_name = "anti-replay-enable"];
                  uint32 anti_replay_window = 10 [json_name = "anti-replay-window"];
                  bool df_bit_clear = 11 [json_name = "df-bit-clear"];
                  bool frag_bef_encr = 12 [json_name = "frag-bef-encr"];
                  message RateLimit {
                     enum InSpeedLimitType {
                        INVALID_ENUM_VALUE_InSpeedLimitType = 0;
                        InSpeedLimitType_POLICYX_BASED = 1;
                        InSpeedLimitType_IPSECX_SAX_BASED = 2;
                        InSpeedLimitType_IKEX_SAX_BASED = 3;
                     };
                     InSpeedLimitType in_speed_limit_type = 1 [json_name = "in-speed-limit-type"];
                     uint32 in_speed_limit = 2 [json_name = "in-speed-limit"];
                     bool in_payload_flag = 3 [json_name = "in-payload-flag"];
                     enum OutSpeedLimitType {
                        INVALID_ENUM_VALUE_OutSpeedLimitType = 0;
                        OutSpeedLimitType_POLICYX_BASED = 1;
                        OutSpeedLimitType_IPSECX_SAX_BASED = 2;
                        OutSpeedLimitType_IKEX_SAX_BASED = 3;
                     };
                     OutSpeedLimitType out_speed_limit_type = 4 [json_name = "out-speed-limit-type"];
                     uint32 out_speed_limit = 5 [json_name = "out-speed-limit"];
                     bool out_payload_flag = 6 [json_name = "out-payload-flag"];
                  }
                  RateLimit rate_limit = 13 [json_name = "rate-limit"];
                  enum InSvcClass {
                     INVALID_ENUM_VALUE_InSvcClass = 0;
                     InSvcClass_AF1 = 1;
                     InSvcClass_AF2 = 2;
                     InSvcClass_AF3 = 3;
                     InSvcClass_AF4 = 4;
                     InSvcClass_BE = 5;
                     InSvcClass_CS6 = 6;
                     InSvcClass_CS7 = 7;
                     InSvcClass_EF = 8;
                  };
                  InSvcClass in_svc_class = 14 [json_name = "in-svc-class"];
                  enum OutSvcClass {
                     INVALID_ENUM_VALUE_OutSvcClass = 0;
                     OutSvcClass_AF1 = 1;
                     OutSvcClass_AF2 = 2;
                     OutSvcClass_AF3 = 3;
                     OutSvcClass_AF4 = 4;
                     OutSvcClass_BE = 5;
                     OutSvcClass_CS6 = 6;
                     OutSvcClass_CS7 = 7;
                     OutSvcClass_EF = 8;
                  };
                  OutSvcClass out_svc_class = 15 [json_name = "out-svc-class"];
                  enum LoadBalanceAlgorithm {
                     INVALID_ENUM_VALUE_LoadBalanceAlgorithm = 0;
                     LoadBalanceAlgorithm_CRC32C = 1;
                     LoadBalanceAlgorithm_CRC32 = 2;
                     LoadBalanceAlgorithm_XOR = 3;
                  };
                  LoadBalanceAlgorithm load_balance_algorithm = 16 [json_name = "load-balance-algorithm"];
                  bool log_enable = 17 [json_name = "log-enable"];
                  bool qos_pre_classify = 18 [json_name = "qos-pre-classify"];
               }
               CommonAttrs common_attrs = 18 [json_name = "common-attrs"];
               message EfficientVpnClient {
                  enum Dh {
                     INVALID_ENUM_VALUE_Dh = 0;
                     Dh_GROUP1 = 1;
                     Dh_GROUP2 = 2;
                     Dh_GROUP5 = 5;
                     Dh_GROUP8 = 8;
                     Dh_GROUP14 = 14;
                     Dh_GROUP15 = 15;
                     Dh_GROUP16 = 16;
                     Dh_GROUP18 = 18;
                     Dh_GROUP19 = 19;
                     Dh_GROUP20 = 20;
                     Dh_GROUP21 = 21;
                     Dh_GROUP24 = 24;
                  };
                  Dh dh = 1 [json_name = "dh"];
                  string peer_address = 2 [json_name = "peer-address"];
                  string pre_shared_key = 3 [json_name = "pre-shared-key"];
                  message RemoteNetworks {
                     message RemoteNetwork {
                        string remote_network_ip = 1 [json_name = "remote-network-ip"];
                     }
                     repeated RemoteNetwork remote_network = 1 [json_name = "remote-network"];
                  }
                  RemoteNetworks remote_networks = 4 [json_name = "remote-networks"];
               }
               EfficientVpnClient efficient_vpn_client = 19 [json_name = "efficient-vpn-client"];
               bool enable = 20 [json_name = "enable"];
            }
            repeated SubPolicy sub_policy = 1 [json_name = "sub-policy"];
         }
         SubPolicys sub_policys = 2 [json_name = "sub-policys"];
      }
      repeated Policy policy = 1 [json_name = "policy"];
   }
   Policys policys = 6 [json_name = "policys"];
   message PolicyTemplates {
      message PolicyTemplate {
         string name = 1 [json_name = "name"];
         string local_address = 2 [json_name = "local-address"];
         string acl_identity = 3 [json_name = "acl-identity"];
         bool acl_rule_modification_response_disable = 4 [json_name = "acl-rule-modification-response-disable"];
         message ReverseRoute {
            bool enable = 1 [json_name = "enable"];
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_STATIC = 1;
               Mode_DYNAMIC = 2;
            };
            Mode mode = 2 [json_name = "mode"];
            message Nexthop_NexthopAddress {
               string nexthop_address = 1 [json_name = "nexthop-address"];
            }
            message Nexthop_AutoMode {
               bool auto_mode = 1 [json_name = "auto-mode"];
            }
            oneof Nexthop {
               Nexthop_NexthopAddress nexthop_nexthop_address = 3 [json_name = "nexthop-address"];
               Nexthop_AutoMode nexthop_auto_mode = 4 [json_name = "auto-mode"];
            }
            uint32 preference = 5 [json_name = "preference"];
         }
         ReverseRoute reverse_route = 5 [json_name = "reverse-route"];
         enum AdminState {
            INVALID_ENUM_VALUE_AdminState = 0;
            AdminState_UP = 1;
            AdminState_DOWN = 2;
         };
         AdminState admin_state = 6 [json_name = "admin-state"];
         string identity_name = 7 [json_name = "identity-name"];
         message IkePacketsOutIf {
            message OutputType_IfName {
               string if_name = 1 [json_name = "if-name"];
            }
            message OutputType_AppliedIf {
               bool applied_if = 1 [json_name = "applied-if"];
            }
            oneof OutputType {
               OutputType_IfName output_type_if_name = 1 [json_name = "if-name"];
               OutputType_AppliedIf output_type_applied_if = 2 [json_name = "applied-if"];
            }
         }
         IkePacketsOutIf ike_packets_out_if = 8 [json_name = "ike-packets-out-if"];
         string binding_ifname = 9 [json_name = "binding-ifname"];
         string vlans = 10 [json_name = "vlans"];
         message CommAttrs {
            string ike_peer_name = 1 [json_name = "ike-peer-name"];
            repeated string ipsec_proposal_name = 2 [json_name = "ipsec-proposal-name"];
            bool lifetime_traffic_based_enable = 3 [json_name = "lifetime-traffic-based-enable"];
            uint32 lifetime_traffic_based = 4 [json_name = "lifetime-traffic-based"];
            uint32 lifetime_time_based = 5 [json_name = "lifetime-time-based"];
            enum Pfs {
               INVALID_ENUM_VALUE_Pfs = 0;
               Pfs_GROUP1 = 1;
               Pfs_GROUP2 = 2;
               Pfs_GROUP5 = 5;
               Pfs_GROUP8 = 8;
               Pfs_GROUP14 = 14;
               Pfs_GROUP15 = 15;
               Pfs_GROUP16 = 16;
               Pfs_GROUP18 = 18;
               Pfs_GROUP19 = 19;
               Pfs_GROUP20 = 20;
               Pfs_GROUP21 = 21;
               Pfs_GROUP24 = 24;
            };
            Pfs pfs = 6 [json_name = "pfs"];
            uint32 in_dscp = 7 [json_name = "in-dscp"];
            uint32 out_dscp = 8 [json_name = "out-dscp"];
            bool anti_replay_enable = 9 [json_name = "anti-replay-enable"];
            uint32 anti_replay_window = 10 [json_name = "anti-replay-window"];
            bool df_bit_clear = 11 [json_name = "df-bit-clear"];
            bool frag_bef_encr = 12 [json_name = "frag-bef-encr"];
            message RateLimit {
               enum InSpeedLimitType {
                  INVALID_ENUM_VALUE_InSpeedLimitType = 0;
                  InSpeedLimitType_POLICYX_BASED = 1;
                  InSpeedLimitType_IPSECX_SAX_BASED = 2;
                  InSpeedLimitType_IKEX_SAX_BASED = 3;
               };
               InSpeedLimitType in_speed_limit_type = 1 [json_name = "in-speed-limit-type"];
               uint32 in_speed_limit = 2 [json_name = "in-speed-limit"];
               bool in_payload_flag = 3 [json_name = "in-payload-flag"];
               enum OutSpeedLimitType {
                  INVALID_ENUM_VALUE_OutSpeedLimitType = 0;
                  OutSpeedLimitType_POLICYX_BASED = 1;
                  OutSpeedLimitType_IPSECX_SAX_BASED = 2;
                  OutSpeedLimitType_IKEX_SAX_BASED = 3;
               };
               OutSpeedLimitType out_speed_limit_type = 4 [json_name = "out-speed-limit-type"];
               uint32 out_speed_limit = 5 [json_name = "out-speed-limit"];
               bool out_payload_flag = 6 [json_name = "out-payload-flag"];
            }
            RateLimit rate_limit = 13 [json_name = "rate-limit"];
            enum InSvcClass {
               INVALID_ENUM_VALUE_InSvcClass = 0;
               InSvcClass_AF1 = 1;
               InSvcClass_AF2 = 2;
               InSvcClass_AF3 = 3;
               InSvcClass_AF4 = 4;
               InSvcClass_BE = 5;
               InSvcClass_CS6 = 6;
               InSvcClass_CS7 = 7;
               InSvcClass_EF = 8;
            };
            InSvcClass in_svc_class = 14 [json_name = "in-svc-class"];
            enum OutSvcClass {
               INVALID_ENUM_VALUE_OutSvcClass = 0;
               OutSvcClass_AF1 = 1;
               OutSvcClass_AF2 = 2;
               OutSvcClass_AF3 = 3;
               OutSvcClass_AF4 = 4;
               OutSvcClass_BE = 5;
               OutSvcClass_CS6 = 6;
               OutSvcClass_CS7 = 7;
               OutSvcClass_EF = 8;
            };
            OutSvcClass out_svc_class = 15 [json_name = "out-svc-class"];
            enum LoadBalanceAlgorithm {
               INVALID_ENUM_VALUE_LoadBalanceAlgorithm = 0;
               LoadBalanceAlgorithm_CRC32C = 1;
               LoadBalanceAlgorithm_CRC32 = 2;
               LoadBalanceAlgorithm_XOR = 3;
            };
            LoadBalanceAlgorithm load_balance_algorithm = 16 [json_name = "load-balance-algorithm"];
            bool log_enable = 17 [json_name = "log-enable"];
            bool qos_pre_classify = 18 [json_name = "qos-pre-classify"];
         }
         CommAttrs comm_attrs = 11 [json_name = "comm-attrs"];
      }
      repeated PolicyTemplate policy_template = 1 [json_name = "policy-template"];
   }
   PolicyTemplates policy_templates = 7 [json_name = "policy-templates"];
   message Instances {
      message Instance {
         uint32 instance_id = 1 [json_name = "instance-id"];
         string rbp_name = 2 [json_name = "rbp-name"];
         string source_ifname = 3 [json_name = "source-ifname"];
         uint32 start_port = 4 [json_name = "start-port"];
         uint32 end_port = 5 [json_name = "end-port"];
         string rbs_name = 6 [json_name = "rbs-name"];
         string rbs_source_addr = 7 [json_name = "rbs-source-addr"];
         string rbs_dest_addr = 8 [json_name = "rbs-dest-addr"];
         uint32 rbs_port = 9 [json_name = "rbs-port"];
         uint32 vrrp_id = 10 [json_name = "vrrp-id"];
         enum VrrpState {
            INVALID_ENUM_VALUE_VrrpState = 0;
            VrrpState_MASTER = 1;
            VrrpState_SLAVE = 2;
            VrrpState_INVALID = 3;
         };
         VrrpState vrrp_state = 11 [json_name = "vrrp-state"];
         enum HotBkChlSta {
            INVALID_ENUM_VALUE_HotBkChlSta = 0;
            HotBkChlSta_INVALID = 1;
            HotBkChlSta_UP = 2;
            HotBkChlSta_DOWN = 3;
         };
         HotBkChlSta hot_bk_chl_sta = 12 [json_name = "hot-bk-chl-sta"];
         enum HotBkFsmSta {
            INVALID_ENUM_VALUE_HotBkFsmSta = 0;
            HotBkFsmSta_INIT = 1;
            HotBkFsmSta_BATCHBACKUP = 2;
            HotBkFsmSta_REALUPDATE = 3;
         };
         HotBkFsmSta hot_bk_fsm_sta = 13 [json_name = "hot-bk-fsm-sta"];
         message UsedPolicys {
            message UsedPolicy {
               string policy_name = 1 [json_name = "policy-name"];
            }
            repeated UsedPolicy used_policy = 1 [json_name = "used-policy"];
         }
         UsedPolicys used_policys = 14 [json_name = "used-policys"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 8 [json_name = "instances"];
   message ActiveIpsecSlots {
      message ActiveIpsecSlot {
         string slot_id = 1 [json_name = "slot-id"];
      }
      repeated ActiveIpsecSlot active_ipsec_slot = 1 [json_name = "active-ipsec-slot"];
   }
   ActiveIpsecSlots active_ipsec_slots = 9 [json_name = "active-ipsec-slots"];
   message Identitys {
      message Identity {
         string identity_name = 1 [json_name = "identity-name"];
         message Ips {
            message Ip {
               string ipaddress = 1 [json_name = "ipaddress"];
               string mask = 2 [json_name = "mask"];
            }
            repeated Ip ip = 1 [json_name = "ip"];
         }
         Ips ips = 2 [json_name = "ips"];
         message Dns {
            message Dn {
               string dn6 = 1 [json_name = "dn"];
            }
            repeated Dn dn = 1 [json_name = "dn"];
         }
         Dns dns = 3 [json_name = "dns"];
         message Fqdns {
            message Fqdn {
               string fqdn6 = 1 [json_name = "fqdn"];
            }
            repeated Fqdn fqdn = 1 [json_name = "fqdn"];
         }
         Fqdns fqdns = 4 [json_name = "fqdns"];
         message UserFqdns {
            message UserFqdn {
               string user_fqdn = 1 [json_name = "user-fqdn"];
            }
            repeated UserFqdn user_fqdn = 1 [json_name = "user-fqdn"];
         }
         UserFqdns user_fqdns = 5 [json_name = "user-fqdns"];
      }
      repeated Identity identity = 1 [json_name = "identity"];
   }
   Identitys identitys = 10 [json_name = "identitys"];
   message IpsecConnections {
      message IpsecConnection {
         string if_name = 1 [json_name = "if-name"];
         string policy_name = 2 [json_name = "policy-name"];
         uint32 instance_id = 3 [json_name = "instance-id"];
         bool slave_down = 4 [json_name = "slave-down"];
         message PortMirror {
            uint32 observer_idx_inbound = 1 [json_name = "observer-idx-inbound"];
            string acl_inbound = 2 [json_name = "acl-inbound"];
            uint32 observer_idx_outbound = 3 [json_name = "observer-idx-outbound"];
            string acl_outbound = 4 [json_name = "acl-outbound"];
         }
         PortMirror port_mirror = 5 [json_name = "port-mirror"];
         message TrafficPolicy {
            string acl_inbound = 1 [json_name = "acl-inbound"];
            string acl_outbound = 2 [json_name = "acl-outbound"];
         }
         TrafficPolicy traffic_policy = 6 [json_name = "traffic-policy"];
      }
      repeated IpsecConnection ipsec_connection = 1 [json_name = "ipsec-connection"];
   }
   IpsecConnections ipsec_connections = 11 [json_name = "ipsec-connections"];
   message StaticSas {
      message StaticSa {
         string name = 1 [json_name = "name"];
         string proposal_name = 2 [json_name = "proposal-name"];
         string inbound_ah_authpasswd = 3 [json_name = "inbound-ah-authpasswd"];
         string outbound_ah_authpasswd = 4 [json_name = "outbound-ah-authpasswd"];
         string inbound_esp_authpasswd = 5 [json_name = "inbound-esp-authpasswd"];
         string outbound_esp_authpasswd = 6 [json_name = "outbound-esp-authpasswd"];
         string inbound_esp_encrpasswd = 7 [json_name = "inbound-esp-encrpasswd"];
         string outbound_esp_encrpasswd = 8 [json_name = "outbound-esp-encrpasswd"];
         string inbound_ah_strkey = 9 [json_name = "inbound-ah-strkey"];
         string outbound_ah_strkey = 10 [json_name = "outbound-ah-strkey"];
         string inbound_esp_strkey = 11 [json_name = "inbound-esp-strkey"];
         string outbound_esp_strkey = 12 [json_name = "outbound-esp-strkey"];
         uint32 inbound_ah_spi = 13 [json_name = "inbound-ah-spi"];
         uint32 outbound_ah_spi = 14 [json_name = "outbound-ah-spi"];
         uint32 inbound_esp_spi = 15 [json_name = "inbound-esp-spi"];
         uint32 outbound_esp_spi = 16 [json_name = "outbound-esp-spi"];
         uint32 reference_count = 17 [json_name = "reference-count"];
      }
      repeated StaticSa static_sa = 1 [json_name = "static-sa"];
   }
   StaticSas static_sas = 12 [json_name = "static-sas"];
   message IpsecResource {
      uint32 tunnel_specificaiton = 1 [json_name = "tunnel-specificaiton"];
      uint32 tunnel_number = 2 [json_name = "tunnel-number"];
   }
   IpsecResource ipsec_resource = 13 [json_name = "ipsec-resource"];
   message IpsecTunnels {
      message IpsecTunnel {
         string if_name = 1 [json_name = "if-name"];
         string policy_name = 2 [json_name = "policy-name"];
         uint32 policy_id = 3 [json_name = "policy-id"];
         string tunnel_vpn_name = 4 [json_name = "tunnel-vpn-name"];
         string peer_address = 5 [json_name = "peer-address"];
         uint32 peer_port = 6 [json_name = "peer-port"];
         string local_address = 7 [json_name = "local-address"];
         uint32 local_port = 8 [json_name = "local-port"];
         string flow_vpn_name = 9 [json_name = "flow-vpn-name"];
         string flow_info = 10 [json_name = "flow-info"];
         enum Status {
            INVALID_ENUM_VALUE_Status = 0;
            Status_UP = 1;
            Status_DOWN = 2;
         };
         Status status = 11 [json_name = "status"];
         message TrafficStatistics {
            uint64 packets_encrypted = 1 [json_name = "packets-encrypted"];
            uint64 packets_encrypt_drop = 2 [json_name = "packets-encrypt-drop"];
            uint64 packets_decrypted = 3 [json_name = "packets-decrypted"];
            uint64 packets_decrypt_drop = 4 [json_name = "packets-decrypt-drop"];
         }
         TrafficStatistics traffic_statistics = 12 [json_name = "traffic-statistics"];
         string policy_alias = 13 [json_name = "policy-alias"];
         uint64 packets_encrypted = 14 [json_name = "packets-encrypted"];
         uint64 packets_encrypt_drop = 15 [json_name = "packets-encrypt-drop"];
         uint64 packets_decrypted = 16 [json_name = "packets-decrypted"];
         uint64 packets_decrypt_drop = 17 [json_name = "packets-decrypt-drop"];
      }
      repeated IpsecTunnel ipsec_tunnel = 1 [json_name = "ipsec-tunnel"];
   }
   IpsecTunnels ipsec_tunnels = 14 [json_name = "ipsec-tunnels"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module openconfig-if-aggregate
// revision 2020-05-01
// revision 2019-04-16
// revision 2018-11-21
// revision 2018-03-23
// revision 2018-01-05
// revision 2017-12-22
// revision 2017-12-21
// revision 2017-07-14
// revision 2016-12-22
// namespace http://openconfig.net/yang/interfaces/aggregate

package openconfig_if_aggregate;

message Interfaces {
   message Interface {
      message Config {
         string description = 1;
         bool enabled = 2;
         bool loopback_mode = 3;
         uint32 mtu = 4;
         string name = 5;
         string type = 6;
      }
      Config config = 1;
      message HoldTime {
         message Config {
            uint32 down = 1;
            uint32 up = 2;
         }
         Config config = 1;
         message State {
            uint32 down = 1;
            uint32 up = 2;
         }
         State state = 2;
      }
      HoldTime hold_time = 2;
      string name = 3;
      message State {
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_TESTING = 1;
            AdminStatus_UP = 2;
         };
         AdminStatus admin_status = 1;
         message Counters {
            uint64 carrier_transitions = 1;
            uint64 in_broadcast_pkts = 2;
            uint64 in_discards = 3;
            uint64 in_errors = 4;
            uint64 in_fcs_errors = 5;
            uint64 in_multicast_pkts = 6;
            uint64 in_octets = 7;
            uint64 in_unicast_pkts = 8;
            uint64 in_unknown_protos = 9;
            uint64 last_clear = 10;
            uint64 out_broadcast_pkts = 11;
            uint64 out_discards = 12;
            uint64 out_errors = 13;
            uint64 out_multicast_pkts = 14;
            uint64 out_octets = 15;
            uint64 out_unicast_pkts = 16;
         }
         Counters counters = 2;
         string description = 3;
         bool enabled = 4;
         uint32 ifindex = 5;
         uint64 last_change = 6;
         bool loopback_mode = 7;
         uint32 mtu = 8;
         string name = 9;
         enum OperStatus {
            OperStatus_DORMANT = 0;
            OperStatus_DOWN = 1;
            OperStatus_LOWER_LAYER_DOWN = 2;
            OperStatus_NOT_PRESENT = 3;
            OperStatus_TESTING = 4;
            OperStatus_UNKNOWN = 5;
            OperStatus_UP = 6;
         };
         OperStatus oper_status = 10;
         string type = 11;
      }
      State state = 4;
      message Subinterfaces {
         message Subinterface {
            message Config {
               string description = 1;
               bool enabled = 2;
               uint32 index = 3;
            }
            Config config = 1;
            uint32 index = 2;
            message State {
               enum AdminStatus {
                  AdminStatus_DOWN = 0;
                  AdminStatus_TESTING = 1;
                  AdminStatus_UP = 2;
               };
               AdminStatus admin_status = 1;
               message Counters {
                  uint64 carrier_transitions = 1;
                  uint64 in_broadcast_pkts = 2;
                  uint64 in_discards = 3;
                  uint64 in_errors = 4;
                  uint64 in_fcs_errors = 5;
                  uint64 in_multicast_pkts = 6;
                  uint64 in_octets = 7;
                  uint64 in_unicast_pkts = 8;
                  uint64 in_unknown_protos = 9;
                  uint64 last_clear = 10;
                  uint64 out_broadcast_pkts = 11;
                  uint64 out_discards = 12;
                  uint64 out_errors = 13;
                  uint64 out_multicast_pkts = 14;
                  uint64 out_octets = 15;
                  uint64 out_unicast_pkts = 16;
               }
               Counters counters = 2;
               string description = 3;
               bool enabled = 4;
               uint32 ifindex = 5;
               uint32 index = 6;
               uint64 last_change = 7;
               string name = 8;
               enum OperStatus {
                  OperStatus_DORMANT = 0;
                  OperStatus_DOWN = 1;
                  OperStatus_LOWER_LAYER_DOWN = 2;
                  OperStatus_NOT_PRESENT = 3;
                  OperStatus_TESTING = 4;
                  OperStatus_UNKNOWN = 5;
                  OperStatus_UP = 6;
               };
               OperStatus oper_status = 9;
            }
            State state = 3;
         }
         repeated Subinterface subinterface = 1;
      }
      Subinterfaces subinterfaces = 5;
      message Aggregation {
         message Config {
            enum LagType {
               LagType_LACP = 0;
               LagType_STATIC = 1;
            };
            LagType lag_type = 1;
            uint32 min_links = 2;
         }
         Config config = 1;
         message State {
            uint32 lag_speed = 1;
            enum LagType {
               LagType_LACP = 0;
               LagType_STATIC = 1;
            };
            LagType lag_type = 2;
            repeated string member = 3;
            uint32 min_links = 4;
         }
         State state = 2;
      }
      Aggregation aggregation = 6;
      message Ethernet {
         message Config {
            bool auto_negotiate = 1;
            enum DuplexMode {
               DuplexMode_FULL = 0;
               DuplexMode_HALF = 1;
            };
            DuplexMode duplex_mode = 2;
            bool enable_flow_control = 3;
            string mac_address = 4;
            string port_speed = 5;
            string aggregate_id = 6;
         }
         Config config = 1;
         message State {
            bool auto_negotiate = 1;
            message Counters {
               uint64 in_8021q_frames = 1;
               uint64 in_crc_errors = 2;
               uint64 in_fragment_frames = 3;
               uint64 in_jabber_frames = 4;
               uint64 in_mac_control_frames = 5;
               uint64 in_mac_pause_frames = 6;
               uint64 in_oversize_frames = 7;
               uint64 out_8021q_frames = 8;
               uint64 out_mac_control_frames = 9;
               uint64 out_mac_pause_frames = 10;
            }
            Counters counters = 2;
            enum DuplexMode {
               DuplexMode_FULL = 0;
               DuplexMode_HALF = 1;
            };
            DuplexMode duplex_mode = 3;
            bool enable_flow_control = 4;
            string hw_mac_address = 5;
            string mac_address = 6;
            enum NegotiatedDuplexMode {
               NegotiatedDuplexMode_FULL = 0;
               NegotiatedDuplexMode_HALF = 1;
            };
            NegotiatedDuplexMode negotiated_duplex_mode = 7;
            string negotiated_port_speed = 8;
            string port_speed = 9;
            string aggregate_id = 10;
         }
         State state = 2;
      }
      Ethernet ethernet = 7;
   }
   repeated Interface interface = 1;
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


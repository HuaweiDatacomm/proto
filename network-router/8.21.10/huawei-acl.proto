syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-27 14:54:00
// ProtoYang-version 1
// module huawei-acl
// revision 2022-04-20
// revision 2022-02-10
// revision 2020-03-13
// revision 2020-03-04
// revision 2020-01-08
// revision 2019-06-23
// namespace urn:huawei:yang:huawei-acl

package huawei_acl;

message Acl {
   message Groups {
      message Group {
         string identity = 1 [json_name = "identity"];
         enum Type {
            Type_INTERFACE = 0;
            Type_LINK = 1;
            Type_BASIC = 2;
            Type_ADVANCE = 3;
            Type_MPLS = 7;
            Type_USER = 8;
            Type_ARP = 9;
            Type_UCL = 10;
         };
         Type type = 2 [json_name = "type"];
         enum MatchOrder {
            MatchOrder_CONFIG = 0;
            MatchOrder_AUTO = 1;
         };
         MatchOrder match_order = 3 [json_name = "match-order"];
         uint32 step = 4 [json_name = "step"];
         string description = 5 [json_name = "description"];
         uint32 number4 = 6 [json_name = "number"];
         message RuleBasics {
            message RuleBasic {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 4 [json_name = "active-status"];
               string source_ipaddr = 5 [json_name = "source-ipaddr"];
               string source_wild = 6 [json_name = "source-wild"];
               enum FragmentType {
                  FragmentType_FRAGMENTX_SUBSEQ = 0;
                  FragmentType_FRAGMENT = 1;
                  FragmentType_NONX_FRAGMENT = 2;
                  FragmentType_NONX_SUBSEQ = 3;
                  FragmentType_FRAGMENTX_SPEX_FIRST = 4;
               };
               FragmentType fragment_type = 7 [json_name = "fragment-type"];
               string description = 9 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 10 [json_name = "match-statistics"];
               uint32 priority = 11 [json_name = "priority"];
               string time_range_name = 12 [json_name = "time-range-name"];
               uint32 ias_priority = 13 [json_name = "ias-priority"];
               message Vpn_VpnInstance {
                  string vpn_name = 1 [json_name = "vpn-name"];
               }
               message Vpn_VpnAny {
                  bool vpn_any = 1 [json_name = "vpn-any"];
               }
               oneof Vpn {
                  Vpn_VpnInstance vpn_vpn_instance = 14 [json_name = "vpn-instance"];
                  Vpn_VpnAny vpn_vpn_any = 15 [json_name = "vpn-any"];
               }
               bool log_enable = 16 [json_name = "log-enable"];
            }
            repeated RuleBasic rule_basic = 1 [json_name = "rule-basic"];
         }
         RuleBasics rule_basics = 7 [json_name = "rule-basics"];
         message RuleAdvances {
            message RuleAdvance {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 4 [json_name = "active-status"];
               uint32 protocol = 5 [json_name = "protocol"];
               string description = 14 [json_name = "description"];
               enum FragmentType {
                  FragmentType_FRAGMENTX_SUBSEQ = 0;
                  FragmentType_FRAGMENT = 1;
                  FragmentType_NONX_FRAGMENT = 2;
                  FragmentType_NONX_SUBSEQ = 3;
                  FragmentType_FRAGMENTX_SPEX_FIRST = 4;
               };
               FragmentType fragment_type = 15 [json_name = "fragment-type"];
               uint32 icmp_type = 17 [json_name = "icmp-type"];
               uint32 icmp_type_end = 18 [json_name = "icmp-type-end"];
               uint32 icmp_code = 19 [json_name = "icmp-code"];
               uint32 vni = 20 [json_name = "vni"];
               uint32 priority = 21 [json_name = "priority"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 22 [json_name = "match-statistics"];
               string time_range_name = 23 [json_name = "time-range-name"];
               bool log_enable = 24 [json_name = "log-enable"];
               uint32 ias_priority = 25 [json_name = "ias-priority"];
               message ProtocolType_Single {
                  uint32 protocol = 1 [json_name = "protocol"];
               }
               message ProtocolType_Zero {
                  bool protocol_zero = 1 [json_name = "protocol-zero"];
               }
               oneof ProtocolType {
                  ProtocolType_Single protocol_type_single = 26 [json_name = "single"];
                  ProtocolType_Zero protocol_type_zero = 27 [json_name = "zero"];
               }
               message Source_Ip {
                  string source_ipaddr = 1 [json_name = "source-ipaddr"];
                  string source_wild = 2 [json_name = "source-wild"];
               }
               message Source_IpPool {
                  string source_pool_name = 1 [json_name = "source-pool-name"];
               }
               oneof Source {
                  Source_Ip source_ip = 28 [json_name = "ip"];
                  Source_IpPool source_ip_pool = 29 [json_name = "ip-pool"];
               }
               message Dest_Ip {
                  string dest_ipaddr = 1 [json_name = "dest-ipaddr"];
                  string dest_wild = 2 [json_name = "dest-wild"];
               }
               message Dest_IpPool {
                  string dest_pool_name = 1 [json_name = "dest-pool-name"];
               }
               oneof Dest {
                  Dest_Ip dest_ip = 30 [json_name = "ip"];
                  Dest_IpPool dest_ip_pool = 31 [json_name = "ip-pool"];
               }
               message PacketsPriority_Tos {
                  uint32 precedence = 1 [json_name = "precedence"];
                  uint32 tos7 = 2 [json_name = "tos"];
               }
               message PacketsPriority_Dscp {
                  uint32 dscp7 = 1 [json_name = "dscp"];
               }
               oneof PacketsPriority {
                  PacketsPriority_Tos packets_priority_tos = 32 [json_name = "tos"];
                  PacketsPriority_Dscp packets_priority_dscp = 33 [json_name = "dscp"];
               }
               message Vpn_VpnInstance {
                  string vpn_name = 1 [json_name = "vpn-name"];
               }
               message Vpn_VpnAny {
                  bool vpn_any = 1 [json_name = "vpn-any"];
               }
               oneof Vpn {
                  Vpn_VpnInstance vpn_vpn_instance = 34 [json_name = "vpn-instance"];
                  Vpn_VpnAny vpn_vpn_any = 35 [json_name = "vpn-any"];
               }
               message TcpFlag_Mask {
                  uint32 tcp_flag_value = 1 [json_name = "tcp-flag-value"];
                  uint32 tcp_flag_mask = 2 [json_name = "tcp-flag-mask"];
               }
               message TcpFlag_Established {
                  bool established7 = 1 [json_name = "established"];
               }
               oneof TcpFlag {
                  TcpFlag_Mask tcp_flag_mask = 36 [json_name = "mask"];
                  TcpFlag_Established tcp_flag_established = 37 [json_name = "established"];
               }
               message SourcePort_Range {
                  uint32 source_port_begin = 1 [json_name = "source-port-begin"];
                  uint32 source_port_end = 2 [json_name = "source-port-end"];
               }
               message SourcePort_NotEqual {
                  uint32 source_port_value = 1 [json_name = "source-port-value"];
               }
               message SourcePort_PortPool {
                  string src_port_pool_name = 1 [json_name = "src-port-pool-name"];
               }
               oneof SourcePort {
                  SourcePort_Range source_port_range = 38 [json_name = "range"];
                  SourcePort_NotEqual source_port_not_equal = 39 [json_name = "not-equal"];
                  SourcePort_PortPool source_port_port_pool = 47 [json_name = "port-pool"];
               }
               message DestPort_Range {
                  uint32 dest_port_begin = 1 [json_name = "dest-port-begin"];
                  uint32 dest_port_end = 2 [json_name = "dest-port-end"];
               }
               message DestPort_NotEqual {
                  uint32 dest_port_value = 1 [json_name = "dest-port-value"];
               }
               message DestPort_PortPool {
                  string dest_port_pool_name = 1 [json_name = "dest-port-pool-name"];
               }
               oneof DestPort {
                  DestPort_Range dest_port_range = 40 [json_name = "range"];
                  DestPort_NotEqual dest_port_not_equal = 41 [json_name = "not-equal"];
                  DestPort_PortPool dest_port_port_pool = 48 [json_name = "port-pool"];
               }
               message Ttl_Range {
                  uint32 ttl_begin = 1 [json_name = "ttl-begin"];
                  uint32 ttl_end = 2 [json_name = "ttl-end"];
               }
               message Ttl_NotEqual {
                  uint32 ttl_value = 1 [json_name = "ttl-value"];
               }
               oneof Ttl {
                  Ttl_Range ttl_range = 42 [json_name = "range"];
                  Ttl_NotEqual ttl_not_equal = 43 [json_name = "not-equal"];
               }
               message PacketLength_Range {
                  uint32 packet_len_begin = 1 [json_name = "packet-len-begin"];
                  uint32 packet_len_end = 2 [json_name = "packet-len-end"];
               }
               message PacketLength_NotEqual {
                  uint32 packet_len_value = 1 [json_name = "packet-len-value"];
               }
               oneof PacketLength {
                  PacketLength_Range packet_length_range = 44 [json_name = "range"];
                  PacketLength_NotEqual packet_length_not_equal = 45 [json_name = "not-equal"];
               }
               bool ttl_expired = 46 [json_name = "ttl-expired"];
               uint32 igmp_type = 49 [json_name = "igmp-type"];
               enum VxlanType {
                  VxlanType_VXLAN = 0;
                  VxlanType_VXLANX_GPE = 1;
               };
               VxlanType vxlan_type = 50 [json_name = "vxlan-type"];
            }
            repeated RuleAdvance rule_advance = 1 [json_name = "rule-advance"];
         }
         RuleAdvances rule_advances = 8 [json_name = "rule-advances"];
         message RuleEthernets {
            message RuleEthernet {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 4 [json_name = "active-status"];
               string frame_type = 5 [json_name = "frame-type"];
               string frame_mask = 6 [json_name = "frame-mask"];
               string source_mac = 7 [json_name = "source-mac"];
               string source_mac_mask = 8 [json_name = "source-mac-mask"];
               string dest_mac = 9 [json_name = "dest-mac"];
               string dest_mac_mask = 10 [json_name = "dest-mac-mask"];
               uint32 ce_vlan_value_8021p = 11 [json_name = "ce-vlan-value-8021p"];
               string description = 12 [json_name = "description"];
               uint32 priority = 13 [json_name = "priority"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 14 [json_name = "match-statistics"];
               string time_range_name = 15 [json_name = "time-range-name"];
               uint32 ias_priority = 16 [json_name = "ias-priority"];
               uint32 vlan_id = 17 [json_name = "vlan-id"];
               uint32 ce_vlan_id = 18 [json_name = "ce-vlan-id"];
               uint32 value_8021p = 19 [json_name = "value-8021p"];
               string vlan_id_mask = 20 [json_name = "vlan-id-mask"];
               string ce_vlan_id_mask = 21 [json_name = "ce-vlan-id-mask"];
               bool double_tag = 22 [json_name = "double-tag"];
               enum EncapType {
                  INVALID_ENUM_VALUE_EncapType = 0;
                  EncapType_ETHERX_II = 1;
                  EncapType_X_802X_3 = 2;
                  EncapType_SNAP = 3;
               };
               EncapType encap_type = 23 [json_name = "encap-type"];
            }
            repeated RuleEthernet rule_ethernet = 1 [json_name = "rule-ethernet"];
         }
         RuleEthernets rule_ethernets = 9 [json_name = "rule-ethernets"];
         message RuleUcls {
            message RuleUcl {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               uint32 protocol = 4 [json_name = "protocol"];
               string description = 9 [json_name = "description"];
               uint32 priority = 10 [json_name = "priority"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 11 [json_name = "active-status"];
               enum FragmentType {
                  FragmentType_FRAGMENTX_SUBSEQ = 0;
                  FragmentType_FRAGMENT = 1;
                  FragmentType_NONX_FRAGMENT = 2;
                  FragmentType_NONX_SUBSEQ = 3;
                  FragmentType_FRAGMENTX_SPEX_FIRST = 4;
               };
               FragmentType fragment_type = 12 [json_name = "fragment-type"];
               uint32 icmp_type = 13 [json_name = "icmp-type"];
               uint32 icmp_code = 14 [json_name = "icmp-code"];
               uint32 vlan_id = 15 [json_name = "vlan-id"];
               uint32 ce_vlan_id = 16 [json_name = "ce-vlan-id"];
               string time_range_name = 17 [json_name = "time-range-name"];
               message ProtocolType_Single {
                  uint32 protocol = 1 [json_name = "protocol"];
               }
               message ProtocolType_Zero {
                  bool protocol_zero = 1 [json_name = "protocol-zero"];
               }
               oneof ProtocolType {
                  ProtocolType_Single protocol_type_single = 18 [json_name = "single"];
                  ProtocolType_Zero protocol_type_zero = 19 [json_name = "zero"];
               }
               message Source_SourceIpAny {
                  bool source_ip_any = 1 [json_name = "source-ip-any"];
               }
               message Source_SourceIpaddr {
                  string source_ipaddr = 1 [json_name = "source-ipaddr"];
                  string source_wild = 2 [json_name = "source-wild"];
               }
               message Source_SourcePool {
                  string source_pool_name = 1 [json_name = "source-pool-name"];
               }
               message Source_SrcUserGroupAny {
                  bool src_user_group_any = 1 [json_name = "src-user-group-any"];
               }
               message Source_SrcUserGroup {
                  string src_user_group_name = 1 [json_name = "src-user-group-name"];
               }
               message Source_SrcSrvGroupAny {
                  bool src_srv_group_any = 1 [json_name = "src-srv-group-any"];
               }
               message Source_SrcSrvGroup {
                  string src_srv_group_name = 1 [json_name = "src-srv-group-name"];
               }
               message Source_SourceUclGrpName {
                  string src_ucl_grp_name = 1 [json_name = "src-ucl-grp-name"];
               }
               message Source_SourceUclGrpIndex {
                  uint32 src_ucl_grp_index = 1 [json_name = "src-ucl-grp-index"];
               }
               oneof Source {
                  Source_SourceIpAny source_source_ip_any = 20 [json_name = "source-ip-any"];
                  Source_SourceIpaddr source_source_ipaddr = 21 [json_name = "source-ipaddr"];
                  Source_SourcePool source_source_pool = 22 [json_name = "source-pool"];
                  Source_SrcUserGroupAny source_src_user_group_any = 23 [json_name = "src-user-group-any"];
                  Source_SrcUserGroup source_src_user_group = 24 [json_name = "src-user-group"];
                  Source_SrcSrvGroupAny source_src_srv_group_any = 25 [json_name = "src-srv-group-any"];
                  Source_SrcSrvGroup source_src_srv_group = 26 [json_name = "src-srv-group"];
                  Source_SourceUclGrpName source_source_ucl_grp_name = 27 [json_name = "source-ucl-grp-name"];
                  Source_SourceUclGrpIndex source_source_ucl_grp_index = 28 [json_name = "source-ucl-grp-index"];
               }
               message Dest_DestIpAny {
                  bool dest_ip_any = 1 [json_name = "dest-ip-any"];
               }
               message Dest_DestIpaddr {
                  string dest_ipaddr = 1 [json_name = "dest-ipaddr"];
                  string dest_wild = 2 [json_name = "dest-wild"];
               }
               message Dest_DestPool {
                  string dest_pool_name = 1 [json_name = "dest-pool-name"];
               }
               message Dest_DestUserGroupAny {
                  bool dest_user_group_any = 1 [json_name = "dest-user-group-any"];
               }
               message Dest_DestUserGroup {
                  string dest_user_group_name = 1 [json_name = "dest-user-group-name"];
               }
               message Dest_DestSrvGroupAny {
                  bool dest_srv_group_any = 1 [json_name = "dest-srv-group-any"];
               }
               message Dest_DestSrvGroup {
                  string dest_srv_group_name = 1 [json_name = "dest-srv-group-name"];
               }
               message Dest_DestUclGrpName {
                  string dest_ucl_grp_name = 1 [json_name = "dest-ucl-grp-name"];
               }
               message Dest_DestUclGrpIndex {
                  uint32 dest_ucl_grp_index = 1 [json_name = "dest-ucl-grp-index"];
               }
               oneof Dest {
                  Dest_DestIpAny dest_dest_ip_any = 29 [json_name = "dest-ip-any"];
                  Dest_DestIpaddr dest_dest_ipaddr = 30 [json_name = "dest-ipaddr"];
                  Dest_DestPool dest_dest_pool = 31 [json_name = "dest-pool"];
                  Dest_DestUserGroupAny dest_dest_user_group_any = 32 [json_name = "dest-user-group-any"];
                  Dest_DestUserGroup dest_dest_user_group = 33 [json_name = "dest-user-group"];
                  Dest_DestSrvGroupAny dest_dest_srv_group_any = 34 [json_name = "dest-srv-group-any"];
                  Dest_DestSrvGroup dest_dest_srv_group = 35 [json_name = "dest-srv-group"];
                  Dest_DestUclGrpName dest_dest_ucl_grp_name = 36 [json_name = "dest-ucl-grp-name"];
                  Dest_DestUclGrpIndex dest_dest_ucl_grp_index = 37 [json_name = "dest-ucl-grp-index"];
               }
               message SourcePort_Range {
                  uint32 source_port_begin = 1 [json_name = "source-port-begin"];
                  uint32 source_port_end = 2 [json_name = "source-port-end"];
               }
               oneof SourcePort {
                  SourcePort_Range source_port_range = 38 [json_name = "range"];
               }
               message DestPort_Range {
                  uint32 dest_port_begin = 1 [json_name = "dest-port-begin"];
                  uint32 dest_port_end = 2 [json_name = "dest-port-end"];
               }
               oneof DestPort {
                  DestPort_Range dest_port_range = 39 [json_name = "range"];
               }
               message PacketsPriority_Tos {
                  uint32 precedence = 1 [json_name = "precedence"];
                  uint32 tos7 = 2 [json_name = "tos"];
               }
               message PacketsPriority_Dscp {
                  uint32 dscp7 = 1 [json_name = "dscp"];
               }
               oneof PacketsPriority {
                  PacketsPriority_Tos packets_priority_tos = 40 [json_name = "tos"];
                  PacketsPriority_Dscp packets_priority_dscp = 41 [json_name = "dscp"];
               }
               message TcpFlag_Mask {
                  uint32 tcp_flag_value = 1 [json_name = "tcp-flag-value"];
                  uint32 tcp_flag_mask = 2 [json_name = "tcp-flag-mask"];
               }
               message TcpFlag_FlagName {
                  enum TcpFlagName {
                     TcpFlagName_CLEARX_TCPFLAGNAME = 0;
                     TcpFlagName_FIN = 1;
                     TcpFlagName_SYN = 2;
                     TcpFlagName_RST = 4;
                     TcpFlagName_PSH = 8;
                     TcpFlagName_ACK = 16;
                     TcpFlagName_URG = 32;
                     TcpFlagName_ECE = 64;
                     TcpFlagName_CWR = 128;
                     TcpFlagName_NS = 256;
                     TcpFlagName_ESTABLISHED = 512;
                  };
                  TcpFlagName tcp_flag_name = 1 [json_name = "tcp-flag-name"];
               }
               oneof TcpFlag {
                  TcpFlag_Mask tcp_flag_mask = 42 [json_name = "mask"];
                  TcpFlag_FlagName tcp_flag_flag_name = 43 [json_name = "flag-name"];
               }
               bool log_flag = 44 [json_name = "log-flag"];
               message Vpn_VpnInstance {
                  string vpn_name = 1 [json_name = "vpn-name"];
               }
               oneof Vpn {
                  Vpn_VpnInstance vpn_vpn_instance = 45 [json_name = "vpn-instance"];
               }
               message SourceGroup_SourceUclGrpName {
                  string src_ucl_grp_name = 1 [json_name = "src-ucl-grp-name"];
               }
               message SourceGroup_SourceUclGrpIndex {
                  uint32 src_ucl_grp_index = 1 [json_name = "src-ucl-grp-index"];
               }
               oneof SourceGroup {
                  SourceGroup_SourceUclGrpName source_group_source_ucl_grp_name = 46 [json_name = "source-ucl-grp-name"];
                  SourceGroup_SourceUclGrpIndex source_group_source_ucl_grp_index = 47 [json_name = "source-ucl-grp-index"];
               }
               message DestGroup_DestUclGrpName {
                  string dest_ucl_grp_name = 1 [json_name = "dest-ucl-grp-name"];
               }
               message DestGroup_DestUclGrpIndex {
                  uint32 dest_ucl_grp_index = 1 [json_name = "dest-ucl-grp-index"];
               }
               oneof DestGroup {
                  DestGroup_DestUclGrpName dest_group_dest_ucl_grp_name = 48 [json_name = "dest-ucl-grp-name"];
                  DestGroup_DestUclGrpIndex dest_group_dest_ucl_grp_index = 49 [json_name = "dest-ucl-grp-index"];
               }
            }
            repeated RuleUcl rule_ucl = 1 [json_name = "rule-ucl"];
         }
         RuleUcls rule_ucls = 10 [json_name = "rule-ucls"];
         message RuleMplss {
            message RuleMpls {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               string description = 4 [json_name = "description"];
               message Lables {
                  message Lable {
                     uint32 sequence = 1 [json_name = "sequence"];
                     uint32 exp_value = 2 [json_name = "exp-value"];
                     uint32 label_value = 3 [json_name = "label-value"];
                     uint32 ttl_begin = 4 [json_name = "ttl-begin"];
                     uint32 ttl_end = 5 [json_name = "ttl-end"];
                  }
                  repeated Lable lable = 1 [json_name = "lable"];
               }
               Lables lables = 5 [json_name = "lables"];
               uint32 priority = 6 [json_name = "priority"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 7 [json_name = "match-statistics"];
            }
            repeated RuleMpls rule_mpls = 1 [json_name = "rule-mpls"];
         }
         RuleMplss rule_mplss = 11 [json_name = "rule-mplss"];
         message RuleInterfaces {
            message RuleInterface {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               string time_range_name = 4 [json_name = "time-range-name"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 5 [json_name = "active-status"];
               string description = 6 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 7 [json_name = "match-statistics"];
               message Interface_InterfaceAny {
                  bool if_any = 1 [json_name = "if-any"];
               }
               message Interface_InterfaceName {
                  string if_name = 1 [json_name = "if-name"];
               }
               oneof Interface {
                  Interface_InterfaceAny interface_interface_any = 8 [json_name = "interface-any"];
                  Interface_InterfaceName interface_interface_name = 9 [json_name = "interface-name"];
               }
            }
            repeated RuleInterface rule_interface = 1 [json_name = "rule-interface"];
         }
         RuleInterfaces rule_interfaces = 12 [json_name = "rule-interfaces"];
         message RuleUsers {
            message RuleUser {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               string time_range_name = 4 [json_name = "time-range-name"];
               enum OffsetBegin {
                  INVALID_ENUM_VALUE_OffsetBegin = 0;
                  OffsetBegin_L2X_HEAD = 1;
                  OffsetBegin_IPV4X_HEAD = 2;
                  OffsetBegin_L4X_HEAD = 3;
                  OffsetBegin_INNERX_IPV4X_HEAD = 5;
               };
               OffsetBegin offset_begin = 5 [json_name = "offset-begin"];
               string string1 = 6 [json_name = "string1"];
               string string_mask1 = 7 [json_name = "string-mask1"];
               uint32 offset1 = 8 [json_name = "offset1"];
               string string2 = 9 [json_name = "string2"];
               string string_mask2 = 10 [json_name = "string-mask2"];
               uint32 offset2 = 11 [json_name = "offset2"];
               string string3 = 12 [json_name = "string3"];
               string string_mask3 = 13 [json_name = "string-mask3"];
               uint32 offset3 = 14 [json_name = "offset3"];
               string string4 = 15 [json_name = "string4"];
               string string_mask4 = 16 [json_name = "string-mask4"];
               uint32 offset4 = 17 [json_name = "offset4"];
               string string5 = 18 [json_name = "string5"];
               string string_mask5 = 19 [json_name = "string-mask5"];
               uint32 offset5 = 20 [json_name = "offset5"];
               string string6 = 21 [json_name = "string6"];
               string string_mask6 = 22 [json_name = "string-mask6"];
               uint32 offset6 = 23 [json_name = "offset6"];
               string string7 = 24 [json_name = "string7"];
               string string_mask7 = 25 [json_name = "string-mask7"];
               uint32 offset7 = 26 [json_name = "offset7"];
               string string8 = 27 [json_name = "string8"];
               string string_mask8 = 28 [json_name = "string-mask8"];
               uint32 offset8 = 29 [json_name = "offset8"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 30 [json_name = "active-status"];
               string description = 31 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 32 [json_name = "match-statistics"];
            }
            repeated RuleUser rule_user = 1 [json_name = "rule-user"];
         }
         RuleUsers rule_users = 14 [json_name = "rule-users"];
         message RuleArps {
            message RuleArp {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               string time_range_name = 4 [json_name = "time-range-name"];
               enum PacketMode {
                  PacketMode_REQUEST = 0;
                  PacketMode_REPLY = 1;
               };
               PacketMode packet_mode = 5 [json_name = "packet-mode"];
               string source_ipaddr = 6 [json_name = "source-ipaddr"];
               string source_wild = 7 [json_name = "source-wild"];
               string dest_ipaddr = 8 [json_name = "dest-ipaddr"];
               string dest_wild = 9 [json_name = "dest-wild"];
               string source_mac = 10 [json_name = "source-mac"];
               string source_mac_mask = 11 [json_name = "source-mac-mask"];
               string dest_mac = 12 [json_name = "dest-mac"];
               string dest_mac_mask = 13 [json_name = "dest-mac-mask"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 14 [json_name = "active-status"];
               string description = 15 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 16 [json_name = "match-statistics"];
            }
            repeated RuleArp rule_arp = 1 [json_name = "rule-arp"];
         }
         RuleArps rule_arps = 15 [json_name = "rule-arps"];
      }
      repeated Group group = 1 [json_name = "group"];
   }
   Groups groups = 1 [json_name = "groups"];
   message Group6S {
      message Group6 {
         string identity = 1 [json_name = "identity"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_BASIC = 4;
            Type_ADVANCE = 5;
            Type_INTERFACE = 6;
            Type_UCL = 11;
         };
         Type type = 2 [json_name = "type"];
         enum MatchOrder {
            MatchOrder_CONFIG = 0;
            MatchOrder_AUTO = 1;
         };
         MatchOrder match_order = 3 [json_name = "match-order"];
         uint32 step = 4 [json_name = "step"];
         string description = 5 [json_name = "description"];
         message RuleAdvances {
            message RuleAdvance {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               uint32 protocol = 4 [json_name = "protocol"];
               string description = 10 [json_name = "description"];
               enum FragmentType {
                  INVALID_ENUM_VALUE_FragmentType = 0;
                  FragmentType_FRAGMENT = 1;
               };
               FragmentType fragment_type = 11 [json_name = "fragment-type"];
               uint32 priority = 12 [json_name = "priority"];
               uint32 icmp_type = 13 [json_name = "icmp-type"];
               uint32 icmp_code = 14 [json_name = "icmp-code"];
               string time_range_name = 15 [json_name = "time-range-name"];
               bool log_enable = 16 [json_name = "log-enable"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 17 [json_name = "match-statistics"];
               uint32 icmp_type_end = 18 [json_name = "icmp-type-end"];
               uint32 proto_option_code = 19 [json_name = "proto-option-code"];
               uint32 proto_routing_type = 20 [json_name = "proto-routing-type"];
               uint32 ias_priority = 21 [json_name = "ias-priority"];
               message ProtocolType_Single {
                  uint32 protocol = 1 [json_name = "protocol"];
               }
               message ProtocolType_Zero {
                  bool hoport = 1 [json_name = "hoport"];
               }
               oneof ProtocolType {
                  ProtocolType_Single protocol_type_single = 22 [json_name = "single"];
                  ProtocolType_Zero protocol_type_zero = 23 [json_name = "zero"];
               }
               message Source_Ip {
                  string source_ipaddr = 1 [json_name = "source-ipaddr"];
                  message SourceIpaddrMask_PositiveMaskLen {
                     uint32 source_mask_len = 1 [json_name = "source-mask-len"];
                  }
                  message SourceIpaddrMask_NegativeMask {
                     string source_wild = 1 [json_name = "source-wild"];
                  }
                  oneof SourceIpaddrMask {
                     SourceIpaddrMask_PositiveMaskLen source_ipaddr_mask_positive_mask_len = 2 [json_name = "positive-mask-len"];
                     SourceIpaddrMask_NegativeMask source_ipaddr_mask_negative_mask = 3 [json_name = "negative-mask"];
                  }
               }
               message Source_IpPool {
                  string source_pool6_name = 1 [json_name = "source-pool6-name"];
               }
               oneof Source {
                  Source_Ip source_ip = 24 [json_name = "ip"];
                  Source_IpPool source_ip_pool = 25 [json_name = "ip-pool"];
               }
               message Dest_Ip {
                  string dest_ipaddr = 1 [json_name = "dest-ipaddr"];
                  message DestIpaddrMask_PositiveMaskLen {
                     uint32 dest_mask_len = 1 [json_name = "dest-mask-len"];
                  }
                  message DestIpaddrMask_NegativeMask {
                     string dest_wild = 1 [json_name = "dest-wild"];
                  }
                  oneof DestIpaddrMask {
                     DestIpaddrMask_PositiveMaskLen dest_ipaddr_mask_positive_mask_len = 2 [json_name = "positive-mask-len"];
                     DestIpaddrMask_NegativeMask dest_ipaddr_mask_negative_mask = 3 [json_name = "negative-mask"];
                  }
               }
               message Dest_IpPool {
                  string dest_pool6_name = 1 [json_name = "dest-pool6-name"];
               }
               oneof Dest {
                  Dest_Ip dest_ip = 26 [json_name = "ip"];
                  Dest_IpPool dest_ip_pool = 39 [json_name = "ip-pool"];
               }
               message PacketsPriority_Tos {
                  uint32 precedence = 1 [json_name = "precedence"];
                  uint32 tos7 = 2 [json_name = "tos"];
               }
               message PacketsPriority_Dscp {
                  uint32 dscp7 = 1 [json_name = "dscp"];
               }
               oneof PacketsPriority {
                  PacketsPriority_Tos packets_priority_tos = 27 [json_name = "tos"];
                  PacketsPriority_Dscp packets_priority_dscp = 28 [json_name = "dscp"];
               }
               message Vpn_VpnInstance {
                  string vpn_name = 1 [json_name = "vpn-name"];
               }
               message Vpn_VpnAny {
                  bool vpn_any = 1 [json_name = "vpn-any"];
               }
               oneof Vpn {
                  Vpn_VpnInstance vpn_vpn_instance = 29 [json_name = "vpn-instance"];
                  Vpn_VpnAny vpn_vpn_any = 30 [json_name = "vpn-any"];
               }
               message TcpFlag_Mask {
                  uint32 tcp_flag_value = 1 [json_name = "tcp-flag-value"];
                  uint32 tcp_flag_mask = 2 [json_name = "tcp-flag-mask"];
               }
               message TcpFlag_Established {
                  bool established7 = 1 [json_name = "established"];
               }
               oneof TcpFlag {
                  TcpFlag_Mask tcp_flag_mask = 31 [json_name = "mask"];
                  TcpFlag_Established tcp_flag_established = 32 [json_name = "established"];
               }
               message SourcePort_Range {
                  uint32 source_port_begin = 1 [json_name = "source-port-begin"];
                  uint32 source_port_end = 2 [json_name = "source-port-end"];
               }
               message SourcePort_NotEqual {
                  uint32 source_port_value = 1 [json_name = "source-port-value"];
               }
               oneof SourcePort {
                  SourcePort_Range source_port_range = 33 [json_name = "range"];
                  SourcePort_NotEqual source_port_not_equal = 34 [json_name = "not-equal"];
               }
               message DestPort_Range {
                  uint32 dest_port_begin = 1 [json_name = "dest-port-begin"];
                  uint32 dest_port_end = 2 [json_name = "dest-port-end"];
               }
               message DestPort_NotEqual {
                  uint32 dest_port_value = 1 [json_name = "dest-port-value"];
               }
               oneof DestPort {
                  DestPort_Range dest_port_range = 35 [json_name = "range"];
                  DestPort_NotEqual dest_port_not_equal = 36 [json_name = "not-equal"];
               }
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 37 [json_name = "active-status"];
               uint32 vni = 38 [json_name = "vni"];
            }
            repeated RuleAdvance rule_advance = 1 [json_name = "rule-advance"];
         }
         RuleAdvances rule_advances = 6 [json_name = "rule-advances"];
         message RuleUcls {
            message RuleUcl {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               uint32 protocol = 4 [json_name = "protocol"];
               string description = 7 [json_name = "description"];
               uint32 priority = 8 [json_name = "priority"];
               message ProtocolType_Single {
                  uint32 protocol = 1 [json_name = "protocol"];
               }
               message ProtocolType_Zero {
                  bool hoport = 1 [json_name = "hoport"];
               }
               oneof ProtocolType {
                  ProtocolType_Single protocol_type_single = 9 [json_name = "single"];
                  ProtocolType_Zero protocol_type_zero = 10 [json_name = "zero"];
               }
               message Source_SrcUserGroupAny {
                  bool src_user_group_any = 1 [json_name = "src-user-group-any"];
               }
               message Source_SrcUserGroup {
                  string src_user_group_name = 1 [json_name = "src-user-group-name"];
               }
               message Source_SrcSrvGroupAny {
                  bool src_srv_group_any = 1 [json_name = "src-srv-group-any"];
               }
               message Source_SrcSrvGroup {
                  string src_srv_group_name = 1 [json_name = "src-srv-group-name"];
               }
               message Source_SourceIpAny {
                  bool source_ip_any = 1 [json_name = "source-ip-any"];
               }
               message Source_SourceIp {
                  string source_ip = 1 [json_name = "source-ip"];
                  string source_wild = 2 [json_name = "source-wild"];
               }
               message Source_SourcePool {
                  string source_pool_name = 1 [json_name = "source-pool-name"];
               }
               oneof Source {
                  Source_SrcUserGroupAny source_src_user_group_any = 11 [json_name = "src-user-group-any"];
                  Source_SrcUserGroup source_src_user_group = 12 [json_name = "src-user-group"];
                  Source_SrcSrvGroupAny source_src_srv_group_any = 13 [json_name = "src-srv-group-any"];
                  Source_SrcSrvGroup source_src_srv_group = 14 [json_name = "src-srv-group"];
                  Source_SourceIpAny source_source_ip_any = 23 [json_name = "source-ip-any"];
                  Source_SourceIp source_source_ip = 24 [json_name = "source-ip"];
                  Source_SourcePool source_source_pool = 25 [json_name = "source-pool"];
               }
               message Dest_DestUserGroupAny {
                  bool dest_user_group_any = 1 [json_name = "dest-user-group-any"];
               }
               message Dest_DestUserGroup {
                  string dest_user_group_name = 1 [json_name = "dest-user-group-name"];
               }
               message Dest_DestSrvGroupAny {
                  bool dest_srv_group_any = 1 [json_name = "dest-srv-group-any"];
               }
               message Dest_DestSrvGroup {
                  string dest_srv_group_name = 1 [json_name = "dest-srv-group-name"];
               }
               message Dest_DestIpAny {
                  bool dest_ip_any = 1 [json_name = "dest-ip-any"];
               }
               message Dest_DestIp {
                  string dest_ip = 1 [json_name = "dest-ip"];
                  string dest_wild = 2 [json_name = "dest-wild"];
               }
               message Dest_DestPool {
                  string dest_pool_name = 1 [json_name = "dest-pool-name"];
               }
               oneof Dest {
                  Dest_DestUserGroupAny dest_dest_user_group_any = 15 [json_name = "dest-user-group-any"];
                  Dest_DestUserGroup dest_dest_user_group = 16 [json_name = "dest-user-group"];
                  Dest_DestSrvGroupAny dest_dest_srv_group_any = 17 [json_name = "dest-srv-group-any"];
                  Dest_DestSrvGroup dest_dest_srv_group = 18 [json_name = "dest-srv-group"];
                  Dest_DestIpAny dest_dest_ip_any = 26 [json_name = "dest-ip-any"];
                  Dest_DestIp dest_dest_ip = 27 [json_name = "dest-ip"];
                  Dest_DestPool dest_dest_pool = 28 [json_name = "dest-pool"];
               }
               message SourcePort_Range {
                  uint32 source_port_begin = 1 [json_name = "source-port-begin"];
                  uint32 source_port_end = 2 [json_name = "source-port-end"];
               }
               oneof SourcePort {
                  SourcePort_Range source_port_range = 19 [json_name = "range"];
               }
               message DestPort_Range {
                  uint32 dest_port_begin = 1 [json_name = "dest-port-begin"];
                  uint32 dest_port_end = 2 [json_name = "dest-port-end"];
               }
               oneof DestPort {
                  DestPort_Range dest_port_range = 21 [json_name = "range"];
               }
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 22 [json_name = "active-status"];
               enum FragmentType {
                  INVALID_ENUM_VALUE_FragmentType = 0;
                  FragmentType_FRAGMENT = 1;
               };
               FragmentType fragment_type = 29 [json_name = "fragment-type"];
               message PacketsPriority_Tos {
                  uint32 precedence = 1 [json_name = "precedence"];
                  uint32 tos7 = 2 [json_name = "tos"];
               }
               message PacketsPriority_Dscp {
                  uint32 dscp7 = 1 [json_name = "dscp"];
               }
               oneof PacketsPriority {
                  PacketsPriority_Tos packets_priority_tos = 30 [json_name = "tos"];
                  PacketsPriority_Dscp packets_priority_dscp = 31 [json_name = "dscp"];
               }
               uint32 icmp_type = 32 [json_name = "icmp-type"];
               uint32 icmp_code = 33 [json_name = "icmp-code"];
               string time_range_name = 34 [json_name = "time-range-name"];
               bool log_flag = 35 [json_name = "log-flag"];
               uint32 traffic_class = 36 [json_name = "traffic-class"];
            }
            repeated RuleUcl rule_ucl = 1 [json_name = "rule-ucl"];
         }
         RuleUcls rule_ucls = 7 [json_name = "rule-ucls"];
         message RuleBasics {
            message RuleBasic {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 4 [json_name = "active-status"];
               string source_ipaddr = 5 [json_name = "source-ipaddr"];
               enum FragmentType {
                  INVALID_ENUM_VALUE_FragmentType = 0;
                  FragmentType_FRAGMENT = 1;
               };
               FragmentType fragment_type = 6 [json_name = "fragment-type"];
               string time_range_name = 7 [json_name = "time-range-name"];
               string description = 8 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 9 [json_name = "match-statistics"];
               uint32 ias_priority = 10 [json_name = "ias-priority"];
               message SourceIpMask_PositiveMaskLen {
                  uint32 source_mask_len = 1 [json_name = "source-mask-len"];
               }
               message SourceIpMask_NegativeMask {
                  string source_wild = 1 [json_name = "source-wild"];
               }
               oneof SourceIpMask {
                  SourceIpMask_PositiveMaskLen source_ip_mask_positive_mask_len = 11 [json_name = "positive-mask-len"];
                  SourceIpMask_NegativeMask source_ip_mask_negative_mask = 12 [json_name = "negative-mask"];
               }
               message Vpn_VpnInstance {
                  string vpn_name = 1 [json_name = "vpn-name"];
               }
               message Vpn_VpnAny {
                  bool vpn_any = 1 [json_name = "vpn-any"];
               }
               oneof Vpn {
                  Vpn_VpnInstance vpn_vpn_instance = 13 [json_name = "vpn-instance"];
                  Vpn_VpnAny vpn_vpn_any = 14 [json_name = "vpn-any"];
               }
               bool log_enable = 15 [json_name = "log-enable"];
            }
            repeated RuleBasic rule_basic = 1 [json_name = "rule-basic"];
         }
         RuleBasics rule_basics = 8 [json_name = "rule-basics"];
         message RuleInterfaces {
            message RuleInterface {
               string name = 1 [json_name = "name"];
               uint32 id = 2 [json_name = "id"];
               enum Action {
                  Action_PERMIT = 0;
                  Action_DENY = 1;
               };
               Action action = 3 [json_name = "action"];
               enum ActiveStatus {
                  ActiveStatus_ACTIVE = 0;
                  ActiveStatus_NOTX_INX_SERVICE = 1;
                  ActiveStatus_NOTX_READY = 2;
               };
               ActiveStatus active_status = 4 [json_name = "active-status"];
               string time_range_name = 5 [json_name = "time-range-name"];
               string description = 6 [json_name = "description"];
               message MatchStatistics {
                  uint64 match_count = 1 [json_name = "match-count"];
               }
               MatchStatistics match_statistics = 7 [json_name = "match-statistics"];
               message Interface_InterfaceAny {
                  bool if_any = 1 [json_name = "if-any"];
               }
               message Interface_InterfaceName {
                  string if_name = 1 [json_name = "if-name"];
               }
               oneof Interface {
                  Interface_InterfaceAny interface_interface_any = 8 [json_name = "interface-any"];
                  Interface_InterfaceName interface_interface_name = 9 [json_name = "interface-name"];
               }
            }
            repeated RuleInterface rule_interface = 1 [json_name = "rule-interface"];
         }
         RuleInterfaces rule_interfaces = 9 [json_name = "rule-interfaces"];
      }
      repeated Group6 group6 = 1 [json_name = "group6"];
   }
   Group6S group6s = 2 [json_name = "group6s"];
   message IpPools {
      message IpPool {
         string name = 1 [json_name = "name"];
         message Ipaddrs {
            message Ipaddr {
               string address = 1 [json_name = "address"];
               string mask = 2 [json_name = "mask"];
            }
            repeated Ipaddr ipaddr = 1 [json_name = "ipaddr"];
         }
         Ipaddrs ipaddrs = 2 [json_name = "ipaddrs"];
         bool apply_bgp_ipv4_peer = 3 [json_name = "apply-bgp-ipv4-peer"];
         enum BgpPeerVpn {
            BgpPeerVpn_ALL = 0;
            BgpPeerVpn_ALLX_PRIVATE = 1;
            BgpPeerVpn_SINGLE = 2;
         };
         BgpPeerVpn bgp_peer_vpn = 4 [json_name = "bgp-peer-vpn"];
         string bgp_peer_vpn_name = 5 [json_name = "bgp-peer-vpn-name"];
         message HostNames {
            message HostName {
               string name = 1 [json_name = "name"];
            }
            repeated HostName host_name = 1 [json_name = "host-name"];
         }
         HostNames host_names = 6 [json_name = "host-names"];
         message ApplyType_ApplyBgp {
            bool apply_bgp_ipv4_peer = 1 [json_name = "apply-bgp-ipv4-peer"];
            enum BgpPeerVpn {
               BgpPeerVpn_ALL = 0;
               BgpPeerVpn_ALLX_PRIVATE = 1;
               BgpPeerVpn_SINGLE = 2;
            };
            BgpPeerVpn bgp_peer_vpn = 2 [json_name = "bgp-peer-vpn"];
            string bgp_peer_vpn_name = 3 [json_name = "bgp-peer-vpn-name"];
         }
         message ApplyType_ApplyInterface {
            enum InterfaceType {
               INVALID_ENUM_VALUE_InterfaceType = 0;
               InterfaceType_MAINX_INTERFACEX_ADDRESS = 1;
               InterfaceType_SUBX_INTERFACEX_ADDRESS = 2;
               InterfaceType_ALLX_INTERFACEX_ADDRESS = 3;
            };
            InterfaceType interface_type = 1 [json_name = "interface-type"];
            enum InterfaceVpnType {
               InterfaceVpnType_ALL = 0;
               InterfaceVpnType_ALLX_PRIVATE = 1;
               InterfaceVpnType_SINGLE = 2;
            };
            InterfaceVpnType interface_vpn_type = 2 [json_name = "interface-vpn-type"];
            string interface_vpn_name = 3 [json_name = "interface-vpn-name"];
         }
         message ApplyType_ApplyIp {
            message Ipaddrs {
               message Ipaddr {
                  string address = 1 [json_name = "address"];
                  string mask = 2 [json_name = "mask"];
               }
               repeated Ipaddr ipaddr = 1 [json_name = "ipaddr"];
            }
            Ipaddrs ipaddrs = 1 [json_name = "ipaddrs"];
            message HostNames {
               message HostName {
                  string name = 1 [json_name = "name"];
               }
               repeated HostName host_name = 1 [json_name = "host-name"];
            }
            HostNames host_names = 2 [json_name = "host-names"];
         }
         oneof ApplyType {
            ApplyType_ApplyBgp apply_type_apply_bgp = 7 [json_name = "apply-bgp"];
            ApplyType_ApplyInterface apply_type_apply_interface = 8 [json_name = "apply-interface"];
            ApplyType_ApplyIp apply_type_apply_ip = 9 [json_name = "apply-ip"];
         }
      }
      repeated IpPool ip_pool = 1 [json_name = "ip-pool"];
   }
   IpPools ip_pools = 3 [json_name = "ip-pools"];
   message PortPools {
      message PortPool {
         string name = 1 [json_name = "name"];
         message Ports {
            message Port {
               enum Operation {
                  INVALID_ENUM_VALUE_Operation = 0;
                  Operation_LT = 1;
                  Operation_EQ = 2;
                  Operation_GT = 3;
                  Operation_NEQ = 4;
                  Operation_RANGE = 5;
               };
               Operation operation = 1 [json_name = "operation"];
               uint32 number_begin = 2 [json_name = "number-begin"];
               uint32 number_end = 3 [json_name = "number-end"];
            }
            repeated Port port = 1 [json_name = "port"];
         }
         Ports ports = 2 [json_name = "ports"];
      }
      repeated PortPool port_pool = 1 [json_name = "port-pool"];
   }
   PortPools port_pools = 4 [json_name = "port-pools"];
   message IpPool6S {
      message IpPool6 {
         string name = 1 [json_name = "name"];
         bool apply_bgp_ipv6_peer = 2 [json_name = "apply-bgp-ipv6-peer"];
         enum BgpPeerVpn {
            BgpPeerVpn_ALL = 0;
            BgpPeerVpn_ALLX_PRIVATE = 1;
            BgpPeerVpn_SINGLE = 2;
         };
         BgpPeerVpn bgp_peer_vpn = 3 [json_name = "bgp-peer-vpn"];
         string bgp_peer_vpn_name = 4 [json_name = "bgp-peer-vpn-name"];
         message Ipv6Addresses {
            message Ipv6Address {
               string address = 1 [json_name = "address"];
               string mask = 2 [json_name = "mask"];
            }
            repeated Ipv6Address ipv6_address = 1 [json_name = "ipv6-address"];
         }
         Ipv6Addresses ipv6_addresses = 5 [json_name = "ipv6-addresses"];
         message ApplyType_ApplyBgp {
            bool apply_bgp_ipv6_peer = 1 [json_name = "apply-bgp-ipv6-peer"];
            enum BgpPeerVpn {
               BgpPeerVpn_ALL = 0;
               BgpPeerVpn_ALLX_PRIVATE = 1;
               BgpPeerVpn_SINGLE = 2;
            };
            BgpPeerVpn bgp_peer_vpn = 2 [json_name = "bgp-peer-vpn"];
            string bgp_peer_vpn_name = 3 [json_name = "bgp-peer-vpn-name"];
         }
         message ApplyType_ApplyInterface {
            enum InterfaceType {
               INVALID_ENUM_VALUE_InterfaceType = 0;
               InterfaceType_MAINX_INTERFACEX_ADDRESS = 1;
               InterfaceType_SUBX_INTERFACEX_ADDRESS = 2;
               InterfaceType_ALLX_INTERFACEX_ADDRESS = 3;
            };
            InterfaceType interface_type = 1 [json_name = "interface-type"];
            enum InterfaceVpnType {
               InterfaceVpnType_ALL = 0;
               InterfaceVpnType_ALLX_PRIVATE = 1;
               InterfaceVpnType_SINGLE = 2;
            };
            InterfaceVpnType interface_vpn_type = 2 [json_name = "interface-vpn-type"];
            string interface_vpn_name = 3 [json_name = "interface-vpn-name"];
         }
         message ApplyType_ApplyIp {
            message Ipv6Addresses {
               message Ipv6Address {
                  string address = 1 [json_name = "address"];
                  string mask = 2 [json_name = "mask"];
               }
               repeated Ipv6Address ipv6_address = 1 [json_name = "ipv6-address"];
            }
            Ipv6Addresses ipv6_addresses = 1 [json_name = "ipv6-addresses"];
         }
         oneof ApplyType {
            ApplyType_ApplyBgp apply_type_apply_bgp = 6 [json_name = "apply-bgp"];
            ApplyType_ApplyInterface apply_type_apply_interface = 7 [json_name = "apply-interface"];
            ApplyType_ApplyIp apply_type_apply_ip = 8 [json_name = "apply-ip"];
         }
      }
      repeated IpPool6 ip_pool6 = 1 [json_name = "ip-pool6"];
   }
   IpPool6S ip_pool6s = 5 [json_name = "ip-pool6s"];
}


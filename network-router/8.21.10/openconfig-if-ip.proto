syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module openconfig-if-ip
// revision 2018-01-05
// revision 2017-12-21
// revision 2017-07-14
// revision 2017-04-03
// revision 2016-12-22
// namespace http://openconfig.net/yang/interfaces/ip

package openconfig_if_ip;

message Interfaces {
   message Interface {
      message Config {
         string description = 1;
         bool enabled = 2;
         bool loopback_mode = 3;
         uint32 mtu = 4;
         string name = 5;
         string type = 6;
         string tpid = 7;
      }
      Config config = 1;
      message HoldTime {
         message Config {
            uint32 down = 1;
            uint32 up = 2;
         }
         Config config = 1;
         message State {
            uint32 down = 1;
            uint32 up = 2;
         }
         State state = 2;
      }
      HoldTime hold_time = 2;
      string name = 3;
      message State {
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_TESTING = 1;
            AdminStatus_UP = 2;
         };
         AdminStatus admin_status = 1;
         message Counters {
            uint64 carrier_transitions = 1;
            uint64 in_broadcast_pkts = 2;
            uint64 in_discards = 3;
            uint64 in_errors = 4;
            uint64 in_fcs_errors = 5;
            uint64 in_multicast_pkts = 6;
            uint64 in_octets = 7;
            uint64 in_unicast_pkts = 8;
            uint64 in_unknown_protos = 9;
            uint64 last_clear = 10;
            uint64 out_broadcast_pkts = 11;
            uint64 out_discards = 12;
            uint64 out_errors = 13;
            uint64 out_multicast_pkts = 14;
            uint64 out_octets = 15;
            uint64 out_unicast_pkts = 16;
         }
         Counters counters = 2;
         string description = 3;
         bool enabled = 4;
         uint32 ifindex = 5;
         uint64 last_change = 6;
         bool loopback_mode = 7;
         uint32 mtu = 8;
         string name = 9;
         enum OperStatus {
            OperStatus_DORMANT = 0;
            OperStatus_DOWN = 1;
            OperStatus_LOWER_LAYER_DOWN = 2;
            OperStatus_NOT_PRESENT = 3;
            OperStatus_TESTING = 4;
            OperStatus_UNKNOWN = 5;
            OperStatus_UP = 6;
         };
         OperStatus oper_status = 10;
         string type = 11;
         string tpid = 12;
      }
      State state = 4;
      message Subinterfaces {
         message Subinterface {
            message Config {
               string description = 1;
               bool enabled = 2;
               uint32 index = 3;
            }
            Config config = 1;
            uint32 index = 2;
            message State {
               enum AdminStatus {
                  AdminStatus_DOWN = 0;
                  AdminStatus_TESTING = 1;
                  AdminStatus_UP = 2;
               };
               AdminStatus admin_status = 1;
               message Counters {
                  uint64 carrier_transitions = 1;
                  uint64 in_broadcast_pkts = 2;
                  uint64 in_discards = 3;
                  uint64 in_errors = 4;
                  uint64 in_fcs_errors = 5;
                  uint64 in_multicast_pkts = 6;
                  uint64 in_octets = 7;
                  uint64 in_unicast_pkts = 8;
                  uint64 in_unknown_protos = 9;
                  uint64 last_clear = 10;
                  uint64 out_broadcast_pkts = 11;
                  uint64 out_discards = 12;
                  uint64 out_errors = 13;
                  uint64 out_multicast_pkts = 14;
                  uint64 out_octets = 15;
                  uint64 out_unicast_pkts = 16;
               }
               Counters counters = 2;
               string description = 3;
               bool enabled = 4;
               uint32 ifindex = 5;
               uint32 index = 6;
               uint64 last_change = 7;
               string name = 8;
               enum OperStatus {
                  OperStatus_DORMANT = 0;
                  OperStatus_DOWN = 1;
                  OperStatus_LOWER_LAYER_DOWN = 2;
                  OperStatus_NOT_PRESENT = 3;
                  OperStatus_TESTING = 4;
                  OperStatus_UNKNOWN = 5;
                  OperStatus_UP = 6;
               };
               OperStatus oper_status = 9;
            }
            State state = 3;
            message Ipv4 {
               message Addresses {
                  message Address {
                     message Config {
                        string ip = 1;
                        uint32 prefix_length = 2;
                     }
                     Config config = 1;
                     string ip = 2;
                     message State {
                        string ip = 1;
                        enum Origin {
                           Origin_DHCP = 0;
                           Origin_LINK_LAYER = 1;
                           Origin_OTHER = 2;
                           Origin_RANDOM = 3;
                           Origin_STATIC = 4;
                        };
                        Origin origin = 2;
                        uint32 prefix_length = 3;
                     }
                     State state = 3;
                     message Vrrp {
                        message VrrpGroup {
                           message Config {
                              bool accept_mode = 1;
                              uint32 advertisement_interval = 2;
                              bool preempt = 3;
                              uint32 preempt_delay = 4;
                              uint32 priority = 5;
                              repeated string virtual_address = 6;
                              uint32 virtual_router_id = 7;
                           }
                           Config config = 1;
                           message InterfaceTracking {
                              message Config {
                                 uint32 priority_decrement = 1;
                                 repeated string track_interface = 2;
                              }
                              Config config = 1;
                              message State {
                                 uint32 priority_decrement = 1;
                                 repeated string track_interface = 2;
                              }
                              State state = 2;
                           }
                           InterfaceTracking interface_tracking = 2;
                           message State {
                              bool accept_mode = 1;
                              uint32 advertisement_interval = 2;
                              uint32 current_priority = 3;
                              bool preempt = 4;
                              uint32 preempt_delay = 5;
                              uint32 priority = 6;
                              repeated string virtual_address = 7;
                              uint32 virtual_router_id = 8;
                           }
                           State state = 3;
                           uint32 virtual_router_id = 4;
                        }
                        repeated VrrpGroup vrrp_group = 1;
                     }
                     Vrrp vrrp = 4;
                  }
                  repeated Address address = 1;
               }
               Addresses addresses = 1;
               message Config {
                  bool dhcp_client = 1;
                  bool enabled = 2;
                  uint32 mtu = 3;
               }
               Config config = 2;
               message Neighbors {
                  message Neighbor {
                     message Config {
                        string ip = 1;
                        string link_layer_address = 2;
                     }
                     Config config = 1;
                     string ip = 2;
                     message State {
                        string ip = 1;
                        string link_layer_address = 2;
                        enum Origin {
                           Origin_DYNAMIC = 0;
                           Origin_OTHER = 1;
                           Origin_STATIC = 2;
                        };
                        Origin origin = 3;
                     }
                     State state = 3;
                  }
                  repeated Neighbor neighbor = 1;
               }
               Neighbors neighbors = 3;
               message ProxyArp {
                  message Config {
                     enum Mode {
                        Mode_ALL = 0;
                        Mode_DISABLE = 1;
                        Mode_REMOTE_ONLY = 2;
                     };
                     Mode mode = 1;
                  }
                  Config config = 1;
                  message State {
                     enum Mode {
                        Mode_ALL = 0;
                        Mode_DISABLE = 1;
                        Mode_REMOTE_ONLY = 2;
                     };
                     Mode mode = 1;
                  }
                  State state = 2;
               }
               ProxyArp proxy_arp = 4;
               message State {
                  message Counters {
                     uint64 in_discarded_pkts = 1;
                     uint64 in_error_pkts = 2;
                     uint64 in_forwarded_octets = 3;
                     uint64 in_forwarded_pkts = 4;
                     uint64 in_octets = 5;
                     uint64 in_pkts = 6;
                     uint64 out_discarded_pkts = 7;
                     uint64 out_error_pkts = 8;
                     uint64 out_forwarded_octets = 9;
                     uint64 out_forwarded_pkts = 10;
                     uint64 out_octets = 11;
                     uint64 out_pkts = 12;
                  }
                  Counters counters = 1;
                  bool dhcp_client = 2;
                  bool enabled = 3;
                  uint32 mtu = 4;
               }
               State state = 5;
               message Unnumbered {
                  message Config {
                     bool enabled = 1;
                  }
                  Config config = 1;
                  message InterfaceRef {
                     message Config {
                        string interface = 1;
                        uint32 subinterface = 2;
                     }
                     Config config = 1;
                     message State {
                        string interface = 1;
                        uint32 subinterface = 2;
                     }
                     State state = 2;
                  }
                  InterfaceRef interface_ref = 2;
                  message State {
                     bool enabled = 1;
                  }
                  State state = 3;
               }
               Unnumbered unnumbered = 6;
            }
            Ipv4 ipv4 = 4;
            message Ipv6 {
               message Addresses {
                  message Address {
                     message Config {
                        string ip = 1;
                        uint32 prefix_length = 2;
                     }
                     Config config = 1;
                     string ip = 2;
                     message State {
                        string ip = 1;
                        enum Origin {
                           Origin_DHCP = 0;
                           Origin_LINK_LAYER = 1;
                           Origin_OTHER = 2;
                           Origin_RANDOM = 3;
                           Origin_STATIC = 4;
                        };
                        Origin origin = 2;
                        uint32 prefix_length = 3;
                        enum Status {
                           Status_DEPRECATED = 0;
                           Status_DUPLICATE = 1;
                           Status_INACCESSIBLE = 2;
                           Status_INVALID = 3;
                           Status_OPTIMISTIC = 4;
                           Status_PREFERRED = 5;
                           Status_TENTATIVE = 6;
                           Status_UNKNOWN = 7;
                        };
                        Status status = 4;
                     }
                     State state = 3;
                     message Vrrp {
                        message VrrpGroup {
                           message Config {
                              bool accept_mode = 1;
                              uint32 advertisement_interval = 2;
                              bool preempt = 3;
                              uint32 preempt_delay = 4;
                              uint32 priority = 5;
                              repeated string virtual_address = 6;
                              uint32 virtual_router_id = 7;
                              string virtual_link_local = 8;
                           }
                           Config config = 1;
                           message InterfaceTracking {
                              message Config {
                                 uint32 priority_decrement = 1;
                                 repeated string track_interface = 2;
                              }
                              Config config = 1;
                              message State {
                                 uint32 priority_decrement = 1;
                                 repeated string track_interface = 2;
                              }
                              State state = 2;
                           }
                           InterfaceTracking interface_tracking = 2;
                           message State {
                              bool accept_mode = 1;
                              uint32 advertisement_interval = 2;
                              uint32 current_priority = 3;
                              bool preempt = 4;
                              uint32 preempt_delay = 5;
                              uint32 priority = 6;
                              repeated string virtual_address = 7;
                              uint32 virtual_router_id = 8;
                              string virtual_link_local = 9;
                           }
                           State state = 3;
                           uint32 virtual_router_id = 4;
                        }
                        repeated VrrpGroup vrrp_group = 1;
                     }
                     Vrrp vrrp = 4;
                  }
                  repeated Address address = 1;
               }
               Addresses addresses = 1;
               message Config {
                  bool dhcp_client = 1;
                  uint32 dup_addr_detect_transmits = 2;
                  bool enabled = 3;
                  uint32 mtu = 4;
               }
               Config config = 2;
               message Neighbors {
                  message Neighbor {
                     message Config {
                        string ip = 1;
                        string link_layer_address = 2;
                     }
                     Config config = 1;
                     string ip = 2;
                     message State {
                        string ip = 1;
                        bool is_router = 2;
                        string link_layer_address = 3;
                        enum NeighborState {
                           NeighborState_DELAY = 0;
                           NeighborState_INCOMPLETE = 1;
                           NeighborState_PROBE = 2;
                           NeighborState_REACHABLE = 3;
                           NeighborState_STALE = 4;
                        };
                        NeighborState neighbor_state = 4;
                        enum Origin {
                           Origin_DYNAMIC = 0;
                           Origin_OTHER = 1;
                           Origin_STATIC = 2;
                        };
                        Origin origin = 5;
                     }
                     State state = 3;
                  }
                  repeated Neighbor neighbor = 1;
               }
               Neighbors neighbors = 3;
               message RouterAdvertisement {
                  message Config {
                     uint32 interval = 1;
                     uint32 lifetime = 2;
                     bool suppress = 3;
                  }
                  Config config = 1;
                  message State {
                     uint32 interval = 1;
                     uint32 lifetime = 2;
                     bool suppress = 3;
                  }
                  State state = 2;
               }
               RouterAdvertisement router_advertisement = 4;
               message State {
                  message Counters {
                     uint64 in_discarded_pkts = 1;
                     uint64 in_error_pkts = 2;
                     uint64 in_forwarded_octets = 3;
                     uint64 in_forwarded_pkts = 4;
                     uint64 in_octets = 5;
                     uint64 in_pkts = 6;
                     uint64 out_discarded_pkts = 7;
                     uint64 out_error_pkts = 8;
                     uint64 out_forwarded_octets = 9;
                     uint64 out_forwarded_pkts = 10;
                     uint64 out_octets = 11;
                     uint64 out_pkts = 12;
                  }
                  Counters counters = 1;
                  bool dhcp_client = 2;
                  uint32 dup_addr_detect_transmits = 3;
                  bool enabled = 4;
                  uint32 mtu = 5;
               }
               State state = 5;
               message Unnumbered {
                  message Config {
                     bool enabled = 1;
                  }
                  Config config = 1;
                  message InterfaceRef {
                     message Config {
                        string interface = 1;
                        uint32 subinterface = 2;
                     }
                     Config config = 1;
                     message State {
                        string interface = 1;
                        uint32 subinterface = 2;
                     }
                     State state = 2;
                  }
                  InterfaceRef interface_ref = 2;
                  message State {
                     bool enabled = 1;
                  }
                  State state = 3;
               }
               Unnumbered unnumbered = 6;
            }
            Ipv6 ipv6 = 5;
            message Vlan {
               message Config {
                  string vlan_id = 1;
               }
               Config config = 1;
               message State {
                  string vlan_id = 1;
               }
               State state = 2;
            }
            Vlan vlan = 6;
         }
         repeated Subinterface subinterface = 1;
      }
      Subinterfaces subinterfaces = 5;
      message RoutedVlan {
         message Config {
            string vlan = 1;
         }
         Config config = 1;
         message State {
            string vlan = 1;
         }
         State state = 2;
         message Ipv4 {
            message Addresses {
               message Address {
                  message Config {
                     string ip = 1;
                     uint32 prefix_length = 2;
                  }
                  Config config = 1;
                  string ip = 2;
                  message State {
                     string ip = 1;
                     enum Origin {
                        Origin_DHCP = 0;
                        Origin_LINK_LAYER = 1;
                        Origin_OTHER = 2;
                        Origin_RANDOM = 3;
                        Origin_STATIC = 4;
                     };
                     Origin origin = 2;
                     uint32 prefix_length = 3;
                  }
                  State state = 3;
                  message Vrrp {
                     message VrrpGroup {
                        message Config {
                           bool accept_mode = 1;
                           uint32 advertisement_interval = 2;
                           bool preempt = 3;
                           uint32 preempt_delay = 4;
                           uint32 priority = 5;
                           repeated string virtual_address = 6;
                           uint32 virtual_router_id = 7;
                        }
                        Config config = 1;
                        message InterfaceTracking {
                           message Config {
                              uint32 priority_decrement = 1;
                              repeated string track_interface = 2;
                           }
                           Config config = 1;
                           message State {
                              uint32 priority_decrement = 1;
                              repeated string track_interface = 2;
                           }
                           State state = 2;
                        }
                        InterfaceTracking interface_tracking = 2;
                        message State {
                           bool accept_mode = 1;
                           uint32 advertisement_interval = 2;
                           uint32 current_priority = 3;
                           bool preempt = 4;
                           uint32 preempt_delay = 5;
                           uint32 priority = 6;
                           repeated string virtual_address = 7;
                           uint32 virtual_router_id = 8;
                        }
                        State state = 3;
                        uint32 virtual_router_id = 4;
                     }
                     repeated VrrpGroup vrrp_group = 1;
                  }
                  Vrrp vrrp = 4;
               }
               repeated Address address = 1;
            }
            Addresses addresses = 1;
            message Config {
               bool dhcp_client = 1;
               bool enabled = 2;
               uint32 mtu = 3;
            }
            Config config = 2;
            message Neighbors {
               message Neighbor {
                  message Config {
                     string ip = 1;
                     string link_layer_address = 2;
                  }
                  Config config = 1;
                  string ip = 2;
                  message State {
                     string ip = 1;
                     string link_layer_address = 2;
                     enum Origin {
                        Origin_DYNAMIC = 0;
                        Origin_OTHER = 1;
                        Origin_STATIC = 2;
                     };
                     Origin origin = 3;
                  }
                  State state = 3;
               }
               repeated Neighbor neighbor = 1;
            }
            Neighbors neighbors = 3;
            message ProxyArp {
               message Config {
                  enum Mode {
                     Mode_ALL = 0;
                     Mode_DISABLE = 1;
                     Mode_REMOTE_ONLY = 2;
                  };
                  Mode mode = 1;
               }
               Config config = 1;
               message State {
                  enum Mode {
                     Mode_ALL = 0;
                     Mode_DISABLE = 1;
                     Mode_REMOTE_ONLY = 2;
                  };
                  Mode mode = 1;
               }
               State state = 2;
            }
            ProxyArp proxy_arp = 4;
            message State {
               message Counters {
                  uint64 in_discarded_pkts = 1;
                  uint64 in_error_pkts = 2;
                  uint64 in_forwarded_octets = 3;
                  uint64 in_forwarded_pkts = 4;
                  uint64 in_octets = 5;
                  uint64 in_pkts = 6;
                  uint64 out_discarded_pkts = 7;
                  uint64 out_error_pkts = 8;
                  uint64 out_forwarded_octets = 9;
                  uint64 out_forwarded_pkts = 10;
                  uint64 out_octets = 11;
                  uint64 out_pkts = 12;
               }
               Counters counters = 1;
               bool dhcp_client = 2;
               bool enabled = 3;
               uint32 mtu = 4;
            }
            State state = 5;
            message Unnumbered {
               message Config {
                  bool enabled = 1;
               }
               Config config = 1;
               message InterfaceRef {
                  message Config {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  Config config = 1;
                  message State {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  State state = 2;
               }
               InterfaceRef interface_ref = 2;
               message State {
                  bool enabled = 1;
               }
               State state = 3;
            }
            Unnumbered unnumbered = 6;
         }
         Ipv4 ipv4 = 3;
         message Ipv6 {
            message Addresses {
               message Address {
                  message Config {
                     string ip = 1;
                     uint32 prefix_length = 2;
                  }
                  Config config = 1;
                  string ip = 2;
                  message State {
                     string ip = 1;
                     enum Origin {
                        Origin_DHCP = 0;
                        Origin_LINK_LAYER = 1;
                        Origin_OTHER = 2;
                        Origin_RANDOM = 3;
                        Origin_STATIC = 4;
                     };
                     Origin origin = 2;
                     uint32 prefix_length = 3;
                     enum Status {
                        Status_DEPRECATED = 0;
                        Status_DUPLICATE = 1;
                        Status_INACCESSIBLE = 2;
                        Status_INVALID = 3;
                        Status_OPTIMISTIC = 4;
                        Status_PREFERRED = 5;
                        Status_TENTATIVE = 6;
                        Status_UNKNOWN = 7;
                     };
                     Status status = 4;
                  }
                  State state = 3;
                  message Vrrp {
                     message VrrpGroup {
                        message Config {
                           bool accept_mode = 1;
                           uint32 advertisement_interval = 2;
                           bool preempt = 3;
                           uint32 preempt_delay = 4;
                           uint32 priority = 5;
                           repeated string virtual_address = 6;
                           uint32 virtual_router_id = 7;
                           string virtual_link_local = 8;
                        }
                        Config config = 1;
                        message InterfaceTracking {
                           message Config {
                              uint32 priority_decrement = 1;
                              repeated string track_interface = 2;
                           }
                           Config config = 1;
                           message State {
                              uint32 priority_decrement = 1;
                              repeated string track_interface = 2;
                           }
                           State state = 2;
                        }
                        InterfaceTracking interface_tracking = 2;
                        message State {
                           bool accept_mode = 1;
                           uint32 advertisement_interval = 2;
                           uint32 current_priority = 3;
                           bool preempt = 4;
                           uint32 preempt_delay = 5;
                           uint32 priority = 6;
                           repeated string virtual_address = 7;
                           uint32 virtual_router_id = 8;
                           string virtual_link_local = 9;
                        }
                        State state = 3;
                        uint32 virtual_router_id = 4;
                     }
                     repeated VrrpGroup vrrp_group = 1;
                  }
                  Vrrp vrrp = 4;
               }
               repeated Address address = 1;
            }
            Addresses addresses = 1;
            message Config {
               bool dhcp_client = 1;
               uint32 dup_addr_detect_transmits = 2;
               bool enabled = 3;
               uint32 mtu = 4;
            }
            Config config = 2;
            message Neighbors {
               message Neighbor {
                  message Config {
                     string ip = 1;
                     string link_layer_address = 2;
                  }
                  Config config = 1;
                  string ip = 2;
                  message State {
                     string ip = 1;
                     bool is_router = 2;
                     string link_layer_address = 3;
                     enum NeighborState {
                        NeighborState_DELAY = 0;
                        NeighborState_INCOMPLETE = 1;
                        NeighborState_PROBE = 2;
                        NeighborState_REACHABLE = 3;
                        NeighborState_STALE = 4;
                     };
                     NeighborState neighbor_state = 4;
                     enum Origin {
                        Origin_DYNAMIC = 0;
                        Origin_OTHER = 1;
                        Origin_STATIC = 2;
                     };
                     Origin origin = 5;
                  }
                  State state = 3;
               }
               repeated Neighbor neighbor = 1;
            }
            Neighbors neighbors = 3;
            message RouterAdvertisement {
               message Config {
                  uint32 interval = 1;
                  uint32 lifetime = 2;
                  bool suppress = 3;
               }
               Config config = 1;
               message State {
                  uint32 interval = 1;
                  uint32 lifetime = 2;
                  bool suppress = 3;
               }
               State state = 2;
            }
            RouterAdvertisement router_advertisement = 4;
            message State {
               message Counters {
                  uint64 in_discarded_pkts = 1;
                  uint64 in_error_pkts = 2;
                  uint64 in_forwarded_octets = 3;
                  uint64 in_forwarded_pkts = 4;
                  uint64 in_octets = 5;
                  uint64 in_pkts = 6;
                  uint64 out_discarded_pkts = 7;
                  uint64 out_error_pkts = 8;
                  uint64 out_forwarded_octets = 9;
                  uint64 out_forwarded_pkts = 10;
                  uint64 out_octets = 11;
                  uint64 out_pkts = 12;
               }
               Counters counters = 1;
               bool dhcp_client = 2;
               uint32 dup_addr_detect_transmits = 3;
               bool enabled = 4;
               uint32 mtu = 5;
            }
            State state = 5;
            message Unnumbered {
               message Config {
                  bool enabled = 1;
               }
               Config config = 1;
               message InterfaceRef {
                  message Config {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  Config config = 1;
                  message State {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  State state = 2;
               }
               InterfaceRef interface_ref = 2;
               message State {
                  bool enabled = 1;
               }
               State state = 3;
            }
            Unnumbered unnumbered = 6;
         }
         Ipv6 ipv6 = 4;
      }
      RoutedVlan routed_vlan = 6;
   }
   repeated Interface interface = 1;
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


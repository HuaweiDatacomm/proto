syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-24 16:05:15
// ProtoYang-version 1
// module huawei-site
// revision 2022-01-27
// revision 2022-01-10
// revision 2020-08-13
// namespace urn:huawei:yang:huawei-site

package huawei_site;

message Site {
   message SiteInstances {
      message SiteInstance {
         uint32 id = 1 [json_name = "id"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_RR = 1;
            Type_CPE = 2;
            Type_RRX_CPE = 3;
         };
         Type type = 2 [json_name = "type"];
         string system_id = 3 [json_name = "system-id"];
         enum Gateway {
            INVALID_ENUM_VALUE_Gateway = 0;
            Gateway_SINGLE = 1;
            Gateway_DUAL = 2;
         };
         Gateway gateway = 4 [json_name = "gateway"];
         string peer_system_id = 5 [json_name = "peer-system-id"];
         bool interworking_gateway = 6 [json_name = "interworking-gateway"];
         bool hub_enable = 7 [json_name = "hub-enable"];
         message RoutingDomains {
            message RoutingDomain {
               string domain_name = 1 [json_name = "domain-name"];
               uint32 domain_id = 2 [json_name = "domain-id"];
            }
            repeated RoutingDomain routing_domain = 1 [json_name = "routing-domain"];
         }
         RoutingDomains routing_domains = 8 [json_name = "routing-domains"];
         message TransportNetworks {
            message TransportNetwork {
               string network_name = 1 [json_name = "network-name"];
               uint32 network_id = 2 [json_name = "network-id"];
               uint32 priority = 3 [json_name = "priority"];
            }
            repeated TransportNetwork transport_network = 1 [json_name = "transport-network"];
         }
         TransportNetworks transport_networks = 9 [json_name = "transport-networks"];
         message TransportNetworkPoints {
            message TransportNetworkPoint {
               uint32 point_id = 1 [json_name = "point-id"];
               enum TnpType {
                  TnpType_IPV4 = 0;
                  TnpType_IPV6 = 1;
               };
               TnpType tnp_type = 2 [json_name = "tnp-type"];
               string public_ip = 3 [json_name = "public-ip"];
               string domain_name = 4 [json_name = "domain-name"];
               string network_name = 5 [json_name = "network-name"];
               uint32 weight = 6 [json_name = "weight"];
               string source_interface = 7 [json_name = "source-interface"];
               message NatDetect {
                  bool enable = 1 [json_name = "enable"];
                  uint32 dest_port = 2 [json_name = "dest-port"];
               }
               NatDetect nat_detect = 8 [json_name = "nat-detect"];
               bool srv6 = 9 [json_name = "srv6"];
               bool statistics = 10 [json_name = "statistics"];
               uint32 mtu = 11 [json_name = "mtu"];
               uint32 input_bandwidth = 12 [json_name = "input-bandwidth"];
               uint32 output_bandwidth = 13 [json_name = "output-bandwidth"];
               message IpsecP2Mp {
                  string ipsec_p2mp_policy = 1 [json_name = "ipsec-p2mp-policy"];
               }
               IpsecP2Mp ipsec_p2mp = 14 [json_name = "ipsec-p2mp"];
            }
            repeated TransportNetworkPoint transport_network_point = 1 [json_name = "transport-network-point"];
         }
         TransportNetworkPoints transport_network_points = 10 [json_name = "transport-network-points"];
         message ColorPolicys {
            message BasedSiteId {
               enum Mode {
                  Mode_SMALLER = 0;
                  Mode_LARGER = 1;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            BasedSiteId based_site_id = 1 [json_name = "based-site-id"];
            message BasedRules {
               message BasedTransportNetworkPriority {
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_SMALLER = 1;
                     Mode_LARGER = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               BasedTransportNetworkPriority based_transport_network_priority = 1 [json_name = "based-transport-network-priority"];
               message BasedBandwidth {
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_SMALLER = 1;
                     Mode_LARGER = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               BasedBandwidth based_bandwidth = 2 [json_name = "based-bandwidth"];
               message BasedHub {
                  bool enable = 1 [json_name = "enable"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               BasedHub based_hub = 3 [json_name = "based-hub"];
            }
            BasedRules based_rules = 2 [json_name = "based-rules"];
         }
         ColorPolicys color_policys = 11 [json_name = "color-policys"];
         uint32 interworking_gateway_qos_local_id = 12 [json_name = "interworking-gateway-qos-local-id"];
      }
      repeated SiteInstance site_instance = 1 [json_name = "site-instance"];
   }
   SiteInstances site_instances = 1 [json_name = "site-instances"];
   message Srv6TeStaticPath {
      message PathGroups {
         message PathGroup {
            string name = 1 [json_name = "name"];
            uint32 headpoint_tnp = 2 [json_name = "headpoint-tnp"];
            message PathNodes {
               message PathNode {
                  uint32 node_id = 1 [json_name = "node-id"];
                  uint32 endpoint_site = 2 [json_name = "endpoint-site"];
                  uint32 endpoint_tnp = 3 [json_name = "endpoint-tnp"];
                  message CandidatePaths {
                     message CandidatePath {
                        string name = 1 [json_name = "name"];
                        uint32 discriminator = 2 [json_name = "discriminator"];
                        uint32 preference = 3 [json_name = "preference"];
                        string binding_sid = 4 [json_name = "binding-sid"];
                     }
                     repeated CandidatePath candidate_path = 1 [json_name = "candidate-path"];
                  }
                  CandidatePaths candidate_paths = 4 [json_name = "candidate-paths"];
               }
               repeated PathNode path_node = 1 [json_name = "path-node"];
            }
            PathNodes path_nodes = 3 [json_name = "path-nodes"];
         }
         repeated PathGroup path_group = 1 [json_name = "path-group"];
      }
      PathGroups path_groups = 1 [json_name = "path-groups"];
   }
   Srv6TeStaticPath srv6_te_static_path = 2 [json_name = "srv6-te-static-path"];
   message AppStatistics {
      message Statistics {
         message Statistic {
            uint32 app_id = 1 [json_name = "app-id"];
            uint32 src_tnp_id = 2 [json_name = "src-tnp-id"];
            uint32 dest_tnp_id = 3 [json_name = "dest-tnp-id"];
            uint32 dest_site_id = 4 [json_name = "dest-site-id"];
            string app_name = 5 [json_name = "app-name"];
            uint64 in_octets = 6 [json_name = "in-octets"];
            uint64 in_pkts = 7 [json_name = "in-pkts"];
            uint64 out_octets = 8 [json_name = "out-octets"];
            uint64 out_pkts = 9 [json_name = "out-pkts"];
         }
         repeated Statistic statistic = 1 [json_name = "statistic"];
      }
      Statistics statistics = 1 [json_name = "statistics"];
      message VisitorStatistics {
         message VisitorStatistic {
            string src_ip = 1 [json_name = "src-ip"];
            uint32 app_id = 2 [json_name = "app-id"];
            string app_name = 3 [json_name = "app-name"];
            uint32 app_type = 4 [json_name = "app-type"];
            string app_class = 5 [json_name = "app-class"];
            uint64 in_octets = 6 [json_name = "in-octets"];
            uint64 in_pkts = 7 [json_name = "in-pkts"];
            uint64 out_octets = 8 [json_name = "out-octets"];
            uint64 out_pkts = 9 [json_name = "out-pkts"];
         }
         repeated VisitorStatistic visitor_statistic = 1 [json_name = "visitor-statistic"];
      }
      VisitorStatistics visitor_statistics = 2 [json_name = "visitor-statistics"];
   }
   AppStatistics app_statistics = 3 [json_name = "app-statistics"];
   message Connection {
      message Statistics {
         message Statistic {
            uint32 src_tnp_id = 1 [json_name = "src-tnp-id"];
            uint32 dest_tnp_id = 2 [json_name = "dest-tnp-id"];
            uint32 dest_site_id = 3 [json_name = "dest-site-id"];
            uint64 in_octets = 4 [json_name = "in-octets"];
            uint64 in_pkts = 5 [json_name = "in-pkts"];
            uint64 out_octets = 6 [json_name = "out-octets"];
            uint64 out_pkts = 7 [json_name = "out-pkts"];
         }
         repeated Statistic statistic = 1 [json_name = "statistic"];
      }
      Statistics statistics = 1 [json_name = "statistics"];
      message Qualitys {
         message Quality {
            uint32 src_tnp_id = 1 [json_name = "src-tnp-id"];
            uint32 dest_tnp_id = 2 [json_name = "dest-tnp-id"];
            uint32 dest_site_id = 3 [json_name = "dest-site-id"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_IPFPM = 1;
            };
            Type type = 4 [json_name = "type"];
            uint32 packet_loss_ratio = 5 [json_name = "packet-loss-ratio"];
            int32 packet_loss = 6 [json_name = "packet-loss"];
            uint32 jitter = 7 [json_name = "jitter"];
            uint32 delay = 8 [json_name = "delay"];
         }
         repeated Quality quality = 1 [json_name = "quality"];
      }
      Qualitys qualitys = 2 [json_name = "qualitys"];
      message ConnectionUsage {
         uint32 connection_limit = 1 [json_name = "connection-limit"];
         uint32 connection_number = 2 [json_name = "connection-number"];
      }
      ConnectionUsage connection_usage = 3 [json_name = "connection-usage"];
   }
   Connection connection = 4 [json_name = "connection"];
   message SiteGroups {
      message SiteGroup {
         string name = 1 [json_name = "name"];
         message PeerSiteParameters_PeerSiteList {
            message PeerSites {
               message PeerSite {
                  uint32 id = 1 [json_name = "id"];
                  uint32 bandwidth_percentage = 2 [json_name = "bandwidth-percentage"];
               }
               repeated PeerSite peer_site = 1 [json_name = "peer-site"];
            }
            PeerSites peer_sites = 1 [json_name = "peer-sites"];
         }
         message PeerSiteParameters_PeerSiteAll {
            message AllSites {
               uint32 bandwidth_percentage = 1 [json_name = "bandwidth-percentage"];
            }
            AllSites all_sites = 1 [json_name = "all-sites"];
         }
         oneof PeerSiteParameters {
            PeerSiteParameters_PeerSiteList peer_site_parameters_peer_site_list = 2 [json_name = "peer-site-list"];
            PeerSiteParameters_PeerSiteAll peer_site_parameters_peer_site_all = 3 [json_name = "peer-site-all"];
         }
         message TrafficPolicy {
            string policy_name = 1 [json_name = "policy-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
         }
         TrafficPolicy traffic_policy = 4 [json_name = "traffic-policy"];
      }
      repeated SiteGroup site_group = 1 [json_name = "site-group"];
   }
   SiteGroups site_groups = 5 [json_name = "site-groups"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-18 17:07:16
// ProtoYang-version 1
// module huawei-loadbalance
// revision 2022-04-16
// revision 2022-04-13
// revision 2022-03-18
// revision 2022-03-09
// revision 2021-06-22
// revision 2021-05-26
// revision 2021-04-09
// revision 2020-06-16
// revision 2020-06-15
// revision 2020-05-11
// revision 2020-05-07
// revision 2020-04-20
// revision 2020-02-18
// revision 2020-01-22
// revision 2020-01-13
// revision 2019-12-18
// revision 2019-09-04
// revision 2019-04-01
// namespace urn:huawei:yang:huawei-loadbalance

package huawei_loadbalance;

message Loadbalance {
   message CxHashCfgs {
      message CxHashCfg {
         enum CxArithmetic {
            CxArithmetic_ARITHMETIC1 = 0;
            CxArithmetic_ARITHMETIC2 = 1;
            CxArithmetic_ARITHMETIC3 = 2;
            CxArithmetic_ARITHMETIC4 = 3;
            CxArithmetic_ARITHMETIC5 = 4;
            CxArithmetic_INVALID = 5;
            CxArithmetic_RANDOM = 6;
         };
         CxArithmetic cxArithmetic = 1;
         string cxHashCustomSeed = 2;
         enum CxHashMaterial {
            CxHashMaterial_DISABLE = 0;
            CxHashMaterial_INVALID = 1;
            CxHashMaterial_L2 = 2;
            CxHashMaterial_L3 = 3;
            CxHashMaterial_L4 = 4;
            CxHashMaterial_LABELX_IP = 5;
            CxHashMaterial_UNDODISABLE = 6;
         };
         CxHashMaterial cxHashMaterial = 3;
         enum CxHashType {
            CxHashType_HASHARITHMETIC = 0;
            CxHashType_HASHFIELDS = 1;
            CxHashType_HASHMULPE = 2;
            CxHashType_HASHSEED = 3;
         };
         CxHashType cxHashType = 4;
         enum CxMulPEFlag {
            CxMulPEFlag_DISABLE = 0;
            CxMulPEFlag_ENABLE = 1;
            CxMulPEFlag_NUM1 = 2;
            CxMulPEFlag_NUM10 = 3;
            CxMulPEFlag_NUM11 = 4;
            CxMulPEFlag_NUM2 = 5;
            CxMulPEFlag_NUM3 = 6;
            CxMulPEFlag_NUM4 = 7;
            CxMulPEFlag_NUM5 = 8;
            CxMulPEFlag_NUM6 = 9;
            CxMulPEFlag_NUM7 = 10;
            CxMulPEFlag_NUM8 = 11;
            CxMulPEFlag_NUM9 = 12;
         };
         CxMulPEFlag cxMulPEFlag = 5;
         bool cxRandomFlag = 6;
         bool cxSecondHashFlag = 7;
         string cxSlotId = 8;
         enum CxTrunkEcmp {
            CxTrunkEcmp_INVALID = 0;
            CxTrunkEcmp_IP = 1;
            CxTrunkEcmp_MAC = 2;
            CxTrunkEcmp_TUNNELX_INFO = 3;
            CxTrunkEcmp_VLL = 4;
         };
         CxTrunkEcmp cxTrunkEcmp = 9;
      }
      repeated CxHashCfg cxHashCfg = 1;
   }
   CxHashCfgs cxHashCfgs = 1;
   message DynadjustCfgs {
      message DynadjustCfg {
         bool dynEnable = 1;
         enum DynType {
            DynType_TRUNK = 0;
         };
         DynType dynType = 2;
      }
      repeated DynadjustCfg dynadjustCfg = 1;
   }
   DynadjustCfgs dynadjustCfgs = 2;
   message DynamicAdjustCfgs {
      message DynamicAdjustCfg {
         bool dynamicAdjustEn = 1;
         string slotId = 2;
      }
      repeated DynamicAdjustCfg dynamicAdjustCfg = 1;
   }
   DynamicAdjustCfgs dynamicAdjustCfgs = 3;
   message GetLoadbalanceHashInfos {
      message GetLoadbalanceHashInfo {
         enum HashQueryType {
            HashQueryType_ALL = 0;
            HashQueryType_SLOT = 1;
         };
         HashQueryType hashQueryType = 1;
         message LoadbalanceHashInfos {
            message LoadbalanceHashInfo {
               string hashInfo = 1;
            }
            repeated LoadbalanceHashInfo loadbalanceHashInfo = 1;
         }
         LoadbalanceHashInfos loadbalanceHashInfos = 2;
         string slotId = 3;
      }
      repeated GetLoadbalanceHashInfo getLoadbalanceHashInfo = 1;
   }
   GetLoadbalanceHashInfos getLoadbalanceHashInfos = 4;
   message GlobalAttributeCfg {
      bool globalAvoidIpv4En = 1;
      bool globalAvoidIpv6En = 2;
      bool globalAvoidMplsEn = 3;
      bool globalMplsUcmpEn = 4;
      bool globalUcmpEn = 5;
      uint32 mplsLoadBlcWtr = 6;
      bool mplsSegmRoutingTransitEn = 7;
      bool mplsTeConvergenceEn = 8;
      bool mplsTrunkEnhance = 9;
      bool mplsTrunkEnhanceFwd = 10;
      bool trunkEnhance = 11;
      bool trunkEnhanceFwd = 12;
      bool trunkhashenable = 13;
      bool vxlanl2vniLoadBlcEn = 14;
      bool vxlanl3vniLoadBlcEn = 15;
   }
   GlobalAttributeCfg globalAttributeCfg = 5;
   message Hash588Cfgs {
      message Hash588Cfg {
         enum HashMaterial588 {
            HashMaterial588_DIP = 0;
            HashMaterial588_INVALID = 1;
            HashMaterial588_SIP = 2;
         };
         HashMaterial588 hashMaterial588 = 1;
         enum HashType588 {
            HashType588_ENHANCE = 0;
            HashType588_IP = 1;
            HashType588_MPLS = 2;
         };
         HashType588 hashType588 = 2;
         string slotId588 = 3;
      }
      repeated Hash588Cfg hash588Cfg = 1;
   }
   Hash588Cfgs hash588Cfgs = 6;
   message HashCfgs {
      message HashCfg {
         enum Arithmetic {
            Arithmetic_ARITHMETIC1 = 0;
            Arithmetic_ARITHMETIC2 = 1;
            Arithmetic_ARITHMETIC3 = 2;
            Arithmetic_INVALID = 3;
         };
         Arithmetic arithmetic = 1;
         string hashBox1 = 2;
         string hashBox2 = 3;
         string hashCustomSeed = 4;
         enum HashMaterial {
            HashMaterial_INVALID = 0;
            HashMaterial_L2 = 1;
            HashMaterial_L3 = 2;
            HashMaterial_L4 = 3;
         };
         HashMaterial hashMaterial = 5;
         enum HashType {
            HashType_HASHARITHMETIC = 0;
            HashType_HASHBOX = 1;
            HashType_HASHFIELDS = 2;
            HashType_HASHSEED = 3;
         };
         HashType hashType = 6;
         bool randomFlag = 7;
         string slotId = 8;
         enum TrunkEcmp {
            TrunkEcmp_ECMP = 0;
            TrunkEcmp_ECMP1 = 1;
            TrunkEcmp_ECMP2 = 2;
            TrunkEcmp_INVALID = 3;
            TrunkEcmp_IP = 4;
            TrunkEcmp_MAC = 5;
            TrunkEcmp_TRUNK = 6;
            TrunkEcmp_VLL = 7;
         };
         TrunkEcmp trunkEcmp = 9;
      }
      repeated HashCfg hashCfg = 1;
   }
   HashCfgs hashCfgs = 7;
   message HashIpCfgs {
      message HashIpCfg {
         enum Cfgtype {
            Cfgtype_ALL = 0;
            Cfgtype_SLOT = 1;
         };
         Cfgtype cfgtype = 1;
         enum HashIpType {
            HashIpType_DESTINATIONX_IP = 0;
            HashIpType_NULL = 1;
            HashIpType_SOURCEX_IP = 2;
         };
         HashIpType hashIpType = 2;
         string slotId = 3;
      }
      repeated HashIpCfg hashIpCfg = 1;
   }
   HashIpCfgs hashIpCfgs = 8;
   message HashIpSeCfgs {
      message HashIpSeCfg {
         enum Cfgtype {
            Cfgtype_ALL = 0;
            Cfgtype_SLOT = 1;
         };
         Cfgtype cfgtype = 1;
         enum HashIpType {
            HashIpType_DESTINATIONX_IP = 0;
            HashIpType_NULL = 1;
            HashIpType_SOURCEX_IP = 2;
         };
         HashIpType hashIpType = 2;
         string slotId = 3;
      }
      repeated HashIpSeCfg hashIpSeCfg = 1;
   }
   HashIpSeCfgs hashIpSeCfgs = 9;
   message HashPacketCfgs {
      message HashPacketCfg {
         enum HashType {
            HashType_FLOW = 0;
            HashType_PACKET = 1;
         };
         HashType hashType = 1;
         string slotId = 2;
      }
      repeated HashPacketCfg hashPacketCfg = 1;
   }
   HashPacketCfgs hashPacketCfgs = 10;
   message IfP2MpLoadbalanceCfgs {
      message IfP2MpLoadbalanceCfg {
         string ifName = 1;
         bool loadBanlanceEn = 2;
         bool rootloadBanlanceEn = 3;
         bool rootloadBanlanceSpmsiDis = 4;
      }
      repeated IfP2MpLoadbalanceCfg ifP2mpLoadbalanceCfg = 1;
   }
   IfP2MpLoadbalanceCfgs ifP2mpLoadbalanceCfgs = 11;
   message IfPoisonReverseCfgs {
      message IfPoisonReverseCfg {
         string ifName = 1;
         bool ifPoisonReverseEn = 2;
      }
      repeated IfPoisonReverseCfg ifPoisonReverseCfg = 1;
   }
   IfPoisonReverseCfgs ifPoisonReverseCfgs = 12;
   message IfUcmpCfgs {
      message IfUcmpCfg {
         string ifName = 1;
         bool ifUcmpEn = 2;
      }
      repeated IfUcmpCfg ifUcmpCfg = 1;
   }
   IfUcmpCfgs ifUcmpCfgs = 13;
   message InterfacePacketCfgs {
      message InterfacePacketCfg {
         string ifName = 1;
         bool ifPerPacketEn = 2;
      }
      repeated InterfacePacketCfg interfacePacketCfg = 1;
   }
   InterfacePacketCfgs interfacePacketCfgs = 14;
   message IntfMtuCfgs {
      message IntfMtuCfg {
         enum Chkmode {
            Chkmode_IP = 0;
            Chkmode_LABELX_CONTAINEDX_LENGTH = 1;
         };
         Chkmode chkmode = 1;
         string slotId = 2;
      }
      repeated IntfMtuCfg intfMtuCfg = 1;
   }
   IntfMtuCfgs intfMtuCfgs = 15;
   message LocalfwdCfgs {
      message LocalfwdCfg {
         bool lcEnable = 1;
         enum LcType {
            LcType_UNICAST = 0;
         };
         LcType lcType = 2;
      }
      repeated LocalfwdCfg localfwdCfg = 1;
   }
   LocalfwdCfgs localfwdCfgs = 16;
   message MplsDeepHashCfgs {
      message DeepHashCfg {
         enum DeepMplsHash {
            DeepMplsHash_L3 = 0;
            DeepMplsHash_LABEL = 1;
         };
         DeepMplsHash deepMplsHash = 1;
         enum FragmentField {
            FragmentField_IP = 0;
            FragmentField_IPX_FRAGMENT = 1;
         };
         FragmentField fragmentField = 2;
         string ifName = 3;
      }
      repeated DeepHashCfg deepHashCfg = 1;
   }
   MplsDeepHashCfgs mplsDeepHashCfgs = 17;
   message MplsEntropyLabelCFG {
      enum ExpPipeMode {
         ExpPipeMode_PIPE = 0;
         ExpPipeMode_UNIFORM = 1;
      };
      ExpPipeMode expPipeMode = 1;
      enum TtlPipeMode {
         TtlPipeMode_PIPE = 0;
         TtlPipeMode_UNIFORM = 1;
      };
      TtlPipeMode ttlPipeMode = 2;
   }
   MplsEntropyLabelCFG mplsEntropyLabelCFG = 18;
   message MplsFrags {
      message MplsFrag {
         bool mplsFragEn = 1;
         string slotId = 2;
      }
      repeated MplsFrag mplsFrag = 1;
   }
   MplsFrags mplsFrags = 19;
   message MplsHashCfgs {
      message HashCfg {
         string slotId = 2;
      }
      repeated HashCfg hashCfg = 1;
   }
   MplsHashCfgs mplsHashCfgs = 20;
   message MplsLoadBCtrWords {
      message MplsLoadBCtrWord {
         bool mplsLoadBCtrWordDisable = 1;
         string slotId = 2;
      }
      repeated MplsLoadBCtrWord mplsLoadBCtrWord = 1;
   }
   MplsLoadBCtrWords mplsLoadBCtrWords = 21;
   message P2MpLoadbalanceNumCfg {
      uint32 number3 = 1;
   }
   P2MpLoadbalanceNumCfg p2mpLoadbalanceNumCfg = 23;
   message SlotAvoidCfgs {
      message SlotAvoidCfg {
         enum AvoidForwardType {
            AvoidForwardType_IPV4 = 0;
            AvoidForwardType_IPV6 = 1;
            AvoidForwardType_MPLS = 2;
            AvoidForwardType_VLL = 3;
         };
         AvoidForwardType avoidForwardType = 1;
         string position = 2;
      }
      repeated SlotAvoidCfg slotAvoidCfg = 1;
   }
   SlotAvoidCfgs slotAvoidCfgs = 24;
   message MplsLoadblcElawords {
      enum ElawordsEnable {
         ElawordsEnable_DISABLE = 0;
         ElawordsEnable_ENABLE = 1;
      };
      ElawordsEnable elawords_enable = 1 [json_name = "elawords-enable"];
   }
   MplsLoadblcElawords mpls_loadblc_elawords = 25 [json_name = "mpls-loadblc-elawords"];
   message GlobalAttribute {
      bool ucmp_enable = 1 [json_name = "ucmp-enable"];
      bool mpls_ucmp_enable = 2 [json_name = "mpls-ucmp-enable"];
      bool vxlan_l2vni_enable = 3 [json_name = "vxlan-l2vni-enable"];
      bool vxlan_l3vni_enable = 4 [json_name = "vxlan-l3vni-enable"];
      bool vxlan_l2deep_hash_enable = 5 [json_name = "vxlan-l2deep-hash-enable"];
      bool trunk_multicast_enable = 6 [json_name = "trunk-multicast-enable"];
      bool mpls_te_convergence_enable = 7 [json_name = "mpls-te-convergence-enable"];
      uint32 mpls_loadblc_wtr = 8 [json_name = "mpls-loadblc-wtr"];
      bool tunnel_info_gtp_enable = 9 [json_name = "tunnel-info-gtp-enable"];
      message HashArithmeticTrunkEnhance {
      }
      HashArithmeticTrunkEnhance hash_arithmetic_trunk_enhance = 10 [json_name = "hash-arithmetic-trunk-enhance"];
      bool avoid_ipv4_enable = 11 [json_name = "avoid-ipv4-enable"];
      bool avoid_ipv6_enable = 12 [json_name = "avoid-ipv6-enable"];
      bool avoid_mpls_enable = 13 [json_name = "avoid-mpls-enable"];
      bool mpls_sr_transit_enable = 14 [json_name = "mpls-sr-transit-enable"];
      bool mpls_trunk_enhance_fwd = 15 [json_name = "mpls-trunk-enhance-fwd"];
      bool trunk_enhance_fwd = 16 [json_name = "trunk-enhance-fwd"];
      bool dynamic_enable = 17 [json_name = "dynamic-enable"];
      message FlowLabelDisable {
      }
      FlowLabelDisable flow_label_disable = 18 [json_name = "flow-label-disable"];
      message UnequalCost_Ucmp {
         bool ucmp_enable = 1 [json_name = "ucmp-enable"];
      }
      message UnequalCost_UcmpBandwidthConfig {
         bool ucmp_bandwidth_config_enable = 1 [json_name = "ucmp-bandwidth-config-enable"];
      }
      oneof UnequalCost {
         UnequalCost_Ucmp unequal_cost_ucmp = 19 [json_name = "ucmp"];
         UnequalCost_UcmpBandwidthConfig unequal_cost_ucmp_bandwidth_config = 20 [json_name = "ucmp-bandwidth-config"];
      }
   }
   GlobalAttribute global_attribute = 26 [json_name = "global-attribute"];
   message HashKeyIp {
      enum IpType {
         INVALID_ENUM_VALUE_IpType = 0;
         IpType_DESTINATIONX_IP = 4;
         IpType_SOURCEX_IP = 5;
      };
      IpType ip_type = 1 [json_name = "ip-type"];
   }
   HashKeyIp hash_key_ip = 27 [json_name = "hash-key-ip"];
   message HashKeyIpSlots {
      message HashKeyIpSlot {
         string slot_id = 1 [json_name = "slot-id"];
         enum IpType {
            INVALID_ENUM_VALUE_IpType = 0;
            IpType_DESTINATIONX_IP = 4;
            IpType_SOURCEX_IP = 5;
         };
         IpType ip_type = 2 [json_name = "ip-type"];
      }
      repeated HashKeyIpSlot hash_key_ip_slot = 1 [json_name = "hash-key-ip-slot"];
   }
   HashKeyIpSlots hash_key_ip_slots = 28 [json_name = "hash-key-ip-slots"];
   message HashInstructions {
      message HashInstruction {
         string slot_id = 1 [json_name = "slot-id"];
         enum QueryType {
            QueryType_ALL = 0;
            QueryType_SLOT = 1;
         };
         QueryType query_type = 2 [json_name = "query-type"];
         message Infos {
            string info = 1 [json_name = "info"];
         }
         Infos infos = 3 [json_name = "infos"];
         bool tunnel_gtp_enable = 4 [json_name = "tunnel-gtp-enable"];
      }
      repeated HashInstruction hash_instruction = 1 [json_name = "hash-instruction"];
   }
   HashInstructions hash_instructions = 29 [json_name = "hash-instructions"];
   message EcmpStateful {
      uint32 minimum = 1 [json_name = "minimum"];
      uint32 maximum = 2 [json_name = "maximum"];
      uint32 accuracy = 3 [json_name = "accuracy"];
   }
   EcmpStateful ecmp_stateful = 30 [json_name = "ecmp-stateful"];
   message MplsHashpacket {
      enum HashType {
         INVALID_ENUM_VALUE_HashType = 0;
         HashType_FLOW = 194;
         HashType_PACKET = 195;
      };
      HashType hash_type = 1 [json_name = "hash-type"];
   }
   MplsHashpacket mpls_hashpacket = 31 [json_name = "mpls-hashpacket"];
   MplsHashpacket mpls_hashpacket_1 = 32 [json_name = "mpls-hashpacket"];
   message MplsIntfmtu {
      enum Chkmode {
         INVALID_ENUM_VALUE_Chkmode = 0;
         Chkmode_IP = 291;
         Chkmode_LABELX_CONTAINEDX_LENGTH = 292;
      };
      Chkmode chkmode = 1 [json_name = "chkmode"];
   }
   MplsIntfmtu mpls_intfmtu = 33 [json_name = "mpls-intfmtu"];
   MplsIntfmtu mpls_intfmtu_1 = 34 [json_name = "mpls-intfmtu"];
   message P2MpLoadBalanceNum {
      uint32 number3 = 1 [json_name = "number"];
   }
   P2MpLoadBalanceNum p2mp_load_balance_num = 35 [json_name = "p2mp-load-balance-num"];
   message LoadBalanceEcmpProfile {
      message IpHash {
         bool sip = 1 [json_name = "sip"];
         bool dip = 2 [json_name = "dip"];
         bool vlan = 3 [json_name = "vlan"];
         bool l4sport = 4 [json_name = "l4sport"];
         bool l4dport = 5 [json_name = "l4dport"];
         bool protocol = 6 [json_name = "protocol"];
         bool src_interface = 7 [json_name = "src-interface"];
         bool flowlabel = 8 [json_name = "flowlabel"];
         bool dscp = 9 [json_name = "dscp"];
      }
      IpHash ip_hash = 1 [json_name = "ip-hash"];
      message IpTunnelHash {
         bool inner_src_ip = 1 [json_name = "inner-src-ip"];
         bool inner_dst_ip = 2 [json_name = "inner-dst-ip"];
         bool inner_l4_dport = 3 [json_name = "inner-l4-dport"];
         bool inner_l4_sport = 4 [json_name = "inner-l4-sport"];
         bool inner_protocol = 5 [json_name = "inner-protocol"];
         bool src_interface = 6 [json_name = "src-interface"];
         bool src_mac = 7 [json_name = "src-mac"];
         bool dst_mac = 8 [json_name = "dst-mac"];
         bool include_erspan = 9 [json_name = "include-erspan"];
      }
      IpTunnelHash ip_tunnel_hash = 2 [json_name = "ip-tunnel-hash"];
      message VxlanHash {
         bool inner_src_ip = 1 [json_name = "inner-src-ip"];
         bool inner_dst_ip = 2 [json_name = "inner-dst-ip"];
         bool inner_l4_dport = 3 [json_name = "inner-l4-dport"];
         bool inner_l4_sport = 4 [json_name = "inner-l4-sport"];
         bool inner_protocol = 5 [json_name = "inner-protocol"];
         bool src_interface = 6 [json_name = "src-interface"];
         bool vni = 7 [json_name = "vni"];
      }
      VxlanHash vxlan_hash = 3 [json_name = "vxlan-hash"];
      message LoadBalanceEcmpHashmode {
         enum HashMode {
            HashMode_MODE0 = 0;
            HashMode_MODE1 = 1;
            HashMode_MODE2 = 2;
            HashMode_MODE3 = 3;
            HashMode_MODE4 = 4;
            HashMode_MODE5 = 5;
         };
         HashMode hash_mode = 1 [json_name = "hash-mode"];
         bool bfd_vxlan_bundle_random_hash = 2 [json_name = "bfd-vxlan-bundle-random-hash"];
         enum VxlanOverlayLocalPreference {
            INVALID_ENUM_VALUE_VxlanOverlayLocalPreference = 0;
            VxlanOverlayLocalPreference_LOCALX_PREFERENCE = 1;
            VxlanOverlayLocalPreference_NETWORKX_LOCALX_PREFERENCE = 2;
         };
         VxlanOverlayLocalPreference vxlan_overlay_local_preference = 3 [json_name = "vxlan-overlay-local-preference"];
      }
      LoadBalanceEcmpHashmode load_balance_ecmp_hashmode = 4 [json_name = "load-balance-ecmp-hashmode"];
      message LoadBalanceEcmpUniversal {
         uint32 universal_id = 1 [json_name = "universal-id"];
      }
      LoadBalanceEcmpUniversal load_balance_ecmp_universal = 5 [json_name = "load-balance-ecmp-universal"];
      message LoadBalanceEcmpSeed {
         uint32 seed_data = 1 [json_name = "seed-data"];
      }
      LoadBalanceEcmpSeed load_balance_ecmp_seed = 6 [json_name = "load-balance-ecmp-seed"];
      message EcmpLocalPreference {
         bool enable = 1 [json_name = "enable"];
      }
      EcmpLocalPreference ecmp_local_preference = 7 [json_name = "ecmp-local-preference"];
      message LocalPreferenceEnhanced {
         bool enable = 1 [json_name = "enable"];
      }
      LocalPreferenceEnhanced local_preference_enhanced = 8 [json_name = "local-preference-enhanced"];
      message VxlanOverlayLocalPreference {
         enum LocalPreferenceMode {
            INVALID_ENUM_VALUE_LocalPreferenceMode = 0;
            LocalPreferenceMode_VXLAN = 1;
            LocalPreferenceMode_ALL = 2;
         };
         LocalPreferenceMode local_preference_mode = 1 [json_name = "local-preference-mode"];
      }
      VxlanOverlayLocalPreference vxlan_overlay_local_preference = 9 [json_name = "vxlan-overlay-local-preference"];
      message DynamicEcmpMode {
         enum Mode {
            Mode_ELIGIBLE = 0;
            Mode_SPRAY = 1;
            Mode_FIXED = 2;
         };
         Mode mode = 1 [json_name = "mode"];
         uint32 flowlet_gap_time = 2 [json_name = "flowlet-gap-time"];
      }
      DynamicEcmpMode dynamic_ecmp_mode = 10 [json_name = "dynamic-ecmp-mode"];
   }
   LoadBalanceEcmpProfile load_balance_ecmp_profile = 36 [json_name = "load-balance-ecmp-profile"];
   message DynamicLoadBalanceProfile {
      uint32 time_gap = 1 [json_name = "time-gap"];
   }
   DynamicLoadBalanceProfile dynamic_load_balance_profile = 37 [json_name = "dynamic-load-balance-profile"];
   message AvoidDegradations {
      message AvoidDegradation {
         string position = 1 [json_name = "position"];
         enum ForwardType {
            ForwardType_IPV4 = 0;
            ForwardType_IPV6 = 1;
            ForwardType_MPLS = 2;
            ForwardType_VLL = 3;
         };
         ForwardType forward_type = 2 [json_name = "forward-type"];
      }
      repeated AvoidDegradation avoid_degradation = 1 [json_name = "avoid-degradation"];
   }
   AvoidDegradations avoid_degradations = 38 [json_name = "avoid-degradations"];
   message LoadBalanceEcmpEnable {
      bool is_enable = 1 [json_name = "is-enable"];
   }
   LoadBalanceEcmpEnable load_balance_ecmp_enable = 39 [json_name = "load-balance-ecmp-enable"];
   message DlbEnables {
      message DlbEnable {
         string vpn_name = 1 [json_name = "vpn-name"];
      }
      repeated DlbEnable dlb_enable = 1 [json_name = "dlb-enable"];
   }
   DlbEnables dlb_enables = 40 [json_name = "dlb-enables"];
   message LoadBalanceEcmpStatefulEnhanced {
      bool is_enable = 1 [json_name = "is-enable"];
   }
   LoadBalanceEcmpStatefulEnhanced load_balance_ecmp_stateful_enhanced = 41 [json_name = "load-balance-ecmp-stateful-enhanced"];
}
message HwLoadBalanceHashKeyIpAlmOccur {
   string slotID = 1;
}
message HwLoadBalanceHashKeyIpAlmResume {
   string slotID = 1;
}
message HwMplsLabelstackNumExceed {
   uint32 hwStitchLabel = 1;
}
message HwMplsLabelstackNumExceedClear {
   uint32 hwStitchLabel = 1;
}
message HwTeSourceInterfaceCheckAlarm {
   string hwRpfPortName = 1;
   uint32 hwRpfTeLabel = 2;
}


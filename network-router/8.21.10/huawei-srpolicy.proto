syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-03-24 17:47:52
// ProtoYang-version 1
// module huawei-srpolicy
// revision 2022-02-23
// revision 2022-01-27
// revision 2020-09-14
// revision 2020-08-14
// revision 2020-06-28
// revision 2020-06-20
// revision 2020-06-01
// revision 2020-05-28
// revision 2020-05-25
// revision 2020-05-20
// revision 2020-03-26
// revision 2020-03-24
// revision 2020-03-16
// revision 2020-02-28
// revision 2020-02-17
// revision 2020-01-03
// revision 2019-11-18
// revision 2019-04-04
// namespace urn:huawei:yang:huawei-srpolicy

package huawei_srpolicy;

message Srpolicy {
   message ListTrafficStatInfos {
      message ListTrafficStatInfo {
         uint32 asNo = 1;
         uint32 bindingSID = 2;
         uint32 color = 3;
         uint32 discriminator = 4;
         uint64 displayInterval = 5;
         string endPoint = 6;
         uint32 flowPeriod = 7;
         uint64 intervalByteRate = 8;
         uint64 intervalPktRate = 9;
         message Labels {
            message Label {
               uint32 index = 1;
               uint32 labelValue = 2;
            }
            repeated Label label = 1;
         }
         Labels labels = 10;
         uint64 lastPeriodByteRate = 11;
         uint64 lastPeriodPktRate = 12;
         bool noResourceFlag = 13;
         string nodeAddress = 14;
         enum PathType {
            PathType_BACKUP = 0;
            PathType_PRIMARY = 1;
            PathType_X_ = 2;
         };
         PathType pathType = 15;
         string policyName = 16;
         uint32 preference = 17;
         enum ProtocolOrigin {
            ProtocolOrigin_BGP = 0;
            ProtocolOrigin_LOCAL = 1;
            ProtocolOrigin_PCEP = 2;
         };
         ProtocolOrigin protocolOrigin = 18;
         uint32 segmentListId = 19;
         uint64 totalByte = 20;
         uint64 totalPacket = 21;
         uint32 tunnelId = 22;
         uint32 xcIndex = 23;
      }
      repeated ListTrafficStatInfo listTrafficStatInfo = 1;
   }
   ListTrafficStatInfos listTrafficStatInfos = 1;
   message PolicyTrafficStatInfos {
      message PolicyTrafficStatInfo {
         uint32 bindingSID = 1;
         uint32 color = 2;
         uint64 displayInterval = 3;
         string endPoint = 4;
         uint32 flowPeriod = 5;
         uint64 intervalByteRate = 6;
         uint64 intervalPktRate = 7;
         uint64 lastPeriodByteRate = 8;
         uint64 lastPeriodPktRate = 9;
         string policyName = 10;
         uint64 totalByte = 11;
         uint64 totalPacket = 12;
         uint32 tunnelId = 13;
      }
      repeated PolicyTrafficStatInfo policyTrafficStatInfo = 1;
   }
   PolicyTrafficStatInfos policyTrafficStatInfos = 2;
   message SegmentLists {
      message SegmentList {
         string listName = 1;
         message ListSids {
            message ListSid {
               uint32 label = 1;
               uint32 sidIndex = 2;
               enum SidType {
                  SidType_SID_LABEL = 0;
               };
               SidType sidType = 3;
            }
            repeated ListSid listSid = 1;
         }
         ListSids listSids = 2;
      }
      repeated SegmentList segmentList = 1;
   }
   SegmentLists segmentLists = 3;
   message SrtePolicyGlobalCfg {
      uint32 deleteDelay = 1;
      bool hsbEnable = 2;
      bool sbfdEnable = 3;
      uint32 sbfdMinRx = 4;
      uint32 sbfdMinTx = 5;
      uint32 sbfdMultiNum = 6;
      bool trafficStatEn = 7;
   }
   SrtePolicyGlobalCfg srtePolicyGlobalCfg = 4;
   message SrtePolicyGroupInfos {
      message SrtePolicyGroupInfo {
         string endpoint = 1;
         uint32 groupId = 2;
         enum GroupState {
            GroupState_DOWN = 0;
            GroupState_UP = 1;
         };
         GroupState groupState = 3;
         uint32 groupTunnelID = 4;
         uint32 matchCount = 5;
         message MatchInfos {
            message MatchInfo {
               enum AfType {
                  AfType_IPV4 = 0;
                  AfType_IPV6 = 1;
               };
               AfType afType = 1;
               uint32 color = 2;
               bool default = 3;
               string dscpValues = 4;
               uint32 tunnelID = 5;
            }
            repeated MatchInfo matchInfo = 1;
         }
         MatchInfos matchInfos = 6;
         string tunnelType = 7;
         uint32 upMatchCount = 8;
      }
      repeated SrtePolicyGroupInfo srtePolicyGroupInfo = 1;
   }
   SrtePolicyGroupInfos srtePolicyGroupInfos = 5;
   message SrtePolicyGroups {
      message SrtePolicyGroup {
         message ColorDscpMatchs {
            message ColorDscpMatch {
               enum AfType {
                  AfType_IPV4 = 0;
                  AfType_IPV6 = 1;
               };
               AfType afType = 1;
               uint32 color = 2;
               bool default = 3;
               string dscpValues = 4;
            }
            repeated ColorDscpMatch colorDscpMatch = 1;
         }
         ColorDscpMatchs colorDscpMatchs = 1;
         string endpointV4Address = 2;
         uint32 groupId = 3;
      }
      repeated SrtePolicyGroup srtePolicyGroup = 1;
   }
   SrtePolicyGroups srtePolicyGroups = 6;
   message SrtePolicyInfos {
      message SrtePolicyInfo {
         enum AdminState {
            AdminState_DOWN = 0;
            AdminState_INIT = 1;
            AdminState_TIMEOUT = 2;
            AdminState_UP = 3;
            AdminState_UPX_NOX_BFDX_ = 4;
            AdminState_WAITING = 5;
            AdminState_X_ = 6;
         };
         AdminState adminState = 1;
         enum BfdEnable {
            BfdEnable_DISABLE = 0;
            BfdEnable_SBFDENABLE = 1;
         };
         BfdEnable bfdEnable = 2;
         uint32 bindingSID = 3;
         uint32 candidatePathCount = 4;
         message CandidatePathInfos {
            message CandidatePathInfo {
               uint32 asnNo = 1;
               uint32 discriminator = 2;
               uint32 groupId = 3;
               string nodeAddress = 4;
               uint32 pathBindingSID = 5;
               string pathPolicyName = 6;
               enum PathState {
                  PathState_DOWN = 0;
                  PathState_INIT = 1;
                  PathState_TIMEOUT = 2;
                  PathState_UP = 3;
                  PathState_UPX_NOX_BFDX_ = 4;
                  PathState_WAITING = 5;
                  PathState_X_ = 6;
               };
               PathState pathState = 7;
               enum PathType {
                  PathType_BACKUP = 0;
                  PathType_PRIMARY = 1;
                  PathType_X_ = 2;
               };
               PathType pathType = 8;
               uint32 preference = 9;
               enum ProtocolOrigin {
                  ProtocolOrigin_BGP = 0;
                  ProtocolOrigin_LOCAL = 1;
                  ProtocolOrigin_PCEP = 2;
               };
               ProtocolOrigin protocolOrigin = 10;
               message SegListInfos {
                  message SegListInfo {
                     uint32 delTimeRemain = 1;
                     uint32 expValue = 2;
                     message Labels {
                        message Label {
                           uint32 id = 1;
                           uint32 val = 2;
                        }
                        repeated Label label = 1;
                     }
                     Labels labels = 3;
                     string segListBfdState = 4;
                     string segListState = 5;
                     uint32 segmentListId = 6;
                     string segmentListName = 7;
                     uint32 ttlValue = 8;
                     uint32 xcIndex = 9;
                  }
                  repeated SegListInfo segListInfo = 1;
               }
               SegListInfos segListInfos = 11;
               uint32 segmentListCount = 12;
            }
            repeated CandidatePathInfo candidatePathInfo = 1;
         }
         CandidatePathInfos candidatePathInfos = 5;
         uint32 color = 6;
         string endPoint = 7;
         enum HsbFlag {
            HsbFlag_DISABLE = 0;
            HsbFlag_ENABLE = 1;
         };
         HsbFlag hsbFlag = 8;
         uint32 mtu = 9;
         enum PipeMode {
            PipeMode_NONE = 0;
            PipeMode_PIPE = 1;
            PipeMode_UNIFORM = 2;
         };
         PipeMode pipeMode = 10;
         string policyName = 11;
         enum PolicyState {
            PolicyState_DOWN = 0;
            PolicyState_INIT = 1;
            PolicyState_TIMEOUT = 2;
            PolicyState_UP = 3;
            PolicyState_UPX_NOX_BFDX_ = 4;
            PolicyState_WAITING = 5;
            PolicyState_X_ = 6;
         };
         PolicyState policyState = 12;
         enum ServiceClass {
            ServiceClass_AF1 = 0;
            ServiceClass_AF2 = 1;
            ServiceClass_AF3 = 2;
            ServiceClass_AF4 = 3;
            ServiceClass_BE = 4;
            ServiceClass_CS6 = 5;
            ServiceClass_CS7 = 6;
            ServiceClass_EF = 7;
            ServiceClass_X_ = 8;
         };
         ServiceClass serviceClass = 13;
         enum ServiceColor {
            ServiceColor_GREEN = 0;
            ServiceColor_RED = 1;
            ServiceColor_X_ = 2;
            ServiceColor_YELLOW = 3;
         };
         ServiceColor serviceColor = 14;
         enum TrafficStatEn {
            TrafficStatEn_DISABLE = 0;
            TrafficStatEn_ENABLE = 1;
         };
         TrafficStatEn trafficStatEn = 15;
         uint32 tunnelID = 16;
         string tunnelType = 17;
      }
      repeated SrtePolicyInfo srtePolicyInfo = 1;
   }
   SrtePolicyInfos srtePolicyInfos = 7;
   message SrtePolicys {
      message SrtePolicy {
         uint32 bindingSID = 1;
         message CandidatePaths {
            message CandidatePath {
               uint32 preference = 1;
               message SegmentLists {
                  message SegmentList {
                     string listName = 1;
                  }
                  repeated SegmentList segmentList = 1;
               }
               SegmentLists segmentLists = 2;
            }
            repeated CandidatePath candidatePath = 1;
         }
         CandidatePaths candidatePaths = 2;
         uint32 color = 3;
         message DiffServMode {
            enum PipeMode {
               PipeMode_NONE = 0;
               PipeMode_PIPE = 1;
               PipeMode_UNIFORM = 2;
            };
            PipeMode pipeMode = 1;
            enum ServiceClass {
               ServiceClass_AF1 = 0;
               ServiceClass_AF2 = 1;
               ServiceClass_AF3 = 2;
               ServiceClass_AF4 = 3;
               ServiceClass_BE = 4;
               ServiceClass_CS6 = 5;
               ServiceClass_CS7 = 6;
               ServiceClass_EF = 7;
            };
            ServiceClass serviceClass = 2;
            enum ServiceColor {
               ServiceColor_GREEN = 0;
               ServiceColor_RED = 1;
               ServiceColor_YELLOW = 2;
            };
            ServiceColor serviceColor = 3;
         }
         DiffServMode diffServMode = 4;
         string endpointV4Address = 5;
         enum HsbEnable {
            HsbEnable_DISABLE = 0;
            HsbEnable_ENABLE = 1;
            HsbEnable_INIT = 2;
         };
         HsbEnable hsbEnable = 6;
         uint32 mtu = 7;
         string policyName = 8;
         enum SbfdEnable {
            SbfdEnable_DISABLE = 0;
            SbfdEnable_ENABLE = 1;
            SbfdEnable_INIT = 2;
         };
         SbfdEnable sbfdEnable = 9;
         bool shutdown = 10;
         enum TrafficStatEn {
            TrafficStatEn_DISABLE = 0;
            TrafficStatEn_ENABLE = 1;
            TrafficStatEn_INIT = 2;
         };
         TrafficStatEn trafficStatEn = 11;
      }
      repeated SrtePolicy srtePolicy = 1;
   }
   SrtePolicys srtePolicys = 8;
   message AttributeTemplates {
      message AttributeTemplate {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         enum BfdEnable {
            BfdEnable_NOTX_CONFIGURED = 0;
            BfdEnable_SBFDX_ENABLE = 1;
            BfdEnable_DISABLE = 2;
            BfdEnable_UBFDX_ENABLE = 3;
            BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
            BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 5;
         };
         BfdEnable bfd_enable = 3 [json_name = "bfd-enable"];
         enum SbfdBypass {
            SbfdBypass_NOTX_CONFIGURED = 0;
            SbfdBypass_ENABLE = 1;
            SbfdBypass_DISABLE = 2;
         };
         SbfdBypass sbfd_bypass = 4 [json_name = "sbfd-bypass"];
         enum HsbEnable {
            HsbEnable_NOTX_CONFIGURED = 0;
            HsbEnable_ENABLE = 1;
            HsbEnable_DISABLE = 2;
         };
         HsbEnable hsb_enable = 5 [json_name = "hsb-enable"];
         enum TrafficStatisticsEnable {
            TrafficStatisticsEnable_NOTX_CONFIGURED = 0;
            TrafficStatisticsEnable_ENABLE = 1;
            TrafficStatisticsEnable_DISABLE = 2;
         };
         TrafficStatisticsEnable traffic_statistics_enable = 6 [json_name = "traffic-statistics-enable"];
         enum PathVerificationEnable {
            PathVerificationEnable_NOTX_CONFIGURED = 0;
            PathVerificationEnable_ENABLE = 1;
            PathVerificationEnable_DISABLE = 2;
            PathVerificationEnable_SPECIFIEDX_SIDX_ENABLE = 3;
         };
         PathVerificationEnable path_verification_enable = 7 [json_name = "path-verification-enable"];
         enum BfdBypass {
            BfdBypass_NOTX_CONFIGURED = 0;
            BfdBypass_BFDX_BYPASS = 1;
            BfdBypass_BFDX_NOBYPASS = 2;
         };
         BfdBypass bfd_bypass = 8 [json_name = "bfd-bypass"];
      }
      repeated AttributeTemplate attribute_template = 1 [json_name = "attribute-template"];
   }
   AttributeTemplates attribute_templates = 9 [json_name = "attribute-templates"];
   message AttributeTemplateInfos {
      message AttributeTemplateInfo {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         enum BfdEnable {
            BfdEnable_NOTX_CONFIGURED = 0;
            BfdEnable_SBFDX_ENABLE = 1;
            BfdEnable_DISABLE = 2;
            BfdEnable_UBFDX_ENABLE = 3;
            BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
            BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 5;
         };
         BfdEnable bfd_enable = 3 [json_name = "bfd-enable"];
         enum SbfdBypass {
            SbfdBypass_NOTX_CONFIGURED = 0;
            SbfdBypass_ENABLE = 1;
            SbfdBypass_DISABLE = 2;
         };
         SbfdBypass sbfd_bypass = 4 [json_name = "sbfd-bypass"];
         enum HsbEnable {
            HsbEnable_NOTX_CONFIGURED = 0;
            HsbEnable_ENABLE = 1;
            HsbEnable_DISABLE = 2;
         };
         HsbEnable hsb_enable = 5 [json_name = "hsb-enable"];
         enum PathVerificationEnable {
            PathVerificationEnable_NOTX_CONFIGURED = 0;
            PathVerificationEnable_ENABLE = 1;
            PathVerificationEnable_DISABLE = 2;
            PathVerificationEnable_SPECIFIEDX_SIDX_ENABLE = 3;
         };
         PathVerificationEnable path_verification_enable = 6 [json_name = "path-verification-enable"];
         enum TrafficStatisticsEnable {
            TrafficStatisticsEnable_NOTX_CONFIGURED = 0;
            TrafficStatisticsEnable_ENABLE = 1;
            TrafficStatisticsEnable_DISABLE = 2;
         };
         TrafficStatisticsEnable traffic_statistics_enable = 7 [json_name = "traffic-statistics-enable"];
         uint32 configuratin_path_refcnt = 8 [json_name = "configuratin-path-refcnt"];
         uint32 bgp_path_refcnt = 9 [json_name = "bgp-path-refcnt"];
         enum BfdBypass {
            BfdBypass_NOTX_CONFIGURED = 0;
            BfdBypass_BFDX_BYPASS = 1;
            BfdBypass_BFDX_NOBYPASS = 2;
         };
         BfdBypass bfd_bypass = 10 [json_name = "bfd-bypass"];
      }
      repeated AttributeTemplateInfo attribute_template_info = 1 [json_name = "attribute-template-info"];
   }
   AttributeTemplateInfos attribute_template_infos = 10 [json_name = "attribute-template-infos"];
   bool cpu_overload_control = 11 [json_name = "cpu-overload-control"];
   message Global {
      bool cpu_overload_control = 1 [json_name = "cpu-overload-control"];
   }
   Global global = 12 [json_name = "global"];
}
message HwSrPolicyStatusChange {
   string DownReason = 1;
   uint32 SrPolicyColor = 2;
   string SrPolicyEndpoint = 3;
   string SrPolicyStatus = 4;
}


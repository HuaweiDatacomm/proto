syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-24 19:15:19
// ProtoYang-version 1
// module huawei-host-defend
// revision 2022-02-24
// revision 2022-02-15
// revision 2019-11-17
// namespace urn:huawei:yang:huawei-host-defend

package huawei_host_defend;

message HostDefend {
   message GlobalManagementPlaneDefend {
      bool enable = 1 [json_name = "enable"];
      enum BgpAction {
         BgpAction_DEFAULT = 0;
         BgpAction_DENY = 1;
         BgpAction_PERMIT = 2;
      };
      BgpAction bgp_action = 2 [json_name = "bgp-action"];
      enum FtpAction {
         FtpAction_DEFAULT = 0;
         FtpAction_DENY = 1;
         FtpAction_PERMIT = 2;
      };
      FtpAction ftp_action = 3 [json_name = "ftp-action"];
      enum LdpAction {
         LdpAction_DEFAULT = 0;
         LdpAction_DENY = 1;
         LdpAction_PERMIT = 2;
      };
      LdpAction ldp_action = 4 [json_name = "ldp-action"];
      enum OspfAction {
         OspfAction_DEFAULT = 0;
         OspfAction_DENY = 1;
         OspfAction_PERMIT = 2;
      };
      OspfAction ospf_action = 5 [json_name = "ospf-action"];
      enum RipAction {
         RipAction_DEFAULT = 0;
         RipAction_DENY = 1;
         RipAction_PERMIT = 2;
      };
      RipAction rip_action = 6 [json_name = "rip-action"];
      enum RsvpAction {
         RsvpAction_DEFAULT = 0;
         RsvpAction_DENY = 1;
         RsvpAction_PERMIT = 2;
      };
      RsvpAction rsvp_action = 7 [json_name = "rsvp-action"];
      enum SnmpAction {
         SnmpAction_DEFAULT = 0;
         SnmpAction_DENY = 1;
         SnmpAction_PERMIT = 2;
      };
      SnmpAction snmp_action = 8 [json_name = "snmp-action"];
      enum SshAction {
         SshAction_DEFAULT = 0;
         SshAction_DENY = 1;
         SshAction_PERMIT = 2;
      };
      SshAction ssh_action = 9 [json_name = "ssh-action"];
      enum TelnetAction {
         TelnetAction_DEFAULT = 0;
         TelnetAction_DENY = 1;
         TelnetAction_PERMIT = 2;
      };
      TelnetAction telnet_action = 10 [json_name = "telnet-action"];
      enum TftpAction {
         TftpAction_DEFAULT = 0;
         TftpAction_DENY = 1;
         TftpAction_PERMIT = 2;
      };
      TftpAction tftp_action = 11 [json_name = "tftp-action"];
      enum IsisAction {
         IsisAction_DEFAULT = 0;
         IsisAction_DENY = 1;
         IsisAction_PERMIT = 2;
      };
      IsisAction isis_action = 12 [json_name = "isis-action"];
      enum PimAction {
         PimAction_DEFAULT = 0;
         PimAction_DENY = 1;
         PimAction_PERMIT = 2;
      };
      PimAction pim_action = 13 [json_name = "pim-action"];
      enum Bgp4PlusAction {
         Bgp4PlusAction_DEFAULT = 0;
         Bgp4PlusAction_DENY = 1;
         Bgp4PlusAction_PERMIT = 2;
      };
      Bgp4PlusAction bgp4_plus_action = 14 [json_name = "bgp4-plus-action"];
      enum Ipv6FtpAction {
         Ipv6FtpAction_DEFAULT = 0;
         Ipv6FtpAction_DENY = 1;
         Ipv6FtpAction_PERMIT = 2;
      };
      Ipv6FtpAction ipv6_ftp_action = 15 [json_name = "ipv6-ftp-action"];
      enum Ospfv3Action {
         Ospfv3Action_DEFAULT = 0;
         Ospfv3Action_DENY = 1;
         Ospfv3Action_PERMIT = 2;
      };
      Ospfv3Action ospfv3_action = 16 [json_name = "ospfv3-action"];
      enum Ipv6PimAction {
         Ipv6PimAction_DEFAULT = 0;
         Ipv6PimAction_DENY = 1;
         Ipv6PimAction_PERMIT = 2;
      };
      Ipv6PimAction ipv6_pim_action = 17 [json_name = "ipv6-pim-action"];
      enum Ipv6SshAction {
         Ipv6SshAction_DEFAULT = 0;
         Ipv6SshAction_DENY = 1;
         Ipv6SshAction_PERMIT = 2;
      };
      Ipv6SshAction ipv6_ssh_action = 18 [json_name = "ipv6-ssh-action"];
      enum Ipv6TelnetAction {
         Ipv6TelnetAction_DEFAULT = 0;
         Ipv6TelnetAction_DENY = 1;
         Ipv6TelnetAction_PERMIT = 2;
      };
      Ipv6TelnetAction ipv6_telnet_action = 19 [json_name = "ipv6-telnet-action"];
   }
   GlobalManagementPlaneDefend global_management_plane_defend = 1 [json_name = "global-management-plane-defend"];
   message ManagementPlaneDefend {
      message SlotPlys {
         message SlotPly {
            uint32 policy_id = 1 [json_name = "policy-id"];
            enum BgpAction {
               BgpAction_DEFAULT = 0;
               BgpAction_DENY = 1;
               BgpAction_PERMIT = 2;
            };
            BgpAction bgp_action = 2 [json_name = "bgp-action"];
            enum FtpAction {
               FtpAction_DEFAULT = 0;
               FtpAction_DENY = 1;
               FtpAction_PERMIT = 2;
            };
            FtpAction ftp_action = 3 [json_name = "ftp-action"];
            enum LdpAction {
               LdpAction_DEFAULT = 0;
               LdpAction_DENY = 1;
               LdpAction_PERMIT = 2;
            };
            LdpAction ldp_action = 4 [json_name = "ldp-action"];
            enum OspfAction {
               OspfAction_DEFAULT = 0;
               OspfAction_DENY = 1;
               OspfAction_PERMIT = 2;
            };
            OspfAction ospf_action = 5 [json_name = "ospf-action"];
            enum RipAction {
               RipAction_DEFAULT = 0;
               RipAction_DENY = 1;
               RipAction_PERMIT = 2;
            };
            RipAction rip_action = 6 [json_name = "rip-action"];
            enum RsvpAction {
               RsvpAction_DEFAULT = 0;
               RsvpAction_DENY = 1;
               RsvpAction_PERMIT = 2;
            };
            RsvpAction rsvp_action = 7 [json_name = "rsvp-action"];
            enum SnmpAction {
               SnmpAction_DEFAULT = 0;
               SnmpAction_DENY = 1;
               SnmpAction_PERMIT = 2;
            };
            SnmpAction snmp_action = 8 [json_name = "snmp-action"];
            enum SshAction {
               SshAction_DEFAULT = 0;
               SshAction_DENY = 1;
               SshAction_PERMIT = 2;
            };
            SshAction ssh_action = 9 [json_name = "ssh-action"];
            enum TelnetAction {
               TelnetAction_DEFAULT = 0;
               TelnetAction_DENY = 1;
               TelnetAction_PERMIT = 2;
            };
            TelnetAction telnet_action = 10 [json_name = "telnet-action"];
            enum TftpAction {
               TftpAction_DEFAULT = 0;
               TftpAction_DENY = 1;
               TftpAction_PERMIT = 2;
            };
            TftpAction tftp_action = 11 [json_name = "tftp-action"];
            enum IsisAction {
               IsisAction_DEFAULT = 0;
               IsisAction_DENY = 1;
               IsisAction_PERMIT = 2;
            };
            IsisAction isis_action = 12 [json_name = "isis-action"];
            enum PimAction {
               PimAction_DEFAULT = 0;
               PimAction_DENY = 1;
               PimAction_PERMIT = 2;
            };
            PimAction pim_action = 13 [json_name = "pim-action"];
            enum Bgp4PlusAction {
               Bgp4PlusAction_DEFAULT = 0;
               Bgp4PlusAction_DENY = 1;
               Bgp4PlusAction_PERMIT = 2;
            };
            Bgp4PlusAction bgp4_plus_action = 14 [json_name = "bgp4-plus-action"];
            enum Ipv6FtpAction {
               Ipv6FtpAction_DEFAULT = 0;
               Ipv6FtpAction_DENY = 1;
               Ipv6FtpAction_PERMIT = 2;
            };
            Ipv6FtpAction ipv6_ftp_action = 15 [json_name = "ipv6-ftp-action"];
            enum Ospfv3Action {
               Ospfv3Action_DEFAULT = 0;
               Ospfv3Action_DENY = 1;
               Ospfv3Action_PERMIT = 2;
            };
            Ospfv3Action ospfv3_action = 16 [json_name = "ospfv3-action"];
            enum Ipv6PimAction {
               Ipv6PimAction_DEFAULT = 0;
               Ipv6PimAction_DENY = 1;
               Ipv6PimAction_PERMIT = 2;
            };
            Ipv6PimAction ipv6_pim_action = 17 [json_name = "ipv6-pim-action"];
            enum Ipv6SshAction {
               Ipv6SshAction_DEFAULT = 0;
               Ipv6SshAction_DENY = 1;
               Ipv6SshAction_PERMIT = 2;
            };
            Ipv6SshAction ipv6_ssh_action = 18 [json_name = "ipv6-ssh-action"];
            enum Ipv6TelnetAction {
               Ipv6TelnetAction_DEFAULT = 0;
               Ipv6TelnetAction_DENY = 1;
               Ipv6TelnetAction_PERMIT = 2;
            };
            Ipv6TelnetAction ipv6_telnet_action = 19 [json_name = "ipv6-telnet-action"];
         }
         repeated SlotPly slot_ply = 1 [json_name = "slot-ply"];
      }
      SlotPlys slot_plys = 1 [json_name = "slot-plys"];
      message IfPlys {
         message IfPly {
            uint32 policy_id = 1 [json_name = "policy-id"];
            enum BgpAction {
               BgpAction_DEFAULT = 0;
               BgpAction_DENY = 1;
               BgpAction_PERMIT = 2;
            };
            BgpAction bgp_action = 2 [json_name = "bgp-action"];
            enum FtpAction {
               FtpAction_DEFAULT = 0;
               FtpAction_DENY = 1;
               FtpAction_PERMIT = 2;
            };
            FtpAction ftp_action = 3 [json_name = "ftp-action"];
            enum LdpAction {
               LdpAction_DEFAULT = 0;
               LdpAction_DENY = 1;
               LdpAction_PERMIT = 2;
            };
            LdpAction ldp_action = 4 [json_name = "ldp-action"];
            enum OspfAction {
               OspfAction_DEFAULT = 0;
               OspfAction_DENY = 1;
               OspfAction_PERMIT = 2;
            };
            OspfAction ospf_action = 5 [json_name = "ospf-action"];
            enum RipAction {
               RipAction_DEFAULT = 0;
               RipAction_DENY = 1;
               RipAction_PERMIT = 2;
            };
            RipAction rip_action = 6 [json_name = "rip-action"];
            enum RsvpAction {
               RsvpAction_DEFAULT = 0;
               RsvpAction_DENY = 1;
               RsvpAction_PERMIT = 2;
            };
            RsvpAction rsvp_action = 7 [json_name = "rsvp-action"];
            enum SnmpAction {
               SnmpAction_DEFAULT = 0;
               SnmpAction_DENY = 1;
               SnmpAction_PERMIT = 2;
            };
            SnmpAction snmp_action = 8 [json_name = "snmp-action"];
            enum SshAction {
               SshAction_DEFAULT = 0;
               SshAction_DENY = 1;
               SshAction_PERMIT = 2;
            };
            SshAction ssh_action = 9 [json_name = "ssh-action"];
            enum TelnetAction {
               TelnetAction_DEFAULT = 0;
               TelnetAction_DENY = 1;
               TelnetAction_PERMIT = 2;
            };
            TelnetAction telnet_action = 10 [json_name = "telnet-action"];
            enum TftpAction {
               TftpAction_DEFAULT = 0;
               TftpAction_DENY = 1;
               TftpAction_PERMIT = 2;
            };
            TftpAction tftp_action = 11 [json_name = "tftp-action"];
            enum IsisAction {
               IsisAction_DEFAULT = 0;
               IsisAction_DENY = 1;
               IsisAction_PERMIT = 2;
            };
            IsisAction isis_action = 12 [json_name = "isis-action"];
            enum PimAction {
               PimAction_DEFAULT = 0;
               PimAction_DENY = 1;
               PimAction_PERMIT = 2;
            };
            PimAction pim_action = 13 [json_name = "pim-action"];
            enum Bgp4PlusAction {
               Bgp4PlusAction_DEFAULT = 0;
               Bgp4PlusAction_DENY = 1;
               Bgp4PlusAction_PERMIT = 2;
            };
            Bgp4PlusAction bgp4_plus_action = 14 [json_name = "bgp4-plus-action"];
            enum Ipv6FtpAction {
               Ipv6FtpAction_DEFAULT = 0;
               Ipv6FtpAction_DENY = 1;
               Ipv6FtpAction_PERMIT = 2;
            };
            Ipv6FtpAction ipv6_ftp_action = 15 [json_name = "ipv6-ftp-action"];
            enum Ospfv3Action {
               Ospfv3Action_DEFAULT = 0;
               Ospfv3Action_DENY = 1;
               Ospfv3Action_PERMIT = 2;
            };
            Ospfv3Action ospfv3_action = 16 [json_name = "ospfv3-action"];
            enum Ipv6PimAction {
               Ipv6PimAction_DEFAULT = 0;
               Ipv6PimAction_DENY = 1;
               Ipv6PimAction_PERMIT = 2;
            };
            Ipv6PimAction ipv6_pim_action = 17 [json_name = "ipv6-pim-action"];
            enum Ipv6SshAction {
               Ipv6SshAction_DEFAULT = 0;
               Ipv6SshAction_DENY = 1;
               Ipv6SshAction_PERMIT = 2;
            };
            Ipv6SshAction ipv6_ssh_action = 18 [json_name = "ipv6-ssh-action"];
            enum Ipv6TelnetAction {
               Ipv6TelnetAction_DEFAULT = 0;
               Ipv6TelnetAction_DENY = 1;
               Ipv6TelnetAction_PERMIT = 2;
            };
            Ipv6TelnetAction ipv6_telnet_action = 19 [json_name = "ipv6-telnet-action"];
         }
         repeated IfPly if_ply = 1 [json_name = "if-ply"];
      }
      IfPlys if_plys = 2 [json_name = "if-plys"];
      message SlotStats {
         message SlotStat {
            string slot_id = 1 [json_name = "slot-id"];
            enum ProtocolType {
               INVALID_ENUM_VALUE_ProtocolType = 0;
               ProtocolType_FTPX_SERVER = 1;
               ProtocolType_SSHX_SERVER = 2;
               ProtocolType_SNMP = 3;
               ProtocolType_TELNETX_SERVER = 4;
               ProtocolType_TFTP = 5;
               ProtocolType_BGP = 6;
               ProtocolType_LDP = 7;
               ProtocolType_RSVP = 8;
               ProtocolType_OSPF = 9;
               ProtocolType_RIP = 10;
               ProtocolType_ISIS = 11;
               ProtocolType_PIM = 12;
               ProtocolType_BGP4X_PLUS = 13;
               ProtocolType_IPV6X_FTPX_SERVER = 14;
               ProtocolType_OSPFV3 = 15;
               ProtocolType_IPV6X_PIM = 16;
               ProtocolType_IPV6X_SSHX_SERVER = 17;
               ProtocolType_IPV6X_TELNETX_SERVER = 18;
            };
            ProtocolType protocol_type = 2 [json_name = "protocol-type"];
            uint64 recv_total_pkt_num = 3 [json_name = "recv-total-pkt-num"];
            uint64 pass_pkt_num = 4 [json_name = "pass-pkt-num"];
            uint64 drop_pkt_num = 5 [json_name = "drop-pkt-num"];
         }
         repeated SlotStat slot_stat = 1 [json_name = "slot-stat"];
      }
      SlotStats slot_stats = 3 [json_name = "slot-stats"];
      message IfStats {
         message IfStat {
            string if_name = 1 [json_name = "if-name"];
            enum ProtocolType {
               INVALID_ENUM_VALUE_ProtocolType = 0;
               ProtocolType_FTPX_SERVER = 1;
               ProtocolType_SSHX_SERVER = 2;
               ProtocolType_SNMP = 3;
               ProtocolType_TELNETX_SERVER = 4;
               ProtocolType_TFTP = 5;
               ProtocolType_BGP = 6;
               ProtocolType_LDP = 7;
               ProtocolType_RSVP = 8;
               ProtocolType_OSPF = 9;
               ProtocolType_RIP = 10;
               ProtocolType_ISIS = 11;
               ProtocolType_PIM = 12;
               ProtocolType_BGP4X_PLUS = 13;
               ProtocolType_IPV6X_FTPX_SERVER = 14;
               ProtocolType_OSPFV3 = 15;
               ProtocolType_IPV6X_PIM = 16;
               ProtocolType_IPV6X_SSHX_SERVER = 17;
               ProtocolType_IPV6X_TELNETX_SERVER = 18;
            };
            ProtocolType protocol_type = 2 [json_name = "protocol-type"];
            uint64 recv_total_pkt_num = 3 [json_name = "recv-total-pkt-num"];
            uint64 pass_pkt_num = 4 [json_name = "pass-pkt-num"];
            uint64 drop_pkt_num = 5 [json_name = "drop-pkt-num"];
         }
         repeated IfStat if_stat = 1 [json_name = "if-stat"];
      }
      IfStats if_stats = 4 [json_name = "if-stats"];
   }
   ManagementPlaneDefend management_plane_defend = 2 [json_name = "management-plane-defend"];
   message HostPacketHeaderObtains {
      message HostPacketHeaderObtain {
         uint32 instance_id = 1 [json_name = "instance-id"];
         enum Status {
            Status_STOPPED = 0;
            Status_RUNNING = 1;
         };
         Status status = 2 [json_name = "status"];
         uint32 timeout = 3 [json_name = "timeout"];
         uint32 remain_time = 4 [json_name = "remain-time"];
         uint32 record_packet_number = 5 [json_name = "record-packet-number"];
         uint32 file_length = 6 [json_name = "file-length"];
         uint32 total_memory_size = 7 [json_name = "total-memory-size"];
         uint32 obtain_packet_number = 8 [json_name = "obtain-packet-number"];
         uint32 obtain_packet_size = 9 [json_name = "obtain-packet-size"];
         uint32 saved_packet_number = 10 [json_name = "saved-packet-number"];
         uint32 saved_packet_size = 11 [json_name = "saved-packet-size"];
         uint32 delete_packet_number = 12 [json_name = "delete-packet-number"];
         uint32 delete_packet_size = 13 [json_name = "delete-packet-size"];
         string first_packet_time = 14 [json_name = "first-packet-time"];
         string last_packet_time = 15 [json_name = "last-packet-time"];
         string acl = 16 [json_name = "acl"];
         uint32 memory_packet_number = 17 [json_name = "memory-packet-number"];
         uint32 remain_time_delete = 18 [json_name = "remain-time-delete"];
         string packet_device_name = 19 [json_name = "packet-device-name"];
         string file_name = 20 [json_name = "file-name"];
         enum LinkType {
            LinkType_NONE = 0;
            LinkType_ETHERNET = 1;
            LinkType_PPP = 2;
            LinkType_HDLC = 3;
            LinkType_ATM = 4;
         };
         LinkType link_type = 21 [json_name = "link-type"];
         string if_name = 22 [json_name = "if-name"];
         string inner_protocol = 23 [json_name = "inner-protocol"];
      }
      repeated HostPacketHeaderObtain host_packet_header_obtain = 1 [json_name = "host-packet-header-obtain"];
   }
   HostPacketHeaderObtains host_packet_header_obtains = 3 [json_name = "host-packet-header-obtains"];
   message GlobalAttribute {
      uint32 priority_8021p = 1 [json_name = "priority-8021p"];
      enum ControlManagementIsolateStatus {
         ControlManagementIsolateStatus_DISABLE = 0;
         ControlManagementIsolateStatus_ENABLE = 1;
      };
      ControlManagementIsolateStatus control_management_isolate_status = 2 [json_name = "control-management-isolate-status"];
      uint32 capture_pkt_file_limit = 3 [json_name = "capture-pkt-file-limit"];
   }
   GlobalAttribute global_attribute = 4 [json_name = "global-attribute"];
   message AntiAttack {
      enum Abnormal {
         Abnormal_DISABLE = 0;
         Abnormal_ENABLE = 1;
      };
      Abnormal abnormal = 1 [json_name = "abnormal"];
      enum UdpFlood {
         UdpFlood_DISABLE = 0;
         UdpFlood_ENABLE = 1;
      };
      UdpFlood udp_flood = 2 [json_name = "udp-flood"];
      enum TcpSynchronize {
         TcpSynchronize_DISABLE = 0;
         TcpSynchronize_ENABLE = 1;
      };
      TcpSynchronize tcp_synchronize = 3 [json_name = "tcp-synchronize"];
      uint32 tcp_synchronize_cir = 4 [json_name = "tcp-synchronize-cir"];
      enum IcmpFlood {
         IcmpFlood_DISABLE = 0;
         IcmpFlood_ENABLE = 1;
      };
      IcmpFlood icmp_flood = 5 [json_name = "icmp-flood"];
      uint32 icmp_cir = 6 [json_name = "icmp-cir"];
      enum Fragment {
         Fragment_DISABLE = 0;
         Fragment_ENABLE = 1;
      };
      Fragment fragment = 7 [json_name = "fragment"];
      uint32 fragment_cir = 8 [json_name = "fragment-cir"];
      message MatchStats {
         message MatchStat {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ABNORMAL = 1;
               Type_FRAGMENT = 2;
               Type_ICMPX_FLOOD = 3;
               Type_TCPX_SYNCHRONIZE = 4;
               Type_UDPX_FLOOD = 5;
            };
            Type type = 1 [json_name = "type"];
            uint64 total_count = 2 [json_name = "total-count"];
            uint64 drop_count = 3 [json_name = "drop-count"];
            uint64 pass_count = 4 [json_name = "pass-count"];
         }
         repeated MatchStat match_stat = 1 [json_name = "match-stat"];
      }
      MatchStats match_stats = 9 [json_name = "match-stats"];
   }
   AntiAttack anti_attack = 5 [json_name = "anti-attack"];
   message ServiceSecurity {
      message Ipv4Policys {
         message Ipv4Policy {
            string policy_name = 1 [json_name = "policy-name"];
            uint32 step = 2 [json_name = "step"];
            string description = 3 [json_name = "description"];
            message Rules {
               message Rule {
                  string rule_name = 1 [json_name = "rule-name"];
                  uint32 rule_id = 2 [json_name = "rule-id"];
                  enum Action {
                     Action_PERMIT = 0;
                     Action_DENY = 1;
                  };
                  Action action = 3 [json_name = "action"];
                  enum ProtocolType {
                     INVALID_ENUM_VALUE_ProtocolType = 0;
                     ProtocolType_NUMBER = 1;
                     ProtocolType_NAME = 2;
                     ProtocolType_EXTENSIONX_HEAD = 3;
                  };
                  ProtocolType protocol_type = 4 [json_name = "protocol-type"];
                  enum ProtocolName {
                     ProtocolName_NONE = 0;
                     ProtocolName_BGP = 1;
                     ProtocolName_OSPF = 2;
                     ProtocolName_RSVP = 3;
                     ProtocolName_PIM = 4;
                     ProtocolName_TCP = 5;
                     ProtocolName_UDP = 6;
                     ProtocolName_DHCPX_CLIENT = 8;
                     ProtocolName_DHCPX_SERVER = 9;
                     ProtocolName_FTP = 10;
                     ProtocolName_LDP = 11;
                     ProtocolName_LSPX_PING = 12;
                     ProtocolName_NTP = 13;
                     ProtocolName_RIP = 14;
                     ProtocolName_SNMP = 15;
                     ProtocolName_SSH = 16;
                     ProtocolName_TELNET = 17;
                     ProtocolName_TFTP = 18;
                     ProtocolName_IGMP = 19;
                     ProtocolName_ISIS = 20;
                     ProtocolName_ANY = 21;
                  };
                  ProtocolName protocol_name = 5 [json_name = "protocol-name"];
                  uint32 protocol_number = 6 [json_name = "protocol-number"];
                  string source_ip = 7 [json_name = "source-ip"];
                  string source_mask = 8 [json_name = "source-mask"];
                  string dest_ip = 9 [json_name = "dest-ip"];
                  string dest_mask = 10 [json_name = "dest-mask"];
                  uint32 source_port = 11 [json_name = "source-port"];
                  uint32 destination_port = 12 [json_name = "destination-port"];
                  message MatchStat {
                     uint64 count = 1 [json_name = "count"];
                  }
                  MatchStat match_stat = 13 [json_name = "match-stat"];
               }
               repeated Rule rule = 1 [json_name = "rule"];
            }
            Rules rules = 4 [json_name = "rules"];
         }
         repeated Ipv4Policy ipv4_policy = 1 [json_name = "ipv4-policy"];
      }
      Ipv4Policys ipv4_policys = 1 [json_name = "ipv4-policys"];
      message Ipv6Policys {
         message Ipv6Policy {
            string policy_name = 1 [json_name = "policy-name"];
            uint32 step = 2 [json_name = "step"];
            string description = 3 [json_name = "description"];
            message Rules {
               message Rule {
                  string rule_name = 1 [json_name = "rule-name"];
                  uint32 rule_id = 2 [json_name = "rule-id"];
                  enum Action {
                     Action_PERMIT = 0;
                     Action_DENY = 1;
                  };
                  Action action = 3 [json_name = "action"];
                  enum ProtocolType {
                     INVALID_ENUM_VALUE_ProtocolType = 0;
                     ProtocolType_NUMBER = 1;
                     ProtocolType_NAME = 2;
                     ProtocolType_EXTENSIONX_HEAD = 3;
                  };
                  ProtocolType protocol_type = 4 [json_name = "protocol-type"];
                  enum ProtocolName {
                     ProtocolName_NONE = 0;
                     ProtocolName_BGP = 1;
                     ProtocolName_OSPF = 2;
                     ProtocolName_RSVP = 3;
                     ProtocolName_PIM = 4;
                     ProtocolName_TCP = 5;
                     ProtocolName_UDP = 6;
                     ProtocolName_DHCPX_CLIENT = 8;
                     ProtocolName_DHCPX_SERVER = 9;
                     ProtocolName_FTP = 10;
                     ProtocolName_LDP = 11;
                     ProtocolName_LSPX_PING = 12;
                     ProtocolName_NTP = 13;
                     ProtocolName_RIP = 14;
                     ProtocolName_SNMP = 15;
                     ProtocolName_SSH = 16;
                     ProtocolName_TELNET = 17;
                     ProtocolName_TFTP = 18;
                     ProtocolName_IGMP = 19;
                     ProtocolName_ISIS = 20;
                     ProtocolName_ANY = 21;
                  };
                  ProtocolName protocol_name = 5 [json_name = "protocol-name"];
                  uint32 protocol_number = 6 [json_name = "protocol-number"];
                  string source_ip = 7 [json_name = "source-ip"];
                  uint32 source_prefix = 8 [json_name = "source-prefix"];
                  string dest_ip = 9 [json_name = "dest-ip"];
                  uint32 dest_prefix = 10 [json_name = "dest-prefix"];
                  uint32 source_port = 11 [json_name = "source-port"];
                  uint32 destination_port = 12 [json_name = "destination-port"];
                  enum SourceRouteType {
                     INVALID_ENUM_VALUE_SourceRouteType = 0;
                     SourceRouteType_SRH = 4;
                     SourceRouteType_NONE = 65535;
                  };
                  SourceRouteType source_route_type = 13 [json_name = "source-route-type"];
                  message MatchStat {
                     uint64 count = 1 [json_name = "count"];
                  }
                  MatchStat match_stat = 14 [json_name = "match-stat"];
               }
               repeated Rule rule = 1 [json_name = "rule"];
            }
            Rules rules = 4 [json_name = "rules"];
         }
         repeated Ipv6Policy ipv6_policy = 1 [json_name = "ipv6-policy"];
      }
      Ipv6Policys ipv6_policys = 2 [json_name = "ipv6-policys"];
      message GlobalBindings {
         message GlobalBinding {
            enum Family {
               INVALID_ENUM_VALUE_Family = 0;
               Family_IPV4 = 1;
               Family_IPV6 = 2;
            };
            Family family = 1 [json_name = "family"];
            string ipv4_policy_name = 2 [json_name = "ipv4-policy-name"];
            string ipv6_policy_name = 3 [json_name = "ipv6-policy-name"];
         }
         repeated GlobalBinding global_binding = 1 [json_name = "global-binding"];
      }
      GlobalBindings global_bindings = 3 [json_name = "global-bindings"];
   }
   ServiceSecurity service_security = 6 [json_name = "service-security"];
   message HostProtocolPktStats {
      bool global_switch = 1 [json_name = "global-switch"];
      message ProtocolRecvStats {
         message ProtocolRecvStat {
            enum ProtoType {
               INVALID_ENUM_VALUE_ProtoType = 0;
               ProtoType_ARP = 1;
               ProtoType_STP = 2;
               ProtoType_LACP = 3;
               ProtoType_LLDP = 4;
               ProtoType_ISIS = 5;
               ProtoType_LINKX_OTHER = 6;
               ProtoType_ICMP = 7;
               ProtoType_OSPF = 8;
               ProtoType_PIM = 9;
               ProtoType_IGMP = 10;
               ProtoType_VRRP = 11;
               ProtoType_RAWIPX_OTHER = 12;
               ProtoType_SNMP = 13;
               ProtoType_DHCP = 14;
               ProtoType_UDPX_OTHER = 15;
               ProtoType_BGP = 16;
               ProtoType_LDP = 17;
               ProtoType_TCPX_OTHER = 18;
               ProtoType_ICMPV6 = 19;
               ProtoType_OSPFV3 = 20;
               ProtoType_IPV6X_PIM = 21;
               ProtoType_MLD = 22;
               ProtoType_IPV6X_VRRP = 23;
               ProtoType_IPV6X_RAWIPX_OTHER = 24;
               ProtoType_IPV6X_SNMP = 25;
               ProtoType_IPV6X_DHCP = 26;
               ProtoType_IPV6X_UDPX_OTHER = 27;
               ProtoType_BGP4X_PLUS = 28;
               ProtoType_IPV6X_LDP = 29;
               ProtoType_IPV6X_TCPX_OTHER = 30;
               ProtoType_ALL = 31;
            };
            ProtoType proto_type = 1 [json_name = "proto-type"];
            enum Layer {
               INVALID_ENUM_VALUE_Layer = 0;
               Layer_LINK = 1;
               Layer_RAWIP = 2;
               Layer_UDP = 3;
               Layer_TCP = 4;
               Layer_IPV6X_RAWIP = 5;
               Layer_IPV6X_UDP = 6;
               Layer_IPV6X_TCP = 7;
            };
            Layer layer = 2 [json_name = "layer"];
            uint32 pass_pkt_number = 3 [json_name = "pass-pkt-number"];
            uint32 drop_pkt_number = 4 [json_name = "drop-pkt-number"];
            message ProtocolRecvIfStats {
               message ProtocolRecvIfStat {
                  string if_name = 1 [json_name = "if-name"];
                  uint32 recv_number = 2 [json_name = "recv-number"];
               }
               repeated ProtocolRecvIfStat protocol_recv_if_stat = 1 [json_name = "protocol-recv-if-stat"];
            }
            ProtocolRecvIfStats protocol_recv_if_stats = 5 [json_name = "protocol-recv-if-stats"];
         }
         repeated ProtocolRecvStat protocol_recv_stat = 1 [json_name = "protocol-recv-stat"];
      }
      ProtocolRecvStats protocol_recv_stats = 2 [json_name = "protocol-recv-stats"];
      message ProtocolRecvIfStats {
         message ProtocolRecvIfStat {
            string if_name = 1 [json_name = "if-name"];
            uint32 recv_packet_count = 2 [json_name = "recv-packet-count"];
            message ProtocolStats {
               message ProtocolStat {
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINK = 1;
                     Layer_RAWIP = 2;
                     Layer_UDP = 3;
                     Layer_TCP = 4;
                     Layer_IPV6X_RAWIP = 5;
                     Layer_IPV6X_UDP = 6;
                     Layer_IPV6X_TCP = 7;
                  };
                  Layer layer = 1 [json_name = "layer"];
                  enum Protocol {
                     INVALID_ENUM_VALUE_Protocol = 0;
                     Protocol_ARP = 1;
                     Protocol_STP = 2;
                     Protocol_LACP = 3;
                     Protocol_LLDP = 4;
                     Protocol_ISIS = 5;
                     Protocol_LINKX_OTHER = 6;
                     Protocol_ICMP = 7;
                     Protocol_OSPF = 8;
                     Protocol_PIM = 9;
                     Protocol_IGMP = 10;
                     Protocol_VRRP = 11;
                     Protocol_RAWIPX_OTHER = 12;
                     Protocol_SNMP = 13;
                     Protocol_DHCP = 14;
                     Protocol_UDPX_OTHER = 15;
                     Protocol_BGP = 16;
                     Protocol_LDP = 17;
                     Protocol_TCPX_OTHER = 18;
                     Protocol_ICMPV6 = 19;
                     Protocol_OSPFV3 = 20;
                     Protocol_IPV6X_PIM = 21;
                     Protocol_MLD = 22;
                     Protocol_IPV6X_VRRP = 23;
                     Protocol_IPV6X_RAWIPX_OTHER = 24;
                     Protocol_IPV6X_SNMP = 25;
                     Protocol_IPV6X_DHCP = 26;
                     Protocol_IPV6X_UDPX_OTHER = 27;
                     Protocol_BGP4X_PLUS = 28;
                     Protocol_IPV6X_LDP = 29;
                     Protocol_IPV6X_TCPX_OTHER = 30;
                     Protocol_ALL = 31;
                  };
                  Protocol protocol = 2 [json_name = "protocol"];
                  uint32 expected_count = 3 [json_name = "expected-count"];
                  uint32 unexpected_count = 4 [json_name = "unexpected-count"];
               }
               repeated ProtocolStat protocol_stat = 1 [json_name = "protocol-stat"];
            }
            ProtocolStats protocol_stats = 3 [json_name = "protocol-stats"];
         }
         repeated ProtocolRecvIfStat protocol_recv_if_stat = 1 [json_name = "protocol-recv-if-stat"];
      }
      ProtocolRecvIfStats protocol_recv_if_stats = 3 [json_name = "protocol-recv-if-stats"];
      message GlobalSendStats {
         message GlobalSendStat {
            enum ProtoType {
               INVALID_ENUM_VALUE_ProtoType = 0;
               ProtoType_ARP = 1;
               ProtoType_STP = 2;
               ProtoType_LACP = 3;
               ProtoType_LLDP = 4;
               ProtoType_ISIS = 5;
               ProtoType_LINKX_OTHER = 6;
               ProtoType_ICMP = 7;
               ProtoType_OSPF = 8;
               ProtoType_PIM = 9;
               ProtoType_IGMP = 10;
               ProtoType_VRRP = 11;
               ProtoType_RAWIPX_OTHER = 12;
               ProtoType_SNMP = 13;
               ProtoType_DHCP = 14;
               ProtoType_UDPX_OTHER = 15;
               ProtoType_BGP = 16;
               ProtoType_LDP = 17;
               ProtoType_TCPX_OTHER = 18;
               ProtoType_ICMPV6 = 19;
               ProtoType_OSPFV3 = 20;
               ProtoType_IPV6X_PIM = 21;
               ProtoType_MLD = 22;
               ProtoType_IPV6X_VRRP = 23;
               ProtoType_IPV6X_RAWIPX_OTHER = 24;
               ProtoType_IPV6X_SNMP = 25;
               ProtoType_IPV6X_DHCP = 26;
               ProtoType_IPV6X_UDPX_OTHER = 27;
               ProtoType_BGP4X_PLUS = 28;
               ProtoType_IPV6X_LDP = 29;
               ProtoType_IPV6X_TCPX_OTHER = 30;
               ProtoType_ALL = 31;
            };
            ProtoType proto_type = 1 [json_name = "proto-type"];
            enum Layer {
               INVALID_ENUM_VALUE_Layer = 0;
               Layer_LINK = 1;
               Layer_RAWIP = 2;
               Layer_UDP = 3;
               Layer_TCP = 4;
               Layer_IPV6X_RAWIP = 5;
               Layer_IPV6X_UDP = 6;
               Layer_IPV6X_TCP = 7;
            };
            Layer layer = 2 [json_name = "layer"];
            uint32 total_number = 3 [json_name = "total-number"];
            message SlotStats {
               message SlotStat {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINK = 1;
                     Layer_RAWIP = 2;
                     Layer_UDP = 3;
                     Layer_TCP = 4;
                     Layer_IPV6X_RAWIP = 5;
                     Layer_IPV6X_UDP = 6;
                     Layer_IPV6X_TCP = 7;
                  };
                  Layer layer = 2 [json_name = "layer"];
                  uint32 total_number = 3 [json_name = "total-number"];
               }
               repeated SlotStat slot_stat = 1 [json_name = "slot-stat"];
            }
            SlotStats slot_stats = 4 [json_name = "slot-stats"];
         }
         repeated GlobalSendStat global_send_stat = 1 [json_name = "global-send-stat"];
      }
      GlobalSendStats global_send_stats = 4 [json_name = "global-send-stats"];
      message ProtocolSendStats {
         message ProtocolSendStat {
            enum ProtoType {
               INVALID_ENUM_VALUE_ProtoType = 0;
               ProtoType_ARP = 1;
               ProtoType_STP = 2;
               ProtoType_LACP = 3;
               ProtoType_LLDP = 4;
               ProtoType_ISIS = 5;
               ProtoType_LINKX_OTHER = 6;
               ProtoType_ICMP = 7;
               ProtoType_OSPF = 8;
               ProtoType_PIM = 9;
               ProtoType_IGMP = 10;
               ProtoType_VRRP = 11;
               ProtoType_RAWIPX_OTHER = 12;
               ProtoType_SNMP = 13;
               ProtoType_DHCP = 14;
               ProtoType_UDPX_OTHER = 15;
               ProtoType_BGP = 16;
               ProtoType_LDP = 17;
               ProtoType_TCPX_OTHER = 18;
               ProtoType_ICMPV6 = 19;
               ProtoType_OSPFV3 = 20;
               ProtoType_IPV6X_PIM = 21;
               ProtoType_MLD = 22;
               ProtoType_IPV6X_VRRP = 23;
               ProtoType_IPV6X_RAWIPX_OTHER = 24;
               ProtoType_IPV6X_SNMP = 25;
               ProtoType_IPV6X_DHCP = 26;
               ProtoType_IPV6X_UDPX_OTHER = 27;
               ProtoType_BGP4X_PLUS = 28;
               ProtoType_IPV6X_LDP = 29;
               ProtoType_IPV6X_TCPX_OTHER = 30;
               ProtoType_ALL = 31;
            };
            ProtoType proto_type = 1 [json_name = "proto-type"];
            enum Layer {
               INVALID_ENUM_VALUE_Layer = 0;
               Layer_LINK = 1;
               Layer_RAWIP = 2;
               Layer_UDP = 3;
               Layer_TCP = 4;
               Layer_IPV6X_RAWIP = 5;
               Layer_IPV6X_UDP = 6;
               Layer_IPV6X_TCP = 7;
            };
            Layer layer = 2 [json_name = "layer"];
            uint64 total_number = 3 [json_name = "total-number"];
            message SlotStats {
               message SlotStat {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINK = 1;
                     Layer_RAWIP = 2;
                     Layer_UDP = 3;
                     Layer_TCP = 4;
                     Layer_IPV6X_RAWIP = 5;
                     Layer_IPV6X_UDP = 6;
                     Layer_IPV6X_TCP = 7;
                  };
                  Layer layer = 2 [json_name = "layer"];
                  uint64 total_number = 3 [json_name = "total-number"];
               }
               repeated SlotStat slot_stat = 1 [json_name = "slot-stat"];
            }
            SlotStats slot_stats = 4 [json_name = "slot-stats"];
         }
         repeated ProtocolSendStat protocol_send_stat = 1 [json_name = "protocol-send-stat"];
      }
      ProtocolSendStats protocol_send_stats = 5 [json_name = "protocol-send-stats"];
   }
   HostProtocolPktStats host_protocol_pkt_stats = 7 [json_name = "host-protocol-pkt-stats"];
   message Gtsm {
      enum GtsmPolicyAction {
         GtsmPolicyAction_PASS = 0;
         GtsmPolicyAction_DROP = 1;
      };
      GtsmPolicyAction gtsm_policy_action = 1 [json_name = "gtsm-policy-action"];
      message GtsmStats {
         message GtsmStat {
            string slot_id = 1 [json_name = "slot-id"];
            enum Protocol {
               Protocol_BGP = 0;
               Protocol_BGPV6 = 1;
               Protocol_OSPF = 2;
               Protocol_LDP = 3;
               Protocol_OSPFV3 = 4;
               Protocol_RIP = 5;
            };
            Protocol protocol = 2 [json_name = "protocol"];
            uint64 total_count = 3 [json_name = "total-count"];
            uint64 drop_count = 4 [json_name = "drop-count"];
            uint64 pass_count = 5 [json_name = "pass-count"];
         }
         repeated GtsmStat gtsm_stat = 1 [json_name = "gtsm-stat"];
      }
      GtsmStats gtsm_stats = 2 [json_name = "gtsm-stats"];
   }
   Gtsm gtsm = 8 [json_name = "gtsm"];
   message FragmentCarStats {
      message FragmentCarStat {
         string slot_id = 1 [json_name = "slot-id"];
         uint64 total_pkt_num = 2 [json_name = "total-pkt-num"];
         uint64 drop_pkt_num = 3 [json_name = "drop-pkt-num"];
         uint64 pass_pkt_num = 4 [json_name = "pass-pkt-num"];
      }
      repeated FragmentCarStat fragment_car_stat = 1 [json_name = "fragment-car-stat"];
   }
   FragmentCarStats fragment_car_stats = 9 [json_name = "fragment-car-stats"];
}


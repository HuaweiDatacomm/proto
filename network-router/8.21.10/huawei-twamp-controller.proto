syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-twamp-controller
// revision 2020-03-14
// revision 2019-12-27
// revision 2019-05-05
// namespace urn:huawei:yang:huawei-twamp-controller

package huawei_twamp_controller;

message TwampController {
   message Client {
      message Sessions {
         message Session {
            uint32 id = 1 [json_name = "id"];
            string send_ip_addr = 2 [json_name = "send-ip-addr"];
            string ref_ip_addr = 3 [json_name = "ref-ip-addr"];
            uint32 send_port = 4 [json_name = "send-port"];
            uint32 ref_port = 5 [json_name = "ref-port"];
            string vrf_name = 6 [json_name = "vrf-name"];
            uint32 dscp_value = 7 [json_name = "dscp-value"];
            uint32 padding_length = 8 [json_name = "padding-length"];
            enum PaddingType {
               PaddingType_X_00 = 0;
               PaddingType_X_55 = 85;
               PaddingType_AA = 170;
               PaddingType_FF = 255;
            };
            PaddingType padding_type = 9 [json_name = "padding-type"];
            string description = 10 [json_name = "description"];
            message Statistics {
               uint32 avg_delay = 1 [json_name = "avg-delay"];
               uint32 avg_jitter = 2 [json_name = "avg-jitter"];
               uint32 loss_count = 3 [json_name = "loss-count"];
               uint32 send_count = 4 [json_name = "send-count"];
            }
            Statistics statistics = 11 [json_name = "statistics"];
            message TwowayLossThreshold {
               string up_limit = 1 [json_name = "up-limit"];
               string low_limit = 2 [json_name = "low-limit"];
            }
            TwowayLossThreshold twoway_loss_threshold = 12 [json_name = "twoway-loss-threshold"];
            message TwowayDelayThreshold {
               uint32 up_limit = 1 [json_name = "up-limit"];
               uint32 low_limit = 2 [json_name = "low-limit"];
            }
            TwowayDelayThreshold twoway_delay_threshold = 13 [json_name = "twoway-delay-threshold"];
            message TwowayJitterThreshold {
               uint32 up_limit = 1 [json_name = "up-limit"];
               uint32 low_limit = 2 [json_name = "low-limit"];
            }
            TwowayJitterThreshold twoway_jitter_threshold = 14 [json_name = "twoway-jitter-threshold"];
            string binded_interface = 15 [json_name = "binded-interface"];
            string link_bundle_if = 16 [json_name = "link-bundle-if"];
            message SessionDetail {
               enum State {
                  State_INITIAL = 0;
                  State_INACTIVE = 1;
                  State_ACTIVE = 2;
                  State_UNKNOWN = 3;
                  State_INCONSISTENT = 4;
               };
               State state = 1 [json_name = "state"];
               enum Type {
                  Type_UNKNOWN = 0;
                  Type_CONTINUAL = 1;
                  Type_ONX_DEMAND = 2;
                  Type_REGULAR = 3;
               };
               Type type = 2 [json_name = "type"];
               enum AuthMode {
                  AuthMode_UNAUTHENTICATED = 0;
                  AuthMode_AUTHENTICATED = 1;
                  AuthMode_ENCRYPTED = 2;
                  AuthMode_UNKNOWN = 3;
               };
               AuthMode auth_mode = 3 [json_name = "auth-mode"];
               string last_start_time = 4 [json_name = "last-start-time"];
               string last_stop_time = 5 [json_name = "last-stop-time"];
               uint32 duration_time = 6 [json_name = "duration-time"];
               uint32 packet_count = 7 [json_name = "packet-count"];
               enum Period {
                  INVALID_ENUM_VALUE_Period = 0;
                  Period_X_10MS = 1;
                  Period_X_100MS = 2;
                  Period_X_1000MS = 3;
                  Period_X_30000MS = 4;
               };
               Period period = 8 [json_name = "period"];
               uint32 timeout = 9 [json_name = "timeout"];
               message MemberInterfaceInfos {
                  message MemberInterfaceInfo {
                     string member_if = 1 [json_name = "member-if"];
                     enum State {
                        State_INITIAL = 0;
                        State_INACTIVE = 1;
                        State_ACTIVE = 2;
                        State_UNKNOWN = 3;
                        State_INCONSISTENT = 4;
                     };
                     State state = 2 [json_name = "state"];
                     enum InactiveReason {
                        INVALID_ENUM_VALUE_InactiveReason = 0;
                        InactiveReason_NOTX_STARTUP = 1;
                        InactiveReason_ABSENCEX_RESOURCE = 2;
                        InactiveReason_BOARDX_FAULT = 3;
                     };
                     InactiveReason inactive_reason = 3 [json_name = "inactive-reason"];
                     string last_start_time = 4 [json_name = "last-start-time"];
                     string last_stop_time = 5 [json_name = "last-stop-time"];
                  }
                  repeated MemberInterfaceInfo member_interface_info = 1 [json_name = "member-interface-info"];
               }
               MemberInterfaceInfos member_interface_infos = 10 [json_name = "member-interface-infos"];
            }
            SessionDetail session_detail = 17 [json_name = "session-detail"];
            message TwowayDelayResult {
               uint32 average_delay = 1 [json_name = "average-delay"];
               uint32 maximum_delay = 2 [json_name = "maximum-delay"];
               uint32 minimum_delay = 3 [json_name = "minimum-delay"];
               uint32 average_jitter = 4 [json_name = "average-jitter"];
               uint32 maximum_jitter = 5 [json_name = "maximum-jitter"];
               uint32 minimum_jitter = 6 [json_name = "minimum-jitter"];
               uint32 average_tx_jitter = 7 [json_name = "average-tx-jitter"];
               uint32 maximum_tx_jitter = 8 [json_name = "maximum-tx-jitter"];
               uint32 minimum_tx_jitter = 9 [json_name = "minimum-tx-jitter"];
               uint32 average_rx_jitter = 10 [json_name = "average-rx-jitter"];
               uint32 maximum_rx_jitter = 11 [json_name = "maximum-rx-jitter"];
               uint32 minimum_rx_jitter = 12 [json_name = "minimum-rx-jitter"];
               message TwowayDelayDatas {
                  message TwowayDelayData {
                     uint32 index = 1 [json_name = "index"];
                     uint32 delay = 2 [json_name = "delay"];
                     uint32 jitter = 3 [json_name = "jitter"];
                     uint32 tx_jitter = 4 [json_name = "tx-jitter"];
                     uint32 rx_jitter = 5 [json_name = "rx-jitter"];
                  }
                  repeated TwowayDelayData twoway_delay_data = 1 [json_name = "twoway-delay-data"];
               }
               TwowayDelayDatas twoway_delay_datas = 13 [json_name = "twoway-delay-datas"];
            }
            TwowayDelayResult twoway_delay_result = 18 [json_name = "twoway-delay-result"];
            message TwowayDelayResultLinkBundleIfs {
               message TwowayDelayResultLinkBundleIf {
                  string member_if = 1 [json_name = "member-if"];
                  uint32 average_delay = 2 [json_name = "average-delay"];
                  uint32 maximum_delay = 3 [json_name = "maximum-delay"];
                  uint32 minimum_delay = 4 [json_name = "minimum-delay"];
                  uint32 average_jitter = 5 [json_name = "average-jitter"];
                  uint32 maximum_jitter = 6 [json_name = "maximum-jitter"];
                  uint32 minimum_jitter = 7 [json_name = "minimum-jitter"];
                  uint32 average_tx_jitter = 8 [json_name = "average-tx-jitter"];
                  uint32 maximum_tx_jitter = 9 [json_name = "maximum-tx-jitter"];
                  uint32 minimum_tx_jitter = 10 [json_name = "minimum-tx-jitter"];
                  uint32 average_rx_jitter = 11 [json_name = "average-rx-jitter"];
                  uint32 maximum_rx_jitter = 12 [json_name = "maximum-rx-jitter"];
                  uint32 minimum_rx_jitter = 13 [json_name = "minimum-rx-jitter"];
                  message TwowayDelayDatas {
                     message TwowayDelayData {
                        uint32 index = 1 [json_name = "index"];
                        uint32 delay = 2 [json_name = "delay"];
                        uint32 jitter = 3 [json_name = "jitter"];
                        uint32 tx_jitter = 4 [json_name = "tx-jitter"];
                        uint32 rx_jitter = 5 [json_name = "rx-jitter"];
                     }
                     repeated TwowayDelayData twoway_delay_data = 1 [json_name = "twoway-delay-data"];
                  }
                  TwowayDelayDatas twoway_delay_datas = 14 [json_name = "twoway-delay-datas"];
               }
               repeated TwowayDelayResultLinkBundleIf twoway_delay_result_link_bundle_if = 1 [json_name = "twoway-delay-result-link-bundle-if"];
            }
            TwowayDelayResultLinkBundleIfs twoway_delay_result_link_bundle_ifs = 19 [json_name = "twoway-delay-result-link-bundle-ifs"];
            message TwowayLossResult {
               uint32 average_loss = 1 [json_name = "average-loss"];
               uint32 maximum_loss = 2 [json_name = "maximum-loss"];
               uint32 minimum_loss = 3 [json_name = "minimum-loss"];
               string average_loss_ratio = 4 [json_name = "average-loss-ratio"];
               string maximum_loss_ratio = 5 [json_name = "maximum-loss-ratio"];
               string minimum_loss_ratio = 6 [json_name = "minimum-loss-ratio"];
               uint32 average_rx_error = 7 [json_name = "average-rx-error"];
               uint32 maximum_rx_error = 8 [json_name = "maximum-rx-error"];
               uint32 minium_rx_error = 9 [json_name = "minium-rx-error"];
               string average_rx_error_ratio = 10 [json_name = "average-rx-error-ratio"];
               string maximum_rx_error_ratio = 11 [json_name = "maximum-rx-error-ratio"];
               string minimum_rx_error_ratio = 12 [json_name = "minimum-rx-error-ratio"];
               message TwowayLossDatas {
                  message TwowayLossData {
                     uint32 index = 1 [json_name = "index"];
                     uint32 loss = 2 [json_name = "loss"];
                     string loss_ratio = 3 [json_name = "loss-ratio"];
                     uint32 error = 4 [json_name = "error"];
                     string error_ratio = 5 [json_name = "error-ratio"];
                  }
                  repeated TwowayLossData twoway_loss_data = 1 [json_name = "twoway-loss-data"];
               }
               TwowayLossDatas twoway_loss_datas = 13 [json_name = "twoway-loss-datas"];
            }
            TwowayLossResult twoway_loss_result = 20 [json_name = "twoway-loss-result"];
            message TwowayLossResultLinkBundleIfs {
               message TwowayLossResultLinkBundleIf {
                  string member_if = 1 [json_name = "member-if"];
                  uint32 average_loss = 2 [json_name = "average-loss"];
                  uint32 maximum_loss = 3 [json_name = "maximum-loss"];
                  uint32 minimum_loss = 4 [json_name = "minimum-loss"];
                  string average_loss_ratio = 5 [json_name = "average-loss-ratio"];
                  string maximum_loss_ratio = 6 [json_name = "maximum-loss-ratio"];
                  string minimum_loss_ratio = 7 [json_name = "minimum-loss-ratio"];
                  uint32 average_rx_error = 8 [json_name = "average-rx-error"];
                  uint32 maximum_rx_error = 9 [json_name = "maximum-rx-error"];
                  uint32 minium_rx_error = 10 [json_name = "minium-rx-error"];
                  string average_rx_error_ratio = 11 [json_name = "average-rx-error-ratio"];
                  string maximum_rx_error_ratio = 12 [json_name = "maximum-rx-error-ratio"];
                  string minimum_rx_error_ratio = 13 [json_name = "minimum-rx-error-ratio"];
                  message TwowayLossDatas {
                     message TwowayLossData {
                        uint32 index = 1 [json_name = "index"];
                        uint32 loss = 2 [json_name = "loss"];
                        string loss_ratio = 3 [json_name = "loss-ratio"];
                        uint32 error = 4 [json_name = "error"];
                        string error_ratio = 5 [json_name = "error-ratio"];
                     }
                     repeated TwowayLossData twoway_loss_data = 1 [json_name = "twoway-loss-data"];
                  }
                  TwowayLossDatas twoway_loss_datas = 14 [json_name = "twoway-loss-datas"];
               }
               repeated TwowayLossResultLinkBundleIf twoway_loss_result_link_bundle_if = 1 [json_name = "twoway-loss-result-link-bundle-if"];
            }
            TwowayLossResultLinkBundleIfs twoway_loss_result_link_bundle_ifs = 21 [json_name = "twoway-loss-result-link-bundle-ifs"];
            message LinkBundleStatistics {
               message LinkBundleStatistic {
                  string if_name = 1 [json_name = "if-name"];
                  uint32 if_index = 2 [json_name = "if-index"];
                  uint32 loss_count = 3 [json_name = "loss-count"];
                  uint32 send_count = 4 [json_name = "send-count"];
                  uint32 avg_delay = 5 [json_name = "avg-delay"];
                  uint32 avg_jitter = 6 [json_name = "avg-jitter"];
                  uint32 avg_tx_jitter = 7 [json_name = "avg-tx-jitter"];
                  uint32 avg_rx_jitter = 8 [json_name = "avg-rx-jitter"];
                  uint32 max_delay = 9 [json_name = "max-delay"];
                  uint32 min_delay = 10 [json_name = "min-delay"];
                  uint32 max_jitter = 11 [json_name = "max-jitter"];
                  uint32 min_jitter = 12 [json_name = "min-jitter"];
                  uint32 max_tx_jitter = 13 [json_name = "max-tx-jitter"];
                  uint32 min_tx_jitter = 14 [json_name = "min-tx-jitter"];
                  uint32 max_rx_jitter = 15 [json_name = "max-rx-jitter"];
                  uint32 min_rx_jitter = 16 [json_name = "min-rx-jitter"];
                  uint32 member_id_error_count = 17 [json_name = "member-id-error-count"];
                  uint32 checksum_error_count = 18 [json_name = "checksum-error-count"];
               }
               repeated LinkBundleStatistic link_bundle_statistic = 1 [json_name = "link-bundle-statistic"];
            }
            LinkBundleStatistics link_bundle_statistics = 22 [json_name = "link-bundle-statistics"];
         }
         repeated Session session = 1 [json_name = "session"];
      }
      Sessions sessions = 1 [json_name = "sessions"];
   }
   Client client = 1 [json_name = "client"];
   message Sender {
      message Sessions {
         message Session {
            uint32 id = 1 [json_name = "id"];
            enum Period {
               INVALID_ENUM_VALUE_Period = 0;
               Period_X_10MS = 1;
               Period_X_100MS = 2;
               Period_X_1000MS = 3;
               Period_X_30000MS = 4;
            };
            Period period = 2 [json_name = "period"];
            uint32 timeout = 3 [json_name = "timeout"];
         }
         repeated Session session = 1 [json_name = "session"];
      }
      Sessions sessions = 1 [json_name = "sessions"];
      message RegularSessions {
         message RegularSession {
            uint32 id = 1 [json_name = "id"];
            uint32 regular_time = 2 [json_name = "regular-time"];
            uint32 packet_count = 3 [json_name = "packet-count"];
            uint32 timeout = 4 [json_name = "timeout"];
         }
         repeated RegularSession regular_session = 1 [json_name = "regular-session"];
      }
      RegularSessions regular_sessions = 2 [json_name = "regular-sessions"];
   }
   Sender sender = 2 [json_name = "sender"];
}


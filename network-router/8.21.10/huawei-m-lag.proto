syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-22 16:16:18
// ProtoYang-version 1
// module huawei-m-lag
// revision 2022-04-21
// revision 2022-04-06
// revision 2022-03-28
// revision 2022-02-17
// revision 2022-02-14
// revision 2022-01-20
// revision 2021-12-29
// revision 2021-12-18
// revision 2020-06-02
// revision 2020-03-26
// revision 2020-01-15
// namespace urn:huawei:yang:huawei-m-lag

package huawei_m_lag;

message MLag {
   message DfsGroups {
      message DfsGroup {
         uint32 group_id = 1 [json_name = "group-id"];
         uint32 priority = 2 [json_name = "priority"];
         message MacAddressRemain {
            bool paired_port = 1 [json_name = "paired-port"];
            bool unpaired_port = 2 [json_name = "unpaired-port"];
         }
         MacAddressRemain mac_address_remain = 3 [json_name = "mac-address-remain"];
         message Authentication {
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_HMACX_SHA256 = 1;
            };
            Mode mode = 1 [json_name = "mode"];
            string password = 2 [json_name = "password"];
         }
         Authentication authentication = 4 [json_name = "authentication"];
         message UpDelay {
            uint32 up_delay_timer = 1 [json_name = "up-delay-timer"];
            uint32 auto_recovery_interval = 2 [json_name = "auto-recovery-interval"];
         }
         UpDelay up_delay = 5 [json_name = "up-delay"];
         message LacpSwitchDelay {
            message SystemIdSwitchMode_Immediately {
               bool immediately6 = 1 [json_name = "immediately"];
            }
            message SystemIdSwitchMode_NoSwitch {
               bool no_switch = 1 [json_name = "no-switch"];
            }
            message SystemIdSwitchMode_SwitchDelay {
               uint32 delay_timer = 1 [json_name = "delay-timer"];
            }
            oneof SystemIdSwitchMode {
               SystemIdSwitchMode_Immediately system_id_switch_mode_immediately = 1 [json_name = "immediately"];
               SystemIdSwitchMode_NoSwitch system_id_switch_mode_no_switch = 2 [json_name = "no-switch"];
               SystemIdSwitchMode_SwitchDelay system_id_switch_mode_switch_delay = 3 [json_name = "switch-delay"];
            }
         }
         LacpSwitchDelay lacp_switch_delay = 6 [json_name = "lacp-switch-delay"];
         message Sessions {
            message Session {
               enum DfsProtoType {
                  INVALID_ENUM_VALUE_DfsProtoType = 0;
                  DfsProtoType_KEEPALIVE = 1;
               };
               DfsProtoType dfs_proto_type = 1 [json_name = "dfs-proto-type"];
               string source_ip = 2 [json_name = "source-ip"];
               string peer_ip = 3 [json_name = "peer-ip"];
               enum SocketType {
                  INVALID_ENUM_VALUE_SocketType = 0;
                  SocketType_UDP = 1;
               };
               SocketType socket_type = 4 [json_name = "socket-type"];
               uint32 peer_port = 5 [json_name = "peer-port"];
               string vpn_name = 6 [json_name = "vpn-name"];
               uint32 timeout = 7 [json_name = "timeout"];
            }
            repeated Session session = 1 [json_name = "session"];
         }
         Sessions sessions = 7 [json_name = "sessions"];
         message DadErrorDown {
            bool enable = 1 [json_name = "enable"];
            uint32 delay = 2 [json_name = "delay"];
            enum ErrorDownMode {
               INVALID_ENUM_VALUE_ErrorDownMode = 0;
               ErrorDownMode_ROUTINGX_SWITCH = 1;
            };
            ErrorDownMode error_down_mode = 3 [json_name = "error-down-mode"];
         }
         DadErrorDown dad_error_down = 8 [json_name = "dad-error-down"];
         message ConsistencyCheck {
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_LOOSE = 1;
               Mode_STRICT = 2;
               Mode_DISABLE = 3;
            };
            Mode mode = 1 [json_name = "mode"];
         }
         ConsistencyCheck consistency_check = 9 [json_name = "consistency-check"];
         message HoldTimes {
            uint32 hold_time = 1 [json_name = "hold-time"];
         }
         HoldTimes hold_times = 10 [json_name = "hold-times"];
         message Tcpsessions {
            message Tcpsession {
               enum DfsProtoTcpType {
                  INVALID_ENUM_VALUE_DfsProtoTcpType = 0;
                  DfsProtoTcpType_DFSPROTOSYNC = 1;
               };
               DfsProtoTcpType dfs_proto_tcp_type = 1 [json_name = "dfs-proto-tcp-type"];
               string source_ipv4 = 2 [json_name = "source-ipv4"];
               string peer_ipv4 = 3 [json_name = "peer-ipv4"];
               uint32 peer_port = 4 [json_name = "peer-port"];
               string vpn_name = 5 [json_name = "vpn-name"];
               string source_ipv6 = 6 [json_name = "source-ipv6"];
               string peer_ipv6 = 7 [json_name = "peer-ipv6"];
            }
            repeated Tcpsession tcpsession = 1 [json_name = "tcpsession"];
         }
         Tcpsessions tcpsessions = 11 [json_name = "tcpsessions"];
         message TcpSession {
            message IpAddressType_Ipv4 {
               string source_ipv4 = 1 [json_name = "source-ipv4"];
               string peer_ipv4 = 2 [json_name = "peer-ipv4"];
            }
            message IpAddressType_Ipv6 {
               string source_ipv6 = 1 [json_name = "source-ipv6"];
               string peer_ipv6 = 2 [json_name = "peer-ipv6"];
            }
            oneof IpAddressType {
               IpAddressType_Ipv4 ip_address_type_ipv4 = 1 [json_name = "ipv4"];
               IpAddressType_Ipv6 ip_address_type_ipv6 = 2 [json_name = "ipv6"];
            }
            uint32 peer_port = 3 [json_name = "peer-port"];
            string vpn_name = 4 [json_name = "vpn-name"];
         }
         TcpSession tcp_session = 12 [json_name = "tcp-session"];
         message DadDelay {
            uint32 delay_time = 1 [json_name = "delay-time"];
         }
         DadDelay dad_delay = 13 [json_name = "dad-delay"];
         message ConsistencyCheckWhitelist {
            message ConsistencyCheckWhitelists {
               enum ConsistencyCheckModule {
                  INVALID_ENUM_VALUE_ConsistencyCheckModule = 0;
                  ConsistencyCheckModule_MX_LAG = 1;
                  ConsistencyCheckModule_VLAN = 2;
                  ConsistencyCheckModule_STP = 3;
                  ConsistencyCheckModule_MAC = 4;
                  ConsistencyCheckModule_ARP = 5;
                  ConsistencyCheckModule_VLANIF = 6;
                  ConsistencyCheckModule_VXLAN = 7;
               };
               ConsistencyCheckModule consistency_check_module = 1 [json_name = "consistency-check-module"];
               enum ConsistencyCheckMLag {
                  INVALID_ENUM_VALUE_ConsistencyCheckMLag = 0;
                  ConsistencyCheckMLag_MX_LAGX_MEMBERX_NUM = 1;
                  ConsistencyCheckMLag_MX_LAGX_ID = 2;
                  ConsistencyCheckMLag_PEERX_LINKX_EXCLUDEX_VLAN = 3;
                  ConsistencyCheckMLag_MX_LAGX_IPV4X_ADDRESS = 4;
                  ConsistencyCheckMLag_MX_LAGX_IPV6X_ADDRESS = 5;
               };
               ConsistencyCheckMLag consistency_check_m_lag = 2 [json_name = "consistency-check-m-lag"];
               enum ConsistencyCheckVlan {
                  INVALID_ENUM_VALUE_ConsistencyCheckVlan = 0;
                  ConsistencyCheckVlan_VLANX_CONFIGURATION = 1;
                  ConsistencyCheckVlan_PORTX_VLANX_RELATION = 2;
               };
               ConsistencyCheckVlan consistency_check_vlan = 3 [json_name = "consistency-check-vlan"];
               enum ConsistencyCheckStp {
                  INVALID_ENUM_VALUE_ConsistencyCheckStp = 0;
                  ConsistencyCheckStp_STPX_MX_LAGX_PRIORITY = 1;
               };
               ConsistencyCheckStp consistency_check_stp = 4 [json_name = "consistency-check-stp"];
               enum ConsistencyCheckMac {
                  INVALID_ENUM_VALUE_ConsistencyCheckMac = 0;
                  ConsistencyCheckMac_MACX_AGINGX_TIME = 1;
                  ConsistencyCheckMac_STATICX_MAC = 2;
               };
               ConsistencyCheckMac consistency_check_mac = 5 [json_name = "consistency-check-mac"];
               enum ConsistencyCheckArp {
                  INVALID_ENUM_VALUE_ConsistencyCheckArp = 0;
                  ConsistencyCheckArp_ARPX_AGINGX_TIME = 1;
                  ConsistencyCheckArp_STATICX_ARP = 2;
               };
               ConsistencyCheckArp consistency_check_arp = 6 [json_name = "consistency-check-arp"];
               enum ConsistencyCheckVlanif {
                  INVALID_ENUM_VALUE_ConsistencyCheckVlanif = 0;
                  ConsistencyCheckVlanif_VLANIFX_CONFIGURATION = 1;
                  ConsistencyCheckVlanif_IPV4X_ADDRESS = 2;
                  ConsistencyCheckVlanif_IPV6X_ADDRESS = 3;
                  ConsistencyCheckVlanif_VRRP4 = 4;
                  ConsistencyCheckVlanif_VRRP6 = 5;
                  ConsistencyCheckVlanif_VIRTUALX_MAC = 6;
                  ConsistencyCheckVlanif_VLANIFX_STATUS = 7;
                  ConsistencyCheckVlanif_VLANIFX_BYPASS = 8;
               };
               ConsistencyCheckVlanif consistency_check_vlanif = 7 [json_name = "consistency-check-vlanif"];
               enum ConsistencyCheckVxlan {
                  INVALID_ENUM_VALUE_ConsistencyCheckVxlan = 0;
                  ConsistencyCheckVxlan_BDX_CONFIGURATION = 1;
                  ConsistencyCheckVxlan_VBDIFX_CONFIGURATION = 2;
                  ConsistencyCheckVxlan_IPV4X_ADDRESS = 3;
                  ConsistencyCheckVxlan_IPV6X_ADDRESS = 4;
                  ConsistencyCheckVxlan_VIRTUALX_MAC = 5;
                  ConsistencyCheckVxlan_VBDIFX_STATUS = 6;
               };
               ConsistencyCheckVxlan consistency_check_vxlan = 8 [json_name = "consistency-check-vxlan"];
            }
            ConsistencyCheckWhitelists consistency_check_whitelists = 1 [json_name = "consistency-check-whitelists"];
            message MLagModules {
               message MLagModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_MX_LAGX_MEMBERX_NUM = 1;
                     ServiceType_MX_LAGX_ID = 2;
                     ServiceType_PEERX_LINKX_EXCLUDEX_VLAN = 3;
                     ServiceType_MX_LAGX_IPV4X_ADDRESS = 4;
                     ServiceType_MX_LAGX_IPV6X_ADDRESS = 5;
                     ServiceType_MX_LAGX_ELECTIONX_MODE = 6;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated MLagModule m_lag_module = 1 [json_name = "m-lag-module"];
            }
            MLagModules m_lag_modules = 2 [json_name = "m-lag-modules"];
            message VlanModules {
               message VlanModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_VLANX_CONFIGURATION = 1;
                     ServiceType_PORTX_VLANX_RELATION = 2;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated VlanModule vlan_module = 1 [json_name = "vlan-module"];
            }
            VlanModules vlan_modules = 3 [json_name = "vlan-modules"];
            message StpModules {
               message StpModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_STPX_MX_LAGX_PRIORITY = 1;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated StpModule stp_module = 1 [json_name = "stp-module"];
            }
            StpModules stp_modules = 4 [json_name = "stp-modules"];
            message MacModules {
               message MacModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_MACX_AGINGX_TIME = 1;
                     ServiceType_STATICX_MAC = 2;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated MacModule mac_module = 1 [json_name = "mac-module"];
            }
            MacModules mac_modules = 5 [json_name = "mac-modules"];
            message ArpModules {
               message ArpModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_ARPX_AGINGX_TIME = 1;
                     ServiceType_STATICX_ARP = 2;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated ArpModule arp_module = 1 [json_name = "arp-module"];
            }
            ArpModules arp_modules = 6 [json_name = "arp-modules"];
            message VlanifModules {
               message VlanifModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_VLANIFX_CONFIGURATION = 1;
                     ServiceType_IPV4X_ADDRESS = 2;
                     ServiceType_IPV6X_ADDRESS = 3;
                     ServiceType_VRRP4 = 4;
                     ServiceType_VIRTUALX_MAC = 5;
                     ServiceType_VLANIFX_STATUS = 6;
                     ServiceType_VLANIFX_BYPASS = 7;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated VlanifModule vlanif_module = 1 [json_name = "vlanif-module"];
            }
            VlanifModules vlanif_modules = 7 [json_name = "vlanif-modules"];
            message VxlanModules {
               message VxlanModule {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_BDX_CONFIGURATION = 1;
                     ServiceType_VBDIFX_CONFIGURATION = 2;
                     ServiceType_IPV4X_ADDRESS = 3;
                     ServiceType_IPV6X_ADDRESS = 4;
                     ServiceType_VIRTUALX_MAC = 5;
                     ServiceType_VBDIFX_STATUS = 6;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
               }
               repeated VxlanModule vxlan_module = 1 [json_name = "vxlan-module"];
            }
            VxlanModules vxlan_modules = 8 [json_name = "vxlan-modules"];
         }
         ConsistencyCheckWhitelist consistency_check_whitelist = 14 [json_name = "consistency-check-whitelist"];
         message MLagElection {
            enum MLagElectionMode {
               MLagElectionMode_ARPX_MODE = 0;
               MLagElectionMode_NDX_MODE = 1;
               MLagElectionMode_IGMPX_MODE = 2;
               MLagElectionMode_DHCPX_MODE = 3;
            };
            MLagElectionMode m_lag_election_mode = 1 [json_name = "m-lag-election-mode"];
         }
         MLagElection m_lag_election = 15 [json_name = "m-lag-election"];
         message Elections {
            message Election {
               enum Mode {
                  Mode_ARPX_MODE = 0;
                  Mode_NDX_MODE = 1;
                  Mode_IGMPX_MODE = 2;
                  Mode_DHCPX_MODE = 3;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            repeated Election election = 1 [json_name = "election"];
         }
         Elections elections = 16 [json_name = "elections"];
      }
      repeated DfsGroup dfs_group = 1 [json_name = "dfs-group"];
   }
   DfsGroups dfs_groups = 1 [json_name = "dfs-groups"];
   message NegotiationStates {
      message NegotiationState {
         enum DfsRole {
            INVALID_ENUM_VALUE_DfsRole = 0;
            DfsRole_LOCAL = 1;
            DfsRole_PEER = 2;
         };
         DfsRole dfs_role = 1 [json_name = "dfs-role"];
         enum HeartBeatState {
            INVALID_ENUM_VALUE_HeartBeatState = 0;
            HeartBeatState_OK = 1;
            HeartBeatState_LOST = 2;
         };
         HeartBeatState heart_beat_state = 2 [json_name = "heart-beat-state"];
         message DfsGroupStates {
            message DfsGroupState {
               uint32 group_id = 1 [json_name = "group-id"];
               uint32 priority = 2 [json_name = "priority"];
               uint32 udp_port = 3 [json_name = "udp-port"];
               string ip_address = 4 [json_name = "ip-address"];
               string vpn_name = 5 [json_name = "vpn-name"];
               string system_id = 6 [json_name = "system-id"];
               string system_name = 7 [json_name = "system-name"];
               enum State {
                  INVALID_ENUM_VALUE_State = 0;
                  State_MASTER = 1;
                  State_SLAVE = 2;
               };
               State state = 8 [json_name = "state"];
               enum Causation {
                  INVALID_ENUM_VALUE_Causation = 0;
                  Causation_NOPEERLINK = 1;
                  Causation_NOADDRESS = 2;
                  Causation_SAMEMAC = 3;
                  Causation_TYPEMISMATCH = 4;
                  Causation_TIMEOUT = 5;
                  Causation_PEERLINKDOWN = 6;
                  Causation_DETECT = 7;
                  Causation_AUTHENTICATIONX_FAILED = 8;
                  Causation_VERSIONMISMATCH = 9;
                  Causation_NOAUTHENTICATION = 10;
                  Causation_DEVICETYPEMISMATCH = 11;
                  Causation_PEERLINKTYPEMISMATCH = 12;
               };
               Causation causation = 9 [json_name = "causation"];
               enum ConsistencyCheck {
                  INVALID_ENUM_VALUE_ConsistencyCheck = 0;
                  ConsistencyCheck_SUCCESS = 1;
                  ConsistencyCheck_FAILED = 2;
               };
               ConsistencyCheck consistency_check = 10 [json_name = "consistency-check"];
               string version = 11 [json_name = "version"];
               string device_type = 12 [json_name = "device-type"];
            }
            repeated DfsGroupState dfs_group_state = 1 [json_name = "dfs-group-state"];
            message MLags {
               message MLag6 {
                  uint32 id = 1 [json_name = "id"];
                  uint32 group_id = 2 [json_name = "group-id"];
                  string interface_name = 3 [json_name = "interface-name"];
                  enum PortState {
                     INVALID_ENUM_VALUE_PortState = 0;
                     PortState_UP = 1;
                     PortState_DOWN = 2;
                  };
                  PortState port_state = 4 [json_name = "port-state"];
                  enum PortStatus {
                     INVALID_ENUM_VALUE_PortStatus = 0;
                     PortStatus_ACTIVE = 1;
                     PortStatus_INACTIVE = 2;
                  };
                  PortStatus port_status = 5 [json_name = "port-status"];
                  enum PortRole {
                     INVALID_ENUM_VALUE_PortRole = 0;
                     PortRole_MASTER = 1;
                     PortRole_BACKUP = 2;
                     PortRole_INVALID = 3;
                  };
                  PortRole port_role = 6 [json_name = "port-role"];
                  enum ConsistencyCheck {
                     INVALID_ENUM_VALUE_ConsistencyCheck = 0;
                     ConsistencyCheck_SUCCESS = 1;
                     ConsistencyCheck_FAILED = 2;
                  };
                  ConsistencyCheck consistency_check = 7 [json_name = "consistency-check"];
                  enum Causation {
                     INVALID_ENUM_VALUE_Causation = 0;
                     Causation_PORTVLANINCONSISTENT = 1;
                     Causation_STPINCONSISTENT = 2;
                     Causation_STPPRIORITYINCONSISTENT = 3;
                     Causation_LACPINCONSISTENT = 4;
                     Causation_MLAGINCONSISTENT = 5;
                     Causation_MLAGMEMBERINCONSISTENT = 6;
                  };
                  Causation causation = 8 [json_name = "causation"];
               }
               repeated MLag6 m_lag = 1 [json_name = "m-lag"];
            }
            MLags m_lags = 2 [json_name = "m-lags"];
            message PeerLinkStates {
               message PeerLinkState {
                  uint32 group_id = 1 [json_name = "group-id"];
                  uint32 link_id = 2 [json_name = "link-id"];
                  string interface_name = 3 [json_name = "interface-name"];
                  enum PortState {
                     INVALID_ENUM_VALUE_PortState = 0;
                     PortState_UP = 1;
                     PortState_DOWN = 2;
                  };
                  PortState port_state = 4 [json_name = "port-state"];
                  enum LinkType {
                     LinkType_PHYSICAL = 0;
                     LinkType_VIRTUAL = 1;
                  };
                  LinkType link_type = 5 [json_name = "link-type"];
               }
               repeated PeerLinkState peer_link_state = 1 [json_name = "peer-link-state"];
            }
            PeerLinkStates peer_link_states = 3 [json_name = "peer-link-states"];
         }
         DfsGroupStates dfs_group_states = 3 [json_name = "dfs-group-states"];
      }
      repeated NegotiationState negotiation_state = 1 [json_name = "negotiation-state"];
   }
   NegotiationStates negotiation_states = 2 [json_name = "negotiation-states"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-31 09:28:06
// ProtoYang-version 1
// module openconfig-acl
// revision 2019-10-25
// revision 2018-11-21
// revision 2018-04-24
// revision 2017-05-26
// revision 2016-08-08
// revision 2016-01-22
// namespace http://openconfig.net/yang/acl

package openconfig_acl;

message Acl {
   message AclSets {
      message AclSet {
         message AclEntries {
            message AclEntry {
               message Actions {
                  message Config {
                     string forwarding_action = 1 [json_name = "forwarding-action"];
                     string log_action = 2 [json_name = "log-action"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string forwarding_action = 1 [json_name = "forwarding-action"];
                     string log_action = 2 [json_name = "log-action"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Actions actions = 1 [json_name = "actions"];
               message Config {
                  string description = 1 [json_name = "description"];
                  uint32 sequence_id = 2 [json_name = "sequence-id"];
               }
               Config config = 2 [json_name = "config"];
               message InputInterface {
                  message Config {
                  }
                  Config config = 1 [json_name = "config"];
                  message InterfaceRef {
                     message Config {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  InterfaceRef interface_ref = 2 [json_name = "interface-ref"];
                  message State {
                  }
                  State state = 3 [json_name = "state"];
               }
               InputInterface input_interface = 3 [json_name = "input-interface"];
               message Ipv4 {
                  message Config {
                     string destination_address = 1 [json_name = "destination-address"];
                     uint32 dscp = 2 [json_name = "dscp"];
                     uint32 hop_limit = 3 [json_name = "hop-limit"];
                     string protocol = 4 [json_name = "protocol"];
                     string source_address = 5 [json_name = "source-address"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string destination_address = 1 [json_name = "destination-address"];
                     uint32 dscp = 2 [json_name = "dscp"];
                     uint32 hop_limit = 3 [json_name = "hop-limit"];
                     string protocol = 4 [json_name = "protocol"];
                     string source_address = 5 [json_name = "source-address"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Ipv4 ipv4 = 4 [json_name = "ipv4"];
               message Ipv6 {
                  message Config {
                     string destination_address = 1 [json_name = "destination-address"];
                     uint32 destination_flow_label = 2 [json_name = "destination-flow-label"];
                     uint32 dscp = 3 [json_name = "dscp"];
                     uint32 hop_limit = 4 [json_name = "hop-limit"];
                     string protocol = 5 [json_name = "protocol"];
                     string source_address = 6 [json_name = "source-address"];
                     uint32 source_flow_label = 7 [json_name = "source-flow-label"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string destination_address = 1 [json_name = "destination-address"];
                     uint32 destination_flow_label = 2 [json_name = "destination-flow-label"];
                     uint32 dscp = 3 [json_name = "dscp"];
                     uint32 hop_limit = 4 [json_name = "hop-limit"];
                     string protocol = 5 [json_name = "protocol"];
                     string source_address = 6 [json_name = "source-address"];
                     uint32 source_flow_label = 7 [json_name = "source-flow-label"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Ipv6 ipv6 = 5 [json_name = "ipv6"];
               message L2 {
                  message Config {
                     string destination_mac = 1 [json_name = "destination-mac"];
                     string destination_mac_mask = 2 [json_name = "destination-mac-mask"];
                     string ethertype = 3 [json_name = "ethertype"];
                     string source_mac = 4 [json_name = "source-mac"];
                     string source_mac_mask = 5 [json_name = "source-mac-mask"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string destination_mac = 1 [json_name = "destination-mac"];
                     string destination_mac_mask = 2 [json_name = "destination-mac-mask"];
                     string ethertype = 3 [json_name = "ethertype"];
                     string source_mac = 4 [json_name = "source-mac"];
                     string source_mac_mask = 5 [json_name = "source-mac-mask"];
                  }
                  State state = 2 [json_name = "state"];
               }
               L2 l2 = 6 [json_name = "l2"];
               uint32 sequence_id = 7 [json_name = "sequence-id"];
               message State {
                  string description = 1 [json_name = "description"];
                  uint64 matched_octets = 2 [json_name = "matched-octets"];
                  uint64 matched_packets = 3 [json_name = "matched-packets"];
                  uint32 sequence_id = 4 [json_name = "sequence-id"];
               }
               State state = 8 [json_name = "state"];
               message Transport {
                  message Config {
                     string destination_port = 1 [json_name = "destination-port"];
                     string source_port = 2 [json_name = "source-port"];
                     repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string destination_port = 1 [json_name = "destination-port"];
                     string source_port = 2 [json_name = "source-port"];
                     repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Transport transport = 9 [json_name = "transport"];
            }
            repeated AclEntry acl_entry = 1 [json_name = "acl-entry"];
         }
         AclEntries acl_entries = 1 [json_name = "acl-entries"];
         message Config {
            string description = 1 [json_name = "description"];
            string name = 2 [json_name = "name"];
            string type = 3 [json_name = "type"];
         }
         Config config = 2 [json_name = "config"];
         string name = 3 [json_name = "name"];
         message State {
            string description = 1 [json_name = "description"];
            string name = 2 [json_name = "name"];
            string type = 3 [json_name = "type"];
         }
         State state = 4 [json_name = "state"];
         string type = 5 [json_name = "type"];
      }
      repeated AclSet acl_set = 1 [json_name = "acl-set"];
   }
   AclSets acl_sets = 1 [json_name = "acl-sets"];
   message Config {
   }
   Config config = 2 [json_name = "config"];
   message Interfaces {
      message Interface {
         message Config {
            string id = 1 [json_name = "id"];
         }
         Config config = 1 [json_name = "config"];
         message EgressAclSets {
            message EgressAclSet {
               message AclEntries {
                  message AclEntry {
                     uint32 sequence_id = 1 [json_name = "sequence-id"];
                     message State {
                        uint64 matched_octets = 1 [json_name = "matched-octets"];
                        uint64 matched_packets = 2 [json_name = "matched-packets"];
                        uint32 sequence_id = 3 [json_name = "sequence-id"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated AclEntry acl_entry = 1 [json_name = "acl-entry"];
               }
               AclEntries acl_entries = 1 [json_name = "acl-entries"];
               message Config {
                  string set_name = 1 [json_name = "set-name"];
                  string type = 2 [json_name = "type"];
               }
               Config config = 2 [json_name = "config"];
               string set_name = 3 [json_name = "set-name"];
               message State {
                  string set_name = 1 [json_name = "set-name"];
                  string type = 2 [json_name = "type"];
               }
               State state = 4 [json_name = "state"];
               string type = 5 [json_name = "type"];
            }
            repeated EgressAclSet egress_acl_set = 1 [json_name = "egress-acl-set"];
         }
         EgressAclSets egress_acl_sets = 2 [json_name = "egress-acl-sets"];
         string id = 3 [json_name = "id"];
         message IngressAclSets {
            message IngressAclSet {
               message AclEntries {
                  message AclEntry {
                     uint32 sequence_id = 1 [json_name = "sequence-id"];
                     message State {
                        uint64 matched_octets = 1 [json_name = "matched-octets"];
                        uint64 matched_packets = 2 [json_name = "matched-packets"];
                        uint32 sequence_id = 3 [json_name = "sequence-id"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated AclEntry acl_entry = 1 [json_name = "acl-entry"];
               }
               AclEntries acl_entries = 1 [json_name = "acl-entries"];
               message Config {
                  string set_name = 1 [json_name = "set-name"];
                  string type = 2 [json_name = "type"];
               }
               Config config = 2 [json_name = "config"];
               string set_name = 3 [json_name = "set-name"];
               message State {
                  string set_name = 1 [json_name = "set-name"];
                  string type = 2 [json_name = "type"];
               }
               State state = 4 [json_name = "state"];
               string type = 5 [json_name = "type"];
            }
            repeated IngressAclSet ingress_acl_set = 1 [json_name = "ingress-acl-set"];
         }
         IngressAclSets ingress_acl_sets = 4 [json_name = "ingress-acl-sets"];
         message InterfaceRef {
            message Config {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            State state = 2 [json_name = "state"];
         }
         InterfaceRef interface_ref = 5 [json_name = "interface-ref"];
         message State {
            string id = 1 [json_name = "id"];
         }
         State state = 6 [json_name = "state"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 3 [json_name = "interfaces"];
   message State {
      string counter_capability = 1 [json_name = "counter-capability"];
   }
   State state = 4 [json_name = "state"];
}


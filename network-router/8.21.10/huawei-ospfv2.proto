syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-26 15:12:27
// ProtoYang-version 1
// module huawei-ospfv2
// revision 2020-07-03
// revision 2020-07-01
// revision 2020-06-17
// revision 2020-03-28
// revision 2020-03-25
// revision 2020-03-13
// revision 2020-03-09
// revision 2020-03-05
// revision 2020-03-04
// revision 2020-03-03
// revision 2020-02-27
// revision 2020-02-04
// revision 2019-12-26
// revision 2019-12-20
// revision 2019-12-16
// revision 2019-11-22
// revision 2019-11-15
// revision 2019-10-22
// revision 2019-04-04
// namespace urn:huawei:yang:huawei-ospfv2

package huawei_ospfv2;

message Ospfv2 {
   message Ospfv2Comm {
      message OspfChkRtIds {
         message OspfChkRtId {
            bool rtIdConfFlag = 1;
         }
         OspfChkRtId ospfChkRtId = 1;
      }
      OspfChkRtIds ospfChkRtIds = 1;
      message OspfGlobalStat {
         uint32 ospfDcnLinkCnt = 1;
      }
      OspfGlobalStat ospfGlobalStat = 2;
      message OspfGtsms {
         message OspfGtsm {
            uint32 hops = 1;
            bool isNonstdMcast = 2;
            string vrfName = 3;
         }
         repeated OspfGtsm ospfGtsm = 1;
      }
      OspfGtsms ospfGtsms = 3;
      message OspfPassivePeers {
         message OspfPassivePeer {
            string areaId = 1;
            uint32 cfgVal = 2;
            string ifName = 3;
            uint32 peerId = 4;
            string peerIfIpAddr = 5;
            string peerRtrId = 6;
            uint32 procId = 7;
         }
         repeated OspfPassivePeer ospfPassivePeer = 1;
      }
      OspfPassivePeers ospfPassivePeers = 4;
      message OspfSites {
         message OspfSite {
            enum IETFMode_1 {
               IETFMode_NONX_STANDARDX_IETFX_MODE = 0;
               IETFMode_STANDARDX_IETFX_MODE = 1;
            };
            IETFMode_1 IETFMode = 1;
            message ProcessTopologys_1 {
               message ProcessTopology_1 {
                  message AsbrSummaryMTs {
                     message AsbrSummaryMT {
                        string addressmask = 1;
                        message AsbrSummarizedPrefixMTs {
                           message AsbrSummarizedPrefixMT {
                              string destIpAddress = 1;
                              string mask = 2;
                              uint32 metric = 3;
                              uint32 protoProcId = 4;
                              enum Protocol {
                                 Protocol_BGP = 0;
                                 Protocol_DEFAULT = 1;
                                 Protocol_DIRECT = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_OSPF = 4;
                                 Protocol_RIP = 5;
                                 Protocol_STATIC = 6;
                              };
                              Protocol protocol = 5;
                              uint32 type = 6;
                           }
                           repeated AsbrSummarizedPrefixMT asbrSummarizedPrefixMT = 1;
                        }
                        AsbrSummarizedPrefixMTs asbrSummarizedPrefixMTs = 2;
                        uint32 cost = 3;
                        uint32 count = 4;
                        uint32 distributeDelayInterval = 5;
                        bool generateNullZero = 6;
                        string ipAddress = 7;
                        enum NotAdvertiseFlag {
                           NotAdvertiseFlag_ADVERTISE = 0;
                           NotAdvertiseFlag_DONOTX_ADVERTISE = 1;
                        };
                        NotAdvertiseFlag notAdvertiseFlag = 8;
                        uint32 tag = 9;
                     }
                     repeated AsbrSummaryMT asbrSummaryMT = 1;
                  }
                  AsbrSummaryMTs asbrSummaryMTs = 1;
                  uint32 avoidMicroloopFrrDelay = 2;
                  bool avoidMicroloopFrrDisable = 3;
                  uint32 avoidSrMicroloopDelay = 4;
                  bool avoidSrMicroloopEnable = 5;
                  uint32 defaultCost = 6;
                  bool defaultCostInheritMetricFlag = 7;
                  message DefaultRouteMTs {
                     message DefaultRouteMT {
                        bool configCost = 1;
                        bool configType = 2;
                        uint32 cost = 3;
                        bool defRoutEnableFlag = 4;
                        uint32 delayTimer = 5;
                        enum Flag {
                           Flag_ALWAYS = 0;
                           Flag_DEFRTADV = 1;
                           Flag_SUMMARY = 2;
                        };
                        Flag flag = 6;
                        bool permitCalculateOther = 7;
                        enum PolicyType {
                           PolicyType_NONE = 0;
                           PolicyType_ROUTE_FILTER = 1;
                           PolicyType_ROUTE_POLICY = 2;
                        };
                        PolicyType policyType = 8;
                        string routeFilterName = 9;
                        string routePolicyName = 10;
                        enum Type {
                           Type_TYPE1 = 0;
                           Type_TYPE2 = 1;
                        };
                        Type type = 11;
                     }
                     DefaultRouteMT defaultRouteMT = 1;
                  }
                  DefaultRouteMTs defaultRouteMTs = 8;
                  uint32 defaultTag = 9;
                  enum DefaultType {
                     DefaultType_TYPE1 = 0;
                     DefaultType_TYPE2 = 1;
                  };
                  DefaultType defaultType = 10;
                  message EcmpPreferMTs {
                     message EcmpPreferMT {
                        bool intactFlag = 1;
                        bool teTunnelFlag = 2;
                     }
                     EcmpPreferMT ecmpPreferMT = 1;
                  }
                  EcmpPreferMTs ecmpPreferMTs = 11;
                  message FilterPolicyMTs {
                     message FilterPolicyMT {
                        string aclNameOrNum = 1;
                        enum FilterType {
                           FilterType_EXPORT = 0;
                           FilterType_IMPORT = 1;
                        };
                        FilterType filterType = 2;
                        string ipPrefix = 3;
                        enum Protocol {
                           Protocol_BGP = 0;
                           Protocol_DEFAULT = 1;
                           Protocol_DIRECT = 2;
                           Protocol_ISIS = 3;
                           Protocol_OSPF = 4;
                           Protocol_RIP = 5;
                           Protocol_STATIC = 6;
                           Protocol_UNR = 7;
                        };
                        Protocol protocol = 4;
                        uint32 protocolProcessId = 5;
                        string routeFilterName = 6;
                        string routePolicy = 7;
                        bool secondary = 8;
                        enum Type {
                           Type_ACL_NAME_OR_NUM = 0;
                           Type_IP_PREFIX = 1;
                           Type_ROUTE_FILTER = 2;
                           Type_ROUTE_POLICY = 3;
                        };
                        Type type = 9;
                     }
                     repeated FilterPolicyMT filterPolicyMT = 1;
                  }
                  FilterPolicyMTs filterPolicyMTs = 12;
                  message ImportRouteMTs {
                     message ImportRouteMT {
                        uint32 cost = 1;
                        bool costConfigFlag = 2;
                        bool permitIbgpFlag = 3;
                        enum PolicyType {
                           PolicyType_NONE = 0;
                           PolicyType_ROUTE_FILTER = 1;
                           PolicyType_ROUTE_POLICY = 2;
                        };
                        PolicyType policyType = 4;
                        enum Protocol {
                           Protocol_BGP = 0;
                           Protocol_DIRECT = 1;
                           Protocol_ISIS = 2;
                           Protocol_OSPF = 3;
                           Protocol_RIP = 4;
                           Protocol_STATIC = 5;
                           Protocol_UNR = 6;
                        };
                        Protocol protocol = 5;
                        uint32 protocolProcessId = 6;
                        string routeFilterName = 7;
                        string routePolicyName = 8;
                        uint32 tag = 9;
                        bool tagConfigFlag = 10;
                        enum Type {
                           Type_TYPE1 = 0;
                           Type_TYPE2 = 1;
                        };
                        Type type = 11;
                        bool typeConfigFlag = 12;
                     }
                     repeated ImportRouteMT importRouteMT = 1;
                  }
                  ImportRouteMTs importRouteMTs = 13;
                  uint32 maxLoadBalancing = 14;
                  message NexthopMTs {
                     message NexthopMT {
                        string ipAddress = 1;
                        uint32 weight = 2;
                     }
                     repeated NexthopMT nexthopMT = 1;
                  }
                  NexthopMTs nexthopMTs = 15;
                  message PreferenceMTs {
                     message PreferenceMT {
                        enum PolicyType {
                           PolicyType_NONE = 0;
                           PolicyType_ROUTE_FILTER = 1;
                           PolicyType_ROUTE_POLICY = 2;
                        };
                        PolicyType policyType = 1;
                        uint32 preference = 2;
                        string routeFilterName = 3;
                        string routePolicyName = 4;
                        enum RouteType {
                           RouteType_ASE = 0;
                           RouteType_DEFAULT = 1;
                           RouteType_INTER = 2;
                           RouteType_INTRA = 3;
                        };
                        RouteType routeType = 5;
                     }
                     repeated PreferenceMT preferenceMT = 1;
                  }
                  PreferenceMTs preferenceMTs = 16;
                  message RoutePriorityMTs {
                     message RoutePriorityMT {
                        string ipPrefixName = 1;
                        enum Priority {
                           Priority_CRITICAL = 0;
                           Priority_HIGH = 1;
                           Priority_MEDIUM = 2;
                        };
                        Priority priority = 2;
                     }
                     repeated RoutePriorityMT routePriorityMT = 1;
                  }
                  RoutePriorityMTs routePriorityMTs = 17;
                  uint32 teTnlUloopDelay = 18;
                  bool teTnlUloopEnable = 19;
                  string topoName = 20;
               }
               repeated ProcessTopology_1 ProcessTopology = 1;
            }
            ProcessTopologys_1 ProcessTopologys = 2;
            message AbrAsbrStatistics {
               message AbrAsbrStatistic {
                  string areaId = 1;
                  uint32 cost = 2;
                  string destinationId = 3;
                  string ifName = 4;
                  string nexthopIpAddr = 5;
                  enum PathType {
                     PathType_DIRECT = 0;
                     PathType_INTERX_AREA = 1;
                     PathType_INTRAX_AREA = 2;
                     PathType_STUB = 3;
                     PathType_TRANSIT = 4;
                     PathType_TYPE1 = 5;
                     PathType_TYPE2 = 6;
                     PathType_UNKOWN = 7;
                  };
                  PathType pathType = 6;
                  string routerId = 7;
                  enum RouterType {
                     RouterType_ABR = 0;
                     RouterType_ABRX_ASBR = 1;
                     RouterType_ASBR = 2;
                     RouterType_NORMAL = 3;
                  };
                  RouterType routerType = 8;
                  uint32 sIfIndex = 9;
               }
               repeated AbrAsbrStatistic abrAsbrStatistic = 1;
            }
            AbrAsbrStatistics abrAsbrStatistics = 3;
            bool advMplsLsrId = 4;
            uint32 advMplsLsrIdCost = 5;
            uint32 areaCount = 6;
            message Areas {
               message Area {
                  string areaId = 1;
                  message AreaMTs {
                     message AreaMT {
                        message AbrSummaryMTs {
                           message AbrSummaryMT {
                              string addressMask = 1;
                              bool advertise = 2;
                              bool configCost = 3;
                              uint32 cost = 4;
                              bool enableHoldMaxCost = 5;
                              bool generateNullZero = 6;
                              uint32 holdMaxCostInterval = 7;
                              bool inheritMinCost = 8;
                              string ipAddress = 9;
                           }
                           repeated AbrSummaryMT abrSummaryMT = 1;
                        }
                        AbrSummaryMTs abrSummaryMTs = 1;
                        message AreaMTFilters {
                           message AreaMTFilter {
                              string aclNameOrNum = 1;
                              enum FilterType {
                                 FilterType_EXPORT = 0;
                                 FilterType_IMPORT = 1;
                              };
                              FilterType filterType = 2;
                              bool incAggrFlag = 3;
                              string ipPrefix = 4;
                              string routeFilterName = 5;
                              string routePolicy = 6;
                              enum Type {
                                 Type_ACL_NAME_OR_NUM = 0;
                                 Type_ACL_NUM = 1;
                                 Type_IP_PREFIX = 2;
                                 Type_ROUTE_FILTER = 3;
                                 Type_ROUTE_POLICY = 4;
                              };
                              Type type = 7;
                           }
                           repeated AreaMTFilter areaMTFilter = 1;
                        }
                        AreaMTFilters areaMTFilters = 2;
                        string topoName = 3;
                     }
                     repeated AreaMT areaMT = 1;
                  }
                  AreaMTs areaMTs = 2;
                  enum AreaType {
                     AreaType_NORMAL = 0;
                     AreaType_NSSA = 1;
                     AreaType_STUB = 2;
                  };
                  AreaType areaType = 3;
                  string authTextMd5 = 4;
                  string authTextSimple = 5;
                  enum AuthenticationMode {
                     AuthenticationMode_HMACX_MD5 = 0;
                     AuthenticationMode_HMACX_SHA256 = 1;
                     AuthenticationMode_KEYCHAIN = 2;
                     AuthenticationMode_MD5 = 3;
                     AuthenticationMode_NONE = 4;
                     AuthenticationMode_SIMPLE = 5;
                  };
                  AuthenticationMode authenticationMode = 6;
                  int32 defaultCost = 7;
                  string descriptionArea = 8;
                  uint32 exchangeAndLoadingNerghbor = 9;
                  enum ImportLimitStatus {
                     ImportLimitStatus_ALARM = 0;
                     ImportLimitStatus_DISABLE = 1;
                     ImportLimitStatus_ENABLE = 2;
                     ImportLimitStatus_OVERLIMIT = 3;
                  };
                  ImportLimitStatus importLimitStatus = 10;
                  uint32 interfaceCount = 11;
                  message Interfaces {
                     message Interface {
                        bool allFlag = 1;
                        string aseFilterName = 2;
                        enum AseFilterType {
                           AseFilterType_ACL_NAME_OR_NUM = 0;
                           AseFilterType_NONE = 1;
                        };
                        AseFilterType aseFilterType = 3;
                        bool aseFlag = 4;
                        string authTextMd5 = 5;
                        string authTextSimple = 6;
                        enum AuthenticationMode {
                           AuthenticationMode_HMACX_MD5 = 0;
                           AuthenticationMode_HMACX_SHA256 = 1;
                           AuthenticationMode_KEYCHAIN = 2;
                           AuthenticationMode_MD5 = 3;
                           AuthenticationMode_NONE = 4;
                           AuthenticationMode_NULL = 5;
                           AuthenticationMode_SIMPLE = 6;
                        };
                        AuthenticationMode authenticationMode = 7;
                        string backupDesignatedRouter = 8;
                        uint32 bfdDetectMultiplierValue = 9;
                        bool bfdEnable = 10;
                        uint32 bfdIncrCost = 11;
                        bool bfdIncrCostBlock = 12;
                        uint32 bfdMinRxInterval = 13;
                        uint32 bfdMinTxInterval = 14;
                        message BfdStatistics {
                           message BfdStatistic {
                              uint32 bfdLocalDis = 1;
                              enum BfdState {
                                 BfdState_DOWN = 0;
                                 BfdState_UNKNOWN = 1;
                                 BfdState_UP = 2;
                              };
                              BfdState bfdState = 2;
                              enum DiagnosticInfo {
                                 DiagnosticInfo_ADMINISTATORX_DOWN = 0;
                                 DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 1;
                                 DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 2;
                                 DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 3;
                                 DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 4;
                                 DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 5;
                                 DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 6;
                                 DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 7;
                                 DiagnosticInfo_NEIGHBORX_ISX_DOWN = 8;
                                 DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 9;
                                 DiagnosticInfo_PATHX_DOWN = 10;
                                 DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 11;
                              };
                              DiagnosticInfo diagnosticInfo = 3;
                              string localIpAddr = 4;
                              uint32 multiplier = 5;
                              string neighbourRouterId = 6;
                              string remoteIpAddr = 7;
                              string routerId = 8;
                              uint32 rxInterval = 9;
                              uint32 txInterval = 10;
                           }
                           repeated BfdStatistic bfdStatistic = 1;
                        }
                        BfdStatistics bfdStatistics = 15;
                        bool bfdblock = 16;
                        uint32 configCost = 17;
                        uint32 curIntfBW = 18;
                        bool dcnOpqBlkEnable = 19;
                        int32 deadInterval = 20;
                        string designatedRouter = 21;
                        int32 drPriority = 22;
                        message ErrorDatas {
                           message ErrorData {
                              uint32 ackBadCnt = 1;
                              uint32 ackDuplicateCnt = 2;
                              uint32 ackNbrLowCnt = 3;
                              uint32 ackUnknwnLsaCnt = 4;
                              uint32 authKeyFailCnt = 5;
                              uint32 authTypeFailCnt = 6;
                              uint32 badAreaPktCnt = 7;
                              uint32 badChkSumPktCnt = 8;
                              uint32 badPktCnt = 9;
                              uint32 badVerCnt = 10;
                              uint32 badVirtLinkCnt = 11;
                              uint32 ddMtuMsMatchCnt = 12;
                              uint32 ddNbrLowCnt = 13;
                              uint32 ddOptMsMatchCnt = 14;
                              uint32 ddRtrIdCnt = 15;
                              uint32 ddUnknwnLsaCnt = 16;
                              uint32 grInvalidLsaCnt = 17;
                              uint32 grInvalidPolCnt = 18;
                              uint32 grInvalidPrdCnt = 19;
                              uint32 helloDrMisCnt = 20;
                              uint32 ifDownCnt = 21;
                              uint32 invalSrcHeloCnt = 22;
                              uint32 longPktCnt = 23;
                              uint32 misDeadIntlCnt = 24;
                              uint32 misExtRouCapCnt = 25;
                              uint32 misHelloIntlCnt = 26;
                              uint32 misNetmaskCnt = 27;
                              uint32 nbmaNbrErrCnt = 28;
                              uint32 noNbr = 29;
                              uint32 opq10floodCnt = 30;
                              uint32 opq11floodCnt = 31;
                              uint32 opq9floodCnt = 32;
                              uint32 peerNetTypeCnt = 33;
                              uint32 pktRcvUnNumber = 34;
                              uint32 reqBadCnt = 35;
                              uint32 reqEmptyCnt = 36;
                              uint32 reqNbrLowCnt = 37;
                              uint32 routerIdConfusion = 38;
                              string rtrId = 39;
                              uint32 rxmtDDErrCnt = 40;
                              uint32 rxmtReqErrCnt = 41;
                              uint32 rxmtUpdErrCnt = 42;
                              uint32 sameIpPktCnt = 43;
                              uint32 shortPktCnt = 44;
                              uint32 tunnelCostCnt = 45;
                              uint32 txErrCnt = 46;
                              uint32 updLesRecentCnt = 47;
                              uint32 updLsChkSumCnt = 48;
                              uint32 updMinLSArrCnt = 49;
                              uint32 updNbrLowCnt = 50;
                              uint32 updSelfNewrCnt = 51;
                              uint32 updUnknwLsaCnt = 52;
                              uint32 vlinkNbrMisCnt = 53;
                           }
                           repeated ErrorData errorData = 1;
                        }
                        ErrorDatas errorDatas = 23;
                        uint32 fallbackBw = 24;
                        uint32 fallbackCost = 25;
                        bool frrBindingFlag = 26;
                        bool frrBlockFlag = 27;
                        enum GrState {
                           GrState_HELPER = 0;
                           GrState_NA = 1;
                           GrState_NORMAL = 2;
                        };
                        GrState grState = 28;
                        int32 helloInterval = 29;
                        string ifName = 30;
                        bool infiniteFlag = 31;
                        int32 interfaceCost = 32;
                        string interfaceIpAddress = 33;
                        enum InterfaceState {
                           InterfaceState_BDR = 0;
                           InterfaceState_DOWN = 1;
                           InterfaceState_DR = 2;
                           InterfaceState_DROTHER = 3;
                           InterfaceState_LOOPBACK = 4;
                           InterfaceState_PX_2X_P = 5;
                           InterfaceState_WAITING = 6;
                        };
                        InterfaceState interfaceState = 34;
                        string keyChainName = 35;
                        uint32 keyId = 36;
                        uint32 ldpHoldDownInterval = 37;
                        bool ldpSyncBlock = 38;
                        bool ldpSynchronicEnable = 39;
                        uint32 linkCost = 40;
                        bool maxCostFlag = 41;
                        uint32 maxCostInterval = 42;
                        enum MplsLdpAutoConfig {
                           MplsLdpAutoConfig_DISABLE = 0;
                           MplsLdpAutoConfig_NONE = 1;
                        };
                        MplsLdpAutoConfig mplsLdpAutoConfig = 43;
                        bool mplsTeLink = 44;
                        uint32 mtu = 45;
                        bool mtuEnable = 46;
                        message NbrStatistics {
                           message NbrStatistic {
                              string adjacencyFlags = 1;
                              uint32 adjacencySid = 2;
                              uint32 adjacencyWeight = 3;
                              string deadDueTimer = 4;
                              enum GrState {
                                 GrState_DOINGX_GR = 0;
                                 GrState_HELPER = 1;
                                 GrState_NA = 2;
                                 GrState_NORMAL = 3;
                              };
                              GrState grState = 5;
                              string interfaceIpAddr = 6;
                              uint32 nbrAuthenticationSequence = 7;
                              string nbrBDR = 8;
                              string nbrDR = 9;
                              uint32 nbrInterfaceMTU = 10;
                              string nbrIpAddr = 11;
                              enum NbrMode {
                                 NbrMode_MASTER = 0;
                                 NbrMode_SLAVE = 1;
                              };
                              NbrMode nbrMode = 12;
                              int32 nbrPriority = 13;
                              uint32 nbrRetranIntv = 14;
                              string nbrRouterId = 15;
                              enum NbrState {
                                 NbrState_ATTEMPT = 0;
                                 NbrState_DOWN = 1;
                                 NbrState_EXCHANGE = 2;
                                 NbrState_EXSTART = 3;
                                 NbrState_FULL = 4;
                                 NbrState_INIT = 5;
                                 NbrState_LOADING = 6;
                                 NbrState_X_2X_WAY = 7;
                              };
                              NbrState nbrState = 16;
                              string nbrUpTime = 17;
                              string upTimeStamp = 18;
                           }
                           repeated NbrStatistic nbrStatistic = 1;
                        }
                        NbrStatistics nbrStatistics = 47;
                        enum NetworkType {
                           NetworkType_BROADCAST = 0;
                           NetworkType_NBMA = 1;
                           NetworkType_P2MP = 2;
                           NetworkType_P2P = 3;
                        };
                        NetworkType networkType = 48;
                        string nssaFilterName = 49;
                        enum NssaFilterType {
                           NssaFilterType_ACL_NAME_OR_NUM = 0;
                           NssaFilterType_NONE = 1;
                        };
                        NssaFilterType nssaFilterType = 50;
                        bool nssaFlag = 51;
                        bool oneArmEchoFlag = 52;
                        uint32 opaqueId = 53;
                        message OspfLdpSyncStatistics {
                           message OspfLdpSyncStatistic {
                              enum LdpState {
                                 LdpState_DOWN = 0;
                                 LdpState_GR = 1;
                                 LdpState_UP = 2;
                                 LdpState_X_X_X_ = 3;
                              };
                              LdpState ldpState = 1;
                              bool maxCostInfinite = 2;
                              uint32 maxCostInterval = 3;
                              enum OspfSyncState {
                                 OspfSyncState_HOLDDOWN = 0;
                                 OspfSyncState_HOLDMAXCOST = 1;
                                 OspfSyncState_HOLDNORMALCOST = 2;
                                 OspfSyncState_INIT = 3;
                                 OspfSyncState_SYNCX_ACHIEVED = 4;
                              };
                              OspfSyncState ospfSyncState = 4;
                           }
                           repeated OspfLdpSyncStatistic ospfLdpSyncStatistic = 1;
                        }
                        OspfLdpSyncStatistics ospfLdpSyncStatistics = 54;
                        bool p2mpMaskIgnore = 55;
                        uint32 peerFlapSuppDetectInterval = 56;
                        bool peerFlapSuppHoldDown = 57;
                        uint32 peerFlapSuppHoldDownInterval = 58;
                        bool peerFlapSuppHoldMaxCost = 59;
                        uint32 peerFlapSuppResumeInterval = 60;
                        uint32 peerFlapSuppThreshold = 61;
                        bool peerFlapSuppress = 62;
                        uint32 peerFlappingCount = 63;
                        uint32 peerFlappingSuppressRemainTimer = 64;
                        enum PeerFlappingSuppressStatus {
                           PeerFlappingSuppressStatus_DISABLE = 0;
                           PeerFlappingSuppressStatus_ENABLE = 1;
                           PeerFlappingSuppressStatus_HOLDX_DOWN = 2;
                           PeerFlappingSuppressStatus_HOLDX_MAXX_COST = 3;
                        };
                        PeerFlappingSuppressStatus peerFlappingSuppressStatus = 65;
                        string peerFlappingSuppressTimer = 66;
                        uint32 peerFlappingThreshold = 67;
                        uint32 peerHoldMaxTimer = 68;
                        enum PeerIpIgnore {
                           PeerIpIgnore_DISABLE = 0;
                           PeerIpIgnore_ENABLE = 1;
                        };
                        PeerIpIgnore peerIpIgnore = 69;
                        bool perLinkFlag = 70;
                        int32 pollInterval = 71;
                        enum PrevIntfState {
                           PrevIntfState_BDR = 0;
                           PrevIntfState_DOWN = 1;
                           PrevIntfState_DR = 2;
                           PrevIntfState_DROTHER = 3;
                           PrevIntfState_LOOPBACK = 4;
                           PrevIntfState_PX_2X_P = 5;
                           PrevIntfState_WAITING = 6;
                        };
                        PrevIntfState prevIntfState = 72;
                        bool rLfaDisable = 73;
                        message RequestQueues {
                           message RequestQueue {
                              string advertiseRouterId = 1;
                              string interfaceIpAddr = 2;
                              string linkStateId = 3;
                              uint32 lsaAge = 4;
                              string lsaSequence = 5;
                              enum LsaType {
                                 LsaType_EXTERNAL = 0;
                                 LsaType_NETWORK = 1;
                                 LsaType_NSSA = 2;
                                 LsaType_OPQX_AS = 3;
                                 LsaType_OPQ_AREA = 4;
                                 LsaType_OPQ_LINK = 5;
                                 LsaType_ROUTER = 6;
                                 LsaType_SUM_ASBR = 7;
                                 LsaType_SUM_NET = 8;
                              };
                              LsaType lsaType = 6;
                              string nbrIpAddr = 7;
                              string nbrRouterId = 8;
                              string routerId = 9;
                           }
                           repeated RequestQueue requestQueue = 1;
                        }
                        RequestQueues requestQueues = 74;
                        message RetransQueues {
                           message RetransQueue {
                              string advertiseRouterId = 1;
                              string interfaceIpAddr = 2;
                              string linkStateId = 3;
                              uint32 lsaAge = 4;
                              string lsaSequence = 5;
                              enum LsaType {
                                 LsaType_EXTERNAL = 0;
                                 LsaType_NETWORK = 1;
                                 LsaType_NSSA = 2;
                                 LsaType_OPQX_AS = 3;
                                 LsaType_OPQ_AREA = 4;
                                 LsaType_OPQ_LINK = 5;
                                 LsaType_ROUTER = 6;
                                 LsaType_SUM_ASBR = 7;
                                 LsaType_SUM_NET = 8;
                              };
                              LsaType lsaType = 6;
                              string nbrIpAddr = 7;
                              string nbrRouterId = 8;
                              string routerId = 9;
                           }
                           repeated RetransQueue retransQueue = 1;
                        }
                        RetransQueues retransQueues = 75;
                        int32 retransmitInterval = 76;
                        bool silentEnable = 77;
                        bool smartDiscover = 78;
                        message SrInterface {
                           bool nodeFlag = 1;
                           uint32 prefixLabel = 2;
                           enum PrefixSidType {
                              PrefixSidType_ABSOLUTE = 0;
                              PrefixSidType_INDEX = 1;
                              PrefixSidType_NO_SET = 2;
                           };
                           PrefixSidType prefixSidType = 3;
                           bool tiLfaDisable = 4;
                        }
                        SrInterface srInterface = 79;
                        string sumFilterName = 80;
                        enum SumFilterType {
                           SumFilterType_ACL_NAME_OR_NUM = 0;
                           SumFilterType_NONE = 1;
                        };
                        SumFilterType sumFilterType = 81;
                        bool sumFlag = 82;
                        enum SuppressReachability {
                           SuppressReachability_DISABLE = 0;
                           SuppressReachability_ENABLE = 1;
                           SuppressReachability_NOTX_CONFIGURED = 2;
                        };
                        SuppressReachability suppressReachability = 83;
                        bool suppressReachabilityBlock = 84;
                        uint32 timerConserFlag = 85;
                        int32 transDelayInterval = 86;
                        uint32 waitInterval = 87;
                     }
                     repeated Interface interface = 1;
                  }
                  Interfaces interfaces = 12;
                  string keyChainName = 13;
                  uint32 keyId = 14;
                  bool ldpInfiniteFlag = 15;
                  bool ldpMaxCostConfigFlag = 16;
                  uint32 ldpMaxCostInterval = 17;
                  bool ldpSyncFlag = 18;
                  message MultiAreaIntfs {
                     message MultiAreaIntf {
                        bool allFlag = 1;
                        string aseFilterName = 2;
                        enum AseFilterType {
                           AseFilterType_ACL_NAME_OR_NUM = 0;
                           AseFilterType_NONE = 1;
                        };
                        AseFilterType aseFilterType = 3;
                        bool aseFlag = 4;
                        string authTextMd5 = 5;
                        string authTextSimple = 6;
                        enum AuthenticationMode {
                           AuthenticationMode_HMACX_MD5 = 0;
                           AuthenticationMode_HMACX_SHA256 = 1;
                           AuthenticationMode_KEYCHAIN = 2;
                           AuthenticationMode_MD5 = 3;
                           AuthenticationMode_NONE = 4;
                           AuthenticationMode_NULL = 5;
                           AuthenticationMode_SIMPLE = 6;
                        };
                        AuthenticationMode authenticationMode = 7;
                        message BfdStatistics {
                           message BfdStatistic {
                              uint32 bfdLocalDis = 1;
                              enum BfdState {
                                 BfdState_DOWN = 0;
                                 BfdState_UNKNOWN = 1;
                                 BfdState_UP = 2;
                              };
                              BfdState bfdState = 2;
                              enum DiagnosticInfo {
                                 DiagnosticInfo_ADMINISTATORX_DOWN = 0;
                                 DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 1;
                                 DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 2;
                                 DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 3;
                                 DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 4;
                                 DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 5;
                                 DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 6;
                                 DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 7;
                                 DiagnosticInfo_NEIGHBORX_ISX_DOWN = 8;
                                 DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 9;
                                 DiagnosticInfo_PATHX_DOWN = 10;
                                 DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 11;
                              };
                              DiagnosticInfo diagnosticInfo = 3;
                              string localIpAddr = 4;
                              uint32 multiplier = 5;
                              string neighbourRouterId = 6;
                              string remoteIpAddr = 7;
                              string routerId = 8;
                              uint32 rxInterval = 9;
                              uint32 txInterval = 10;
                           }
                           repeated BfdStatistic bfdStatistic = 1;
                        }
                        BfdStatistics bfdStatistics = 8;
                        bool bfdblock = 9;
                        uint32 configCost = 10;
                        uint32 curIntfBW = 11;
                        int32 deadInterval = 12;
                        message ErrorDatas {
                           message ErrorData {
                              uint32 ackBadCnt = 1;
                              uint32 ackDuplicateCnt = 2;
                              uint32 ackNbrLowCnt = 3;
                              uint32 ackUnknwnLsaCnt = 4;
                              uint32 authKeyFailCnt = 5;
                              uint32 authTypeFailCnt = 6;
                              uint32 badAreaPktCnt = 7;
                              uint32 badChkSumPktCnt = 8;
                              uint32 badPktCnt = 9;
                              uint32 badVerCnt = 10;
                              uint32 badVirtLinkCnt = 11;
                              uint32 ddMtuMsMatchCnt = 12;
                              uint32 ddNbrLowCnt = 13;
                              uint32 ddOptMsMatchCnt = 14;
                              uint32 ddRtrIdCnt = 15;
                              uint32 ddUnknwnLsaCnt = 16;
                              uint32 grInvalidLsaCnt = 17;
                              uint32 grInvalidPolCnt = 18;
                              uint32 grInvalidPrdCnt = 19;
                              uint32 helloDrMisCnt = 20;
                              uint32 ifDownCnt = 21;
                              uint32 invalSrcHeloCnt = 22;
                              uint32 longPktCnt = 23;
                              uint32 misDeadIntlCnt = 24;
                              uint32 misExtRouCapCnt = 25;
                              uint32 misHelloIntlCnt = 26;
                              uint32 misNetmaskCnt = 27;
                              uint32 nbmaNbrErrCnt = 28;
                              uint32 noNbr = 29;
                              uint32 opq10floodCnt = 30;
                              uint32 opq11floodCnt = 31;
                              uint32 opq9floodCnt = 32;
                              uint32 peerNetTypeCnt = 33;
                              uint32 pktRcvUnNumber = 34;
                              uint32 reqBadCnt = 35;
                              uint32 reqEmptyCnt = 36;
                              uint32 reqNbrLowCnt = 37;
                              uint32 routerIdConfusion = 38;
                              string rtrId = 39;
                              uint32 rxmtDDErrCnt = 40;
                              uint32 rxmtReqErrCnt = 41;
                              uint32 rxmtUpdErrCnt = 42;
                              uint32 sameIpPktCnt = 43;
                              uint32 shortPktCnt = 44;
                              uint32 tunnelCostCnt = 45;
                              uint32 txErrCnt = 46;
                              uint32 updLesRecentCnt = 47;
                              uint32 updLsChkSumCnt = 48;
                              uint32 updMinLSArrCnt = 49;
                              uint32 updNbrLowCnt = 50;
                              uint32 updSelfNewrCnt = 51;
                              uint32 updUnknwLsaCnt = 52;
                              uint32 vlinkNbrMisCnt = 53;
                           }
                           repeated ErrorData errorData = 1;
                        }
                        ErrorDatas errorDatas = 13;
                        uint32 fallbackBw = 14;
                        uint32 fallbackCost = 15;
                        bool frrBlockFlag = 16;
                        enum GrState {
                           GrState_HELPER = 0;
                           GrState_NA = 1;
                           GrState_NORMAL = 2;
                        };
                        GrState grState = 17;
                        int32 helloInterval = 18;
                        string ifName = 19;
                        bool infiniteFlag = 20;
                        int32 interfaceCost = 21;
                        string interfaceIpAddress = 22;
                        enum InterfaceState {
                           InterfaceState_BDR = 0;
                           InterfaceState_DOWN = 1;
                           InterfaceState_DR = 2;
                           InterfaceState_DROTHER = 3;
                           InterfaceState_LOOPBACK = 4;
                           InterfaceState_PX_2X_P = 5;
                           InterfaceState_WAITING = 6;
                        };
                        InterfaceState interfaceState = 23;
                        string keyChainName = 24;
                        uint32 keyId = 25;
                        uint32 ldpHoldDownInterval = 26;
                        bool ldpSyncBlock = 27;
                        bool ldpSynchronicEnable = 28;
                        bool maxCostFlag = 29;
                        uint32 maxCostInterval = 30;
                        uint32 mtu = 31;
                        bool mtuEnable = 32;
                        message NbrStatistics {
                           message NbrStatistic {
                              string adjacencyFlags = 1;
                              uint32 adjacencySid = 2;
                              uint32 adjacencyWeight = 3;
                              string deadDueTimer = 4;
                              enum GrState {
                                 GrState_DOINGX_GR = 0;
                                 GrState_HELPER = 1;
                                 GrState_NA = 2;
                                 GrState_NORMAL = 3;
                              };
                              GrState grState = 5;
                              string interfaceIpAddr = 6;
                              uint32 nbrAuthenticationSequence = 7;
                              string nbrBDR = 8;
                              string nbrDR = 9;
                              uint32 nbrInterfaceMTU = 10;
                              string nbrIpAddr = 11;
                              enum NbrMode {
                                 NbrMode_MASTER = 0;
                                 NbrMode_SLAVE = 1;
                              };
                              NbrMode nbrMode = 12;
                              int32 nbrPriority = 13;
                              uint32 nbrRetranIntv = 14;
                              string nbrRouterId = 15;
                              enum NbrState {
                                 NbrState_ATTEMPT = 0;
                                 NbrState_DOWN = 1;
                                 NbrState_EXCHANGE = 2;
                                 NbrState_EXSTART = 3;
                                 NbrState_FULL = 4;
                                 NbrState_INIT = 5;
                                 NbrState_LOADING = 6;
                                 NbrState_X_2X_WAY = 7;
                              };
                              NbrState nbrState = 16;
                              string nbrUpTime = 17;
                              string upTimeStamp = 18;
                           }
                           repeated NbrStatistic nbrStatistic = 1;
                        }
                        NbrStatistics nbrStatistics = 33;
                        string nssaFilterName = 34;
                        enum NssaFilterType {
                           NssaFilterType_ACL_NAME_OR_NUM = 0;
                           NssaFilterType_NONE = 1;
                        };
                        NssaFilterType nssaFilterType = 35;
                        bool nssaFlag = 36;
                        message OspfLdpSyncStatistics {
                           message OspfLdpSyncStatistic {
                              enum LdpState {
                                 LdpState_DOWN = 0;
                                 LdpState_GR = 1;
                                 LdpState_UP = 2;
                                 LdpState_X_X_X_ = 3;
                              };
                              LdpState ldpState = 1;
                              bool maxCostInfinite = 2;
                              uint32 maxCostInterval = 3;
                              enum OspfSyncState {
                                 OspfSyncState_HOLDDOWN = 0;
                                 OspfSyncState_HOLDMAXCOST = 1;
                                 OspfSyncState_HOLDNORMALCOST = 2;
                                 OspfSyncState_INIT = 3;
                                 OspfSyncState_SYNCX_ACHIEVED = 4;
                              };
                              OspfSyncState ospfSyncState = 4;
                           }
                           repeated OspfLdpSyncStatistic ospfLdpSyncStatistic = 1;
                        }
                        OspfLdpSyncStatistics ospfLdpSyncStatistics = 37;
                        uint32 peerFlapSuppDetectInterval = 38;
                        bool peerFlapSuppHoldDown = 39;
                        uint32 peerFlapSuppHoldDownInterval = 40;
                        bool peerFlapSuppHoldMaxCost = 41;
                        uint32 peerFlapSuppResumeInterval = 42;
                        uint32 peerFlapSuppThreshold = 43;
                        bool peerFlapSuppress = 44;
                        uint32 peerFlappingCount = 45;
                        uint32 peerFlappingSuppressRemainTimer = 46;
                        enum PeerFlappingSuppressStatus {
                           PeerFlappingSuppressStatus_DISABLE = 0;
                           PeerFlappingSuppressStatus_ENABLE = 1;
                           PeerFlappingSuppressStatus_HOLDX_DOWN = 2;
                           PeerFlappingSuppressStatus_HOLDX_MAXX_COST = 3;
                        };
                        PeerFlappingSuppressStatus peerFlappingSuppressStatus = 47;
                        string peerFlappingSuppressTimer = 48;
                        uint32 peerFlappingThreshold = 49;
                        enum PrevIntfState {
                           PrevIntfState_BDR = 0;
                           PrevIntfState_DOWN = 1;
                           PrevIntfState_DR = 2;
                           PrevIntfState_DROTHER = 3;
                           PrevIntfState_LOOPBACK = 4;
                           PrevIntfState_PX_2X_P = 5;
                           PrevIntfState_WAITING = 6;
                        };
                        PrevIntfState prevIntfState = 50;
                        bool rLfaDisable = 51;
                        message RequestQueues {
                           message RequestQueue {
                              string advertiseRouterId = 1;
                              string interfaceIpAddr = 2;
                              string linkStateId = 3;
                              uint32 lsaAge = 4;
                              string lsaSequence = 5;
                              enum LsaType {
                                 LsaType_EXTERNAL = 0;
                                 LsaType_NETWORK = 1;
                                 LsaType_NSSA = 2;
                                 LsaType_OPQX_AS = 3;
                                 LsaType_OPQ_AREA = 4;
                                 LsaType_OPQ_LINK = 5;
                                 LsaType_ROUTER = 6;
                                 LsaType_SUM_ASBR = 7;
                                 LsaType_SUM_NET = 8;
                              };
                              LsaType lsaType = 6;
                              string nbrIpAddr = 7;
                              string nbrRouterId = 8;
                              string routerId = 9;
                           }
                           repeated RequestQueue requestQueue = 1;
                        }
                        RequestQueues requestQueues = 52;
                        message RetransQueues {
                           message RetransQueue {
                              string advertiseRouterId = 1;
                              string interfaceIpAddr = 2;
                              string linkStateId = 3;
                              uint32 lsaAge = 4;
                              string lsaSequence = 5;
                              enum LsaType {
                                 LsaType_EXTERNAL = 0;
                                 LsaType_NETWORK = 1;
                                 LsaType_NSSA = 2;
                                 LsaType_OPQX_AS = 3;
                                 LsaType_OPQ_AREA = 4;
                                 LsaType_OPQ_LINK = 5;
                                 LsaType_ROUTER = 6;
                                 LsaType_SUM_ASBR = 7;
                                 LsaType_SUM_NET = 8;
                              };
                              LsaType lsaType = 6;
                              string nbrIpAddr = 7;
                              string nbrRouterId = 8;
                              string routerId = 9;
                           }
                           repeated RetransQueue retransQueue = 1;
                        }
                        RetransQueues retransQueues = 53;
                        int32 retransmitInterval = 54;
                        bool smartDiscover = 55;
                        string sumFilterName = 56;
                        enum SumFilterType {
                           SumFilterType_ACL_NAME_OR_NUM = 0;
                           SumFilterType_NONE = 1;
                        };
                        SumFilterType sumFilterType = 57;
                        bool sumFlag = 58;
                        bool tiLfaDisable = 59;
                        int32 transDelayInterval = 60;
                     }
                     repeated MultiAreaIntf multiAreaIntf = 1;
                  }
                  MultiAreaIntfs multiAreaIntfs = 19;
                  message Networks {
                     message Network {
                        string description = 1;
                        string ipAddress = 2;
                        string wildcardMask = 3;
                     }
                     repeated Network network = 1;
                  }
                  Networks networks = 20;
                  bool nssaBackbonePeerIr = 21;
                  bool nssaDefaultRouteAdvertise = 22;
                  bool nssaNoImportRoute = 23;
                  bool nssaSetNbit = 24;
                  bool nssaSuppressForwardingAddress = 25;
                  enum NssaTransRole {
                     NssaTransRole_ALWAYS = 0;
                     NssaTransRole_CANDIDATE = 1;
                     NssaTransRole_NONE = 2;
                  };
                  NssaTransRole nssaTransRole = 26;
                  bool nssaTransStabIntv = 27;
                  enum NssaTransState {
                     NssaTransState_DISABLED = 0;
                     NssaTransState_ELECTED = 1;
                     NssaTransState_ENABLED = 2;
                     NssaTransState_NONE = 3;
                  };
                  NssaTransState nssaTransState = 28;
                  bool nssaTranslatorAlways = 29;
                  int32 nssaTranslatorInterval = 30;
                  bool nssaZeroAddressForwarding = 31;
                  enum RtrIdConState {
                     RtrIdConState_NA = 0;
                     RtrIdConState_NORMAL = 1;
                     RtrIdConState_RTRIDX_CHANGED = 2;
                     RtrIdConState_SELECTING = 3;
                     RtrIdConState_SUSPEND = 4;
                     RtrIdConState_WAITX_SELECT = 5;
                  };
                  RtrIdConState rtrIdConState = 32;
                  message SLinks {
                     message SLink {
                        string authTextMd5 = 1;
                        string authTextSimple = 2;
                        enum AuthenMode {
                           AuthenMode_HMACX_MD5 = 0;
                           AuthenMode_HMACX_SHA256 = 1;
                           AuthenMode_KEYCHAIN = 2;
                           AuthenMode_MD5 = 3;
                           AuthenMode_NONE = 4;
                           AuthenMode_NULL = 5;
                           AuthenMode_SIMPLE = 6;
                        };
                        AuthenMode authenMode = 3;
                        uint32 cost = 4;
                        int32 deadIntv = 5;
                        string destAddr = 6;
                        enum GrStatus {
                           GrStatus_HELPER = 0;
                           GrStatus_NA = 1;
                           GrStatus_NORMAL = 2;
                        };
                        GrStatus grStatus = 7;
                        int32 helloIntv = 8;
                        string keyChainName = 9;
                        uint32 keyId = 10;
                        string nbrId = 11;
                        enum NbrState {
                           NbrState_ATTEMPT = 0;
                           NbrState_DOWN = 1;
                           NbrState_EXCHANGE = 2;
                           NbrState_EXSTART = 3;
                           NbrState_FULL = 4;
                           NbrState_INIT = 5;
                           NbrState_LOADING = 6;
                           NbrState_X_2X_WAY = 7;
                        };
                        NbrState nbrState = 12;
                        int32 retranIntv = 13;
                        bool smartDiscover = 14;
                        string srcAddr = 15;
                        enum State {
                           State_BDR = 0;
                           State_DOWN = 1;
                           State_DR = 2;
                           State_DROTHER = 3;
                           State_LOOPBACK = 4;
                           State_PX_2X_P = 5;
                           State_WAITING = 6;
                        };
                        State state = 16;
                        int32 transDelayIntv = 17;
                     }
                     repeated SLink sLink = 1;
                  }
                  SLinks sLinks = 33;
                  uint32 selfNssaLsaCount = 34;
                  uint32 spfScheduleTimes = 35;
                  bool stubBackbonePeerIr = 36;
                  bool stubNoSummary = 37;
                  message VLinks {
                     message VLink {
                        string authTextMd5 = 1;
                        string authTextSimple = 2;
                        enum AuthenticationMode {
                           AuthenticationMode_HMACX_MD5 = 0;
                           AuthenticationMode_HMACX_SHA256 = 1;
                           AuthenticationMode_KEYCHAIN = 2;
                           AuthenticationMode_MD5 = 3;
                           AuthenticationMode_NONE = 4;
                           AuthenticationMode_NULL = 5;
                           AuthenticationMode_SIMPLE = 6;
                        };
                        AuthenticationMode authenticationMode = 3;
                        int32 deadInterval = 4;
                        enum GrState {
                           GrState_HELPER = 0;
                           GrState_NA = 1;
                           GrState_NORMAL = 2;
                        };
                        GrState grState = 5;
                        int32 helloInterval = 6;
                        uint32 ifEvents = 7;
                        uint32 ifLsaCksumSum = 8;
                        uint32 ifLsaCount = 9;
                        enum IfStatus {
                           IfStatus_ACTIVE = 0;
                           IfStatus_CREATEANDGO = 1;
                           IfStatus_CREATEANDWAIT = 2;
                           IfStatus_DESTROY = 3;
                           IfStatus_NONE = 4;
                           IfStatus_NOTINSERVICE = 5;
                           IfStatus_NOTREADY = 6;
                        };
                        IfStatus ifStatus = 10;
                        int32 interfaceCost = 11;
                        string interfaceIpAddress = 12;
                        enum InterfaceState {
                           InterfaceState_BDR = 0;
                           InterfaceState_DOWN = 1;
                           InterfaceState_DR = 2;
                           InterfaceState_DROTHER = 3;
                           InterfaceState_LOOPBACK = 4;
                           InterfaceState_PX_2X_P = 5;
                           InterfaceState_WAITING = 6;
                        };
                        InterfaceState interfaceState = 13;
                        enum InterfaceType {
                           InterfaceType_BROADCAST = 0;
                           InterfaceType_NBMA = 1;
                           InterfaceType_P2MP = 2;
                           InterfaceType_P2P = 3;
                           InterfaceType_VIRTUAL = 4;
                        };
                        InterfaceType interfaceType = 14;
                        string keyChainName = 15;
                        uint32 keyId = 16;
                        string peerRtrId = 17;
                        int32 retransmitInterval = 18;
                        bool smartDiscover = 19;
                        int32 transDelayInterval = 20;
                     }
                     repeated VLink vLink = 1;
                  }
                  VLinks vLinks = 38;
               }
               repeated Area area = 1;
            }
            Areas areas = 7;
            message AsLsdbBriefs {
               message AsLsdbBrief {
                  uint32 ase = 1;
                  uint32 opaque11 = 2;
                  string routerId = 3;
                  uint32 subTotal = 4;
               }
               repeated AsLsdbBrief asLsdbBrief = 1;
            }
            AsLsdbBriefs asLsdbBriefs = 8;
            bool bandwidthCfgEnable = 9;
            uint32 bandwidthReference = 10;
            uint32 bfdAllIfIncrCost = 11;
            bool bfdAllInterfacesFlag = 12;
            uint32 bfdDetectMultiplierInterval = 13;
            uint32 bfdMinRxInterval = 14;
            uint32 bfdMinTxInterval = 15;
            bool bfdRxCfgFlag = 16;
            message BfdStatDatas {
               message BfdStatData {
                  string NbrRouterID = 1;
                  string areaId = 2;
                  uint32 bfdLocalDis = 3;
                  enum BfdState {
                     BfdState_DOWN = 0;
                     BfdState_UNKNOWN = 1;
                     BfdState_UP = 2;
                  };
                  BfdState bfdState = 4;
                  enum DiagnosticInfo {
                     DiagnosticInfo_ADMINISTATORX_DOWN = 0;
                     DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 1;
                     DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 2;
                     DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 3;
                     DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 4;
                     DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 5;
                     DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 6;
                     DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 7;
                     DiagnosticInfo_NEIGHBORX_ISX_DOWN = 8;
                     DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 9;
                     DiagnosticInfo_PATHX_DOWN = 10;
                     DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 11;
                  };
                  DiagnosticInfo diagnosticInfo = 5;
                  string ifName = 6;
                  uint32 multiplier = 7;
                  string ospfInterfaceIpAddr = 8;
                  string remoteIpAddr = 9;
                  uint32 rxInterval = 10;
                  uint32 txInterval = 11;
               }
               repeated BfdStatData bfdStatData = 1;
            }
            BfdStatDatas bfdStatDatas = 17;
            bool bfdTxCfgFlag = 18;
            bool bgpLsEnable = 19;
            enum BorderRouter {
               BorderRouter_AREA = 0;
               BorderRouter_AREAX_AS = 1;
               BorderRouter_AREAX_ASX_NSSA = 2;
               BorderRouter_AREAX_NSSA = 3;
               BorderRouter_AS = 4;
               BorderRouter_ASX_NSSA = 5;
               BorderRouter_NORMAL = 6;
               BorderRouter_NSSA = 7;
            };
            BorderRouter borderRouter = 20;
            string description = 21;
            message Dnbitsetchks {
               message Dnbitsetchk {
                  bool DnBitChkASEFlag = 1;
                  bool DnBitChkNSSAFlag = 2;
                  bool DnBitChkSummaryFlag = 3;
                  bool DnBitSetASEFlag = 4;
                  bool DnBitSetNSSAFlag = 5;
                  bool DnBitSetSummaryFlag = 6;
                  message DnSumRtIds_1 {
                     message DnSumRtId_1 {
                        string RouterId = 1;
                     }
                     repeated DnSumRtId_1 DnSumRtId = 1;
                  }
                  DnSumRtIds_1 DnSumRtIds = 7;
               }
               Dnbitsetchk dnbitsetchk = 1;
            }
            Dnbitsetchks dnbitsetchks = 22;
            message DomainIDs {
               message DomainID {
                  string domainID = 1;
                  bool secondaryFlag = 2;
                  enum Type {
                     Type_X_0005 = 0;
                     Type_X_0105 = 1;
                     Type_X_0205 = 2;
                     Type_X_8005 = 3;
                  };
                  Type type = 3;
                  string value = 4;
               }
               repeated DomainID domainID = 1;
            }
            DomainIDs domainIDs = 23;
            bool domainIdNullFlag = 24;
            message DynamicHostNames {
               message DynamicHostName {
                  string areaId = 1;
                  string hostName = 2;
                  string routerId = 3;
                  string scope = 4;
               }
               repeated DynamicHostName dynamicHostName = 1;
            }
            DynamicHostNames dynamicHostNames = 25;
            bool ecaRouteFlag = 26;
            message ErrorProcessDatas {
               message ErrorProcessData {
                  uint32 ackBadCnt = 1;
                  uint32 ackDuplicateCnt = 2;
                  uint32 ackNbrLowCnt = 3;
                  uint32 ackUnknwnLsaCnt = 4;
                  uint32 authKeyFailCnt = 5;
                  uint32 authTypeFailCnt = 6;
                  uint32 badAreaPktCnt = 7;
                  uint32 badChkSumPktCnt = 8;
                  uint32 badPktCnt = 9;
                  uint32 badVerCnt = 10;
                  uint32 badVirtLinkCnt = 11;
                  uint32 ddMtuMsMatchCnt = 12;
                  uint32 ddNbrLowCnt = 13;
                  uint32 ddOptMsMatchCnt = 14;
                  uint32 ddRtrIdCnt = 15;
                  uint32 ddUnknwnLsaCnt = 16;
                  uint32 grInvalidLsaCnt = 17;
                  uint32 grInvalidPolCnt = 18;
                  uint32 grInvalidPrdCnt = 19;
                  uint32 helloDrMisCnt = 20;
                  uint32 ifDownCnt = 21;
                  uint32 invalSrcHeloCnt = 22;
                  uint32 longPktCnt = 23;
                  uint32 misDeadIntlCnt = 24;
                  uint32 misExtRouCapCnt = 25;
                  uint32 misHelloIntlCnt = 26;
                  uint32 misNetmaskCnt = 27;
                  uint32 nbmaNbrErrCnt = 28;
                  uint32 noNbr = 29;
                  uint32 opq10floodCnt = 30;
                  uint32 opq11floodCnt = 31;
                  uint32 opq9floodCnt = 32;
                  uint32 peerNetTypeCnt = 33;
                  uint32 pktRcvUnNumber = 34;
                  uint32 reqBadCnt = 35;
                  uint32 reqEmptyCnt = 36;
                  uint32 reqNbrLowCnt = 37;
                  uint32 routerIdConfusion = 38;
                  string rtrId = 39;
                  uint32 rxmtDDErrCnt = 40;
                  uint32 rxmtReqErrCnt = 41;
                  uint32 rxmtUpdErrCnt = 42;
                  uint32 sameIpPktCnt = 43;
                  uint32 shortPktCnt = 44;
                  uint32 tunnelCostCnt = 45;
                  uint32 txErrCnt = 46;
                  uint32 unknownTLV = 47;
                  uint32 updLesRecentCnt = 48;
                  uint32 updLsChkSumCnt = 49;
                  uint32 updMinLSArrCnt = 50;
                  uint32 updNbrLowCnt = 51;
                  uint32 updSelfNewrCnt = 52;
                  uint32 updUnknwLsaCnt = 53;
                  uint32 vlinkNbrMisCnt = 54;
               }
               repeated ErrorProcessData errorProcessData = 1;
            }
            ErrorProcessDatas errorProcessDatas = 27;
            uint32 exchangeAndLoadingNerghbor = 28;
            bool frrBindingFlag = 29;
            message GracefulRestartInformations {
               message GracefulRestartInformation {
                  enum CurrentGRState {
                     CurrentGRState_HELPER = 0;
                     CurrentGRState_NA = 1;
                     CurrentGRState_NORMAL = 2;
                  };
                  CurrentGRState currentGRState = 1;
                  enum GrCapability {
                     GrCapability_DISABLED = 0;
                     GrCapability_ENABLED = 1;
                  };
                  GrCapability grCapability = 2;
                  message GrNeighborInfos {
                     message GrNeighborInfo {
                        string areaId = 1;
                        uint32 grHelperAge = 2;
                        uint32 grHelperPeriod = 3;
                        enum GrNbrState {
                           GrNbrState_NORMAL = 0;
                           GrNbrState_RESTARTER = 1;
                        };
                        GrNbrState grNbrState = 4;
                        string ifName = 5;
                        string intfIPAddr = 6;
                        enum LastExitReason {
                           LastExitReason_GRACEX_PERIODX_EXPIRE = 0;
                           LastExitReason_IFX_CHANGE = 1;
                           LastExitReason_NBRX_RESET = 2;
                           LastExitReason_NONE = 3;
                           LastExitReason_POLICYX_CHECKX_FAIL = 4;
                           LastExitReason_PROCX_CHANGE = 5;
                           LastExitReason_RECVX_CHANGEX_LSA = 6;
                           LastExitReason_RECVX_FLUSHX_GRACEX_LSA = 7;
                           LastExitReason_RECVX_ONEX_WAYX_HELLO = 8;
                           LastExitReason_RECVX_TWOX_GRACEX_LSA = 9;
                           LastExitReason_SUCCESS = 10;
                        };
                        LastExitReason lastExitReason = 7;
                        string nbrIPAddr = 8;
                        string nbrRouterId = 9;
                     }
                     repeated GrNeighborInfo grNeighborInfo = 1;
                  }
                  GrNeighborInfos grNeighborInfos = 3;
                  message GrVlinkNeighborInfos {
                     message GrVlinkNeighborInfo {
                        string areaId = 1;
                        enum GrNbrState {
                           GrNbrState_NORMAL = 0;
                           GrNbrState_RESTARTER = 1;
                        };
                        GrNbrState grNbrState = 2;
                        string ifName = 3;
                        string intfIPAddr = 4;
                        enum LastExitReason {
                           LastExitReason_GRACEX_PERIODX_EXPIRE = 0;
                           LastExitReason_IFX_CHANGE = 1;
                           LastExitReason_NBRX_RESET = 2;
                           LastExitReason_NONE = 3;
                           LastExitReason_POLICYX_CHECKX_FAIL = 4;
                           LastExitReason_PROCX_CHANGE = 5;
                           LastExitReason_RECVX_CHANGEX_LSA = 6;
                           LastExitReason_RECVX_FLUSHX_GRACEX_LSA = 7;
                           LastExitReason_RECVX_ONEX_WAYX_HELLO = 8;
                           LastExitReason_RECVX_TWOX_GRACEX_LSA = 9;
                           LastExitReason_SUCCESS = 10;
                        };
                        LastExitReason lastExitReason = 5;
                        string nbrIPAddr = 6;
                        string nbrRouterId = 7;
                        enum VlinkIfState {
                           VlinkIfState_BDR = 0;
                           VlinkIfState_DOWN = 1;
                           VlinkIfState_DR = 2;
                           VlinkIfState_DROTHER = 3;
                           VlinkIfState_LOOPBACK = 4;
                           VlinkIfState_PX_2X_P = 5;
                           VlinkIfState_WAITING = 6;
                        };
                        VlinkIfState vlinkIfState = 8;
                        enum VlinkNbrState {
                           VlinkNbrState_ATTEMPT = 0;
                           VlinkNbrState_DOWN = 1;
                           VlinkNbrState_EXCHANGE = 2;
                           VlinkNbrState_EXSTART = 3;
                           VlinkNbrState_FULL = 4;
                           VlinkNbrState_INIT = 5;
                           VlinkNbrState_LOADING = 6;
                           VlinkNbrState_X_2X_WAY = 7;
                        };
                        VlinkNbrState vlinkNbrState = 9;
                     }
                     repeated GrVlinkNeighborInfo grVlinkNeighborInfo = 1;
                  }
                  GrVlinkNeighborInfos grVlinkNeighborInfos = 4;
                  enum HelpRole {
                     HelpRole_IGNOREX_EXTERNALX_LSAX_CHECK = 0;
                     HelpRole_LSAX_CHECKINGX_IGNORE = 1;
                     HelpRole_NEVER = 2;
                     HelpRole_NONE = 3;
                     HelpRole_PLANNED = 4;
                     HelpRole_PLANNEDX_ANDX_UNPLANNED = 5;
                     HelpRole_PLANNEDX_ANDX_UNX_PLANNEDX_X_STRICTX_LSAX_CHECK = 6;
                     HelpRole_PLANNEDX_X_IGNOREX_EXTERNALX_LSAX_CHECK = 7;
                     HelpRole_PLANNEDX_X_STRICTX_LSAX_CHECK = 8;
                     HelpRole_PLANNEDX_X_UNX_PLANNEDX_X_IGNOREX_EXTERNALX_LSAX_CHECK = 9;
                     HelpRole_PLANNEDX_X_UNX_PLANNEDX_X_NONX_IETF = 10;
                     HelpRole_PLANNEDX_X_UNX_PLANNEDX_X_STRICTX_LSAX_CHECK = 11;
                     HelpRole_UNX_PLANNEDX_X_IGNOREX_EXTERNALX_LSAX_CHECK = 12;
                     HelpRole_UNX_PLANNEDX_X_LSAX_CHECKINGX_IGNORE = 13;
                     HelpRole_UNX_PLANNEDX_X_STRICTX_LSAX_CHECK = 14;
                  };
                  HelpRole helpRole = 5;
                  enum OnHelper {
                     OnHelper_FLOODINGX_CHANGEDX_LSA = 0;
                     OnHelper_GRACEFULX_RESTARTX_UNCONFIGUREDX_ATX_PROCESSX_LEVEL = 1;
                     OnHelper_GRACEX_LSAX_NOTX_FOUND = 2;
                     OnHelper_GRACEX_PERIODX_EXPIRED = 3;
                     OnHelper_INTERFACEX_STATUSX_CHANGED = 4;
                     OnHelper_NEIGHBORX_RESET = 5;
                     OnHelper_NONE = 6;
                     OnHelper_POLICYX_CHECKX_FAILEDX_FORX_RECEIVEDX_GRACEX_LSA = 7;
                     OnHelper_RECEIVEDX_FLUSHEDX_GRACEX_LSA = 8;
                     OnHelper_SUCCESSFULX_EXIT = 9;
                  };
                  OnHelper onHelper = 6;
                  uint32 reStartNbrNum = 7;
               }
               repeated GracefulRestartInformation gracefulRestartInformation = 1;
            }
            GracefulRestartInformations gracefulRestartInformations = 30;
            uint32 identifier = 31;
            enum ImportLimitStatus {
               ImportLimitStatus_ALARM = 0;
               ImportLimitStatus_DISABLE = 1;
               ImportLimitStatus_ENABLE = 2;
               ImportLimitStatus_OVERLIMIT = 3;
            };
            ImportLimitStatus importLimitStatus = 32;
            message LastDownNbrs {
               message LastDownNbr {
                  string areaId = 1;
                  string ifName = 2;
                  uint32 listIndex = 3;
                  enum NbrDownImmediateReason {
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_1X_WAYHELLOX_RECEIVED = 0;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_ADJOKX_ = 1;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_BADLSREQ = 2;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_INACTIVITY = 3;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_KILLX_NEIGHBOR = 4;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_LLX_DOWN = 5;
                     NbrDownImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_SEQUENCENUMX_MISMATCH = 6;
                  };
                  NbrDownImmediateReason nbrDownImmediateReason = 4;
                  enum NbrDownPrimaryReason {
                     NbrDownPrimaryReason_ACLX_CHANGEDX_FORX_FILTERX_LSA = 0;
                     NbrDownPrimaryReason_AREAX_OPTIONX_MISX_MATCH = 1;
                     NbrDownPrimaryReason_AREAX_RESET = 2;
                     NbrDownPrimaryReason_BFDX_SESSIONX_DOWN = 3;
                     NbrDownPrimaryReason_COMPONENTX_ISX_INX_IMPLEMENTX_STAT = 4;
                     NbrDownPrimaryReason_CPUX_OVERLOAD = 5;
                     NbrDownPrimaryReason_DDX_RETRANSX_TIMESX_UPTOX_LIMIT = 6;
                     NbrDownPrimaryReason_DOWNX_REASONX_INITX_VALUE = 7;
                     NbrDownPrimaryReason_FILTERX_LSAX_CONFIGURATIONX_CHANGE = 8;
                     NbrDownPrimaryReason_HELLOX_NOTX_SEEN = 9;
                     NbrDownPrimaryReason_INTERFACEX_PARAMETERX_MISMATCH = 10;
                     NbrDownPrimaryReason_INTERFACEX_RESET = 11;
                     NbrDownPrimaryReason_INTERFACEX_STATEX_CHANGEDX_TOX_STANDBY = 12;
                     NbrDownPrimaryReason_IX_BITX_INCORRECTX_INX_DD = 13;
                     NbrDownPrimaryReason_LINKX_FAULTX_ORX_INTERFACEX_CONFIGURATIONX_CHANGE = 14;
                     NbrDownPrimaryReason_LOGICALX_INTERFACEX_STATEX_CHANGE = 15;
                     NbrDownPrimaryReason_LSREQUESTX_PACKETX_REQUESTX_LSAX_ISX_NOTX_INX_THEX_LSDB = 16;
                     NbrDownPrimaryReason_LSREQUESTX_PACKETX_UNKNOWNX_REASON = 17;
                     NbrDownPrimaryReason_LSREQUESTX_PACKETX_X_EXISTX_NEWERX_LSAX_INX_THEX_LSDB = 18;
                     NbrDownPrimaryReason_LSREQUESTX_PACKETX_X_EXISTX_SAMEX_LSAX_INX_THEX_LSDB = 19;
                     NbrDownPrimaryReason_MSX_BITX_INCORRECTX_INX_DD = 20;
                     NbrDownPrimaryReason_MX_IX_MSX_BITX_ORX_SEQUENCENUMX_INCORRECT = 21;
                     NbrDownPrimaryReason_NEIGHBORX_ROUTERX_IDX_CHANGEDX_ORX_IPX_CONFLICTED = 22;
                     NbrDownPrimaryReason_NEIGHBORX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 23;
                     NbrDownPrimaryReason_NEIGHBORX_STATEX_WASX_NOTX_FULLX_WHENX_LSDBX_OVERFLOW = 24;
                     NbrDownPrimaryReason_NOTX_NSSAX_FINDX_7X_TYPEX_LSAX_INX_SUMMARYX_LIST = 25;
                     NbrDownPrimaryReason_NOTX_RECEIVEDX_DDX_DURINGX_ROUTERDEADINTERVAL = 26;
                     NbrDownPrimaryReason_NSSAX_AREAX_CONFIGUREX_CHANGE = 27;
                     NbrDownPrimaryReason_NSSAX_ORX_STUBX_AREAX_FINDX_5X_X_11X_TYPEX_LSA = 28;
                     NbrDownPrimaryReason_OPAQUEX_CAPABILITYX_DISABLED = 29;
                     NbrDownPrimaryReason_OPAQUEX_CAPABILITYX_ENABLED = 30;
                     NbrDownPrimaryReason_OPTIONSX_INCORRECTX_INX_DD = 31;
                     NbrDownPrimaryReason_OSPFX_DCNX_INTFX_PARAX_MISMATCH = 32;
                     NbrDownPrimaryReason_OSPFX_GRX_MASTERX_FORCEDOWN = 33;
                     NbrDownPrimaryReason_OSPFX_MAXX_NBRX_INX_ADJ = 34;
                     NbrDownPrimaryReason_OSPFX_OVERFLOW = 35;
                     NbrDownPrimaryReason_OSPFX_PROCESSX_RESET = 36;
                     NbrDownPrimaryReason_OSPFX_PROCESSX_SHUTDOWN = 37;
                     NbrDownPrimaryReason_PASSIVEX_INTERFACEX_DOWN = 38;
                     NbrDownPrimaryReason_RECEIVEDX_INVALIDX_DDX_PACKET = 39;
                     NbrDownPrimaryReason_RECEIVEDX_MTUX_MISMATCHEDX_DDX_PACKET = 40;
                     NbrDownPrimaryReason_RESETX_OSPFX_PEER = 41;
                     NbrDownPrimaryReason_RETRANSMISSIONX_LIMITX_EXCEED = 42;
                     NbrDownPrimaryReason_ROUTERX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 43;
                     NbrDownPrimaryReason_SEQEUNCEX_NUMBERX_MISMATCHED = 44;
                     NbrDownPrimaryReason_SHAMX_LINKX_UNREACHABLE = 45;
                     NbrDownPrimaryReason_STUBX_AREAX_CONFIGUREX_CHANGE = 46;
                     NbrDownPrimaryReason_UNABLEX_OPAQUEX_CAPABILITYX_FINDX_9X_10X_11X_TYPEX_LSA = 47;
                     NbrDownPrimaryReason_UNDOX_NBMAX_PEER = 48;
                     NbrDownPrimaryReason_UNDOX_NETWORKX_COMMAND = 49;
                     NbrDownPrimaryReason_UNDOX_OSPFX_AREA = 50;
                     NbrDownPrimaryReason_UNDOX_OSPFX_INTERFACEX_X_UNDOX_AREA = 51;
                     NbrDownPrimaryReason_UNDOX_OSPFX_INTERFACEX_X_UNDOX_AREAX_X_UNDOX_NETWORK = 52;
                     NbrDownPrimaryReason_UNDOX_ROUTERX_ID = 53;
                     NbrDownPrimaryReason_VIRTUALX_INTERFACEX_STATEX_CHANGE = 54;
                     NbrDownPrimaryReason_VLINKX_PEERX_NOTX_REACHABLE = 55;
                     NbrDownPrimaryReason_X_1X_WAYHELLOX_RECEIVED = 56;
                  };
                  NbrDownPrimaryReason nbrDownPrimaryReason = 5;
                  string nbrDownTime = 6;
                  string nbrIpAddr = 7;
                  string nbrRouterId = 8;
                  enum NbrType {
                     NbrType_NORMAL = 0;
                     NbrType_SLINK = 1;
                     NbrType_VLINK = 2;
                  };
                  NbrType nbrType = 9;
                  string routerId = 10;
               }
               repeated LastDownNbr lastDownNbr = 1;
            }
            LastDownNbrs lastDownNbrs = 33;
            bool lsaArrivalFlag = 34;
            uint32 lsaArrivalHoldInterval = 35;
            uint32 lsaArrivalInterval = 36;
            uint32 lsaArrivalMaxInterval = 37;
            uint32 lsaArrivalStartInterval = 38;
            uint32 lsaOriginateHoldInterval = 39;
            uint32 lsaOriginateInterval = 40;
            bool lsaOriginateIntervalFlag = 41;
            uint32 lsaOriginateMaxInterval = 42;
            uint32 lsaOriginateStartInterval = 43;
            bool lsaRefreshFlag = 44;
            message LsdbBriefs {
               message LsdbBrief {
                  string areaId = 1;
                  uint32 asbr = 2;
                  uint32 network = 3;
                  uint32 opaque10 = 4;
                  uint32 opaque9 = 5;
                  uint32 router = 6;
                  string routerId = 7;
                  uint32 stub = 8;
                  uint32 subTotal = 9;
                  uint32 summaryNet = 10;
                  uint32 type7 = 11;
               }
               repeated LsdbBrief lsdbBrief = 1;
            }
            LsdbBriefs lsdbBriefs = 45;
            bool lsdbOverflow = 46;
            uint32 lsdbOverflowLimit = 47;
            uint32 lsdbOverflowRemain = 48;
            enum LsdbOverflowStatus {
               LsdbOverflowStatus_APPROACH = 0;
               LsdbOverflowStatus_NORMAL = 1;
               LsdbOverflowStatus_OVERFLOW = 2;
            };
            LsdbOverflowStatus lsdbOverflowStatus = 49;
            message LsdbStatistics {
               message LsdbStatistic {
                  string advertiseRouterId = 1;
                  string areaId = 2;
                  string checkSum = 3;
                  string hostName = 4;
                  uint32 linkCount = 5;
                  message LinkLsas {
                     message LinkLsa {
                        message AdjSids {
                           message AdjSid {
                              uint32 label = 1;
                              uint32 mtID = 2;
                              string subTlvFlags = 3;
                              uint32 weight = 4;
                           }
                           repeated AdjSid adjSid = 1;
                        }
                        AdjSids adjSids = 1;
                        message LanAdjSids {
                           message LanAdjSid {
                              uint32 label = 1;
                              uint32 mtID = 2;
                              string neighborID = 3;
                              string subTlvFlags = 4;
                              uint32 weight = 5;
                           }
                           repeated LanAdjSid lanAdjSid = 1;
                        }
                        LanAdjSids lanAdjSids = 2;
                        string linkData = 3;
                        string linkID = 4;
                        string linkType = 5;
                     }
                     repeated LinkLsa linkLsa = 1;
                  }
                  LinkLsas linkLsas = 6;
                  string linkStateId = 7;
                  int32 lsaAge = 8;
                  uint32 lsaLength = 9;
                  string lsaSequenceNumber = 10;
                  enum LsaType {
                     LsaType_EXTERNAL = 0;
                     LsaType_NETWORK = 1;
                     LsaType_NSSA = 2;
                     LsaType_OPQX_AS = 3;
                     LsaType_OPQ_AREA = 4;
                     LsaType_OPQ_LINK = 5;
                     LsaType_ROUTER = 6;
                     LsaType_SUM_ASBR = 7;
                     LsaType_SUM_NET = 8;
                  };
                  LsaType lsaType = 11;
                  message Lsabodys {
                     message Lsabody {
                        string attachRouter = 1;
                        uint32 extMetricType = 2;
                        string forwardIpAddress = 3;
                        string linkData = 4;
                        string linkId = 5;
                        enum LinkType {
                           LinkType_NONE = 0;
                           LinkType_PX_2X_P = 1;
                           LinkType_STUBNET = 2;
                           LinkType_TRANSNET = 3;
                           LinkType_VIRTUAL = 4;
                        };
                        LinkType linkType = 6;
                        uint32 opaqueID = 7;
                        uint32 opaqueType = 8;
                        uint32 routeTag = 9;
                        uint32 tosId = 10;
                        uint32 tosMetric = 11;
                     }
                     repeated Lsabody lsabody = 1;
                  }
                  Lsabodys lsabodys = 12;
                  string networkMask = 13;
                  enum OptionFlag {
                     OptionFlag_ABR = 0;
                     OptionFlag_ABRX_NT = 1;
                     OptionFlag_ABRX_VIRTUAL = 2;
                     OptionFlag_ABRX_VIRTUALX_NT = 3;
                     OptionFlag_ASBR = 4;
                     OptionFlag_ASBRX_ABR = 5;
                     OptionFlag_ASBRX_ABRX_NT = 6;
                     OptionFlag_ASBRX_ABRX_VIRTUAL = 7;
                     OptionFlag_ASBRX_ABRX_VIRTUALX_NT = 8;
                     OptionFlag_ASBRX_NT = 9;
                     OptionFlag_ASBRX_VIRTUAL = 10;
                     OptionFlag_ASBRX_VIRTUALX_NT = 11;
                     OptionFlag_NT = 12;
                     OptionFlag_NULL = 13;
                     OptionFlag_VIRTUAL = 14;
                     OptionFlag_VIRTUALX_NT = 15;
                  };
                  OptionFlag optionFlag = 14;
                  enum Options {
                     Options_DC = 0;
                     Options_DCX_E = 1;
                     Options_DCX_EA = 2;
                     Options_DCX_EAX_E = 3;
                     Options_DCX_EAX_MC = 4;
                     Options_DCX_EAX_MCX_E = 5;
                     Options_DCX_EAX_NX_P = 6;
                     Options_DCX_EAX_NX_PX_E = 7;
                     Options_DCX_EAX_NX_PX_MC = 8;
                     Options_DCX_EAX_NX_PX_MCX_E = 9;
                     Options_DCX_MC = 10;
                     Options_DCX_MCX_E = 11;
                     Options_DCX_NX_P = 12;
                     Options_DCX_NX_PX_E = 13;
                     Options_DCX_NX_PX_MC = 14;
                     Options_DCX_NX_PX_MCX_E = 15;
                     Options_DN = 16;
                     Options_E = 17;
                     Options_EA = 18;
                     Options_EAX_E = 19;
                     Options_EAX_MC = 20;
                     Options_EAX_MCX_E = 21;
                     Options_EAX_NX_P = 22;
                     Options_EAX_NX_PX_E = 23;
                     Options_EAX_NX_PX_MC = 24;
                     Options_EAX_NX_PX_MCX_E = 25;
                     Options_EX_DN = 26;
                     Options_MC = 27;
                     Options_MCX_E = 28;
                     Options_NONE = 29;
                     Options_NX_P = 30;
                     Options_NX_PX_DN = 31;
                     Options_NX_PX_E = 32;
                     Options_NX_PX_MC = 33;
                     Options_NX_PX_MCX_E = 34;
                  };
                  Options options = 15;
                  message PrefixLsas {
                     message PrefixLsa {
                        string aF = 1;
                        string flags = 2;
                        string prefix = 3;
                        message PrefixSids {
                           message PrefixSid {
                              enum Algorithm {
                                 Algorithm_SPF = 0;
                                 Algorithm_STRICTX_SPF = 1;
                              };
                              Algorithm algorithm = 1;
                              uint32 index = 2;
                              uint32 mtID = 3;
                              string subTlvFlags = 4;
                           }
                           repeated PrefixSid prefixSid = 1;
                        }
                        PrefixSids prefixSids = 4;
                        enum RouteType {
                           RouteType_ASX_EXTERNAL = 0;
                           RouteType_INTERX_AREA = 1;
                           RouteType_INTRAX_AREA = 2;
                           RouteType_NSSAX_EXTERNAL = 3;
                           RouteType_UNSPECIFIED = 4;
                        };
                        RouteType routeType = 5;
                     }
                     repeated PrefixLsa prefixLsa = 1;
                  }
                  PrefixLsas prefixLsas = 16;
                  message Rilsa {
                     string algorithm = 1;
                     string hostName = 2;
                     message Labelranges {
                        message Labelrange {
                           uint32 label = 1;
                           uint32 rangeSize = 2;
                        }
                        repeated Labelrange labelrange = 1;
                     }
                     Labelranges labelranges = 3;
                  }
                  Rilsa rilsa = 17;
               }
               repeated LsdbStatistic lsdbStatistic = 1;
            }
            LsdbStatistics lsdbStatistics = 50;
            uint32 maxLinkCostCfg = 51;
            bool meshGroupFlag = 52;
            message MigpRoutings {
               message MigpRouting {
                  uint32 cost = 1;
                  string destinationIpAddr = 2;
                  uint32 maskLength = 3;
                  message MigpnexthopDatas {
                     message MigpnexthopData {
                        string advertiseRouterId = 1;
                        string areaId = 2;
                        string flagsDisp = 3;
                        string ifName = 4;
                        string nexthopIpAddr = 5;
                        uint32 tag = 6;
                     }
                     repeated MigpnexthopData migpnexthopData = 1;
                  }
                  MigpnexthopDatas migpnexthopDatas = 4;
                  string pathType = 5;
                  enum PrefixPriority {
                     PrefixPriority_CRITICAL = 0;
                     PrefixPriority_HIGH = 1;
                     PrefixPriority_LOW = 2;
                     PrefixPriority_MEDIUM = 3;
                  };
                  PrefixPriority prefixPriority = 6;
               }
               repeated MigpRouting migpRouting = 1;
            }
            MigpRoutings migpRoutings = 53;
            enum MplsLdpAutoConfig {
               MplsLdpAutoConfig_ENABLE = 0;
               MplsLdpAutoConfig_NONE = 1;
            };
            MplsLdpAutoConfig mplsLdpAutoConfig = 54;
            bool multicastRpfRouteFlag = 55;
            message Neighbors {
               message Neighbor {
                  string areaId = 1;
                  string dnsHostName = 2;
                  string hostName = 3;
                  string ifName = 4;
                  bool multiAreaFlag = 5;
                  string nbrIpAddr = 6;
                  string nbrRouterId = 7;
                  enum NbrState {
                     NbrState_ATTEMPT = 0;
                     NbrState_DOWN = 1;
                     NbrState_EXCHANGE = 2;
                     NbrState_EXSTART = 3;
                     NbrState_FULL = 4;
                     NbrState_INIT = 5;
                     NbrState_LOADING = 6;
                     NbrState_X_2X_WAY = 7;
                  };
                  NbrState nbrState = 8;
                  message NeighborDatas {
                     message NeighborData {
                        string deadDueTimer = 1;
                        enum GrState {
                           GrState_DOINGX_GR = 0;
                           GrState_HELPER = 1;
                           GrState_NA = 2;
                           GrState_NORMAL = 3;
                        };
                        GrState grState = 2;
                        string interfaceIpAddr = 3;
                        uint32 nbrAuthenticationSequence = 4;
                        string nbrBDR = 5;
                        string nbrDR = 6;
                        uint32 nbrInterfaceMTU = 7;
                        enum NbrMode {
                           NbrMode_MASTER = 0;
                           NbrMode_SLAVE = 1;
                        };
                        NbrMode nbrMode = 8;
                        int32 nbrPriority = 9;
                        uint32 nbrRetranIntv = 10;
                        string nbrUpTime = 11;
                        string upTimeStamp = 12;
                     }
                     repeated NeighborData neighborData = 1;
                  }
                  NeighborDatas neighborDatas = 9;
               }
               repeated Neighbor neighbor = 1;
            }
            Neighbors neighbors = 56;
            message NexthopInformations {
               message NexthopInformation {
                  string ifName = 1;
                  string interfaceAddr = 2;
                  string nexthopAddr = 3;
                  uint32 refereceCount = 4;
                  string routerId = 5;
                  enum RoutingSourceType {
                     RoutingSourceType_LOCAL = 0;
                     RoutingSourceType_UNKNOW = 1;
                  };
                  RoutingSourceType routingSourceType = 6;
               }
               repeated NexthopInformation nexthopInformation = 1;
            }
            NexthopInformations nexthopInformations = 57;
            uint32 nonDefaultAseLsaCount = 58;
            uint32 nssaCount = 59;
            bool opaqueCapabilityFlag = 60;
            message OspfDispSrmsInfos {
               message OspfDispSrmsInfo {
                  string advRtrId = 1;
                  string areaId = 2;
                  string ipv4Address = 3;
                  uint32 maskLength = 4;
                  uint32 sidValue = 5;
               }
               repeated OspfDispSrmsInfo ospfDispSrmsInfo = 1;
            }
            OspfDispSrmsInfos ospfDispSrmsInfos = 61;
            message OspfFRRs {
               message OspfFRR {
                  bool frrEnableFlag = 1;
                  message FrrMTs {
                     message FrrMT {
                        message FrrRoutePolicyMTs {
                           message FrrRoutePolicyMT {
                              enum PolicyType {
                                 PolicyType_NONE = 0;
                                 PolicyType_ROUTE_FILTER = 1;
                                 PolicyType_ROUTE_POLICY = 2;
                              };
                              PolicyType policyType = 1;
                              string routeFilterName = 2;
                              string routePolicyName = 3;
                           }
                           FrrRoutePolicyMT frrRoutePolicyMT = 1;
                        }
                        FrrRoutePolicyMTs frrRoutePolicyMTs = 1;
                        message RemoteLfaIpPrefixMTs {
                           message RemoteLfaIpPrefixMT {
                              string ipPrefixName = 1;
                           }
                           RemoteLfaIpPrefixMT remoteLfaIpPrefixMT = 1;
                        }
                        RemoteLfaIpPrefixMTs remoteLfaIpPrefixMTs = 2;
                        message TiebreakerMT {
                           uint32 lowcostPrefer = 1;
                           uint32 nodeProtectPrefer = 2;
                        }
                        TiebreakerMT tiebreakerMT = 3;
                        string topoName = 4;
                     }
                     repeated FrrMT frrMT = 1;
                  }
                  FrrMTs frrMTs = 2;
                  bool lfaFlag = 3;
                  bool rLfaFlag = 4;
                  uint32 rLfaMaxCost = 5;
                  bool tiLfaFlag = 6;
               }
               OspfFRR ospfFRR = 1;
            }
            OspfFRRs ospfFRRs = 62;
            message OspfFloodCtrl {
               bool ospfFloodCtrlEnable = 1;
               uint32 ospfFloodCtrlIntvl = 2;
               uint32 ospfFloodCtrlNum = 3;
            }
            OspfFloodCtrl ospfFloodCtrl = 63;
            message OspfGRs {
               bool grNonIetf = 1;
               enum HelperFilterType {
                  HelperFilterType_ACL_NAME = 0;
                  HelperFilterType_ACL_NUM = 1;
                  HelperFilterType_IP_PREFIX = 2;
                  HelperFilterType_NONE = 3;
               };
               HelperFilterType helperFilterType = 2;
               string helperFilterValue = 3;
               bool helperFlag = 4;
               bool helperPlannedOnlyFlag = 5;
               bool ignoreExternalLsaFlag = 6;
               bool neverFlag = 7;
            }
            OspfGRs ospfGRs = 64;
            message OspfHostNames {
               message OspfHostName {
                  string hostName = 1;
                  bool hostNameEnable = 2;
               }
               OspfHostName ospfHostName = 1;
            }
            OspfHostNames ospfHostNames = 65;
            message OspfImportLimit {
               bool ospfImportLimit = 1;
               uint32 ospfImportLimitCount = 2;
               uint32 ospfLowlimitThreshold = 3;
               uint32 ospfUplimitThreshold = 4;
            }
            OspfImportLimit ospfImportLimit = 66;
            message OspfLocalMts {
               message OspfLocalMt {
                  string aclNameOrNum = 1;
                  string ipPrefix = 2;
                  string routeFilterName = 3;
                  string routePolicy = 4;
                  enum Type {
                     Type_ACL_NAME_OR_NUM = 0;
                     Type_IP_PREFIX = 1;
                     Type_ROUTE_FILTER = 2;
                     Type_ROUTE_POLICY = 3;
                  };
                  Type type = 5;
               }
               OspfLocalMt ospfLocalMt = 1;
            }
            OspfLocalMts ospfLocalMts = 67;
            message OspfMeshGroups {
               message OspfMeshGroup {
                  string areaId = 1;
                  uint32 memberCount = 2;
                  string meshGroupId = 3;
                  message OspfMeshMembers {
                     message OspfMeshMember {
                        string ifName = 1;
                        string interfaceIpAddr = 2;
                        int32 maskLength = 3;
                        enum NbrState {
                           NbrState_ATTEMPT = 0;
                           NbrState_DOWN = 1;
                           NbrState_EXCHANGE = 2;
                           NbrState_EXSTART = 3;
                           NbrState_FULL = 4;
                           NbrState_INIT = 5;
                           NbrState_LOADING = 6;
                           NbrState_X_2X_WAY = 7;
                        };
                        NbrState nbrState = 4;
                     }
                     repeated OspfMeshMember ospfMeshMember = 1;
                  }
                  OspfMeshMembers ospfMeshMembers = 4;
               }
               repeated OspfMeshGroup ospfMeshGroup = 1;
            }
            OspfMeshGroups ospfMeshGroups = 68;
            message OspfMplsTeStatistics {
               message OspfMplsTeStatistic {
                  string advRtrId = 1;
                  string areaId = 2;
                  string linkStateId = 3;
                  message LinkTlvDatas {
                     message LinkTlvData {
                        string adminGroup = 1;
                        uint64 bc0 = 2;
                        uint64 bc1 = 3;
                        uint64 bc2 = 4;
                        uint64 bc3 = 5;
                        uint64 bc4 = 6;
                        uint64 bc5 = 7;
                        uint64 bc6 = 8;
                        uint64 bc7 = 9;
                        string linkId = 10;
                        enum LinkType {
                           LinkType_MULTIX_ACCESS = 0;
                           LinkType_NONE = 1;
                           LinkType_P2P = 2;
                        };
                        LinkType linkType = 11;
                        message LocalIps {
                           message LocalIp {
                              string localIp = 1;
                           }
                           repeated LocalIp localIp = 1;
                        }
                        LocalIps localIps = 12;
                        uint64 maxLinkBw = 13;
                        uint64 maxResBw = 14;
                        string remoteIp = 15;
                        message Srlgs {
                           message Srlg {
                              uint32 srlg = 1;
                           }
                           repeated Srlg srlg = 1;
                        }
                        Srlgs srlgs = 16;
                        uint32 teMetric = 17;
                        uint64 unResBw0 = 18;
                        uint64 unResBw1 = 19;
                        uint64 unResBw2 = 20;
                        uint64 unResBw3 = 21;
                        uint64 unResBw4 = 22;
                        uint64 unResBw5 = 23;
                        uint64 unResBw6 = 24;
                        uint64 unResBw7 = 25;
                     }
                     repeated LinkTlvData linkTlvData = 1;
                  }
                  LinkTlvDatas linkTlvDatas = 4;
                  uint32 lsaLength = 5;
                  enum Lsaoptions {
                     Lsaoptions_DC = 0;
                     Lsaoptions_DCX_E = 1;
                     Lsaoptions_DCX_EA = 2;
                     Lsaoptions_DCX_EAX_E = 3;
                     Lsaoptions_DCX_EAX_MC = 4;
                     Lsaoptions_DCX_EAX_MCX_E = 5;
                     Lsaoptions_DCX_EAX_NX_P = 6;
                     Lsaoptions_DCX_EAX_NX_PX_E = 7;
                     Lsaoptions_DCX_EAX_NX_PX_MC = 8;
                     Lsaoptions_DCX_EAX_NX_PX_MCX_E = 9;
                     Lsaoptions_DCX_MC = 10;
                     Lsaoptions_DCX_MCX_E = 11;
                     Lsaoptions_DCX_NX_P = 12;
                     Lsaoptions_DCX_NX_PX_E = 13;
                     Lsaoptions_DCX_NX_PX_MC = 14;
                     Lsaoptions_DCX_NX_PX_MCX_E = 15;
                     Lsaoptions_DN = 16;
                     Lsaoptions_E = 17;
                     Lsaoptions_EA = 18;
                     Lsaoptions_EAX_E = 19;
                     Lsaoptions_EAX_MC = 20;
                     Lsaoptions_EAX_MCX_E = 21;
                     Lsaoptions_EAX_NX_P = 22;
                     Lsaoptions_EAX_NX_PX_E = 23;
                     Lsaoptions_EAX_NX_PX_MC = 24;
                     Lsaoptions_EAX_NX_PX_MCX_E = 25;
                     Lsaoptions_EX_DN = 26;
                     Lsaoptions_MC = 27;
                     Lsaoptions_MCX_E = 28;
                     Lsaoptions_NONE = 29;
                     Lsaoptions_NX_P = 30;
                     Lsaoptions_NX_PX_DN = 31;
                     Lsaoptions_NX_PX_E = 32;
                     Lsaoptions_NX_PX_MC = 33;
                     Lsaoptions_NX_PX_MCX_E = 34;
                  };
                  Lsaoptions lsaoptions = 6;
                  uint32 opaqueId = 7;
                  message RouterTlvDatas {
                     message RouterTlvData {
                        string teRouterId = 1;
                     }
                     repeated RouterTlvData routerTlvData = 1;
                  }
                  RouterTlvDatas routerTlvDatas = 8;
                  string timeStamp = 9;
               }
               repeated OspfMplsTeStatistic ospfMplsTeStatistic = 1;
            }
            OspfMplsTeStatistics ospfMplsTeStatistics = 69;
            message OspfPeerLsaOuts {
               message OspfPeerLsaOut {
                  bool allFlag = 1;
                  string aseFilterName = 2;
                  enum AseFilterType {
                     AseFilterType_ACL_NAME_OR_NUM = 0;
                     AseFilterType_NONE = 1;
                  };
                  AseFilterType aseFilterType = 3;
                  bool aseFlag = 4;
                  string nssaFilterName = 5;
                  enum NssaFilterType {
                     NssaFilterType_ACL_NAME_OR_NUM = 0;
                     NssaFilterType_NONE = 1;
                  };
                  NssaFilterType nssaFilterType = 6;
                  bool nssaFlag = 7;
                  string peerIPAddr = 8;
                  string sumFilterName = 9;
                  enum SumFilterType {
                     SumFilterType_ACL_NAME_OR_NUM = 0;
                     SumFilterType_NONE = 1;
                  };
                  SumFilterType sumFilterType = 10;
                  bool sumFlag = 11;
               }
               repeated OspfPeerLsaOut ospfPeerLsaOut = 1;
            }
            OspfPeerLsaOuts ospfPeerLsaOuts = 70;
            message OspfProcDcns {
               message OspfProcDcn {
                  string authTextMd5 = 1;
                  string authTextSimple = 2;
                  enum AuthenticationMode {
                     AuthenticationMode_HMACX_MD5 = 0;
                     AuthenticationMode_HMACX_SHA256 = 1;
                     AuthenticationMode_MD5 = 2;
                     AuthenticationMode_NONE = 3;
                     AuthenticationMode_SIMPLE = 4;
                  };
                  AuthenticationMode authenticationMode = 3;
                  int32 deadInterval = 4;
                  uint32 drPriority = 5;
                  bool drPriorityFlag = 6;
                  int32 helloInterval = 7;
                  enum IntfType {
                     IntfType_DCC = 0;
                  };
                  IntfType intfType = 8;
                  uint32 keyId = 9;
                  int32 retransmitInterval = 10;
                  uint32 transDelayInterval = 11;
               }
               repeated OspfProcDcn ospfProcDcn = 1;
            }
            OspfProcDcns ospfProcDcns = 71;
            message OspfSegrCfg {
               string ipPrefix = 1;
               enum LspTrigType {
                  LspTrigType_HOST = 0;
                  LspTrigType_IPPREFIX = 1;
                  LspTrigType_NONE = 2;
               };
               LspTrigType lspTrigType = 2;
            }
            OspfSegrCfg ospfSegrCfg = 72;
            message OspfSilentInterfaces {
               message OspfSilentInterface {
                  string ifName = 1;
                  bool schemaUndoIntf = 2;
               }
               repeated OspfSilentInterface ospfSilentInterface = 1;
            }
            OspfSilentInterfaces ospfSilentInterfaces = 73;
            message OspfSrgbs {
               message OspfSrgb {
                  uint32 srgbBegin = 1;
                  uint32 srgbEnd = 2;
               }
               repeated OspfSrgb ospfSrgb = 1;
            }
            OspfSrgbs ospfSrgbs = 74;
            message OspfSrmsCfg {
               bool ospfSrmsRecv = 1;
               bool ospfSrmsSend = 2;
            }
            OspfSrmsCfg ospfSrmsCfg = 75;
            bool peerFlappingSuppress = 76;
            message Peers {
               message Peer {
                  uint32 drPriority = 1;
                  string ipAddress = 2;
               }
               repeated Peer peer = 1;
            }
            Peers peers = 77;
            uint32 processId = 78;
            uint32 retransmissionLimit = 79;
            bool retransmissionLimitFlag = 80;
            bool rfc1583CompatibleFlag = 81;
            uint32 routeTag = 82;
            bool routeTagDisableFlag = 83;
            bool routeTagFlag = 84;
            string routerId = 85;
            message Routings {
               message Routing {
                  uint32 cost = 1;
                  string destinationIpAddr = 2;
                  uint32 maskLength = 3;
                  message NexthopDatas {
                     message NexthopData {
                        string advertiseRouterId = 1;
                        string areaId = 2;
                        enum BackupType {
                           BackupType_LFAX_LINK = 0;
                           BackupType_LFAX_LINKX_NODE = 1;
                           BackupType_REMOTEX_LFAX_LINK = 2;
                           BackupType_REMOTEX_LFAX_LINKX_NODE = 3;
                           BackupType_TIX_LFAX_LINK = 4;
                           BackupType_TIX_LFAX_LINKX_NODE = 5;
                        };
                        BackupType backupType = 3;
                        string bakIfName = 4;
                        string bakNextIpAddr = 5;
                        string flagsDisp = 6;
                        string ifName = 7;
                        string nexthopIpAddr = 8;
                        uint32 tag = 9;
                        string tunnelDest = 10;
                        enum TunnelType {
                           TunnelType_LDP = 0;
                        };
                        TunnelType tunnelType = 11;
                     }
                     repeated NexthopData nexthopData = 1;
                  }
                  NexthopDatas nexthopDatas = 4;
                  string pathType = 5;
                  enum PrefixPriority {
                     PrefixPriority_CRITICAL = 0;
                     PrefixPriority_HIGH = 1;
                     PrefixPriority_LOW = 2;
                     PrefixPriority_MEDIUM = 3;
                  };
                  PrefixPriority prefixPriority = 6;
               }
               repeated Routing routing = 1;
            }
            Routings routings = 86;
            bool safeSyncFlag = 87;
            uint32 selfAseLsaCount = 88;
            bool shutDownFlg = 89;
            bool silentAllInterfaceFlag = 90;
            message SlinkNbrStatistics {
               message SlinkNbrStatistic {
                  string areaId = 1;
                  uint32 cost = 2;
                  int32 deadIntv = 3;
                  string destAddr = 4;
                  enum GrStatus {
                     GrStatus_DOINGX_GR = 0;
                     GrStatus_HELPER = 1;
                     GrStatus_NA = 2;
                     GrStatus_NORMAL = 3;
                  };
                  GrStatus grStatus = 5;
                  int32 helloIntv = 6;
                  string nbrId = 7;
                  enum NbrState {
                     NbrState_ATTEMPT = 0;
                     NbrState_DOWN = 1;
                     NbrState_EXCHANGE = 2;
                     NbrState_EXSTART = 3;
                     NbrState_FULL = 4;
                     NbrState_INIT = 5;
                     NbrState_LOADING = 6;
                     NbrState_X_2X_WAY = 7;
                  };
                  NbrState nbrState = 8;
                  int32 retranIntv = 9;
                  bool smartDiscover = 10;
                  string srcAddr = 11;
                  enum State {
                     State_BDR = 0;
                     State_DOWN = 1;
                     State_DR = 2;
                     State_DROTHER = 3;
                     State_LOOPBACK = 4;
                     State_PX_2X_P = 5;
                     State_WAITING = 6;
                  };
                  State state = 12;
                  int32 transDelayIntv = 13;
               }
               repeated SlinkNbrStatistic slinkNbrStatistic = 1;
            }
            SlinkNbrStatistics slinkNbrStatistics = 91;
            bool spfConservFlag = 92;
            uint32 spfCount = 93;
            uint32 spfScheduleHoldInterval = 94;
            uint32 spfScheduleInterval = 95;
            uint32 spfScheduleIntervalMillisecond = 96;
            enum SpfScheduleIntervalType {
               SpfScheduleIntervalType_INTELLIGENTX_TIMER = 0;
               SpfScheduleIntervalType_MILLISECOND = 1;
               SpfScheduleIntervalType_TIMER = 2;
            };
            SpfScheduleIntervalType spfScheduleIntervalType = 97;
            uint32 spfScheduleMaxInterval = 98;
            uint32 spfScheduleStartInterval = 99;
            bool srMplsEnable = 100;
            message SrRoutings {
               message SrRouting {
                  string adjLabelStack = 1;
                  string advertiseRouterId = 2;
                  string areaId = 3;
                  enum BackupType {
                     BackupType_LFAX_LINK = 0;
                     BackupType_LFAX_LINKX_NODE = 1;
                     BackupType_REMOTEX_LFAX_LINK = 2;
                     BackupType_REMOTEX_LFAX_LINKX_NODE = 3;
                     BackupType_TIX_LFAX_LINK = 4;
                     BackupType_TIX_LFAX_LINKX_NODE = 5;
                  };
                  BackupType backupType = 4;
                  string bakIfName = 5;
                  string bakNextIpAddr = 6;
                  string destinationIpAddr = 7;
                  string ifName = 8;
                  uint32 maskLength = 9;
                  string nexthopIpAddr = 10;
                  string pathType = 11;
                  string prefixFlag = 12;
                  uint32 prefixSid = 13;
                  uint32 srInLabel = 14;
                  uint32 srOutLabel = 15;
               }
               repeated SrRouting srRouting = 1;
            }
            SrRoutings srRoutings = 101;
            uint32 stubRouExtCost = 102;
            bool stubRouExtLsa = 103;
            bool stubRouIncStub = 104;
            uint32 stubRouSumCost = 105;
            bool stubRouSumLsa = 106;
            enum StubRouterFlag {
               StubRouterFlag_NOCONFIG = 0;
               StubRouterFlag_STUBONBOOT = 1;
               StubRouterFlag_STUBONHAND = 2;
            };
            StubRouterFlag stubRouterFlag = 107;
            uint32 stubRouterOnStartupInterval = 108;
            bool suppressReachability = 109;
            bool trafficAdj = 110;
            message TrafficAdjStats {
               message TrafficAdjStat {
                  string areaId = 1;
                  uint32 holdTime = 2;
                  uint32 ifCost = 3;
                  string ifName = 4;
                  int32 ifTeMetric = 5;
                  enum IfTeMetricType {
                     IfTeMetricType_MPLSTE_TNLIF_METRIC_ABSOLUTE = 0;
                     IfTeMetricType_MPLSTE_TNLIF_METRIC_RELATIVE = 1;
                  };
                  IfTeMetricType ifTeMetricType = 6;
                  string ifTeTnlDest = 7;
                  string ifTeTnlNbrId = 8;
                  enum IfTeTnlType {
                     IfTeTnlType_FORWARDING_ADJACENCY = 0;
                     IfTeTnlType_IGP_SHORTCUT = 1;
                  };
                  IfTeTnlType ifTeTnlType = 9;
                  string ipAddress = 10;
                  string routerId = 11;
               }
               repeated TrafficAdjStat trafficAdjStat = 1;
            }
            TrafficAdjStats trafficAdjStats = 111;
            bool trafficAdv = 112;
            message VlinkNbrStatistics {
               message VlinkNbrStatistic {
                  string areaId = 1;
                  uint32 cost = 2;
                  int32 deadInterval = 3;
                  enum GrState {
                     GrState_DOINGX_GR = 0;
                     GrState_HELPER = 1;
                     GrState_NA = 2;
                     GrState_NORMAL = 3;
                  };
                  GrState grState = 4;
                  int32 helloInterval = 5;
                  enum HelperExtReason {
                     HelperExtReason_COMPLETED = 0;
                     HelperExtReason_INPROGRESS = 1;
                     HelperExtReason_NONE = 2;
                     HelperExtReason_TIMEDOUT = 3;
                     HelperExtReason_TOPOLOGYCHANGED = 4;
                  };
                  HelperExtReason helperExtReason = 6;
                  string ifName = 7;
                  string interfaceIpAddress = 8;
                  enum InterfaceState {
                     InterfaceState_BDR = 0;
                     InterfaceState_DOWN = 1;
                     InterfaceState_DR = 2;
                     InterfaceState_DROTHER = 3;
                     InterfaceState_LOOPBACK = 4;
                     InterfaceState_PX_2X_P = 5;
                     InterfaceState_WAITING = 6;
                  };
                  InterfaceState interfaceState = 9;
                  uint32 nbrEvents = 10;
                  uint32 nbrGRHelperAge = 11;
                  enum NbrGRHelperStat {
                     NbrGRHelperStat_HELPING = 0;
                     NbrGRHelperStat_NOTHELPING = 1;
                  };
                  NbrGRHelperStat nbrGRHelperStat = 12;
                  bool nbrHelloSupp = 13;
                  string nbrIpAddr = 14;
                  uint32 nbrLsRXQLen = 15;
                  int32 nbrOptions = 16;
                  string nbrRouterId = 17;
                  enum NbrState {
                     NbrState_ATTEMPT = 0;
                     NbrState_DOWN = 1;
                     NbrState_EXCHANGE = 2;
                     NbrState_EXSTART = 3;
                     NbrState_FULL = 4;
                     NbrState_INIT = 5;
                     NbrState_LOADING = 6;
                     NbrState_X_2X_WAY = 7;
                  };
                  NbrState nbrState = 18;
                  int32 retransmitInterval = 19;
                  bool smartDiscover = 20;
                  int32 transDelayInterval = 21;
                  enum Type {
                     Type_BROADCAST = 0;
                     Type_NBMA = 1;
                     Type_P2MP = 2;
                     Type_P2P = 3;
                     Type_VIRTUAL = 4;
                  };
                  Type type = 22;
               }
               repeated VlinkNbrStatistic vlinkNbrStatistic = 1;
            }
            VlinkNbrStatistics vlinkNbrStatistics = 113;
            bool vpnInstanceCapabilitySimpleFlag = 114;
            string vrfName = 115;
         }
         repeated OspfSite ospfSite = 1;
      }
      OspfSites ospfSites = 5;
   }
   Ospfv2Comm ospfv2comm = 1;
   message CheckRtId {
      bool conflict_flag = 1 [json_name = "conflict-flag"];
   }
   CheckRtId check_rt_id = 2 [json_name = "check-rt-id"];
   message SessionCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir_interval = 2 [json_name = "cir-interval"];
      uint32 cbs_interval = 3 [json_name = "cbs-interval"];
      uint32 pir_interval = 4 [json_name = "pir-interval"];
      uint32 pbs_interval = 5 [json_name = "pbs-interval"];
   }
   SessionCar session_car = 3 [json_name = "session-car"];
   message MaxageLsaProtect {
      bool disable = 1 [json_name = "disable"];
   }
   MaxageLsaProtect maxage_lsa_protect = 4 [json_name = "maxage-lsa-protect"];
   message SuppressFlapIntf {
      bool disable = 1 [json_name = "disable"];
   }
   SuppressFlapIntf suppress_flap_intf = 5 [json_name = "suppress-flap-intf"];
   message MibBinding {
      uint32 process_id = 1 [json_name = "process-id"];
   }
   MibBinding mib_binding = 6 [json_name = "mib-binding"];
   message FlushSourceTrace {
      bool enable = 1 [json_name = "enable"];
      bool vlink_enable = 2 [json_name = "vlink-enable"];
      uint32 port = 3 [json_name = "port"];
      uint32 vlink_port = 4 [json_name = "vlink-port"];
   }
   FlushSourceTrace flush_source_trace = 7 [json_name = "flush-source-trace"];
   message AdvertiseMaxCost {
      bool enable = 1 [json_name = "enable"];
   }
   AdvertiseMaxCost advertise_max_cost = 8 [json_name = "advertise-max-cost"];
   message SystemControl {
      bool cpu_overload_ctrl_enable = 1 [json_name = "cpu-overload-ctrl-enable"];
      bool mem_overload_ctrl_enable = 2 [json_name = "mem-overload-ctrl-enable"];
   }
   SystemControl system_control = 9 [json_name = "system-control"];
   message RouteLoopDetect {
      bool enable = 1 [json_name = "enable"];
   }
   RouteLoopDetect route_loop_detect = 10 [json_name = "route-loop-detect"];
   message MicroIsolationCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir = 2 [json_name = "cir"];
      uint32 cbs = 3 [json_name = "cbs"];
      uint32 pir = 4 [json_name = "pir"];
      uint32 pbs = 5 [json_name = "pbs"];
   }
   MicroIsolationCar micro_isolation_car = 11 [json_name = "micro-isolation-car"];
   message GlobalState {
      uint32 dcn_link_cnt = 1 [json_name = "dcn-link-cnt"];
   }
   GlobalState global_state = 12 [json_name = "global-state"];
}
message HwOspfv2DeleteRoutByPurgeClear {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2DeleteRouteByPurge {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2GreaterAgeLsaRecived {
   string AreaId = 1;
   uint32 IfIndex = 2;
   string IfName = 3;
   uint32 LsaAge = 4;
   string LsaId = 5;
   string NbrIpAddress = 6;
   string NbrRtrId = 7;
   uint32 ProcessId = 8;
}
message HwOspfv2INssaRouThresholdClear {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   uint32 hwOspfv2Threshold = 3;
}
message HwOspfv2ImAseRouThresholdClear {
   uint32 hwOspfv2ProcessIdIndex = 1;
   uint32 hwOspfv2Threshold = 2;
}
message HwOspfv2ImNssaRouteThreshold {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   uint32 hwOspfv2Threshold = 3;
}
message HwOspfv2ImportAseRouThreshold {
   uint32 hwOspfv2ProcessIdIndex = 1;
   uint32 hwOspfv2Threshold = 2;
}
message HwOspfv2ImportAseRouteExClear {
   uint32 hwOspfv2MaxLimit = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
}
message HwOspfv2ImportAseRouteExceed {
   uint32 hwOspfv2MaxLimit = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
}
message HwOspfv2ImportNssaRouteExClear {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2MaxLimit = 2;
   uint32 hwOspfv2ProcessIdIndex = 3;
}
message HwOspfv2ImportNssaRouteExceed {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2MaxLimit = 2;
   uint32 hwOspfv2ProcessIdIndex = 3;
}
message HwOspfv2IntraAreaDRIpAddrConf {
   string AreaId = 1;
   string InterfaceIpAddress = 2;
   string InterfaceName = 3;
   string NbrIpAddr = 4;
   uint32 ProcessId = 5;
   string RouterId = 6;
   int32 SelfIfnetIndex = 7;
   string ospfLsdbAreaId = 8;
   string ospfLsdbLsid = 9;
   string ospfLsdbRouterId = 10;
   int32 ospfLsdbType = 11;
}
message HwOspfv2IntraAreaRIdConfRecov {
   string AreaId = 1;
   string NewRouterId = 2;
   string OldRouterId = 3;
   uint32 ProcessId = 4;
}
message HwOspfv2IntraAreaRouteridConf {
   string NbrRtrId = 1;
   string RouterId = 2;
}
message HwOspfv2LsdbAppOverflowClear {
   uint32 hwOspfv2ProcessIdIndex = 1;
   uint32 hwOspfv2Threshold = 2;
}
message HwOspfv2LsdbApproachOverflow {
   uint32 hwOspfv2ProcessIdIndex = 1;
   uint32 hwOspfv2Threshold = 2;
}
message HwOspfv2LsdbOverflow {
   uint32 hwOspfv2MaxLimit = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
}
message HwOspfv2LsdbOverflowClear {
   uint32 hwOspfv2MaxLimit = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
}
message HwOspfv2PeerFlappSuppStatChang {
   string AreaId = 1;
   uint32 ProcessId = 2;
   uint32 SuppressReason = 3;
   uint32 SuppressStatus = 4;
   string ifAreaId = 5;
   uint32 ifIndex = 6;
   string ifName = 7;
}
message HwOspfv2RoutBeDelByPurgExClear {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2RouteBeDelByPInClear {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2RuledOutDeviceNum = 9;
   uint32 hwOspfv2TotalNodeNum = 10;
}
message HwOspfv2RouteBeDelByPurInexact {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2RuledOutDeviceNum = 9;
   uint32 hwOspfv2TotalNodeNum = 10;
}
message HwOspfv2RouteBeDelByPurgeClear {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   string hwOspfv2PurgeHostName = 3;
   string hwOspfv2PurgeHostName1 = 4;
   string hwOspfv2PurgeHostName2 = 5;
   string hwOspfv2PurgeHostName3 = 6;
   string hwOspfv2PurgeIpAddress = 7;
   string hwOspfv2PurgeIpAddress1 = 8;
   string hwOspfv2PurgeIpAddress2 = 9;
   string hwOspfv2PurgeIpAddress3 = 10;
   string hwOspfv2PurgeRouterId = 11;
   string hwOspfv2PurgeRouterId1 = 12;
   string hwOspfv2PurgeRouterId2 = 13;
   string hwOspfv2PurgeRouterId3 = 14;
   uint32 hwOspfv2TotalNodeNum = 15;
}
message HwOspfv2RouteBeDelByPurgeExact {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2RouteBeDeletedByPurge {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   string hwOspfv2PurgeHostName = 3;
   string hwOspfv2PurgeHostName1 = 4;
   string hwOspfv2PurgeHostName2 = 5;
   string hwOspfv2PurgeHostName3 = 6;
   string hwOspfv2PurgeIpAddress = 7;
   string hwOspfv2PurgeIpAddress1 = 8;
   string hwOspfv2PurgeIpAddress2 = 9;
   string hwOspfv2PurgeIpAddress3 = 10;
   string hwOspfv2PurgeRouterId = 11;
   string hwOspfv2PurgeRouterId1 = 12;
   string hwOspfv2PurgeRouterId2 = 13;
   string hwOspfv2PurgeRouterId3 = 14;
   uint32 hwOspfv2TotalNodeNum = 15;
}
message HwOspfv2ThirdPRBeDelByPExClear {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2ThirdPRBeDelByPInClear {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2RuledOutDeviceNum = 9;
   uint32 hwOspfv2TotalNodeNum = 10;
}
message HwOspfv2ThirdPRouBeDelByPClear {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   string hwOspfv2PurgeHostName = 3;
   string hwOspfv2PurgeHostName1 = 4;
   string hwOspfv2PurgeHostName2 = 5;
   string hwOspfv2PurgeHostName3 = 6;
   string hwOspfv2PurgeIpAddress = 7;
   string hwOspfv2PurgeIpAddress1 = 8;
   string hwOspfv2PurgeIpAddress2 = 9;
   string hwOspfv2PurgeIpAddress3 = 10;
   string hwOspfv2PurgeRouterId = 11;
   string hwOspfv2PurgeRouterId1 = 12;
   string hwOspfv2PurgeRouterId2 = 13;
   string hwOspfv2PurgeRouterId3 = 14;
   uint32 hwOspfv2TotalNodeNum = 15;
}
message HwOspfv2ThirdPRouBeDelByPExact {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2TotalNodeNum = 9;
}
message HwOspfv2ThirdPRoutBeDelByPurge {
   string hwOspfv2AreaId = 1;
   uint32 hwOspfv2ProcessIdIndex = 2;
   string hwOspfv2PurgeHostName = 3;
   string hwOspfv2PurgeHostName1 = 4;
   string hwOspfv2PurgeHostName2 = 5;
   string hwOspfv2PurgeHostName3 = 6;
   string hwOspfv2PurgeIpAddress = 7;
   string hwOspfv2PurgeIpAddress1 = 8;
   string hwOspfv2PurgeIpAddress2 = 9;
   string hwOspfv2PurgeIpAddress3 = 10;
   string hwOspfv2PurgeRouterId = 11;
   string hwOspfv2PurgeRouterId1 = 12;
   string hwOspfv2PurgeRouterId2 = 13;
   string hwOspfv2PurgeRouterId3 = 14;
   uint32 hwOspfv2TotalNodeNum = 15;
}
message HwOspfv2ThirdPartRouBeDelByPIn {
   uint32 hwOspfv2AffectedNodeNum = 1;
   string hwOspfv2AreaId = 2;
   uint32 hwOspfv2FlushLsaNum = 3;
   uint32 hwOspfv2ProcessIdIndex = 4;
   string hwOspfv2PurgeHostName = 5;
   string hwOspfv2PurgeIpAddress = 6;
   string hwOspfv2PurgeRouterId = 7;
   uint32 hwOspfv2PurgeStatPeriod = 8;
   uint32 hwOspfv2RuledOutDeviceNum = 9;
   uint32 hwOspfv2TotalNodeNum = 10;
}
message HwSrPrefixSidConflict {
   string hwSrConflictState = 1;
   string hwSrConflictType = 2;
   string hwSrPrefixAddress = 3;
   string hwSrPrefixAddressMask = 4;
   uint32 hwSrPrefixSid = 5;
   uint32 hwSrProcessId = 6;
   string hwSrProtocol = 7;
}
message OspfIfAuthFailure {
   uint32 AddressLessIf = 1;
   string AreaId = 2;
   uint32 ConfigErrorType = 3;
   string IfIpAddress = 4;
   string PacketSrc = 5;
   uint32 PacketType = 6;
   string RouterId = 7;
}
message OspfIfConfigError {
   uint32 AddressLessIf = 1;
   string AreaId = 2;
   uint32 ConfigErrorType = 3;
   string IfIpAddress = 4;
   string PacketSrc = 5;
   uint32 PacketType = 6;
   uint32 ProcessId = 7;
   string RouterId = 8;
}
message OspfIfRxBadPacket {
   uint32 AddressLessIf = 1;
   string AreaId = 2;
   string IfIpAddress = 3;
   string PacketSrc = 4;
   uint32 PacketType = 5;
   string RouterId = 6;
}
message OspfIfStateChange {
   uint32 AddressLessIf = 1;
   string AreaId = 2;
   uint32 IfChgReason = 3;
   string IfIpAddress = 4;
   string IfName = 5;
   uint32 IfState = 6;
   uint32 IfnetIndex = 7;
   string InstanceName = 8;
   string LocalIfIpAddress = 9;
   uint32 ProcessId = 10;
   string RouterId = 11;
}
message OspfLsdbApproachingOverflow {
   int32 ospfExtLsdbLimit = 1;
   string ospfRouterId = 2;
}
message OspfLsdbOverflow {
   int32 ospfExtLsdbLimit = 1;
   string ospfRouterId = 2;
}
message OspfMaxAgeLsa {
   string LsdbAreaId = 1;
   string LsdbLsid = 2;
   string LsdbRouterId = 3;
   uint32 LsdbType = 4;
   string RouterId = 5;
}
message OspfNbrRestartHelperStatChange {
   string AreaId = 1;
   uint32 NbrAddressLessIndex = 2;
   string NbrIpAddr = 3;
   uint32 NbrRestartHelperAge = 4;
   uint32 NbrRestartHelperExitReason = 5;
   uint32 NbrRestartHelperStatus = 6;
   string NbrRtrId = 7;
   string RouterId = 8;
}
message OspfNbrStateChange {
   string AreaId = 1;
   string IfName = 2;
   uint32 IfnetIndex = 3;
   string LocalIfIpAddress = 4;
   uint32 NbrAddressLessIndex = 5;
   string NbrIpAddress = 6;
   string NbrRtrId = 7;
   uint32 NbrState = 8;
   string NbrStateChangeReason = 9;
   uint32 ProcessId = 10;
   string RouterId = 11;
   string SubReason = 12;
   string VpnName = 13;
   uint32 ifIndex = 14;
}
message OspfNssaTranslatorStatusChange {
   string AreaId = 1;
   uint32 NSSATranslatorState = 2;
   uint32 ProcessId = 3;
   string RouterId = 4;
}
message OspfOriginateLsa {
   string LsdbAreaId = 1;
   string LsdbLsid = 2;
   string LsdbRouterId = 3;
   uint32 LsdbType = 4;
   string RouterId = 5;
}
message OspfTxRetransmit {
   uint32 AddressLessIf = 1;
   string IfIpAddress = 2;
   string IfNeighbor = 3;
   string LsdbAreaId = 4;
   string LsdbLsid = 5;
   string LsdbRouterId = 6;
   uint32 LsdbType = 7;
   uint32 NbrAddressLessIf = 8;
   string NbrIfIpAddress = 9;
   uint32 PacketType = 10;
   string RouterId = 11;
}
message OspfVirtIfAuthFailure {
   int32 ConfigErrorType = 1;
   int32 PacketType = 2;
   string RouterId = 3;
   string VirtIfAreaId = 4;
   string VirtIfNeighbor = 5;
}
message OspfVirtIfConfigError {
   int32 ConfigErrorType = 1;
   int32 PacketType = 2;
   string RouterId = 3;
   string VirtIfAreaId = 4;
   string VirtIfNeighbor = 5;
}
message OspfVirtIfRxBadPacket {
   int32 PacketType = 1;
   string RouterId = 2;
   string VirtIfAreaId = 3;
   string VirtIfNeighbor = 4;
}
message OspfVirtIfStateChange {
   string RouterId = 1;
   string VirtIfAreaId = 2;
   string VirtIfNeighbor = 3;
   int32 VirtIfState = 4;
}
message OspfVirtIfTxRetransmit {
   string LsdbAreaId = 1;
   string LsdbLsid = 2;
   string LsdbRouterId = 3;
   int32 LsdbType = 4;
   int32 PacketType = 5;
   string RouterId = 6;
   string VirtIfAreaId = 7;
   string VirtIfNeighbor = 8;
}
message OspfVirtNbRestartHelpStatChang {
   string RouterId = 1;
   string VirtNbrAreaId = 2;
   uint32 VirtNbrRestartHelperAge = 3;
   int32 VirtNbrRestartHelperExitReason = 4;
   int32 VirtNbrRestartHelperStatus = 5;
   string VirtNbrRtrId = 6;
}
message OspfVirtNbrStateChange {
   string InstanceName = 1;
   uint32 ProcessId = 2;
   string RouterId = 3;
   string VirtNbrArea = 4;
   string VirtNbrRtrId = 5;
   uint32 VirtNbrState = 6;
}


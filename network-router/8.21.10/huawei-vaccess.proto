syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-03-11 16:23:25
// ProtoYang-version 1
// module huawei-vaccess
// revision 2020-03-24
// revision 2020-03-10
// revision 2019-11-13
// revision 2019-10-14
// revision 2019-06-05
// namespace urn:huawei:yang:huawei-vaccess

package huawei_vaccess;

message Vaccess {
   message Ap {
      message IsApAuthtication {
         bool authEnable = 1;
         uint32 keyId = 2;
         string passWord = 3;
         bool sendOnly = 4;
      }
      IsApAuthtication isApAuthtication = 1;
      message VaApCommon {
         string adminIp = 1;
         string controltunnelKeychainName = 2;
         string openflowKeychainName = 3;
      }
      VaApCommon vaApCommon = 2;
      message VaMasterCfg {
         string primaryMasterIp = 1;
         string secondMasterIp = 2;
      }
      VaMasterCfg vaMasterCfg = 3;
      message VaOuterIfs {
         message VaOuterIf {
            string ifName = 1;
         }
         repeated VaOuterIf vaOuterIf = 1;
      }
      VaOuterIfs vaOuterIfs = 4;
      message Master {
         string primary_master_ip = 1 [json_name = "primary-master-ip"];
      }
      Master master = 5 [json_name = "master"];
   }
   Ap ap = 1 [json_name = "ap"];
   message ApSyslogServers {
      message ApSyslogServer {
         enum Facility {
            Facility_LOCAL0 = 0;
            Facility_LOCAL1 = 1;
            Facility_LOCAL2 = 2;
            Facility_LOCAL3 = 3;
            Facility_LOCAL4 = 4;
            Facility_LOCAL5 = 5;
            Facility_LOCAL6 = 6;
            Facility_LOCAL7 = 7;
         };
         Facility facility = 1;
         enum IpType {
            IpType_IPV4 = 0;
         };
         IpType ipType = 2;
         enum Level {
            Level_ALERT = 0;
            Level_CRITICAL = 1;
            Level_DEBUGGING = 2;
            Level_EMERGENCIES = 3;
            Level_ERROR = 4;
            Level_INFORMATIONAL = 5;
            Level_NOTIFICATION = 6;
            Level_WARNING = 7;
         };
         Level level = 3;
         string serverIp = 4;
         uint32 serverPort = 5;
         enum Timestamp {
            Timestamp_LOCALTIME = 0;
            Timestamp_UTC = 1;
         };
         Timestamp timestamp = 6;
         enum TransportMode {
            TransportMode_TCP = 0;
            TransportMode_UDP = 1;
         };
         TransportMode transportMode = 7;
      }
      repeated ApSyslogServer apSyslogServer = 1;
   }
   ApSyslogServers apSyslogServers = 2;
   message Master {
      message Bfd {
         uint32 bfdMcastAllInnerIfDM = 1;
         bool bfdMcastAllInnerIfEnable = 2;
         uint32 bfdMcastAllInnerIfRx = 3;
         uint32 bfdMcastAllInnerIfTx = 4;
      }
      Bfd bfd = 1;
      message Efm {
         bool efmVaccessEnable = 1;
      }
      Efm efm = 2;
      message ImportAdminIps {
         message ImportAdminIp {
            enum LevelType {
               LevelType_LEVELX_2 = 0;
               LevelType_LEVELX_1 = 1;
               LevelType_LEVELX_1X_2 = 2;
            };
            LevelType levelType = 1;
            uint32 processId = 2;
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_OSPF = 2;
               Protocol_ISIS = 3;
               Protocol_BGP = 6;
               Protocol_PUBLIC = 15;
            };
            Protocol protocol = 3 [json_name = "protocol"];
            string vpnName = 4;
            uint32 process_id = 5 [json_name = "process-id"];
            string vpn_instance = 6 [json_name = "vpn-instance"];
            LevelType level_type = 7 [json_name = "level-type"];
         }
         repeated ImportAdminIp importAdminIp = 1;
         repeated ImportAdminIp import_admin_ip = 2 [json_name = "import-admin-ip"];
      }
      ImportAdminIps importAdminIps = 3;
      message ImportProtocols {
         message ImportProtocol {
            uint32 processId = 1;
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_DIRECT = 1;
               Protocol_OSPF = 2;
               Protocol_ISIS = 3;
               Protocol_STATIC = 4;
               Protocol_BGP = 6;
            };
            Protocol protocol = 2 [json_name = "protocol"];
            string routePolicyName = 3;
            string vpnName = 4;
            uint32 process_id = 5 [json_name = "process-id"];
            string vpn_instance = 6 [json_name = "vpn-instance"];
            string route_policy_name = 7 [json_name = "route-policy-name"];
         }
         repeated ImportProtocol importProtocol = 1;
         repeated ImportProtocol import_protocol = 2 [json_name = "import-protocol"];
      }
      ImportProtocols importProtocols = 4;
      message IsAuthtication {
         bool authEnable = 1;
         uint32 keyId = 2;
         string passWord = 3;
         bool sendOnly = 4;
      }
      IsAuthtication isAuthtication = 5;
      message Lldp {
         enum LldpVacessEnable {
            LldpVacessEnable_DISABLED = 0;
            LldpVacessEnable_ENABLED = 1;
         };
         LldpVacessEnable lldpVacessEnable = 1;
      }
      Lldp lldp = 6;
      message NvCfgStartups {
         message NvCfgStartup {
            uint32 apId = 1;
            string boardInfo = 2;
            string configedSysSoft = 3;
            string curPafFile = 4;
            string curPatchFile = 5;
            string curStartupFile = 6;
            string curSysSoft = 7;
            string nextPafFile = 8;
            string nextPatchFile = 9;
            string nextStartupFile = 10;
            string nextSysSoft = 11;
            string position = 12;
         }
         repeated NvCfgStartup nvCfgStartup = 1;
      }
      NvCfgStartups nvCfgStartups = 7;
      message VaAps {
         message VaAp {
            string apAdminIP = 1;
            message ApArpSuppression {
               uint32 cbs = 1;
               uint32 cir = 2;
            }
            ApArpSuppression apArpSuppression = 2;
            uint32 apId = 3;
            message ApMacSuppression {
               uint32 cbs = 1;
               uint32 cir = 2;
            }
            ApMacSuppression apMacSuppression = 4;
            string description = 5;
            string esn = 6;
            string expPathName = 7;
            message HwTacManagePlaneCfg {
               message HwTacManagePlaneSvrCfgs {
                  message HwTacManagePlaneSvrCfg {
                     bool isSecondaryServer = 1;
                     string serverIpAddress = 2;
                     uint32 serverPort = 3;
                     string sharedKey = 4;
                  }
                  repeated HwTacManagePlaneSvrCfg hwTacManagePlaneSvrCfg = 1;
               }
               HwTacManagePlaneSvrCfgs hwTacManagePlaneSvrCfgs = 1;
               string sharedKey = 2;
            }
            HwTacManagePlaneCfg hwTacManagePlaneCfg = 8;
            message LoginSshUsers {
               message LoginSshUser {
                  string ftpDir = 1;
                  string loginUser = 2;
               }
               LoginSshUser loginSshUser = 1;
            }
            LoginSshUsers loginSshUsers = 9;
            message LoginUsers {
               message LoginUser {
                  string loginPassword = 1;
                  string loginUser = 2;
               }
               LoginUser loginUser = 1;
            }
            LoginUsers loginUsers = 10;
            message ManagePlaneAuthMode {
               enum FirstAuthenMode {
                  FirstAuthenMode_HWTACACS = 0;
                  FirstAuthenMode_INVALID = 1;
                  FirstAuthenMode_LOCAL = 2;
               };
               FirstAuthenMode firstAuthenMode = 1;
               enum SecondAuthenMode {
                  SecondAuthenMode_HWTACACS = 0;
                  SecondAuthenMode_INVALID = 1;
                  SecondAuthenMode_LOCAL = 2;
               };
               SecondAuthenMode secondAuthenMode = 2;
            }
            ManagePlaneAuthMode managePlaneAuthMode = 11;
            message ManagePlaneUsers {
               message ManagePlaneUser {
                  string password = 1;
                  string userName = 2;
               }
               repeated ManagePlaneUser managePlaneUser = 1;
            }
            ManagePlaneUsers managePlaneUsers = 12;
            message NvtagInnCons {
               message NvtagInnCon {
                  string apInnIfName = 1;
                  string apInnIfNumber = 2;
                  enum ApInnIfPhyType {
                     ApInnIfPhyType_ETHERNET = 0;
                     ApInnIfPhyType_GIGABITETHERNET = 1;
                     ApInnIfPhyType_XGIGABITETHERNET = 2;
                     ApInnIfPhyType_X_100GE = 3;
                     ApInnIfPhyType_X_25GE = 4;
                     ApInnIfPhyType_X_40GE = 5;
                     ApInnIfPhyType_X_50GE = 6;
                     ApInnIfPhyType_X_50X_100GE = 7;
                  };
                  ApInnIfPhyType apInnIfPhyType = 3;
                  string innIfName = 4;
                  string innIfNumber = 5;
                  enum InnIfPhyType {
                     InnIfPhyType_ETHERNET = 0;
                     InnIfPhyType_GIGABITETHERNET = 1;
                     InnIfPhyType_XGIGABITETHERNET = 2;
                     InnIfPhyType_X_100GE = 3;
                     InnIfPhyType_X_400GE = 4;
                     InnIfPhyType_X_40GE = 5;
                     InnIfPhyType_X_50GE = 6;
                     InnIfPhyType_X_50X_100GE = 7;
                  };
                  InnIfPhyType innIfPhyType = 6;
               }
               repeated NvtagInnCon nvtagInnCon = 1;
            }
            NvtagInnCons nvtagInnCons = 13;
            message NvtagRemCons {
               message NvtagRemCon {
                  string apRemIfName = 1;
                  string apRemIfNumber = 2;
                  enum ApRemIfPhyType {
                     ApRemIfPhyType_ETHERNET = 0;
                     ApRemIfPhyType_GIGABITETHERNET = 1;
                     ApRemIfPhyType_XGIGABITETHERNET = 2;
                     ApRemIfPhyType_X_100GE = 3;
                     ApRemIfPhyType_X_25GE = 4;
                     ApRemIfPhyType_X_40GE = 5;
                     ApRemIfPhyType_X_50GE = 6;
                     ApRemIfPhyType_X_50X_100GE = 7;
                  };
                  ApRemIfPhyType apRemIfPhyType = 3;
                  string innIfName = 4;
                  string innIfNumber = 5;
                  enum InnIfPhyType {
                     InnIfPhyType_ETHERNET = 0;
                     InnIfPhyType_ETHX_TRUNK = 1;
                     InnIfPhyType_GIGABITETHERNET = 2;
                     InnIfPhyType_XGIGABITETHERNET = 3;
                     InnIfPhyType_X_100GE = 4;
                     InnIfPhyType_X_400GE = 5;
                     InnIfPhyType_X_40GE = 6;
                     InnIfPhyType_X_50GE = 7;
                     InnIfPhyType_X_50X_100GE = 8;
                  };
                  InnIfPhyType innIfPhyType = 6;
               }
               repeated NvtagRemCon nvtagRemCon = 1;
            }
            NvtagRemCons nvtagRemCons = 14;
            string primaryMasterId = 15;
            uint32 priority = 16;
            message RemoteInterfaces {
               message RemoteInterface {
                  string apIfName = 1;
                  string apIfNumber = 2;
                  enum ApIfPhyType {
                     ApIfPhyType_ETHERNET = 0;
                     ApIfPhyType_GIGABITETHERNET = 1;
                     ApIfPhyType_XGIGABITETHERNET = 2;
                     ApIfPhyType_X_100GE = 3;
                     ApIfPhyType_X_40GE = 4;
                  };
                  ApIfPhyType apIfPhyType = 3;
               }
               repeated RemoteInterface remoteInterface = 1;
            }
            RemoteInterfaces remoteInterfaces = 17;
            string secondaryMasterId = 18;
            enum State {
               State_OFFLINE = 0;
               State_ONLINE = 1;
            };
            State state = 19;
            string upTime = 20;
            message VaApGlobalIfCfg {
               uint32 apStatInterval = 1;
            }
            VaApGlobalIfCfg vaApGlobalIfCfg = 21;
            message VaApIfInfos {
               message VaApIfInfo {
                  string ifName = 1;
                  enum IfStatus {
                     IfStatus_DOWN = 0;
                     IfStatus_UP = 1;
                  };
                  IfStatus ifStatus = 2;
                  enum IfType {
                     IfType_INNER = 0;
                     IfType_OUTER = 1;
                  };
                  IfType ifType = 3;
               }
               repeated VaApIfInfo vaApIfInfo = 1;
            }
            VaApIfInfos vaApIfInfos = 22;
            uint32 vaLspMinRx = 23;
            uint32 vaLspMinTx = 24;
            uint32 vaLspMulti = 25;
            message VaLspSwitchThreshold {
               uint32 minLinkNumber = 1;
            }
            VaLspSwitchThreshold vaLspSwitchThreshold = 26;
            uint32 vaTnlMinRx = 27;
            uint32 vaTnlMinTx = 28;
            uint32 vaTnlMulti = 29;
            message VaTunnels {
               message VaTunnel {
                  string expPathName = 1;
                  string tunnelName = 2;
               }
               repeated VaTunnel vaTunnel = 1;
            }
            VaTunnels vaTunnels = 30;
         }
         repeated VaAp vaAp = 1;
      }
      VaAps vaAps = 8;
      message VaExplicitPathInfos {
         message VaExplicitPathInfo {
            message ExpPathHopInfos {
               message ExpPathHopInfo {
                  string adminIp = 1;
                  uint32 hopIndex = 2;
                  string interfaceName = 3;
                  enum InterfaceValid {
                     InterfaceValid_INVALID = 0;
                     InterfaceValid_VALID = 1;
                  };
                  InterfaceValid interfaceValid = 4;
                  enum LspType {
                     LspType_HOTX_STANDBY = 0;
                     LspType_PRIMARY = 1;
                  };
                  LspType lspType = 5;
               }
               repeated ExpPathHopInfo expPathHopInfo = 1;
            }
            ExpPathHopInfos expPathHopInfos = 1;
            message ExpPathTunnelInfos {
               message ExpPathTunnelInfo {
                  string tunnelName = 1;
               }
               repeated ExpPathTunnelInfo expPathTunnelInfo = 1;
            }
            ExpPathTunnelInfos expPathTunnelInfos = 2;
            string pathName = 3;
            uint32 referedCount = 4;
         }
         repeated VaExplicitPathInfo vaExplicitPathInfo = 1;
      }
      VaExplicitPathInfos vaExplicitPathInfos = 9;
      message VaExplicitPaths {
         message VaExplicitPath {
            message ExplicitPathHopLsps {
               message ExplicitPathHopLsp {
                  message ExplicitPathHops {
                     message ExplicitPathHop {
                        message ExplicitPathHopOutIfs {
                           message ExplicitPathHopOutIf {
                              string explicitPathHopOutIf = 1;
                           }
                           repeated ExplicitPathHopOutIf explicitPathHopOutIf = 1;
                        }
                        ExplicitPathHopOutIfs explicitPathHopOutIfs = 1;
                        uint32 vaExplicitPathHopIndex = 2;
                        string vaExplicitPathHopIpAddr = 3;
                     }
                     repeated ExplicitPathHop explicitPathHop = 1;
                  }
                  ExplicitPathHops explicitPathHops = 1;
                  enum LspType {
                     LspType_HOTX_STANDBY = 0;
                     LspType_PRIMARY = 1;
                  };
                  LspType lspType = 2;
               }
               repeated ExplicitPathHopLsp explicitPathHopLsp = 1;
            }
            ExplicitPathHopLsps explicitPathHopLsps = 1;
            string pathName = 2;
         }
         repeated VaExplicitPath vaExplicitPath = 1;
      }
      VaExplicitPaths vaExplicitPaths = 10;
      message VaInnerIfs {
         message VaInnerIf {
            string ifName = 1;
            enum InnerIfType {
               InnerIfType_TOAP = 0;
               InnerIfType_TOMASTER = 1;
            };
            InnerIfType innerIfType = 2;
         }
         repeated VaInnerIf vaInnerIf = 1;
      }
      VaInnerIfs vaInnerIfs = 11;
      message VaLspP2MpInfos {
         message VaLspP2MpInfo {
            uint32 lspId = 1;
            string s2lDestAddress = 2;
            uint32 subGroupId = 3;
            uint32 tunnelId = 4;
            message VaP2MpHopInfos {
               message VaP2MpHopInfo {
                  string hopAdminIp = 1;
                  uint32 inLabel = 2;
                  uint32 lspId = 3;
                  uint32 outLabel = 4;
                  string s2lDestAddress = 5;
                  uint32 tunnelId = 6;
                  message VaP2MpHopIfs {
                     message VaP2MpHopIf {
                        string hopAdminIp = 1;
                        string ifName = 2;
                        uint32 lspId = 3;
                        string s2lDestAddress = 4;
                        uint32 tunnelId = 5;
                        enum VpDirection {
                           VpDirection_IN = 0;
                           VpDirection_OUT = 1;
                        };
                        VpDirection vpDirection = 6;
                     }
                     repeated VaP2MpHopIf vaP2mpHopIf = 1;
                  }
                  VaP2MpHopIfs vaP2mpHopIfs = 7;
               }
               repeated VaP2MpHopInfo vaP2mpHopInfo = 1;
            }
            VaP2MpHopInfos vaP2mpHopInfos = 5;
         }
         repeated VaLspP2MpInfo vaLspP2mpInfo = 1;
      }
      VaLspP2MpInfos vaLspP2mpInfos = 12;
      message VaMasterCommon {
         string adminIp = 1;
         string controltunnelKeychainName = 2;
         string openflowKeychainName = 3;
      }
      VaMasterCommon vaMasterCommon = 13;
      message VaNtpAuthKeys {
         message VaNtpAuthKey {
            bool isNtpEnable = 1;
            uint32 keyId = 2;
            enum Mode {
               Mode_HMACX_SHA256 = 0;
            };
            Mode mode = 3;
            string password = 4;
         }
         VaNtpAuthKey vaNtpAuthKey = 1;
      }
      VaNtpAuthKeys vaNtpAuthKeys = 14;
      message VaP2MpTnlBfd {
         uint32 vaBfdMinRx = 1;
         uint32 vaBfdMinTx = 2;
         uint32 vaBfdMulti = 3;
      }
      VaP2MpTnlBfd vaP2mpTnlBfd = 15;
      message VaTunnelP2MpInfos {
         message VaTunnelP2MpInfo {
            string p2mpId = 1;
            string rootIp = 2;
            uint32 sessionId = 3;
            enum State {
               State_DOWN = 0;
               State_GRACEFUL_SWITCH = 1;
               State_UP = 2;
            };
            State state = 4;
            message VaP2MpTunnelLsps {
               message VaP2MpTunnelLsp {
                  uint32 lspId = 1;
                  enum LspState {
                     LspState_DOWN = 0;
                     LspState_UP = 1;
                  };
                  LspState lspState = 2;
                  enum LspType {
                     LspType_HOTSTANDBYX_MAIN = 0;
                     LspType_HOTSTANDBYX_MODIFY = 1;
                     LspType_PRIMARYX_MAIN = 2;
                     LspType_PRIMARYX_MODIFY = 3;
                  };
                  LspType lspType = 3;
                  uint32 sessionId = 4;
                  message VaP2MpLeafs {
                     message VaP2MpLeaf {
                        string leafAdminIp = 1;
                        enum LeafState {
                           LeafState_DOWN = 0;
                           LeafState_GRACEFUL_DELETE = 1;
                           LeafState_UP = 2;
                        };
                        LeafState leafState = 2;
                        uint32 lspId = 3;
                        uint32 sessionId = 4;
                     }
                     repeated VaP2MpLeaf vaP2mpLeaf = 1;
                  }
                  VaP2MpLeafs vaP2mpLeafs = 5;
               }
               repeated VaP2MpTunnelLsp vaP2mpTunnelLsp = 1;
            }
            VaP2MpTunnelLsps vaP2mpTunnelLsps = 5;
         }
         repeated VaTunnelP2MpInfo vaTunnelP2mpInfo = 1;
      }
      VaTunnelP2MpInfos vaTunnelP2mpInfos = 16;
      message VaTunnelP2PInfos {
         message VaTunnelP2PInfo {
            enum ActiveVpType {
               ActiveVpType_INVALID = 0;
               ActiveVpType_PROCTECTION = 1;
               ActiveVpType_WORKING = 2;
            };
            ActiveVpType activeVpType = 1;
            uint32 age = 2;
            string destId = 3;
            string expPathName = 4;
            uint32 groupId = 5;
            enum LinkState {
               LinkState_AVAILABLE = 0;
               LinkState_UNAVAILABLE = 1;
            };
            LinkState linkState = 6;
            message ProtectionValsp {
               message ValspHops {
                  message ValspHop {
                     string backwardInLable = 1;
                     string backwardOutLable = 2;
                     string forwardInLable = 3;
                     string forwardOutLable = 4;
                     message HopIfs {
                        message HopIf {
                           enum BackwardVpDir {
                              BackwardVpDir_IN = 0;
                              BackwardVpDir_INVALID = 1;
                              BackwardVpDir_OUT = 2;
                           };
                           BackwardVpDir backwardVpDir = 1;
                           enum ForwardVpDir {
                              ForwardVpDir_IN = 0;
                              ForwardVpDir_INVALID = 1;
                              ForwardVpDir_OUT = 2;
                           };
                           ForwardVpDir forwardVpDir = 2;
                           uint32 ifIndex = 3;
                           string ifName = 4;
                           string macAddr = 5;
                           uint32 mtu = 6;
                        }
                        repeated HopIf hopIf = 1;
                     }
                     HopIfs hopIfs = 5;
                     uint32 hopIndex = 6;
                     string nodeId = 7;
                     enum Role {
                        Role_EGRESS = 0;
                        Role_INGRESS = 1;
                        Role_TRANSIENT = 2;
                     };
                     Role role = 8;
                  }
                  repeated ValspHop valspHop = 1;
               }
               ValspHops valspHops = 1;
            }
            ProtectionValsp protectionValsp = 7;
            string sourceId = 8;
            enum State {
               State_DOWN = 0;
               State_GRACEFULX_SWITCH = 1;
               State_UP = 2;
            };
            State state = 9;
            string tunnelName = 10;
            message WorkingValsp {
               message ValspHops {
                  message ValspHop {
                     string backwardInLable = 1;
                     string backwardOutLable = 2;
                     string forwardInLable = 3;
                     string forwardOutLable = 4;
                     message HopIfs {
                        message HopIf {
                           enum BackwardVpDir {
                              BackwardVpDir_IN = 0;
                              BackwardVpDir_INVALID = 1;
                              BackwardVpDir_OUT = 2;
                           };
                           BackwardVpDir backwardVpDir = 1;
                           enum ForwardVpDir {
                              ForwardVpDir_IN = 0;
                              ForwardVpDir_INVALID = 1;
                              ForwardVpDir_OUT = 2;
                           };
                           ForwardVpDir forwardVpDir = 2;
                           uint32 ifIndex = 3;
                           string ifName = 4;
                           string macAddr = 5;
                           uint32 mtu = 6;
                        }
                        repeated HopIf hopIf = 1;
                     }
                     HopIfs hopIfs = 5;
                     uint32 hopIndex = 6;
                     string nodeId = 7;
                     enum Role {
                        Role_EGRESS = 0;
                        Role_INGRESS = 1;
                        Role_TRANSIENT = 2;
                     };
                     Role role = 8;
                  }
                  repeated ValspHop valspHop = 1;
               }
               ValspHops valspHops = 1;
            }
            WorkingValsp workingValsp = 11;
         }
         repeated VaTunnelP2PInfo vaTunnelP2pInfo = 1;
      }
      VaTunnelP2PInfos vaTunnelP2pInfos = 17;
      message VaTunnleStatisInfos {
         message VaTunnleStatisInfo {
            uint32 vaLspEgressPointNum = 1;
            uint32 vaLspIngressPointDownNum = 2;
            uint32 vaLspIngressPointNum = 3;
            uint32 vaLspIngressPointUpNum = 4;
            uint32 vaLspTransitPointNum = 5;
            uint32 vaTunnleDownNum = 6;
            uint32 vaTunnleNum = 7;
            uint32 vaTunnleUpNum = 8;
         }
         VaTunnleStatisInfo vaTunnleStatisInfo = 1;
      }
      VaTunnleStatisInfos vaTunnleStatisInfos = 18;
      message VaccessOuterIfs {
         message VaccessOuterIf {
            bool apOfflineTriggerIfDown = 1;
            uint32 apOnlineTreegerUpDelay = 2;
            string ifName = 3;
         }
         repeated VaccessOuterIf vaccessOuterIf = 1;
      }
      VaccessOuterIfs vaccessOuterIfs = 19;
      message Global {
         string admin_ip_address = 1 [json_name = "admin-ip-address"];
         string control_tunnel_keychain_name = 2 [json_name = "control-tunnel-keychain-name"];
      }
      Global global = 20 [json_name = "global"];
      message Aps {
         message Ap {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string description = 2 [json_name = "description"];
            string admin_ip_address = 3 [json_name = "admin-ip-address"];
            string esn = 4 [json_name = "esn"];
            string primary_master_ip = 5 [json_name = "primary-master-ip"];
            enum State {
               State_OFFLINE = 0;
               State_ONLINE = 1;
            };
            State state = 6 [json_name = "state"];
            string up_time = 7 [json_name = "up-time"];
            message ApInterfaceInfos {
               message ApInterfaceInfo {
                  string interface_name = 1 [json_name = "interface-name"];
                  enum InterfaceStatus {
                     InterfaceStatus_DOWN = 0;
                     InterfaceStatus_UP = 1;
                  };
                  InterfaceStatus interface_status = 2 [json_name = "interface-status"];
                  enum InterfaceType {
                     InterfaceType_INNER = 0;
                     InterfaceType_OUTER = 1;
                  };
                  InterfaceType interface_type = 3 [json_name = "interface-type"];
               }
               repeated ApInterfaceInfo ap_interface_info = 1 [json_name = "ap-interface-info"];
            }
            ApInterfaceInfos ap_interface_infos = 8 [json_name = "ap-interface-infos"];
            message Driver {
               message GlobalAttributes {
                  string device_name = 1 [json_name = "device-name"];
                  enum EnergyMode {
                     EnergyMode_BASIC = 0;
                     EnergyMode_STANDARD = 1;
                     EnergyMode_DEEP = 2;
                     EnergyMode_OPTIMAL = 3;
                     EnergyMode_NOTX_SUPPORT = 4;
                  };
                  EnergyMode energy_mode = 2 [json_name = "energy-mode"];
                  enum EnergyModeStatus {
                     EnergyModeStatus_BASIC = 0;
                     EnergyModeStatus_STANDARD = 1;
                     EnergyModeStatus_DEEP = 2;
                     EnergyModeStatus_OPTIMAL = 3;
                     EnergyModeStatus_NOTX_SUPPORT = 4;
                  };
                  EnergyModeStatus energy_mode_status = 3 [json_name = "energy-mode-status"];
                  enum AutoUpgradeModel {
                     AutoUpgradeModel_OPEN = 0;
                     AutoUpgradeModel_CLOSE = 1;
                  };
                  AutoUpgradeModel auto_upgrade_model = 4 [json_name = "auto-upgrade-model"];
                  enum HighTempSwitch {
                     HighTempSwitch_NO = 0;
                     HighTempSwitch_YES = 1;
                  };
                  HighTempSwitch high_temp_switch = 5 [json_name = "high-temp-switch"];
                  enum HighTempSwitchStatus {
                     HighTempSwitchStatus_NO = 0;
                     HighTempSwitchStatus_YES = 1;
                  };
                  HighTempSwitchStatus high_temp_switch_status = 6 [json_name = "high-temp-switch-status"];
               }
               GlobalAttributes global_attributes = 1 [json_name = "global-attributes"];
               message DeviceInfos {
                  message DeviceInfo {
                     string slot_id = 1 [json_name = "slot-id"];
                     string hardware_type = 2 [json_name = "hardware-type"];
                     enum Online {
                        Online_ABSENT = 0;
                        Online_PRESENT = 1;
                        Online_OFFLINE = 2;
                        Online_UNKNOWN = 3;
                     };
                     Online online = 3 [json_name = "online"];
                     enum Register {
                        Register_UNREGISTERED = 0;
                        Register_REGISTERED = 1;
                        Register_NA = 2;
                     };
                     Register register = 4 [json_name = "register"];
                     enum RunningStatus {
                        RunningStatus_ABNORMAL = 0;
                        RunningStatus_NORMAL = 1;
                        RunningStatus_ISOLATED = 2;
                        RunningStatus_NOTX_INSTALL = 3;
                        RunningStatus_WRONGX_TYPE = 4;
                        RunningStatus_NA = 9;
                     };
                     RunningStatus running_status = 5 [json_name = "running-status"];
                     enum Role {
                        INVALID_ENUM_VALUE_Role = 0;
                        Role_MMB = 1;
                        Role_PLMB = 2;
                        Role_MB = 4;
                        Role_LC = 5;
                        Role_NET = 6;
                        Role_ICU = 7;
                        Role_ECU = 8;
                        Role_OTHER = 200;
                        Role_NA = 255;
                     };
                     Role role = 6 [json_name = "role"];
                     enum Primary {
                        Primary_MASTER = 0;
                        Primary_SLAVE = 1;
                        Primary_NA = 2;
                        Primary_SYSTEMX_MASTER = 3;
                        Primary_SYSTEMX_SLAVE = 4;
                     };
                     Primary primary = 7 [json_name = "primary"];
                  }
                  repeated DeviceInfo device_info = 1 [json_name = "device-info"];
               }
               DeviceInfos device_infos = 2 [json_name = "device-infos"];
               message Temperatures {
                  message Temperature {
                     string position = 1 [json_name = "position"];
                     uint32 i2c = 2 [json_name = "i2c"];
                     string address = 3 [json_name = "address"];
                     uint32 channel = 4 [json_name = "channel"];
                     string pcb_name = 5 [json_name = "pcb-name"];
                     enum State {
                        State_NORMAL = 0;
                        State_MINOR = 1;
                        State_MAJOR = 2;
                        State_FATAL = 3;
                        State_UNKNOWN = 4;
                        State_UNSUPPORTED = 5;
                     };
                     State state = 6 [json_name = "state"];
                     int32 current_temperature = 7 [json_name = "current-temperature"];
                     uint32 minor_alarm_threshold = 8 [json_name = "minor-alarm-threshold"];
                     uint32 major_alarm_threshold = 9 [json_name = "major-alarm-threshold"];
                     uint32 fatal_alarm_threshold = 10 [json_name = "fatal-alarm-threshold"];
                     int32 fan_tmax = 11 [json_name = "fan-tmax"];
                     int32 fan_tmin = 12 [json_name = "fan-tmin"];
                  }
                  repeated Temperature temperature = 1 [json_name = "temperature"];
               }
               Temperatures temperatures = 3 [json_name = "temperatures"];
               message Voltages {
                  message Voltage {
                     string position = 1 [json_name = "position"];
                     uint32 i2c = 2 [json_name = "i2c"];
                     string address = 3 [json_name = "address"];
                     uint32 channel = 4 [json_name = "channel"];
                     string pcb_name = 5 [json_name = "pcb-name"];
                     enum State {
                        State_NORMAL = 0;
                        State_MINOR = 1;
                        State_MAJOR = 2;
                        State_FATAL = 3;
                        State_UNKNOWN = 4;
                        State_UNSUPPORTED = 5;
                     };
                     State state = 6 [json_name = "state"];
                     string current_voltage = 7 [json_name = "current-voltage"];
                     string required_voltage = 8 [json_name = "required-voltage"];
                     string major_low_threshold = 9 [json_name = "major-low-threshold"];
                     string low_threshold = 10 [json_name = "low-threshold"];
                     string major_high_threshold = 11 [json_name = "major-high-threshold"];
                     string high_threshold = 12 [json_name = "high-threshold"];
                     string voltage_ratio = 13 [json_name = "voltage-ratio"];
                  }
                  repeated Voltage voltage = 1 [json_name = "voltage"];
               }
               Voltages voltages = 4 [json_name = "voltages"];
               message PowerElectronicLabels {
                  message PowerElectronicLabel {
                     string slot_id = 1 [json_name = "slot-id"];
                     string archives_info_version = 2 [json_name = "archives-info-version"];
                     string board_type = 3 [json_name = "board-type"];
                     string bar_code = 4 [json_name = "bar-code"];
                     string item = 5 [json_name = "item"];
                     string elb_description = 6 [json_name = "elb-description"];
                     string manufactured = 7 [json_name = "manufactured"];
                     string vendor_name = 8 [json_name = "vendor-name"];
                     string issue_number = 9 [json_name = "issue-number"];
                     string clei_code = 10 [json_name = "clei-code"];
                     string bom = 11 [json_name = "bom"];
                     string model = 12 [json_name = "model"];
                     string elabel_extend = 13 [json_name = "elabel-extend"];
                     string elabel_version = 14 [json_name = "elabel-version"];
                  }
                  repeated PowerElectronicLabel power_electronic_label = 1 [json_name = "power-electronic-label"];
               }
               PowerElectronicLabels power_electronic_labels = 5 [json_name = "power-electronic-labels"];
               message Powers {
                  message Power {
                     string slot_id = 1 [json_name = "slot-id"];
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_DC = 1;
                        Mode_AC = 2;
                        Mode_HVDC = 3;
                        Mode_UNKNOWN = 4;
                     };
                     Mode mode = 2 [json_name = "mode"];
                     enum Present {
                        Present_NO = 0;
                        Present_YES = 1;
                     };
                     Present present = 3 [json_name = "present"];
                     string power_state = 4 [json_name = "power-state"];
                     string normal_number = 5 [json_name = "normal-number"];
                     string abnormal_number = 6 [json_name = "abnormal-number"];
                     enum MonitorCableState {
                        MonitorCableState_UNX_PLUG = 0;
                        MonitorCableState_PLUG = 1;
                     };
                     MonitorCableState monitor_cable_state = 7 [json_name = "monitor-cable-state"];
                     message PowerEnvironments {
                        message PowerEnvironment {
                           uint32 pem_index = 1 [json_name = "pem-index"];
                           string voltage_value = 2 [json_name = "voltage-value"];
                           string electrical_value = 3 [json_name = "electrical-value"];
                           string last_down_time = 4 [json_name = "last-down-time"];
                        }
                        repeated PowerEnvironment power_environment = 1 [json_name = "power-environment"];
                     }
                     PowerEnvironments power_environments = 8 [json_name = "power-environments"];
                  }
                  repeated Power power = 1 [json_name = "power"];
               }
               Powers powers = 6 [json_name = "powers"];
               message Fans {
                  message FanAttribute {
                     enum Workmode {
                        INVALID_ENUM_VALUE_Workmode = 0;
                        Workmode_AUTO = 1;
                        Workmode_MANUAL = 2;
                        Workmode_SILENT = 4;
                        Workmode_FULL = 5;
                        Workmode_ANTIX_CORROSIVEX_MODE = 8;
                        Workmode_MINIMUMX_PERCENT = 9;
                        Workmode_DENOISE = 11;
                     };
                     Workmode workmode = 1 [json_name = "workmode"];
                     uint32 speed = 2 [json_name = "speed"];
                  }
                  FanAttribute fan_attribute = 1 [json_name = "fan-attribute"];
                  message FanStatuss {
                     message FanStatus {
                        string position = 1 [json_name = "position"];
                        enum Workmode {
                           INVALID_ENUM_VALUE_Workmode = 0;
                           Workmode_AUTO = 1;
                           Workmode_MANUAL = 2;
                           Workmode_SILENT = 4;
                           Workmode_FULL = 5;
                           Workmode_ANTIX_CORROSIVEX_MODE = 8;
                           Workmode_MINIMUMX_PERCENT = 9;
                           Workmode_DENOISE = 11;
                        };
                        Workmode workmode = 2 [json_name = "workmode"];
                        enum Present {
                           Present_NO = 0;
                           Present_YES = 1;
                        };
                        Present present = 3 [json_name = "present"];
                        enum Register {
                           Register_NO = 0;
                           Register_YES = 1;
                        };
                        Register register = 4 [json_name = "register"];
                        uint32 fan_number = 5 [json_name = "fan-number"];
                        string fan_global_speed = 6 [json_name = "fan-global-speed"];
                     }
                     repeated FanStatus fan_status = 1 [json_name = "fan-status"];
                  }
                  FanStatuss fan_statuss = 2 [json_name = "fan-statuss"];
               }
               Fans fans = 7 [json_name = "fans"];
               message AreaEnergyinfos {
                  message AreaEnergyinfo {
                     string chassis_position = 1 [json_name = "chassis-position"];
                     uint32 area_id = 2 [json_name = "area-id"];
                     string area_rated_power = 3 [json_name = "area-rated-power"];
                     string area_used_power = 4 [json_name = "area-used-power"];
                     string area_left_power = 5 [json_name = "area-left-power"];
                     message BoardEnergys {
                        message BoardEnergy {
                           string position = 1 [json_name = "position"];
                           string rated_power = 2 [json_name = "rated-power"];
                        }
                        repeated BoardEnergy board_energy = 1 [json_name = "board-energy"];
                     }
                     BoardEnergys board_energys = 6 [json_name = "board-energys"];
                  }
                  repeated AreaEnergyinfo area_energyinfo = 1 [json_name = "area-energyinfo"];
               }
               AreaEnergyinfos area_energyinfos = 8 [json_name = "area-energyinfos"];
            }
            Driver driver = 9 [json_name = "driver"];
            message PicRemote {
               message GlobalErrorMonitor {
                  bool crc_enable = 1 [json_name = "crc-enable"];
                  bool symbol_enable = 2 [json_name = "symbol-enable"];
                  bool input_enable = 3 [json_name = "input-enable"];
                  bool output_enable = 4 [json_name = "output-enable"];
                  bool sdh_enable = 5 [json_name = "sdh-enable"];
                  bool badbytes_enable = 6 [json_name = "badbytes-enable"];
                  bool optical_enable = 7 [json_name = "optical-enable"];
                  bool tx_pause_enable = 8 [json_name = "tx-pause-enable"];
               }
               GlobalErrorMonitor global_error_monitor = 1 [json_name = "global-error-monitor"];
               message TadTransAlarmIfDowns {
                  message TadTransAlarmIfDown {
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_WAN = 1;
                     };
                     PortType port_type = 1 [json_name = "port-type"];
                     enum AlarmType {
                        AlarmType_AUAIS = 0;
                        AlarmType_B3TCA = 1;
                        AlarmType_LAIS = 2;
                        AlarmType_LOF = 3;
                        AlarmType_LOM = 4;
                        AlarmType_LOP = 5;
                        AlarmType_LOS = 6;
                        AlarmType_LRDI = 7;
                        AlarmType_LREI = 8;
                        AlarmType_OOF = 9;
                        AlarmType_PAIS = 10;
                        AlarmType_PRDI = 11;
                        AlarmType_PREI = 12;
                        AlarmType_PPLM = 13;
                        AlarmType_RDOOL = 14;
                        AlarmType_RROOL = 15;
                        AlarmType_SDBERE = 16;
                        AlarmType_SFBERE = 17;
                        AlarmType_TROOL = 18;
                        AlarmType_PUNEQ = 19;
                        AlarmType_LCD = 20;
                        AlarmType_B1TCA = 40;
                        AlarmType_B2TCA = 41;
                     };
                     AlarmType alarm_type = 2 [json_name = "alarm-type"];
                     bool if_down = 3 [json_name = "if-down"];
                  }
                  repeated TadTransAlarmIfDown tad_trans_alarm_if_down = 1 [json_name = "tad-trans-alarm-if-down"];
               }
               TadTransAlarmIfDowns tad_trans_alarm_if_downs = 2 [json_name = "tad-trans-alarm-if-downs"];
            }
            PicRemote pic_remote = 10 [json_name = "pic-remote"];
            message Nvtag {
               message InnerConnects {
                  message InnerConnect {
                     string ap_inner_interface = 1 [json_name = "ap-inner-interface"];
                     string interface_name = 2 [json_name = "interface-name"];
                  }
                  repeated InnerConnect inner_connect = 1 [json_name = "inner-connect"];
               }
               InnerConnects inner_connects = 1 [json_name = "inner-connects"];
               message RemoteConnects {
                  message RemoteConnect {
                     string ap_remote_interface = 1 [json_name = "ap-remote-interface"];
                     string interface_name = 2 [json_name = "interface-name"];
                  }
                  repeated RemoteConnect remote_connect = 1 [json_name = "remote-connect"];
               }
               RemoteConnects remote_connects = 2 [json_name = "remote-connects"];
            }
            Nvtag nvtag = 11 [json_name = "nvtag"];
            message Snmp {
               message SourceInterfaces {
                  message SourceInterface {
                     string interface_name = 1 [json_name = "interface-name"];
                  }
                  repeated SourceInterface source_interface = 1 [json_name = "source-interface"];
               }
               SourceInterfaces source_interfaces = 1 [json_name = "source-interfaces"];
               message Ipv6Sources {
                  message Ipv6Source {
                     string src_ipv6_address = 1 [json_name = "src-ipv6-address"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                  }
                  repeated Ipv6Source ipv6_source = 1 [json_name = "ipv6-source"];
               }
               Ipv6Sources ipv6_sources = 2 [json_name = "ipv6-sources"];
               message AllInterface {
                  bool all_ipv4_interface = 1 [json_name = "all-ipv4-interface"];
                  bool all_ipv6_interface = 2 [json_name = "all-ipv6-interface"];
               }
               AllInterface all_interface = 3 [json_name = "all-interface"];
            }
            Snmp snmp = 12 [json_name = "snmp"];
         }
         repeated Ap ap = 1 [json_name = "ap"];
      }
      Aps aps = 21 [json_name = "aps"];
      ImportAdminIps import_admin_ips = 22 [json_name = "import-admin-ips"];
      ImportProtocols import_protocols = 23 [json_name = "import-protocols"];
   }
   Master master = 3 [json_name = "master"];
   message VAccessCommon {
      enum Role {
         Role_AP = 0;
         Role_DEFAULT = 1;
         Role_MASTER = 2;
      };
      Role role = 1;
      bool vaccessEnable = 2;
      bool vaccessPortExtEnable = 3;
   }
   VAccessCommon vAccessCommon = 4;
   message Vasnmp {
      message NvAgentCfg {
         bool agentEnable = 1;
      }
      NvAgentCfg nvAgentCfg = 1;
      message NvCommunitys {
         message NvCommunity {
            enum AccessRight {
               AccessRight_READ = 0;
               AccessRight_WRITE = 1;
            };
            AccessRight accessRight = 1;
            string communityName = 2;
            string mibViewName = 3;
         }
         repeated NvCommunity nvCommunity = 1;
      }
      NvCommunitys nvCommunitys = 2;
      message NvEngine {
         enum Version {
            Version_NONE = 0;
            Version_V1 = 1;
            Version_V1V2C = 2;
            Version_V2C = 3;
         };
         Version version = 1;
      }
      NvEngine nvEngine = 3;
      message NvMibViews {
         message NvMibView {
            string subtree = 1;
            enum Type {
               Type_EXCLUDED = 0;
               Type_INCLUDED = 1;
            };
            Type type = 2;
            string viewName = 3;
         }
         repeated NvMibView nvMibView = 1;
      }
      NvMibViews nvMibViews = 4;
      message NvSystemCfg {
         bool extErrCodeEnable = 1;
      }
      NvSystemCfg nvSystemCfg = 5;
      message NvTargetHosts {
         message NvTargetHost {
            string address = 1;
            bool extVb = 2;
            string nmsName = 3;
            enum NotifyType {
               NotifyType_TRAP = 0;
            };
            NotifyType notifyType = 4;
            bool privateNetmanager = 5;
            enum SecurityModel {
               SecurityModel_V1 = 0;
               SecurityModel_V2C = 1;
            };
            SecurityModel securityModel = 6;
            string securityName = 7;
         }
         repeated NvTargetHost nvTargetHost = 1;
      }
      NvTargetHosts nvTargetHosts = 6;
   }
   Vasnmp vasnmp = 5;
   message Global {
      bool enable = 1 [json_name = "enable"];
      bool port_extend_enable = 2 [json_name = "port-extend-enable"];
      enum Role {
         Role_DEFAULT = 0;
         Role_MASTER = 1;
         Role_AP = 2;
      };
      Role role = 3 [json_name = "role"];
   }
   Global global = 6 [json_name = "global"];
   message Snmp {
      message System {
         bool agent_enable = 1 [json_name = "agent-enable"];
         bool ext_err_code_enable = 2 [json_name = "ext-err-code-enable"];
      }
      System system = 1 [json_name = "system"];
      message Engine {
         enum Version {
            Version_NONE = 0;
            Version_V1 = 1;
            Version_V2C = 2;
            Version_V1V2C = 3;
            Version_V3 = 4;
            Version_V1V3 = 5;
            Version_V2CV3 = 6;
            Version_ALL = 7;
         };
         Version version = 1 [json_name = "version"];
      }
      Engine engine = 2 [json_name = "engine"];
      message MibViews {
         message MibView {
            string view_name = 1 [json_name = "view-name"];
            string sub_tree = 2 [json_name = "sub-tree"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_INCLUDED = 1;
               Type_EXCLUDED = 2;
            };
            Type type = 3 [json_name = "type"];
         }
         repeated MibView mib_view = 1 [json_name = "mib-view"];
      }
      MibViews mib_views = 3 [json_name = "mib-views"];
      message Communitys {
         message Community {
            string index = 1 [json_name = "index"];
            string name = 2 [json_name = "name"];
            enum AccessRight {
               AccessRight_READ = 0;
               AccessRight_WRITE = 1;
            };
            AccessRight access_right = 3 [json_name = "access-right"];
            string view_name = 4 [json_name = "view-name"];
         }
         repeated Community community = 1 [json_name = "community"];
      }
      Communitys communitys = 4 [json_name = "communitys"];
      message TargetHosts {
         message TargetHost {
            string nms_name = 1 [json_name = "nms-name"];
            string address = 2 [json_name = "address"];
            enum NotifyType {
               INVALID_ENUM_VALUE_NotifyType = 0;
               NotifyType_TRAP = 1;
            };
            NotifyType notify_type = 3 [json_name = "notify-type"];
            bool private_netmanager = 4 [json_name = "private-netmanager"];
            bool ext_vb = 5 [json_name = "ext-vb"];
            message Params_V1 {
               string security_name_v1 = 1 [json_name = "security-name-v1"];
            }
            message Params_V2C {
               string security_name_v2c = 1 [json_name = "security-name-v2c"];
            }
            message Params_Usm {
               string usm_name = 1 [json_name = "usm-name"];
               enum SecurityLevel {
                  INVALID_ENUM_VALUE_SecurityLevel = 0;
                  SecurityLevel_NOAUTHNOPRIV = 1;
                  SecurityLevel_AUTHENTICATION = 2;
                  SecurityLevel_PRIVACY = 3;
               };
               SecurityLevel security_level = 2 [json_name = "security-level"];
            }
            oneof Params {
               Params_V1 params_v1 = 6 [json_name = "v1"];
               Params_V2C params_v2c = 7 [json_name = "v2c"];
               Params_Usm params_usm = 8 [json_name = "usm"];
            }
         }
         repeated TargetHost target_host = 1 [json_name = "target-host"];
      }
      TargetHosts target_hosts = 5 [json_name = "target-hosts"];
      message UsmUsers {
         message UsmUser {
            string user_name = 1 [json_name = "user-name"];
            string group_name = 2 [json_name = "group-name"];
            enum AuthProtocol {
               AuthProtocol_NOAUTH = 0;
               AuthProtocol_MD5 = 1;
               AuthProtocol_SHA = 2;
               AuthProtocol_SHA2X_224 = 5;
               AuthProtocol_SHA2X_256 = 6;
               AuthProtocol_SHA2X_384 = 7;
               AuthProtocol_SHA2X_512 = 8;
            };
            AuthProtocol auth_protocol = 3 [json_name = "auth-protocol"];
            string auth_key = 4 [json_name = "auth-key"];
            enum PrivProtocol {
               PrivProtocol_NOPRIV = 0;
               PrivProtocol_DES56 = 1;
               PrivProtocol_AES128 = 2;
               PrivProtocol_AES192 = 3;
               PrivProtocol_AES256 = 4;
               PrivProtocol_X_3DES168 = 5;
            };
            PrivProtocol priv_protocol = 5 [json_name = "priv-protocol"];
            string priv_key = 6 [json_name = "priv-key"];
         }
         repeated UsmUser usm_user = 1 [json_name = "usm-user"];
      }
      UsmUsers usm_users = 6 [json_name = "usm-users"];
      message V3Groups {
         message V3Group {
            string group_name = 1 [json_name = "group-name"];
            enum SecurityLevel {
               INVALID_ENUM_VALUE_SecurityLevel = 0;
               SecurityLevel_NOAUTHNOPRIV = 1;
               SecurityLevel_AUTHENTICATION = 2;
               SecurityLevel_PRIVACY = 3;
            };
            SecurityLevel security_level = 2 [json_name = "security-level"];
            string read_view_name = 3 [json_name = "read-view-name"];
            string write_view_name = 4 [json_name = "write-view-name"];
            string notify_view_name = 5 [json_name = "notify-view-name"];
         }
         repeated V3Group v3_group = 1 [json_name = "v3-group"];
      }
      V3Groups v3_groups = 7 [json_name = "v3-groups"];
   }
   Snmp snmp = 7 [json_name = "snmp"];
}


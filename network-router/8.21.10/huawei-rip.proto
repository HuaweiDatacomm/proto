syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-rip
// revision 2020-06-17
// revision 2020-03-23
// revision 2020-03-09
// revision 2020-03-03
// revision 2020-02-14
// revision 2020-02-04
// revision 2020-01-14
// revision 2020-01-03
// revision 2019-12-16
// revision 2019-04-04
// namespace urn:huawei:yang:huawei-rip

package huawei_rip;

message Rip {
   message Interfaces {
      message Interface {
         message Authentication {
            enum AuthenticationType {
               AuthenticationType_HMACX_SHA256 = 0;
               AuthenticationType_HUAWEI = 1;
               AuthenticationType_MD5_KEYID = 2;
               AuthenticationType_NONE = 3;
               AuthenticationType_SIMPLE = 4;
            };
            AuthenticationType authenticationType = 1;
            uint32 keyId = 2;
            string passwordKey = 3;
            string simplePassword = 4;
         }
         Authentication authentication = 1;
         message BfdIntfStats {
         }
         BfdIntfStats bfdIntfStats = 2;
         uint32 input = 3;
         string interfaceName = 4;
         message IntfBFD {
            uint32 bfdDetectMultiplierInterval = 1;
            uint32 bfdMinRxInterval = 2;
            uint32 bfdMinTxInterval = 3;
            enum BfdType {
               BfdType_BLOCK = 0;
               BfdType_DYNAMIC = 1;
               BfdType_NONE = 2;
               BfdType_STATIC = 3;
            };
            BfdType bfdType = 4;
         }
         IntfBFD intfBFD = 5;
         message IntfStatisticss {
            message IntfStatistics {
               uint32 authenticationFailed = 1;
               string interfaceIPAddress = 2;
               uint32 packetSendFailed = 3;
               uint32 packetsSent = 4;
               uint32 processId = 5;
               uint32 receivedBadPackets = 6;
               uint32 receivedBadRoutes = 7;
               uint32 receivedRespose = 8;
               uint32 receivedRoutes = 9;
               uint32 requestIgnored = 10;
               uint32 requestPacketSent = 11;
               uint32 requestReceived = 12;
               uint32 responseIgnored = 13;
               uint32 responsePacketSent = 14;
               uint32 routesSent = 15;
               uint32 updatesSent = 16;
            }
            repeated IntfStatistics intfStatistics = 1;
         }
         IntfStatisticss intfStatisticss = 6;
         message Metric {
            string aclName = 1;
            uint32 aclNumber = 2;
            string ipPrefixName = 3;
            uint32 metricIn = 4;
            enum MetricInFltr {
               MetricInFltr_ACL = 0;
               MetricInFltr_IP_PREFIX = 1;
               MetricInFltr_NONE = 2;
            };
            MetricInFltr metricInFltr = 5;
            string metricInaclName = 6;
            uint32 metricInaclNumber = 7;
            string metricInipPrefixName = 8;
            uint32 metricOut = 9;
            enum MetricOutFltr {
               MetricOutFltr_ACL = 0;
               MetricOutFltr_IP_PREFIX = 1;
               MetricOutFltr_NONE = 2;
            };
            MetricOutFltr metricOutFltr = 10;
         }
         Metric metric = 7;
         uint32 msgSizeMtu = 8;
         uint32 msgSizeValue = 9;
         uint32 output = 10;
         uint32 packetThrottle = 11;
         uint32 packetTxBandwidth = 12;
         uint32 packetTxCount = 13;
         uint32 packetTxInterval = 14;
         uint32 poisonReverse = 15;
         uint32 processId = 16;
         uint32 splitHorizon = 17;
         message SummInfos {
            message SummInfo {
               uint32 avoidFeedback = 1;
               string mask = 2;
               uint32 summMaskLen = 3;
               enum SummState {
                  SummState_ACTIVE = 0;
                  SummState_STALE = 1;
               };
               SummState summState = 4;
               string summaryAddress = 5;
            }
            repeated SummInfo summInfo = 1;
         }
         SummInfos summInfos = 18;
         message Summarys {
            message Summary {
               uint32 avoidFeedback = 1;
               string mask = 2;
               string summaryAddress = 3;
            }
            repeated Summary summary = 1;
         }
         Summarys summarys = 19;
         enum Version {
            Version_RIP_VERSION_1 = 0;
            Version_RIP_VERSION_2 = 1;
            Version_RIP_VERSION_2_COMP = 2;
            Version_RIP_VERSION_DEFAULT = 3;
         };
         Version version = 20;
      }
      repeated Interface interface = 1;
   }
   Interfaces interfaces = 1;
   message Processs {
      message Process {
         message Bfd {
            uint32 bfdDetectMultiplierInterval = 1;
            uint32 bfdMinRxInterval = 2;
            uint32 bfdMinTxInterval = 3;
            enum BfdallEnable {
               BfdallEnable_DISABLE = 0;
               BfdallEnable_ENABLE = 1;
            };
            BfdallEnable bfdallEnable = 4;
         }
         Bfd bfd = 1;
         message BfdStats {
            message BfdStat {
               enum BfdState {
                  BfdState_DOWN = 0;
                  BfdState_UNKNOWN = 1;
                  BfdState_UP = 2;
               };
               BfdState bfdState = 1;
               string ifName = 2;
               string localipaddress = 3;
               string remoteipaddress = 4;
            }
            repeated BfdStat bfdStat = 1;
         }
         BfdStats bfdStats = 2;
         enum CheckZero {
            CheckZero_DISABLE = 0;
            CheckZero_ENABLE = 1;
         };
         CheckZero checkZero = 3;
         uint32 defaultCost = 4;
         message DefaultRoute {
            uint32 advertiseTag = 1;
            uint32 avoidLearning = 2;
            uint32 cost = 3;
            enum Originate {
               Originate_ALWAYS = 0;
               Originate_MATCH_DEFAULT = 1;
               Originate_NONE = 2;
               Originate_ROUTE_FILTER = 3;
               Originate_ROUTE_POLICY = 4;
            };
            Originate originate = 4;
            string routeFilter = 5;
            string routePolicy = 6;
            uint32 tag = 7;
         }
         DefaultRoute defaultRoute = 5;
         string description = 6;
         uint32 ecmp = 7;
         message FilterPolicys {
            message FilterPolicy {
               enum FilterRule_1 {
                  FilterRule_ACL_NAME = 0;
                  FilterRule_ACL_NUM = 1;
                  FilterRule_IP_PREFIX = 2;
               };
               FilterRule_1 FilterRule = 1;
               enum IsInterfacePolicy_1 {
                  IsInterfacePolicy_NO = 0;
                  IsInterfacePolicy_YES = 1;
               };
               IsInterfacePolicy_1 IsInterfacePolicy = 2;
               string aclName = 3;
               uint32 aclNumber = 4;
               enum ExportImportType {
                  ExportImportType_EXPORT = 0;
                  ExportImportType_IMPORT = 1;
               };
               ExportImportType exportImportType = 5;
               enum ExportProtocol {
                  ExportProtocol_BGP_ID = 0;
                  ExportProtocol_DIRECT_ID = 1;
                  ExportProtocol_ISIS_ID = 2;
                  ExportProtocol_NONE = 3;
                  ExportProtocol_OSPFV2_ID = 4;
                  ExportProtocol_RIP_ID = 5;
                  ExportProtocol_STATIC_ID = 6;
                  ExportProtocol_UNR_ID = 7;
               };
               ExportProtocol exportProtocol = 6;
               uint32 exportProtocolProcessId = 7;
               string gatewayIpPrefix = 8;
               string intfName = 9;
               string ipPrefixName = 10;
            }
            repeated FilterPolicy filterPolicy = 1;
         }
         FilterPolicys filterPolicys = 8;
         enum HostRoute {
            HostRoute_DISABLE = 0;
            HostRoute_ENABLE = 1;
         };
         HostRoute hostRoute = 9;
         message ImportRoutes {
            message ImportRoute {
               uint32 cost = 1;
               enum ImpRoutePolicy {
                  ImpRoutePolicy_NONE = 0;
                  ImpRoutePolicy_ROUTE_FILTER = 1;
                  ImpRoutePolicy_ROUTE_POLICY = 2;
               };
               ImpRoutePolicy impRoutePolicy = 2;
               enum ImportProtocol {
                  ImportProtocol_BGP_ID = 0;
                  ImportProtocol_DIRECT_ID = 1;
                  ImportProtocol_ISIS_ID = 2;
                  ImportProtocol_OSPFV2_ID = 3;
                  ImportProtocol_RIP_ID = 4;
                  ImportProtocol_STATIC_ID = 5;
                  ImportProtocol_UNR_ID = 6;
               };
               ImportProtocol importProtocol = 3;
               enum PermitIBGP {
                  PermitIBGP_DISABLE = 0;
                  PermitIBGP_ENABLE = 1;
               };
               PermitIBGP permitIBGP = 4;
               uint32 protocolProcessId = 5;
               string routeFilter = 6;
               string routePolicy = 7;
               enum Transparent {
                  Transparent_DISABLE = 0;
                  Transparent_ENABLE = 1;
               };
               Transparent transparent = 8;
            }
            repeated ImportRoute importRoute = 1;
         }
         ImportRoutes importRoutes = 10;
         uint32 maxRoutes = 11;
         enum MibBinding {
            MibBinding_DISABLE = 0;
            MibBinding_ENABLE = 1;
         };
         MibBinding mibBinding = 12;
         message Networks {
            message Network {
               string address = 1;
            }
            repeated Network network = 1;
         }
         Networks networks = 13;
         message Peers {
            message Peer {
               string interfaceName = 1;
               uint32 lastRecSeqNo = 2;
               string nbrIPAddr = 3;
               uint32 noOfGBGRoutes = 4;
               uint32 noOfHldRoutes = 5;
               uint32 noOfRIPRoutes = 6;
            }
            repeated Peer peer = 1;
         }
         Peers peers = 14;
         message Preference {
            string preferenceFilter = 1;
            string preferencePolicy = 2;
            enum PreferenceType {
               PreferenceType_NONE = 0;
               PreferenceType_ROUTE_FILTER = 1;
               PreferenceType_ROUTE_POLICY = 2;
            };
            PreferenceType preferenceType = 3;
            uint32 preferenceValue = 4;
         }
         Preference preference = 15;
         uint32 processId = 16;
         message Routes {
            message Route {
               uint32 cost = 1;
               string destinationAddress = 2;
               string interfaceName = 3;
               string nexthop = 4;
               string pathType = 5;
               string peerAddress = 6;
               uint32 prefixLength = 7;
               uint32 tag = 8;
            }
            repeated Route route = 1;
         }
         Routes routes = 17;
         enum SilentAll {
            SilentAll_DISABLE = 0;
            SilentAll_ENABLE = 1;
         };
         SilentAll silentAll = 18;
         message SilentInterfaces {
            message SilentInterface {
               enum EnableFlag {
                  EnableFlag_DISABLE = 0;
                  EnableFlag_ENABLE = 1;
               };
               EnableFlag enableFlag = 1;
               string intfName = 2;
            }
            repeated SilentInterface silentInterface = 1;
         }
         SilentInterfaces silentInterfaces = 19;
         message Statistics {
            uint32 numOfIntfEnabled = 1;
            uint32 numOfRepliesToQueries = 2;
            uint32 numOfRouteChanges = 3;
            uint32 numOfRoutesInDB = 4;
            string numOfRtSentInLPU = 5;
            uint32 numOfRtSndableInPU = 6;
            uint32 numOfTriggeredUpdSent = 7;
            uint32 numOfVrrpIntf = 8;
         }
         Statistics statistics = 20;
         enum Summary {
            Summary_DISABLE = 0;
            Summary_ENABLE = 1;
            Summary_ENABLE_ALWAYS = 2;
         };
         Summary summary = 21;
         uint32 thresholdPercent = 22;
         message Timer {
            uint32 age = 1;
            uint32 garbage = 2;
            uint32 periodic = 3;
            uint32 suppress = 4;
            enum TrgTmrFlag {
               TrgTmrFlag_DISABLE = 0;
               TrgTmrFlag_ENABLE = 1;
            };
            TrgTmrFlag trgTmrFlag = 5;
            uint32 triggeredIncrementValue = 6;
            uint32 triggeredMaxInterval = 7;
            uint32 triggeredMinInterval = 8;
         }
         Timer timer = 23;
         message UnicastPeers {
            message UnicastPeer {
               string peerAddress = 1;
            }
            repeated UnicastPeer unicastPeer = 1;
         }
         UnicastPeers unicastPeers = 24;
         enum VerifySource {
            VerifySource_DISABLE = 0;
            VerifySource_ENABLE = 1;
         };
         VerifySource verifySource = 25;
         uint32 version = 26;
         string vpnName = 27;
         enum ZeroMetricCheck {
            ZeroMetricCheck_DISABLE = 0;
            ZeroMetricCheck_ENABLE = 1;
         };
         ZeroMetricCheck zeroMetricCheck = 28;
      }
      repeated Process process = 1;
   }
   Processs processs = 2;
   message RipGtsmpublic {
      uint32 hops = 1;
   }
   RipGtsmpublic ripGtsmpublic = 3;
   message RipGtsms {
      message RipGtsm {
         uint32 hops = 1;
         string vrfName = 2;
      }
      repeated RipGtsm ripGtsm = 1;
   }
   RipGtsms ripGtsms = 4;
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-11-05 09:40:57
// ProtoYang-version 1
// module huawei-y1731
// revision 2019-12-10
// namespace urn:huawei:yang:huawei-y1731

package huawei_y1731;

message Y1731 {
   message GlobalAttribute {
      enum CfmVersion {
         CfmVersion_DRAFT7 = 0;
         CfmVersion_STANDARD = 1;
      };
      CfmVersion cfm_version = 1 [json_name = "cfm-version"];
      enum MpAddressModel {
         INVALID_ENUM_VALUE_MpAddressModel = 0;
         MpAddressModel_BRIDGE = 1;
         MpAddressModel_INDIVIDUAL = 2;
      };
      MpAddressModel mp_address_model = 2 [json_name = "mp-address-model"];
      bool pm_mode_enable = 3 [json_name = "pm-mode-enable"];
      enum PortidTlv {
         INVALID_ENUM_VALUE_PortidTlv = 0;
         PortidTlv_INTERFACEX_NAME = 5;
         PortidTlv_LOCAL = 7;
      };
      PortidTlv portid_tlv = 4 [json_name = "portid-tlv"];
      uint32 idle_test_id_count = 5 [json_name = "idle-test-id-count"];
   }
   GlobalAttribute global_attribute = 1 [json_name = "global-attribute"];
   message GlobalEnable {
      message Mds {
         message Md {
            string name = 1 [json_name = "name"];
            uint32 level = 2 [json_name = "level"];
            enum Format {
               INVALID_ENUM_VALUE_Format = 0;
               Format_NONE = 1;
               Format_DNS = 2;
               Format_MACX_ADDRESS = 3;
               Format_STRING = 4;
            };
            Format format = 3 [json_name = "format"];
            string format_name = 4 [json_name = "format-name"];
            enum MipCreateType {
               MipCreateType_NONE = 0;
               MipCreateType_EXPLICIT = 1;
               MipCreateType_DEFAULT = 2;
            };
            MipCreateType mip_create_type = 5 [json_name = "mip-create-type"];
            enum SenderTlvType {
               INVALID_ENUM_VALUE_SenderTlvType = 0;
               SenderTlvType_NONE = 1;
               SenderTlvType_CHASSIS = 2;
               SenderTlvType_MANAGE = 3;
               SenderTlvType_CHASSISX_MANAGE = 4;
               SenderTlvType_DEFER = 5;
            };
            SenderTlvType sender_tlv_type = 6 [json_name = "sender-tlv-type"];
            message Mas {
               message Ma {
                  string name = 1 [json_name = "name"];
                  enum Format {
                     INVALID_ENUM_VALUE_Format = 0;
                     Format_STRING = 2;
                     Format_ICCX_BASED = 32;
                  };
                  Format format = 2 [json_name = "format"];
                  string format_name = 3 [json_name = "format-name"];
                  uint32 packet_priority = 4 [json_name = "packet-priority"];
                  enum CcmInterval {
                     INVALID_ENUM_VALUE_CcmInterval = 0;
                     CcmInterval_X_3X_3MS = 1;
                     CcmInterval_X_10MS = 2;
                     CcmInterval_X_100MS = 3;
                     CcmInterval_X_1S = 4;
                     CcmInterval_X_10S = 5;
                     CcmInterval_X_1MIN = 6;
                     CcmInterval_X_10MIN = 7;
                     CcmInterval_X_20MS = 8;
                     CcmInterval_X_30MS = 9;
                     CcmInterval_X_50MS = 10;
                  };
                  CcmInterval ccm_interval = 5 [json_name = "ccm-interval"];
                  uint32 alarm_occur_time = 6 [json_name = "alarm-occur-time"];
                  uint32 alarm_finish_time = 7 [json_name = "alarm-finish-time"];
                  uint32 active_time = 8 [json_name = "active-time"];
                  bool interface_tlv = 9 [json_name = "interface-tlv"];
                  bool sender_id_tlv = 10 [json_name = "sender-id-tlv"];
                  bool port_status_tlv = 11 [json_name = "port-status-tlv"];
                  enum MipCreateType {
                     MipCreateType_NONE = 0;
                     MipCreateType_EXPLICIT = 1;
                     MipCreateType_DEFAULT = 2;
                     MipCreateType_DEFER = 3;
                  };
                  MipCreateType mip_create_type = 12 [json_name = "mip-create-type"];
                  bool unexpected_mep_alarm = 13 [json_name = "unexpected-mep-alarm"];
                  message Ais {
                     enum Interval {
                        INVALID_ENUM_VALUE_Interval = 0;
                        Interval_X_1S = 1;
                        Interval_X_60S = 60;
                     };
                     Interval interval = 1 [json_name = "interval"];
                     uint32 level = 2 [json_name = "level"];
                     bool suppress_alarm_enable = 3 [json_name = "suppress-alarm-enable"];
                     message LinkInterfaces {
                        message LinkInterface {
                           string if_name = 1 [json_name = "if-name"];
                        }
                        repeated LinkInterface link_interface = 1 [json_name = "link-interface"];
                     }
                     LinkInterfaces link_interfaces = 4 [json_name = "link-interfaces"];
                     bool is_sending = 5 [json_name = "is-sending"];
                  }
                  Ais ais = 14 [json_name = "ais"];
                  message Meps {
                     message Mep {
                        uint32 id = 1 [json_name = "id"];
                        enum Direction {
                           Direction_INWARD = 0;
                           Direction_OUTWARD = 1;
                        };
                        Direction direction = 2 [json_name = "direction"];
                        bool cc_send_enable = 3 [json_name = "cc-send-enable"];
                        bool rdi_alarm_disabled = 4 [json_name = "rdi-alarm-disabled"];
                        bool ais_alarm_disabled = 5 [json_name = "ais-alarm-disabled"];
                        message Type_IfMep {
                           string if_name = 1 [json_name = "if-name"];
                           message Tags_TwoTags {
                              uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                              uint32 ce_vlan = 2 [json_name = "ce-vlan"];
                           }
                           message Tags_OneTag {
                              uint32 dot1q_vlan = 1 [json_name = "dot1q-vlan"];
                           }
                           oneof Tags {
                              Tags_TwoTags tags_two_tags = 2 [json_name = "two-tags"];
                              Tags_OneTag tags_one_tag = 3 [json_name = "one-tag"];
                           }
                           enum MeasurePoint {
                              INVALID_ENUM_VALUE_MeasurePoint = 0;
                              MeasurePoint_PW = 1;
                              MeasurePoint_AC = 2;
                           };
                           MeasurePoint measure_point = 4 [json_name = "measure-point"];
                           bool clear_arp = 5 [json_name = "clear-arp"];
                           bool test_enable = 6 [json_name = "test-enable"];
                           message Lck {
                              uint32 level = 1 [json_name = "level"];
                           }
                           Lck lck = 7 [json_name = "lck"];
                           message EthBnReceive {
                              uint32 min_bw = 1 [json_name = "min-bw"];
                              enum Mode {
                                 Mode_PORT = 0;
                                 Mode_PORTX_VLAN = 1;
                              };
                              Mode mode = 2 [json_name = "mode"];
                              message EthBnResults {
                                 message EthBnResult {
                                    string src_mac = 1 [json_name = "src-mac"];
                                    uint32 port_id = 2 [json_name = "port-id"];
                                    uint32 band_width = 3 [json_name = "band-width"];
                                 }
                                 repeated EthBnResult eth_bn_result = 1 [json_name = "eth-bn-result"];
                              }
                              EthBnResults eth_bn_results = 3 [json_name = "eth-bn-results"];
                              uint32 received_bn = 4 [json_name = "received-bn"];
                           }
                           EthBnReceive eth_bn_receive = 8 [json_name = "eth-bn-receive"];
                           message Ais {
                              string vid = 1 [json_name = "vid"];
                              message Vlans {
                                 message Vlan {
                                    uint32 pe_vid = 1 [json_name = "pe-vid"];
                                    string ce_vid = 2 [json_name = "ce-vid"];
                                 }
                                 repeated Vlan vlan = 1 [json_name = "vlan"];
                              }
                              Vlans vlans = 2 [json_name = "vlans"];
                           }
                           Ais ais = 9 [json_name = "ais"];
                           message PortLink {
                              uint32 port_link_holdoff = 1 [json_name = "port-link-holdoff"];
                              uint32 wtr = 2 [json_name = "wtr"];
                              bool loc = 3 [json_name = "loc"];
                              bool tlv = 4 [json_name = "tlv"];
                              bool eth_csf = 5 [json_name = "eth-csf"];
                           }
                           PortLink port_link = 10 [json_name = "port-link"];
                           message DelayThresholds {
                              message DelayThreshold {
                                 enum DelayType {
                                    INVALID_ENUM_VALUE_DelayType = 0;
                                    DelayType_ONEX_WAYX_DELAY = 1;
                                    DelayType_TWOX_WAYX_DELAY = 2;
                                    DelayType_ONEX_WAYX_JITTER = 3;
                                    DelayType_TWOX_WAYX_JITTER = 4;
                                 };
                                 DelayType delay_type = 1 [json_name = "delay-type"];
                                 uint32 upper_limit = 2 [json_name = "upper-limit"];
                                 uint32 lower_limit = 3 [json_name = "lower-limit"];
                              }
                              repeated DelayThreshold delay_threshold = 1 [json_name = "delay-threshold"];
                           }
                           DelayThresholds delay_thresholds = 11 [json_name = "delay-thresholds"];
                           message DelayThresholdPrioritys {
                              message DelayThresholdPriority {
                                 enum DelayType {
                                    INVALID_ENUM_VALUE_DelayType = 0;
                                    DelayType_ONEX_WAYX_DELAY = 1;
                                    DelayType_TWOX_WAYX_DELAY = 2;
                                    DelayType_ONEX_WAYX_JITTER = 3;
                                    DelayType_TWOX_WAYX_JITTER = 4;
                                 };
                                 DelayType delay_type = 1 [json_name = "delay-type"];
                                 uint32 priority = 2 [json_name = "priority"];
                                 uint32 upper_limit = 3 [json_name = "upper-limit"];
                                 uint32 lower_limit = 4 [json_name = "lower-limit"];
                              }
                              repeated DelayThresholdPriority delay_threshold_priority = 1 [json_name = "delay-threshold-priority"];
                           }
                           DelayThresholdPrioritys delay_threshold_prioritys = 12 [json_name = "delay-threshold-prioritys"];
                           message LossThresholds {
                              message LossThreshold {
                                 enum LossType {
                                    INVALID_ENUM_VALUE_LossType = 0;
                                    LossType_SINGLEX_ENDEDX_LOCALX_LOSS = 1;
                                    LossType_SINGLEX_ENDEDX_REMOTEX_LOSS = 2;
                                    LossType_DUALX_ENDEDX_LOCALX_LOSS = 3;
                                    LossType_DUALX_ENDEDX_REMOTEX_LOSS = 4;
                                 };
                                 LossType loss_type = 1 [json_name = "loss-type"];
                                 string upper_limit = 2 [json_name = "upper-limit"];
                                 string lower_limit = 3 [json_name = "lower-limit"];
                              }
                              repeated LossThreshold loss_threshold = 1 [json_name = "loss-threshold"];
                           }
                           LossThresholds loss_thresholds = 13 [json_name = "loss-thresholds"];
                           message LossThresholdPrioritys {
                              message LossThresholdPriority {
                                 enum LossType {
                                    INVALID_ENUM_VALUE_LossType = 0;
                                    LossType_SINGLEX_ENDEDX_LOCALX_LOSS = 1;
                                    LossType_SINGLEX_ENDEDX_REMOTEX_LOSS = 2;
                                 };
                                 LossType loss_type = 1 [json_name = "loss-type"];
                                 uint32 priority = 2 [json_name = "priority"];
                                 string upper_limit = 3 [json_name = "upper-limit"];
                                 string lower_limit = 4 [json_name = "lower-limit"];
                              }
                              repeated LossThresholdPriority loss_threshold_priority = 1 [json_name = "loss-threshold-priority"];
                           }
                           LossThresholdPrioritys loss_threshold_prioritys = 14 [json_name = "loss-threshold-prioritys"];
                           uint32 two_delay_pkt_size = 15 [json_name = "two-delay-pkt-size"];
                           message Asymmetric {
                              uint32 remote_vlan = 1 [json_name = "remote-vlan"];
                              bool ext_asym_mode = 2 [json_name = "ext-asym-mode"];
                           }
                           Asymmetric asymmetric = 16 [json_name = "asymmetric"];
                           message AisLinkFault {
                              enum Interval {
                                 INVALID_ENUM_VALUE_Interval = 0;
                                 Interval_X_1S = 1;
                                 Interval_X_60S = 60;
                              };
                              Interval interval = 1 [json_name = "interval"];
                           }
                           AisLinkFault ais_link_fault = 17 [json_name = "ais-link-fault"];
                           message EthCsf {
                              enum Interval {
                                 INVALID_ENUM_VALUE_Interval = 0;
                                 Interval_X_1S = 1;
                                 Interval_X_60S = 60;
                              };
                              Interval interval = 1 [json_name = "interval"];
                           }
                           EthCsf eth_csf = 18 [json_name = "eth-csf"];
                           message AisState {
                              enum Interval {
                                 INVALID_ENUM_VALUE_Interval = 0;
                                 Interval_X_1S = 1;
                                 Interval_X_60S = 60;
                              };
                              Interval interval = 1 [json_name = "interval"];
                              uint32 level = 2 [json_name = "level"];
                           }
                           AisState ais_state = 19 [json_name = "ais-state"];
                        }
                        message Type_PwMep {
                           string peer_ip = 1 [json_name = "peer-ip"];
                           uint32 vc_id = 2 [json_name = "vc-id"];
                           string config_mac = 3 [json_name = "config-mac"];
                        }
                        message Type_VlanIfMep {
                           bool vlan_mep = 1 [json_name = "vlan-mep"];
                        }
                        oneof Type {
                           Type_IfMep type_if_mep = 6 [json_name = "if-mep"];
                           Type_PwMep type_pw_mep = 7 [json_name = "pw-mep"];
                           Type_VlanIfMep type_vlan_if_mep = 8 [json_name = "vlan-if-mep"];
                        }
                        string mac = 9 [json_name = "mac"];
                        enum AlarmStatus {
                           AlarmStatus_UNEXPECTEDX_MEGX_LEVEL = 0;
                           AlarmStatus_MISMERGE = 1;
                           AlarmStatus_UNEXPECTEDX_MEP = 2;
                           AlarmStatus_UNEXPECTEDX_PERIOD = 3;
                           AlarmStatus_UNEXPECTEDX_MAC = 4;
                           AlarmStatus_LOC = 5;
                           AlarmStatus_EXCEPTIONALX_MACX_STATUS = 6;
                           AlarmStatus_RDI = 7;
                           AlarmStatus_NONE = 254;
                        };
                        AlarmStatus alarm_status = 10 [json_name = "alarm-status"];
                     }
                     repeated Mep mep = 1 [json_name = "mep"];
                  }
                  Meps meps = 15 [json_name = "meps"];
                  message Rmeps {
                     message Rmep {
                        uint32 id = 1 [json_name = "id"];
                        bool cc_recv_enabled = 2 [json_name = "cc-recv-enabled"];
                        string config_mac = 3 [json_name = "config-mac"];
                        enum CfmStatus {
                           CfmStatus_UP = 0;
                           CfmStatus_DOWN = 1;
                           CfmStatus_DISABLE = 2;
                        };
                        CfmStatus cfm_status = 4 [json_name = "cfm-status"];
                        string mac = 5 [json_name = "mac"];
                        enum AlarmStatus {
                           AlarmStatus_UNEXPECTEDX_MEGX_LEVEL = 0;
                           AlarmStatus_MISMERGE = 1;
                           AlarmStatus_UNEXPECTEDX_MEP = 2;
                           AlarmStatus_UNEXPECTEDX_PERIOD = 3;
                           AlarmStatus_UNEXPECTEDX_MAC = 4;
                           AlarmStatus_LOC = 5;
                           AlarmStatus_EXCEPTIONALX_MACX_STATUS = 6;
                           AlarmStatus_RDI = 7;
                           AlarmStatus_NONE = 254;
                        };
                        AlarmStatus alarm_status = 6 [json_name = "alarm-status"];
                        enum InterfaceTlv {
                           InterfaceTlv_NONE = 0;
                           InterfaceTlv_UP = 1;
                           InterfaceTlv_DOWN = 2;
                           InterfaceTlv_TESTING = 3;
                           InterfaceTlv_UNKNOWN = 4;
                           InterfaceTlv_DORMANT = 5;
                           InterfaceTlv_NOTX_PRESENT = 6;
                           InterfaceTlv_LOWERX_LAYERX_DOWN = 7;
                           InterfaceTlv_UNDEFINED = 255;
                        };
                        InterfaceTlv interface_tlv = 7 [json_name = "interface-tlv"];
                        enum PortStatusTlv {
                           PortStatusTlv_NONE = 0;
                           PortStatusTlv_BLOCKED = 1;
                           PortStatusTlv_UP = 2;
                           PortStatusTlv_UNDEFINED = 255;
                        };
                        PortStatusTlv port_status_tlv = 8 [json_name = "port-status-tlv"];
                        string chassis_id = 9 [json_name = "chassis-id"];
                        string mng_addr = 10 [json_name = "mng-addr"];
                     }
                     repeated Rmep rmep = 1 [json_name = "rmep"];
                  }
                  Rmeps rmeps = 16 [json_name = "rmeps"];
                  message MapService_NoBind {
                     bool no_bind = 1 [json_name = "no-bind"];
                  }
                  message MapService_BindVlan {
                     uint32 vlan_id = 1 [json_name = "vlan-id"];
                     uint32 one_way_threshold_value = 2 [json_name = "one-way-threshold-value"];
                     uint32 two_way_threshold_value = 3 [json_name = "two-way-threshold-value"];
                  }
                  message MapService_BindL2Vc {
                     uint32 l2vc_id = 1 [json_name = "l2vc-id"];
                     enum L2VcType {
                        INVALID_ENUM_VALUE_L2VcType = 0;
                        L2VcType_VLAN = 4;
                        L2VcType_ETHERNET = 5;
                     };
                     L2VcType l2vc_type = 2 [json_name = "l2vc-type"];
                     string l2vc_ip = 3 [json_name = "l2vc-ip"];
                  }
                  message MapService_BindVsi {
                     string vsi_name = 1 [json_name = "vsi-name"];
                  }
                  message MapService_BindCcc {
                     string ccc_name = 1 [json_name = "ccc-name"];
                  }
                  message MapService_BindL2Tpv3Pw {
                     string tnl_name = 1 [json_name = "tnl-name"];
                  }
                  message MapService_BindL2Tpv3Ccc {
                     string l2tp_ccc_name = 1 [json_name = "l2tp-ccc-name"];
                  }
                  message MapService_BindBgpPw {
                     string vpn_name = 1 [json_name = "vpn-name"];
                     uint32 ce_id = 2 [json_name = "ce-id"];
                     uint32 ce_off_set = 3 [json_name = "ce-off-set"];
                  }
                  message MapService_BindEvpn {
                     string evpn_name = 1 [json_name = "evpn-name"];
                  }
                  message MapService_BindBd {
                     uint32 bd_id = 1 [json_name = "bd-id"];
                  }
                  oneof MapService {
                     MapService_NoBind map_service_no_bind = 17 [json_name = "no-bind"];
                     MapService_BindVlan map_service_bind_vlan = 18 [json_name = "bind-vlan"];
                     MapService_BindL2Vc map_service_bind_l2vc = 19 [json_name = "bind-l2vc"];
                     MapService_BindVsi map_service_bind_vsi = 20 [json_name = "bind-vsi"];
                     MapService_BindCcc map_service_bind_ccc = 21 [json_name = "bind-ccc"];
                     MapService_BindL2Tpv3Pw map_service_bind_l2tpv3_pw = 22 [json_name = "bind-l2tpv3-pw"];
                     MapService_BindL2Tpv3Ccc map_service_bind_l2tpv3_ccc = 23 [json_name = "bind-l2tpv3-ccc"];
                     MapService_BindBgpPw map_service_bind_bgp_pw = 24 [json_name = "bind-bgp-pw"];
                     MapService_BindEvpn map_service_bind_evpn = 25 [json_name = "bind-evpn"];
                     MapService_BindBd map_service_bind_bd = 26 [json_name = "bind-bd"];
                  }
                  uint32 index = 27 [json_name = "index"];
                  bool alarm_rdi_oam_mgr_disable = 28 [json_name = "alarm-rdi-oam-mgr-disable"];
               }
               repeated Ma ma = 1 [json_name = "ma"];
            }
            Mas mas = 7 [json_name = "mas"];
            enum ChassisSubType {
               INVALID_ENUM_VALUE_ChassisSubType = 0;
               ChassisSubType_MACX_ADDRESS = 4;
               ChassisSubType_LOCALLYX_ASSIGNED = 7;
            };
            ChassisSubType chassis_sub_type = 8 [json_name = "chassis-sub-type"];
            uint32 index = 9 [json_name = "index"];
         }
         repeated Md md = 1 [json_name = "md"];
      }
      Mds mds = 1 [json_name = "mds"];
      message TestInstances {
         message TestInstance {
            uint32 test_id = 1 [json_name = "test-id"];
            string description = 2 [json_name = "description"];
            string md_name = 3 [json_name = "md-name"];
            string ma_name = 4 [json_name = "ma-name"];
            uint32 mep_id = 5 [json_name = "mep-id"];
            uint32 priority = 6 [json_name = "priority"];
            string peer_ip = 7 [json_name = "peer-ip"];
            uint32 vc_id = 8 [json_name = "vc-id"];
            bool test_file_enable = 9 [json_name = "test-file-enable"];
            message OneWayDelaySend {
               enum Interval {
                  INVALID_ENUM_VALUE_Interval = 0;
                  Interval_X_1000MS = 1000;
                  Interval_X_10000MS = 10000;
                  Interval_X_30000MS = 30000;
                  Interval_X_60000MS = 60000;
               };
               Interval interval = 1 [json_name = "interval"];
            }
            OneWayDelaySend one_way_delay_send = 10 [json_name = "one-way-delay-send"];
            message OneWayDelayRecv {
               bool is_continue = 1 [json_name = "is-continue"];
            }
            OneWayDelayRecv one_way_delay_recv = 11 [json_name = "one-way-delay-recv"];
            message TwoWayDelaySend {
               enum Interval {
                  INVALID_ENUM_VALUE_Interval = 0;
                  Interval_X_1000MS = 1000;
                  Interval_X_10000MS = 10000;
                  Interval_X_30000MS = 30000;
                  Interval_X_60000MS = 60000;
               };
               Interval interval = 1 [json_name = "interval"];
               uint32 period = 2 [json_name = "period"];
            }
            TwoWayDelaySend two_way_delay_send = 12 [json_name = "two-way-delay-send"];
            message TwoWayDelayRecv {
               bool receive_enabled = 1 [json_name = "receive-enabled"];
            }
            TwoWayDelayRecv two_way_delay_recv = 13 [json_name = "two-way-delay-recv"];
            message SingleLossSend {
               enum Interval {
                  INVALID_ENUM_VALUE_Interval = 0;
                  Interval_X_1000MS = 1000;
                  Interval_X_10000MS = 10000;
                  Interval_X_30000MS = 30000;
                  Interval_X_60000MS = 60000;
               };
               Interval interval = 1 [json_name = "interval"];
               uint32 period = 2 [json_name = "period"];
            }
            SingleLossSend single_loss_send = 14 [json_name = "single-loss-send"];
            message SingleLossRecv {
               bool enabled = 1 [json_name = "enabled"];
            }
            SingleLossRecv single_loss_recv = 15 [json_name = "single-loss-recv"];
            message DualLoss {
               bool enabled = 1 [json_name = "enabled"];
            }
            DualLoss dual_loss = 16 [json_name = "dual-loss"];
            message SyntheticLossSend {
               enum Interval {
                  INVALID_ENUM_VALUE_Interval = 0;
                  Interval_X_3X_3MS = 3;
                  Interval_X_10MS = 10;
                  Interval_X_100MS = 100;
                  Interval_X_1000MS = 1000;
                  Interval_X_10000MS = 10000;
               };
               Interval interval = 1 [json_name = "interval"];
               uint32 send_count = 2 [json_name = "send-count"];
               uint32 timeout = 3 [json_name = "timeout"];
               uint32 period = 4 [json_name = "period"];
            }
            SyntheticLossSend synthetic_loss_send = 17 [json_name = "synthetic-loss-send"];
            message SyntheticLossRecv {
               uint32 timeout = 1 [json_name = "timeout"];
            }
            SyntheticLossRecv synthetic_loss_recv = 18 [json_name = "synthetic-loss-recv"];
            message DelayThresholds {
               message DelayThreshold {
                  enum DelayType {
                     INVALID_ENUM_VALUE_DelayType = 0;
                     DelayType_TWOX_WAYX_DELAY = 5;
                     DelayType_TWOX_WAYX_JITTER = 6;
                  };
                  DelayType delay_type = 1 [json_name = "delay-type"];
                  uint32 upper_limit = 2 [json_name = "upper-limit"];
                  uint32 lower_limit = 3 [json_name = "lower-limit"];
               }
               repeated DelayThreshold delay_threshold = 1 [json_name = "delay-threshold"];
            }
            DelayThresholds delay_thresholds = 19 [json_name = "delay-thresholds"];
            message LossThresholds {
               message LossThreshold {
                  enum LossType {
                     INVALID_ENUM_VALUE_LossType = 0;
                     LossType_SINGLEX_ENDEDX_SYNTHETICX_LOCALX_LOSS = 5;
                     LossType_SINGLEX_ENDEDX_SYNTHETICX_REMOTEX_LOSS = 6;
                     LossType_SINGLEX_ENDEDX_LOCALX_LOSS = 7;
                     LossType_SINGLEX_ENDEDX_REMOTEX_LOSS = 8;
                  };
                  LossType loss_type = 1 [json_name = "loss-type"];
                  string upper_limit = 2 [json_name = "upper-limit"];
                  string lower_limit = 3 [json_name = "lower-limit"];
               }
               repeated LossThreshold loss_threshold = 1 [json_name = "loss-threshold"];
            }
            LossThresholds loss_thresholds = 20 [json_name = "loss-thresholds"];
            message TwoWayDelayResult {
               enum MeasureMode {
                  INVALID_ENUM_VALUE_MeasureMode = 0;
                  MeasureMode_ONX_DEMAND = 1;
                  MeasureMode_PROACTIVE = 2;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_WORKING = 1;
                  Status_FINISHED = 2;
               };
               Status status = 2 [json_name = "status"];
               message Datas {
                  message Data {
                     uint32 index = 1 [json_name = "index"];
                     enum ErrorType {
                        ErrorType_VALID = 0;
                        ErrorType_INVALIDX_LOSS = 1;
                        ErrorType_INVALIDX_DELAY = 2;
                     };
                     ErrorType error_type = 2 [json_name = "error-type"];
                     string delay = 3 [json_name = "delay"];
                     string jitter = 4 [json_name = "jitter"];
                  }
                  repeated Data data = 1 [json_name = "data"];
               }
               Datas datas = 3 [json_name = "datas"];
            }
            TwoWayDelayResult two_way_delay_result = 21 [json_name = "two-way-delay-result"];
            message SingleLossResult {
               enum MeasureMode {
                  INVALID_ENUM_VALUE_MeasureMode = 0;
                  MeasureMode_ONX_DEMAND = 1;
                  MeasureMode_PROACTIVE = 2;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_WORKING = 1;
                  Status_FINISHED = 2;
               };
               Status status = 2 [json_name = "status"];
               message Datas {
                  message Data {
                     uint32 index = 1 [json_name = "index"];
                     enum ErrorType {
                        ErrorType_VALID = 0;
                        ErrorType_INVALIDX_LOSS = 1;
                        ErrorType_INVALIDX_DELAY = 2;
                     };
                     ErrorType error_type = 2 [json_name = "error-type"];
                     string local_loss = 3 [json_name = "local-loss"];
                     string local_loss_ratio = 4 [json_name = "local-loss-ratio"];
                     string remote_loss = 5 [json_name = "remote-loss"];
                     string remote_loss_ratio = 6 [json_name = "remote-loss-ratio"];
                  }
                  repeated Data data = 1 [json_name = "data"];
               }
               Datas datas = 3 [json_name = "datas"];
            }
            SingleLossResult single_loss_result = 22 [json_name = "single-loss-result"];
            message OneWayDelayDatas {
               message OneWayDelayData {
                  uint32 index = 1 [json_name = "index"];
                  enum ErrorType {
                     ErrorType_VALID = 0;
                     ErrorType_INVALIDX_LOSS = 1;
                     ErrorType_INVALIDX_DELAY = 2;
                  };
                  ErrorType error_type = 2 [json_name = "error-type"];
                  string delay = 3 [json_name = "delay"];
                  string jitter = 4 [json_name = "jitter"];
               }
               repeated OneWayDelayData one_way_delay_data = 1 [json_name = "one-way-delay-data"];
            }
            OneWayDelayDatas one_way_delay_datas = 23 [json_name = "one-way-delay-datas"];
            message DualLossDatas {
               message DualLossData {
                  uint32 index = 1 [json_name = "index"];
                  enum ErrorType {
                     ErrorType_VALID = 0;
                     ErrorType_INVALIDX_LOSS = 1;
                     ErrorType_INVALIDX_DELAY = 2;
                  };
                  ErrorType error_type = 2 [json_name = "error-type"];
                  string local_loss = 3 [json_name = "local-loss"];
                  string local_loss_ratio = 4 [json_name = "local-loss-ratio"];
                  string remote_loss = 5 [json_name = "remote-loss"];
                  string remote_loss_ratio = 6 [json_name = "remote-loss-ratio"];
               }
               repeated DualLossData dual_loss_data = 1 [json_name = "dual-loss-data"];
            }
            DualLossDatas dual_loss_datas = 24 [json_name = "dual-loss-datas"];
            message SyntheticLossResult {
               enum MeasureMode {
                  INVALID_ENUM_VALUE_MeasureMode = 0;
                  MeasureMode_ONX_DEMAND = 1;
                  MeasureMode_PROACTIVE = 2;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_WORKING = 1;
                  Status_FINISHED = 2;
               };
               Status status = 2 [json_name = "status"];
               message Datas {
                  message Data {
                     uint32 index = 1 [json_name = "index"];
                     enum ErrorType {
                        ErrorType_VALID = 0;
                        ErrorType_INVALIDX_LOSS = 1;
                        ErrorType_INVALIDX_DELAY = 2;
                     };
                     ErrorType error_type = 2 [json_name = "error-type"];
                     uint32 local_send_count = 3 [json_name = "local-send-count"];
                     uint32 remote_send_count = 4 [json_name = "remote-send-count"];
                     uint32 local_recive_count = 5 [json_name = "local-recive-count"];
                     uint32 unack_count = 6 [json_name = "unack-count"];
                     string local_loss = 7 [json_name = "local-loss"];
                     string remote_loss = 8 [json_name = "remote-loss"];
                     string local_loss_ratio = 9 [json_name = "local-loss-ratio"];
                     string remote_loss_ratio = 10 [json_name = "remote-loss-ratio"];
                  }
                  repeated Data data = 1 [json_name = "data"];
               }
               Datas datas = 3 [json_name = "datas"];
            }
            SyntheticLossResult synthetic_loss_result = 25 [json_name = "synthetic-loss-result"];
            message SingleLossPeriodResults {
               message SingleLossPeriodResult {
                  uint32 index = 1 [json_name = "index"];
                  uint32 local_samples = 2 [json_name = "local-samples"];
                  uint64 local_send_packets = 3 [json_name = "local-send-packets"];
                  uint64 local_receive_packets = 4 [json_name = "local-receive-packets"];
                  uint64 local_loss_packets = 5 [json_name = "local-loss-packets"];
                  uint32 local_thrd_exceeded_number = 6 [json_name = "local-thrd-exceeded-number"];
                  uint32 local_thrd_below_number = 7 [json_name = "local-thrd-below-number"];
                  uint32 remote_samples = 8 [json_name = "remote-samples"];
                  uint64 remote_send_packets = 9 [json_name = "remote-send-packets"];
                  uint64 remote_receive_packets = 10 [json_name = "remote-receive-packets"];
                  uint64 remote_loss_packets = 11 [json_name = "remote-loss-packets"];
                  uint32 remote_thrd_exceeded_number = 12 [json_name = "remote-thrd-exceeded-number"];
                  uint32 remote_thrd_below_number = 13 [json_name = "remote-thrd-below-number"];
               }
               repeated SingleLossPeriodResult single_loss_period_result = 1 [json_name = "single-loss-period-result"];
            }
            SingleLossPeriodResults single_loss_period_results = 26 [json_name = "single-loss-period-results"];
            message SingleEndedSyntheticLossPeriodResults {
               message SingleEndedSyntheticLossPeriodResult {
                  uint32 index = 1 [json_name = "index"];
                  uint32 local_samples = 2 [json_name = "local-samples"];
                  uint32 local_send_packets = 3 [json_name = "local-send-packets"];
                  uint32 local_receive_packets = 4 [json_name = "local-receive-packets"];
                  int32 local_loss_packets = 5 [json_name = "local-loss-packets"];
                  uint32 local_thrd_exceeded_number = 6 [json_name = "local-thrd-exceeded-number"];
                  uint32 local_thrd_below_number = 7 [json_name = "local-thrd-below-number"];
                  uint32 remote_samples = 8 [json_name = "remote-samples"];
                  uint32 remote_send_packets = 9 [json_name = "remote-send-packets"];
                  uint32 remote_receive_packets = 10 [json_name = "remote-receive-packets"];
                  int32 remote_loss_packets = 11 [json_name = "remote-loss-packets"];
                  uint32 remote_thrd_exceeded_number = 12 [json_name = "remote-thrd-exceeded-number"];
                  uint32 remote_thrd_below_number = 13 [json_name = "remote-thrd-below-number"];
               }
               repeated SingleEndedSyntheticLossPeriodResult single_ended_synthetic_loss_period_result = 1 [json_name = "single-ended-synthetic-loss-period-result"];
            }
            SingleEndedSyntheticLossPeriodResults single_ended_synthetic_loss_period_results = 27 [json_name = "single-ended-synthetic-loss-period-results"];
            message TwoWayDelayPeriodResults {
               message TwoWayDelayPeriodResult {
                  uint32 index = 1 [json_name = "index"];
                  uint32 delay_samples = 2 [json_name = "delay-samples"];
                  uint32 delay_max = 3 [json_name = "delay-max"];
                  uint32 delay_min = 4 [json_name = "delay-min"];
                  uint32 delay_average = 5 [json_name = "delay-average"];
                  uint32 delay_exceeded = 6 [json_name = "delay-exceeded"];
                  uint32 delay_below = 7 [json_name = "delay-below"];
                  uint32 jitter_samples = 8 [json_name = "jitter-samples"];
                  uint32 jitter_max = 9 [json_name = "jitter-max"];
                  uint32 jitter_min = 10 [json_name = "jitter-min"];
                  uint32 jitter_average = 11 [json_name = "jitter-average"];
                  uint32 jitter_exceeded = 12 [json_name = "jitter-exceeded"];
                  uint32 jitter_below = 13 [json_name = "jitter-below"];
               }
               repeated TwoWayDelayPeriodResult two_way_delay_period_result = 1 [json_name = "two-way-delay-period-result"];
            }
            TwoWayDelayPeriodResults two_way_delay_period_results = 28 [json_name = "two-way-delay-period-results"];
            message Remote_RmepId {
               uint32 rmep_id = 1 [json_name = "rmep-id"];
            }
            message Remote_RemoteMac {
               string rmep_mac = 1 [json_name = "rmep-mac"];
            }
            oneof Remote {
               Remote_RmepId remote_rmep_id = 29 [json_name = "rmep-id"];
               Remote_RemoteMac remote_remote_mac = 30 [json_name = "remote-mac"];
            }
            message OneWayDelaySendResult {
               enum MeasureMode {
                  INVALID_ENUM_VALUE_MeasureMode = 0;
                  MeasureMode_ONX_DEMAND = 1;
                  MeasureMode_PROACTIVE = 2;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_WORKING = 1;
                  Status_FINISHED = 2;
               };
               Status status = 2 [json_name = "status"];
            }
            OneWayDelaySendResult one_way_delay_send_result = 31 [json_name = "one-way-delay-send-result"];
         }
         repeated TestInstance test_instance = 1 [json_name = "test-instance"];
      }
      TestInstances test_instances = 2 [json_name = "test-instances"];
      string clear_mac_vlan = 3 [json_name = "clear-mac-vlan"];
      message DefaultMd {
         uint32 level = 1 [json_name = "level"];
         string vlan = 2 [json_name = "vlan"];
         enum MipCreateType {
            MipCreateType_NONE = 0;
            MipCreateType_EXPLICIT = 1;
            MipCreateType_DEFAULT = 2;
         };
         MipCreateType mip_create_type = 3 [json_name = "mip-create-type"];
         enum SenderTlvType {
            INVALID_ENUM_VALUE_SenderTlvType = 0;
            SenderTlvType_NONE = 1;
            SenderTlvType_CHASSIS = 2;
            SenderTlvType_MANAGE = 3;
            SenderTlvType_CHASSISX_MANAGE = 4;
            SenderTlvType_DEFER = 5;
         };
         SenderTlvType sender_tlv_type = 4 [json_name = "sender-tlv-type"];
      }
      DefaultMd default_md = 4 [json_name = "default-md"];
      message TestSendResults {
         message TestSendResult {
            string md_name = 1 [json_name = "md-name"];
            string ma_name = 2 [json_name = "ma-name"];
            uint32 mep_id = 3 [json_name = "mep-id"];
            uint32 rmep_id = 4 [json_name = "rmep-id"];
            string rmep_mac = 5 [json_name = "rmep-mac"];
            uint64 pkt_send_num = 6 [json_name = "pkt-send-num"];
            bool is_send = 7 [json_name = "is-send"];
            uint32 rate_value = 8 [json_name = "rate-value"];
            uint32 priority = 9 [json_name = "priority"];
            enum Pattern {
               Pattern_ZEROX_NOX_CRC = 0;
               Pattern_ZEROX_WITHX_CRC = 1;
            };
            Pattern pattern = 10 [json_name = "pattern"];
            uint32 packet_size = 11 [json_name = "packet-size"];
            bool out_of_service = 12 [json_name = "out-of-service"];
            uint32 lck_level = 13 [json_name = "lck-level"];
            uint32 timeout = 14 [json_name = "timeout"];
            uint32 send_rate = 15 [json_name = "send-rate"];
            uint32 send_time = 16 [json_name = "send-time"];
         }
         repeated TestSendResult test_send_result = 1 [json_name = "test-send-result"];
      }
      TestSendResults test_send_results = 5 [json_name = "test-send-results"];
      message TestRecvResults {
         message TestRecvResult {
            string md_name = 1 [json_name = "md-name"];
            string ma_name = 2 [json_name = "ma-name"];
            uint32 mep_id = 3 [json_name = "mep-id"];
            string source_mac = 4 [json_name = "source-mac"];
            uint64 pkt_receive_number = 5 [json_name = "pkt-receive-number"];
            uint64 pkt_receive_type_error_number = 6 [json_name = "pkt-receive-type-error-number"];
            uint64 pkt_receive_bit_error_number = 7 [json_name = "pkt-receive-bit-error-number"];
            uint64 pkt_receive_sequence_error_number = 8 [json_name = "pkt-receive-sequence-error-number"];
            uint64 pkt_receive_crc_error_number = 9 [json_name = "pkt-receive-crc-error-number"];
         }
         repeated TestRecvResult test_recv_result = 1 [json_name = "test-recv-result"];
      }
      TestRecvResults test_recv_results = 6 [json_name = "test-recv-results"];
      message TwoWayDelayResults {
         message TwoWayDelayResult {
            string test_name = 1 [json_name = "test-name"];
            enum Status {
               Status_TESTING = 0;
               Status_FINISHED = 1;
               Status_STOPPED = 2;
            };
            Status status = 2 [json_name = "status"];
            enum ErrorType {
               ErrorType_OK = 0;
            };
            ErrorType error_type = 3 [json_name = "error-type"];
            string start_time = 4 [json_name = "start-time"];
            string stop_time = 5 [json_name = "stop-time"];
            message DetailDatas {
               message DetailData {
                  uint32 index = 1 [json_name = "index"];
                  string delay = 2 [json_name = "delay"];
                  string jitter = 3 [json_name = "jitter"];
               }
               repeated DetailData detail_data = 1 [json_name = "detail-data"];
            }
            DetailDatas detail_datas = 6 [json_name = "detail-datas"];
         }
         repeated TwoWayDelayResult two_way_delay_result = 1 [json_name = "two-way-delay-result"];
      }
      TwoWayDelayResults two_way_delay_results = 7 [json_name = "two-way-delay-results"];
      message SingleLossResults {
         message SingleLossResult {
            string test_name = 1 [json_name = "test-name"];
            enum Status {
               Status_TESTING = 0;
               Status_FINISHED = 1;
               Status_STOPPED = 2;
            };
            Status status = 2 [json_name = "status"];
            enum ErrorType {
               ErrorType_OK = 0;
            };
            ErrorType error_type = 3 [json_name = "error-type"];
            string start_time = 4 [json_name = "start-time"];
            string stop_time = 5 [json_name = "stop-time"];
            message DetailDatas {
               message DetailData {
                  uint32 index = 1 [json_name = "index"];
                  string local_loss = 2 [json_name = "local-loss"];
                  string local_loss_ratio = 3 [json_name = "local-loss-ratio"];
                  string remote_loss = 4 [json_name = "remote-loss"];
                  string remote_loss_ratio = 5 [json_name = "remote-loss-ratio"];
               }
               repeated DetailData detail_data = 1 [json_name = "detail-data"];
            }
            DetailDatas detail_datas = 6 [json_name = "detail-datas"];
         }
         repeated SingleLossResult single_loss_result = 1 [json_name = "single-loss-result"];
      }
      SingleLossResults single_loss_results = 8 [json_name = "single-loss-results"];
   }
   GlobalEnable global_enable = 2 [json_name = "global-enable"];
   message CcmStatistics {
      message CcmSends {
         message CcmSend {
            string md = 1 [json_name = "md"];
            string ma = 2 [json_name = "ma"];
            uint32 mep_id = 3 [json_name = "mep-id"];
            uint64 send_packet = 4 [json_name = "send-packet"];
         }
         repeated CcmSend ccm_send = 1 [json_name = "ccm-send"];
      }
      CcmSends ccm_sends = 1 [json_name = "ccm-sends"];
      message CcmReceives {
         message CcmReceive {
            string md = 1 [json_name = "md"];
            string ma = 2 [json_name = "ma"];
            uint32 mep_id = 3 [json_name = "mep-id"];
            uint32 rmep_id = 4 [json_name = "rmep-id"];
            uint64 receive_packet = 5 [json_name = "receive-packet"];
            uint64 rdi_packet = 6 [json_name = "rdi-packet"];
            uint64 tlv_packet = 7 [json_name = "tlv-packet"];
            uint64 mac_err_packet = 8 [json_name = "mac-err-packet"];
            uint64 freq_err_packet = 9 [json_name = "freq-err-packet"];
            uint64 ma_id_err_packet = 10 [json_name = "ma-id-err-packet"];
         }
         repeated CcmReceive ccm_receive = 1 [json_name = "ccm-receive"];
      }
      CcmReceives ccm_receives = 2 [json_name = "ccm-receives"];
      bool cfm_statistic_enable = 3 [json_name = "cfm-statistic-enable"];
   }
   CcmStatistics ccm_statistics = 3 [json_name = "ccm-statistics"];
   message InnerPriority {
      bool inner_priority_enable = 1 [json_name = "inner-priority-enable"];
   }
   InnerPriority inner_priority = 4 [json_name = "inner-priority"];
   message CfmLevelCheck {
      bool level_check_strict = 1 [json_name = "level-check-strict"];
   }
   CfmLevelCheck cfm_level_check = 5 [json_name = "cfm-level-check"];
   message IdleTestIds {
      message IdleTestId {
         uint32 test_id = 1 [json_name = "test-id"];
      }
      repeated IdleTestId idle_test_id = 1 [json_name = "idle-test-id"];
   }
   IdleTestIds idle_test_ids = 6 [json_name = "idle-test-ids"];
}


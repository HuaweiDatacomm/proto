syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module openconfig-mpls
// revision 2019-03-26
// revision 2018-11-21
// revision 2018-07-02
// revision 2018-06-16
// revision 2018-06-13
// revision 2018-06-05
// revision 2017-08-24
// revision 2017-06-21
// revision 2017-03-22
// revision 2017-01-26
// revision 2016-12-15
// revision 2016-09-01
// revision 2016-08-08
// namespace http://openconfig.net/yang/mpls

package openconfig_mpls;

message Mpls {
   message Global {
      message Config {
         string null_label = 1;
      }
      Config config = 1;
      message InterfaceAttributes {
         message Interface {
            message Config {
               string interface_id = 1;
               bool mpls_enabled = 2;
            }
            Config config = 1;
            string interface_id = 2;
            message InterfaceRef {
               message Config {
                  string interface = 1;
                  uint32 subinterface = 2;
               }
               Config config = 1;
               message State {
                  string interface = 1;
                  uint32 subinterface = 2;
               }
               State state = 2;
            }
            InterfaceRef interface_ref = 3;
            message State {
               string interface_id = 1;
               bool mpls_enabled = 2;
            }
            State state = 4;
         }
         repeated Interface interface = 1;
      }
      InterfaceAttributes interface_attributes = 2;
      message ReservedLabelBlocks {
         message ReservedLabelBlock {
            message Config {
               string local_id = 1;
               string lower_bound = 2;
               string upper_bound = 3;
            }
            Config config = 1;
            string local_id = 2;
            message State {
               string local_id = 1;
               string lower_bound = 2;
               string upper_bound = 3;
            }
            State state = 3;
         }
         repeated ReservedLabelBlock reserved_label_block = 1;
      }
      ReservedLabelBlocks reserved_label_blocks = 3;
      message State {
         string null_label = 1;
      }
      State state = 4;
   }
   Global global = 1;
   message Lsps {
      message ConstrainedPath {
         message NamedExplicitPaths {
            message NamedExplicitPath {
               message Config {
                  string name = 1;
                  bool sid_protection_required = 2;
                  enum SidSelectionMode {
                     SidSelectionMode_ADJ_SID_ONLY = 0;
                     SidSelectionMode_MIXED_MODE = 1;
                  };
                  SidSelectionMode sid_selection_mode = 3;
               }
               Config config = 1;
               message ExplicitRouteObjects {
                  message ExplicitRouteObject {
                     message Config {
                        string address = 1;
                        enum HopType {
                           HopType_LOOSE = 0;
                           HopType_STRICT = 1;
                        };
                        HopType hop_type = 2;
                        uint32 index = 3;
                     }
                     Config config = 1;
                     uint32 index = 2;
                     message State {
                        string address = 1;
                        enum HopType {
                           HopType_LOOSE = 0;
                           HopType_STRICT = 1;
                        };
                        HopType hop_type = 2;
                        uint32 index = 3;
                     }
                     State state = 3;
                  }
                  repeated ExplicitRouteObject explicit_route_object = 1;
               }
               ExplicitRouteObjects explicit_route_objects = 2;
               string name = 3;
               message State {
                  string name = 1;
                  bool sid_protection_required = 2;
                  enum SidSelectionMode {
                     SidSelectionMode_ADJ_SID_ONLY = 0;
                     SidSelectionMode_MIXED_MODE = 1;
                  };
                  SidSelectionMode sid_selection_mode = 3;
               }
               State state = 4;
            }
            repeated NamedExplicitPath named_explicit_path = 1;
         }
         NamedExplicitPaths named_explicit_paths = 1;
         message Tunnels {
            message Tunnel {
               message Bandwidth {
                  message AutoBandwidth {
                     message Config {
                        uint32 adjust_interval = 1;
                        uint32 adjust_threshold = 2;
                        bool enabled = 3;
                        uint64 max_bw = 4;
                        uint64 min_bw = 5;
                     }
                     Config config = 1;
                     message Overflow {
                        message Config {
                           bool enabled = 1;
                           uint32 overflow_threshold = 2;
                           uint32 trigger_event_count = 3;
                        }
                        Config config = 1;
                        message State {
                           bool enabled = 1;
                           uint32 overflow_threshold = 2;
                           uint32 trigger_event_count = 3;
                        }
                        State state = 2;
                     }
                     Overflow overflow = 2;
                     message State {
                        uint32 adjust_interval = 1;
                        uint32 adjust_threshold = 2;
                        bool enabled = 3;
                        uint64 max_bw = 4;
                        uint64 min_bw = 5;
                     }
                     State state = 3;
                     message Underflow {
                        message Config {
                           bool enabled = 1;
                           uint32 trigger_event_count = 2;
                           uint32 underflow_threshold = 3;
                        }
                        Config config = 1;
                        message State {
                           bool enabled = 1;
                           uint32 trigger_event_count = 2;
                           uint32 underflow_threshold = 3;
                        }
                        State state = 2;
                     }
                     Underflow underflow = 4;
                  }
                  AutoBandwidth auto_bandwidth = 1;
                  message Config {
                     uint64 set_bandwidth = 1;
                     enum SpecificationType {
                        SpecificationType_AUTO = 0;
                        SpecificationType_SPECIFIED = 1;
                     };
                     SpecificationType specification_type = 2;
                  }
                  Config config = 2;
                  message State {
                     uint64 set_bandwidth = 1;
                     uint64 signaled_bandwidth = 2;
                     enum SpecificationType {
                        SpecificationType_AUTO = 0;
                        SpecificationType_SPECIFIED = 1;
                     };
                     SpecificationType specification_type = 3;
                  }
                  State state = 3;
               }
               Bandwidth bandwidth = 1;
               message Config {
                  string admin_status = 1;
                  string description = 2;
                  uint32 hold_priority = 3;
                  int32 metric = 4;
                  string metric_type = 5;
                  string name = 6;
                  uint32 preference = 7;
                  string protection_style_requested = 8;
                  uint32 reoptimize_timer = 9;
                  uint32 setup_priority = 10;
                  bool shortcut_eligible = 11;
                  string signaling_protocol = 12;
                  bool soft_preemption = 13;
                  string source = 14;
                  string type = 15;
               }
               Config config = 2;
               string name = 3;
               message P2PTunnelAttributes {
                  message Config {
                     string destination = 1;
                  }
                  Config config = 1;
                  message P2PPrimaryPath {
                  }
                  P2PPrimaryPath p2p_primary_path = 2;
                  message P2PSecondaryPaths {
                     message P2PSecondaryPath {
                        message AdminGroups {
                           message Config {
                              repeated string exclude_group = 1;
                              repeated string include_all_group = 2;
                              repeated string include_any_group = 3;
                           }
                           Config config = 1;
                           message State {
                              repeated string exclude_group = 1;
                              repeated string include_all_group = 2;
                              repeated string include_any_group = 3;
                           }
                           State state = 2;
                        }
                        AdminGroups admin_groups = 1;
                        message Config {
                           enum CspfTiebreaker {
                              CspfTiebreaker_LEAST_FILL = 0;
                              CspfTiebreaker_MOST_FILL = 1;
                              CspfTiebreaker_RANDOM = 2;
                           };
                           CspfTiebreaker cspf_tiebreaker = 1;
                           string explicit_path_name = 2;
                           uint32 hold_priority = 3;
                           string name = 4;
                           string path_computation_method = 5;
                           string path_computation_server = 6;
                           uint32 preference = 7;
                           uint32 retry_timer = 8;
                           uint32 setup_priority = 9;
                           bool use_cspf = 10;
                        }
                        Config config = 2;
                        string name = 3;
                        message State {
                           uint64 associated_rsvp_session = 1;
                           enum CspfTiebreaker {
                              CspfTiebreaker_LEAST_FILL = 0;
                              CspfTiebreaker_MOST_FILL = 1;
                              CspfTiebreaker_RANDOM = 2;
                           };
                           CspfTiebreaker cspf_tiebreaker = 2;
                           string explicit_path_name = 3;
                           uint32 hold_priority = 4;
                           string name = 5;
                           string path_computation_method = 6;
                           string path_computation_server = 7;
                           uint32 preference = 8;
                           uint32 retry_timer = 9;
                           uint32 setup_priority = 10;
                           bool use_cspf = 11;
                        }
                        State state = 4;
                     }
                     repeated P2PSecondaryPath p2p_secondary_path = 1;
                  }
                  P2PSecondaryPaths p2p_secondary_paths = 3;
                  message State {
                     string destination = 1;
                  }
                  State state = 4;
               }
               P2PTunnelAttributes p2p_tunnel_attributes = 4;
               message State {
                  string admin_status = 1;
                  message Counters {
                     uint64 bytes = 1;
                     string current_path_time = 2;
                     string next_reoptimization_time = 3;
                     string online_time = 4;
                     uint64 packets = 5;
                     uint64 path_changes = 6;
                     uint64 state_changes = 7;
                  }
                  Counters counters = 2;
                  string description = 3;
                  uint32 hold_priority = 4;
                  int32 metric = 5;
                  string metric_type = 6;
                  string name = 7;
                  string oper_status = 8;
                  uint32 preference = 9;
                  string protection_style_requested = 10;
                  uint32 reoptimize_timer = 11;
                  string role = 12;
                  uint32 setup_priority = 13;
                  bool shortcut_eligible = 14;
                  string signaling_protocol = 15;
                  bool soft_preemption = 16;
                  string source = 17;
                  string type = 18;
               }
               State state = 5;
            }
            repeated Tunnel tunnel = 1;
         }
         Tunnels tunnels = 2;
      }
      ConstrainedPath constrained_path = 1;
      message StaticLsps {
         message StaticLsp {
            message Config {
               string name = 1;
            }
            Config config = 1;
            message Egress {
               message Config {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               Config config = 1;
               message State {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               State state = 2;
            }
            Egress egress = 2;
            message Ingress {
               message Config {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               Config config = 1;
               message State {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               State state = 2;
            }
            Ingress ingress = 3;
            string name = 4;
            message State {
               string name = 1;
            }
            State state = 5;
            message Transit {
               message Config {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               Config config = 1;
               message State {
                  string incoming_label = 1;
                  string next_hop = 2;
                  string push_label = 3;
               }
               State state = 2;
            }
            Transit transit = 6;
         }
         repeated StaticLsp static_lsp = 1;
      }
      StaticLsps static_lsps = 2;
      message UnconstrainedPath {
         message PathSetupProtocol {
            message Ldp {
            }
            Ldp ldp = 1;
         }
         PathSetupProtocol path_setup_protocol = 1;
      }
      UnconstrainedPath unconstrained_path = 3;
   }
   Lsps lsps = 2;
   message SignalingProtocols {
      message Ldp {
      }
      Ldp ldp = 1;
      message RsvpTe {
         message Global {
            message GracefulRestart {
               message Config {
                  bool enable = 1;
                  uint32 recovery_time = 2;
                  uint32 restart_time = 3;
               }
               Config config = 1;
               message State {
                  bool enable = 1;
                  uint32 recovery_time = 2;
                  uint32 restart_time = 3;
               }
               State state = 2;
            }
            GracefulRestart graceful_restart = 1;
            message Hellos {
               message Config {
                  uint32 hello_interval = 1;
                  bool refresh_reduction = 2;
               }
               Config config = 1;
               message State {
                  uint32 hello_interval = 1;
                  bool refresh_reduction = 2;
               }
               State state = 2;
            }
            Hellos hellos = 2;
            message SoftPreemption {
               message Config {
                  bool enable = 1;
                  uint32 soft_preemption_timeout = 2;
               }
               Config config = 1;
               message State {
                  bool enable = 1;
                  uint32 soft_preemption_timeout = 2;
               }
               State state = 2;
            }
            SoftPreemption soft_preemption = 3;
            message State {
               message Counters {
                  uint64 in_ack_messages = 1;
                  uint64 in_hello_messages = 2;
                  uint64 in_path_error_messages = 3;
                  uint64 in_path_messages = 4;
                  uint64 in_path_tear_messages = 5;
                  uint64 in_reservation_error_messages = 6;
                  uint64 in_reservation_messages = 7;
                  uint64 in_reservation_tear_messages = 8;
                  uint64 in_srefresh_messages = 9;
                  uint64 out_ack_messages = 10;
                  uint64 out_hello_messages = 11;
                  uint64 out_path_error_messages = 12;
                  uint64 out_path_messages = 13;
                  uint64 out_path_tear_messages = 14;
                  uint64 out_reservation_error_messages = 15;
                  uint64 out_reservation_messages = 16;
                  uint64 out_reservation_tear_messages = 17;
                  uint64 out_srefresh_messages = 18;
                  uint64 path_timeouts = 19;
                  uint64 rate_limited_messages = 20;
                  uint64 reservation_timeouts = 21;
               }
               Counters counters = 1;
            }
            State state = 4;
         }
         Global global = 1;
         message InterfaceAttributes {
            message Interface {
               message Authentication {
                  message Config {
                     string authentication_key = 1;
                     bool enable = 2;
                  }
                  Config config = 1;
                  message State {
                     string authentication_key = 1;
                     bool enable = 2;
                  }
                  State state = 2;
               }
               Authentication authentication = 1;
               message BandwidthReservations {
                  message BandwidthReservation {
                     string priority = 1;
                     message State {
                        uint64 active_reservations_count = 1;
                        uint64 available_bandwidth = 2;
                        uint64 highwater_mark = 3;
                        string priority = 4;
                        uint64 reserved_bandwidth = 5;
                     }
                     State state = 2;
                  }
                  repeated BandwidthReservation bandwidth_reservation = 1;
               }
               BandwidthReservations bandwidth_reservations = 2;
               message Config {
                  string interface_id = 1;
               }
               Config config = 3;
               message Hellos {
                  message Config {
                     uint32 hello_interval = 1;
                     bool refresh_reduction = 2;
                  }
                  Config config = 1;
                  message State {
                     uint32 hello_interval = 1;
                     bool refresh_reduction = 2;
                  }
                  State state = 2;
               }
               Hellos hellos = 4;
               string interface_id = 5;
               message InterfaceRef {
                  message Config {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  Config config = 1;
                  message State {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  State state = 2;
               }
               InterfaceRef interface_ref = 6;
               message Protection {
                  message Config {
                     uint32 bypass_optimize_interval = 1;
                     string link_protection_style_requested = 2;
                  }
                  Config config = 1;
                  message State {
                     uint32 bypass_optimize_interval = 1;
                     string link_protection_style_requested = 2;
                  }
                  State state = 2;
               }
               Protection protection = 7;
               message State {
                  message Counters {
                     uint64 in_ack_messages = 1;
                     uint64 in_hello_messages = 2;
                     uint64 in_path_error_messages = 3;
                     uint64 in_path_messages = 4;
                     uint64 in_path_tear_messages = 5;
                     uint64 in_reservation_error_messages = 6;
                     uint64 in_reservation_messages = 7;
                     uint64 in_reservation_tear_messages = 8;
                     uint64 in_srefresh_messages = 9;
                     uint64 out_ack_messages = 10;
                     uint64 out_hello_messages = 11;
                     uint64 out_path_error_messages = 12;
                     uint64 out_path_messages = 13;
                     uint64 out_path_tear_messages = 14;
                     uint64 out_reservation_error_messages = 15;
                     uint64 out_reservation_messages = 16;
                     uint64 out_reservation_tear_messages = 17;
                     uint64 out_srefresh_messages = 18;
                  }
                  Counters counters = 1;
                  string interface_id = 2;
               }
               State state = 8;
               message Subscription {
                  message Config {
                     uint32 subscription = 1;
                  }
                  Config config = 1;
                  message State {
                     uint64 calculated_absolute_subscription_bw = 1;
                     uint32 subscription = 2;
                  }
                  State state = 2;
               }
               Subscription subscription = 9;
            }
            repeated Interface interface = 1;
         }
         InterfaceAttributes interface_attributes = 2;
         message Neighbors {
            message Neighbor {
               string address = 1;
               message State {
                  string address = 1;
                  string detected_interface = 2;
                  enum NeighborStatus {
                     NeighborStatus_DOWN = 0;
                     NeighborStatus_UP = 1;
                  };
                  NeighborStatus neighbor_status = 3;
                  bool refresh_reduction = 4;
               }
               State state = 2;
            }
            repeated Neighbor neighbor = 1;
         }
         Neighbors neighbors = 3;
         message Sessions {
            message Session {
               uint64 local_index = 1;
               message RecordRouteObjects {
                  message RecordRouteObject {
                     uint32 index = 1;
                     message State {
                        string address = 1;
                        uint32 index = 2;
                        uint32 reported_flags = 3;
                        string reported_label = 4;
                     }
                     State state = 2;
                  }
                  repeated RecordRouteObject record_route_object = 1;
               }
               RecordRouteObjects record_route_objects = 2;
               message State {
                  string destination_address = 1;
                  string label_in = 2;
                  string label_out = 3;
                  uint64 local_index = 4;
                  uint32 lsp_id = 5;
                  string protection_requested = 6;
                  message SenderTspec {
                     string peak_data_rate = 1;
                     bytes rate = 2;
                     bytes size = 3;
                  }
                  SenderTspec sender_tspec = 7;
                  string session_name = 8;
                  string source_address = 9;
                  enum Status {
                     Status_DOWN = 0;
                     Status_UP = 1;
                  };
                  Status status = 10;
                  uint32 tunnel_id = 11;
                  string type = 12;
               }
               State state = 3;
            }
            repeated Session session = 1;
         }
         Sessions sessions = 4;
      }
      RsvpTe rsvp_te = 2;
      message SegmentRouting {
         message AggregateSidCounters {
            message AggregateSidCounter {
               string mpls_label = 1;
               message State {
                  uint64 in_octets = 1;
                  uint64 in_pkts = 2;
                  string mpls_label = 3;
                  uint64 out_octets = 4;
                  uint64 out_pkts = 5;
               }
               State state = 2;
            }
            repeated AggregateSidCounter aggregate_sid_counter = 1;
         }
         AggregateSidCounters aggregate_sid_counters = 1;
         message Interfaces {
            message Interface {
               message Config {
                  string interface_id = 1;
               }
               Config config = 1;
               string interface_id = 2;
               message InterfaceRef {
                  message Config {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  Config config = 1;
                  message State {
                     string interface = 1;
                     uint32 subinterface = 2;
                  }
                  State state = 2;
               }
               InterfaceRef interface_ref = 3;
               message SidCounters {
                  message SidCounter {
                     message ForwardingClasses {
                        message ForwardingClass {
                           uint32 exp = 1;
                           message State {
                              uint32 exp = 1;
                              uint64 in_octets = 2;
                              uint64 in_pkts = 3;
                              uint64 out_octets = 4;
                              uint64 out_pkts = 5;
                           }
                           State state = 2;
                        }
                        repeated ForwardingClass forwarding_class = 1;
                     }
                     ForwardingClasses forwarding_classes = 1;
                     string mpls_label = 2;
                     message State {
                        uint64 in_octets = 1;
                        uint64 in_pkts = 2;
                        string mpls_label = 3;
                        uint64 out_octets = 4;
                        uint64 out_pkts = 5;
                     }
                     State state = 3;
                  }
                  repeated SidCounter sid_counter = 1;
               }
               SidCounters sid_counters = 4;
               message State {
                  uint64 in_octets = 1;
                  uint64 in_pkts = 2;
                  string interface_id = 3;
                  uint64 out_octets = 4;
                  uint64 out_pkts = 5;
               }
               State state = 5;
            }
            repeated Interface interface = 1;
         }
         Interfaces interfaces = 2;
      }
      SegmentRouting segment_routing = 3;
   }
   SignalingProtocols signaling_protocols = 3;
   message TeGlobalAttributes {
      message MplsAdminGroups {
         message AdminGroup {
            string admin_group_name = 1;
            message Config {
               string admin_group_name = 1;
               uint32 bit_position = 2;
            }
            Config config = 2;
            message State {
               string admin_group_name = 1;
               uint32 bit_position = 2;
            }
            State state = 3;
         }
         repeated AdminGroup admin_group = 1;
      }
      MplsAdminGroups mpls_admin_groups = 1;
      message Srlgs {
         message Srlg {
            message Config {
               uint32 cost = 1;
               enum FloodingType {
                  FloodingType_FLOODED_SRLG = 0;
                  FloodingType_STATIC_SRLG = 1;
               };
               FloodingType flooding_type = 2;
               string name = 3;
               uint32 value = 4;
            }
            Config config = 1;
            string name = 2;
            message State {
               uint32 cost = 1;
               enum FloodingType {
                  FloodingType_FLOODED_SRLG = 0;
                  FloodingType_STATIC_SRLG = 1;
               };
               FloodingType flooding_type = 2;
               string name = 3;
               uint32 value = 4;
            }
            State state = 3;
            message StaticSrlgMembers {
               message MembersList {
                  message Config {
                     string from_address = 1;
                     string to_address = 2;
                  }
                  Config config = 1;
                  string from_address = 2;
                  message State {
                     string from_address = 1;
                     string to_address = 2;
                  }
                  State state = 3;
               }
               repeated MembersList members_list = 1;
            }
            StaticSrlgMembers static_srlg_members = 4;
         }
         repeated Srlg srlg = 1;
      }
      Srlgs srlgs = 2;
      message TeLspTimers {
         message Config {
            uint32 cleanup_delay = 1;
            uint32 install_delay = 2;
            uint32 reoptimize_timer = 3;
         }
         Config config = 1;
         message State {
            uint32 cleanup_delay = 1;
            uint32 install_delay = 2;
            uint32 reoptimize_timer = 3;
         }
         State state = 2;
      }
      TeLspTimers te_lsp_timers = 3;
   }
   TeGlobalAttributes te_global_attributes = 4;
   message TeInterfaceAttributes {
      message Interface {
         message Config {
            repeated string admin_group = 1;
            string interface_id = 2;
            repeated string srlg_membership = 3;
            uint32 te_metric = 4;
         }
         Config config = 1;
         message IgpFloodingBandwidth {
            message Config {
               uint32 delta_percentage = 1;
               repeated uint32 down_thresholds = 2;
               enum ThresholdSpecification {
                  ThresholdSpecification_MIRRORED_UP_DOWN = 0;
                  ThresholdSpecification_SEPARATE_UP_DOWN = 1;
               };
               ThresholdSpecification threshold_specification = 3;
               enum ThresholdType {
                  ThresholdType_DELTA = 0;
                  ThresholdType_THRESHOLD_CROSSED = 1;
               };
               ThresholdType threshold_type = 4;
               repeated uint32 up_down_thresholds = 5;
               repeated uint32 up_thresholds = 6;
            }
            Config config = 1;
            message State {
               uint32 delta_percentage = 1;
               repeated uint32 down_thresholds = 2;
               enum ThresholdSpecification {
                  ThresholdSpecification_MIRRORED_UP_DOWN = 0;
                  ThresholdSpecification_SEPARATE_UP_DOWN = 1;
               };
               ThresholdSpecification threshold_specification = 3;
               enum ThresholdType {
                  ThresholdType_DELTA = 0;
                  ThresholdType_THRESHOLD_CROSSED = 1;
               };
               ThresholdType threshold_type = 4;
               repeated uint32 up_down_thresholds = 5;
               repeated uint32 up_thresholds = 6;
            }
            State state = 2;
         }
         IgpFloodingBandwidth igp_flooding_bandwidth = 2;
         string interface_id = 3;
         message InterfaceRef {
            message Config {
               string interface = 1;
               uint32 subinterface = 2;
            }
            Config config = 1;
            message State {
               string interface = 1;
               uint32 subinterface = 2;
            }
            State state = 2;
         }
         InterfaceRef interface_ref = 4;
         message State {
            repeated string admin_group = 1;
            string interface_id = 2;
            repeated string srlg_membership = 3;
            uint32 te_metric = 4;
         }
         State state = 5;
      }
      repeated Interface interface = 1;
   }
   TeInterfaceAttributes te_interface_attributes = 5;
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


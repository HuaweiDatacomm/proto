syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-02-21 17:42:44
// ProtoYang-version 1
// module ietf-interfaces
// revision 2018-02-20
// revision 2014-05-08
// namespace urn:ietf:params:xml:ns:yang:ietf-interfaces

package ietf_interfaces;

message Interfaces {
   message Interface {
      string description = 1 [json_name = "description"];
      bool enabled = 2 [json_name = "enabled"];
      enum LinkUpDownTrapEnable {
         INVALID_ENUM_VALUE_LinkUpDownTrapEnable = 0;
         LinkUpDownTrapEnable_ENABLED = 1;
         LinkUpDownTrapEnable_DISABLED = 2;
      };
      LinkUpDownTrapEnable link_up_down_trap_enable = 3 [json_name = "link-up-down-trap-enable"];
      string name = 4 [json_name = "name"];
      string type = 5 [json_name = "type"];
      enum AdminStatus {
         INVALID_ENUM_VALUE_AdminStatus = 0;
         AdminStatus_UP = 1;
         AdminStatus_DOWN = 2;
         AdminStatus_TESTING = 3;
      };
      AdminStatus admin_status = 6 [json_name = "admin-status"];
      enum OperStatus {
         INVALID_ENUM_VALUE_OperStatus = 0;
         OperStatus_UP = 1;
         OperStatus_DOWN = 2;
         OperStatus_TESTING = 3;
         OperStatus_UNKNOWN = 4;
         OperStatus_DORMANT = 5;
         OperStatus_NOTX_PRESENT = 6;
         OperStatus_LOWERX_LAYERX_DOWN = 7;
      };
      OperStatus oper_status = 7 [json_name = "oper-status"];
      string last_change = 8 [json_name = "last-change"];
      int32 if_index = 9 [json_name = "if-index"];
      string phys_address = 10 [json_name = "phys-address"];
      repeated string higher_layer_if = 11 [json_name = "higher-layer-if"];
      repeated string lower_layer_if = 12 [json_name = "lower-layer-if"];
      uint64 speed = 13 [json_name = "speed"];
      message Statistics {
         string discontinuity_time = 1 [json_name = "discontinuity-time"];
         uint64 in_octets = 2 [json_name = "in-octets"];
         uint64 in_unicast_pkts = 3 [json_name = "in-unicast-pkts"];
         uint64 in_broadcast_pkts = 4 [json_name = "in-broadcast-pkts"];
         uint64 in_multicast_pkts = 5 [json_name = "in-multicast-pkts"];
         uint32 in_discards = 6 [json_name = "in-discards"];
         uint32 in_errors = 7 [json_name = "in-errors"];
         uint32 in_unknown_protos = 8 [json_name = "in-unknown-protos"];
         uint64 out_octets = 9 [json_name = "out-octets"];
         uint64 out_unicast_pkts = 10 [json_name = "out-unicast-pkts"];
         uint64 out_broadcast_pkts = 11 [json_name = "out-broadcast-pkts"];
         uint64 out_multicast_pkts = 12 [json_name = "out-multicast-pkts"];
         uint32 out_discards = 13 [json_name = "out-discards"];
         uint32 out_errors = 14 [json_name = "out-errors"];
      }
      Statistics statistics = 14 [json_name = "statistics"];
      message Ipv4 {
         bool enabled = 1 [json_name = "enabled"];
         bool forwarding = 2 [json_name = "forwarding"];
         uint32 mtu = 3 [json_name = "mtu"];
         message Address {
            string ip = 1 [json_name = "ip"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DHCP = 2;
               Origin_LINKX_LAYER = 3;
               Origin_RANDOM = 4;
            };
            Origin origin = 2 [json_name = "origin"];
            message Subnet_PrefixLength {
               uint32 prefix_length = 1 [json_name = "prefix-length"];
            }
            message Subnet_Netmask {
               string netmask6 = 1 [json_name = "netmask"];
            }
            oneof Subnet {
               Subnet_PrefixLength subnet_prefix_length = 3 [json_name = "prefix-length"];
               Subnet_Netmask subnet_netmask = 4 [json_name = "netmask"];
            }
         }
         repeated Address address = 4 [json_name = "address"];
         message Neighbor {
            string ip = 1 [json_name = "ip"];
            string link_layer_address = 2 [json_name = "link-layer-address"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DYNAMIC = 2;
            };
            Origin origin = 3 [json_name = "origin"];
         }
         repeated Neighbor neighbor = 5 [json_name = "neighbor"];
         string bind_ni_name = 6 [json_name = "bind-ni-name"];
      }
      Ipv4 ipv4 = 15 [json_name = "ipv4"];
      message Ipv6 {
         bool enabled = 1 [json_name = "enabled"];
         bool forwarding = 2 [json_name = "forwarding"];
         uint32 mtu = 3 [json_name = "mtu"];
         message Address {
            string ip = 1 [json_name = "ip"];
            uint32 prefix_length = 2 [json_name = "prefix-length"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DHCP = 2;
               Origin_LINKX_LAYER = 3;
               Origin_RANDOM = 4;
            };
            Origin origin = 3 [json_name = "origin"];
            enum Status {
               Status_PREFERRED = 0;
               Status_DEPRECATED = 1;
               Status_INVALID = 2;
               Status_INACCESSIBLE = 3;
               Status_UNKNOWN = 4;
               Status_TENTATIVE = 5;
               Status_DUPLICATE = 6;
               Status_OPTIMISTIC = 7;
            };
            Status status = 4 [json_name = "status"];
         }
         repeated Address address = 4 [json_name = "address"];
         message Neighbor {
            string ip = 1 [json_name = "ip"];
            string link_layer_address = 2 [json_name = "link-layer-address"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DYNAMIC = 2;
            };
            Origin origin = 3 [json_name = "origin"];
            bool is_router = 4 [json_name = "is-router"];
            enum State {
               State_INCOMPLETE = 0;
               State_REACHABLE = 1;
               State_STALE = 2;
               State_DELAY = 3;
               State_PROBE = 4;
            };
            State state = 5 [json_name = "state"];
         }
         repeated Neighbor neighbor = 5 [json_name = "neighbor"];
         uint32 dup_addr_detect_transmits = 6 [json_name = "dup-addr-detect-transmits"];
         message Autoconf {
            bool create_global_addresses = 1 [json_name = "create-global-addresses"];
            bool create_temporary_addresses = 2 [json_name = "create-temporary-addresses"];
            uint32 temporary_valid_lifetime = 3 [json_name = "temporary-valid-lifetime"];
            uint32 temporary_preferred_lifetime = 4 [json_name = "temporary-preferred-lifetime"];
         }
         Autoconf autoconf = 7 [json_name = "autoconf"];
         string bind_ni_name = 8 [json_name = "bind-ni-name"];
         message Ipv6RouterAdvertisements {
            bool send_advertisements = 1 [json_name = "send-advertisements"];
            uint32 max_rtr_adv_interval = 2 [json_name = "max-rtr-adv-interval"];
            uint32 min_rtr_adv_interval = 3 [json_name = "min-rtr-adv-interval"];
            bool managed_flag = 4 [json_name = "managed-flag"];
            bool other_config_flag = 5 [json_name = "other-config-flag"];
            uint32 link_mtu = 6 [json_name = "link-mtu"];
            uint32 reachable_time = 7 [json_name = "reachable-time"];
            uint32 retrans_timer = 8 [json_name = "retrans-timer"];
            uint32 cur_hop_limit = 9 [json_name = "cur-hop-limit"];
            uint32 default_lifetime = 10 [json_name = "default-lifetime"];
            message PrefixList {
               message Prefix {
                  string prefix_spec = 1 [json_name = "prefix-spec"];
                  message ControlAdvPrefixes_NoAdvertise {
                     bool no_advertise = 1 [json_name = "no-advertise"];
                  }
                  message ControlAdvPrefixes_Advertise {
                     uint32 valid_lifetime = 1 [json_name = "valid-lifetime"];
                     bool on_link_flag = 2 [json_name = "on-link-flag"];
                     uint32 preferred_lifetime = 3 [json_name = "preferred-lifetime"];
                     bool autonomous_flag = 4 [json_name = "autonomous-flag"];
                  }
                  oneof ControlAdvPrefixes {
                     ControlAdvPrefixes_NoAdvertise control_adv_prefixes_no_advertise = 2 [json_name = "no-advertise"];
                     ControlAdvPrefixes_Advertise control_adv_prefixes_advertise = 3 [json_name = "advertise"];
                  }
               }
               repeated Prefix prefix = 1 [json_name = "prefix"];
            }
            PrefixList prefix_list = 11 [json_name = "prefix-list"];
         }
         Ipv6RouterAdvertisements ipv6_router_advertisements = 9 [json_name = "ipv6-router-advertisements"];
      }
      Ipv6 ipv6 = 16 [json_name = "ipv6"];
      string bind_ni_name = 17 [json_name = "bind-ni-name"];
      message Line {
         repeated string supported_mode = 1 [json_name = "supported-mode"];
         repeated string configured_mode = 2 [json_name = "configured-mode"];
         message Line4 {
            message ProfileConfig_NoProfilesAttached {
               bool no_profiles_attached = 1 [json_name = "no-profiles-attached"];
            }
            message ProfileConfig_DirectAttachmentMode {
               string time_division_duplexing_profile = 1 [json_name = "time-division-duplexing-profile"];
               string downstream_data_rate_profile = 2 [json_name = "downstream-data-rate-profile"];
               string upstream_data_rate_profile = 3 [json_name = "upstream-data-rate-profile"];
               string low_power_data_rate_profile = 4 [json_name = "low-power-data-rate-profile"];
               string line_spectrum_profile = 5 [json_name = "line-spectrum-profile"];
               string upstream_power_back_off_profile = 6 [json_name = "upstream-power-back-off-profile"];
               string radio_frequency_interference_profile = 7 [json_name = "radio-frequency-interference-profile"];
               string noise_margin_profile = 8 [json_name = "noise-margin-profile"];
               string fast_rate_adaptation_profile = 9 [json_name = "fast-rate-adaptation-profile"];
               string retransmission_profile = 10 [json_name = "retransmission-profile"];
               string fast_retrain_policy_profile = 11 [json_name = "fast-retrain-policy-profile"];
               string vectoring_profile = 12 [json_name = "vectoring-profile"];
            }
            message ProfileConfig_IndirectAttachmentMode {
               string line_config_vector = 1 [json_name = "line-config-vector"];
            }
            oneof ProfileConfig {
               ProfileConfig_NoProfilesAttached profile_config_no_profiles_attached = 1 [json_name = "no-profiles-attached"];
               ProfileConfig_DirectAttachmentMode profile_config_direct_attachment_mode = 2 [json_name = "direct-attachment-mode"];
               ProfileConfig_IndirectAttachmentMode profile_config_indirect_attachment_mode = 3 [json_name = "indirect-attachment-mode"];
            }
            string threshold_template = 4 [json_name = "threshold-template"];
            message TestMode {
               bool rtx_tc_test_mode = 1 [json_name = "rtx-tc-test-mode"];
               bool tps_tc_test_mode = 2 [json_name = "tps-tc-test-mode"];
               bool dra_test_mode = 3 [json_name = "dra-test-mode"];
            }
            TestMode test_mode = 5 [json_name = "test-mode"];
            message UpdateTest {
               message FtuO {
                  enum UpdateNeTest {
                     UpdateNeTest_GROUP1 = 0;
                     UpdateNeTest_GROUP2 = 1;
                  };
                  repeated UpdateNeTest update_ne_test = 1 [json_name = "update-ne-test"];
               }
               FtuO ftu_o = 1 [json_name = "ftu-o"];
               message FtuR {
                  enum UpdateFeTest {
                     UpdateFeTest_GROUP1 = 0;
                     UpdateFeTest_GROUP2 = 1;
                  };
                  repeated UpdateFeTest update_fe_test = 1 [json_name = "update-fe-test"];
               }
               FtuR ftu_r = 2 [json_name = "ftu-r"];
            }
            UpdateTest update_test = 6 [json_name = "update-test"];
            message ReadTest {
               message Downstream {
                  string xlog_disturber_vce_port_index = 1 [json_name = "xlog-disturber-vce-port-index"];
               }
               Downstream downstream = 1 [json_name = "downstream"];
            }
            ReadTest read_test = 7 [json_name = "read-test"];
            message LinkState {
               enum LinkStateForced {
                  LinkStateForced_NOX_LINKX_STATE = 0;
                  LinkStateForced_L0X_LINKX_STATE = 1;
                  LinkStateForced_L2X_1NX_LINKX_STATE = 2;
                  LinkStateForced_L2X_1BX_LINKX_STATE = 3;
                  LinkStateForced_L2X_2X_LINKX_STATE = 4;
               };
               LinkStateForced link_state_forced = 1 [json_name = "link-state-forced"];
            }
            LinkState link_state = 8 [json_name = "link-state"];
         }
         Line4 line4 = 3 [json_name = "line"];
      }
      Line line = 18 [json_name = "line"];
      message TmRoot {
         message ChildrenType_Queues {
            message Queue {
               uint32 local_queue_id = 1 [json_name = "local-queue-id"];
               string bac_name = 2 [json_name = "bac-name"];
               message QueueSchedulingCfgType_Inline {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 weight = 2 [json_name = "weight"];
                  uint32 extended_weight = 3 [json_name = "extended-weight"];
                  string shaper_name = 4 [json_name = "shaper-name"];
               }
               message QueueSchedulingCfgType_DualRateScheduling {
                  message DualRateScheduling7 {
                     message CirTraffic {
                        uint32 priority = 1 [json_name = "priority"];
                        uint32 extended_weight = 2 [json_name = "extended-weight"];
                     }
                     CirTraffic cir_traffic = 1 [json_name = "cir-traffic"];
                     message EirTraffic {
                        uint32 priority = 1 [json_name = "priority"];
                        uint32 extended_weight = 2 [json_name = "extended-weight"];
                     }
                     EirTraffic eir_traffic = 2 [json_name = "eir-traffic"];
                  }
                  DualRateScheduling7 dual_rate_scheduling = 1 [json_name = "dual-rate-scheduling"];
               }
               oneof QueueSchedulingCfgType {
                  QueueSchedulingCfgType_Inline queue_scheduling_cfg_type_inline = 3 [json_name = "inline"];
                  QueueSchedulingCfgType_DualRateScheduling queue_scheduling_cfg_type_dual_rate_scheduling = 5 [json_name = "dual-rate-scheduling"];
               }
               bool pre_emption = 4 [json_name = "pre-emption"];
            }
            repeated Queue queue = 1 [json_name = "queue"];
            bool queue_statistics_enable = 2 [json_name = "queue-statistics-enable"];
         }
         message ChildrenType_SchedulerNode {
            message SchedulerNode5 {
               string name = 1 [json_name = "name"];
               string description = 2 [json_name = "description"];
               uint32 scheduling_level = 3 [json_name = "scheduling-level"];
               string shaper_name = 4 [json_name = "shaper-name"];
               message ChildrenType_SchedulerNode6 {
                  message ChildSchedulerNodes {
                     string name = 1 [json_name = "name"];
                     message SchedulingType_Inline {
                        uint32 priority = 1 [json_name = "priority"];
                        uint32 weight = 2 [json_name = "weight"];
                        uint32 extended_weight = 3 [json_name = "extended-weight"];
                        string traffic_type = 4 [json_name = "traffic-type"];
                     }
                     message SchedulingType_DualRateScheduling {
                        message CirTraffic {
                           uint32 priority = 1 [json_name = "priority"];
                           uint32 extended_weight = 2 [json_name = "extended-weight"];
                        }
                        CirTraffic cir_traffic = 1 [json_name = "cir-traffic"];
                        message EirTraffic {
                           uint32 priority = 1 [json_name = "priority"];
                           uint32 extended_weight = 2 [json_name = "extended-weight"];
                        }
                        EirTraffic eir_traffic = 2 [json_name = "eir-traffic"];
                     }
                     oneof SchedulingType {
                        SchedulingType_Inline scheduling_type_inline = 2 [json_name = "inline"];
                        SchedulingType_DualRateScheduling scheduling_type_dual_rate_scheduling = 3 [json_name = "dual-rate-scheduling"];
                     }
                  }
                  repeated ChildSchedulerNodes child_scheduler_nodes = 1 [json_name = "child-scheduler-nodes"];
               }
               message ChildrenType_Queue {
                  bool contains_queues = 1 [json_name = "contains-queues"];
                  message Queue7 {
                     uint32 local_queue_id = 1 [json_name = "local-queue-id"];
                     string bac_name = 2 [json_name = "bac-name"];
                     message QueueSchedulingCfgType_Inline {
                        uint32 priority = 1 [json_name = "priority"];
                        uint32 weight = 2 [json_name = "weight"];
                        uint32 extended_weight = 3 [json_name = "extended-weight"];
                        string shaper_name = 4 [json_name = "shaper-name"];
                     }
                     message QueueSchedulingCfgType_DualRateScheduling {
                        message DualRateScheduling9 {
                           message CirTraffic {
                              uint32 priority = 1 [json_name = "priority"];
                              uint32 extended_weight = 2 [json_name = "extended-weight"];
                           }
                           CirTraffic cir_traffic = 1 [json_name = "cir-traffic"];
                           message EirTraffic {
                              uint32 priority = 1 [json_name = "priority"];
                              uint32 extended_weight = 2 [json_name = "extended-weight"];
                           }
                           EirTraffic eir_traffic = 2 [json_name = "eir-traffic"];
                           string shaper_name = 3 [json_name = "shaper-name"];
                        }
                        DualRateScheduling9 dual_rate_scheduling = 1 [json_name = "dual-rate-scheduling"];
                     }
                     oneof QueueSchedulingCfgType {
                        QueueSchedulingCfgType_Inline queue_scheduling_cfg_type_inline = 3 [json_name = "inline"];
                        QueueSchedulingCfgType_DualRateScheduling queue_scheduling_cfg_type_dual_rate_scheduling = 4 [json_name = "dual-rate-scheduling"];
                     }
                     bool pre_emption = 5 [json_name = "pre-emption"];
                  }
                  repeated Queue7 queue7 = 2 [json_name = "queue"];
                  bool queue_statistics_enable = 3 [json_name = "queue-statistics-enable"];
               }
               message ChildrenType_ChildSchedulerQueues {
                  message ChildSchedulerQueues7 {
                     message ChildScheduler {
                        string name = 1 [json_name = "name"];
                        message Queues {
                           message Queue {
                              uint32 queue_id = 1 [json_name = "queue-id"];
                              message SchedulingType_Inline {
                                 uint32 priority = 1 [json_name = "priority"];
                                 uint32 extended_weight = 2 [json_name = "extended-weight"];
                                 string traffic_type = 3 [json_name = "traffic-type"];
                              }
                              oneof SchedulingType {
                                 SchedulingType_Inline scheduling_type_inline = 2 [json_name = "inline"];
                              }
                           }
                           repeated Queue queue = 1 [json_name = "queue"];
                        }
                        Queues queues = 2 [json_name = "queues"];
                     }
                     repeated ChildScheduler child_scheduler = 1 [json_name = "child-scheduler"];
                  }
                  ChildSchedulerQueues7 child_scheduler_queues = 1 [json_name = "child-scheduler-queues"];
               }
               oneof ChildrenType {
                  ChildrenType_SchedulerNode6 children_type_scheduler_node = 5 [json_name = "scheduler-node"];
                  ChildrenType_Queue children_type_queue = 6 [json_name = "queue"];
                  ChildrenType_ChildSchedulerQueues children_type_child_scheduler_queues = 7 [json_name = "child-scheduler-queues"];
               }
            }
            repeated SchedulerNode5 scheduler_node = 1 [json_name = "scheduler-node"];
            message ChildSchedulerNodes {
               string name = 1 [json_name = "name"];
               message SchedulingType_Inline {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 weight = 2 [json_name = "weight"];
                  uint32 extended_weight = 3 [json_name = "extended-weight"];
               }
               message SchedulingType_DualRateScheduling {
                  message CirTraffic {
                     uint32 priority = 1 [json_name = "priority"];
                     uint32 extended_weight = 2 [json_name = "extended-weight"];
                  }
                  CirTraffic cir_traffic = 1 [json_name = "cir-traffic"];
                  message EirTraffic {
                     uint32 priority = 1 [json_name = "priority"];
                     uint32 extended_weight = 2 [json_name = "extended-weight"];
                  }
                  EirTraffic eir_traffic = 2 [json_name = "eir-traffic"];
               }
               oneof SchedulingType {
                  SchedulingType_Inline scheduling_type_inline = 2 [json_name = "inline"];
                  SchedulingType_DualRateScheduling scheduling_type_dual_rate_scheduling = 3 [json_name = "dual-rate-scheduling"];
               }
            }
            repeated ChildSchedulerNodes child_scheduler_nodes = 2 [json_name = "child-scheduler-nodes"];
         }
         oneof ChildrenType {
            ChildrenType_Queues children_type_queues = 1 [json_name = "queues"];
            ChildrenType_SchedulerNode children_type_scheduler_node = 3 [json_name = "scheduler-node"];
         }
         string tc_id_2_queue_id_mapping_profile_name = 2 [json_name = "tc-id-2-queue-id-mapping-profile-name"];
         string shaper_name = 4 [json_name = "shaper-name"];
      }
      TmRoot tm_root = 19 [json_name = "tm-root"];
      message Ontani {
         message OntaniConfig {
            bool upstream_fec_indicator = 1 [json_name = "upstream-fec-indicator"];
            bool mgnt_gemport_aes_indicator = 2 [json_name = "mgnt-gemport-aes-indicator"];
         }
         OntaniConfig ontani_config = 1 [json_name = "ontani-config"];
      }
      Ontani ontani = 20 [json_name = "ontani"];
      message VOntani {
         message VOntaniConfigData {
            string parent_ref = 1 [json_name = "parent-ref"];
            string expected_serial_number = 2 [json_name = "expected-serial-number"];
            string expected_registration_id = 3 [json_name = "expected-registration-id"];
            string preferred_chanpair = 4 [json_name = "preferred-chanpair"];
            string protection_chanpair = 5 [json_name = "protection-chanpair"];
            uint64 upstream_channel_speed = 6 [json_name = "upstream-channel-speed"];
         }
         VOntaniConfigData v_ontani_config_data = 1 [json_name = "v-ontani-config-data"];
      }
      VOntani v_ontani = 21 [json_name = "v-ontani"];
      repeated string port_layer_if = 22 [json_name = "port-layer-if"];
      message SubifLowerLayer {
         string interface4 = 1 [json_name = "interface"];
      }
      SubifLowerLayer subif_lower_layer = 23 [json_name = "subif-lower-layer"];
      message FrameProcessing_InlineFrameProcessing {
         message InlineFrameProcessing4 {
            message IngressRule {
               message Rule {
                  string name = 1 [json_name = "name"];
                  uint32 priority = 2 [json_name = "priority"];
                  message FlexibleMatch {
                     message MatchCriteria {
                        message FrameFilter_AnyFrame {
                           bool any_frame = 1 [json_name = "any-frame"];
                        }
                        message FrameFilter_DestinationMacAddress {
                           message MacAddress_AnyMulticastMacAddress {
                              bool any_multicast_mac_address = 1 [json_name = "any-multicast-mac-address"];
                           }
                           message MacAddress_UnicastAddress {
                              bool unicast_address = 1 [json_name = "unicast-address"];
                           }
                           message MacAddress_BroadcastAddress {
                              bool broadcast_address = 1 [json_name = "broadcast-address"];
                           }
                           message MacAddress_CfmMulticastAddress {
                              bool cfm_multicast_address = 1 [json_name = "cfm-multicast-address"];
                           }
                           message MacAddress_Ipv4MulticastAddress {
                              bool ipv4_multicast_address = 1 [json_name = "ipv4-multicast-address"];
                           }
                           message MacAddress_Ipv6MulticastAddress {
                              bool ipv6_multicast_address = 1 [json_name = "ipv6-multicast-address"];
                           }
                           message MacAddress_MacAddressFilter {
                              string mac_address_value = 1 [json_name = "mac-address-value"];
                              string mac_address_mask = 2 [json_name = "mac-address-mask"];
                           }
                           oneof MacAddress {
                              MacAddress_AnyMulticastMacAddress mac_address_any_multicast_mac_address = 1 [json_name = "any-multicast-mac-address"];
                              MacAddress_UnicastAddress mac_address_unicast_address = 2 [json_name = "unicast-address"];
                              MacAddress_BroadcastAddress mac_address_broadcast_address = 3 [json_name = "broadcast-address"];
                              MacAddress_CfmMulticastAddress mac_address_cfm_multicast_address = 4 [json_name = "cfm-multicast-address"];
                              MacAddress_Ipv4MulticastAddress mac_address_ipv4_multicast_address = 5 [json_name = "ipv4-multicast-address"];
                              MacAddress_Ipv6MulticastAddress mac_address_ipv6_multicast_address = 6 [json_name = "ipv6-multicast-address"];
                              MacAddress_MacAddressFilter mac_address_mac_address_filter = 7 [json_name = "mac-address-filter"];
                           }
                        }
                        message FrameFilter_DestinationIpv4Address {
                           message Ipv4Address_AnyMulticastIpv4Address {
                              bool any_multicast_ipv4_address = 1 [json_name = "any-multicast-ipv4-address"];
                           }
                           message Ipv4Address_AllHostsMulticastAddress {
                              bool all_hosts_multicast_address = 1 [json_name = "all-hosts-multicast-address"];
                           }
                           message Ipv4Address_RipMulticastAddress {
                              bool rip_multicast_address = 1 [json_name = "rip-multicast-address"];
                           }
                           message Ipv4Address_NtpMulticastAddress {
                              bool ntp_multicast_address = 1 [json_name = "ntp-multicast-address"];
                           }
                           message Ipv4Address_Ipv4Prefix {
                              string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                           }
                           oneof Ipv4Address {
                              Ipv4Address_AnyMulticastIpv4Address ipv4_address_any_multicast_ipv4_address = 1 [json_name = "any-multicast-ipv4-address"];
                              Ipv4Address_AllHostsMulticastAddress ipv4_address_all_hosts_multicast_address = 2 [json_name = "all-hosts-multicast-address"];
                              Ipv4Address_RipMulticastAddress ipv4_address_rip_multicast_address = 3 [json_name = "rip-multicast-address"];
                              Ipv4Address_NtpMulticastAddress ipv4_address_ntp_multicast_address = 4 [json_name = "ntp-multicast-address"];
                              Ipv4Address_Ipv4Prefix ipv4_address_ipv4_prefix = 5 [json_name = "ipv4-prefix"];
                           }
                        }
                        message FrameFilter_DestinationIpv6Address {
                           message Ipv6Address_AnyMulticastIpv6Address {
                              bool any_multicast_ipv6_address = 1 [json_name = "any-multicast-ipv6-address"];
                           }
                           message Ipv6Address_AllNodesMulticastIpv6Address {
                              bool all_nodes_multicast_ipv6_address = 1 [json_name = "all-nodes-multicast-ipv6-address"];
                           }
                           message Ipv6Address_RipMulticastIpv6Address {
                              bool rip_multicast_ipv6_address = 1 [json_name = "rip-multicast-ipv6-address"];
                           }
                           message Ipv6Address_NtpMulticastIpv6Address {
                              bool ntp_multicast_ipv6_address = 1 [json_name = "ntp-multicast-ipv6-address"];
                           }
                           message Ipv6Address_Ipv6Prefix {
                              string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                           }
                           oneof Ipv6Address {
                              Ipv6Address_AnyMulticastIpv6Address ipv6_address_any_multicast_ipv6_address = 1 [json_name = "any-multicast-ipv6-address"];
                              Ipv6Address_AllNodesMulticastIpv6Address ipv6_address_all_nodes_multicast_ipv6_address = 2 [json_name = "all-nodes-multicast-ipv6-address"];
                              Ipv6Address_RipMulticastIpv6Address ipv6_address_rip_multicast_ipv6_address = 3 [json_name = "rip-multicast-ipv6-address"];
                              Ipv6Address_NtpMulticastIpv6Address ipv6_address_ntp_multicast_ipv6_address = 4 [json_name = "ntp-multicast-ipv6-address"];
                              Ipv6Address_Ipv6Prefix ipv6_address_ipv6_prefix = 5 [json_name = "ipv6-prefix"];
                           }
                        }
                        oneof FrameFilter {
                           FrameFilter_AnyFrame frame_filter_any_frame = 1 [json_name = "any-frame"];
                           FrameFilter_DestinationMacAddress frame_filter_destination_mac_address = 2 [json_name = "destination-mac-address"];
                           FrameFilter_DestinationIpv4Address frame_filter_destination_ipv4_address = 3 [json_name = "destination-ipv4-address"];
                           FrameFilter_DestinationIpv6Address frame_filter_destination_ipv6_address = 4 [json_name = "destination-ipv6-address"];
                        }
                        message VlanTagMatchType_MatchAll {
                           bool match_all = 1 [json_name = "match-all"];
                        }
                        message VlanTagMatchType_Untagged {
                           bool untagged10 = 1 [json_name = "untagged"];
                        }
                        message VlanTagMatchType_VlanTagged {
                           message Tag {
                              uint32 index = 1 [json_name = "index"];
                              message Dot1QTag {
                                 string tag_type = 1 [json_name = "tag-type"];
                                 string vlan_id = 2 [json_name = "vlan-id"];
                                 string pbit = 3 [json_name = "pbit"];
                                 string dei = 4 [json_name = "dei"];
                              }
                              Dot1QTag dot1q_tag = 2 [json_name = "dot1q-tag"];
                           }
                           repeated Tag tag = 1 [json_name = "tag"];
                        }
                        oneof VlanTagMatchType {
                           VlanTagMatchType_MatchAll vlan_tag_match_type_match_all = 5 [json_name = "match-all"];
                           VlanTagMatchType_Untagged vlan_tag_match_type_untagged = 6 [json_name = "untagged"];
                           VlanTagMatchType_VlanTagged vlan_tag_match_type_vlan_tagged = 7 [json_name = "vlan-tagged"];
                        }
                        string ethernet_frame_type = 8 [json_name = "ethernet-frame-type"];
                        message Protocols_AnyProtocol {
                           bool any_protocol = 1 [json_name = "any-protocol"];
                        }
                        message Protocols_Protocol {
                           enum Protocol10 {
                              Protocol10_IGMP = 0;
                              Protocol10_MLD = 1;
                              Protocol10_DHCPV4 = 2;
                              Protocol10_DHCPV6 = 3;
                              Protocol10_PPPOEX_DISCOVERY = 4;
                              Protocol10_ICMPV6 = 5;
                              Protocol10_ND = 6;
                              Protocol10_ARP = 7;
                              Protocol10_CFM = 8;
                              Protocol10_DOT1X = 9;
                              Protocol10_LACP = 10;
                           };
                           repeated Protocol10 protocol10 = 1 [json_name = "protocol"];
                        }
                        oneof Protocols {
                           Protocols_AnyProtocol protocols_any_protocol = 9 [json_name = "any-protocol"];
                           Protocols_Protocol protocols_protocol = 10 [json_name = "protocol"];
                        }
                        message OntVlanTagMatchType_MatchAll {
                           bool match_all = 1 [json_name = "match-all"];
                        }
                        message OntVlanTagMatchType_Untagged {
                           bool untagged10 = 1 [json_name = "untagged"];
                           message UntagFlowCar {
                              string flow_car_traffic = 1 [json_name = "flow-car-traffic"];
                           }
                           UntagFlowCar untag_flow_car = 2 [json_name = "untag-flow-car"];
                        }
                        message OntVlanTagMatchType_VlanTagged {
                           message Tag {
                              uint32 index = 1 [json_name = "index"];
                              message Dot1QTag {
                                 string tag_type = 1 [json_name = "tag-type"];
                                 string vlan_id = 2 [json_name = "vlan-id"];
                                 string pbit = 3 [json_name = "pbit"];
                                 string dei = 4 [json_name = "dei"];
                              }
                              Dot1QTag dot1q_tag = 2 [json_name = "dot1q-tag"];
                           }
                           Tag tag = 1 [json_name = "tag"];
                           message EthBundle {
                              uint32 bundle_index = 1 [json_name = "bundle-index"];
                           }
                           EthBundle eth_bundle = 2 [json_name = "eth-bundle"];
                           message TagFlowCar {
                              string flow_car_traffic = 1 [json_name = "flow-car-traffic"];
                           }
                           TagFlowCar tag_flow_car = 3 [json_name = "tag-flow-car"];
                        }
                        oneof OntVlanTagMatchType {
                           OntVlanTagMatchType_MatchAll ont_vlan_tag_match_type_match_all = 11 [json_name = "match-all"];
                           OntVlanTagMatchType_Untagged ont_vlan_tag_match_type_untagged = 12 [json_name = "untagged"];
                           OntVlanTagMatchType_VlanTagged ont_vlan_tag_match_type_vlan_tagged = 13 [json_name = "vlan-tagged"];
                        }
                     }
                     MatchCriteria match_criteria = 1 [json_name = "match-criteria"];
                  }
                  FlexibleMatch flexible_match = 3 [json_name = "flexible-match"];
                  message IngressRewrite {
                     uint32 pop_tags = 1 [json_name = "pop-tags"];
                     message PushTag {
                        uint32 index = 1 [json_name = "index"];
                        message Dot1QTag {
                           string tag_type = 1 [json_name = "tag-type"];
                           string vlan_id = 2 [json_name = "vlan-id"];
                           uint32 vlan_id_from_tag_index_or_discard = 3 [json_name = "vlan-id-from-tag-index-or-discard"];
                           message Pbit_WritePbit0 {
                              bool write_pbit_0 = 1 [json_name = "write-pbit-0"];
                           }
                           message Pbit_CopyPbitFromInputOr0 {
                              uint32 pbit_from_tag_index = 1 [json_name = "pbit-from-tag-index"];
                           }
                           message Pbit_WritePbitValue {
                              uint32 write_pbit = 1 [json_name = "write-pbit"];
                           }
                           message Pbit_GeneratePbitViaProfileOr0 {
                              uint32 pbit_marking_index = 1 [json_name = "pbit-marking-index"];
                           }
                           oneof Pbit {
                              Pbit_WritePbit0 pbit_write_pbit_0 = 4 [json_name = "write-pbit-0"];
                              Pbit_CopyPbitFromInputOr0 pbit_copy_pbit_from_input_or_0 = 5 [json_name = "copy-pbit-from-input-or-0"];
                              Pbit_WritePbitValue pbit_write_pbit_value = 6 [json_name = "write-pbit-value"];
                              Pbit_GeneratePbitViaProfileOr0 pbit_generate_pbit_via_profile_or_0 = 10 [json_name = "generate-pbit-via-profile-or-0"];
                           }
                           message Dei_WriteDei0 {
                              bool write_dei_0 = 1 [json_name = "write-dei-0"];
                           }
                           message Dei_CopyDeiFromInputOr0 {
                              uint32 dei_from_tag_index = 1 [json_name = "dei-from-tag-index"];
                           }
                           message Dei_WriteDei1 {
                              bool write_dei_1 = 1 [json_name = "write-dei-1"];
                           }
                           message Dei_GenerateDeiViaProfileOr0 {
                              uint32 dei_marking_index = 1 [json_name = "dei-marking-index"];
                           }
                           oneof Dei {
                              Dei_WriteDei0 dei_write_dei_0 = 7 [json_name = "write-dei-0"];
                              Dei_CopyDeiFromInputOr0 dei_copy_dei_from_input_or_0 = 8 [json_name = "copy-dei-from-input-or-0"];
                              Dei_WriteDei1 dei_write_dei_1 = 9 [json_name = "write-dei-1"];
                              Dei_GenerateDeiViaProfileOr0 dei_generate_dei_via_profile_or_0 = 11 [json_name = "generate-dei-via-profile-or-0"];
                           }
                        }
                        Dot1QTag dot1q_tag = 2 [json_name = "dot1q-tag"];
                     }
                     repeated PushTag push_tag = 2 [json_name = "push-tag"];
                     message OntPushTag {
                        uint32 index = 1 [json_name = "index"];
                        message Dot1QTag {
                           string tag_type = 1 [json_name = "tag-type"];
                           string vlan_id = 2 [json_name = "vlan-id"];
                           uint32 vlan_id_from_tag_index_or_discard = 3 [json_name = "vlan-id-from-tag-index-or-discard"];
                           message Pbit_WritePbit0 {
                              bool write_pbit_0 = 1 [json_name = "write-pbit-0"];
                           }
                           message Pbit_CopyPbitFromInputOr0 {
                              uint32 pbit_from_tag_index = 1 [json_name = "pbit-from-tag-index"];
                           }
                           message Pbit_WritePbitValue {
                              uint32 write_pbit = 1 [json_name = "write-pbit"];
                           }
                           oneof Pbit {
                              Pbit_WritePbit0 pbit_write_pbit_0 = 4 [json_name = "write-pbit-0"];
                              Pbit_CopyPbitFromInputOr0 pbit_copy_pbit_from_input_or_0 = 5 [json_name = "copy-pbit-from-input-or-0"];
                              Pbit_WritePbitValue pbit_write_pbit_value = 6 [json_name = "write-pbit-value"];
                           }
                           message Dei_WriteDei0 {
                              bool write_dei_0 = 1 [json_name = "write-dei-0"];
                           }
                           message Dei_CopyDeiFromInputOr0 {
                              uint32 dei_from_tag_index = 1 [json_name = "dei-from-tag-index"];
                           }
                           message Dei_WriteDei1 {
                              bool write_dei_1 = 1 [json_name = "write-dei-1"];
                           }
                           oneof Dei {
                              Dei_WriteDei0 dei_write_dei_0 = 7 [json_name = "write-dei-0"];
                              Dei_CopyDeiFromInputOr0 dei_copy_dei_from_input_or_0 = 8 [json_name = "copy-dei-from-input-or-0"];
                              Dei_WriteDei1 dei_write_dei_1 = 9 [json_name = "write-dei-1"];
                           }
                        }
                        Dot1QTag dot1q_tag = 2 [json_name = "dot1q-tag"];
                     }
                     OntPushTag ont_push_tag = 3 [json_name = "ont-push-tag"];
                  }
                  IngressRewrite ingress_rewrite = 4 [json_name = "ingress-rewrite"];
               }
               repeated Rule rule = 1 [json_name = "rule"];
            }
            IngressRule ingress_rule = 1 [json_name = "ingress-rule"];
            message EgressRewrite {
               uint32 pop_tags = 1 [json_name = "pop-tags"];
               message PushTag {
                  uint32 index = 1 [json_name = "index"];
                  message Dot1QTag {
                     string tag_type = 1 [json_name = "tag-type"];
                     string vlan_id = 2 [json_name = "vlan-id"];
                     uint32 vlan_id_from_tag_index_or_discard = 3 [json_name = "vlan-id-from-tag-index-or-discard"];
                     message Pbit_WritePbit0 {
                        bool write_pbit_0 = 1 [json_name = "write-pbit-0"];
                     }
                     message Pbit_CopyPbitFromInputOr0 {
                        uint32 pbit_from_tag_index = 1 [json_name = "pbit-from-tag-index"];
                     }
                     message Pbit_WritePbitValue {
                        uint32 write_pbit = 1 [json_name = "write-pbit"];
                     }
                     message Pbit_GeneratePbitViaProfileOr0 {
                        uint32 pbit_marking_index = 1 [json_name = "pbit-marking-index"];
                     }
                     oneof Pbit {
                        Pbit_WritePbit0 pbit_write_pbit_0 = 4 [json_name = "write-pbit-0"];
                        Pbit_CopyPbitFromInputOr0 pbit_copy_pbit_from_input_or_0 = 5 [json_name = "copy-pbit-from-input-or-0"];
                        Pbit_WritePbitValue pbit_write_pbit_value = 6 [json_name = "write-pbit-value"];
                        Pbit_GeneratePbitViaProfileOr0 pbit_generate_pbit_via_profile_or_0 = 10 [json_name = "generate-pbit-via-profile-or-0"];
                     }
                     message Dei_WriteDei0 {
                        bool write_dei_0 = 1 [json_name = "write-dei-0"];
                     }
                     message Dei_CopyDeiFromInputOr0 {
                        uint32 dei_from_tag_index = 1 [json_name = "dei-from-tag-index"];
                     }
                     message Dei_WriteDei1 {
                        bool write_dei_1 = 1 [json_name = "write-dei-1"];
                     }
                     message Dei_GenerateDeiViaProfileOr0 {
                        uint32 dei_marking_index = 1 [json_name = "dei-marking-index"];
                     }
                     oneof Dei {
                        Dei_WriteDei0 dei_write_dei_0 = 7 [json_name = "write-dei-0"];
                        Dei_CopyDeiFromInputOr0 dei_copy_dei_from_input_or_0 = 8 [json_name = "copy-dei-from-input-or-0"];
                        Dei_WriteDei1 dei_write_dei_1 = 9 [json_name = "write-dei-1"];
                        Dei_GenerateDeiViaProfileOr0 dei_generate_dei_via_profile_or_0 = 11 [json_name = "generate-dei-via-profile-or-0"];
                     }
                  }
                  Dot1QTag dot1q_tag = 2 [json_name = "dot1q-tag"];
               }
               repeated PushTag push_tag = 2 [json_name = "push-tag"];
            }
            EgressRewrite egress_rewrite = 2 [json_name = "egress-rewrite"];
         }
         InlineFrameProcessing4 inline_frame_processing = 1 [json_name = "inline-frame-processing"];
      }
      oneof FrameProcessing {
         FrameProcessing_InlineFrameProcessing frame_processing_inline_frame_processing = 24 [json_name = "inline-frame-processing"];
      }
      message Ani {
         bool upstream_fec = 1 [json_name = "upstream-fec"];
         bool management_gemport_aes_indicator = 2 [json_name = "management-gemport-aes-indicator"];
         uint32 onu_id = 3 [json_name = "onu-id"];
         uint32 management_gemport_id = 4 [json_name = "management-gemport-id"];
         message XponOntAniConfigs {
            enum IsolateSwitch {
               INVALID_ENUM_VALUE_IsolateSwitch = 0;
               IsolateSwitch_ISOLATE = 1;
               IsolateSwitch_UNISOLATE = 2;
            };
            IsolateSwitch isolate_switch = 1 [json_name = "isolate-switch"];
            bool tr069_mngt_enable = 2 [json_name = "tr069-mngt-enable"];
            bool transparent_enable = 3 [json_name = "transparent-enable"];
            enum MulticastMode {
               INVALID_ENUM_VALUE_MulticastMode = 0;
               MulticastMode_IGMPX_SNOOPING = 1;
               MulticastMode_OLTX_CONTROL = 2;
               MulticastMode_UNCONCERN = 3;
            };
            MulticastMode multicast_mode = 4 [json_name = "multicast-mode"];
            message MulticastForward_Untag {
               bool untag6 = 1 [json_name = "untag"];
            }
            message MulticastForward_Tag {
               message Tag6_Translation {
                  message Translation7_VlanId {
                     uint32 vlan_id = 1 [json_name = "vlan-id"];
                  }
                  message Translation7_IgmpUserVlan {
                     bool igmp_user_vlan = 1 [json_name = "igmp-user-vlan"];
                  }
                  oneof Translation7 {
                     Translation7_VlanId translation_vlan_id = 1 [json_name = "vlan-id"];
                     Translation7_IgmpUserVlan translation_igmp_user_vlan = 2 [json_name = "igmp-user-vlan"];
                  }
               }
               message Tag6_Transparent {
                  bool transparent7 = 1 [json_name = "transparent"];
               }
               oneof Tag6 {
                  Tag6_Translation tag_translation = 1 [json_name = "translation"];
                  Tag6_Transparent tag_transparent = 2 [json_name = "transparent"];
               }
            }
            message MulticastForward_Unconcern {
               bool unconcern6 = 1 [json_name = "unconcern"];
            }
            oneof MulticastForward {
               MulticastForward_Untag multicast_forward_untag = 5 [json_name = "untag"];
               MulticastForward_Tag multicast_forward_tag = 6 [json_name = "tag"];
               MulticastForward_Unconcern multicast_forward_unconcern = 7 [json_name = "unconcern"];
            }
            bool mac_learning_enable = 8 [json_name = "mac-learning-enable"];
         }
         XponOntAniConfigs xpon_ont_ani_configs = 5 [json_name = "xpon-ont-ani-configs"];
         message OntPortBundle {
            message EthBundle {
               uint32 bundle_index = 1 [json_name = "bundle-index"];
               message PortList {
                  repeated string port = 1 [json_name = "port"];
               }
               PortList port_list = 2 [json_name = "port-list"];
            }
            repeated EthBundle eth_bundle = 1 [json_name = "eth-bundle"];
         }
         OntPortBundle ont_port_bundle = 6 [json_name = "ont-port-bundle"];
      }
      Ani ani = 29 [json_name = "ani"];
      message OnuVEnet {
         string ani = 1 [json_name = "ani"];
      }
      OnuVEnet onu_v_enet = 30 [json_name = "onu-v-enet"];
      message OnuVVrefpoint {
         string related_onu = 1 [json_name = "related-onu"];
      }
      OnuVVrefpoint onu_v_vrefpoint = 31 [json_name = "onu-v-vrefpoint"];
      message VAni {
         uint32 onu_id = 1 [json_name = "onu-id"];
         string channel_partition = 2 [json_name = "channel-partition"];
         string expected_serial_number = 3 [json_name = "expected-serial-number"];
         string expected_registration_id = 4 [json_name = "expected-registration-id"];
         string preferred_channel_pair = 5 [json_name = "preferred-channel-pair"];
         string protection_channel_pair = 6 [json_name = "protection-channel-pair"];
         uint64 upstream_channel_speed = 7 [json_name = "upstream-channel-speed"];
         bool upstream_fec = 8 [json_name = "upstream-fec"];
         uint32 management_gemport_id = 9 [json_name = "management-gemport-id"];
         bool management_gemport_aes_indicator = 10 [json_name = "management-gemport-aes-indicator"];
         enum OntMngtMode {
            INVALID_ENUM_VALUE_OntMngtMode = 0;
            OntMngtMode_OMCI = 1;
            OntMngtMode_STANDX_ALONE = 2;
         };
         OntMngtMode ont_mngt_mode = 11 [json_name = "ont-mngt-mode"];
         enum QosMode {
            INVALID_ENUM_VALUE_QosMode = 0;
            QosMode_PRIORITYX_QUEUE = 1;
            QosMode_GEMX_CAR = 2;
            QosMode_FLOWX_CAR = 3;
         };
         QosMode qos_mode = 12 [json_name = "qos-mode"];
         string loid = 13 [json_name = "loid"];
         string check_code = 14 [json_name = "check-code"];
         string optic_alm_threshold_prof = 15 [json_name = "optic-alm-threshold-prof"];
         string ont_alarm_policy_prof = 16 [json_name = "ont-alarm-policy-prof"];
         string ont_dot1x_prof = 17 [json_name = "ont-dot1x-prof"];
         enum MappingMode {
            INVALID_ENUM_VALUE_MappingMode = 0;
            MappingMode_VLAN = 1;
            MappingMode_PRIORITY = 2;
            MappingMode_VLANX_PRIORITY = 3;
            MappingMode_PORT = 4;
            MappingMode_PORTX_VLAN = 5;
            MappingMode_PORTX_PRIORITY = 6;
            MappingMode_PORTX_VLANX_PRIORITY = 7;
         };
         MappingMode mapping_mode = 18 [json_name = "mapping-mode"];
      }
      VAni v_ani = 32 [json_name = "v-ani"];
      message OltVEnet {
         string lower_layer_interface = 1 [json_name = "lower-layer-interface"];
      }
      OltVEnet olt_v_enet = 33 [json_name = "olt-v-enet"];
      message Vlan {
         enum PortLinkType {
            PortLinkType_ACCESS = 0;
            PortLinkType_HYBRID = 1;
            PortLinkType_TRUNK = 2;
            PortLinkType_DOT1Q = 3;
         };
         PortLinkType port_link_type = 1 [json_name = "port-link-type"];
         string default_vlan = 2 [json_name = "default-vlan"];
         message LinkType_Hybrid {
            message Hybrid5 {
               repeated string tagged_vlan = 1 [json_name = "tagged-vlan"];
               repeated string untagged_vlan = 2 [json_name = "untagged-vlan"];
            }
            Hybrid5 hybrid5 = 1 [json_name = "hybrid"];
         }
         message LinkType_Trunk {
            message Trunk5 {
               repeated string trunk_vlan = 1 [json_name = "trunk-vlan"];
            }
            Trunk5 trunk5 = 1 [json_name = "trunk"];
         }
         message LinkType_Dot1Q {
            message Dot1Q5 {
               uint32 dot1q_vlan = 1 [json_name = "dot1q-vlan"];
            }
            Dot1Q5 dot1q5 = 1 [json_name = "dot1q"];
         }
         oneof LinkType {
            LinkType_Hybrid link_type_hybrid = 3 [json_name = "hybrid"];
            LinkType_Trunk link_type_trunk = 4 [json_name = "trunk"];
            LinkType_Dot1Q link_type_dot1q = 5 [json_name = "dot1q"];
         }
      }
      Vlan vlan = 34 [json_name = "vlan"];
      message Multicast {
         string igmp_max_bandwidth = 1 [json_name = "igmp-max-bandwidth"];
      }
      Multicast multicast = 35 [json_name = "multicast"];
      message Qos {
         message CarModes {
            enum CarMode {
               INVALID_ENUM_VALUE_CarMode = 0;
               CarMode_SERVICEX_PORT = 1;
               CarMode_PORTX_COS = 2;
            };
            CarMode car_mode = 1 [json_name = "car-mode"];
         }
         CarModes car_modes = 1 [json_name = "car-modes"];
      }
      Qos qos = 36 [json_name = "qos"];
      message Security {
         message AntiDos {
            message PacketRateThresholds {
               uint32 total_threshold = 1 [json_name = "total-threshold"];
               uint32 igmp_threshold = 2 [json_name = "igmp-threshold"];
               uint32 dhcp_threshold = 3 [json_name = "dhcp-threshold"];
               uint32 arp_threshold = 4 [json_name = "arp-threshold"];
               uint32 pppoe_threshold = 5 [json_name = "pppoe-threshold"];
               uint32 nd_threshold = 6 [json_name = "nd-threshold"];
            }
            PacketRateThresholds packet_rate_thresholds = 1 [json_name = "packet-rate-thresholds"];
         }
         AntiDos anti_dos = 1 [json_name = "anti-dos"];
      }
      Security security = 37 [json_name = "security"];
      message TrafficSuppress {
         uint32 broadcast_level = 1 [json_name = "broadcast-level"];
         uint32 multicast_level = 2 [json_name = "multicast-level"];
         uint32 unicast_level = 3 [json_name = "unicast-level"];
      }
      TrafficSuppress traffic_suppress = 38 [json_name = "traffic-suppress"];
      message Ethernet {
         message AutoNegotiation {
            bool enable = 1 [json_name = "enable"];
            enum NegotiationStatus {
               NegotiationStatus_INX_PROGRESS = 0;
               NegotiationStatus_COMPLETE = 1;
               NegotiationStatus_FAILED = 2;
               NegotiationStatus_UNKNOWN = 3;
               NegotiationStatus_NOX_NEGOTIATION = 4;
            };
            NegotiationStatus negotiation_status = 2 [json_name = "negotiation-status"];
         }
         AutoNegotiation auto_negotiation = 1 [json_name = "auto-negotiation"];
         enum Duplex {
            Duplex_FULL = 0;
            Duplex_HALF = 1;
            Duplex_UNKNOWN = 2;
         };
         Duplex duplex = 2 [json_name = "duplex"];
         Decimal64 speed = 3 [json_name = "speed"];
         message FlowControl {
            message Pause {
               enum Direction {
                  Direction_DISABLED = 0;
                  Direction_INGRESSX_ONLY = 1;
                  Direction_EGRESSX_ONLY = 2;
                  Direction_BIX_DIRECTIONAL = 3;
                  Direction_UNDEFINED = 4;
               };
               Direction direction = 1 [json_name = "direction"];
               message Statistics {
                  uint64 in_frames_pause = 1 [json_name = "in-frames-pause"];
                  uint64 out_frames_pause = 2 [json_name = "out-frames-pause"];
               }
               Statistics statistics = 2 [json_name = "statistics"];
            }
            Pause pause = 1 [json_name = "pause"];
            message Pfc {
               bool enable = 1 [json_name = "enable"];
               message Statistics {
                  uint64 in_frames_pfc = 1 [json_name = "in-frames-pfc"];
                  uint64 out_frames_pfc = 2 [json_name = "out-frames-pfc"];
               }
               Statistics statistics = 2 [json_name = "statistics"];
            }
            Pfc pfc = 2 [json_name = "pfc"];
            bool force_flow_control = 3 [json_name = "force-flow-control"];
         }
         FlowControl flow_control = 4 [json_name = "flow-control"];
         uint32 max_frame_length = 5 [json_name = "max-frame-length"];
         bool mac_control_extension_control = 6 [json_name = "mac-control-extension-control"];
         uint64 frame_limit_slow_protocol = 7 [json_name = "frame-limit-slow-protocol"];
         message Capabilities {
            bool auto_negotiation = 1 [json_name = "auto-negotiation"];
         }
         Capabilities capabilities = 8 [json_name = "capabilities"];
         message Statistics {
            message Frame {
               uint64 in_total_frames = 1 [json_name = "in-total-frames"];
               uint64 in_total_octets = 2 [json_name = "in-total-octets"];
               uint64 in_frames = 3 [json_name = "in-frames"];
               uint64 in_multicast_frames = 4 [json_name = "in-multicast-frames"];
               uint64 in_broadcast_frames = 5 [json_name = "in-broadcast-frames"];
               uint64 in_error_fcs_frames = 6 [json_name = "in-error-fcs-frames"];
               uint64 in_error_undersize_frames = 7 [json_name = "in-error-undersize-frames"];
               uint64 in_error_oversize_frames = 8 [json_name = "in-error-oversize-frames"];
               uint64 in_error_mac_internal_frames = 9 [json_name = "in-error-mac-internal-frames"];
               uint64 out_frames = 10 [json_name = "out-frames"];
               uint64 out_multicast_frames = 11 [json_name = "out-multicast-frames"];
               uint64 out_broadcast_frames = 12 [json_name = "out-broadcast-frames"];
               uint64 out_error_mac_internal_frames = 13 [json_name = "out-error-mac-internal-frames"];
            }
            Frame frame = 1 [json_name = "frame"];
            message Phy {
               uint64 in_error_symbol = 1 [json_name = "in-error-symbol"];
               message Lpi {
                  uint64 in_lpi_transitions = 1 [json_name = "in-lpi-transitions"];
                  Decimal64 in_lpi_time = 2 [json_name = "in-lpi-time"];
                  uint64 out_lpi_transitions = 3 [json_name = "out-lpi-transitions"];
                  Decimal64 out_lpi_time = 4 [json_name = "out-lpi-time"];
               }
               Lpi lpi = 2 [json_name = "lpi"];
            }
            Phy phy = 2 [json_name = "phy"];
            message MacControl {
               uint64 in_frames_mac_control_unknown = 1 [json_name = "in-frames-mac-control-unknown"];
               uint64 in_frames_mac_control_extension = 2 [json_name = "in-frames-mac-control-extension"];
               uint64 out_frames_mac_control_extension = 3 [json_name = "out-frames-mac-control-extension"];
            }
            MacControl mac_control = 3 [json_name = "mac-control"];
         }
         Statistics statistics = 9 [json_name = "statistics"];
         message Physical {
            enum LoopbackMode {
               LoopbackMode_NOX_LOOPBACK = 0;
               LoopbackMode_INNERX_LOOPBACK = 1;
               LoopbackMode_OUTERX_LOOPBACK = 2;
            };
            LoopbackMode loopback_mode = 1 [json_name = "loopback-mode"];
            enum Mdi {
               INVALID_ENUM_VALUE_Mdi = 0;
               Mdi_AUTO = 1;
               Mdi_NORMAL = 2;
               Mdi_ACROSS = 3;
            };
            Mdi mdi = 2 [json_name = "mdi"];
            enum PortType {
               INVALID_ENUM_VALUE_PortType = 0;
               PortType_FE = 1;
               PortType_GE = 2;
               PortType_X_10GE = 3;
               PortType_X_100GE = 4;
            };
            PortType port_type = 3 [json_name = "port-type"];
            uint32 port_state_change_times = 4 [json_name = "port-state-change-times"];
         }
         Physical physical = 10 [json_name = "physical"];
         message Logical {
            message TxAutoOff {
               bool enabled = 1 [json_name = "enabled"];
               int32 detect_time = 2 [json_name = "detect-time"];
               enum ResumeDetectMode {
                  ResumeDetectMode_MANUAL = 0;
                  ResumeDetectMode_AUTO = 1;
               };
               ResumeDetectMode resume_detect_mode = 3 [json_name = "resume-detect-mode"];
               int32 resume_detect_interval = 4 [json_name = "resume-detect-interval"];
               int32 resume_detect_duration = 5 [json_name = "resume-detect-duration"];
            }
            TxAutoOff tx_auto_off = 1 [json_name = "tx-auto-off"];
         }
         Logical logical = 11 [json_name = "logical"];
         message EthernetFrame {
            bool jumbo_frame = 1 [json_name = "jumbo-frame"];
            uint32 mtu = 2 [json_name = "mtu"];
         }
         EthernetFrame ethernet_frame = 12 [json_name = "ethernet-frame"];
      }
      Ethernet ethernet = 39 [json_name = "ethernet"];
      message TxAutoOffConfig {
         enum Switch {
            Switch_ENABLE = 0;
            Switch_DISABLE = 1;
         };
         Switch switch = 1 [json_name = "switch"];
         int32 detect_time = 2 [json_name = "detect-time"];
         enum ResumeDetect {
            ResumeDetect_MANUAL = 0;
            ResumeDetect_AUTO = 1;
         };
         ResumeDetect resume_detect = 3 [json_name = "resume-detect"];
         int32 resume_detect_interval = 4 [json_name = "resume-detect-interval"];
         int32 resume_detect_duration = 5 [json_name = "resume-detect-duration"];
      }
      TxAutoOffConfig tx_auto_off_config = 40 [json_name = "tx-auto-off-config"];
      message BridgePort {
         string component_name = 1 [json_name = "component-name"];
         string port_type = 2 [json_name = "port-type"];
         uint32 pvid = 3 [json_name = "pvid"];
         uint32 default_priority = 4 [json_name = "default-priority"];
         message PriorityRegeneration {
            uint32 priority0 = 1 [json_name = "priority0"];
            uint32 priority1 = 2 [json_name = "priority1"];
            uint32 priority2 = 3 [json_name = "priority2"];
            uint32 priority3 = 4 [json_name = "priority3"];
            uint32 priority4 = 5 [json_name = "priority4"];
            uint32 priority5 = 6 [json_name = "priority5"];
            uint32 priority6 = 7 [json_name = "priority6"];
            uint32 priority7 = 8 [json_name = "priority7"];
         }
         PriorityRegeneration priority_regeneration = 5 [json_name = "priority-regeneration"];
         enum PcpSelection {
            PcpSelection_X_8P0D = 0;
            PcpSelection_X_7P1D = 1;
            PcpSelection_X_6P2D = 2;
            PcpSelection_X_5P3D = 3;
         };
         PcpSelection pcp_selection = 6 [json_name = "pcp-selection"];
         message PcpDecodingTable {
            message PcpDecodingMap {
               enum Pcp {
                  Pcp_X_8P0D = 0;
                  Pcp_X_7P1D = 1;
                  Pcp_X_6P2D = 2;
                  Pcp_X_5P3D = 3;
               };
               Pcp pcp = 1 [json_name = "pcp"];
               message PriorityMap {
                  uint32 priority_code_point = 1 [json_name = "priority-code-point"];
                  uint32 priority = 2 [json_name = "priority"];
                  bool drop_eligible = 3 [json_name = "drop-eligible"];
               }
               repeated PriorityMap priority_map = 2 [json_name = "priority-map"];
            }
            repeated PcpDecodingMap pcp_decoding_map = 1 [json_name = "pcp-decoding-map"];
         }
         PcpDecodingTable pcp_decoding_table = 7 [json_name = "pcp-decoding-table"];
         message PcpEncodingTable {
            message PcpEncodingMap {
               enum Pcp {
                  Pcp_X_8P0D = 0;
                  Pcp_X_7P1D = 1;
                  Pcp_X_6P2D = 2;
                  Pcp_X_5P3D = 3;
               };
               Pcp pcp = 1 [json_name = "pcp"];
               message PriorityMap {
                  uint32 priority = 1 [json_name = "priority"];
                  bool dei = 2 [json_name = "dei"];
                  uint32 priority_code_point = 3 [json_name = "priority-code-point"];
               }
               repeated PriorityMap priority_map = 2 [json_name = "priority-map"];
            }
            repeated PcpEncodingMap pcp_encoding_map = 1 [json_name = "pcp-encoding-map"];
         }
         PcpEncodingTable pcp_encoding_table = 8 [json_name = "pcp-encoding-table"];
         bool use_dei = 9 [json_name = "use-dei"];
         bool drop_encoding = 10 [json_name = "drop-encoding"];
         bool service_access_priority_selection = 11 [json_name = "service-access-priority-selection"];
         message ServiceAccessPriority {
            uint32 priority0 = 1 [json_name = "priority0"];
            uint32 priority1 = 2 [json_name = "priority1"];
            uint32 priority2 = 3 [json_name = "priority2"];
            uint32 priority3 = 4 [json_name = "priority3"];
            uint32 priority4 = 5 [json_name = "priority4"];
            uint32 priority5 = 6 [json_name = "priority5"];
            uint32 priority6 = 7 [json_name = "priority6"];
            uint32 priority7 = 8 [json_name = "priority7"];
         }
         ServiceAccessPriority service_access_priority = 12 [json_name = "service-access-priority"];
         message TrafficClass {
            message TrafficClassMap {
               uint32 priority = 1 [json_name = "priority"];
               message AvailableTrafficClass {
                  uint32 num_traffic_class = 1 [json_name = "num-traffic-class"];
                  uint32 traffic_class = 2 [json_name = "traffic-class"];
               }
               repeated AvailableTrafficClass available_traffic_class = 2 [json_name = "available-traffic-class"];
            }
            repeated TrafficClassMap traffic_class_map = 1 [json_name = "traffic-class-map"];
         }
         TrafficClass traffic_class = 13 [json_name = "traffic-class"];
         enum AcceptableFrame {
            AcceptableFrame_ADMITX_ONLYX_VLANX_TAGGEDX_FRAMES = 0;
            AcceptableFrame_ADMITX_ONLYX_UNTAGGEDX_ANDX_PRIORITYX_TAGGED = 1;
            AcceptableFrame_ADMITX_ALLX_FRAMES = 2;
         };
         AcceptableFrame acceptable_frame = 14 [json_name = "acceptable-frame"];
         bool enable_ingress_filtering = 15 [json_name = "enable-ingress-filtering"];
         bool enable_restricted_vlan_registration = 16 [json_name = "enable-restricted-vlan-registration"];
         bool enable_vid_translation_table = 17 [json_name = "enable-vid-translation-table"];
         bool enable_egress_vid_translation_table = 18 [json_name = "enable-egress-vid-translation-table"];
         message ProtocolGroupVidSet {
            uint32 group_id = 1 [json_name = "group-id"];
            repeated uint32 vid = 2 [json_name = "vid"];
         }
         repeated ProtocolGroupVidSet protocol_group_vid_set = 19 [json_name = "protocol-group-vid-set"];
         enum AdminPointToPoint {
            INVALID_ENUM_VALUE_AdminPointToPoint = 0;
            AdminPointToPoint_FORCEX_TRUE = 1;
            AdminPointToPoint_FORCEX_FALSE = 2;
            AdminPointToPoint_AUTO = 3;
         };
         AdminPointToPoint admin_point_to_point = 20 [json_name = "admin-point-to-point"];
         bool protocol_based_vlan_classification = 21 [json_name = "protocol-based-vlan-classification"];
         uint32 max_vid_set_entries = 22 [json_name = "max-vid-set-entries"];
         uint32 port_number = 23 [json_name = "port-number"];
         string address = 24 [json_name = "address"];
         enum Capabilities {
            Capabilities_TAGGING = 0;
            Capabilities_CONFIGURABLEX_ACCEPTABLEX_FRAMEX_TYPE = 1;
            Capabilities_INGRESSX_FILTERING = 2;
         };
         repeated Capabilities capabilities = 25 [json_name = "capabilities"];
         enum TypeCapabilties {
            TypeCapabilties_CUSTOMERX_VLANX_PORT = 0;
            TypeCapabilties_PROVIDERX_NETWORKX_PORT = 1;
            TypeCapabilties_CUSTOMERX_NETWORKX_PORT = 2;
            TypeCapabilties_CUSTOMERX_EDGEX_PORT = 3;
            TypeCapabilties_CUSTOMERX_BACKBONEX_PORT = 4;
            TypeCapabilties_VIRTUALX_INSTANCEX_PORT = 5;
            TypeCapabilties_DX_BRIDGEX_PORT = 6;
            TypeCapabilties_REMOTEX_CUSTOMERX_ACCESSX_PORT = 7;
            TypeCapabilties_STATIONX_FACINGX_BRIDGEX_PORT = 8;
            TypeCapabilties_UPLINKX_ACCESSX_PORT = 9;
            TypeCapabilties_UPLINKX_RELAYX_PORT = 10;
         };
         repeated TypeCapabilties type_capabilties = 26 [json_name = "type-capabilties"];
         bool external = 27 [json_name = "external"];
         bool oper_point_to_point = 28 [json_name = "oper-point-to-point"];
         uint32 media_dependent_overhead = 29 [json_name = "media-dependent-overhead"];
         message Statistics {
            uint64 delay_exceeded_discards = 1 [json_name = "delay-exceeded-discards"];
            uint64 mtu_exceeded_discards = 2 [json_name = "mtu-exceeded-discards"];
            uint64 frame_rx = 3 [json_name = "frame-rx"];
            uint64 octets_rx = 4 [json_name = "octets-rx"];
            uint64 frame_tx = 5 [json_name = "frame-tx"];
            uint64 octets_tx = 6 [json_name = "octets-tx"];
            uint64 discard_inbound = 7 [json_name = "discard-inbound"];
            uint64 forward_outbound = 8 [json_name = "forward-outbound"];
            uint64 discard_lack_of_buffers = 9 [json_name = "discard-lack-of-buffers"];
            uint64 discard_transit_delay_exceeded = 10 [json_name = "discard-transit-delay-exceeded"];
            uint64 discard_on_error = 11 [json_name = "discard-on-error"];
            uint64 discard_on_ingress_filtering = 12 [json_name = "discard-on-ingress-filtering"];
         }
         Statistics statistics = 30 [json_name = "statistics"];
         message VidTranslations {
            uint32 local_vid = 1 [json_name = "local-vid"];
            uint32 relay_vid = 2 [json_name = "relay-vid"];
         }
         repeated VidTranslations vid_translations = 31 [json_name = "vid-translations"];
         message EgressVidTranslations {
            uint32 relay_vid = 1 [json_name = "relay-vid"];
            uint32 local_vid = 2 [json_name = "local-vid"];
         }
         repeated EgressVidTranslations egress_vid_translations = 32 [json_name = "egress-vid-translations"];
      }
      BridgePort bridge_port = 41 [json_name = "bridge-port"];
      message OtnPort {
         bool fec_enabled = 1 [json_name = "fec-enabled"];
         enum OtnSpeed {
            INVALID_ENUM_VALUE_OtnSpeed = 0;
            OtnSpeed_STANDARD = 1;
            OtnSpeed_ADVANCE = 2;
         };
         OtnSpeed otn_speed = 2 [json_name = "otn-speed"];
         enum LoopbackMode {
            LoopbackMode_NOX_LOOPBACK = 0;
            LoopbackMode_INNERX_LOOPBACK = 1;
            LoopbackMode_OUTERX_LOOPBACK = 2;
         };
         LoopbackMode loopback_mode = 3 [json_name = "loopback-mode"];
         enum PortType {
            INVALID_ENUM_VALUE_PortType = 0;
            PortType_X_2X_5G = 1;
            PortType_X_10G = 2;
         };
         PortType port_type = 4 [json_name = "port-type"];
      }
      OtnPort otn_port = 42 [json_name = "otn-port"];
      message XponPortConfigs {
         bool ont_auto_find_switch = 1 [json_name = "ont-auto-find-switch"];
         string optic_alarm_profile = 2 [json_name = "optic-alarm-profile"];
         bool rogue_ont_weak_light_detect_enable = 3 [json_name = "rogue-ont-weak-light-detect-enable"];
         enum WorkMode {
            INVALID_ENUM_VALUE_WorkMode = 0;
            WorkMode_GPON = 1;
            WorkMode_XGPON = 2;
            WorkMode_XGSPON = 3;
            WorkMode_COMBOX_XGPONX_GPONX_AUTO = 4;
            WorkMode_COMBOX_XGPONX_GPONX_WDM = 5;
            WorkMode_COMBOX_XGSPONX_GPONX_AUTO = 6;
            WorkMode_COMBOX_XGSPONX_GPONX_WDM = 7;
            WorkMode_TWDMX_PON = 8;
         };
         WorkMode work_mode = 4 [json_name = "work-mode"];
         string ont_password_renew_interval = 5 [json_name = "ont-password-renew-interval"];
      }
      XponPortConfigs xpon_port_configs = 43 [json_name = "xpon-port-configs"];
      message EthTrunk {
         string description = 1 [json_name = "description"];
         enum TrunkWorkMode {
            TrunkWorkMode_LACP = 0;
            TrunkWorkMode_MANUAL = 1;
         };
         TrunkWorkMode trunk_work_mode = 2 [json_name = "trunk-work-mode"];
         uint32 lacp_key = 3 [json_name = "lacp-key"];
         repeated string assign_interface = 4 [json_name = "assign-interface"];
         enum LoadBalance {
            LoadBalance_DSTX_IP = 0;
            LoadBalance_DSTX_MAC = 1;
            LoadBalance_SRCX_IP = 2;
            LoadBalance_SRCX_MAC = 3;
            LoadBalance_SRCX_DSTX_IP = 4;
            LoadBalance_SRCX_DSTX_MAC = 5;
            LoadBalance_ENHANCED = 6;
            LoadBalance_DIFFLUENCE = 7;
            LoadBalance_MPLSX_LABEL = 8;
         };
         LoadBalance load_balance = 5 [json_name = "load-balance"];
      }
      EthTrunk eth_trunk = 48 [json_name = "eth-trunk"];
      message Vport {
         enum GfpType {
            INVALID_ENUM_VALUE_GfpType = 0;
            GfpType_GFPX_T = 1;
            GfpType_GFPX_F = 2;
         };
         GfpType gfp_type = 1 [json_name = "gfp-type"];
      }
      Vport vport = 53 [json_name = "vport"];
      message ChannelGroup {
         uint32 polling_period = 1 [json_name = "polling-period"];
         enum RamanMitigation {
            RamanMitigation_RAMANX_NONE = 0;
            RamanMitigation_RAMANX_8B10B = 1;
            RamanMitigation_RAMANX_MILLER = 2;
         };
         RamanMitigation raman_mitigation = 2 [json_name = "raman-mitigation"];
         string system_id = 3 [json_name = "system-id"];
         message PonPools {
            message PonPool {
               string name = 1 [json_name = "name"];
               string channel_termination_ref = 2 [json_name = "channel-termination-ref"];
               string alloc_id_values = 3 [json_name = "alloc-id-values"];
               string gemport_values = 4 [json_name = "gemport-values"];
               string onu_id_values = 5 [json_name = "onu-id-values"];
            }
            repeated PonPool pon_pool = 1 [json_name = "pon-pool"];
         }
         PonPools pon_pools = 4 [json_name = "pon-pools"];
      }
      ChannelGroup channel_group = 54 [json_name = "channel-group"];
      message ChannelPartition {
         string channel_group_ref = 1 [json_name = "channel-group-ref"];
         uint32 channel_partition_index = 2 [json_name = "channel-partition-index"];
         bool downstream_fec = 3 [json_name = "downstream-fec"];
         uint32 closest_onu_distance = 4 [json_name = "closest-onu-distance"];
         uint32 maximum_differential_xpon_distance = 5 [json_name = "maximum-differential-xpon-distance"];
         enum AuthenticationMethod {
            AuthenticationMethod_SERIALX_NUMBER = 0;
            AuthenticationMethod_LOID = 1;
            AuthenticationMethod_REGISTRATIONX_ID = 2;
            AuthenticationMethod_OMCI = 3;
            AuthenticationMethod_DOT1X = 4;
         };
         AuthenticationMethod authentication_method = 6 [json_name = "authentication-method"];
         bool multicast_aes_indicator = 7 [json_name = "multicast-aes-indicator"];
      }
      ChannelPartition channel_partition = 55 [json_name = "channel-partition"];
      message ChannelPair {
         string channel_group_ref = 1 [json_name = "channel-group-ref"];
         string channel_partition_ref = 2 [json_name = "channel-partition-ref"];
         string wavelength_prof_ref = 3 [json_name = "wavelength-prof-ref"];
         string channel_pair_type = 4 [json_name = "channel-pair-type"];
         string channel_pair_line_rate = 5 [json_name = "channel-pair-line-rate"];
         uint32 gpon_pon_id_interval = 6 [json_name = "gpon-pon-id-interval"];
      }
      ChannelPair channel_pair = 56 [json_name = "channel-pair"];
      message ChannelTermination {
         string channel_pair_ref = 1 [json_name = "channel-pair-ref"];
         string channel_termination_type = 2 [json_name = "channel-termination-type"];
         bool meant_for_type_b_primary_role = 3 [json_name = "meant-for-type-b-primary-role"];
         uint32 ngpon2_twdm_admin_label = 4 [json_name = "ngpon2-twdm-admin-label"];
         uint32 ngpon2_ptp_admin_label = 5 [json_name = "ngpon2-ptp-admin-label"];
         uint32 xgs_pon_id = 6 [json_name = "xgs-pon-id"];
         uint32 xgpon_pon_id = 7 [json_name = "xgpon-pon-id"];
         string gpon_pon_id = 8 [json_name = "gpon-pon-id"];
         string pon_tag = 9 [json_name = "pon-tag"];
         uint32 ber_calc_period = 10 [json_name = "ber-calc-period"];
         string location = 11 [json_name = "location"];
      }
      ChannelTermination channel_termination = 57 [json_name = "channel-termination"];
      message Channelgroup {
         uint32 polling_period = 1 [json_name = "polling-period"];
         enum RamanMitigation {
            RamanMitigation_RAMAN_NONE = 0;
            RamanMitigation_RAMAN_MILLER = 1;
            RamanMitigation_RAMAN_8B10B = 2;
         };
         RamanMitigation raman_mitigation = 2 [json_name = "raman-mitigation"];
         string system_id = 3 [json_name = "system-id"];
      }
      Channelgroup channelgroup = 58 [json_name = "channelgroup"];
      message Channelpartition {
         string channelgroup_ref = 1 [json_name = "channelgroup-ref"];
         uint32 channelpartition_index = 2 [json_name = "channelpartition-index"];
         bool fec_downstream = 3 [json_name = "fec-downstream"];
         uint32 closest_ont_distance = 4 [json_name = "closest-ont-distance"];
         uint32 max_differential_fiber_distance = 5 [json_name = "max-differential-fiber-distance"];
         enum AuthenticationMethod {
            AuthenticationMethod_SERIALX_NUMBER = 0;
            AuthenticationMethod_LOID = 1;
            AuthenticationMethod_REGISTRATIONX_ID = 2;
            AuthenticationMethod_OMCI = 3;
            AuthenticationMethod_DOT1X = 4;
         };
         AuthenticationMethod authentication_method = 6 [json_name = "authentication-method"];
         bool multicast_aes_indicator = 7 [json_name = "multicast-aes-indicator"];
      }
      Channelpartition channelpartition = 59 [json_name = "channelpartition"];
      message Channelpair {
         string channelgroup_ref = 1 [json_name = "channelgroup-ref"];
         string channelpartition_ref = 2 [json_name = "channelpartition-ref"];
         string wavelength_prof_ref = 3 [json_name = "wavelength-prof-ref"];
         string channelpair_type = 4 [json_name = "channelpair-type"];
         string channelpair_linerate = 5 [json_name = "channelpair-linerate"];
         uint32 gpon_ponid_interval = 6 [json_name = "gpon-ponid-interval"];
         enum GponPonidOdnClass {
            GponPonidOdnClass_CLASSX_A = 0;
            GponPonidOdnClass_CLASSX_B = 1;
            GponPonidOdnClass_CLASSX_BX_PLUS = 2;
            GponPonidOdnClass_CLASSX_C = 3;
            GponPonidOdnClass_CLASSX_CX_PLUS = 4;
            GponPonidOdnClass_CLASSX_AUTO = 255;
         };
         GponPonidOdnClass gpon_ponid_odn_class = 7 [json_name = "gpon-ponid-odn-class"];
      }
      Channelpair channelpair = 60 [json_name = "channelpair"];
      message Channeltermination {
         string channelpair_ref = 1 [json_name = "channelpair-ref"];
         bool meant_for_type_b_primary_role = 2 [json_name = "meant-for-type-b-primary-role"];
         uint32 ngpon2_twdm_admin_label = 3 [json_name = "ngpon2-twdm-admin-label"];
         uint32 ngpon2_ptp_admin_label = 4 [json_name = "ngpon2-ptp-admin-label"];
         uint32 xgs_ponid = 5 [json_name = "xgs-ponid"];
         uint32 xgpon_ponid = 6 [json_name = "xgpon-ponid"];
         string gpon_ponid = 7 [json_name = "gpon-ponid"];
         string pon_tag = 8 [json_name = "pon-tag"];
         uint32 ber_calc_period = 9 [json_name = "ber-calc-period"];
         string location = 10 [json_name = "location"];
         string url_to_reach = 11 [json_name = "url-to-reach"];
      }
      Channeltermination channeltermination = 61 [json_name = "channeltermination"];
      message InterfaceUsage {
         enum InterfaceUsage4 {
            InterfaceUsage4_USERX_PORT = 0;
            InterfaceUsage4_NETWORKX_PORT = 1;
            InterfaceUsage4_SUBTENDEDX_NODEX_PORT = 2;
            InterfaceUsage4_INHERIT = 3;
         };
         InterfaceUsage4 interface_usage = 1 [json_name = "interface-usage"];
      }
      InterfaceUsage interface_usage = 62 [json_name = "interface-usage"];
      message MacLearning {
         uint32 max_number_mac_addresses = 1 [json_name = "max-number-mac-addresses"];
         uint32 number_committed_mac_addresses = 2 [json_name = "number-committed-mac-addresses"];
         bool mac_learning_enable = 3 [json_name = "mac-learning-enable"];
         enum MacLearningFailureAction {
            MacLearningFailureAction_FORWARD = 0;
            MacLearningFailureAction_DISCARD = 1;
         };
         MacLearningFailureAction mac_learning_failure_action = 4 [json_name = "mac-learning-failure-action"];
      }
      MacLearning mac_learning = 63 [json_name = "mac-learning"];
      message EgressTmObjects {
         message SelectTmObjectsMethod_Scheduler {
            string root_if_name = 1 [json_name = "root-if-name"];
            string scheduler_node_name = 2 [json_name = "scheduler-node-name"];
         }
         oneof SelectTmObjectsMethod {
            SelectTmObjectsMethod_Scheduler select_tm_objects_method_scheduler = 1 [json_name = "scheduler"];
         }
      }
      EgressTmObjects egress_tm_objects = 64 [json_name = "egress-tm-objects"];
      string ingress_qos_policy_profile = 65 [json_name = "ingress-qos-policy-profile"];
      string egress_qos_policy_profile = 66 [json_name = "egress-qos-policy-profile"];
   }
   repeated Interface interface = 1 [json_name = "interface"];
}
message InterfacesState {
   message Interface {
      enum AdminStatus {
         INVALID_ENUM_VALUE_AdminStatus = 0;
         AdminStatus_UP = 1;
         AdminStatus_DOWN = 2;
         AdminStatus_TESTING = 3;
      };
      AdminStatus admin_status = 1 [json_name = "admin-status"];
      repeated string higher_layer_if = 2 [json_name = "higher-layer-if"];
      int32 if_index = 3 [json_name = "if-index"];
      string last_change = 4 [json_name = "last-change"];
      repeated string lower_layer_if = 5 [json_name = "lower-layer-if"];
      string name = 6 [json_name = "name"];
      enum OperStatus {
         INVALID_ENUM_VALUE_OperStatus = 0;
         OperStatus_UP = 1;
         OperStatus_DOWN = 2;
         OperStatus_TESTING = 3;
         OperStatus_UNKNOWN = 4;
         OperStatus_DORMANT = 5;
         OperStatus_NOTX_PRESENT = 6;
         OperStatus_LOWERX_LAYERX_DOWN = 7;
      };
      OperStatus oper_status = 7 [json_name = "oper-status"];
      string phys_address = 8 [json_name = "phys-address"];
      uint64 speed = 9 [json_name = "speed"];
      message Statistics {
         string discontinuity_time = 1 [json_name = "discontinuity-time"];
         uint64 in_broadcast_pkts = 2 [json_name = "in-broadcast-pkts"];
         uint32 in_discards = 3 [json_name = "in-discards"];
         uint32 in_errors = 4 [json_name = "in-errors"];
         uint64 in_multicast_pkts = 5 [json_name = "in-multicast-pkts"];
         uint64 in_octets = 6 [json_name = "in-octets"];
         uint64 in_unicast_pkts = 7 [json_name = "in-unicast-pkts"];
         uint32 in_unknown_protos = 8 [json_name = "in-unknown-protos"];
         uint64 out_broadcast_pkts = 9 [json_name = "out-broadcast-pkts"];
         uint32 out_discards = 10 [json_name = "out-discards"];
         uint32 out_errors = 11 [json_name = "out-errors"];
         uint64 out_multicast_pkts = 12 [json_name = "out-multicast-pkts"];
         uint64 out_octets = 13 [json_name = "out-octets"];
         uint64 out_unicast_pkts = 14 [json_name = "out-unicast-pkts"];
         uint64 in_pkts = 15 [json_name = "in-pkts"];
         uint64 in_64_pkts = 16 [json_name = "in-64-pkts"];
         uint64 in_65_127_pkts = 17 [json_name = "in-65-127-pkts"];
         uint64 in_128_255_pkts = 18 [json_name = "in-128-255-pkts"];
         uint64 in_256_511_pkts = 19 [json_name = "in-256-511-pkts"];
         uint64 in_512_1023_pkts = 20 [json_name = "in-512-1023-pkts"];
         uint64 in_1024_1518_pkts = 21 [json_name = "in-1024-1518-pkts"];
         uint64 in_over_1518_pkts = 22 [json_name = "in-over-1518-pkts"];
         uint64 in_oversize_discard_pkts = 23 [json_name = "in-oversize-discard-pkts"];
         uint64 in_frag = 24 [json_name = "in-frag"];
         uint64 in_jabber = 25 [json_name = "in-jabber"];
         uint64 in_fcs_err = 26 [json_name = "in-fcs-err"];
         uint64 in_align_err = 27 [json_name = "in-align-err"];
         uint64 in_fifo_overflow = 28 [json_name = "in-fifo-overflow"];
         uint64 in_pause = 29 [json_name = "in-pause"];
         uint64 in_byte_ok = 30 [json_name = "in-byte-ok"];
         uint64 in_byte_err = 31 [json_name = "in-byte-err"];
         uint64 out_pkts = 32 [json_name = "out-pkts"];
         uint64 out_64_pkts = 33 [json_name = "out-64-pkts"];
         uint64 out_65_127_pkts = 34 [json_name = "out-65-127-pkts"];
         uint64 out_128_255_pkts = 35 [json_name = "out-128-255-pkts"];
         uint64 out_256_511_pkts = 36 [json_name = "out-256-511-pkts"];
         uint64 out_512_1023_pkts = 37 [json_name = "out-512-1023-pkts"];
         uint64 out_1024_1518_pkts = 38 [json_name = "out-1024-1518-pkts"];
         uint64 out_over_1518_pkts = 39 [json_name = "out-over-1518-pkts"];
         uint64 out_pause_pkts = 40 [json_name = "out-pause-pkts"];
         uint64 out_single_col = 41 [json_name = "out-single-col"];
         uint64 out_multi_col = 42 [json_name = "out-multi-col"];
         uint64 out_excess_col = 43 [json_name = "out-excess-col"];
         uint64 out_fifo_overflow = 44 [json_name = "out-fifo-overflow"];
         uint64 out_byte_ok = 45 [json_name = "out-byte-ok"];
         uint64 out_byte_err = 46 [json_name = "out-byte-err"];
         uint64 change_times = 47 [json_name = "change-times"];
         uint64 statistic_duration = 48 [json_name = "statistic-duration"];
      }
      Statistics statistics = 10 [json_name = "statistics"];
      string type = 11 [json_name = "type"];
      message Ipv4 {
         bool forwarding = 1 [json_name = "forwarding"];
         uint32 mtu = 2 [json_name = "mtu"];
         message Address {
            string ip = 1 [json_name = "ip"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DHCP = 2;
               Origin_LINKX_LAYER = 3;
               Origin_RANDOM = 4;
            };
            Origin origin = 2 [json_name = "origin"];
            message Subnet_PrefixLength {
               uint32 prefix_length = 1 [json_name = "prefix-length"];
            }
            message Subnet_Netmask {
               string netmask6 = 1 [json_name = "netmask"];
            }
            oneof Subnet {
               Subnet_PrefixLength subnet_prefix_length = 3 [json_name = "prefix-length"];
               Subnet_Netmask subnet_netmask = 4 [json_name = "netmask"];
            }
         }
         repeated Address address = 3 [json_name = "address"];
         message Neighbor {
            string ip = 1 [json_name = "ip"];
            string link_layer_address = 2 [json_name = "link-layer-address"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DYNAMIC = 2;
            };
            Origin origin = 3 [json_name = "origin"];
         }
         repeated Neighbor neighbor = 4 [json_name = "neighbor"];
      }
      Ipv4 ipv4 = 12 [json_name = "ipv4"];
      message Ipv6 {
         bool forwarding = 1 [json_name = "forwarding"];
         uint32 mtu = 2 [json_name = "mtu"];
         message Address {
            string ip = 1 [json_name = "ip"];
            uint32 prefix_length = 2 [json_name = "prefix-length"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DHCP = 2;
               Origin_LINKX_LAYER = 3;
               Origin_RANDOM = 4;
            };
            Origin origin = 3 [json_name = "origin"];
            enum Status {
               Status_PREFERRED = 0;
               Status_DEPRECATED = 1;
               Status_INVALID = 2;
               Status_INACCESSIBLE = 3;
               Status_UNKNOWN = 4;
               Status_TENTATIVE = 5;
               Status_DUPLICATE = 6;
               Status_OPTIMISTIC = 7;
            };
            Status status = 4 [json_name = "status"];
         }
         repeated Address address = 3 [json_name = "address"];
         message Neighbor {
            string ip = 1 [json_name = "ip"];
            string link_layer_address = 2 [json_name = "link-layer-address"];
            enum Origin {
               Origin_OTHER = 0;
               Origin_STATIC = 1;
               Origin_DYNAMIC = 2;
            };
            Origin origin = 3 [json_name = "origin"];
            bool is_router = 4 [json_name = "is-router"];
            enum State {
               State_INCOMPLETE = 0;
               State_REACHABLE = 1;
               State_STALE = 2;
               State_DELAY = 3;
               State_PROBE = 4;
            };
            State state = 5 [json_name = "state"];
         }
         repeated Neighbor neighbor = 4 [json_name = "neighbor"];
         message Ipv6RouterAdvertisements {
            bool send_advertisements = 1 [json_name = "send-advertisements"];
            uint32 max_rtr_adv_interval = 2 [json_name = "max-rtr-adv-interval"];
            uint32 min_rtr_adv_interval = 3 [json_name = "min-rtr-adv-interval"];
            bool managed_flag = 4 [json_name = "managed-flag"];
            bool other_config_flag = 5 [json_name = "other-config-flag"];
            uint32 link_mtu = 6 [json_name = "link-mtu"];
            uint32 reachable_time = 7 [json_name = "reachable-time"];
            uint32 retrans_timer = 8 [json_name = "retrans-timer"];
            uint32 cur_hop_limit = 9 [json_name = "cur-hop-limit"];
            uint32 default_lifetime = 10 [json_name = "default-lifetime"];
            message PrefixList {
               message Prefix {
                  string prefix_spec = 1 [json_name = "prefix-spec"];
                  uint32 valid_lifetime = 2 [json_name = "valid-lifetime"];
                  bool on_link_flag = 3 [json_name = "on-link-flag"];
                  uint32 preferred_lifetime = 4 [json_name = "preferred-lifetime"];
                  bool autonomous_flag = 5 [json_name = "autonomous-flag"];
               }
               repeated Prefix prefix = 1 [json_name = "prefix"];
            }
            PrefixList prefix_list = 11 [json_name = "prefix-list"];
         }
         Ipv6RouterAdvertisements ipv6_router_advertisements = 5 [json_name = "ipv6-router-advertisements"];
      }
      Ipv6 ipv6 = 13 [json_name = "ipv6"];
      message Line {
         string operational_mode = 1 [json_name = "operational-mode"];
         message Availability {
            string availability_status = 1 [json_name = "availability-status"];
            message Issues {
               message Issue {
                  string tag = 1 [json_name = "tag"];
                  uint32 code = 2 [json_name = "code"];
                  string message = 3 [json_name = "message"];
                  repeated string root_cause = 4 [json_name = "root-cause"];
               }
               repeated Issue issue = 1 [json_name = "issue"];
            }
            Issues issues = 2 [json_name = "issues"];
         }
         Availability availability = 2 [json_name = "availability"];
         message Line4 {
            message Channel {
               message Performance {
                  message Intervals15Min {
                     message Current {
                        message FtuO {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           uint32 error_free_bits = 2 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 3 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 4 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 5 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 6 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 7 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 8 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 9 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 10 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 11 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuO ftu_o = 1 [json_name = "ftu-o"];
                        message FtuR {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           uint32 error_free_bits = 2 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 3 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 4 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 5 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 6 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 7 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 8 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 9 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 10 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 11 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuR ftu_r = 2 [json_name = "ftu-r"];
                     }
                     Current current = 1 [json_name = "current"];
                     uint32 number_of_intervals = 2 [json_name = "number-of-intervals"];
                     uint32 non_valid_intervals = 3 [json_name = "non-valid-intervals"];
                     message History {
                        uint32 interval_number = 1 [json_name = "interval-number"];
                        message FtuO {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                           string time_stamp = 3 [json_name = "time-stamp"];
                           uint32 error_free_bits = 4 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 5 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 6 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 7 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 8 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 9 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 10 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 11 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 12 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 13 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuO ftu_o = 2 [json_name = "ftu-o"];
                        message FtuR {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                           string time_stamp = 3 [json_name = "time-stamp"];
                           uint32 error_free_bits = 4 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 5 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 6 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 7 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 8 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 9 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 10 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 11 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 12 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 13 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuR ftu_r = 3 [json_name = "ftu-r"];
                     }
                     repeated History history = 4 [json_name = "history"];
                  }
                  Intervals15Min intervals_15min = 1 [json_name = "intervals-15min"];
                  message Intervals24Hr {
                     message Current {
                        message FtuO {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           uint32 error_free_bits = 2 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 3 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 4 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 5 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 6 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 7 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 8 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 9 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 10 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 11 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuO ftu_o = 1 [json_name = "ftu-o"];
                        message FtuR {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           uint32 error_free_bits = 2 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 3 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 4 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 5 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 6 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 7 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 8 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 9 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 10 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 11 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuR ftu_r = 2 [json_name = "ftu-r"];
                     }
                     Current current = 1 [json_name = "current"];
                     uint32 number_of_intervals = 2 [json_name = "number-of-intervals"];
                     uint32 non_valid_intervals = 3 [json_name = "non-valid-intervals"];
                     message History {
                        uint32 interval_number = 1 [json_name = "interval-number"];
                        message FtuO {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                           string time_stamp = 3 [json_name = "time-stamp"];
                           uint32 error_free_bits = 4 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 5 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 6 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 7 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 8 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 9 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 10 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 11 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 12 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 13 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuO ftu_o = 2 [json_name = "ftu-o"];
                        message FtuR {
                           uint32 measured_time = 1 [json_name = "measured-time"];
                           bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                           string time_stamp = 3 [json_name = "time-stamp"];
                           uint32 error_free_bits = 4 [json_name = "error-free-bits"];
                           uint32 minimum_error_free_throughput = 5 [json_name = "minimum-error-free-throughput"];
                           uint32 code_violations = 6 [json_name = "code-violations"];
                           uint32 uncorrected_dtus = 7 [json_name = "uncorrected-dtus"];
                           uint32 retransmitted_dtus = 8 [json_name = "retransmitted-dtus"];
                           uint32 minimum_andeftr = 9 [json_name = "minimum-andeftr"];
                           uint32 maximum_andeftr = 10 [json_name = "maximum-andeftr"];
                           uint32 sum_andeftr = 11 [json_name = "sum-andeftr"];
                           uint32 low_andeftr_seconds = 12 [json_name = "low-andeftr-seconds"];
                           uint32 andeftr_defined_seconds = 13 [json_name = "andeftr-defined-seconds"];
                        }
                        FtuR ftu_r = 3 [json_name = "ftu-r"];
                     }
                     repeated History history = 4 [json_name = "history"];
                  }
                  Intervals24Hr intervals_24hr = 2 [json_name = "intervals-24hr"];
               }
               Performance performance = 1 [json_name = "performance"];
               message Status {
                  message Downstream {
                     string net_data_rate = 1 [json_name = "net-data-rate"];
                     string expected_throughput = 4 [json_name = "expected-throughput"];
                     string gamma_data_rate = 7 [json_name = "gamma-data-rate"];
                     string attainable_net_data_rate = 8 [json_name = "attainable-net-data-rate"];
                     string attainable_expected_throughput = 9 [json_name = "attainable-expected-throughput"];
                     string attainable_gamma_data_rate = 10 [json_name = "attainable-gamma-data-rate"];
                     uint32 actual_inp_against_shine = 11 [json_name = "actual-inp-against-shine"];
                     uint32 actual_inp_against_rein = 12 [json_name = "actual-inp-against-rein"];
                     uint32 dtu_fec_codeword_length = 13 [json_name = "dtu-fec-codeword-length"];
                     uint32 dtu_fec_redundancy = 14 [json_name = "dtu-fec-redundancy"];
                     uint32 fec_codewords_per_dtu = 15 [json_name = "fec-codewords-per-dtu"];
                  }
                  Downstream downstream = 1 [json_name = "downstream"];
                  message Upstream {
                     string net_data_rate = 1 [json_name = "net-data-rate"];
                     string expected_throughput = 4 [json_name = "expected-throughput"];
                     string gamma_data_rate = 7 [json_name = "gamma-data-rate"];
                     string attainable_net_data_rate = 8 [json_name = "attainable-net-data-rate"];
                     string attainable_expected_throughput = 9 [json_name = "attainable-expected-throughput"];
                     string attainable_gamma_data_rate = 10 [json_name = "attainable-gamma-data-rate"];
                     uint32 actual_inp_against_shine = 11 [json_name = "actual-inp-against-shine"];
                     uint32 actual_inp_against_rein = 12 [json_name = "actual-inp-against-rein"];
                     uint32 dtu_fec_codeword_length = 13 [json_name = "dtu-fec-codeword-length"];
                     uint32 dtu_fec_redundancy = 14 [json_name = "dtu-fec-redundancy"];
                     uint32 fec_codewords_per_dtu = 15 [json_name = "fec-codewords-per-dtu"];
                  }
                  Upstream upstream = 2 [json_name = "upstream"];
               }
               Status status = 2 [json_name = "status"];
            }
            Channel channel = 1 [json_name = "channel"];
            message Inventory {
               message FtuO {
                  bytes version_number = 2 [json_name = "version-number"];
                  bytes self_test_result = 3 [json_name = "self-test-result"];
                  bytes system_vendor_id = 4 [json_name = "system-vendor-id"];
                  bytes system_serial_number = 5 [json_name = "system-serial-number"];
                  enum ProfilesSupported {
                     ProfilesSupported_GX_9701X_PROFILEX_106A = 0;
                     ProfilesSupported_GX_9701X_PROFILEX_106B = 1;
                     ProfilesSupported_GX_9701X_PROFILEX_212A = 2;
                     ProfilesSupported_GX_9701X_PROFILEX_106C = 3;
                     ProfilesSupported_GX_9701X_PROFILEX_212C = 4;
                  };
                  repeated ProfilesSupported profiles_supported = 6 [json_name = "profiles-supported"];
                  bool annex_x_supported = 7 [json_name = "annex-x-supported"];
                  bool annex_d_supported = 8 [json_name = "annex-d-supported"];
                  string vce_id = 9 [json_name = "vce-id"];
                  string vce_port_index = 10 [json_name = "vce-port-index"];
                  bool idta_supported = 11 [json_name = "idta-supported"];
               }
               FtuO ftu_o = 1 [json_name = "ftu-o"];
               message FtuR {
                  bytes version_number = 2 [json_name = "version-number"];
                  bytes self_test_result = 3 [json_name = "self-test-result"];
                  bytes system_vendor_id = 4 [json_name = "system-vendor-id"];
                  bytes system_serial_number = 5 [json_name = "system-serial-number"];
                  enum ProfilesSupported {
                     ProfilesSupported_GX_9701X_PROFILEX_106A = 0;
                     ProfilesSupported_GX_9701X_PROFILEX_106B = 1;
                     ProfilesSupported_GX_9701X_PROFILEX_212A = 2;
                     ProfilesSupported_GX_9701X_PROFILEX_106C = 3;
                     ProfilesSupported_GX_9701X_PROFILEX_212C = 4;
                  };
                  repeated ProfilesSupported profiles_supported = 6 [json_name = "profiles-supported"];
                  bool annex_x_supported = 7 [json_name = "annex-x-supported"];
                  bool annex_d_supported = 8 [json_name = "annex-d-supported"];
               }
               FtuR ftu_r = 2 [json_name = "ftu-r"];
            }
            Inventory inventory = 2 [json_name = "inventory"];
            message Performance {
               message Intervals15Min {
                  message Current {
                     message FtuO {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        uint32 loss_of_signal = 2 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 3 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 4 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 5 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 6 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 7 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 8 [json_name = "successful-fra"];
                        uint32 successful_rpa = 9 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 10 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 11 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 12 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 13 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 14 [json_name = "unavailable-seconds"];
                        uint32 successful_tiga = 15 [json_name = "successful-tiga"];
                        uint32 full_initializations = 16 [json_name = "full-initializations"];
                        uint32 failed_full_initializations = 17 [json_name = "failed-full-initializations"];
                        uint32 fast_initializations = 18 [json_name = "fast-initializations"];
                        uint32 failed_fast_initializations = 19 [json_name = "failed-fast-initializations"];
                        uint32 loss_of_power_interruptions = 20 [json_name = "loss-of-power-interruptions"];
                        uint32 host_reinit_interruptions = 21 [json_name = "host-reinit-interruptions"];
                        uint32 spontaneous_interruptions = 22 [json_name = "spontaneous-interruptions"];
                     }
                     FtuO ftu_o = 1 [json_name = "ftu-o"];
                     message FtuR {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        uint32 loss_of_signal = 2 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 3 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 4 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 5 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 6 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 7 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 8 [json_name = "successful-fra"];
                        uint32 successful_rpa = 9 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 10 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 11 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 12 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 13 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 14 [json_name = "unavailable-seconds"];
                     }
                     FtuR ftu_r = 2 [json_name = "ftu-r"];
                  }
                  Current current = 1 [json_name = "current"];
                  uint32 number_of_intervals = 2 [json_name = "number-of-intervals"];
                  uint32 non_valid_intervals = 3 [json_name = "non-valid-intervals"];
                  message History {
                     uint32 interval_number = 1 [json_name = "interval-number"];
                     message FtuO {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                        string time_stamp = 3 [json_name = "time-stamp"];
                        uint32 loss_of_signal = 4 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 5 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 6 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 7 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 8 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 9 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 10 [json_name = "successful-fra"];
                        uint32 successful_rpa = 11 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 12 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 13 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 14 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 15 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 16 [json_name = "unavailable-seconds"];
                        uint32 successful_tiga = 17 [json_name = "successful-tiga"];
                        uint32 full_initializations = 18 [json_name = "full-initializations"];
                        uint32 failed_full_initializations = 19 [json_name = "failed-full-initializations"];
                        uint32 fast_initializations = 20 [json_name = "fast-initializations"];
                        uint32 failed_fast_initializations = 21 [json_name = "failed-fast-initializations"];
                        uint32 loss_of_power_interruptions = 22 [json_name = "loss-of-power-interruptions"];
                        uint32 host_reinit_interruptions = 23 [json_name = "host-reinit-interruptions"];
                        uint32 spontaneous_interruptions = 24 [json_name = "spontaneous-interruptions"];
                     }
                     FtuO ftu_o = 2 [json_name = "ftu-o"];
                     message FtuR {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                        string time_stamp = 3 [json_name = "time-stamp"];
                        uint32 loss_of_signal = 4 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 5 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 6 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 7 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 8 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 9 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 10 [json_name = "successful-fra"];
                        uint32 successful_rpa = 11 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 12 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 13 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 14 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 15 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 16 [json_name = "unavailable-seconds"];
                     }
                     FtuR ftu_r = 3 [json_name = "ftu-r"];
                  }
                  repeated History history = 4 [json_name = "history"];
               }
               Intervals15Min intervals_15min = 1 [json_name = "intervals-15min"];
               message Intervals24Hr {
                  message Current {
                     message FtuO {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        uint32 loss_of_signal = 2 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 3 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 4 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 5 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 6 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 7 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 8 [json_name = "successful-fra"];
                        uint32 successful_rpa = 9 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 10 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 11 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 12 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 13 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 14 [json_name = "unavailable-seconds"];
                        uint32 successful_tiga = 15 [json_name = "successful-tiga"];
                        uint32 full_initializations = 16 [json_name = "full-initializations"];
                        uint32 failed_full_initializations = 17 [json_name = "failed-full-initializations"];
                        uint32 fast_initializations = 18 [json_name = "fast-initializations"];
                        uint32 failed_fast_initializations = 19 [json_name = "failed-fast-initializations"];
                        uint32 loss_of_power_interruptions = 20 [json_name = "loss-of-power-interruptions"];
                        uint32 host_reinit_interruptions = 21 [json_name = "host-reinit-interruptions"];
                        uint32 spontaneous_interruptions = 22 [json_name = "spontaneous-interruptions"];
                     }
                     FtuO ftu_o = 1 [json_name = "ftu-o"];
                     message FtuR {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        uint32 loss_of_signal = 2 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 3 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 4 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 5 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 6 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 7 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 8 [json_name = "successful-fra"];
                        uint32 successful_rpa = 9 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 10 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 11 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 12 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 13 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 14 [json_name = "unavailable-seconds"];
                     }
                     FtuR ftu_r = 2 [json_name = "ftu-r"];
                  }
                  Current current = 1 [json_name = "current"];
                  uint32 number_of_intervals = 2 [json_name = "number-of-intervals"];
                  uint32 non_valid_intervals = 3 [json_name = "non-valid-intervals"];
                  message History {
                     uint32 interval_number = 1 [json_name = "interval-number"];
                     message FtuO {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                        string time_stamp = 3 [json_name = "time-stamp"];
                        uint32 loss_of_signal = 4 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 5 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 6 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 7 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 8 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 9 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 10 [json_name = "successful-fra"];
                        uint32 successful_rpa = 11 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 12 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 13 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 14 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 15 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 16 [json_name = "unavailable-seconds"];
                        uint32 successful_tiga = 17 [json_name = "successful-tiga"];
                        uint32 full_initializations = 18 [json_name = "full-initializations"];
                        uint32 failed_full_initializations = 19 [json_name = "failed-full-initializations"];
                        uint32 fast_initializations = 20 [json_name = "fast-initializations"];
                        uint32 failed_fast_initializations = 21 [json_name = "failed-fast-initializations"];
                        uint32 loss_of_power_interruptions = 22 [json_name = "loss-of-power-interruptions"];
                        uint32 host_reinit_interruptions = 23 [json_name = "host-reinit-interruptions"];
                        uint32 spontaneous_interruptions = 24 [json_name = "spontaneous-interruptions"];
                     }
                     FtuO ftu_o = 2 [json_name = "ftu-o"];
                     message FtuR {
                        uint32 measured_time = 1 [json_name = "measured-time"];
                        bool invalid_data_flag = 2 [json_name = "invalid-data-flag"];
                        string time_stamp = 3 [json_name = "time-stamp"];
                        uint32 loss_of_signal = 4 [json_name = "loss-of-signal"];
                        uint32 loss_of_margin = 5 [json_name = "loss-of-margin"];
                        uint32 loss_of_rmc = 6 [json_name = "loss-of-rmc"];
                        uint32 loss_of_power = 7 [json_name = "loss-of-power"];
                        uint32 successful_bit_swaps = 8 [json_name = "successful-bit-swaps"];
                        uint32 successful_autonomous_sra = 9 [json_name = "successful-autonomous-sra"];
                        uint32 successful_fra = 10 [json_name = "successful-fra"];
                        uint32 successful_rpa = 11 [json_name = "successful-rpa"];
                        uint32 errored_seconds = 12 [json_name = "errored-seconds"];
                        uint32 severely_errored_seconds = 13 [json_name = "severely-errored-seconds"];
                        uint32 loss_of_signal_seconds = 14 [json_name = "loss-of-signal-seconds"];
                        uint32 loss_of_rmc_seconds = 15 [json_name = "loss-of-rmc-seconds"];
                        uint32 unavailable_seconds = 16 [json_name = "unavailable-seconds"];
                     }
                     FtuR ftu_r = 3 [json_name = "ftu-r"];
                  }
                  repeated History history = 4 [json_name = "history"];
               }
               Intervals24Hr intervals_24hr = 2 [json_name = "intervals-24hr"];
            }
            Performance performance = 3 [json_name = "performance"];
            message Fast15MinThresholdCrossingAlert {
               string tca_identity = 1 [json_name = "tca-identity"];
            }
            Fast15MinThresholdCrossingAlert fast_15min_threshold_crossing_alert = 4 [json_name = "fast-15min-threshold-crossing-alert"];
            message Fast24HrThresholdCrossingAlert {
               string tca_identity = 1 [json_name = "tca-identity"];
            }
            Fast24HrThresholdCrossingAlert fast_24hr_threshold_crossing_alert = 5 [json_name = "fast-24hr-threshold-crossing-alert"];
            message Status {
               enum Profile {
                  Profile_GX_9701X_PROFILEX_106A = 0;
                  Profile_GX_9701X_PROFILEX_106B = 1;
                  Profile_GX_9701X_PROFILEX_212A = 2;
                  Profile_GX_9701X_PROFILEX_106C = 3;
                  Profile_GX_9701X_PROFILEX_212C = 4;
               };
               repeated Profile profile = 1 [json_name = "profile"];
               enum LinkState {
                  LinkState_L0X_LINKX_STATE = 0;
                  LinkState_L2X_1NX_LINKX_STATE = 1;
                  LinkState_L2X_1BX_LINKX_STATE = 2;
                  LinkState_L2X_2X_LINKX_STATE = 3;
                  LinkState_L3X_LINKX_STATE = 4;
               };
               LinkState link_state = 2 [json_name = "link-state"];
               enum InitializationSuccessFailureCause {
                  InitializationSuccessFailureCause_SUCCESSFUL = 0;
                  InitializationSuccessFailureCause_CONFIGX_ERROR = 1;
                  InitializationSuccessFailureCause_CONFIGX_NOTX_FEASIBLE = 2;
                  InitializationSuccessFailureCause_COMMUNICATIONX_PROBLEM = 3;
                  InitializationSuccessFailureCause_NOX_FARX_ENDX_FTUX_DETECTED = 4;
                  InitializationSuccessFailureCause_UNKNOWN = 5;
               };
               InitializationSuccessFailureCause initialization_success_failure_cause = 3 [json_name = "initialization-success-failure-cause"];
               bool annex_x_enabled = 4 [json_name = "annex-x-enabled"];
               bool annex_d_enabled = 5 [json_name = "annex-d-enabled"];
               bool idta_enabled = 6 [json_name = "idta-enabled"];
               enum CdtaProcedureActualType {
                  CdtaProcedureActualType_DISABLED = 0;
                  CdtaProcedureActualType_ONEX_STEP = 1;
                  CdtaProcedureActualType_TWOX_STEP = 2;
               };
               CdtaProcedureActualType cdta_procedure_actual_type = 7 [json_name = "cdta-procedure-actual-type"];
               message FtuO {
                  message UpdateTest {
                     string time_stamp_at_g1_update = 1 [json_name = "time-stamp-at-g1-update"];
                     string time_stamp_at_g2_update = 2 [json_name = "time-stamp-at-g2-update"];
                     enum LinkStateAtG1Update {
                        LinkStateAtG1Update_L0X_LINKX_STATE = 0;
                        LinkStateAtG1Update_L2X_1NX_LINKX_STATE = 1;
                        LinkStateAtG1Update_L2X_1BX_LINKX_STATE = 2;
                        LinkStateAtG1Update_L2X_2X_LINKX_STATE = 3;
                     };
                     LinkStateAtG1Update link_state_at_g1_update = 3 [json_name = "link-state-at-g1-update"];
                  }
                  UpdateTest update_test = 1 [json_name = "update-test"];
                  message Failures {
                     bool line_initialization_failure = 1 [json_name = "line-initialization-failure"];
                     bool loss_of_signal = 2 [json_name = "loss-of-signal"];
                     bool loss_of_rmc = 3 [json_name = "loss-of-rmc"];
                     bool loss_of_margin = 4 [json_name = "loss-of-margin"];
                     bool loss_of_power = 5 [json_name = "loss-of-power"];
                  }
                  Failures failures = 2 [json_name = "failures"];
               }
               FtuO ftu_o = 8 [json_name = "ftu-o"];
               message FtuR {
                  message UpdateTest {
                     string time_stamp_at_g1_update = 1 [json_name = "time-stamp-at-g1-update"];
                     string time_stamp_at_g2_update = 2 [json_name = "time-stamp-at-g2-update"];
                     enum LinkStateAtG1Update {
                        LinkStateAtG1Update_L0X_LINKX_STATE = 0;
                        LinkStateAtG1Update_L2X_1NX_LINKX_STATE = 1;
                        LinkStateAtG1Update_L2X_1BX_LINKX_STATE = 2;
                        LinkStateAtG1Update_L2X_2X_LINKX_STATE = 3;
                     };
                     LinkStateAtG1Update link_state_at_g1_update = 3 [json_name = "link-state-at-g1-update"];
                  }
                  UpdateTest update_test = 1 [json_name = "update-test"];
                  message Failures {
                     bool loss_of_signal = 1 [json_name = "loss-of-signal"];
                     bool loss_of_rmc = 2 [json_name = "loss-of-rmc"];
                     bool loss_of_margin = 3 [json_name = "loss-of-margin"];
                     bool loss_of_power = 4 [json_name = "loss-of-power"];
                  }
                  Failures failures = 2 [json_name = "failures"];
               }
               FtuR ftu_r = 9 [json_name = "ftu-r"];
               message Downstream {
                  uint32 initialization_last_transmitted_signal = 1 [json_name = "initialization-last-transmitted-signal"];
                  string snr_margin = 2 [json_name = "snr-margin"];
                  uint32 upbo_electrical_length = 5 [json_name = "upbo-electrical-length"];
                  string actual_aggregate_transmit_power = 6 [json_name = "actual-aggregate-transmit-power"];
                  bytes actual_tx_psd_ps = 7 [json_name = "actual-tx-psd-ps"];
                  message Snr {
                     uint32 snr_psd_measurement_time = 1 [json_name = "snr-psd-measurement-time"];
                     uint32 snr_sub_carrier_group_size = 2 [json_name = "snr-sub-carrier-group-size"];
                     bytes snrps = 3 [json_name = "snrps"];
                  }
                  Snr snr = 8 [json_name = "snr"];
                  bytes bitsps = 9 [json_name = "bitsps"];
                  message RobustManagementChannel {
                     string snr_margin = 1 [json_name = "snr-margin"];
                     string snr_margin_in_l2 = 2 [json_name = "snr-margin-in-l2"];
                     bytes bitsps = 3 [json_name = "bitsps"];
                  }
                  RobustManagementChannel robust_management_channel = 10 [json_name = "robust-management-channel"];
                  string signal_attenuation = 11 [json_name = "signal-attenuation"];
                  message Qln {
                     uint32 qln_measurement_time = 1 [json_name = "qln-measurement-time"];
                     uint32 qln_sub_carrier_group_size = 2 [json_name = "qln-sub-carrier-group-size"];
                     bytes qlnps = 3 [json_name = "qlnps"];
                  }
                  Qln qln = 12 [json_name = "qln"];
                  message Hlog {
                     uint32 hlog_measurement_time = 1 [json_name = "hlog-measurement-time"];
                     uint32 hlog_sub_carrier_group_size = 2 [json_name = "hlog-sub-carrier-group-size"];
                     bytes hlogps = 3 [json_name = "hlogps"];
                  }
                  Hlog hlog = 13 [json_name = "hlog"];
                  message Aln {
                     uint32 aln_measurement_time = 1 [json_name = "aln-measurement-time"];
                     uint32 aln_sub_carrier_group_size = 2 [json_name = "aln-sub-carrier-group-size"];
                     bytes alnps = 3 [json_name = "alnps"];
                  }
                  Aln aln = 14 [json_name = "aln"];
                  message Xlog {
                     message Xlogdisturber {
                        string vce_port_index = 1 [json_name = "vce-port-index"];
                     }
                     Xlogdisturber xlogdisturber = 1 [json_name = "xlogdisturber"];
                     message Xlogbands {
                        message Xlog9 {
                           uint32 band_index = 1 [json_name = "band-index"];
                           uint32 start_index = 2 [json_name = "start-index"];
                           uint32 stop_index = 3 [json_name = "stop-index"];
                           uint32 group_size = 4 [json_name = "group-size"];
                        }
                        repeated Xlog9 xlog9 = 1 [json_name = "xlog"];
                     }
                     Xlogbands xlogbands = 2 [json_name = "xlogbands"];
                     bytes xlogps = 3 [json_name = "xlogps"];
                  }
                  Xlog xlog = 15 [json_name = "xlog"];
                  message TimeStamps {
                     string time_stamp_last_successful_bitswap = 1 [json_name = "time-stamp-last-successful-bitswap"];
                     string time_stamp_last_successful_autonomous_sra = 2 [json_name = "time-stamp-last-successful-autonomous-sra"];
                     string time_stamp_last_successful_fra = 3 [json_name = "time-stamp-last-successful-fra"];
                     string time_stamp_last_successful_rpa = 4 [json_name = "time-stamp-last-successful-rpa"];
                     string time_stamp_last_successful_tiga = 5 [json_name = "time-stamp-last-successful-tiga"];
                  }
                  TimeStamps time_stamps = 16 [json_name = "time-stamps"];
               }
               Downstream downstream = 10 [json_name = "downstream"];
               message Upstream {
                  uint32 initialization_last_received_signal = 1 [json_name = "initialization-last-received-signal"];
                  string snr_margin = 2 [json_name = "snr-margin"];
                  uint32 upbo_electrical_length = 5 [json_name = "upbo-electrical-length"];
                  string actual_aggregate_transmit_power = 6 [json_name = "actual-aggregate-transmit-power"];
                  bytes actual_tx_psd_ps = 7 [json_name = "actual-tx-psd-ps"];
                  message Snr {
                     uint32 snr_psd_measurement_time = 1 [json_name = "snr-psd-measurement-time"];
                     uint32 snr_sub_carrier_group_size = 2 [json_name = "snr-sub-carrier-group-size"];
                     bytes snrps = 3 [json_name = "snrps"];
                  }
                  Snr snr = 8 [json_name = "snr"];
                  bytes bitsps = 9 [json_name = "bitsps"];
                  message RobustManagementChannel {
                     string snr_margin = 1 [json_name = "snr-margin"];
                     string snr_margin_in_l2 = 2 [json_name = "snr-margin-in-l2"];
                     bytes bitsps = 3 [json_name = "bitsps"];
                  }
                  RobustManagementChannel robust_management_channel = 10 [json_name = "robust-management-channel"];
                  string signal_attenuation = 11 [json_name = "signal-attenuation"];
                  message Qln {
                     uint32 qln_measurement_time = 1 [json_name = "qln-measurement-time"];
                     uint32 qln_sub_carrier_group_size = 2 [json_name = "qln-sub-carrier-group-size"];
                     bytes qlnps = 3 [json_name = "qlnps"];
                  }
                  Qln qln = 12 [json_name = "qln"];
                  message Hlog {
                     uint32 hlog_measurement_time = 1 [json_name = "hlog-measurement-time"];
                     uint32 hlog_sub_carrier_group_size = 2 [json_name = "hlog-sub-carrier-group-size"];
                     bytes hlogps = 3 [json_name = "hlogps"];
                  }
                  Hlog hlog = 13 [json_name = "hlog"];
                  message TimeStamps {
                     string time_stamp_last_successful_bitswap = 1 [json_name = "time-stamp-last-successful-bitswap"];
                     string time_stamp_last_successful_autonomous_sra = 2 [json_name = "time-stamp-last-successful-autonomous-sra"];
                     string time_stamp_last_successful_fra = 3 [json_name = "time-stamp-last-successful-fra"];
                     string time_stamp_last_successful_rpa = 4 [json_name = "time-stamp-last-successful-rpa"];
                  }
                  TimeStamps time_stamps = 14 [json_name = "time-stamps"];
               }
               Upstream upstream = 11 [json_name = "upstream"];
            }
            Status status = 6 [json_name = "status"];
         }
         Line4 line4 = 3 [json_name = "line"];
      }
      Line line = 14 [json_name = "line"];
      message Channelpartition {
      }
      Channelpartition channelpartition = 15 [json_name = "channelpartition"];
      message Ontani {
         message OntaniOper {
            uint32 onu_id = 1 [json_name = "onu-id"];
            uint32 channel_partition_id = 2 [json_name = "channel-partition-id"];
         }
         OntaniOper ontani_oper = 1 [json_name = "ontani-oper"];
      }
      Ontani ontani = 16 [json_name = "ontani"];
      message VOntani {
         message VOntaniOperData {
            uint32 onu_id = 1 [json_name = "onu-id"];
         }
         VOntaniOperData v_ontani_oper_data = 1 [json_name = "v-ontani-oper-data"];
      }
      VOntani v_ontani = 17 [json_name = "v-ontani"];
      repeated string port_layer_if = 18 [json_name = "port-layer-if"];
      message Ani {
         uint32 onu_id = 1 [json_name = "onu-id"];
         uint32 channel_partition_id = 2 [json_name = "channel-partition-id"];
         uint32 management_tcont_alloc_id = 3 [json_name = "management-tcont-alloc-id"];
         uint32 management_gemport_id = 4 [json_name = "management-gemport-id"];
         message XponOntAniOpers {
            uint32 online_duration = 1 [json_name = "online-duration"];
            string product_description = 2 [json_name = "product-description"];
            uint32 last_distance = 3 [json_name = "last-distance"];
            int32 no_online_reason = 4 [json_name = "no-online-reason"];
            enum InteropStandard {
               INVALID_ENUM_VALUE_InteropStandard = 0;
               InteropStandard_ITUT = 1;
               InteropStandard_CTC = 2;
               InteropStandard_ERICV1 = 3;
               InteropStandard_ERICV2 = 4;
               InteropStandard_ITUTG984 = 5;
               InteropStandard_ITUTG988 = 6;
               InteropStandard_CUC = 7;
               InteropStandard_CMCC = 8;
               InteropStandard_ECI = 9;
               InteropStandard_MODE1 = 10;
               InteropStandard_MODE2 = 11;
               InteropStandard_MODE2V2 = 12;
               InteropStandard_MODE3 = 13;
               InteropStandard_MODE4 = 14;
               InteropStandard_MODE2V3 = 15;
               InteropStandard_MODE2V4 = 16;
               InteropStandard_MODE5 = 17;
               InteropStandard_ECIV2 = 18;
               InteropStandard_MODE1V2 = 19;
               InteropStandard_MODE2V5 = 20;
               InteropStandard_ERICV3 = 21;
               InteropStandard_ERICV4 = 22;
               InteropStandard_MODE6 = 23;
               InteropStandard_ERICV5 = 24;
               InteropStandard_MODE7 = 25;
            };
            InteropStandard interop_standard = 5 [json_name = "interop-standard"];
            enum RunState {
               INVALID_ENUM_VALUE_RunState = 0;
               RunState_UP = 1;
               RunState_DOWN = 2;
            };
            RunState run_state = 6 [json_name = "run-state"];
            enum ConfigStatus {
               INVALID_ENUM_VALUE_ConfigStatus = 0;
               ConfigStatus_INITIALIZATION = 1;
               ConfigStatus_NORMAL = 2;
               ConfigStatus_FAILED = 3;
               ConfigStatus_NORESUME = 4;
               ConfigStatus_CONFIG = 5;
            };
            ConfigStatus config_status = 7 [json_name = "config-status"];
            enum DiscoveryStatus {
               INVALID_ENUM_VALUE_DiscoveryStatus = 0;
               DiscoveryStatus_ON = 1;
               DiscoveryStatus_OFF = 2;
            };
            DiscoveryStatus discovery_status = 8 [json_name = "discovery-status"];
            enum MatchStatus {
               INVALID_ENUM_VALUE_MatchStatus = 0;
               MatchStatus_INITIALIZATION = 1;
               MatchStatus_MATCH = 2;
               MatchStatus_MISMATCH = 3;
            };
            MatchStatus match_status = 9 [json_name = "match-status"];
            enum DbaStatus {
               INVALID_ENUM_VALUE_DbaStatus = 0;
               DbaStatus_NSR = 1;
               DbaStatus_SR = 2;
            };
            DbaStatus dba_status = 10 [json_name = "dba-status"];
            int64 current_distance = 11 [json_name = "current-distance"];
            int32 mac_count = 12 [json_name = "mac-count"];
            string last_up_time = 13 [json_name = "last-up-time"];
            string last_down_time = 14 [json_name = "last-down-time"];
            enum LastDownCause {
               INVALID_ENUM_VALUE_LastDownCause = 0;
               LastDownCause_LOS = 1;
               LastDownCause_LOSIX_ORX_LOBI = 2;
               LastDownCause_LOFI = 3;
               LastDownCause_SFI = 4;
               LastDownCause_LOAI = 5;
               LastDownCause_LOAMI = 6;
               LastDownCause_DEACTIVEX_ONTX_FAIL = 7;
               LastDownCause_DEACTIVEX_ONTX_SUCCESS = 8;
               LastDownCause_RESETX_ONT = 9;
               LastDownCause_REX_REGISTERX_ONT = 10;
               LastDownCause_POPUPX_FAIL = 11;
               LastDownCause_DYINGX_GASP = 13;
               LastDownCause_LOKI = 15;
               LastDownCause_DEACTIVEDX_ONTX_DUEX_TOX_THEX_RING = 18;
               LastDownCause_SHUTDOWNX_ONTX_OPTICALX_MODULE = 30;
               LastDownCause_RESETX_ONTX_BYX_ONTX_COMMAND = 31;
               LastDownCause_RESETX_ONTX_BYX_ONTX_RESETX_BUTTON = 32;
               LastDownCause_RESETX_ONTX_BYX_ONTX_SOFTWARE = 33;
               LastDownCause_DEACTIVEDX_ONTX_DUEX_TOX_BROADCASTX_ATTACK = 34;
               LastDownCause_OPERATORX_CHECKX_FAIL = 35;
               LastDownCause_ROGUEX_ONTX_DETECTEDX_BYX_ITSELF = 37;
               LastDownCause_AUTOX_IOSLATEX_RESET = 38;
               LastDownCause_AUTOX_IOSLATEX_DEACTIVED = 39;
               LastDownCause_NOTX_INX_WHITELIST = 40;
               LastDownCause_BANDWIDTHX_INSUFFICIENT = 41;
            };
            LastDownCause last_down_cause = 15 [json_name = "last-down-cause"];
            string last_dying_gasp_time = 16 [json_name = "last-dying-gasp-time"];
            enum IsolationState {
               IsolationState_NORMAL = 0;
               IsolationState_ISOLATED = 1;
            };
            IsolationState isolation_state = 17 [json_name = "isolation-state"];
            enum BatteryCurrentState {
               BatteryCurrentState_NOTX_SUPPORT = 0;
               BatteryCurrentState_CHARGE = 1;
               BatteryCurrentState_DISCHARGE = 2;
               BatteryCurrentState_HOLDING = 3;
               BatteryCurrentState_SUPPORTX_BUTX_INVALID = 4;
               BatteryCurrentState_UNKNOWNX_STATUS = 5;
            };
            BatteryCurrentState battery_current_state = 18 [json_name = "battery-current-state"];
            uint32 config_file_crc = 19 [json_name = "config-file-crc"];
            uint32 load_xml_state = 20 [json_name = "load-xml-state"];
            string support_xml_version = 21 [json_name = "support-xml-version"];
            string load_xml_error_info = 22 [json_name = "load-xml-error-info"];
            uint32 load_app_state = 23 [json_name = "load-app-state"];
            uint32 memory_occupation = 24 [json_name = "memory-occupation"];
            uint32 cpu_occupation = 25 [json_name = "cpu-occupation"];
            int32 temperature = 26 [json_name = "temperature"];
            enum UsedMutualAuth {
               INVALID_ENUM_VALUE_UsedMutualAuth = 0;
               UsedMutualAuth_YES = 1;
               UsedMutualAuth_NO = 2;
            };
            UsedMutualAuth used_mutual_auth = 27 [json_name = "used-mutual-auth"];
            enum PowerReductionStatus {
               INVALID_ENUM_VALUE_PowerReductionStatus = 0;
               PowerReductionStatus_NORMAL = 1;
               PowerReductionStatus_DOZE = 2;
               PowerReductionStatus_CYCLICSLEEP = 3;
               PowerReductionStatus_WATCHFULSLEEP = 4;
            };
            PowerReductionStatus power_reduction_status = 28 [json_name = "power-reduction-status"];
            int32 nni_physical_up_rate = 29 [json_name = "nni-physical-up-rate"];
            int32 nni_physical_down_rate = 30 [json_name = "nni-physical-down-rate"];
            enum ActualNniType {
               INVALID_ENUM_VALUE_ActualNniType = 0;
               ActualNniType_RATE2P5G1P25G = 1;
               ActualNniType_RATE10G2P5G = 2;
               ActualNniType_RATE10G10G = 3;
            };
            ActualNniType actual_nni_type = 31 [json_name = "actual-nni-type"];
            enum LastActualNniType {
               INVALID_ENUM_VALUE_LastActualNniType = 0;
               LastActualNniType_RATE2P5G1P25G = 1;
               LastActualNniType_RATE10G2P5G = 2;
               LastActualNniType_RATE10G10G = 3;
            };
            LastActualNniType last_actual_nni_type = 32 [json_name = "last-actual-nni-type"];
            enum PowerType {
               INVALID_ENUM_VALUE_PowerType = 0;
               PowerType_DC = 1;
               PowerType_AC = 2;
            };
            PowerType power_type = 33 [json_name = "power-type"];
            string actual_serial_number = 34 [json_name = "actual-serial-number"];
            int32 system_up_duration = 35 [json_name = "system-up-duration"];
            message OntVersion {
               string version = 1 [json_name = "version"];
               bytes vendor_id = 2 [json_name = "vendor-id"];
               int32 product_id = 3 [json_name = "product-id"];
               bytes equipment_id = 4 [json_name = "equipment-id"];
               string main_software_version = 5 [json_name = "main-software-version"];
               string standby_software_version = 6 [json_name = "standby-software-version"];
               enum SoftwareWorkMode {
                  INVALID_ENUM_VALUE_SoftwareWorkMode = 0;
                  SoftwareWorkMode_NORMAL = 1;
                  SoftwareWorkMode_SURVIVALX_MODE = 2;
               };
               SoftwareWorkMode software_work_mode = 7 [json_name = "software-work-mode"];
               string customized_info = 8 [json_name = "customized-info"];
               string equipment_serial_number = 9 [json_name = "equipment-serial-number"];
               string mac = 10 [json_name = "mac"];
            }
            OntVersion ont_version = 36 [json_name = "ont-version"];
            enum DeviceType {
               DeviceType_SFU = 0;
               DeviceType_HGU = 1;
               DeviceType_SBU = 2;
               DeviceType_MDU = 3;
               DeviceType_MTU = 4;
               DeviceType_CBU = 5;
               DeviceType_SFUX_1FEX_1POTS = 6;
            };
            DeviceType device_type = 37 [json_name = "device-type"];
         }
         XponOntAniOpers xpon_ont_ani_opers = 5 [json_name = "xpon-ont-ani-opers"];
      }
      Ani ani = 22 [json_name = "ani"];
      message VAni {
         uint32 onu_id = 1 [json_name = "onu-id"];
         uint32 management_tcont_alloc_id = 2 [json_name = "management-tcont-alloc-id"];
         uint32 management_gemport_id = 3 [json_name = "management-gemport-id"];
         message OnuPresentOnThisOlt {
            string onu_present_on_this_channel_pair = 1 [json_name = "onu-present-on-this-channel-pair"];
            string onu_present_on_this_channel_termination = 2 [json_name = "onu-present-on-this-channel-termination"];
         }
         OnuPresentOnThisOlt onu_present_on_this_olt = 4 [json_name = "onu-present-on-this-olt"];
         message OnuWlProtected {
            string wl_protecting_ct_announced_to_onu = 1 [json_name = "wl-protecting-ct-announced-to-onu"];
         }
         OnuWlProtected onu_wl_protected = 5 [json_name = "onu-wl-protected"];
      }
      VAni v_ani = 23 [json_name = "v-ani"];
      message Common {
         string description = 1 [json_name = "description"];
      }
      Common common = 24 [json_name = "common"];
      string derive_component = 25 [json_name = "derive-component"];
      message XponPortOpers {
         message AutoFindOnts {
            message AutoFindOnt {
               uint32 index = 1 [json_name = "index"];
               string time = 2 [json_name = "time"];
               string parent_ref = 3 [json_name = "parent-ref"];
               enum NniSpeedType {
                  INVALID_ENUM_VALUE_NniSpeedType = 0;
                  NniSpeedType_DOWNX_2X_5X_UPX_1X_25 = 1;
                  NniSpeedType_DOWNX_10X_UPX_2X_5 = 2;
                  NniSpeedType_DOWNX_10X_UPX_10 = 3;
               };
               NniSpeedType nni_speed_type = 4 [json_name = "nni-speed-type"];
               string serial_number = 5 [json_name = "serial-number"];
               string password = 6 [json_name = "password"];
               string loid = 7 [json_name = "loid"];
               string checkcode = 8 [json_name = "checkcode"];
               bytes vendor_id = 9 [json_name = "vendor-id"];
               bytes equipment_id = 10 [json_name = "equipment-id"];
               string hardware_version = 11 [json_name = "hardware-version"];
               string active_software_version = 12 [json_name = "active-software-version"];
               string customize_information = 13 [json_name = "customize-information"];
            }
            repeated AutoFindOnt auto_find_ont = 1 [json_name = "auto-find-ont"];
         }
         AutoFindOnts auto_find_onts = 1 [json_name = "auto-find-onts"];
         message RogueOnts {
            message RogueOnt {
               uint32 index = 1 [json_name = "index"];
            }
            repeated RogueOnt rogue_ont = 1 [json_name = "rogue-ont"];
         }
         RogueOnts rogue_onts = 2 [json_name = "rogue-onts"];
         message IdleSdRssis {
            message IdleSdRssi {
               uint32 channel_index = 1 [json_name = "channel-index"];
               enum ChannelType {
                  INVALID_ENUM_VALUE_ChannelType = 0;
                  ChannelType_GPON = 1;
                  ChannelType_XGPONX_ORX_XGSPON = 2;
               };
               ChannelType channel_type = 2 [json_name = "channel-type"];
               bool sd = 3 [json_name = "sd"];
               int32 rssi = 4 [json_name = "rssi"];
            }
            repeated IdleSdRssi idle_sd_rssi = 1 [json_name = "idle-sd-rssi"];
         }
         IdleSdRssis idle_sd_rssis = 3 [json_name = "idle-sd-rssis"];
         enum RogueOntStatus {
            RogueOntStatus_INEXISTENT = 0;
            RogueOntStatus_EXISTENT = 1;
         };
         RogueOntStatus rogue_ont_status = 4 [json_name = "rogue-ont-status"];
         message Channels {
            message Channel {
               uint32 index = 1 [json_name = "index"];
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_GPON = 1;
                  Type_XGPON = 2;
                  Type_XGSPON = 3;
               };
               Type type = 2 [json_name = "type"];
               uint32 available_bandwidth = 3 [json_name = "available-bandwidth"];
            }
            repeated Channel channel = 1 [json_name = "channel"];
         }
         Channels channels = 5 [json_name = "channels"];
         uint32 ont_num = 6 [json_name = "ont-num"];
         string last_up_time = 7 [json_name = "last-up-time"];
         string last_down_time = 8 [json_name = "last-down-time"];
         enum LastDownCause {
            INVALID_ENUM_VALUE_LastDownCause = 0;
            LastDownCause_LOS = 1;
            LastDownCause_OPTICX_MODULEX_ABSENCE = 2;
            LastDownCause_OPTICX_MODULEX_FAULT = 3;
            LastDownCause_OPTICX_PORTX_CLOSED = 4;
            LastDownCause_OTHERX_CAUSE = 5;
         };
         LastDownCause last_down_cause = 9 [json_name = "last-down-cause"];
         enum EnergySavingState {
            INVALID_ENUM_VALUE_EnergySavingState = 0;
            EnergySavingState_YES = 1;
            EnergySavingState_NO = 2;
         };
         EnergySavingState energy_saving_state = 10 [json_name = "energy-saving-state"];
         enum SignalDetectState {
            INVALID_ENUM_VALUE_SignalDetectState = 0;
            SignalDetectState_NORMAL = 1;
            SignalDetectState_FAULT = 2;
         };
         SignalDetectState signal_detect_state = 11 [json_name = "signal-detect-state"];
         enum ActualMulticastEncrypt {
            INVALID_ENUM_VALUE_ActualMulticastEncrypt = 0;
            ActualMulticastEncrypt_OFF = 1;
            ActualMulticastEncrypt_ON = 2;
         };
         ActualMulticastEncrypt actual_multicast_encrypt = 12 [json_name = "actual-multicast-encrypt"];
         enum MacChipsetState {
            INVALID_ENUM_VALUE_MacChipsetState = 0;
            MacChipsetState_NORMAL = 1;
            MacChipsetState_FAULT = 2;
         };
         MacChipsetState mac_chipset_state = 13 [json_name = "mac-chipset-state"];
      }
      XponPortOpers xpon_port_opers = 26 [json_name = "xpon-port-opers"];
      message XponOntPort {
         message Ethernet {
            enum ActualPortType {
               INVALID_ENUM_VALUE_ActualPortType = 0;
               ActualPortType_T1 = 13;
               ActualPortType_E1 = 14;
               ActualPortType_FE = 24;
               ActualPortType_GE = 34;
               ActualPortType_MOCA = 46;
               ActualPortType_ETH = 47;
               ActualPortType_IPHOST = 50;
               ActualPortType_X_10GE = 54;
            };
            ActualPortType actual_port_type = 1 [json_name = "actual-port-type"];
            enum RingStatus {
               INVALID_ENUM_VALUE_RingStatus = 0;
               RingStatus_LOOP = 1;
               RingStatus_NOLOOP = 2;
            };
            RingStatus ring_status = 2 [json_name = "ring-status"];
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_ELECTRIC = 1;
               Mode_OPTIC = 2;
            };
            Mode mode = 3 [json_name = "mode"];
            enum OpticalModuleStatus {
               INVALID_ENUM_VALUE_OpticalModuleStatus = 0;
               OpticalModuleStatus_NORMAL = 1;
               OpticalModuleStatus_ABSENCE = 2;
               OpticalModuleStatus_MISMATCH = 3;
            };
            OpticalModuleStatus optical_module_status = 4 [json_name = "optical-module-status"];
            uint32 online_duration = 5 [json_name = "online-duration"];
            enum Duplex {
               INVALID_ENUM_VALUE_Duplex = 0;
               Duplex_UNKNOWN = 1;
               Duplex_HALF = 2;
               Duplex_FULL = 3;
            };
            Duplex duplex = 6 [json_name = "duplex"];
            uint64 speed = 7 [json_name = "speed"];
         }
         Ethernet ethernet = 1 [json_name = "ethernet"];
      }
      XponOntPort xpon_ont_port = 27 [json_name = "xpon-ont-port"];
      message EthTrunk {
         string trunk_name = 1 [json_name = "trunk-name"];
      }
      EthTrunk eth_trunk = 31 [json_name = "eth-trunk"];
      message ChannelGroup {
         message AllocatedUpstreamChannelIds {
            repeated string channel_id = 1 [json_name = "channel-id"];
         }
         AllocatedUpstreamChannelIds allocated_upstream_channel_ids = 1 [json_name = "allocated-upstream-channel-ids"];
         message AllocatedDownstreamChannelIds {
            repeated string downstream_channel_id = 1 [json_name = "downstream-channel-id"];
         }
         AllocatedDownstreamChannelIds allocated_downstream_channel_ids = 2 [json_name = "allocated-downstream-channel-ids"];
         message AllocatedDownstreamWavelengths {
            repeated string wavelength = 1 [json_name = "wavelength"];
         }
         AllocatedDownstreamWavelengths allocated_downstream_wavelengths = 3 [json_name = "allocated-downstream-wavelengths"];
         message PonPools {
            message PonPool {
               string name = 1 [json_name = "name"];
               string channel_termination_ref = 2 [json_name = "channel-termination-ref"];
               message ConsumedResources {
                  string alloc_id_values = 1 [json_name = "alloc-id-values"];
                  string gemport_values = 2 [json_name = "gemport-values"];
                  string onu_ids = 3 [json_name = "onu-ids"];
               }
               ConsumedResources consumed_resources = 3 [json_name = "consumed-resources"];
               message AvailableResources {
                  string alloc_id_values = 1 [json_name = "alloc-id-values"];
                  string gemport_values = 2 [json_name = "gemport-values"];
                  string onu_ids = 3 [json_name = "onu-ids"];
               }
               AvailableResources available_resources = 4 [json_name = "available-resources"];
            }
            repeated PonPool pon_pool = 1 [json_name = "pon-pool"];
         }
         PonPools pon_pools = 4 [json_name = "pon-pools"];
      }
      ChannelGroup channel_group = 32 [json_name = "channel-group"];
      message ChannelPair {
         uint32 actual_downstream_wavelength = 1 [json_name = "actual-downstream-wavelength"];
         bool primary_ct_assigned = 2 [json_name = "primary-ct-assigned"];
         bool secondary_ct_assigned = 3 [json_name = "secondary-ct-assigned"];
      }
      ChannelPair channel_pair = 33 [json_name = "channel-pair"];
      message ChannelTermination {
         string pon_id_display = 1 [json_name = "pon-id-display"];
         string type_b_state = 2 [json_name = "type-b-state"];
         string location = 3 [json_name = "location"];
      }
      ChannelTermination channel_termination = 34 [json_name = "channel-termination"];
      message Channelgroup {
         message UpstreamChannelidAlreadyAllocated {
            string upstream_channelid = 1 [json_name = "upstream-channelid"];
         }
         repeated UpstreamChannelidAlreadyAllocated upstream_channelid_already_allocated = 1 [json_name = "upstream-channelid-already-allocated"];
         message DownstreamChannelidAlreadyAllocated {
            string downstream_channelid = 1 [json_name = "downstream-channelid"];
         }
         repeated DownstreamChannelidAlreadyAllocated downstream_channelid_already_allocated = 2 [json_name = "downstream-channelid-already-allocated"];
         message DownstreamWavelengthAlreadyAllocated {
            string downstream_wavelength = 1 [json_name = "downstream-wavelength"];
         }
         repeated DownstreamWavelengthAlreadyAllocated downstream_wavelength_already_allocated = 3 [json_name = "downstream-wavelength-already-allocated"];
      }
      Channelgroup channelgroup = 35 [json_name = "channelgroup"];
      message Channelpair {
         uint32 actual_downstream_wavelength = 1 [json_name = "actual-downstream-wavelength"];
         bool primary_ct_assigned = 2 [json_name = "primary-ct-assigned"];
         bool secondary_ct_assigned = 3 [json_name = "secondary-ct-assigned"];
      }
      Channelpair channelpair = 36 [json_name = "channelpair"];
      message Channeltermination {
         string ponid_display = 1 [json_name = "ponid-display"];
         string type_b_state = 2 [json_name = "type-b-state"];
      }
      Channeltermination channeltermination = 37 [json_name = "channeltermination"];
   }
   repeated Interface interface = 1 [json_name = "interface"];
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


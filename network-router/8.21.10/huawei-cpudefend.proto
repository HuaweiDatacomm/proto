syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-19 15:32:00
// ProtoYang-version 1
// module huawei-cpudefend
// revision 2022-04-15
// revision 2020-05-08
// namespace urn:huawei:yang:huawei-cpudefend

package huawei_cpudefend;

message Cpudefend {
   message AtnsecTotalPktStats {
      message AtnsecTotalPktStat {
         enum SecAttackType {
            SecAttackType_ACL_CAPTURE_PKT_3 = 0;
            SecAttackType_ACL_CAPTURE_PKT_4 = 1;
            SecAttackType_ACL_CAPTURE_PKT_5 = 2;
            SecAttackType_ACL_CAPTURE_PKT_6 = 3;
            SecAttackType_ACL_CAPTURE_PKT_7 = 4;
            SecAttackType_ACL_CAPTURE_PKT_8 = 5;
            SecAttackType_AIS_INWARD_EGRESS4 = 6;
            SecAttackType_AIS_OUTWARD_INGRESS = 7;
            SecAttackType_ARP = 8;
            SecAttackType_ARP_GRATULTOUS = 9;
            SecAttackType_ARP_MISS = 10;
            SecAttackType_ARP_REPLY = 11;
            SecAttackType_ARP_REQUEST = 12;
            SecAttackType_ARP_SAFEGUARD_REPLY = 13;
            SecAttackType_BFD_BIT_ERROR_DETECT = 14;
            SecAttackType_BFD_FAILING = 15;
            SecAttackType_BFD_PKT_RECV = 16;
            SecAttackType_BFD_PW_AC_ERROR = 17;
            SecAttackType_BFD_PW_AC_ERR_RES = 18;
            SecAttackType_BFD_UNREGISTER = 19;
            SecAttackType_BFD_YD_ZERO = 20;
            SecAttackType_BGP = 21;
            SecAttackType_BGPV6 = 22;
            SecAttackType_BPDU = 23;
            SecAttackType_CC_FIRST_PACKET_TIMEOUT = 24;
            SecAttackType_CC_FIRST_PACKET_WAKEN = 25;
            SecAttackType_CC_FREQ_RECOVER = 26;
            SecAttackType_CC_MAID_RECOVER = 27;
            SecAttackType_CC_MEL_RECOVER = 28;
            SecAttackType_CC_MEPID_RECOVER = 29;
            SecAttackType_CC_SMAC_RECOVER = 30;
            SecAttackType_CC_UP_DOWN_STATE = 31;
            SecAttackType_DCN = 32;
            SecAttackType_DHCP = 33;
            SecAttackType_DHCPV6 = 34;
            SecAttackType_DNSCLIENT = 35;
            SecAttackType_DNSV6 = 36;
            SecAttackType_ETH_HGMP = 37;
            SecAttackType_ETRUNK = 38;
            SecAttackType_FRAGMENT = 39;
            SecAttackType_FTP_CLIENT = 40;
            SecAttackType_FTP_SERVER = 41;
            SecAttackType_HOP_BY_HOP = 42;
            SecAttackType_HWTACACS = 43;
            SecAttackType_ICB_PROTOCAL = 44;
            SecAttackType_ICMP = 45;
            SecAttackType_ICMPV6 = 46;
            SecAttackType_ICMP_ND = 47;
            SecAttackType_IGMP = 48;
            SecAttackType_IPFPM = 49;
            SecAttackType_IPV4_FIB_MISS = 50;
            SecAttackType_IPV4_MC_REGISTER = 51;
            SecAttackType_IPV4_MC_WRONG_IF = 52;
            SecAttackType_IPV4_MFIB_MISS = 53;
            SecAttackType_IPV4_MTU_EXCEED = 54;
            SecAttackType_IPV4_OPTION = 55;
            SecAttackType_IPV4_REDIRECT_DEFAULT = 56;
            SecAttackType_IPV4_REDIRECT_TCP = 57;
            SecAttackType_IPV4_RESERVED_MC_IF_ROUTE = 58;
            SecAttackType_IPV4_TTL_EXPIRED = 59;
            SecAttackType_IPV4_UDP_TO_CP = 60;
            SecAttackType_IPV6FTP_CLIENT = 61;
            SecAttackType_IPV6FTP_SERVER = 62;
            SecAttackType_IPV6_FIB_MISS = 63;
            SecAttackType_IPV6_NDH_MISS = 64;
            SecAttackType_IPV6_ND_MISS = 65;
            SecAttackType_IPV6_REDIRECT_DEFAULT = 66;
            SecAttackType_IPV6_REDIRECT_TCP = 67;
            SecAttackType_IPV6_TTL_EXPIRE = 68;
            SecAttackType_ISIS = 69;
            SecAttackType_KAPA1_LOOPBACK_HEARTBEAT = 70;
            SecAttackType_KAPA2_LOOPBACK_HEARTBEAT = 71;
            SecAttackType_L2MC_MISS = 72;
            SecAttackType_L2_MC2CPU = 73;
            SecAttackType_LACP = 74;
            SecAttackType_LBM_GMAC_PING_VPLS = 75;
            SecAttackType_LBM_OR_GMAC_PING = 76;
            SecAttackType_LBR_GMAC_PING_R_VPLS = 77;
            SecAttackType_LBR_OR_GMAC_PING_R = 78;
            SecAttackType_LDP = 79;
            SecAttackType_LLDP = 80;
            SecAttackType_LOOPBACK_TEST_PKT = 81;
            SecAttackType_LOOP_HEARTBEAT_TO_CP = 82;
            SecAttackType_LSPPING = 83;
            SecAttackType_LTM_GMAC_TRACE_VPLS = 84;
            SecAttackType_LTM_OR_GMAC_TRACE = 85;
            SecAttackType_LTR_GMAC_TRACE_R_VPLS = 86;
            SecAttackType_LTR_OR_GMAC_TRACE_R = 87;
            SecAttackType_MIRROR_TO_CP_EGRESS = 88;
            SecAttackType_MIRROR_TO_CP_INGRESS = 89;
            SecAttackType_MISMATCH_FREQ = 90;
            SecAttackType_MISMATCH_MAID = 91;
            SecAttackType_MISMATCH_MEL = 92;
            SecAttackType_MISMATCH_MEPID = 93;
            SecAttackType_MISMATCH_RECOVER = 94;
            SecAttackType_MISMATCH_SMAC = 95;
            SecAttackType_MPLS_ARP_MISS = 96;
            SecAttackType_MPLS_CP = 97;
            SecAttackType_MPLS_ROUTER_ALERT = 98;
            SecAttackType_MPLS_TTL_EXPIRED = 99;
            SecAttackType_MSDP = 100;
            SecAttackType_MTUV6 = 101;
            SecAttackType_NA = 102;
            SecAttackType_NEW_DLP_BGP = 103;
            SecAttackType_NEW_DLP_LDP = 104;
            SecAttackType_NEW_DLP_OSPF = 105;
            SecAttackType_NEW_LDP_UDP = 106;
            SecAttackType_NQA_COMPRESS_DATA = 107;
            SecAttackType_NTP = 108;
            SecAttackType_OSPF = 109;
            SecAttackType_OSPFV3 = 110;
            SecAttackType_PERFTEST_ETH_TIME_EGRESS = 111;
            SecAttackType_PIMV6 = 112;
            SecAttackType_PIM_SM = 113;
            SecAttackType_PPP = 114;
            SecAttackType_QOS_ACL_REDIRECT_TO_CP = 115;
            SecAttackType_RA = 116;
            SecAttackType_RADIUS = 117;
            SecAttackType_RDI = 118;
            SecAttackType_RESERVED_MC_DEFAULT = 119;
            SecAttackType_RIP = 120;
            SecAttackType_RS = 121;
            SecAttackType_RSVP = 122;
            SecAttackType_SNMP = 123;
            SecAttackType_SSHV6SERVER = 124;
            SecAttackType_SSH_CLIENT = 125;
            SecAttackType_SSH_SERVER = 126;
            SecAttackType_SSM_PKT_TO_CP = 127;
            SecAttackType_SYSLOG = 128;
            SecAttackType_TCPSYN = 129;
            SecAttackType_TCPSYN_SSH = 130;
            SecAttackType_TCPSYN_TELNET = 131;
            SecAttackType_TELNETV6CLIENT = 132;
            SecAttackType_TELNETV6SERVER = 133;
            SecAttackType_TELNET_CLIENT = 134;
            SecAttackType_TELNET_SERVER = 135;
            SecAttackType_TFTP = 136;
            SecAttackType_TOTALCAR = 137;
            SecAttackType_TP_OAM_LBM = 138;
            SecAttackType_TP_OAM_LBR = 139;
            SecAttackType_TP_OAM_LTM = 140;
            SecAttackType_TWAMP = 141;
            SecAttackType_TWAMP_PACK_MSG = 142;
            SecAttackType_VRRP = 143;
            SecAttackType_WHITELIST = 144;
            SecAttackType_WHITELISTV6 = 145;
            SecAttackType_X_1564_STOP = 146;
            SecAttackType_X_1564_TOCP = 147;
            SecAttackType_X_1588ACR = 148;
            SecAttackType_X_1588_ANN_TIMEOUT = 149;
            SecAttackType_X_1588_OR_ANN_CHANGE = 150;
            SecAttackType_X_3AH_PDU = 151;
            SecAttackType_X_3AH_SEND_SUCCESS = 152;
            SecAttackType_Y1731_ETH_BN = 153;
            SecAttackType_MLDP_MBB_PKT = 154;
            SecAttackType_IPV6_MLD = 155;
         };
         SecAttackType secAttackType = 1;
         uint64 secDropPkt = 2;
         uint64 secPassPkt = 3;
         string secSlotId = 4;
         uint64 secTotalPkt = 5;
      }
      repeated AtnsecTotalPktStat atnsecTotalPktStat = 1;
   }
   AtnsecTotalPktStats atnsecTotalPktStats = 1;
   message NvsecCurrentCarNodes {
      message NvsecCurrentCarNode {
         enum Desc {
            Desc_ABNORM = 0;
            Desc_ACCESSIMAC_ERR = 1;
            Desc_ACL = 2;
            Desc_ACL_CAPTURE_PKT_3 = 3;
            Desc_ACL_CAPTURE_PKT_4 = 4;
            Desc_ACL_CAPTURE_PKT_5 = 5;
            Desc_ACL_CAPTURE_PKT_6 = 6;
            Desc_ACL_CAPTURE_PKT_7 = 7;
            Desc_ACL_CAPTURE_PKT_8 = 8;
            Desc_ACR_DELAY_REQ = 9;
            Desc_ACT_DISPKT = 10;
            Desc_AGG_AGINGPKT = 11;
            Desc_AIBX_TABLEX_INVALIDX_MESSAGEX_TOX_CPUX_INX_MEX_ENCAPSULATION = 12;
            Desc_AIB_FAKE = 13;
            Desc_AIDCHKERR = 14;
            Desc_AID_CFGERR = 15;
            Desc_AID_NV_ME = 16;
            Desc_AID_NV_ME_LE = 17;
            Desc_AID_NV_ME_ME = 18;
            Desc_AID_NV_TE_RLY = 19;
            Desc_AID_NV_TE_TUL = 20;
            Desc_ALL_HUB = 21;
            Desc_ALL_SPOKE = 22;
            Desc_APS = 23;
            Desc_APSX_SWAPX_FRAME = 24;
            Desc_APSX_X_TOX_CPU = 25;
            Desc_APS_ACLMISS = 26;
            Desc_APS_ALARM_MSG = 27;
            Desc_APS_BC = 28;
            Desc_APS_CC_UP_DOWN_BC_MSG = 29;
            Desc_APS_INTERNAL_SW_MSG = 30;
            Desc_APS_PORT_STATUS_BROADCAST = 31;
            Desc_APS_RDI_RDI_R_BC_MSG = 32;
            Desc_APS_UPDATE_IVSI_BC_MSG = 33;
            Desc_APS_UPDATE_PBT_GROUP_BC_MSG = 34;
            Desc_ARPCHKERR = 35;
            Desc_ARPCHK_DIPERR = 36;
            Desc_ARPV6X_MISSX_MESSAGEX_TOX_CPU = 37;
            Desc_ARP_ACLMISS = 38;
            Desc_ARP_ATTACK = 39;
            Desc_ARP_DROP = 40;
            Desc_ARP_REPLY_NO_INCOMPLETE = 41;
            Desc_ARP_REQ_ANTIATTACK = 42;
            Desc_ARP_SAFEGUARD_REPLY = 43;
            Desc_ATMX_INARPX_PACKET = 44;
            Desc_ATM_OAM = 45;
            Desc_AUTORP = 46;
            Desc_BASX_ARPX_REPLY = 47;
            Desc_BASX_IPOEV6X_LINKLOCAL = 48;
            Desc_BASX_IPOEX_ICMPV6X_MC = 49;
            Desc_BASX_QVCTX_MISS = 50;
            Desc_BASX_QVCTX_MISSX_ARPX_PACKET = 51;
            Desc_BASX_REVX_MCX_PACKET = 52;
            Desc_BAS_CONTROL_PPP = 53;
            Desc_BAS_DHCP_DISCOVER = 54;
            Desc_BAS_DIRECT_CP = 55;
            Desc_BAS_IPV4_DHCPX_PACKET = 56;
            Desc_BAS_IPV4_REDIRECT_TCP = 57;
            Desc_BAS_IPV6_NAX_PACKET = 58;
            Desc_BAS_IPV6_NA_REDIRECT_CPX_PACKET = 59;
            Desc_BAS_IPV6_NSX_PACKET = 60;
            Desc_BAS_IPV6_NS_REDIRECT_CPX_PACKET = 61;
            Desc_BAS_IPV6_REDIRECT_CP = 62;
            Desc_BAS_IPV6_RSX_PACKET = 63;
            Desc_BAS_MUTE_CLIENTX_PACKET = 64;
            Desc_BAS_PPP_ECHO_NOUSER = 65;
            Desc_BAS_PPP_KEEP_LIVE = 66;
            Desc_BAS_SSDPX_PACKET = 67;
            Desc_BAS_VBAS = 68;
            Desc_BAS_WEB = 69;
            Desc_BCMASKERR = 70;
            Desc_BET_INVALID = 71;
            Desc_BE_ABNORMITY_SB = 72;
            Desc_BE_DELETE = 73;
            Desc_BE_DIFF_UPDATE = 74;
            Desc_BE_SB = 75;
            Desc_BE_STATIC = 76;
            Desc_BE_SYN = 77;
            Desc_BFD = 78;
            Desc_BFDX_FAILINGX_MESSAGE = 79;
            Desc_BFDX_RECEIVEX_X_FROMX_LOCAL = 80;
            Desc_BFDX_SESSIONDOWNX_MESSAGE = 81;
            Desc_BFDX_STATEX_CHANGINGX_MESSAGEX_FORWARDINGX_TOX_CP = 82;
            Desc_BFDX_TOX_CPU_1 = 83;
            Desc_BFDX_TOX_CPU_2 = 84;
            Desc_BFDX_TOX_CPU_3 = 85;
            Desc_BFDX_X_NOTX_UPX_MESSAGE = 86;
            Desc_BFDX_X_TOX_CPUX_FROMX_OTHERX_BOARD = 87;
            Desc_BFD_ACLMISS = 88;
            Desc_BFD_BIT_ERROR_DETECT = 89;
            Desc_BFD_FAULT_BC = 90;
            Desc_BFD_REMOTE_YD0 = 91;
            Desc_BGPV6X_PACKET = 92;
            Desc_BGP_1 = 93;
            Desc_BGP_2 = 94;
            Desc_BH_LOOPDETECT_CPU = 95;
            Desc_BIGHEART = 96;
            Desc_BLACKLIST = 97;
            Desc_BPDU = 98;
            Desc_BPDU_E = 99;
            Desc_BPDU_TNL = 100;
            Desc_BRIDGEX_FDBX_LEARN = 101;
            Desc_BRIDGEX_MACX_TOX_CPU = 102;
            Desc_BRIDGE_CIB_MAC_LIMIT = 103;
            Desc_BRIDGE_DISABLE = 104;
            Desc_BRIDGE_EGRESS_FDB_LEARN = 105;
            Desc_BRIDGE_INGRESS_FDB_LEARN = 106;
            Desc_BRIDGE_PCT_MAC_LIMIT = 107;
            Desc_BRIDGE_VSI_MAC_LIMIT = 108;
            Desc_BROADCASTX_SENDINGX_MULTICASTX_X_CAUSEX_INX_FULLX_FRAME = 109;
            Desc_CCM = 110;
            Desc_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_MESSAGE = 111;
            Desc_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_TIMEOUTX_MESSAGE = 112;
            Desc_CCMX_X_TOX_CPUX_WITHX_RDIX_MESSAGE = 113;
            Desc_CCMX_X_TOX_CPUX_WITHX_UPX_DOWNX_MESSAGE = 114;
            Desc_CCM_ACLMISS = 115;
            Desc_CCM_Y1731_TO_CP = 116;
            Desc_CCX_X_FREQUENCYX_X_SMACX_X_MAIDX_FIELDX_MISMATCHX_ERROR = 117;
            Desc_CC_FREQ_RECOVER = 118;
            Desc_CC_LEVELERR = 119;
            Desc_CC_MAID_RECOVER = 120;
            Desc_CC_SMAC_RECOVER = 121;
            Desc_CDP = 122;
            Desc_CFGERR_1 = 123;
            Desc_CFGERR_2 = 124;
            Desc_CHADDRERR = 125;
            Desc_CHDLCX_KEEPLIVE = 126;
            Desc_CHECKSUMERR = 127;
            Desc_CHECKURPFERR = 128;
            Desc_CIB_EXT_NV = 129;
            Desc_CIB_NV = 130;
            Desc_CIB_PV_EXT_NV = 131;
            Desc_CIB_PV_NV = 132;
            Desc_CPACLX_CARX_SOURCEX_TRACE = 133;
            Desc_CRB1MISS = 134;
            Desc_CRB2MISS = 135;
            Desc_CRBITAGMISS = 136;
            Desc_CRBQINQMISS = 137;
            Desc_CROSSBOARD_MACDEL = 138;
            Desc_CWCMD2 = 139;
            Desc_CWCMD3 = 140;
            Desc_DCN = 141;
            Desc_DCNX_DATA = 142;
            Desc_DCNX_REDIRECT = 143;
            Desc_DCN_PKT_FIN = 144;
            Desc_DCN_PKT_INIT = 145;
            Desc_DEFAULTX_RESERVEDX_MULTICAST = 146;
            Desc_DESCERR = 147;
            Desc_DESCMERGEDERR = 148;
            Desc_DESC_PASS_ERR = 149;
            Desc_DHCPCHKERR = 150;
            Desc_DHCPINV = 151;
            Desc_DHCPREP = 152;
            Desc_DHCPREQ = 153;
            Desc_DHCPSTRONG = 154;
            Desc_DHCPUNT = 155;
            Desc_DHCP_1 = 156;
            Desc_DHCP_2 = 157;
            Desc_DHCP_PKT = 158;
            Desc_DHCP_SMAC_ERR = 159;
            Desc_DHCP_SP_ERR = 160;
            Desc_DIAMETERX_PACKET = 161;
            Desc_DIP224_DROP = 162;
            Desc_DIP224_TCP = 163;
            Desc_DIP224_UDP = 164;
            Desc_DIPERR_1 = 165;
            Desc_DIPERR_2 = 166;
            Desc_DIPERR_DROP = 167;
            Desc_DIS = 168;
            Desc_DISIPV4MC = 169;
            Desc_DISIPV4UC = 170;
            Desc_DISIPV6MC = 171;
            Desc_DISIPV6UC = 172;
            Desc_DISRE = 173;
            Desc_DLP_BGP = 174;
            Desc_DLP_IPV6_OSPF = 175;
            Desc_DLP_ISIS = 176;
            Desc_DLP_LDP = 177;
            Desc_DLP_LDP_UDP = 178;
            Desc_DLP_RSVP = 179;
            Desc_DMM_CW_TO_CP = 180;
            Desc_DMM_NO_CW_TO_CP = 181;
            Desc_DMR_CW_TO_CP = 182;
            Desc_DMR_NO_CW_TO_CP = 183;
            Desc_DNSUNT = 184;
            Desc_DNSV6X_PACKET = 185;
            Desc_DNSX_CLIENT = 186;
            Desc_DROPPINGX_UNKNOWNX_MULTICAST = 187;
            Desc_DROPPINGX_UNKNOWNX_UNICAST = 188;
            Desc_DROP_CPUIRT = 189;
            Desc_DROP_CPUT = 190;
            Desc_DROP_ERED = 191;
            Desc_DROP_EYELLOW = 192;
            Desc_DROP_IRED = 193;
            Desc_DROP_IYELLOW = 194;
            Desc_EAPOLX_FRAME = 195;
            Desc_ECC_ERR = 196;
            Desc_ECIB_NV = 197;
            Desc_ECID_NV = 198;
            Desc_ECMP_PRUNE = 199;
            Desc_EFIT_DROP = 200;
            Desc_ELMI = 201;
            Desc_EMCPAT_NV = 202;
            Desc_EMPTYLOADIPERR = 203;
            Desc_ENCAP_UK = 204;
            Desc_EOPPAT_NV = 205;
            Desc_EPEPAT_NV = 206;
            Desc_ETHERNETX_BPDU = 207;
            Desc_ETHERNETX_CONFIGX_X_TOX_CPU = 208;
            Desc_ETHERX_TRUNKX_LACP = 209;
            Desc_ETH_HGMP = 210;
            Desc_ETH_IPX = 211;
            Desc_ETH_PATHMTU_ERROR = 212;
            Desc_ETH_UKTYPE = 213;
            Desc_ETH_VRRP = 214;
            Desc_FABRIC_HEART_1 = 215;
            Desc_FABRIC_HEART_2 = 216;
            Desc_FABRIC_HEART_PLUS_1 = 217;
            Desc_FABRIC_HEART_PLUS_2 = 218;
            Desc_FABRI_HEART_PLUS = 219;
            Desc_FHFT = 220;
            Desc_FIDTOUT_NV = 221;
            Desc_FLUSH = 222;
            Desc_FLUSHX_X_TOX_CPU = 223;
            Desc_FRAGMENTX_PACKET = 224;
            Desc_FRINARP = 225;
            Desc_FRISIS = 226;
            Desc_FRLMI = 227;
            Desc_FRUK = 228;
            Desc_FTPV6X_CLIENTX_PACKET = 229;
            Desc_FTPV6X_SERVERX_PACKET = 230;
            Desc_FTPX_CLIENT = 231;
            Desc_FTPX_SERVER = 232;
            Desc_GLB_TOKEN_CHKERR = 233;
            Desc_GMACLBM = 234;
            Desc_GMACLBR = 235;
            Desc_GMACLTMDST = 236;
            Desc_GMACLTMMID = 237;
            Desc_GMACLTR = 238;
            Desc_GMRPX_FRAMEX_ANDX_GVRPX_FRAME = 239;
            Desc_GREINDEX_MISS = 240;
            Desc_GRE_KEY_ERR = 241;
            Desc_GRE_MF_TOCPU = 242;
            Desc_GRE_ROUTING = 243;
            Desc_GRE_UK = 244;
            Desc_GSMP = 245;
            Desc_GTSM_CHECKERR = 246;
            Desc_GVRP_TOCP = 247;
            Desc_HDLCCFG = 248;
            Desc_HDLCIPX = 249;
            Desc_HDLCUK = 250;
            Desc_HDLC_ACERR = 251;
            Desc_HEARTBEAT1 = 252;
            Desc_HEARTBEAT10 = 253;
            Desc_HEARTBEAT11 = 254;
            Desc_HEARTBEAT2 = 255;
            Desc_HEARTBEAT3 = 256;
            Desc_HEARTBEAT4 = 257;
            Desc_HEARTBEAT5 = 258;
            Desc_HEARTBEAT6 = 259;
            Desc_HEARTBEAT7 = 260;
            Desc_HEARTBEAT8 = 261;
            Desc_HEARTBEAT9 = 262;
            Desc_HGMPX_V1X_FRAME = 263;
            Desc_HOSTCAR_ATTAC = 264;
            Desc_HTTPX_REDIRECTX_X_OFX_CHASTENX_USER = 265;
            Desc_HTTP_HOSTCAR_ATTACK = 266;
            Desc_HUBVLAN_ERR = 267;
            Desc_HUB_ERR = 268;
            Desc_HVRP = 269;
            Desc_HWTACACS = 270;
            Desc_IBE_ABNORMITY_SB = 271;
            Desc_IBE_DELETE = 272;
            Desc_IBE_DYNAMIC_DIFF_DROP = 273;
            Desc_IBE_INVALID = 274;
            Desc_IBE_SB = 275;
            Desc_IBE_STATIC_DIFF_DROP = 276;
            Desc_ICMP = 277;
            Desc_ICMPV6X_PACKET = 278;
            Desc_ICMPV6_REPLY = 279;
            Desc_ICMPV6_REQUEST = 280;
            Desc_ICMP_BROADCAST_ADDRESS_ECHO = 281;
            Desc_ICMP_FRAG = 282;
            Desc_ICMP_REPLY = 283;
            Desc_ICMP_REQUEST = 284;
            Desc_IEPPAT_NV_1 = 285;
            Desc_IEPPAT_NV_2 = 286;
            Desc_IFIT_CPU_SPECIAL = 287;
            Desc_IFIT_DROP = 288;
            Desc_IGMP_1 = 289;
            Desc_IGMP_2 = 290;
            Desc_IGMP_ACLMISS = 291;
            Desc_IGMP_FAST_JOIN_1 = 292;
            Desc_IGMP_FAST_JOIN_2 = 293;
            Desc_IGMP_FROM_LSP = 294;
            Desc_IGMP_FROM_VLAN = 295;
            Desc_IGP_MAINTAIN_UNITX_PACKET = 296;
            Desc_IHLERR = 297;
            Desc_IKE_PROTOCOL = 298;
            Desc_IMAC_ADD_MSG = 299;
            Desc_IMAC_UPDATE_MSG = 300;
            Desc_INBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 301;
            Desc_INGRESS_BE_TOCPU = 302;
            Desc_IPFPM = 303;
            Desc_IPOPT_TCP = 304;
            Desc_IPOPT_UDP = 305;
            Desc_IPTV = 306;
            Desc_IPV4ACL_STREAM_MISS = 307;
            Desc_IPV4LENERR = 308;
            Desc_IPV4MCTTLCHECK_ERR = 309;
            Desc_IPV4PLENERR = 310;
            Desc_IPV4X_ARP = 311;
            Desc_IPV4X_ARPX_MISS = 312;
            Desc_IPV4X_FIBX_MISS = 313;
            Desc_IPV4X_ISISX_X_OVERX_GREX_TUNNEL = 314;
            Desc_IPV4X_MULTICASTX_FIBX_MISS = 315;
            Desc_IPV4X_MULTICASTX_REGISTRATION = 316;
            Desc_IPV4X_MULTICASTX_RPFX_CHECKINGX_FAILS = 317;
            Desc_IPV4X_OPTION = 318;
            Desc_IPV4X_OSPFX_X_TOX_CPU = 319;
            Desc_IPV4X_OVERX_IPV6X_ETUNNELX_X_TOX_CPUX_WITHX_TUNNELX_INDEXX_CHECKINGX_MISS = 320;
            Desc_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_NONX_IPV4X_MESSAGEX_AFTERX_IPV6X_HEADX_EXTENSION = 321;
            Desc_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_UNSUPPORTEDX_IPV6X_HEADX_EXTENSION = 322;
            Desc_IPV4X_OVERX_IPV6X_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTUX_BUTX_DFX_FLAGX_SETX_TOX_1X_INX_IPX_HEAD = 323;
            Desc_IPV4X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 324;
            Desc_IPV4X_TCPX_X_TOX_CPU = 325;
            Desc_IPV4X_TTLX_EXPIRES = 326;
            Desc_IPV4X_UDPX_PTPX_320 = 327;
            Desc_IPV4X_UDPX_PTRX_320 = 328;
            Desc_IPV4X_UDPX_X_TOX_CPU = 329;
            Desc_IPV4X_X_OVERX_GREX_TUNNELX_DETECTSX_KEEPLIVEX_MESSAGE = 330;
            Desc_IPV4X_X_OVERX_GREX_TUNNELX_ECHOSX_KEEPLIVEX_MESSAGE = 331;
            Desc_IPV4X_X_TOX_CPUX_AFTERX_FIBX_CHECK = 332;
            Desc_IPV4X_X_TOX_CPUX_EXCEEDINGX_MTUX_LIMIT = 333;
            Desc_IPV4_AT_MISS = 334;
            Desc_IPV4_BFD = 335;
            Desc_IPV4_FIB_DROP_1 = 336;
            Desc_IPV4_FIB_DROP_2 = 337;
            Desc_IPV4_IGMP = 338;
            Desc_IPV4_LDP = 339;
            Desc_IPV4_MC_SOFTWARE_FWD = 340;
            Desc_IPV4_MC_TO_CP = 341;
            Desc_IPV4_RARP = 342;
            Desc_IPV4_REMOTE_BFD = 343;
            Desc_IPV4_RESV2_TO_CP = 344;
            Desc_IPV4_RSVP_TO_CP = 345;
            Desc_IPV4_TCP_BGP = 346;
            Desc_IPV4_TCP_FTP = 347;
            Desc_IPV4_TCP_TELNET = 348;
            Desc_IPV4_UDP_PGP = 349;
            Desc_IPV4_UNK_MC_1 = 350;
            Desc_IPV4_UNK_MC_2 = 351;
            Desc_IPV6DIPERR = 352;
            Desc_IPV6LENERR_1 = 353;
            Desc_IPV6LENERR_2 = 354;
            Desc_IPV6MCTTLCHECK_ERR = 355;
            Desc_IPV6PLENERR = 356;
            Desc_IPV6SIPERR = 357;
            Desc_IPV6X_CHECKINGX_NDHX_MISS = 358;
            Desc_IPV6X_CHECKINGX_NDX_MISSX_MESSAGE = 359;
            Desc_IPV6X_DHCP = 360;
            Desc_IPV6X_EXITX_TUNNELX_FRAGMENTATION = 361;
            Desc_IPV6X_EXITX_TUNNELX_HOP = 362;
            Desc_IPV6X_EXITX_TUNNELX_REDIRECTX_SNMP = 363;
            Desc_IPV6X_EXITX_TUNNELX_RESERVEDX_MULTICAST = 364;
            Desc_IPV6X_EXITX_TUNNELX_X_TOX_CPU = 365;
            Desc_IPV6X_FIBX_CHECKINGX_MISSES = 366;
            Desc_IPV6X_MLD = 367;
            Desc_IPV6X_MULTICASTX_FRAGMENTATION = 368;
            Desc_IPV6X_MULTICASTX_REGISTRATION = 369;
            Desc_IPV6X_MULTICASTX_RPFX_CHECKINGX_FAIL = 370;
            Desc_IPV6X_MULTICASTX_TOX_CPUX_MISS = 371;
            Desc_IPV6X_MULTICASTX_X_TOX_CPU = 372;
            Desc_IPV6X_NA = 373;
            Desc_IPV6X_NDHX_MACX_MISSX_TCAMX_MISSX_ = 374;
            Desc_IPV6X_NDX_MACX_MISSX_TCAMX_MISSX_ = 375;
            Desc_IPV6X_NDX_MISS = 376;
            Desc_IPV6X_NDX_REDIRECTX_CONTROLX_PACKET = 377;
            Desc_IPV6X_NEXTX_HOPX_X_TOX_CPU = 378;
            Desc_IPV6X_NS = 379;
            Desc_IPV6X_OVERX_GREX_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTU = 380;
            Desc_IPV6X_RA = 381;
            Desc_IPV6X_REDIRECTEDX_X_TOX_CPU = 382;
            Desc_IPV6X_REDIRECTX_ICMP = 383;
            Desc_IPV6X_REDIRECTX_SNMP = 384;
            Desc_IPV6X_REDIRECTX_TCP = 385;
            Desc_IPV6X_REDIRECTX_X_TOX_CPU = 386;
            Desc_IPV6X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 387;
            Desc_IPV6X_REJECT = 388;
            Desc_IPV6X_RESERVEDX_MULTICAST = 389;
            Desc_IPV6X_RESERVEX_MULTICAST = 390;
            Desc_IPV6X_RS = 391;
            Desc_IPV6X_TTLX_EXPIRES = 392;
            Desc_IPV6X_WHITELIST = 393;
            Desc_IPV6X_X_TOOX_BIG = 394;
            Desc_IPV6X_X_TOX_CPUX_AFTERX_LOCALX_FIBX_CHECK = 395;
            Desc_IPV6_4OVER6 = 396;
            Desc_IPV6_AH_OPTIONX_PACKET = 397;
            Desc_IPV6_BFD_1 = 398;
            Desc_IPV6_BFD_2 = 399;
            Desc_IPV6_BFD_TOCOP_FROM5822 = 400;
            Desc_IPV6_ESP_OPTIONX_PACKET = 401;
            Desc_IPV6_FIB_DROP = 402;
            Desc_IPV6_FWD_TABLE_VLAN = 403;
            Desc_IPV6_GRE = 404;
            Desc_IPV6_HOP_BY_HOP_OPTIONX_PACKET = 405;
            Desc_IPV6_ID_BASE = 406;
            Desc_IPV6_OTHER_OPTIONX_PACKET = 407;
            Desc_IPV6_PIM = 408;
            Desc_IPV6_REMOTE_BFD = 409;
            Desc_IPV6_TCP_BGP = 410;
            Desc_IPV6_UDP_L2TP = 411;
            Desc_IPV6_UDP_NTP = 412;
            Desc_IPV6_UNK_MC_1 = 413;
            Desc_IPV6_UNK_MC_2 = 414;
            Desc_IPV6_VRRP = 415;
            Desc_IPXX_FRAMEX_TOX_CPU = 416;
            Desc_IPX_X_TOX_CPU = 417;
            Desc_ISIS = 418;
            Desc_ITAGCC = 419;
            Desc_ITAGCC_ACLMISS = 420;
            Desc_JUMBO = 421;
            Desc_L2BE_DROP = 422;
            Desc_L2DIS_1 = 423;
            Desc_L2DIS_2 = 424;
            Desc_L2IBE_DROP = 425;
            Desc_L2I_3AH_LOOPBACK = 426;
            Desc_L2I_PAT_INV = 427;
            Desc_L2L3DIS = 428;
            Desc_L2MBE_CPU = 429;
            Desc_L2_MC2CPU = 430;
            Desc_L2MC_DROP = 431;
            Desc_L2MC_MAIB_BROADCAST = 432;
            Desc_L2MC_MISS = 433;
            Desc_L2MFIBV6_MISS = 434;
            Desc_L2TPX_IGMP = 435;
            Desc_L2TPX_LAC = 436;
            Desc_L2TPX_LNSX_CONTROL = 437;
            Desc_L2TPX_LNSX_CTRLX_SCCRQ = 438;
            Desc_L2TPX_LNSX_CTRLX_SCCRQX_DETECTX_PACKET = 439;
            Desc_L2TPX_LNSX_HELLOX_ORX_ZLB = 440;
            Desc_L2TPX_LNSX_PPP = 441;
            Desc_L2TPX_LNSX_PPPX_ECHO = 442;
            Desc_L2_1588_OR_ANN_CHANGE = 443;
            Desc_L2_3AH_TEST_1 = 444;
            Desc_L2_3AH_TEST_2 = 445;
            Desc_L2_ASSP = 446;
            Desc_L2_EAPOL = 447;
            Desc_L2_EAPOL_START = 448;
            Desc_L2_IPV4 = 449;
            Desc_L2_IPV6 = 450;
            Desc_L2_MPLSUC = 452;
            Desc_L2_PPPOE_PADI = 453;
            Desc_L2_PPPOE_PADR = 454;
            Desc_L2_PPPOE_SESSION = 455;
            Desc_L2_SLOWPROTOCOL = 456;
            Desc_L3DIS_1 = 457;
            Desc_L3DIS_2 = 458;
            Desc_LABEL1 = 459;
            Desc_LABELERR = 460;
            Desc_LACPX_FLUSHX_FRAME = 461;
            Desc_LBK_ERR = 462;
            Desc_LBMDST = 463;
            Desc_LBRDST = 464;
            Desc_LB_TRANS_TIMESTAMP = 465;
            Desc_LCLLPDROP = 466;
            Desc_LCLONLY = 467;
            Desc_LCL_TOKEN_CHKERR = 468;
            Desc_LDP_1 = 469;
            Desc_LDP_2 = 470;
            Desc_LDP_HELLO = 471;
            Desc_LDP_UDP = 472;
            Desc_LENERR_1 = 473;
            Desc_LENERR_2 = 474;
            Desc_LIMIT_AFUL_DROP = 475;
            Desc_LINK_DETECT = 476;
            Desc_LLDP = 477;
            Desc_LMM_CW_TO_CP = 478;
            Desc_LMM_NO_CW_TO_CP = 479;
            Desc_LMR_CW_TO_CP = 480;
            Desc_LMR_NO_CW_TO_CP = 481;
            Desc_LNT_ALM = 482;
            Desc_LNT_PKT = 483;
            Desc_LOOPBACK_TEST_PKT = 484;
            Desc_LOOPDETECT = 485;
            Desc_LOOP_HEARTBEAT_TO_CP = 486;
            Desc_LRNONLY_1 = 487;
            Desc_LRNONLY_2 = 488;
            Desc_LRNSYS_ERR = 489;
            Desc_LSFX_BROADCAST = 490;
            Desc_LSPX_PING = 491;
            Desc_LTMDST = 492;
            Desc_LTMMID = 493;
            Desc_LTRDST = 494;
            Desc_MACBYPASS_TRIGGER = 495;
            Desc_MAC_ACCOUNT_MISS = 496;
            Desc_MAC_ADD_MSG = 497;
            Desc_MAC_DELETE_FLAPPING = 498;
            Desc_MAC_SB_FLAPPING = 499;
            Desc_MAC_UPDATE_FLAPPING = 500;
            Desc_MAC_UPDATE_MSG = 501;
            Desc_MARKER = 502;
            Desc_MAXLEN_ERR = 503;
            Desc_MC_MFIB_DUMMY_DROP = 504;
            Desc_MC_MFIB_SG_DROP = 505;
            Desc_MC_MIB_GRE = 506;
            Desc_MC_SEL_DROP = 507;
            Desc_MDLVL = 508;
            Desc_MEAP_PKT = 509;
            Desc_ME_GTOKEN_PRUNE = 510;
            Desc_ME_LTOKEN_PRUNE = 511;
            Desc_MIBT_NV = 512;
            Desc_MINLEN_ERR = 513;
            Desc_MIRRORX_TOX_CPU = 514;
            Desc_MIRROR_TO_CP_EGRESS = 515;
            Desc_MIRROR_TO_CP_INGRESS = 516;
            Desc_MISMATCHX_RECOVER = 517;
            Desc_MISMATCH_SMAC_PKT_1 = 518;
            Desc_MISMATCH_SMAC_PKT_2 = 519;
            Desc_MKA = 520;
            Desc_MOAM = 521;
            Desc_MPLSDIS_1 = 522;
            Desc_MPLSDIS_2 = 523;
            Desc_MPLSOAM_BROADCAST = 524;
            Desc_MPLSX_ARPX_MISS = 525;
            Desc_MPLSX_ARPX_MISSX_MESSAGEX_TOX_CPU = 526;
            Desc_MPLSX_LABELX_FAIL = 527;
            Desc_MPLSX_MULTICAST = 528;
            Desc_MPLSX_OAMX_FAULTX_BROADCAST = 529;
            Desc_MPLSX_PROTOCOLX_S = 530;
            Desc_MPLSX_TTLX_EXPIRES = 531;
            Desc_MPLSX_X_EXCEEDINGX_MTU = 532;
            Desc_MPLSX_X_FORWARDINGX_TOX_CP = 533;
            Desc_MPLSX_X_TOKENX_FAIL = 534;
            Desc_MPLSX_X_TOX_CPUX_AFTERX_3X_MPLSX_LABELX_POP = 535;
            Desc_MPLSX_X_TOX_CPUX_AFTERX_POP = 536;
            Desc_MPLSX_X_WITHX_ROUTERX_ALERT = 537;
            Desc_MPLS_LABEL_CHECK_FAIL = 538;
            Desc_MPLS_PATHMTU_ERROR = 539;
            Desc_MSDP = 540;
            Desc_MTC_MFIB_SG_DROP = 541;
            Desc_MTC_MFIB_SSM_CAUSE = 542;
            Desc_MTUERR_VVBM = 543;
            Desc_MULTICASTX_DUMMYX_TABLEX_DECIDINGX_TOX_CPU = 544;
            Desc_MULTICASTX_LEAFX_TABLEX_DECIDINGX_TOX_CPU = 545;
            Desc_NETSECCHN_SOCKETX_PACKET = 546;
            Desc_NETSTREAMX_S = 547;
            Desc_NEW_BFD = 548;
            Desc_NEW_DLP_OPENFLOW = 549;
            Desc_NEW_ETRUNK = 550;
            Desc_NEW_TCPSYN_FTPSERVER = 551;
            Desc_NEW_TCPSYN_MSDP = 552;
            Desc_NHLFE_NV = 553;
            Desc_NHPPTR_CHKERR = 554;
            Desc_NHRP_MISS_PACKET = 555;
            Desc_NHRP_NO_REGISTER_REQUEST_PACKET = 556;
            Desc_NHRP_REDIRECT_PACKET = 557;
            Desc_NHRP_REGISTER_REQUEST_PACKET = 558;
            Desc_NOE_CHGVID_PRUNE = 559;
            Desc_NOE_PRUNE = 560;
            Desc_NOE_QUALIFY = 561;
            Desc_NOIPV4 = 562;
            Desc_NOIPV6 = 563;
            Desc_NONEX_ARPX_BROADCASTX_X_TOX_CPU = 564;
            Desc_NONEX_GREX_X_EXITSX_GREX_TUNNEL = 565;
            Desc_NQA_CROSS_BOARD_TO_CP = 566;
            Desc_NQA_ICMP_JITTER = 567;
            Desc_NQA_RCV = 568;
            Desc_NQA_RCV_CROSS = 569;
            Desc_NQA_SEND_OVER_TO_CP = 570;
            Desc_NQA_TRANS_TIMESTAMP = 571;
            Desc_NQA_UDP_JITTER = 572;
            Desc_NSID_CFGERR = 573;
            Desc_NS_TOCOP = 574;
            Desc_NTP_1 = 575;
            Desc_NTP_2 = 576;
            Desc_OAMX_1AGX_TEST = 577;
            Desc_OAMX_3AHX_TEST = 578;
            Desc_OAMX_BDIX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 579;
            Desc_OAMX_CVFFDX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 580;
            Desc_OAM_TOCOP = 581;
            Desc_OLDERR = 582;
            Desc_ONLINEX_USERX_DHCPV4X_REQUEST = 583;
            Desc_ONLINEX_USERX_DHCPV6X_REQUEST = 584;
            Desc_ONLINEX_USERX_DHCPV6X_SOLICIT = 585;
            Desc_OPENFLOWX_PACKET = 586;
            Desc_OSPF = 587;
            Desc_OSPFV3 = 588;
            Desc_OSPFV3X_PACKET = 589;
            Desc_OSPFV3_19E = 590;
            Desc_OTHERX_PROTOCOLX_S = 591;
            Desc_OUTBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 592;
            Desc_OUTPBT_ERR = 593;
            Desc_OUTPKTLEN_ERR = 594;
            Desc_P2MPBFD_SESSION_DOWN = 595;
            Desc_P2MPCHKERR = 596;
            Desc_PACKETX_WITHOUTX_NEXTX_HOPX_LEX_POINTER = 597;
            Desc_PAKCETX_TOX_CPUX_WHENX_MFIBV6X_TABLEX_MISMATCH = 598;
            Desc_PARITY_ERR = 599;
            Desc_PATHMTU_ERROR = 600;
            Desc_PBB_HVPLS_EQ_BRIDGE_MAC = 601;
            Desc_PBB_HVPLS_NEED_STUDY = 602;
            Desc_PBTCC = 603;
            Desc_PBTCC_ACLMISS = 604;
            Desc_PBT_SELECTDROP = 605;
            Desc_PDTX_CHANNELX_RECEIVESX_APS = 606;
            Desc_PERFTEST_DETECT_PKT = 607;
            Desc_PESX_HEARTX_BEAT = 608;
            Desc_PIB_EXT_NV = 609;
            Desc_PIB_NV = 610;
            Desc_PIMV6X_PACKET = 611;
            Desc_PIM_1 = 612;
            Desc_PIM_2 = 613;
            Desc_PIM_FROM_LSP = 614;
            Desc_PIM_FROM_VLAN = 615;
            Desc_PKTLENERR = 616;
            Desc_PKT_COVER_EPEFIFO = 617;
            Desc_PLENERR = 618;
            Desc_POLICYDIP_FIB_NM = 619;
            Desc_POLICY_FIBV6_NM = 620;
            Desc_POLICY_FIB_NM = 621;
            Desc_PORTALX_FORCE = 622;
            Desc_PORTAL_SYNX_PACKET = 623;
            Desc_PORT_ERR = 624;
            Desc_PORT_PRUNE_ERR = 625;
            Desc_POSPDUUK = 626;
            Desc_PPPIPX = 627;
            Desc_PPPX_CONFIGX_X_TOX_CPU = 628;
            Desc_PPPX_CONTROL = 629;
            Desc_PPPX_PADT = 630;
            Desc_PPP_ACERR = 631;
            Desc_PPP_LLDP = 632;
            Desc_PPP_MPLS_PASSBY = 633;
            Desc_PPP_PATHMTU_ERROR = 634;
            Desc_PRUNEINDEX_CHKERR = 635;
            Desc_PSF = 636;
            Desc_PSFX_BROADCAST = 637;
            Desc_PST_BROADCAST = 638;
            Desc_PWE3 = 639;
            Desc_PWGARP = 640;
            Desc_PWNGARP = 641;
            Desc_PW_DM_TO_CP = 642;
            Desc_PW_SL_TO_CP = 643;
            Desc_QINQ_PRUNE_CHKERR = 644;
            Desc_QOE_TOCOP_10 = 645;
            Desc_QOE_TOCOP_11 = 646;
            Desc_QOE_TOCOP_12 = 647;
            Desc_QOE_TOCOP_2 = 648;
            Desc_QOE_TOCOP_3 = 649;
            Desc_QOE_TOCOP_4 = 650;
            Desc_QOE_TOCOP_5 = 651;
            Desc_QOE_TOCOP_6 = 652;
            Desc_QOE_TOCOP_7 = 653;
            Desc_QOE_TOCOP_8 = 654;
            Desc_QOE_TOCOP_9 = 655;
            Desc_QOS_ACL_REDIRECT_TO_CP = 656;
            Desc_QOS_EFIT_DROP = 657;
            Desc_QOS_ID_BASE = 658;
            Desc_QOS_IFIT_DROP = 659;
            Desc_QOS_RE_DROP = 660;
            Desc_QPPB_DROP = 661;
            Desc_QUALIFY_ERR = 662;
            Desc_QVCTX_MISSX_DHCPX_X_ORX_DHCPX_DISCOVER = 663;
            Desc_QVCT_MISS_IPV4_PACKET = 664;
            Desc_QVCT_MISS_IPV6_DHCP_PACKET = 665;
            Desc_QVCT_MISS_IPV6_ND_PACKET = 666;
            Desc_QVCT_MISS_PPPOE_PACKET = 667;
            Desc_RADIUS = 668;
            Desc_RAPSX_SPECIALX_TOX_CP = 669;
            Desc_RAPS_EG_TO_CP = 670;
            Desc_RAPS_TO_CP = 671;
            Desc_RECYCLE_TYPE_ERR = 672;
            Desc_REDIRECTX_DEFAULT = 673;
            Desc_REDIRECTX_TOX_OTHERX_BOARDX_CPU = 674;
            Desc_REDIRECT_DHCP = 675;
            Desc_REDIRECT_ICMP = 676;
            Desc_REDIRECT_RIP1 = 677;
            Desc_REDIRECT_SNMP = 678;
            Desc_REPTR_CHKERR = 679;
            Desc_RESERVED = 680;
            Desc_RESERVEDX_MULTICASTX_PIM = 681;
            Desc_RESERVED_1 = 682;
            Desc_RESERVED_2 = 683;
            Desc_RESERVED_MC_IF_ROUTER = 684;
            Desc_RESERVED_MC_OSPF = 685;
            Desc_RESERVED_MC_OSPF_DR = 686;
            Desc_RESERVED_MC_RIP2 = 687;
            Desc_RES_UDP_TO_IP_MODULE = 688;
            Desc_RE_PRUNE = 689;
            Desc_RIPV6_1 = 690;
            Desc_RIPV6_2 = 691;
            Desc_RIP_1 = 692;
            Desc_RIP_2 = 693;
            Desc_RPR_CTRL = 694;
            Desc_RRPP = 695;
            Desc_RRPPCPU = 696;
            Desc_RRPPDROP = 697;
            Desc_RRPPINV = 698;
            Desc_RRPP_BLK = 699;
            Desc_RSVP_1 = 700;
            Desc_RSVP_2 = 701;
            Desc_SCHKERR = 702;
            Desc_SEARCHX_TRAFFICX_POLICYX_REX_TABLEX_TOX_DECIDEX_WHETHERX_SENDINGX_TOX_CPU = 703;
            Desc_SFTPX_CLIENT = 704;
            Desc_SFTPX_SERVER = 705;
            Desc_SIPDIPERR = 706;
            Desc_SIPERR = 707;
            Desc_SIPFLTRERR = 708;
            Desc_SLBLSERR = 709;
            Desc_SMACERR_1 = 710;
            Desc_SMACERR_2 = 711;
            Desc_SMACERR_DROP = 712;
            Desc_SNMP = 713;
            Desc_SNMPV6X_PACKET = 714;
            Desc_SOFTX_GRE = 715;
            Desc_SOURCE_CHECKERR = 716;
            Desc_SPECIALX_INBOUNDX_TRAFFICX_POLICYX_CONTENTX_SENDINGX_TOX_CPU = 717;
            Desc_SPECIALX_IPV4X_MULTICASTX_X_224X_0X_0X_0X_224X_0X_0X_255 = 718;
            Desc_SPECIALX_IPV6X_MULTICAST = 719;
            Desc_SPKERR = 720;
            Desc_SSHV6X_SERVERX_PACKET = 721;
            Desc_SSHX_CLIENT = 722;
            Desc_SSHX_SERVER = 723;
            Desc_SSM_PKT_TO_CP = 724;
            Desc_STATUS_ERR = 725;
            Desc_STP_OVER_VPLS_BPDU_1 = 726;
            Desc_STP_OVER_VPLS_BPDU_2 = 727;
            Desc_ST_BLK_1 = 728;
            Desc_ST_BLK_2 = 729;
            Desc_SYLM_TO_CP = 730;
            Desc_SYLR_TO_CP = 731;
            Desc_SYSLOG = 732;
            Desc_SYSTEMX_MESSAGE = 733;
            Desc_TAG_ERR_1 = 734;
            Desc_TAG_ERR_2 = 735;
            Desc_TARGETX_IPX_ISX_BROADCASTX_ADDRESS = 736;
            Desc_TBTP_INVALID = 737;
            Desc_TCPSYNX_PACKET = 738;
            Desc_TCPSYNX_SX_FORX_BGP = 739;
            Desc_TCPSYNX_SX_FORX_LDP = 740;
            Desc_TCPSYNX_SX_FORX_SSH = 741;
            Desc_TCPSYNX_SX_FORX_TELNET = 742;
            Desc_TCP_ABNORMAL = 743;
            Desc_TCP_UDPFLOOD = 744;
            Desc_TELEMETRY_PACK = 745;
            Desc_TELNETV6X_CLIENTX_PACKET = 746;
            Desc_TELNETV6X_SERVERX_PACKET = 747;
            Desc_TELNETX_CLIENT = 748;
            Desc_TELNETX_SERVER = 749;
            Desc_TFTPV6X_CLIENTX_PACKET = 750;
            Desc_TFTPX_SERVER = 751;
            Desc_TIMER_SYN = 752;
            Desc_TIMER_SYN_CLEAR_ISBC = 753;
            Desc_TIME_OUT_PIEP = 754;
            Desc_TO_MNG_PORT_FTPX_PACKET = 755;
            Desc_TO_MNG_PORT_OTHERX_PACKET = 756;
            Desc_TP_OAM_CCM = 757;
            Desc_TP_OAM_DMM = 758;
            Desc_TP_OAM_LMM = 759;
            Desc_TRACERT = 760;
            Desc_TRAFFIC_BEHAVIOR_LOG = 761;
            Desc_TRUNK_INVALID = 762;
            Desc_TWAMP = 763;
            Desc_TWAMPX_PACKET = 764;
            Desc_UDLD = 765;
            Desc_UKUC_CPU = 766;
            Desc_UKUC_DROP = 767;
            Desc_UMCMASKERR = 768;
            Desc_UMC_CPU = 769;
            Desc_UMC_DROP = 770;
            Desc_UNCLASSIFIEDX_X_TOX_CPU = 771;
            Desc_UNICASTX_SMACX_CONFIGX_TOX_BEX_LEARNEDX_BYX_CPU = 772;
            Desc_UNICASTX_VRRPX_PACKET = 773;
            Desc_UNKNOWN = 774;
            Desc_UNKNOWNMTU = 775;
            Desc_UNKNOWNX_MPLSX_OAM = 776;
            Desc_UNKNOWNX_PPPX_FRAMEX_TOX_CPU = 777;
            Desc_UNKNOWN_COP = 778;
            Desc_UPNHLFE_NV = 779;
            Desc_USERMACX_MISSX_ARPX_ORX_IPV4X_PACKET = 780;
            Desc_USERMACX_MISSX_IPARP = 781;
            Desc_USERX_DEFINEDX_FLOWX_1 = 782;
            Desc_USERX_DEFINEDX_FLOWX_10 = 783;
            Desc_USERX_DEFINEDX_FLOWX_11 = 784;
            Desc_USERX_DEFINEDX_FLOWX_12 = 785;
            Desc_USERX_DEFINEDX_FLOWX_13 = 786;
            Desc_USERX_DEFINEDX_FLOWX_14 = 787;
            Desc_USERX_DEFINEDX_FLOWX_15 = 788;
            Desc_USERX_DEFINEDX_FLOWX_16 = 789;
            Desc_USERX_DEFINEDX_FLOWX_17 = 790;
            Desc_USERX_DEFINEDX_FLOWX_18 = 791;
            Desc_USERX_DEFINEDX_FLOWX_19 = 792;
            Desc_USERX_DEFINEDX_FLOWX_2 = 793;
            Desc_USERX_DEFINEDX_FLOWX_20 = 794;
            Desc_USERX_DEFINEDX_FLOWX_21 = 795;
            Desc_USERX_DEFINEDX_FLOWX_22 = 796;
            Desc_USERX_DEFINEDX_FLOWX_23 = 797;
            Desc_USERX_DEFINEDX_FLOWX_24 = 798;
            Desc_USERX_DEFINEDX_FLOWX_25 = 799;
            Desc_USERX_DEFINEDX_FLOWX_26 = 800;
            Desc_USERX_DEFINEDX_FLOWX_27 = 801;
            Desc_USERX_DEFINEDX_FLOWX_28 = 802;
            Desc_USERX_DEFINEDX_FLOWX_29 = 803;
            Desc_USERX_DEFINEDX_FLOWX_3 = 804;
            Desc_USERX_DEFINEDX_FLOWX_30 = 805;
            Desc_USERX_DEFINEDX_FLOWX_31 = 806;
            Desc_USERX_DEFINEDX_FLOWX_32 = 807;
            Desc_USERX_DEFINEDX_FLOWX_33 = 808;
            Desc_USERX_DEFINEDX_FLOWX_34 = 809;
            Desc_USERX_DEFINEDX_FLOWX_35 = 810;
            Desc_USERX_DEFINEDX_FLOWX_36 = 811;
            Desc_USERX_DEFINEDX_FLOWX_37 = 812;
            Desc_USERX_DEFINEDX_FLOWX_38 = 813;
            Desc_USERX_DEFINEDX_FLOWX_39 = 814;
            Desc_USERX_DEFINEDX_FLOWX_4 = 815;
            Desc_USERX_DEFINEDX_FLOWX_40 = 816;
            Desc_USERX_DEFINEDX_FLOWX_41 = 817;
            Desc_USERX_DEFINEDX_FLOWX_42 = 818;
            Desc_USERX_DEFINEDX_FLOWX_43 = 819;
            Desc_USERX_DEFINEDX_FLOWX_44 = 820;
            Desc_USERX_DEFINEDX_FLOWX_45 = 821;
            Desc_USERX_DEFINEDX_FLOWX_46 = 822;
            Desc_USERX_DEFINEDX_FLOWX_47 = 823;
            Desc_USERX_DEFINEDX_FLOWX_48 = 824;
            Desc_USERX_DEFINEDX_FLOWX_49 = 825;
            Desc_USERX_DEFINEDX_FLOWX_5 = 826;
            Desc_USERX_DEFINEDX_FLOWX_50 = 827;
            Desc_USERX_DEFINEDX_FLOWX_51 = 828;
            Desc_USERX_DEFINEDX_FLOWX_52 = 829;
            Desc_USERX_DEFINEDX_FLOWX_53 = 830;
            Desc_USERX_DEFINEDX_FLOWX_54 = 831;
            Desc_USERX_DEFINEDX_FLOWX_55 = 832;
            Desc_USERX_DEFINEDX_FLOWX_56 = 833;
            Desc_USERX_DEFINEDX_FLOWX_57 = 834;
            Desc_USERX_DEFINEDX_FLOWX_58 = 835;
            Desc_USERX_DEFINEDX_FLOWX_59 = 836;
            Desc_USERX_DEFINEDX_FLOWX_6 = 837;
            Desc_USERX_DEFINEDX_FLOWX_60 = 838;
            Desc_USERX_DEFINEDX_FLOWX_61 = 839;
            Desc_USERX_DEFINEDX_FLOWX_62 = 840;
            Desc_USERX_DEFINEDX_FLOWX_63 = 841;
            Desc_USERX_DEFINEDX_FLOWX_64 = 842;
            Desc_USERX_DEFINEDX_FLOWX_7 = 843;
            Desc_USERX_DEFINEDX_FLOWX_8 = 844;
            Desc_USERX_DEFINEDX_FLOWX_9 = 845;
            Desc_USER_MAC_MISS_IP_ARP = 846;
            Desc_USMACX_MISSX_IPV6 = 847;
            Desc_USMAC_ARP_PACKET = 848;
            Desc_USMAC_IGMP_PACKET = 849;
            Desc_UUCMASKERR = 850;
            Desc_V6EINDX_MISS = 851;
            Desc_V6MLD_DONE = 852;
            Desc_V6MLD_QUERY = 853;
            Desc_V6MLD_V1REP = 854;
            Desc_V6MLD_V2REP = 855;
            Desc_V6ND_NA = 856;
            Desc_V6ND_NS = 857;
            Desc_V6ND_RA = 858;
            Desc_V6ND_REDIRECT = 859;
            Desc_V6ND_RS = 860;
            Desc_V6OUTV4_V6MC = 861;
            Desc_VALN_STACKING_CHK = 862;
            Desc_VC_HUB = 863;
            Desc_VGMP = 864;
            Desc_VIRTUAL_CAUSE_NEW_FRAGMENT = 865;
            Desc_VLAN_HOSTCAR_ATTACK = 866;
            Desc_VLLVM = 867;
            Desc_VLLVM_ARP = 868;
            Desc_VLLVM_HDLC = 869;
            Desc_VLLVM_PPP = 870;
            Desc_VRRP_1 = 871;
            Desc_VRRP_2 = 872;
            Desc_VRRP_MAC_ADD_MSG = 873;
            Desc_VSM_CGN = 874;
            Desc_VSM_HA = 875;
            Desc_VSM_IPSEC = 876;
            Desc_VSM_IPSEC_PLAIN = 877;
            Desc_VXLANPING = 878;
            Desc_WEB = 879;
            Desc_WEBX_AUTHX_SERVERX_PACKET = 880;
            Desc_WEB_USEER_RESTRAIN = 881;
            Desc_WHITELIST = 882;
            Desc_WHITELIST_OSPF_PACKET = 883;
            Desc_WHITELIST_RADIUS_PACKET = 884;
            Desc_WORKDIS = 885;
            Desc_WRAP = 886;
            Desc_X_1355 = 887;
            Desc_X_1356 = 888;
            Desc_X_1564_STOP = 889;
            Desc_X_1564_TOCP = 890;
            Desc_X_1AG = 891;
            Desc_X_1AG_UNK = 892;
            Desc_X_1AG_CC_LEVEL_ERR_UP = 893;
            Desc_X_1AG_CC_MEPID_ERR_DOWN = 894;
            Desc_X_1AG_CC_MEPID_ERR_UP_1 = 895;
            Desc_X_1AG_CC_MEPID_ERR_UP_2 = 896;
            Desc_X_1AG_VERIFY_ERR = 898;
            Desc_X_1DM_CW_TO_CP = 899;
            Desc_X_1DM_NO_CW_TO_CP = 900;
            Desc_X_2544_TIME_DELAY = 901;
            Desc_X_3AH = 902;
            Desc_X_3AHLCLLPBK = 903;
            Desc_X_3AHX_LOOPX_TESTX_SUCCESSX_MESSAGE = 904;
            Desc_X_3AH_PDU = 905;
            Desc_X_4OVER6_PRTCL_ERROR = 906;
            Desc_X_5822_FIDT_NV = 907;
            Desc_X_588CAUSE_114 = 908;
            Desc_X_588CAUSE_115 = 909;
            Desc_X_588CAUSE_121 = 910;
            Desc_X_588CAUSE_126 = 911;
            Desc_X_588CAUSE_128 = 912;
            Desc_X_588CAUSE_129 = 913;
            Desc_X_588CAUSE_131 = 914;
            Desc_X_588CAUSE_132 = 915;
            Desc_X_588CAUSE_133 = 916;
            Desc_X_588CAUSE_183 = 917;
            Desc_X_588CAUSE_191 = 918;
            Desc_X_588CAUSE_208 = 919;
            Desc_X_588CAUSE_253 = 920;
            Desc_X_588CAUSE_254 = 921;
            Desc_X_588CAUSE_255 = 922;
            Desc_X_802X_1AG = 923;
            Desc_Y1731_AIS_INWARD_EGRESS = 924;
            Desc_Y1731_AIS_OUTWARD_INGRESS = 925;
            Desc_Y1731_DM_AC_INANDOUT = 926;
            Desc_Y1731_ETH_BN = 927;
            Desc_Y1731_LCK = 928;
            Desc_Y1731_LMR_AC_INANDOUT = 929;
            Desc_Y1731_MLB_INWARD_EGRESS = 930;
            Desc_Y1731_MLB_OUTWARD_INGRESS = 931;
            Desc_ADMINX_LSX_PACKET = 932;
            Desc_ICMP6X_ECHOX_PACKET = 933;
            Desc_ICMP_ECHO = 934;
            Desc_IPV6X_SYNX_BGPX_PACKET = 935;
            Desc_IPV6X_SYNX_SSHX_PACKET = 936;
            Desc_IPV6X_SYNX_TELNETX_PACKET = 937;
            Desc_LPT = 938;
            Desc_MAP_ICMP = 939;
            Desc_MLDP_MBB_PKT = 940;
            Desc_SRHX_OTPX_TOCPX_PACKET = 941;
            Desc_IPTVX_INGRESSX_PACKET = 942;
         };
         Desc desc = 1;
         uint32 secApId = 2;
         uint32 secMinPkt = 3;
         uint32 secPolicyCbs = 4;
         uint32 secPolicyCir = 5;
         uint32 secPolicyTypeID = 6;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_CS7 = 6;
            SecPriority_DEFAULT = 7;
            SecPriority_EF = 8;
            SecPriority_HIGH = 9;
            SecPriority_LOW = 10;
            SecPriority_MIDDLE = 11;
         };
         SecPriority secPriority = 7;
         string secSlotId = 8;
      }
      repeated NvsecCurrentCarNode nvsecCurrentCarNode = 1;
   }
   NvsecCurrentCarNodes nvsecCurrentCarNodes = 2;
   message NvsecDefaultCarNodes {
      message NvsecDefaultCarNode {
         uint32 secApId = 1;
         uint32 secCbs = 2;
         uint32 secCir = 3;
         uint32 secMinPkt = 4;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_CS7 = 6;
            SecPriority_DEFAULT = 7;
            SecPriority_EF = 8;
            SecPriority_HIGH = 9;
            SecPriority_LOW = 10;
            SecPriority_MIDDLE = 11;
         };
         SecPriority secPriority = 5;
         string secSlotId = 6;
         uint32 secSysId = 7;
         enum SecTypeId {
            SecTypeId_ABNORM = 0;
            SecTypeId_ACCESSIMAC_ERR = 1;
            SecTypeId_ACL = 2;
            SecTypeId_ACL_CAPTURE_PKT_3 = 3;
            SecTypeId_ACL_CAPTURE_PKT_4 = 4;
            SecTypeId_ACL_CAPTURE_PKT_5 = 5;
            SecTypeId_ACL_CAPTURE_PKT_6 = 6;
            SecTypeId_ACL_CAPTURE_PKT_7 = 7;
            SecTypeId_ACL_CAPTURE_PKT_8 = 8;
            SecTypeId_ACR_DELAY_REQ = 9;
            SecTypeId_ACT_DISPKT = 10;
            SecTypeId_AGG_AGINGPKT = 11;
            SecTypeId_AIBX_TABLEX_INVALIDX_MESSAGEX_TOX_CPUX_INX_MEX_ENCAPSULATION = 12;
            SecTypeId_AIB_FAKE = 13;
            SecTypeId_AIDCHKERR = 14;
            SecTypeId_AID_CFGERR = 15;
            SecTypeId_AID_NV_ME = 16;
            SecTypeId_AID_NV_ME_LE = 17;
            SecTypeId_AID_NV_ME_ME = 18;
            SecTypeId_AID_NV_TE_RLY = 19;
            SecTypeId_AID_NV_TE_TUL = 20;
            SecTypeId_ALL_HUB = 21;
            SecTypeId_ALL_SPOKE = 22;
            SecTypeId_APS = 23;
            SecTypeId_APSX_SWAPX_FRAME = 24;
            SecTypeId_APSX_X_TOX_CPU = 25;
            SecTypeId_APS_ACLMISS = 26;
            SecTypeId_APS_ALARM_MSG = 27;
            SecTypeId_APS_BC = 28;
            SecTypeId_APS_CC_UP_DOWN_BC_MSG = 29;
            SecTypeId_APS_INTERNAL_SW_MSG = 30;
            SecTypeId_APS_PORT_STATUS_BROADCAST = 31;
            SecTypeId_APS_RDI_RDI_R_BC_MSG = 32;
            SecTypeId_APS_UPDATE_IVSI_BC_MSG = 33;
            SecTypeId_APS_UPDATE_PBT_GROUP_BC_MSG = 34;
            SecTypeId_ARPCHKERR = 35;
            SecTypeId_ARPCHK_DIPERR = 36;
            SecTypeId_ARPV6X_MISSX_MESSAGEX_TOX_CPU = 37;
            SecTypeId_ARP_ACLMISS = 38;
            SecTypeId_ARP_ATTACK = 39;
            SecTypeId_ARP_DROP = 40;
            SecTypeId_ARP_REPLY_NO_INCOMPLETE = 41;
            SecTypeId_ARP_REQ_ANTIATTACK = 42;
            SecTypeId_ARP_SAFEGUARD_REPLY = 43;
            SecTypeId_ATMX_INARPX_PACKET = 44;
            SecTypeId_ATM_OAM = 45;
            SecTypeId_AUTORP = 46;
            SecTypeId_BASX_ARPX_REPLY = 47;
            SecTypeId_BASX_IPOEV6X_LINKLOCAL = 48;
            SecTypeId_BASX_IPOEX_ICMPV6X_MC = 49;
            SecTypeId_BASX_QVCTX_MISS = 50;
            SecTypeId_BASX_QVCTX_MISSX_ARPX_PACKET = 51;
            SecTypeId_BASX_REVX_MCX_PACKET = 52;
            SecTypeId_BAS_CONTROL_PPP = 53;
            SecTypeId_BAS_DHCP_DISCOVER = 54;
            SecTypeId_BAS_DIRECT_CP = 55;
            SecTypeId_BAS_IPV4_DHCPX_PACKET = 56;
            SecTypeId_BAS_IPV4_REDIRECT_TCP = 57;
            SecTypeId_BAS_IPV6_NAX_PACKET = 58;
            SecTypeId_BAS_IPV6_NA_REDIRECT_CPX_PACKET = 59;
            SecTypeId_BAS_IPV6_NSX_PACKET = 60;
            SecTypeId_BAS_IPV6_NS_REDIRECT_CPX_PACKET = 61;
            SecTypeId_BAS_IPV6_REDIRECT_CP = 62;
            SecTypeId_BAS_IPV6_RSX_PACKET = 63;
            SecTypeId_BAS_MUTE_CLIENTX_PACKET = 64;
            SecTypeId_BAS_PPP_ECHO_NOUSER = 65;
            SecTypeId_BAS_PPP_KEEP_LIVE = 66;
            SecTypeId_BAS_SSDPX_PACKET = 67;
            SecTypeId_BAS_VBAS = 68;
            SecTypeId_BAS_WEB = 69;
            SecTypeId_BCMASKERR = 70;
            SecTypeId_BET_INVALID = 71;
            SecTypeId_BE_ABNORMITY_SB = 72;
            SecTypeId_BE_DELETE = 73;
            SecTypeId_BE_DIFF_UPDATE = 74;
            SecTypeId_BE_SB = 75;
            SecTypeId_BE_STATIC = 76;
            SecTypeId_BE_SYN = 77;
            SecTypeId_BFD = 78;
            SecTypeId_BFDX_FAILINGX_MESSAGE = 79;
            SecTypeId_BFDX_RECEIVEX_X_FROMX_LOCAL = 80;
            SecTypeId_BFDX_SESSIONDOWNX_MESSAGE = 81;
            SecTypeId_BFDX_STATEX_CHANGINGX_MESSAGEX_FORWARDINGX_TOX_CP = 82;
            SecTypeId_BFDX_TOX_CPU_1 = 83;
            SecTypeId_BFDX_TOX_CPU_2 = 84;
            SecTypeId_BFDX_TOX_CPU_3 = 85;
            SecTypeId_BFDX_X_NOTX_UPX_MESSAGE = 86;
            SecTypeId_BFDX_X_TOX_CPUX_FROMX_OTHERX_BOARD = 87;
            SecTypeId_BFD_ACLMISS = 88;
            SecTypeId_BFD_BIT_ERROR_DETECT = 89;
            SecTypeId_BFD_FAULT_BC = 90;
            SecTypeId_BFD_REMOTE_YD0 = 91;
            SecTypeId_BGPV6X_PACKET = 92;
            SecTypeId_BGP_1 = 93;
            SecTypeId_BGP_2 = 94;
            SecTypeId_BH_LOOPDETECT_CPU = 95;
            SecTypeId_BIGHEART = 96;
            SecTypeId_BLACKLIST = 97;
            SecTypeId_BPDU = 98;
            SecTypeId_BPDU_E = 99;
            SecTypeId_BPDU_TNL = 100;
            SecTypeId_BRIDGEX_FDBX_LEARN = 101;
            SecTypeId_BRIDGEX_MACX_TOX_CPU = 102;
            SecTypeId_BRIDGE_CIB_MAC_LIMIT = 103;
            SecTypeId_BRIDGE_DISABLE = 104;
            SecTypeId_BRIDGE_EGRESS_FDB_LEARN = 105;
            SecTypeId_BRIDGE_INGRESS_FDB_LEARN = 106;
            SecTypeId_BRIDGE_PCT_MAC_LIMIT = 107;
            SecTypeId_BRIDGE_VSI_MAC_LIMIT = 108;
            SecTypeId_BROADCASTX_SENDINGX_MULTICASTX_X_CAUSEX_INX_FULLX_FRAME = 109;
            SecTypeId_CCM = 110;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_MESSAGE = 111;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_TIMEOUTX_MESSAGE = 112;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_RDIX_MESSAGE = 113;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_UPX_DOWNX_MESSAGE = 114;
            SecTypeId_CCM_ACLMISS = 115;
            SecTypeId_CCM_Y1731_TO_CP = 116;
            SecTypeId_CCX_X_FREQUENCYX_X_SMACX_X_MAIDX_FIELDX_MISMATCHX_ERROR = 117;
            SecTypeId_CC_FREQ_RECOVER = 118;
            SecTypeId_CC_LEVELERR = 119;
            SecTypeId_CC_MAID_RECOVER = 120;
            SecTypeId_CC_SMAC_RECOVER = 121;
            SecTypeId_CDP = 122;
            SecTypeId_CFGERR_1 = 123;
            SecTypeId_CFGERR_2 = 124;
            SecTypeId_CHADDRERR = 125;
            SecTypeId_CHDLCX_KEEPLIVE = 126;
            SecTypeId_CHECKSUMERR = 127;
            SecTypeId_CHECKURPFERR = 128;
            SecTypeId_CIB_EXT_NV = 129;
            SecTypeId_CIB_NV = 130;
            SecTypeId_CIB_PV_EXT_NV = 131;
            SecTypeId_CIB_PV_NV = 132;
            SecTypeId_CPACLX_CARX_SOURCEX_TRACE = 133;
            SecTypeId_CRB1MISS = 134;
            SecTypeId_CRB2MISS = 135;
            SecTypeId_CRBITAGMISS = 136;
            SecTypeId_CRBQINQMISS = 137;
            SecTypeId_CROSSBOARD_MACDEL = 138;
            SecTypeId_CWCMD2 = 139;
            SecTypeId_CWCMD3 = 140;
            SecTypeId_DCN = 141;
            SecTypeId_DCNX_DATA = 142;
            SecTypeId_DCNX_REDIRECT = 143;
            SecTypeId_DCN_PKT_FIN = 144;
            SecTypeId_DCN_PKT_INIT = 145;
            SecTypeId_DEFAULTX_RESERVEDX_MULTICAST = 146;
            SecTypeId_DESCERR = 147;
            SecTypeId_DESCMERGEDERR = 148;
            SecTypeId_DESC_PASS_ERR = 149;
            SecTypeId_DHCPCHKERR = 150;
            SecTypeId_DHCPINV = 151;
            SecTypeId_DHCPREP = 152;
            SecTypeId_DHCPREQ = 153;
            SecTypeId_DHCPSTRONG = 154;
            SecTypeId_DHCPUNT = 155;
            SecTypeId_DHCP_1 = 156;
            SecTypeId_DHCP_2 = 157;
            SecTypeId_DHCP_PKT = 158;
            SecTypeId_DHCP_SMAC_ERR = 159;
            SecTypeId_DHCP_SP_ERR = 160;
            SecTypeId_DIAMETERX_PACKET = 161;
            SecTypeId_DIP224_DROP = 162;
            SecTypeId_DIP224_TCP = 163;
            SecTypeId_DIP224_UDP = 164;
            SecTypeId_DIPERR_1 = 165;
            SecTypeId_DIPERR_2 = 166;
            SecTypeId_DIPERR_DROP = 167;
            SecTypeId_DIS = 168;
            SecTypeId_DISIPV4MC = 169;
            SecTypeId_DISIPV4UC = 170;
            SecTypeId_DISIPV6MC = 171;
            SecTypeId_DISIPV6UC = 172;
            SecTypeId_DISRE = 173;
            SecTypeId_DLP_BGP = 174;
            SecTypeId_DLP_IPV6_OSPF = 175;
            SecTypeId_DLP_ISIS = 176;
            SecTypeId_DLP_LDP = 177;
            SecTypeId_DLP_LDP_UDP = 178;
            SecTypeId_DLP_RSVP = 179;
            SecTypeId_DMM_CW_TO_CP = 180;
            SecTypeId_DMM_NO_CW_TO_CP = 181;
            SecTypeId_DMR_CW_TO_CP = 182;
            SecTypeId_DMR_NO_CW_TO_CP = 183;
            SecTypeId_DNSUNT = 184;
            SecTypeId_DNSV6X_PACKET = 185;
            SecTypeId_DNSX_CLIENT = 186;
            SecTypeId_DROPPINGX_UNKNOWNX_MULTICAST = 187;
            SecTypeId_DROPPINGX_UNKNOWNX_UNICAST = 188;
            SecTypeId_DROP_CPUIRT = 189;
            SecTypeId_DROP_CPUT = 190;
            SecTypeId_DROP_ERED = 191;
            SecTypeId_DROP_EYELLOW = 192;
            SecTypeId_DROP_IRED = 193;
            SecTypeId_DROP_IYELLOW = 194;
            SecTypeId_EAPOLX_FRAME = 195;
            SecTypeId_ECC_ERR = 196;
            SecTypeId_ECIB_NV = 197;
            SecTypeId_ECID_NV = 198;
            SecTypeId_ECMP_PRUNE = 199;
            SecTypeId_EFIT_DROP = 200;
            SecTypeId_ELMI = 201;
            SecTypeId_EMCPAT_NV = 202;
            SecTypeId_EMPTYLOADIPERR = 203;
            SecTypeId_ENCAP_UK = 204;
            SecTypeId_EOPPAT_NV = 205;
            SecTypeId_EPEPAT_NV = 206;
            SecTypeId_ETHERNETX_BPDU = 207;
            SecTypeId_ETHERNETX_CONFIGX_X_TOX_CPU = 208;
            SecTypeId_ETHERX_TRUNKX_LACP = 209;
            SecTypeId_ETH_HGMP = 210;
            SecTypeId_ETH_IPX = 211;
            SecTypeId_ETH_PATHMTU_ERROR = 212;
            SecTypeId_ETH_UKTYPE = 213;
            SecTypeId_ETH_VRRP = 214;
            SecTypeId_FABRIC_HEART_1 = 215;
            SecTypeId_FABRIC_HEART_2 = 216;
            SecTypeId_FABRIC_HEART_PLUS_1 = 217;
            SecTypeId_FABRIC_HEART_PLUS_2 = 218;
            SecTypeId_FABRI_HEART_PLUS = 219;
            SecTypeId_FHFT = 220;
            SecTypeId_FIDTOUT_NV = 221;
            SecTypeId_FLUSH = 222;
            SecTypeId_FLUSHX_X_TOX_CPU = 223;
            SecTypeId_FRAGMENTX_PACKET = 224;
            SecTypeId_FRINARP = 225;
            SecTypeId_FRISIS = 226;
            SecTypeId_FRLMI = 227;
            SecTypeId_FRUK = 228;
            SecTypeId_FTPV6X_CLIENTX_PACKET = 229;
            SecTypeId_FTPV6X_SERVERX_PACKET = 230;
            SecTypeId_FTPX_CLIENT = 231;
            SecTypeId_FTPX_SERVER = 232;
            SecTypeId_GLB_TOKEN_CHKERR = 233;
            SecTypeId_GMACLBM = 234;
            SecTypeId_GMACLBR = 235;
            SecTypeId_GMACLTMDST = 236;
            SecTypeId_GMACLTMMID = 237;
            SecTypeId_GMACLTR = 238;
            SecTypeId_GMRPX_FRAMEX_ANDX_GVRPX_FRAME = 239;
            SecTypeId_GREINDEX_MISS = 240;
            SecTypeId_GRE_KEY_ERR = 241;
            SecTypeId_GRE_MF_TOCPU = 242;
            SecTypeId_GRE_ROUTING = 243;
            SecTypeId_GRE_UK = 244;
            SecTypeId_GSMP = 245;
            SecTypeId_GTSM_CHECKERR = 246;
            SecTypeId_GVRP_TOCP = 247;
            SecTypeId_HDLCCFG = 248;
            SecTypeId_HDLCIPX = 249;
            SecTypeId_HDLCUK = 250;
            SecTypeId_HDLC_ACERR = 251;
            SecTypeId_HEARTBEAT1 = 252;
            SecTypeId_HEARTBEAT10 = 253;
            SecTypeId_HEARTBEAT11 = 254;
            SecTypeId_HEARTBEAT2 = 255;
            SecTypeId_HEARTBEAT3 = 256;
            SecTypeId_HEARTBEAT4 = 257;
            SecTypeId_HEARTBEAT5 = 258;
            SecTypeId_HEARTBEAT6 = 259;
            SecTypeId_HEARTBEAT7 = 260;
            SecTypeId_HEARTBEAT8 = 261;
            SecTypeId_HEARTBEAT9 = 262;
            SecTypeId_HGMPX_V1X_FRAME = 263;
            SecTypeId_HOSTCAR_ATTAC = 264;
            SecTypeId_HTTPX_REDIRECTX_X_OFX_CHASTENX_USER = 265;
            SecTypeId_HTTP_HOSTCAR_ATTACK = 266;
            SecTypeId_HUBVLAN_ERR = 267;
            SecTypeId_HUB_ERR = 268;
            SecTypeId_HVRP = 269;
            SecTypeId_HWTACACS = 270;
            SecTypeId_IBE_ABNORMITY_SB = 271;
            SecTypeId_IBE_DELETE = 272;
            SecTypeId_IBE_DYNAMIC_DIFF_DROP = 273;
            SecTypeId_IBE_INVALID = 274;
            SecTypeId_IBE_SB = 275;
            SecTypeId_IBE_STATIC_DIFF_DROP = 276;
            SecTypeId_ICMP = 277;
            SecTypeId_ICMPV6X_PACKET = 278;
            SecTypeId_ICMPV6_REPLY = 279;
            SecTypeId_ICMPV6_REQUEST = 280;
            SecTypeId_ICMP_BROADCAST_ADDRESS_ECHO = 281;
            SecTypeId_ICMP_FRAG = 282;
            SecTypeId_ICMP_REPLY = 283;
            SecTypeId_ICMP_REQUEST = 284;
            SecTypeId_IEPPAT_NV_1 = 285;
            SecTypeId_IEPPAT_NV_2 = 286;
            SecTypeId_IFIT_CPU_SPECIAL = 287;
            SecTypeId_IFIT_DROP = 288;
            SecTypeId_IGMP_1 = 289;
            SecTypeId_IGMP_2 = 290;
            SecTypeId_IGMP_ACLMISS = 291;
            SecTypeId_IGMP_FAST_JOIN_1 = 292;
            SecTypeId_IGMP_FAST_JOIN_2 = 293;
            SecTypeId_IGMP_FROM_LSP = 294;
            SecTypeId_IGMP_FROM_VLAN = 295;
            SecTypeId_IGP_MAINTAIN_UNITX_PACKET = 296;
            SecTypeId_IHLERR = 297;
            SecTypeId_IKE_PROTOCOL = 298;
            SecTypeId_IMAC_ADD_MSG = 299;
            SecTypeId_IMAC_UPDATE_MSG = 300;
            SecTypeId_INBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 301;
            SecTypeId_INGRESS_BE_TOCPU = 302;
            SecTypeId_IPFPM = 303;
            SecTypeId_IPOPT_TCP = 304;
            SecTypeId_IPOPT_UDP = 305;
            SecTypeId_IPTV = 306;
            SecTypeId_IPV4ACL_STREAM_MISS = 307;
            SecTypeId_IPV4LENERR = 308;
            SecTypeId_IPV4MCTTLCHECK_ERR = 309;
            SecTypeId_IPV4PLENERR = 310;
            SecTypeId_IPV4X_ARP = 311;
            SecTypeId_IPV4X_ARPX_MISS = 312;
            SecTypeId_IPV4X_FIBX_MISS = 313;
            SecTypeId_IPV4X_ISISX_X_OVERX_GREX_TUNNEL = 314;
            SecTypeId_IPV4X_MULTICASTX_FIBX_MISS = 315;
            SecTypeId_IPV4X_MULTICASTX_REGISTRATION = 316;
            SecTypeId_IPV4X_MULTICASTX_RPFX_CHECKINGX_FAILS = 317;
            SecTypeId_IPV4X_OPTION = 318;
            SecTypeId_IPV4X_OSPFX_X_TOX_CPU = 319;
            SecTypeId_IPV4X_OVERX_IPV6X_ETUNNELX_X_TOX_CPUX_WITHX_TUNNELX_INDEXX_CHECKINGX_MISS = 320;
            SecTypeId_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_NONX_IPV4X_MESSAGEX_AFTERX_IPV6X_HEADX_EXTENSION = 321;
            SecTypeId_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_UNSUPPORTEDX_IPV6X_HEADX_EXTENSION = 322;
            SecTypeId_IPV4X_OVERX_IPV6X_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTUX_BUTX_DFX_FLAGX_SETX_TOX_1X_INX_IPX_HEAD = 323;
            SecTypeId_IPV4X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 324;
            SecTypeId_IPV4X_TCPX_X_TOX_CPU = 325;
            SecTypeId_IPV4X_TTLX_EXPIRES = 326;
            SecTypeId_IPV4X_UDPX_PTPX_320 = 327;
            SecTypeId_IPV4X_UDPX_PTRX_320 = 328;
            SecTypeId_IPV4X_UDPX_X_TOX_CPU = 329;
            SecTypeId_IPV4X_X_OVERX_GREX_TUNNELX_DETECTSX_KEEPLIVEX_MESSAGE = 330;
            SecTypeId_IPV4X_X_OVERX_GREX_TUNNELX_ECHOSX_KEEPLIVEX_MESSAGE = 331;
            SecTypeId_IPV4X_X_TOX_CPUX_AFTERX_FIBX_CHECK = 332;
            SecTypeId_IPV4X_X_TOX_CPUX_EXCEEDINGX_MTUX_LIMIT = 333;
            SecTypeId_IPV4_AT_MISS = 334;
            SecTypeId_IPV4_BFD = 335;
            SecTypeId_IPV4_FIB_DROP_1 = 336;
            SecTypeId_IPV4_FIB_DROP_2 = 337;
            SecTypeId_IPV4_IGMP = 338;
            SecTypeId_IPV4_LDP = 339;
            SecTypeId_IPV4_MC_SOFTWARE_FWD = 340;
            SecTypeId_IPV4_MC_TO_CP = 341;
            SecTypeId_IPV4_RARP = 342;
            SecTypeId_IPV4_REMOTE_BFD = 343;
            SecTypeId_IPV4_RESV2_TO_CP = 344;
            SecTypeId_IPV4_RSVP_TO_CP = 345;
            SecTypeId_IPV4_TCP_BGP = 346;
            SecTypeId_IPV4_TCP_FTP = 347;
            SecTypeId_IPV4_TCP_TELNET = 348;
            SecTypeId_IPV4_UDP_PGP = 349;
            SecTypeId_IPV4_UNK_MC_1 = 350;
            SecTypeId_IPV4_UNK_MC_2 = 351;
            SecTypeId_IPV6DIPERR = 352;
            SecTypeId_IPV6LENERR_1 = 353;
            SecTypeId_IPV6LENERR_2 = 354;
            SecTypeId_IPV6MCTTLCHECK_ERR = 355;
            SecTypeId_IPV6PLENERR = 356;
            SecTypeId_IPV6SIPERR = 357;
            SecTypeId_IPV6X_CHECKINGX_NDHX_MISS = 358;
            SecTypeId_IPV6X_CHECKINGX_NDX_MISSX_MESSAGE = 359;
            SecTypeId_IPV6X_DHCP = 360;
            SecTypeId_IPV6X_EXITX_TUNNELX_FRAGMENTATION = 361;
            SecTypeId_IPV6X_EXITX_TUNNELX_HOP = 362;
            SecTypeId_IPV6X_EXITX_TUNNELX_REDIRECTX_SNMP = 363;
            SecTypeId_IPV6X_EXITX_TUNNELX_RESERVEDX_MULTICAST = 364;
            SecTypeId_IPV6X_EXITX_TUNNELX_X_TOX_CPU = 365;
            SecTypeId_IPV6X_FIBX_CHECKINGX_MISSES = 366;
            SecTypeId_IPV6X_MLD = 367;
            SecTypeId_IPV6X_MULTICASTX_FRAGMENTATION = 368;
            SecTypeId_IPV6X_MULTICASTX_REGISTRATION = 369;
            SecTypeId_IPV6X_MULTICASTX_RPFX_CHECKINGX_FAIL = 370;
            SecTypeId_IPV6X_MULTICASTX_TOX_CPUX_MISS = 371;
            SecTypeId_IPV6X_MULTICASTX_X_TOX_CPU = 372;
            SecTypeId_IPV6X_NA = 373;
            SecTypeId_IPV6X_NDHX_MACX_MISSX_TCAMX_MISSX_ = 374;
            SecTypeId_IPV6X_NDX_MACX_MISSX_TCAMX_MISSX_ = 375;
            SecTypeId_IPV6X_NDX_MISS = 376;
            SecTypeId_IPV6X_NDX_REDIRECTX_CONTROLX_PACKET = 377;
            SecTypeId_IPV6X_NEXTX_HOPX_X_TOX_CPU = 378;
            SecTypeId_IPV6X_NS = 379;
            SecTypeId_IPV6X_OVERX_GREX_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTU = 380;
            SecTypeId_IPV6X_RA = 381;
            SecTypeId_IPV6X_REDIRECTEDX_X_TOX_CPU = 382;
            SecTypeId_IPV6X_REDIRECTX_ICMP = 383;
            SecTypeId_IPV6X_REDIRECTX_SNMP = 384;
            SecTypeId_IPV6X_REDIRECTX_TCP = 385;
            SecTypeId_IPV6X_REDIRECTX_X_TOX_CPU = 386;
            SecTypeId_IPV6X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 387;
            SecTypeId_IPV6X_REJECT = 388;
            SecTypeId_IPV6X_RESERVEDX_MULTICAST = 389;
            SecTypeId_IPV6X_RESERVEX_MULTICAST = 390;
            SecTypeId_IPV6X_RS = 391;
            SecTypeId_IPV6X_TTLX_EXPIRES = 392;
            SecTypeId_IPV6X_WHITELIST = 393;
            SecTypeId_IPV6X_X_TOOX_BIG = 394;
            SecTypeId_IPV6X_X_TOX_CPUX_AFTERX_LOCALX_FIBX_CHECK = 395;
            SecTypeId_IPV6_4OVER6 = 396;
            SecTypeId_IPV6_AH_OPTIONX_PACKET = 397;
            SecTypeId_IPV6_BFD_1 = 398;
            SecTypeId_IPV6_BFD_2 = 399;
            SecTypeId_IPV6_BFD_TOCOP_FROM5822 = 400;
            SecTypeId_IPV6_ESP_OPTIONX_PACKET = 401;
            SecTypeId_IPV6_FIB_DROP = 402;
            SecTypeId_IPV6_FWD_TABLE_VLAN = 403;
            SecTypeId_IPV6_GRE = 404;
            SecTypeId_IPV6_HOP_BY_HOP_OPTIONX_PACKET = 405;
            SecTypeId_IPV6_ID_BASE = 406;
            SecTypeId_IPV6_OTHER_OPTIONX_PACKET = 407;
            SecTypeId_IPV6_PIM = 408;
            SecTypeId_IPV6_REMOTE_BFD = 409;
            SecTypeId_IPV6_TCP_BGP = 410;
            SecTypeId_IPV6_UDP_L2TP = 411;
            SecTypeId_IPV6_UDP_NTP = 412;
            SecTypeId_IPV6_UNK_MC_1 = 413;
            SecTypeId_IPV6_UNK_MC_2 = 414;
            SecTypeId_IPV6_VRRP = 415;
            SecTypeId_IPXX_FRAMEX_TOX_CPU = 416;
            SecTypeId_IPX_X_TOX_CPU = 417;
            SecTypeId_ISIS = 418;
            SecTypeId_ITAGCC = 419;
            SecTypeId_ITAGCC_ACLMISS = 420;
            SecTypeId_JUMBO = 421;
            SecTypeId_L2BE_DROP = 422;
            SecTypeId_L2DIS_1 = 423;
            SecTypeId_L2DIS_2 = 424;
            SecTypeId_L2IBE_DROP = 425;
            SecTypeId_L2I_3AH_LOOPBACK = 426;
            SecTypeId_L2I_PAT_INV = 427;
            SecTypeId_L2L3DIS = 428;
            SecTypeId_L2MBE_CPU = 429;
            SecTypeId_L2_MC2CPU = 430;
            SecTypeId_L2MC_DROP = 431;
            SecTypeId_L2MC_MAIB_BROADCAST = 432;
            SecTypeId_L2MC_MISS = 433;
            SecTypeId_L2MFIBV6_MISS = 434;
            SecTypeId_L2TPX_IGMP = 435;
            SecTypeId_L2TPX_LAC = 436;
            SecTypeId_L2TPX_LNSX_CONTROL = 437;
            SecTypeId_L2TPX_LNSX_CTRLX_SCCRQ = 438;
            SecTypeId_L2TPX_LNSX_CTRLX_SCCRQX_DETECTX_PACKET = 439;
            SecTypeId_L2TPX_LNSX_HELLOX_ORX_ZLB = 440;
            SecTypeId_L2TPX_LNSX_PPP = 441;
            SecTypeId_L2TPX_LNSX_PPPX_ECHO = 442;
            SecTypeId_L2_1588_OR_ANN_CHANGE = 443;
            SecTypeId_L2_3AH_TEST_1 = 444;
            SecTypeId_L2_3AH_TEST_2 = 445;
            SecTypeId_L2_ASSP = 446;
            SecTypeId_L2_EAPOL = 447;
            SecTypeId_L2_EAPOL_START = 448;
            SecTypeId_L2_IPV4 = 449;
            SecTypeId_L2_IPV6 = 450;
            SecTypeId_L2_MPLSUC = 452;
            SecTypeId_L2_PPPOE_PADI = 453;
            SecTypeId_L2_PPPOE_PADR = 454;
            SecTypeId_L2_PPPOE_SESSION = 455;
            SecTypeId_L2_SLOWPROTOCOL = 456;
            SecTypeId_L3DIS_1 = 457;
            SecTypeId_L3DIS_2 = 458;
            SecTypeId_LABEL1 = 459;
            SecTypeId_LABELERR = 460;
            SecTypeId_LACPX_FLUSHX_FRAME = 461;
            SecTypeId_LBK_ERR = 462;
            SecTypeId_LBMDST = 463;
            SecTypeId_LBRDST = 464;
            SecTypeId_LB_TRANS_TIMESTAMP = 465;
            SecTypeId_LCLLPDROP = 466;
            SecTypeId_LCLONLY = 467;
            SecTypeId_LCL_TOKEN_CHKERR = 468;
            SecTypeId_LDP_1 = 469;
            SecTypeId_LDP_2 = 470;
            SecTypeId_LDP_HELLO = 471;
            SecTypeId_LDP_UDP = 472;
            SecTypeId_LENERR_1 = 473;
            SecTypeId_LENERR_2 = 474;
            SecTypeId_LIMIT_AFUL_DROP = 475;
            SecTypeId_LINK_DETECT = 476;
            SecTypeId_LLDP = 477;
            SecTypeId_LMM_CW_TO_CP = 478;
            SecTypeId_LMM_NO_CW_TO_CP = 479;
            SecTypeId_LMR_CW_TO_CP = 480;
            SecTypeId_LMR_NO_CW_TO_CP = 481;
            SecTypeId_LNT_ALM = 482;
            SecTypeId_LNT_PKT = 483;
            SecTypeId_LOOPBACK_TEST_PKT = 484;
            SecTypeId_LOOPDETECT = 485;
            SecTypeId_LOOP_HEARTBEAT_TO_CP = 486;
            SecTypeId_LRNONLY_1 = 487;
            SecTypeId_LRNONLY_2 = 488;
            SecTypeId_LRNSYS_ERR = 489;
            SecTypeId_LSFX_BROADCAST = 490;
            SecTypeId_LSPX_PING = 491;
            SecTypeId_LTMDST = 492;
            SecTypeId_LTMMID = 493;
            SecTypeId_LTRDST = 494;
            SecTypeId_MACBYPASS_TRIGGER = 495;
            SecTypeId_MAC_ACCOUNT_MISS = 496;
            SecTypeId_MAC_ADD_MSG = 497;
            SecTypeId_MAC_DELETE_FLAPPING = 498;
            SecTypeId_MAC_SB_FLAPPING = 499;
            SecTypeId_MAC_UPDATE_FLAPPING = 500;
            SecTypeId_MAC_UPDATE_MSG = 501;
            SecTypeId_MARKER = 502;
            SecTypeId_MAXLEN_ERR = 503;
            SecTypeId_MC_MFIB_DUMMY_DROP = 504;
            SecTypeId_MC_MFIB_SG_DROP = 505;
            SecTypeId_MC_MIB_GRE = 506;
            SecTypeId_MC_SEL_DROP = 507;
            SecTypeId_MDLVL = 508;
            SecTypeId_MEAP_PKT = 509;
            SecTypeId_ME_GTOKEN_PRUNE = 510;
            SecTypeId_ME_LTOKEN_PRUNE = 511;
            SecTypeId_MIBT_NV = 512;
            SecTypeId_MINLEN_ERR = 513;
            SecTypeId_MIRRORX_TOX_CPU = 514;
            SecTypeId_MIRROR_TO_CP_EGRESS = 515;
            SecTypeId_MIRROR_TO_CP_INGRESS = 516;
            SecTypeId_MISMATCHX_RECOVER = 517;
            SecTypeId_MISMATCH_SMAC_PKT_1 = 518;
            SecTypeId_MISMATCH_SMAC_PKT_2 = 519;
            SecTypeId_MKA = 520;
            SecTypeId_MOAM = 521;
            SecTypeId_MPLSDIS_1 = 522;
            SecTypeId_MPLSDIS_2 = 523;
            SecTypeId_MPLSOAM_BROADCAST = 524;
            SecTypeId_MPLSX_ARPX_MISS = 525;
            SecTypeId_MPLSX_ARPX_MISSX_MESSAGEX_TOX_CPU = 526;
            SecTypeId_MPLSX_LABELX_FAIL = 527;
            SecTypeId_MPLSX_MULTICAST = 528;
            SecTypeId_MPLSX_OAMX_FAULTX_BROADCAST = 529;
            SecTypeId_MPLSX_PROTOCOLX_S = 530;
            SecTypeId_MPLSX_TTLX_EXPIRES = 531;
            SecTypeId_MPLSX_X_EXCEEDINGX_MTU = 532;
            SecTypeId_MPLSX_X_FORWARDINGX_TOX_CP = 533;
            SecTypeId_MPLSX_X_TOKENX_FAIL = 534;
            SecTypeId_MPLSX_X_TOX_CPUX_AFTERX_3X_MPLSX_LABELX_POP = 535;
            SecTypeId_MPLSX_X_TOX_CPUX_AFTERX_POP = 536;
            SecTypeId_MPLSX_X_WITHX_ROUTERX_ALERT = 537;
            SecTypeId_MPLS_LABEL_CHECK_FAIL = 538;
            SecTypeId_MPLS_PATHMTU_ERROR = 539;
            SecTypeId_MSDP = 540;
            SecTypeId_MTC_MFIB_SG_DROP = 541;
            SecTypeId_MTC_MFIB_SSM_CAUSE = 542;
            SecTypeId_MTUERR_VVBM = 543;
            SecTypeId_MULTICASTX_DUMMYX_TABLEX_DECIDINGX_TOX_CPU = 544;
            SecTypeId_MULTICASTX_LEAFX_TABLEX_DECIDINGX_TOX_CPU = 545;
            SecTypeId_NETSECCHN_SOCKETX_PACKET = 546;
            SecTypeId_NETSTREAMX_S = 547;
            SecTypeId_NEW_BFD = 548;
            SecTypeId_NEW_DLP_OPENFLOW = 549;
            SecTypeId_NEW_ETRUNK = 550;
            SecTypeId_NEW_TCPSYN_FTPSERVER = 551;
            SecTypeId_NEW_TCPSYN_MSDP = 552;
            SecTypeId_NHLFE_NV = 553;
            SecTypeId_NHPPTR_CHKERR = 554;
            SecTypeId_NHRP_MISS_PACKET = 555;
            SecTypeId_NHRP_NO_REGISTER_REQUEST_PACKET = 556;
            SecTypeId_NHRP_REDIRECT_PACKET = 557;
            SecTypeId_NHRP_REGISTER_REQUEST_PACKET = 558;
            SecTypeId_NOE_CHGVID_PRUNE = 559;
            SecTypeId_NOE_PRUNE = 560;
            SecTypeId_NOE_QUALIFY = 561;
            SecTypeId_NOIPV4 = 562;
            SecTypeId_NOIPV6 = 563;
            SecTypeId_NONEX_ARPX_BROADCASTX_X_TOX_CPU = 564;
            SecTypeId_NONEX_GREX_X_EXITSX_GREX_TUNNEL = 565;
            SecTypeId_NQA_CROSS_BOARD_TO_CP = 566;
            SecTypeId_NQA_ICMP_JITTER = 567;
            SecTypeId_NQA_RCV = 568;
            SecTypeId_NQA_RCV_CROSS = 569;
            SecTypeId_NQA_SEND_OVER_TO_CP = 570;
            SecTypeId_NQA_TRANS_TIMESTAMP = 571;
            SecTypeId_NQA_UDP_JITTER = 572;
            SecTypeId_NSID_CFGERR = 573;
            SecTypeId_NS_TOCOP = 574;
            SecTypeId_NTP_1 = 575;
            SecTypeId_NTP_2 = 576;
            SecTypeId_OAMX_1AGX_TEST = 577;
            SecTypeId_OAMX_3AHX_TEST = 578;
            SecTypeId_OAMX_BDIX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 579;
            SecTypeId_OAMX_CVFFDX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 580;
            SecTypeId_OAM_TOCOP = 581;
            SecTypeId_OLDERR = 582;
            SecTypeId_ONLINEX_USERX_DHCPV4X_REQUEST = 583;
            SecTypeId_ONLINEX_USERX_DHCPV6X_REQUEST = 584;
            SecTypeId_ONLINEX_USERX_DHCPV6X_SOLICIT = 585;
            SecTypeId_OPENFLOWX_PACKET = 586;
            SecTypeId_OSPF = 587;
            SecTypeId_OSPFV3 = 588;
            SecTypeId_OSPFV3X_PACKET = 589;
            SecTypeId_OSPFV3_19E = 590;
            SecTypeId_OTHERX_PROTOCOLX_S = 591;
            SecTypeId_OUTBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 592;
            SecTypeId_OUTPBT_ERR = 593;
            SecTypeId_OUTPKTLEN_ERR = 594;
            SecTypeId_P2MPBFD_SESSION_DOWN = 595;
            SecTypeId_P2MPCHKERR = 596;
            SecTypeId_PACKETX_WITHOUTX_NEXTX_HOPX_LEX_POINTER = 597;
            SecTypeId_PAKCETX_TOX_CPUX_WHENX_MFIBV6X_TABLEX_MISMATCH = 598;
            SecTypeId_PARITY_ERR = 599;
            SecTypeId_PATHMTU_ERROR = 600;
            SecTypeId_PBB_HVPLS_EQ_BRIDGE_MAC = 601;
            SecTypeId_PBB_HVPLS_NEED_STUDY = 602;
            SecTypeId_PBTCC = 603;
            SecTypeId_PBTCC_ACLMISS = 604;
            SecTypeId_PBT_SELECTDROP = 605;
            SecTypeId_PDTX_CHANNELX_RECEIVESX_APS = 606;
            SecTypeId_PERFTEST_DETECT_PKT = 607;
            SecTypeId_PESX_HEARTX_BEAT = 608;
            SecTypeId_PIB_EXT_NV = 609;
            SecTypeId_PIB_NV = 610;
            SecTypeId_PIMV6X_PACKET = 611;
            SecTypeId_PIM_1 = 612;
            SecTypeId_PIM_2 = 613;
            SecTypeId_PIM_FROM_LSP = 614;
            SecTypeId_PIM_FROM_VLAN = 615;
            SecTypeId_PKTLENERR = 616;
            SecTypeId_PKT_COVER_EPEFIFO = 617;
            SecTypeId_PLENERR = 618;
            SecTypeId_POLICYDIP_FIB_NM = 619;
            SecTypeId_POLICY_FIBV6_NM = 620;
            SecTypeId_POLICY_FIB_NM = 621;
            SecTypeId_PORTALX_FORCE = 622;
            SecTypeId_PORTAL_SYNX_PACKET = 623;
            SecTypeId_PORT_ERR = 624;
            SecTypeId_PORT_PRUNE_ERR = 625;
            SecTypeId_POSPDUUK = 626;
            SecTypeId_PPPIPX = 627;
            SecTypeId_PPPX_CONFIGX_X_TOX_CPU = 628;
            SecTypeId_PPPX_CONTROL = 629;
            SecTypeId_PPPX_PADT = 630;
            SecTypeId_PPP_ACERR = 631;
            SecTypeId_PPP_LLDP = 632;
            SecTypeId_PPP_MPLS_PASSBY = 633;
            SecTypeId_PPP_PATHMTU_ERROR = 634;
            SecTypeId_PRUNEINDEX_CHKERR = 635;
            SecTypeId_PSF = 636;
            SecTypeId_PSFX_BROADCAST = 637;
            SecTypeId_PST_BROADCAST = 638;
            SecTypeId_PWE3 = 639;
            SecTypeId_PWGARP = 640;
            SecTypeId_PWNGARP = 641;
            SecTypeId_PW_DM_TO_CP = 642;
            SecTypeId_PW_SL_TO_CP = 643;
            SecTypeId_QINQ_PRUNE_CHKERR = 644;
            SecTypeId_QOE_TOCOP_10 = 645;
            SecTypeId_QOE_TOCOP_11 = 646;
            SecTypeId_QOE_TOCOP_12 = 647;
            SecTypeId_QOE_TOCOP_2 = 648;
            SecTypeId_QOE_TOCOP_3 = 649;
            SecTypeId_QOE_TOCOP_4 = 650;
            SecTypeId_QOE_TOCOP_5 = 651;
            SecTypeId_QOE_TOCOP_6 = 652;
            SecTypeId_QOE_TOCOP_7 = 653;
            SecTypeId_QOE_TOCOP_8 = 654;
            SecTypeId_QOE_TOCOP_9 = 655;
            SecTypeId_QOS_ACL_REDIRECT_TO_CP = 656;
            SecTypeId_QOS_EFIT_DROP = 657;
            SecTypeId_QOS_ID_BASE = 658;
            SecTypeId_QOS_IFIT_DROP = 659;
            SecTypeId_QOS_RE_DROP = 660;
            SecTypeId_QPPB_DROP = 661;
            SecTypeId_QUALIFY_ERR = 662;
            SecTypeId_QVCTX_MISSX_DHCPX_X_ORX_DHCPX_DISCOVER = 663;
            SecTypeId_QVCT_MISS_IPV4_PACKET = 664;
            SecTypeId_QVCT_MISS_IPV6_DHCP_PACKET = 665;
            SecTypeId_QVCT_MISS_IPV6_ND_PACKET = 666;
            SecTypeId_QVCT_MISS_PPPOE_PACKET = 667;
            SecTypeId_RADIUS = 668;
            SecTypeId_RAPSX_SPECIALX_TOX_CP = 669;
            SecTypeId_RAPS_EG_TO_CP = 670;
            SecTypeId_RAPS_TO_CP = 671;
            SecTypeId_RECYCLE_TYPE_ERR = 672;
            SecTypeId_REDIRECTX_DEFAULT = 673;
            SecTypeId_REDIRECTX_TOX_OTHERX_BOARDX_CPU = 674;
            SecTypeId_REDIRECT_DHCP = 675;
            SecTypeId_REDIRECT_ICMP = 676;
            SecTypeId_REDIRECT_RIP1 = 677;
            SecTypeId_REDIRECT_SNMP = 678;
            SecTypeId_REPTR_CHKERR = 679;
            SecTypeId_RESERVED = 680;
            SecTypeId_RESERVEDX_MULTICASTX_PIM = 681;
            SecTypeId_RESERVED_1 = 682;
            SecTypeId_RESERVED_2 = 683;
            SecTypeId_RESERVED_MC_IF_ROUTER = 684;
            SecTypeId_RESERVED_MC_OSPF = 685;
            SecTypeId_RESERVED_MC_OSPF_DR = 686;
            SecTypeId_RESERVED_MC_RIP2 = 687;
            SecTypeId_RES_UDP_TO_IP_MODULE = 688;
            SecTypeId_RE_PRUNE = 689;
            SecTypeId_RIPV6_1 = 690;
            SecTypeId_RIPV6_2 = 691;
            SecTypeId_RIP_1 = 692;
            SecTypeId_RIP_2 = 693;
            SecTypeId_RPR_CTRL = 694;
            SecTypeId_RRPP = 695;
            SecTypeId_RRPPCPU = 696;
            SecTypeId_RRPPDROP = 697;
            SecTypeId_RRPPINV = 698;
            SecTypeId_RRPP_BLK = 699;
            SecTypeId_RSVP_1 = 700;
            SecTypeId_RSVP_2 = 701;
            SecTypeId_SCHKERR = 702;
            SecTypeId_SEARCHX_TRAFFICX_POLICYX_REX_TABLEX_TOX_DECIDEX_WHETHERX_SENDINGX_TOX_CPU = 703;
            SecTypeId_SFTPX_CLIENT = 704;
            SecTypeId_SFTPX_SERVER = 705;
            SecTypeId_SIPDIPERR = 706;
            SecTypeId_SIPERR = 707;
            SecTypeId_SIPFLTRERR = 708;
            SecTypeId_SLBLSERR = 709;
            SecTypeId_SMACERR_1 = 710;
            SecTypeId_SMACERR_2 = 711;
            SecTypeId_SMACERR_DROP = 712;
            SecTypeId_SNMP = 713;
            SecTypeId_SNMPV6X_PACKET = 714;
            SecTypeId_SOFTX_GRE = 715;
            SecTypeId_SOURCE_CHECKERR = 716;
            SecTypeId_SPECIALX_INBOUNDX_TRAFFICX_POLICYX_CONTENTX_SENDINGX_TOX_CPU = 717;
            SecTypeId_SPECIALX_IPV4X_MULTICASTX_X_224X_0X_0X_0X_224X_0X_0X_255 = 718;
            SecTypeId_SPECIALX_IPV6X_MULTICAST = 719;
            SecTypeId_SPKERR = 720;
            SecTypeId_SSHV6X_SERVERX_PACKET = 721;
            SecTypeId_SSHX_CLIENT = 722;
            SecTypeId_SSHX_SERVER = 723;
            SecTypeId_SSM_PKT_TO_CP = 724;
            SecTypeId_STATUS_ERR = 725;
            SecTypeId_STP_OVER_VPLS_BPDU_1 = 726;
            SecTypeId_STP_OVER_VPLS_BPDU_2 = 727;
            SecTypeId_ST_BLK_1 = 728;
            SecTypeId_ST_BLK_2 = 729;
            SecTypeId_SYLM_TO_CP = 730;
            SecTypeId_SYLR_TO_CP = 731;
            SecTypeId_SYSLOG = 732;
            SecTypeId_SYSTEMX_MESSAGE = 733;
            SecTypeId_TAG_ERR_1 = 734;
            SecTypeId_TAG_ERR_2 = 735;
            SecTypeId_TARGETX_IPX_ISX_BROADCASTX_ADDRESS = 736;
            SecTypeId_TBTP_INVALID = 737;
            SecTypeId_TCPSYNX_PACKET = 738;
            SecTypeId_TCPSYNX_SX_FORX_BGP = 739;
            SecTypeId_TCPSYNX_SX_FORX_LDP = 740;
            SecTypeId_TCPSYNX_SX_FORX_SSH = 741;
            SecTypeId_TCPSYNX_SX_FORX_TELNET = 742;
            SecTypeId_TCP_ABNORMAL = 743;
            SecTypeId_TCP_UDPFLOOD = 744;
            SecTypeId_TELEMETRY_PACK = 745;
            SecTypeId_TELNETV6X_CLIENTX_PACKET = 746;
            SecTypeId_TELNETV6X_SERVERX_PACKET = 747;
            SecTypeId_TELNETX_CLIENT = 748;
            SecTypeId_TELNETX_SERVER = 749;
            SecTypeId_TFTPV6X_CLIENTX_PACKET = 750;
            SecTypeId_TFTPX_SERVER = 751;
            SecTypeId_TIMER_SYN = 752;
            SecTypeId_TIMER_SYN_CLEAR_ISBC = 753;
            SecTypeId_TIME_OUT_PIEP = 754;
            SecTypeId_TO_MNG_PORT_FTPX_PACKET = 755;
            SecTypeId_TO_MNG_PORT_OTHERX_PACKET = 756;
            SecTypeId_TP_OAM_CCM = 757;
            SecTypeId_TP_OAM_DMM = 758;
            SecTypeId_TP_OAM_LMM = 759;
            SecTypeId_TRACERT = 760;
            SecTypeId_TRAFFIC_BEHAVIOR_LOG = 761;
            SecTypeId_TRUNK_INVALID = 762;
            SecTypeId_TWAMP = 763;
            SecTypeId_TWAMPX_PACKET = 764;
            SecTypeId_UDLD = 765;
            SecTypeId_UKUC_CPU = 766;
            SecTypeId_UKUC_DROP = 767;
            SecTypeId_UMCMASKERR = 768;
            SecTypeId_UMC_CPU = 769;
            SecTypeId_UMC_DROP = 770;
            SecTypeId_UNCLASSIFIEDX_X_TOX_CPU = 771;
            SecTypeId_UNICASTX_SMACX_CONFIGX_TOX_BEX_LEARNEDX_BYX_CPU = 772;
            SecTypeId_UNICASTX_VRRPX_PACKET = 773;
            SecTypeId_UNKNOWN = 774;
            SecTypeId_UNKNOWNMTU = 775;
            SecTypeId_UNKNOWNX_MPLSX_OAM = 776;
            SecTypeId_UNKNOWNX_PPPX_FRAMEX_TOX_CPU = 777;
            SecTypeId_UNKNOWN_COP = 778;
            SecTypeId_UPNHLFE_NV = 779;
            SecTypeId_USERMACX_MISSX_ARPX_ORX_IPV4X_PACKET = 780;
            SecTypeId_USERMACX_MISSX_IPARP = 781;
            SecTypeId_USERX_DEFINEDX_FLOWX_1 = 782;
            SecTypeId_USERX_DEFINEDX_FLOWX_10 = 783;
            SecTypeId_USERX_DEFINEDX_FLOWX_11 = 784;
            SecTypeId_USERX_DEFINEDX_FLOWX_12 = 785;
            SecTypeId_USERX_DEFINEDX_FLOWX_13 = 786;
            SecTypeId_USERX_DEFINEDX_FLOWX_14 = 787;
            SecTypeId_USERX_DEFINEDX_FLOWX_15 = 788;
            SecTypeId_USERX_DEFINEDX_FLOWX_16 = 789;
            SecTypeId_USERX_DEFINEDX_FLOWX_17 = 790;
            SecTypeId_USERX_DEFINEDX_FLOWX_18 = 791;
            SecTypeId_USERX_DEFINEDX_FLOWX_19 = 792;
            SecTypeId_USERX_DEFINEDX_FLOWX_2 = 793;
            SecTypeId_USERX_DEFINEDX_FLOWX_20 = 794;
            SecTypeId_USERX_DEFINEDX_FLOWX_21 = 795;
            SecTypeId_USERX_DEFINEDX_FLOWX_22 = 796;
            SecTypeId_USERX_DEFINEDX_FLOWX_23 = 797;
            SecTypeId_USERX_DEFINEDX_FLOWX_24 = 798;
            SecTypeId_USERX_DEFINEDX_FLOWX_25 = 799;
            SecTypeId_USERX_DEFINEDX_FLOWX_26 = 800;
            SecTypeId_USERX_DEFINEDX_FLOWX_27 = 801;
            SecTypeId_USERX_DEFINEDX_FLOWX_28 = 802;
            SecTypeId_USERX_DEFINEDX_FLOWX_29 = 803;
            SecTypeId_USERX_DEFINEDX_FLOWX_3 = 804;
            SecTypeId_USERX_DEFINEDX_FLOWX_30 = 805;
            SecTypeId_USERX_DEFINEDX_FLOWX_31 = 806;
            SecTypeId_USERX_DEFINEDX_FLOWX_32 = 807;
            SecTypeId_USERX_DEFINEDX_FLOWX_33 = 808;
            SecTypeId_USERX_DEFINEDX_FLOWX_34 = 809;
            SecTypeId_USERX_DEFINEDX_FLOWX_35 = 810;
            SecTypeId_USERX_DEFINEDX_FLOWX_36 = 811;
            SecTypeId_USERX_DEFINEDX_FLOWX_37 = 812;
            SecTypeId_USERX_DEFINEDX_FLOWX_38 = 813;
            SecTypeId_USERX_DEFINEDX_FLOWX_39 = 814;
            SecTypeId_USERX_DEFINEDX_FLOWX_4 = 815;
            SecTypeId_USERX_DEFINEDX_FLOWX_40 = 816;
            SecTypeId_USERX_DEFINEDX_FLOWX_41 = 817;
            SecTypeId_USERX_DEFINEDX_FLOWX_42 = 818;
            SecTypeId_USERX_DEFINEDX_FLOWX_43 = 819;
            SecTypeId_USERX_DEFINEDX_FLOWX_44 = 820;
            SecTypeId_USERX_DEFINEDX_FLOWX_45 = 821;
            SecTypeId_USERX_DEFINEDX_FLOWX_46 = 822;
            SecTypeId_USERX_DEFINEDX_FLOWX_47 = 823;
            SecTypeId_USERX_DEFINEDX_FLOWX_48 = 824;
            SecTypeId_USERX_DEFINEDX_FLOWX_49 = 825;
            SecTypeId_USERX_DEFINEDX_FLOWX_5 = 826;
            SecTypeId_USERX_DEFINEDX_FLOWX_50 = 827;
            SecTypeId_USERX_DEFINEDX_FLOWX_51 = 828;
            SecTypeId_USERX_DEFINEDX_FLOWX_52 = 829;
            SecTypeId_USERX_DEFINEDX_FLOWX_53 = 830;
            SecTypeId_USERX_DEFINEDX_FLOWX_54 = 831;
            SecTypeId_USERX_DEFINEDX_FLOWX_55 = 832;
            SecTypeId_USERX_DEFINEDX_FLOWX_56 = 833;
            SecTypeId_USERX_DEFINEDX_FLOWX_57 = 834;
            SecTypeId_USERX_DEFINEDX_FLOWX_58 = 835;
            SecTypeId_USERX_DEFINEDX_FLOWX_59 = 836;
            SecTypeId_USERX_DEFINEDX_FLOWX_6 = 837;
            SecTypeId_USERX_DEFINEDX_FLOWX_60 = 838;
            SecTypeId_USERX_DEFINEDX_FLOWX_61 = 839;
            SecTypeId_USERX_DEFINEDX_FLOWX_62 = 840;
            SecTypeId_USERX_DEFINEDX_FLOWX_63 = 841;
            SecTypeId_USERX_DEFINEDX_FLOWX_64 = 842;
            SecTypeId_USERX_DEFINEDX_FLOWX_7 = 843;
            SecTypeId_USERX_DEFINEDX_FLOWX_8 = 844;
            SecTypeId_USERX_DEFINEDX_FLOWX_9 = 845;
            SecTypeId_USER_MAC_MISS_IP_ARP = 846;
            SecTypeId_USMACX_MISSX_IPV6 = 847;
            SecTypeId_USMAC_ARP_PACKET = 848;
            SecTypeId_USMAC_IGMP_PACKET = 849;
            SecTypeId_UUCMASKERR = 850;
            SecTypeId_V6EINDX_MISS = 851;
            SecTypeId_V6MLD_DONE = 852;
            SecTypeId_V6MLD_QUERY = 853;
            SecTypeId_V6MLD_V1REP = 854;
            SecTypeId_V6MLD_V2REP = 855;
            SecTypeId_V6ND_NA = 856;
            SecTypeId_V6ND_NS = 857;
            SecTypeId_V6ND_RA = 858;
            SecTypeId_V6ND_REDIRECT = 859;
            SecTypeId_V6ND_RS = 860;
            SecTypeId_V6OUTV4_V6MC = 861;
            SecTypeId_VALN_STACKING_CHK = 862;
            SecTypeId_VC_HUB = 863;
            SecTypeId_VGMP = 864;
            SecTypeId_VIRTUAL_CAUSE_NEW_FRAGMENT = 865;
            SecTypeId_VLAN_HOSTCAR_ATTACK = 866;
            SecTypeId_VLLVM = 867;
            SecTypeId_VLLVM_ARP = 868;
            SecTypeId_VLLVM_HDLC = 869;
            SecTypeId_VLLVM_PPP = 870;
            SecTypeId_VRRP_1 = 871;
            SecTypeId_VRRP_2 = 872;
            SecTypeId_VRRP_MAC_ADD_MSG = 873;
            SecTypeId_VSM_CGN = 874;
            SecTypeId_VSM_HA = 875;
            SecTypeId_VSM_IPSEC = 876;
            SecTypeId_VSM_IPSEC_PLAIN = 877;
            SecTypeId_VXLANPING = 878;
            SecTypeId_WEB = 879;
            SecTypeId_WEBX_AUTHX_SERVERX_PACKET = 880;
            SecTypeId_WEB_USEER_RESTRAIN = 881;
            SecTypeId_WHITELIST = 882;
            SecTypeId_WHITELIST_OSPF_PACKET = 883;
            SecTypeId_WHITELIST_RADIUS_PACKET = 884;
            SecTypeId_WORKDIS = 885;
            SecTypeId_WRAP = 886;
            SecTypeId_X_1355 = 887;
            SecTypeId_X_1356 = 888;
            SecTypeId_X_1564_STOP = 889;
            SecTypeId_X_1564_TOCP = 890;
            SecTypeId_X_1AG = 891;
            SecTypeId_X_1AG_UNK = 892;
            SecTypeId_X_1AG_CC_LEVEL_ERR_UP = 893;
            SecTypeId_X_1AG_CC_MEPID_ERR_DOWN = 894;
            SecTypeId_X_1AG_CC_MEPID_ERR_UP_1 = 895;
            SecTypeId_X_1AG_CC_MEPID_ERR_UP_2 = 896;
            SecTypeId_X_1AG_VERIFY_ERR = 898;
            SecTypeId_X_1DM_CW_TO_CP = 899;
            SecTypeId_X_1DM_NO_CW_TO_CP = 900;
            SecTypeId_X_2544_TIME_DELAY = 901;
            SecTypeId_X_3AH = 902;
            SecTypeId_X_3AHLCLLPBK = 903;
            SecTypeId_X_3AHX_LOOPX_TESTX_SUCCESSX_MESSAGE = 904;
            SecTypeId_X_3AH_PDU = 905;
            SecTypeId_X_4OVER6_PRTCL_ERROR = 906;
            SecTypeId_X_5822_FIDT_NV = 907;
            SecTypeId_X_588CAUSE_114 = 908;
            SecTypeId_X_588CAUSE_115 = 909;
            SecTypeId_X_588CAUSE_121 = 910;
            SecTypeId_X_588CAUSE_126 = 911;
            SecTypeId_X_588CAUSE_128 = 912;
            SecTypeId_X_588CAUSE_129 = 913;
            SecTypeId_X_588CAUSE_131 = 914;
            SecTypeId_X_588CAUSE_132 = 915;
            SecTypeId_X_588CAUSE_133 = 916;
            SecTypeId_X_588CAUSE_183 = 917;
            SecTypeId_X_588CAUSE_191 = 918;
            SecTypeId_X_588CAUSE_208 = 919;
            SecTypeId_X_588CAUSE_253 = 920;
            SecTypeId_X_588CAUSE_254 = 921;
            SecTypeId_X_588CAUSE_255 = 922;
            SecTypeId_X_802X_1AG = 923;
            SecTypeId_Y1731_AIS_INWARD_EGRESS = 924;
            SecTypeId_Y1731_AIS_OUTWARD_INGRESS = 925;
            SecTypeId_Y1731_DM_AC_INANDOUT = 926;
            SecTypeId_Y1731_ETH_BN = 927;
            SecTypeId_Y1731_LCK = 928;
            SecTypeId_Y1731_LMR_AC_INANDOUT = 929;
            SecTypeId_Y1731_MLB_INWARD_EGRESS = 930;
            SecTypeId_Y1731_MLB_OUTWARD_INGRESS = 931;
            SecTypeId_ADMINX_LSX_PACKET = 932;
            SecTypeId_ICMP6X_ECHOX_PACKET = 933;
            SecTypeId_ICMP_ECHO = 934;
            SecTypeId_IPV6X_SYNX_BGPX_PACKET = 935;
            SecTypeId_IPV6X_SYNX_SSHX_PACKET = 936;
            SecTypeId_IPV6X_SYNX_TELNETX_PACKET = 937;
            SecTypeId_LPT = 938;
            SecTypeId_MAP_ICMP = 939;
            SecTypeId_MLDP_MBB_PKT = 940;
            SecTypeId_SRHX_OTPX_TOCPX_PACKET = 941;
            SecTypeId_IPTVX_INGRESSX_PACKET = 942;
         };
         SecTypeId secTypeId = 8;
      }
      repeated NvsecDefaultCarNode nvsecDefaultCarNode = 1;
   }
   NvsecDefaultCarNodes nvsecDefaultCarNodes = 3;
   message NvsecDisSQStats {
      message NvsecDisSQStat {
         message NvsecDisFQStats {
            message NvsecDisFQStat {
               uint64 secAF1DropPkts = 1;
               uint64 secAF1PassPkts = 2;
               uint64 secAF2DropPkts = 3;
               uint64 secAF2PassPkts = 4;
               uint64 secAF3DropPkts = 5;
               uint64 secAF3PassPkts = 6;
               uint64 secAF4DropPkts = 7;
               uint64 secAF4PassPkts = 8;
               uint64 secBEDropPkts = 9;
               uint64 secBEPassPkts = 10;
               uint64 secCS6DropPkts = 11;
               uint64 secCS6PassPkts = 12;
               uint64 secCS7DropPkts = 13;
               uint64 secCS7PassPkts = 14;
               uint64 secEFDropPkts = 15;
               uint64 secEFPassPkts = 16;
            }
            repeated NvsecDisFQStat nvsecDisFQStat = 1;
         }
         NvsecDisFQStats nvsecDisFQStats = 1;
         uint32 secApId = 2;
         uint64 secDropedPkts = 3;
         uint64 secPassedPkts = 4;
         enum SecSQType {
            SecSQType_ACCESSX_USER = 0;
            SecSQType_ARP = 1;
            SecSQType_ATNX_ACCESSX_USER = 2;
            SecSQType_ATNX_ARP = 3;
            SecSQType_ATNX_BLACKLIST = 4;
            SecSQType_ATNX_CHECKX_FAILED = 5;
            SecSQType_ATNX_CLOCK = 6;
            SecSQType_ATNX_FWDDATAX_TOX_CP = 7;
            SecSQType_ATNX_HEARTBEAT = 8;
            SecSQType_ATNX_LINKX_LAYER = 9;
            SecSQType_ATNX_MANAGEMENT = 10;
            SecSQType_ATNX_MPLS = 11;
            SecSQType_ATNX_MULTICAST = 12;
            SecSQType_ATNX_NETWORKX_LAYER = 13;
            SecSQType_ATNX_OAMX_CHECK = 14;
            SecSQType_ATNX_ROUTEX_PROTOCOL = 15;
            SecSQType_ATNX_WHITELIST = 16;
            SecSQType_LINKX_LAYER = 17;
            SecSQType_MANAGEMENT = 18;
            SecSQType_MPLS = 19;
            SecSQType_MULTICAST = 20;
            SecSQType_NETWORKX_LAYER = 21;
            SecSQType_ROUTEX_PROTOCOL = 22;
            SecSQType_USERX_DEFINEDX_FLOW = 23;
            SecSQType_WHITELIST = 24;
         };
         SecSQType secSQType = 5;
         string secSlotId = 6;
      }
      repeated NvsecDisSQStat nvsecDisSQStat = 1;
   }
   NvsecDisSQStats nvsecDisSQStats = 4;
   message NvsecDisSQWeights {
      message NvsecDisSQWeight {
         uint32 secApId = 1;
         uint32 secConfigSQCir = 2;
         uint32 secConfigSQPir = 3;
         uint32 secConfigWeight = 4;
         uint32 secDftSQCir = 5;
         uint32 secDftSQPir = 6;
         uint32 secDftWeight = 7;
         enum SecSQType {
            SecSQType_ACCESSX_USER = 0;
            SecSQType_ARP = 1;
            SecSQType_ATNX_ACCESSX_USER = 2;
            SecSQType_ATNX_ARP = 3;
            SecSQType_ATNX_BLACKLIST = 4;
            SecSQType_ATNX_CHECKX_FAILED = 5;
            SecSQType_ATNX_CLOCK = 6;
            SecSQType_ATNX_FWDDATAX_TOX_CP = 7;
            SecSQType_ATNX_HEARTBEAT = 8;
            SecSQType_ATNX_LINKX_LAYER = 9;
            SecSQType_ATNX_MANAGEMENT = 10;
            SecSQType_ATNX_MPLS = 11;
            SecSQType_ATNX_MULTICAST = 12;
            SecSQType_ATNX_NETWORKX_LAYER = 13;
            SecSQType_ATNX_OAMX_CHECK = 14;
            SecSQType_ATNX_ROUTEX_PROTOCOL = 15;
            SecSQType_ATNX_WHITELIST = 16;
            SecSQType_LINKX_LAYER = 17;
            SecSQType_MANAGEMENT = 18;
            SecSQType_MPLS = 19;
            SecSQType_MULTICAST = 20;
            SecSQType_NETWORKX_LAYER = 21;
            SecSQType_ROUTEX_PROTOCOL = 22;
            SecSQType_USERX_DEFINEDX_FLOW = 23;
            SecSQType_WHITELIST = 24;
         };
         SecSQType secSQType = 8;
         string secSlotId = 9;
      }
      repeated NvsecDisSQWeight nvsecDisSQWeight = 1;
   }
   NvsecDisSQWeights nvsecDisSQWeights = 5;
   message NvsecTotalPktStats {
      message NvsecTotalPktStat {
         uint32 secApId = 1;
         uint64 secDropPkt = 2;
         uint64 secPassPkt = 3;
         string secSlotId = 4;
         uint64 secTotalPkt = 5;
      }
      repeated NvsecTotalPktStat nvsecTotalPktStat = 1;
   }
   NvsecTotalPktStats nvsecTotalPktStats = 6;
   message Nvsecappstats {
      message Nvsecappstat {
         enum Sec8021Ag {
            Sec8021Ag_CLOSE = 0;
            Sec8021Ag_OPEN = 1;
         };
         Sec8021Ag sec8021ag = 1;
         uint32 secApId = 2;
         enum SecAppDefAct {
            SecAppDefAct_DROP = 0;
            SecAppDefAct_MIN_TO_CP = 1;
         };
         SecAppDefAct secAppDefAct = 3;
         enum SecAppEnable {
            SecAppEnable_CLOSE = 0;
            SecAppEnable_OPEN = 1;
         };
         SecAppEnable secAppEnable = 4;
         enum SecBfd {
            SecBfd_CLOSE = 0;
            SecBfd_OPEN = 1;
         };
         SecBfd secBfd = 5;
         enum SecBgp {
            SecBgp_CLOSE = 0;
            SecBgp_OPEN = 1;
         };
         SecBgp secBgp = 6;
         enum SecBgpV6 {
            SecBgpV6_CLOSE = 0;
            SecBgpV6_OPEN = 1;
         };
         SecBgpV6 secBgpV6 = 7;
         enum SecDhcp {
            SecDhcp_CLOSE = 0;
            SecDhcp_OPEN = 1;
         };
         SecDhcp secDhcp = 8;
         enum SecDiameter {
            SecDiameter_CLOSE = 0;
            SecDiameter_OPEN = 1;
         };
         SecDiameter secDiameter = 9;
         enum SecDnsClient {
            SecDnsClient_CLOSE = 0;
            SecDnsClient_OPEN = 1;
         };
         SecDnsClient secDnsClient = 10;
         enum SecDnsV6 {
            SecDnsV6_CLOSE = 0;
            SecDnsV6_OPEN = 1;
         };
         SecDnsV6 secDnsV6 = 11;
         enum SecFtpClient {
            SecFtpClient_CLOSE = 0;
            SecFtpClient_OPEN = 1;
         };
         SecFtpClient secFtpClient = 12;
         enum SecFtpServer {
            SecFtpServer_CLOSE = 0;
            SecFtpServer_OPEN = 1;
         };
         SecFtpServer secFtpServer = 13;
         enum SecFtpV6Client {
            SecFtpV6Client_CLOSE = 0;
            SecFtpV6Client_OPEN = 1;
         };
         SecFtpV6Client secFtpV6Client = 14;
         enum SecFtpV6Server {
            SecFtpV6Server_CLOSE = 0;
            SecFtpV6Server_OPEN = 1;
         };
         SecFtpV6Server secFtpV6Server = 15;
         enum SecHwtacacs {
            SecHwtacacs_CLOSE = 0;
            SecHwtacacs_OPEN = 1;
         };
         SecHwtacacs secHwtacacs = 16;
         enum SecIcmp {
            SecIcmp_CLOSE = 0;
            SecIcmp_OPEN = 1;
         };
         SecIcmp secIcmp = 17;
         enum SecIcmpV6 {
            SecIcmpV6_CLOSE = 0;
            SecIcmpV6_OPEN = 1;
         };
         SecIcmpV6 secIcmpV6 = 18;
         enum SecIgmp {
            SecIgmp_CLOSE = 0;
            SecIgmp_OPEN = 1;
         };
         SecIgmp secIgmp = 19;
         enum SecIgpmu {
            SecIgpmu_CLOSE = 0;
            SecIgpmu_OPEN = 1;
         };
         SecIgpmu secIgpmu = 20;
         enum SecIpfpm {
            SecIpfpm_CLOSE = 0;
            SecIpfpm_OPEN = 1;
         };
         SecIpfpm secIpfpm = 21;
         enum SecIsis {
            SecIsis_CLOSE = 0;
            SecIsis_OPEN = 1;
         };
         SecIsis secIsis = 22;
         enum SecLacp {
            SecLacp_CLOSE = 0;
            SecLacp_OPEN = 1;
         };
         SecLacp secLacp = 23;
         enum SecLdp {
            SecLdp_CLOSE = 0;
            SecLdp_OPEN = 1;
         };
         SecLdp secLdp = 24;
         enum SecLspping {
            SecLspping_CLOSE = 0;
            SecLspping_OPEN = 1;
         };
         SecLspping secLspping = 25;
         enum SecMsdp {
            SecMsdp_CLOSE = 0;
            SecMsdp_OPEN = 1;
         };
         SecMsdp secMsdp = 26;
         enum SecNtp {
            SecNtp_CLOSE = 0;
            SecNtp_OPEN = 1;
         };
         SecNtp secNtp = 27;
         enum SecOpenflow {
            SecOpenflow_CLOSE = 0;
            SecOpenflow_OPEN = 1;
         };
         SecOpenflow secOpenflow = 28;
         enum SecOspf {
            SecOspf_CLOSE = 0;
            SecOspf_OPEN = 1;
         };
         SecOspf secOspf = 29;
         enum SecOspfV3 {
            SecOspfV3_CLOSE = 0;
            SecOspfV3_OPEN = 1;
         };
         SecOspfV3 secOspfV3 = 30;
         enum SecPim {
            SecPim_CLOSE = 0;
            SecPim_OPEN = 1;
         };
         SecPim secPim = 31;
         enum SecPimV6 {
            SecPimV6_CLOSE = 0;
            SecPimV6_OPEN = 1;
         };
         SecPimV6 secPimV6 = 32;
         enum SecRadius {
            SecRadius_CLOSE = 0;
            SecRadius_OPEN = 1;
         };
         SecRadius secRadius = 33;
         enum SecRip {
            SecRip_CLOSE = 0;
            SecRip_OPEN = 1;
         };
         SecRip secRip = 34;
         enum SecRsvp {
            SecRsvp_CLOSE = 0;
            SecRsvp_OPEN = 1;
         };
         SecRsvp secRsvp = 35;
         string secSlotId = 36;
         enum SecSnmp {
            SecSnmp_CLOSE = 0;
            SecSnmp_OPEN = 1;
         };
         SecSnmp secSnmp = 37;
         enum SecSshClient {
            SecSshClient_CLOSE = 0;
            SecSshClient_OPEN = 1;
         };
         SecSshClient secSshClient = 38;
         enum SecSshServer {
            SecSshServer_CLOSE = 0;
            SecSshServer_OPEN = 1;
         };
         SecSshServer secSshServer = 39;
         enum SecSshV6Server {
            SecSshV6Server_CLOSE = 0;
            SecSshV6Server_OPEN = 1;
         };
         SecSshV6Server secSshV6Server = 40;
         enum SecSysLog {
            SecSysLog_CLOSE = 0;
            SecSysLog_OPEN = 1;
         };
         SecSysLog secSysLog = 41;
         enum SecTelnetClient {
            SecTelnetClient_CLOSE = 0;
            SecTelnetClient_OPEN = 1;
         };
         SecTelnetClient secTelnetClient = 42;
         enum SecTelnetServer {
            SecTelnetServer_CLOSE = 0;
            SecTelnetServer_OPEN = 1;
         };
         SecTelnetServer secTelnetServer = 43;
         enum SecTelnetV6Client {
            SecTelnetV6Client_CLOSE = 0;
            SecTelnetV6Client_OPEN = 1;
         };
         SecTelnetV6Client secTelnetV6Client = 44;
         enum SecTelnetV6Server {
            SecTelnetV6Server_CLOSE = 0;
            SecTelnetV6Server_OPEN = 1;
         };
         SecTelnetV6Server secTelnetV6Server = 45;
         enum SecTftp {
            SecTftp_CLOSE = 0;
            SecTftp_OPEN = 1;
         };
         SecTftp secTftp = 46;
         enum SecUnicastVrrp {
            SecUnicastVrrp_CLOSE = 0;
            SecUnicastVrrp_OPEN = 1;
         };
         SecUnicastVrrp secUnicastVrrp = 47;
         enum SecVrrp {
            SecVrrp_CLOSE = 0;
            SecVrrp_OPEN = 1;
         };
         SecVrrp secVrrp = 48;
         enum SecWebAuthServ {
            SecWebAuthServ_CLOSE = 0;
            SecWebAuthServ_OPEN = 1;
         };
         SecWebAuthServ secWebAuthServ = 49;
      }
      repeated Nvsecappstat nvsecappstat = 1;
   }
   Nvsecappstats nvsecappstats = 7;
   message Nvseccarstats {
      message Nvseccarstat {
         uint64 secAclDenyPkts = 1;
         uint32 secActualCbs = 2;
         uint32 secActualCir = 3;
         uint32 secApId = 4;
         enum SecAppDefAct {
            SecAppDefAct_DROP = 0;
            SecAppDefAct_MIN_TO_CP = 1;
         };
         SecAppDefAct secAppDefAct = 5;
         bool secAppEnable = 6;
         uint32 secCfgCbs = 7;
         uint32 secCfgCir = 8;
         uint64 secDropedPkts = 9;
         uint64 secHistPps = 10;
         string secHistPpsTime = 11;
         string secLastDrpBTime = 12;
         string secLastDrpETime = 13;
         uint64 secLastPps = 14;
         uint32 secMinPktLen = 15;
         uint64 secPassedPkts = 16;
         enum SecPolicyType {
            SecPolicyType_APP = 0;
            SecPolicyType_BLACKLIST = 1;
            SecPolicyType_INDEX = 2;
            SecPolicyType_MA = 3;
            SecPolicyType_PROTOCOL = 4;
            SecPolicyType_TCPIP = 5;
            SecPolicyType_TOTALPKT = 6;
            SecPolicyType_URPF = 7;
            SecPolicyType_USERFLOW = 8;
            SecPolicyType_WHITELIST = 9;
            SecPolicyType_WHITELISTV6 = 10;
         };
         SecPolicyType secPolicyType = 17;
         uint32 secPolicyTypeID = 18;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_EF = 6;
            SecPriority_HIGH = 7;
            SecPriority_LOW = 8;
            SecPriority_MIDDLE = 9;
         };
         SecPriority secPriority = 19;
         bool secProtoEnable = 20;
         string secSlotId = 21;
         uint64 secTtlDropPkts = 22;
      }
      repeated Nvseccarstat nvseccarstat = 1;
   }
   Nvseccarstats nvseccarstats = 8;
   message Nvsecnoncarstats {
      message Nvsecnoncarstat {
         uint32 secApId = 1;
         enum SecPolicyType {
            SecPolicyType_APP = 0;
            SecPolicyType_BLACKLIST = 1;
            SecPolicyType_INDEX = 2;
            SecPolicyType_MA = 3;
            SecPolicyType_PROTOCOL = 4;
            SecPolicyType_TCPIP = 5;
            SecPolicyType_TOTALPKT = 6;
            SecPolicyType_URPF = 7;
            SecPolicyType_USERFLOW = 8;
            SecPolicyType_WHITELIST = 9;
            SecPolicyType_WHITELISTV6 = 10;
         };
         SecPolicyType secPolicyType = 2;
         enum SecPolicyTypeID {
            SecPolicyTypeID_ABNORMAL = 0;
            SecPolicyTypeID_ABNORMALPACKET = 1;
            SecPolicyTypeID_ARP = 2;
            SecPolicyTypeID_BFD = 3;
            SecPolicyTypeID_BGP = 4;
            SecPolicyTypeID_BGP2 = 5;
            SecPolicyTypeID_BGPV6 = 6;
            SecPolicyTypeID_BPDU = 7;
            SecPolicyTypeID_DHCP = 8;
            SecPolicyTypeID_DIAMETER = 9;
            SecPolicyTypeID_DNSCLIENT = 10;
            SecPolicyTypeID_DNSV6 = 11;
            SecPolicyTypeID_FRAGMENTPACKET = 12;
            SecPolicyTypeID_FRAMGMENT = 13;
            SecPolicyTypeID_FTPCLIENT = 14;
            SecPolicyTypeID_FTPSERVER = 15;
            SecPolicyTypeID_FTPSERVER2 = 16;
            SecPolicyTypeID_FTPV6_CLIENT = 17;
            SecPolicyTypeID_FTPV6_SERVER = 18;
            SecPolicyTypeID_HWTACACS = 19;
            SecPolicyTypeID_ICMP = 20;
            SecPolicyTypeID_ICMPV6 = 21;
            SecPolicyTypeID_IGMP = 22;
            SecPolicyTypeID_IGPMU = 23;
            SecPolicyTypeID_IPFPM = 24;
            SecPolicyTypeID_ISIS = 25;
            SecPolicyTypeID_ISIS2 = 26;
            SecPolicyTypeID_LACP = 27;
            SecPolicyTypeID_LDP = 28;
            SecPolicyTypeID_LDP2 = 29;
            SecPolicyTypeID_LSPPING = 30;
            SecPolicyTypeID_MPLSOAM = 31;
            SecPolicyTypeID_MSDP = 32;
            SecPolicyTypeID_NTP = 33;
            SecPolicyTypeID_OPENFLOW = 34;
            SecPolicyTypeID_OSPF = 35;
            SecPolicyTypeID_OSPF2 = 36;
            SecPolicyTypeID_OSPFV3 = 37;
            SecPolicyTypeID_PIM = 38;
            SecPolicyTypeID_PIMV6 = 39;
            SecPolicyTypeID_RADIUS = 40;
            SecPolicyTypeID_RIP = 41;
            SecPolicyTypeID_RIP2 = 42;
            SecPolicyTypeID_RRPP = 43;
            SecPolicyTypeID_RSVP = 44;
            SecPolicyTypeID_RSVP2 = 45;
            SecPolicyTypeID_SFTPCLIENT = 46;
            SecPolicyTypeID_SFTPSERVER = 47;
            SecPolicyTypeID_SNMP = 48;
            SecPolicyTypeID_SNMP2 = 49;
            SecPolicyTypeID_SSHCLIENT = 50;
            SecPolicyTypeID_SSHSERVER = 51;
            SecPolicyTypeID_SSHSERVER2 = 52;
            SecPolicyTypeID_SSHV6_SERVER = 53;
            SecPolicyTypeID_SYSLOG = 54;
            SecPolicyTypeID_TCPSYN = 55;
            SecPolicyTypeID_TCPSYNPACKET = 56;
            SecPolicyTypeID_TELNETCLIENT = 57;
            SecPolicyTypeID_TELNETSERVER = 58;
            SecPolicyTypeID_TELNETSERVER2 = 59;
            SecPolicyTypeID_TELNETV6 = 60;
            SecPolicyTypeID_TELNETV6_CLIENT = 61;
            SecPolicyTypeID_TELNETV6_SERVER = 62;
            SecPolicyTypeID_TFTP = 63;
            SecPolicyTypeID_TFTP2 = 64;
            SecPolicyTypeID_UDP = 65;
            SecPolicyTypeID_UDPPACKET = 66;
            SecPolicyTypeID_UNICAST_VRRP = 67;
            SecPolicyTypeID_URPF = 68;
            SecPolicyTypeID_VGMP = 69;
            SecPolicyTypeID_VRRP = 70;
            SecPolicyTypeID_WEB_AUTH_SERVER = 71;
            SecPolicyTypeID_X_8021AG = 72;
         };
         SecPolicyTypeID secPolicyTypeID = 3;
         string secSlotId = 4;
         uint64 secSubDropPkts = 5;
         uint64 secSubPassPkts = 6;
         uint64 secSubTotalPkts = 7;
      }
      repeated Nvsecnoncarstat nvsecnoncarstat = 1;
   }
   Nvsecnoncarstats nvsecnoncarstats = 9;
   message Nvsecpolicycfgs {
      message Nvsecpolicycfg {
         uint32 secApId = 1;
         uint32 secPolicyID = 2;
         string secSlotIdStr = 3;
      }
      repeated Nvsecpolicycfg nvsecpolicycfg = 1;
   }
   Nvsecpolicycfgs nvsecpolicycfgs = 10;
   message SECAccessUsers {
      message SECAccessUser {
         uint64 droppedBytes = 1;
         uint32 hostcarCarID = 2;
         uint32 innerVlanId = 3;
         uint32 outterVlanId = 4;
         uint64 passedBytes = 5;
         string secSlotId = 6;
         string secUserName = 7;
         string secUsrIPV4Addr = 8;
         string secUsrIPV6Addr = 9;
         string secUsrMac = 10;
         enum UserStatus {
            UserStatus_NA = 0;
            UserStatus_OFFLINEX_ABNORMAL = 1;
            UserStatus_OFFLINEX_NORMAL = 2;
            UserStatus_ONLINE = 3;
            UserStatus_ONLINEX_FAIL = 4;
         };
         UserStatus userStatus = 11;
      }
      repeated SECAccessUser sECAccessUser = 1;
   }
   SECAccessUsers sECAccessUsers = 11;
   message SECCaptPktActNodes {
      message SECCaptPktActNode {
         enum Bufferonly {
            Bufferonly_BUFFERX_ONLY = 0;
            Bufferonly_FILE = 1;
         };
         Bufferonly bufferonly = 1;
         enum CaptAclType {
            CaptAclType_ACL = 0;
            CaptAclType_IPV6ACL = 1;
            CaptAclType_NA = 2;
         };
         CaptAclType captAclType = 2;
         uint32 captureIndex = 3;
         uint32 ceBegin = 4;
         uint32 ceEnd = 5;
         enum Direction {
            Direction_BOTH = 0;
            Direction_INBOUND = 1;
            Direction_OUTBOUND = 2;
         };
         Direction direction = 6;
         string fileName = 7;
         uint32 fileSize = 8;
         bool overwrite = 9;
         uint32 peBegin = 10;
         uint32 peEnd = 11;
         uint32 pktLen = 12;
         uint32 pktNumber = 13;
         string secCaptAcl = 14;
         string secCaptIpv6Acl = 15;
         string secIfName = 16;
         uint32 timeOut = 17;
         enum VlanType {
            VlanType_CVLAN = 0;
            VlanType_NA = 1;
            VlanType_VLAN = 2;
         };
         VlanType vlanType = 18;
      }
      repeated SECCaptPktActNode sECCaptPktActNode = 1;
   }
   SECCaptPktActNodes sECCaptPktActNodes = 12;
   message SECHostCarQinqNodes {
      message SECHostCarQinqNode {
         string ifName = 1;
      }
      repeated SECHostCarQinqNode sECHostCarQinqNode = 1;
   }
   SECHostCarQinqNodes sECHostCarQinqNodes = 13;
   message SecArpCarValues {
      message SecArpCarValue {
         bool secEnable = 1;
         string secIfName = 2;
         uint32 secRateLimit = 3;
      }
      repeated SecArpCarValue secArpCarValue = 1;
   }
   SecArpCarValues secArpCarValues = 14;
   message SecArpChkIpEns {
      message SecArpChkIpEn {
         string ifName = 1;
      }
      repeated SecArpChkIpEn secArpChkIpEn = 1;
   }
   SecArpChkIpEns secArpChkIpEns = 15;
   message SecArpGrats {
      message SecArpGrat {
         string ifName = 1;
      }
      repeated SecArpGrat secArpGrat = 1;
   }
   SecArpGrats secArpGrats = 16;
   message SecArpMacIlls {
      message SecArpMacIll {
         string ifName = 1;
      }
      repeated SecArpMacIll secArpMacIll = 1;
   }
   SecArpMacIlls secArpMacIlls = 17;
   message SecArpReqNoBlks {
      message SecArpReqNoBlk {
         string ifName = 1;
      }
      repeated SecArpReqNoBlk secArpReqNoBlk = 1;
   }
   SecArpReqNoBlks secArpReqNoBlks = 18;
   message SecArpSafeGStats {
      message SecArpSafeGStat {
         uint64 secDropCnt = 1;
         uint64 secReplyCnt = 2;
         uint64 secRequestCnt = 3;
         string secSlotId = 4;
         uint64 secTocpCnt = 5;
      }
      repeated SecArpSafeGStat secArpSafeGStat = 1;
   }
   SecArpSafeGStats secArpSafeGStats = 19;
   message SecArpSafeguards {
      message SecArpSafeguard {
         string secIfIndex = 1;
      }
      repeated SecArpSafeguard secArpSafeguard = 1;
   }
   SecArpSafeguards secArpSafeguards = 20;
   message SecAttSrcFiles {
      message SecAttSrcFile {
         string fileName = 1;
         enum SecArpType {
            SecArpType_ARP_REPLY = 0;
            SecArpType_ARP_REQUEST = 1;
         };
         SecArpType secArpType = 2;
         string secAttSrcData = 3;
         uint32 secCeVlanID = 4;
         uint32 secCheckSum = 5;
         string secDestMac = 6;
         string secDstAddr = 7;
         uint32 secDstPort = 8;
         uint32 secFlowLabel = 9;
         uint32 secHopLimit = 10;
         uint32 secIPCheckSum = 11;
         uint32 secIPHeaderLen = 12;
         uint32 secIPId = 13;
         uint32 secIPLen = 14;
         uint32 secIPOff = 15;
         uint32 secIPProtocol = 16;
         uint32 secIPTos = 17;
         uint32 secIPTtl = 18;
         string secIPV6DestAddr = 19;
         string secIPV6SrcAddr = 20;
         uint32 secIPVersion = 21;
         uint32 secIcmpIgmpCode = 22;
         uint32 secIcmpIgmpType = 23;
         string secIgmpGroup = 24;
         enum SecL25Type {
            SecL25Type_ARP = 0;
            SecL25Type_MPLS = 1;
         };
         SecL25Type secL25Type = 25;
         enum SecL2Type {
            SecL2Type_ATM = 0;
            SecL2Type_CHDLC = 1;
            SecL2Type_ETHERNET = 2;
            SecL2Type_ETHERNET_II = 3;
            SecL2Type_PPP = 4;
         };
         SecL2Type secL2Type = 26;
         enum SecL3Type {
            SecL3Type_IP = 0;
            SecL3Type_IPV6 = 1;
         };
         SecL3Type secL3Type = 27;
         enum SecL4Type {
            SecL4Type_ICMP = 0;
            SecL4Type_ICMP6 = 1;
            SecL4Type_IGMP = 2;
            SecL4Type_TCP = 3;
            SecL4Type_UDP = 4;
         };
         SecL4Type secL4Type = 28;
         uint32 secLinkType = 29;
         uint32 secMplsLabel1 = 30;
         uint32 secMplsLabel2 = 31;
         uint32 secMplsLabel3 = 32;
         uint32 secMplsLabel4 = 33;
         uint32 secMplsLabel5 = 34;
         uint32 secMplsLabelNum = 35;
         uint32 secNextHeader = 36;
         uint32 secPayloadLen = 37;
         uint32 secPeVlanID = 38;
         uint32 secPktNumber = 39;
         uint32 secRecordNum = 40;
         string secSrcAddr = 41;
         string secSrcMac = 42;
         uint32 secSrcPort = 43;
         string secStartTime = 44;
         uint32 secTcpAckNum = 45;
         uint32 secTcpFlag = 46;
         uint32 secTcpSeqNum = 47;
         uint32 secTcpWinSize = 48;
         uint32 secTraffClass = 49;
         uint32 secUdpLen = 50;
         uint32 secVci = 51;
         uint32 secVpi = 52;
      }
      repeated SecAttSrcFile secAttSrcFile = 1;
   }
   SecAttSrcFiles secAttSrcFiles = 21;
   message SecAttSrcVerboses {
      message SecAttSrcVerbose {
         string ifName = 1;
         uint32 secATMVCI = 2;
         uint32 secATMVPI = 3;
         enum SecArpType {
            SecArpType_ARP_REPLY = 0;
            SecArpType_ARP_REQUEST = 1;
         };
         SecArpType secArpType = 4;
         string secAttSrcData = 5;
         enum SecAttType {
            SecAttType_APP = 0;
            SecAttType_CAR = 1;
            SecAttType_MADEFEND = 2;
            SecAttType_TCPIP = 3;
            SecAttType_TOTALCAR = 4;
            SecAttType_URPF = 5;
         };
         SecAttType secAttType = 6;
         uint32 secBufferSize = 7;
         uint32 secCeVlanID = 8;
         uint32 secCheckSum = 9;
         uint32 secCoverFlag = 10;
         string secDestMac = 11;
         string secDstAddr = 12;
         uint32 secDstPort = 13;
         uint32 secFlowLabel = 14;
         uint32 secHopLimit = 15;
         uint32 secIPCheckSum = 16;
         uint32 secIPHeaderLen = 17;
         uint32 secIPId = 18;
         uint32 secIPLen = 19;
         uint32 secIPOff = 20;
         uint32 secIPProtocol = 21;
         uint32 secIPTos = 22;
         uint32 secIPTtl = 23;
         string secIPV6DestAddr = 24;
         string secIPV6SrcAddr = 25;
         uint32 secIPVersion = 26;
         uint32 secIcmpIgmpCode = 27;
         uint32 secIcmpIgmpType = 28;
         string secIgmpGroup = 29;
         enum SecL25Type {
            SecL25Type_ARP = 0;
            SecL25Type_MPLS = 1;
         };
         SecL25Type secL25Type = 30;
         enum SecL2Type {
            SecL2Type_ATM = 0;
            SecL2Type_CHDLC = 1;
            SecL2Type_ETHERNET = 2;
            SecL2Type_ETHERNET_II = 3;
            SecL2Type_PPP = 4;
         };
         SecL2Type secL2Type = 31;
         enum SecL3Type {
            SecL3Type_IP = 0;
            SecL3Type_IPV6 = 1;
         };
         SecL3Type secL3Type = 32;
         enum SecL4Type {
            SecL4Type_ICMP = 0;
            SecL4Type_ICMP6 = 1;
            SecL4Type_IGMP = 2;
            SecL4Type_TCP = 3;
            SecL4Type_UDP = 4;
         };
         SecL4Type secL4Type = 33;
         uint32 secLinkType = 34;
         uint32 secMplsLabel1 = 35;
         uint32 secMplsLabel2 = 36;
         uint32 secMplsLabel3 = 37;
         uint32 secMplsLabel4 = 38;
         uint32 secMplsLabel5 = 39;
         uint32 secMplsLabelNum = 40;
         uint32 secNextHeader = 41;
         uint32 secPayloadLen = 42;
         uint32 secPeVlanID = 43;
         uint32 secPktNumber = 44;
         uint32 secRecordNumber = 45;
         string secSlotId = 46;
         string secSrcAddr = 47;
         string secSrcMac = 48;
         uint32 secSrcPort = 49;
         string secStartTime = 50;
         uint32 secSysid = 51;
         uint32 secTcpAckNum = 52;
         uint32 secTcpFlag = 53;
         uint32 secTcpSeqNum = 54;
         uint32 secTcpWinSize = 55;
         uint32 secTraffClass = 56;
         uint32 secUdpLen = 57;
      }
      repeated SecAttSrcVerbose secAttSrcVerbose = 1;
   }
   SecAttSrcVerboses secAttSrcVerboses = 22;
   message SecCrssBrdStas {
      message SecCrssBrdSta {
         uint32 secActualCbs = 1;
         uint32 secActualCir = 2;
         uint32 secCfgCbs = 3;
         uint32 secCfgCir = 4;
         uint64 secDropedPkts = 5;
         uint64 secPassedPkts = 6;
         string secSlotId = 7;
      }
      repeated SecCrssBrdSta secCrssBrdSta = 1;
   }
   SecCrssBrdStas secCrssBrdStas = 23;
   message SecCurrentCarNodes {
      message SecCurrentCarNode {
         enum Desc {
            Desc_ABNORM = 0;
            Desc_ACCESSIMAC_ERR = 1;
            Desc_ACL = 2;
            Desc_ACL_CAPTURE_PKT_3 = 3;
            Desc_ACL_CAPTURE_PKT_4 = 4;
            Desc_ACL_CAPTURE_PKT_5 = 5;
            Desc_ACL_CAPTURE_PKT_6 = 6;
            Desc_ACL_CAPTURE_PKT_7 = 7;
            Desc_ACL_CAPTURE_PKT_8 = 8;
            Desc_ACR_DELAY_REQ = 9;
            Desc_ACT_DISPKT = 10;
            Desc_AGG_AGINGPKT = 11;
            Desc_AIBX_TABLEX_INVALIDX_MESSAGEX_TOX_CPUX_INX_MEX_ENCAPSULATION = 12;
            Desc_AIB_FAKE = 13;
            Desc_AIDCHKERR = 14;
            Desc_AID_CFGERR = 15;
            Desc_AID_NV_ME = 16;
            Desc_AID_NV_ME_LE = 17;
            Desc_AID_NV_ME_ME = 18;
            Desc_AID_NV_TE_RLY = 19;
            Desc_AID_NV_TE_TUL = 20;
            Desc_ALL_HUB = 21;
            Desc_ALL_SPOKE = 22;
            Desc_APS = 23;
            Desc_APSX_SWAPX_FRAME = 24;
            Desc_APSX_X_TOX_CPU = 25;
            Desc_APS_ACLMISS = 26;
            Desc_APS_ALARM_MSG = 27;
            Desc_APS_BC = 28;
            Desc_APS_CC_UP_DOWN_BC_MSG = 29;
            Desc_APS_INTERNAL_SW_MSG = 30;
            Desc_APS_PORT_STATUS_BROADCAST = 31;
            Desc_APS_RDI_RDI_R_BC_MSG = 32;
            Desc_APS_UPDATE_IVSI_BC_MSG = 33;
            Desc_APS_UPDATE_PBT_GROUP_BC_MSG = 34;
            Desc_ARPCHKERR = 35;
            Desc_ARPCHK_DIPERR = 36;
            Desc_ARPV6X_MISSX_MESSAGEX_TOX_CPU = 37;
            Desc_ARP_ACLMISS = 38;
            Desc_ARP_ATTACK = 39;
            Desc_ARP_DROP = 40;
            Desc_ARP_REPLY_NO_INCOMPLETE = 41;
            Desc_ARP_REQ_ANTIATTACK = 42;
            Desc_ARP_SAFEGUARD_REPLY = 43;
            Desc_ATMX_INARPX_PACKET = 44;
            Desc_ATM_OAM = 45;
            Desc_AUTORP = 46;
            Desc_BASX_ARPX_REPLY = 47;
            Desc_BASX_IPOEV6X_LINKLOCAL = 48;
            Desc_BASX_IPOEX_ICMPV6X_MC = 49;
            Desc_BASX_QVCTX_MISS = 50;
            Desc_BASX_QVCTX_MISSX_ARPX_PACKET = 51;
            Desc_BASX_REVX_MCX_PACKET = 52;
            Desc_BAS_CONTROL_PPP = 53;
            Desc_BAS_DHCP_DISCOVER = 54;
            Desc_BAS_DIRECT_CP = 55;
            Desc_BAS_IPV4_DHCPX_PACKET = 56;
            Desc_BAS_IPV4_REDIRECT_TCP = 57;
            Desc_BAS_IPV6_NAX_PACKET = 58;
            Desc_BAS_IPV6_NA_REDIRECT_CPX_PACKET = 59;
            Desc_BAS_IPV6_NSX_PACKET = 60;
            Desc_BAS_IPV6_NS_REDIRECT_CPX_PACKET = 61;
            Desc_BAS_IPV6_REDIRECT_CP = 62;
            Desc_BAS_IPV6_RSX_PACKET = 63;
            Desc_BAS_MUTE_CLIENTX_PACKET = 64;
            Desc_BAS_PPP_ECHO_NOUSER = 65;
            Desc_BAS_PPP_KEEP_LIVE = 66;
            Desc_BAS_SSDPX_PACKET = 67;
            Desc_BAS_VBAS = 68;
            Desc_BAS_WEB = 69;
            Desc_BCMASKERR = 70;
            Desc_BET_INVALID = 71;
            Desc_BE_ABNORMITY_SB = 72;
            Desc_BE_DELETE = 73;
            Desc_BE_DIFF_UPDATE = 74;
            Desc_BE_SB = 75;
            Desc_BE_STATIC = 76;
            Desc_BE_SYN = 77;
            Desc_BFD = 78;
            Desc_BFDX_FAILINGX_MESSAGE = 79;
            Desc_BFDX_RECEIVEX_X_FROMX_LOCAL = 80;
            Desc_BFDX_SESSIONDOWNX_MESSAGE = 81;
            Desc_BFDX_STATEX_CHANGINGX_MESSAGEX_FORWARDINGX_TOX_CP = 82;
            Desc_BFDX_TOX_CPU_1 = 83;
            Desc_BFDX_TOX_CPU_2 = 84;
            Desc_BFDX_TOX_CPU_3 = 85;
            Desc_BFDX_X_NOTX_UPX_MESSAGE = 86;
            Desc_BFDX_X_TOX_CPUX_FROMX_OTHERX_BOARD = 87;
            Desc_BFD_ACLMISS = 88;
            Desc_BFD_BIT_ERROR_DETECT = 89;
            Desc_BFD_FAULT_BC = 90;
            Desc_BFD_REMOTE_YD0 = 91;
            Desc_BGPV6X_PACKET = 92;
            Desc_BGP_1 = 93;
            Desc_BGP_2 = 94;
            Desc_BH_LOOPDETECT_CPU = 95;
            Desc_BIGHEART = 96;
            Desc_BLACKLIST = 97;
            Desc_BPDU = 98;
            Desc_BPDU_E = 99;
            Desc_BPDU_TNL = 100;
            Desc_BRIDGEX_FDBX_LEARN = 101;
            Desc_BRIDGEX_MACX_TOX_CPU = 102;
            Desc_BRIDGE_CIB_MAC_LIMIT = 103;
            Desc_BRIDGE_DISABLE = 104;
            Desc_BRIDGE_EGRESS_FDB_LEARN = 105;
            Desc_BRIDGE_INGRESS_FDB_LEARN = 106;
            Desc_BRIDGE_PCT_MAC_LIMIT = 107;
            Desc_BRIDGE_VSI_MAC_LIMIT = 108;
            Desc_BROADCASTX_SENDINGX_MULTICASTX_X_CAUSEX_INX_FULLX_FRAME = 109;
            Desc_CCM = 110;
            Desc_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_MESSAGE = 111;
            Desc_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_TIMEOUTX_MESSAGE = 112;
            Desc_CCMX_X_TOX_CPUX_WITHX_RDIX_MESSAGE = 113;
            Desc_CCMX_X_TOX_CPUX_WITHX_UPX_DOWNX_MESSAGE = 114;
            Desc_CCM_ACLMISS = 115;
            Desc_CCM_Y1731_TO_CP = 116;
            Desc_CCX_X_FREQUENCYX_X_SMACX_X_MAIDX_FIELDX_MISMATCHX_ERROR = 117;
            Desc_CC_FREQ_RECOVER = 118;
            Desc_CC_LEVELERR = 119;
            Desc_CC_MAID_RECOVER = 120;
            Desc_CC_SMAC_RECOVER = 121;
            Desc_CDP = 122;
            Desc_CFGERR_1 = 123;
            Desc_CFGERR_2 = 124;
            Desc_CHADDRERR = 125;
            Desc_CHDLCX_KEEPLIVE = 126;
            Desc_CHECKSUMERR = 127;
            Desc_CHECKURPFERR = 128;
            Desc_CIB_EXT_NV = 129;
            Desc_CIB_NV = 130;
            Desc_CIB_PV_EXT_NV = 131;
            Desc_CIB_PV_NV = 132;
            Desc_CPACLX_CARX_SOURCEX_TRACE = 133;
            Desc_CRB1MISS = 134;
            Desc_CRB2MISS = 135;
            Desc_CRBITAGMISS = 136;
            Desc_CRBQINQMISS = 137;
            Desc_CROSSBOARD_MACDEL = 138;
            Desc_CWCMD2 = 139;
            Desc_CWCMD3 = 140;
            Desc_DCN = 141;
            Desc_DCNX_DATA = 142;
            Desc_DCNX_REDIRECT = 143;
            Desc_DCN_PKT_FIN = 144;
            Desc_DCN_PKT_INIT = 145;
            Desc_DEFAULTX_RESERVEDX_MULTICAST = 146;
            Desc_DESCERR = 147;
            Desc_DESCMERGEDERR = 148;
            Desc_DESC_PASS_ERR = 149;
            Desc_DHCPCHKERR = 150;
            Desc_DHCPINV = 151;
            Desc_DHCPREP = 152;
            Desc_DHCPREQ = 153;
            Desc_DHCPSTRONG = 154;
            Desc_DHCPUNT = 155;
            Desc_DHCP_1 = 156;
            Desc_DHCP_2 = 157;
            Desc_DHCP_PKT = 158;
            Desc_DHCP_SMAC_ERR = 159;
            Desc_DHCP_SP_ERR = 160;
            Desc_DIAMETERX_PACKET = 161;
            Desc_DIP224_DROP = 162;
            Desc_DIP224_TCP = 163;
            Desc_DIP224_UDP = 164;
            Desc_DIPERR_1 = 165;
            Desc_DIPERR_2 = 166;
            Desc_DIPERR_DROP = 167;
            Desc_DIS = 168;
            Desc_DISIPV4MC = 169;
            Desc_DISIPV4UC = 170;
            Desc_DISIPV6MC = 171;
            Desc_DISIPV6UC = 172;
            Desc_DISRE = 173;
            Desc_DLP_BGP = 174;
            Desc_DLP_IPV6_OSPF = 175;
            Desc_DLP_ISIS = 176;
            Desc_DLP_LDP = 177;
            Desc_DLP_LDP_UDP = 178;
            Desc_DLP_RSVP = 179;
            Desc_DMM_CW_TO_CP = 180;
            Desc_DMM_NO_CW_TO_CP = 181;
            Desc_DMR_CW_TO_CP = 182;
            Desc_DMR_NO_CW_TO_CP = 183;
            Desc_DNSUNT = 184;
            Desc_DNSV6X_PACKET = 185;
            Desc_DNSX_CLIENT = 186;
            Desc_DROPPINGX_UNKNOWNX_MULTICAST = 187;
            Desc_DROPPINGX_UNKNOWNX_UNICAST = 188;
            Desc_DROP_CPUIRT = 189;
            Desc_DROP_CPUT = 190;
            Desc_DROP_ERED = 191;
            Desc_DROP_EYELLOW = 192;
            Desc_DROP_IRED = 193;
            Desc_DROP_IYELLOW = 194;
            Desc_EAPOLX_FRAME = 195;
            Desc_ECC_ERR = 196;
            Desc_ECIB_NV = 197;
            Desc_ECID_NV = 198;
            Desc_ECMP_PRUNE = 199;
            Desc_EFIT_DROP = 200;
            Desc_ELMI = 201;
            Desc_EMCPAT_NV = 202;
            Desc_EMPTYLOADIPERR = 203;
            Desc_ENCAP_UK = 204;
            Desc_EOPPAT_NV = 205;
            Desc_EPEPAT_NV = 206;
            Desc_ETHERNETX_BPDU = 207;
            Desc_ETHERNETX_CONFIGX_X_TOX_CPU = 208;
            Desc_ETHERX_TRUNKX_LACP = 209;
            Desc_ETH_HGMP = 210;
            Desc_ETH_IPX = 211;
            Desc_ETH_PATHMTU_ERROR = 212;
            Desc_ETH_UKTYPE = 213;
            Desc_ETH_VRRP = 214;
            Desc_FABRIC_HEART_1 = 215;
            Desc_FABRIC_HEART_2 = 216;
            Desc_FABRIC_HEART_PLUS_1 = 217;
            Desc_FABRIC_HEART_PLUS_2 = 218;
            Desc_FABRI_HEART_PLUS = 219;
            Desc_FHFT = 220;
            Desc_FIDTOUT_NV = 221;
            Desc_FLUSH = 222;
            Desc_FLUSHX_X_TOX_CPU = 223;
            Desc_FRAGMENTX_PACKET = 224;
            Desc_FRINARP = 225;
            Desc_FRISIS = 226;
            Desc_FRLMI = 227;
            Desc_FRUK = 228;
            Desc_FTPV6X_CLIENTX_PACKET = 229;
            Desc_FTPV6X_SERVERX_PACKET = 230;
            Desc_FTPX_CLIENT = 231;
            Desc_FTPX_SERVER = 232;
            Desc_GLB_TOKEN_CHKERR = 233;
            Desc_GMACLBM = 234;
            Desc_GMACLBR = 235;
            Desc_GMACLTMDST = 236;
            Desc_GMACLTMMID = 237;
            Desc_GMACLTR = 238;
            Desc_GMRPX_FRAMEX_ANDX_GVRPX_FRAME = 239;
            Desc_GREINDEX_MISS = 240;
            Desc_GRE_KEY_ERR = 241;
            Desc_GRE_MF_TOCPU = 242;
            Desc_GRE_ROUTING = 243;
            Desc_GRE_UK = 244;
            Desc_GSMP = 245;
            Desc_GTSM_CHECKERR = 246;
            Desc_GVRP_TOCP = 247;
            Desc_HDLCCFG = 248;
            Desc_HDLCIPX = 249;
            Desc_HDLCUK = 250;
            Desc_HDLC_ACERR = 251;
            Desc_HEARTBEAT1 = 252;
            Desc_HEARTBEAT10 = 253;
            Desc_HEARTBEAT11 = 254;
            Desc_HEARTBEAT2 = 255;
            Desc_HEARTBEAT3 = 256;
            Desc_HEARTBEAT4 = 257;
            Desc_HEARTBEAT5 = 258;
            Desc_HEARTBEAT6 = 259;
            Desc_HEARTBEAT7 = 260;
            Desc_HEARTBEAT8 = 261;
            Desc_HEARTBEAT9 = 262;
            Desc_HGMPX_V1X_FRAME = 263;
            Desc_HOSTCAR_ATTAC = 264;
            Desc_HTTPX_REDIRECTX_X_OFX_CHASTENX_USER = 265;
            Desc_HTTP_HOSTCAR_ATTACK = 266;
            Desc_HUBVLAN_ERR = 267;
            Desc_HUB_ERR = 268;
            Desc_HVRP = 269;
            Desc_HWTACACS = 270;
            Desc_IBE_ABNORMITY_SB = 271;
            Desc_IBE_DELETE = 272;
            Desc_IBE_DYNAMIC_DIFF_DROP = 273;
            Desc_IBE_INVALID = 274;
            Desc_IBE_SB = 275;
            Desc_IBE_STATIC_DIFF_DROP = 276;
            Desc_ICMP = 277;
            Desc_ICMPV6X_PACKET = 278;
            Desc_ICMPV6_REPLY = 279;
            Desc_ICMPV6_REQUEST = 280;
            Desc_ICMP_BROADCAST_ADDRESS_ECHO = 281;
            Desc_ICMP_FRAG = 282;
            Desc_ICMP_REPLY = 283;
            Desc_ICMP_REQUEST = 284;
            Desc_IEPPAT_NV_1 = 285;
            Desc_IEPPAT_NV_2 = 286;
            Desc_IFIT_CPU_SPECIAL = 287;
            Desc_IFIT_DROP = 288;
            Desc_IGMP_1 = 289;
            Desc_IGMP_2 = 290;
            Desc_IGMP_ACLMISS = 291;
            Desc_IGMP_FAST_JOIN_1 = 292;
            Desc_IGMP_FAST_JOIN_2 = 293;
            Desc_IGMP_FROM_LSP = 294;
            Desc_IGMP_FROM_VLAN = 295;
            Desc_IGP_MAINTAIN_UNITX_PACKET = 296;
            Desc_IHLERR = 297;
            Desc_IKE_PROTOCOL = 298;
            Desc_IMAC_ADD_MSG = 299;
            Desc_IMAC_UPDATE_MSG = 300;
            Desc_INBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 301;
            Desc_INGRESS_BE_TOCPU = 302;
            Desc_IPFPM = 303;
            Desc_IPOPT_TCP = 304;
            Desc_IPOPT_UDP = 305;
            Desc_IPTV = 306;
            Desc_IPV4ACL_STREAM_MISS = 307;
            Desc_IPV4LENERR = 308;
            Desc_IPV4MCTTLCHECK_ERR = 309;
            Desc_IPV4PLENERR = 310;
            Desc_IPV4X_ARP = 311;
            Desc_IPV4X_ARPX_MISS = 312;
            Desc_IPV4X_FIBX_MISS = 313;
            Desc_IPV4X_ISISX_X_OVERX_GREX_TUNNEL = 314;
            Desc_IPV4X_MULTICASTX_FIBX_MISS = 315;
            Desc_IPV4X_MULTICASTX_REGISTRATION = 316;
            Desc_IPV4X_MULTICASTX_RPFX_CHECKINGX_FAILS = 317;
            Desc_IPV4X_OPTION = 318;
            Desc_IPV4X_OSPFX_X_TOX_CPU = 319;
            Desc_IPV4X_OVERX_IPV6X_ETUNNELX_X_TOX_CPUX_WITHX_TUNNELX_INDEXX_CHECKINGX_MISS = 320;
            Desc_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_NONX_IPV4X_MESSAGEX_AFTERX_IPV6X_HEADX_EXTENSION = 321;
            Desc_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_UNSUPPORTEDX_IPV6X_HEADX_EXTENSION = 322;
            Desc_IPV4X_OVERX_IPV6X_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTUX_BUTX_DFX_FLAGX_SETX_TOX_1X_INX_IPX_HEAD = 323;
            Desc_IPV4X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 324;
            Desc_IPV4X_TCPX_X_TOX_CPU = 325;
            Desc_IPV4X_TTLX_EXPIRES = 326;
            Desc_IPV4X_UDPX_PTPX_320 = 327;
            Desc_IPV4X_UDPX_PTRX_320 = 328;
            Desc_IPV4X_UDPX_X_TOX_CPU = 329;
            Desc_IPV4X_X_OVERX_GREX_TUNNELX_DETECTSX_KEEPLIVEX_MESSAGE = 330;
            Desc_IPV4X_X_OVERX_GREX_TUNNELX_ECHOSX_KEEPLIVEX_MESSAGE = 331;
            Desc_IPV4X_X_TOX_CPUX_AFTERX_FIBX_CHECK = 332;
            Desc_IPV4X_X_TOX_CPUX_EXCEEDINGX_MTUX_LIMIT = 333;
            Desc_IPV4_AT_MISS = 334;
            Desc_IPV4_BFD = 335;
            Desc_IPV4_FIB_DROP_1 = 336;
            Desc_IPV4_FIB_DROP_2 = 337;
            Desc_IPV4_IGMP = 338;
            Desc_IPV4_LDP = 339;
            Desc_IPV4_MC_SOFTWARE_FWD = 340;
            Desc_IPV4_MC_TO_CP = 341;
            Desc_IPV4_RARP = 342;
            Desc_IPV4_REMOTE_BFD = 343;
            Desc_IPV4_RESV2_TO_CP = 344;
            Desc_IPV4_RSVP_TO_CP = 345;
            Desc_IPV4_TCP_BGP = 346;
            Desc_IPV4_TCP_FTP = 347;
            Desc_IPV4_TCP_TELNET = 348;
            Desc_IPV4_UDP_PGP = 349;
            Desc_IPV4_UNK_MC_1 = 350;
            Desc_IPV4_UNK_MC_2 = 351;
            Desc_IPV6DIPERR = 352;
            Desc_IPV6LENERR_1 = 353;
            Desc_IPV6LENERR_2 = 354;
            Desc_IPV6MCTTLCHECK_ERR = 355;
            Desc_IPV6PLENERR = 356;
            Desc_IPV6SIPERR = 357;
            Desc_IPV6X_CHECKINGX_NDHX_MISS = 358;
            Desc_IPV6X_CHECKINGX_NDX_MISSX_MESSAGE = 359;
            Desc_IPV6X_DHCP = 360;
            Desc_IPV6X_EXITX_TUNNELX_FRAGMENTATION = 361;
            Desc_IPV6X_EXITX_TUNNELX_HOP = 362;
            Desc_IPV6X_EXITX_TUNNELX_REDIRECTX_SNMP = 363;
            Desc_IPV6X_EXITX_TUNNELX_RESERVEDX_MULTICAST = 364;
            Desc_IPV6X_EXITX_TUNNELX_X_TOX_CPU = 365;
            Desc_IPV6X_FIBX_CHECKINGX_MISSES = 366;
            Desc_IPV6X_MLD = 367;
            Desc_IPV6X_MULTICASTX_FRAGMENTATION = 368;
            Desc_IPV6X_MULTICASTX_REGISTRATION = 369;
            Desc_IPV6X_MULTICASTX_RPFX_CHECKINGX_FAIL = 370;
            Desc_IPV6X_MULTICASTX_TOX_CPUX_MISS = 371;
            Desc_IPV6X_MULTICASTX_X_TOX_CPU = 372;
            Desc_IPV6X_NA = 373;
            Desc_IPV6X_NDHX_MACX_MISSX_TCAMX_MISSX_ = 374;
            Desc_IPV6X_NDX_MACX_MISSX_TCAMX_MISSX_ = 375;
            Desc_IPV6X_NDX_MISS = 376;
            Desc_IPV6X_NDX_REDIRECTX_CONTROLX_PACKET = 377;
            Desc_IPV6X_NEXTX_HOPX_X_TOX_CPU = 378;
            Desc_IPV6X_NS = 379;
            Desc_IPV6X_OVERX_GREX_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTU = 380;
            Desc_IPV6X_RA = 381;
            Desc_IPV6X_REDIRECTEDX_X_TOX_CPU = 382;
            Desc_IPV6X_REDIRECTX_ICMP = 383;
            Desc_IPV6X_REDIRECTX_SNMP = 384;
            Desc_IPV6X_REDIRECTX_TCP = 385;
            Desc_IPV6X_REDIRECTX_X_TOX_CPU = 386;
            Desc_IPV6X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 387;
            Desc_IPV6X_REJECT = 388;
            Desc_IPV6X_RESERVEDX_MULTICAST = 389;
            Desc_IPV6X_RESERVEX_MULTICAST = 390;
            Desc_IPV6X_RS = 391;
            Desc_IPV6X_TTLX_EXPIRES = 392;
            Desc_IPV6X_WHITELIST = 393;
            Desc_IPV6X_X_TOOX_BIG = 394;
            Desc_IPV6X_X_TOX_CPUX_AFTERX_LOCALX_FIBX_CHECK = 395;
            Desc_IPV6_4OVER6 = 396;
            Desc_IPV6_AH_OPTIONX_PACKET = 397;
            Desc_IPV6_BFD_1 = 398;
            Desc_IPV6_BFD_2 = 399;
            Desc_IPV6_BFD_TOCOP_FROM5822 = 400;
            Desc_IPV6_ESP_OPTIONX_PACKET = 401;
            Desc_IPV6_FIB_DROP = 402;
            Desc_IPV6_FWD_TABLE_VLAN = 403;
            Desc_IPV6_GRE = 404;
            Desc_IPV6_HOP_BY_HOP_OPTIONX_PACKET = 405;
            Desc_IPV6_ID_BASE = 406;
            Desc_IPV6_OTHER_OPTIONX_PACKET = 407;
            Desc_IPV6_PIM = 408;
            Desc_IPV6_REMOTE_BFD = 409;
            Desc_IPV6_TCP_BGP = 410;
            Desc_IPV6_UDP_L2TP = 411;
            Desc_IPV6_UDP_NTP = 412;
            Desc_IPV6_UNK_MC_1 = 413;
            Desc_IPV6_UNK_MC_2 = 414;
            Desc_IPV6_VRRP = 415;
            Desc_IPXX_FRAMEX_TOX_CPU = 416;
            Desc_IPX_X_TOX_CPU = 417;
            Desc_ISIS = 418;
            Desc_ITAGCC = 419;
            Desc_ITAGCC_ACLMISS = 420;
            Desc_JUMBO = 421;
            Desc_L2BE_DROP = 422;
            Desc_L2DIS_1 = 423;
            Desc_L2DIS_2 = 424;
            Desc_L2IBE_DROP = 425;
            Desc_L2I_3AH_LOOPBACK = 426;
            Desc_L2I_PAT_INV = 427;
            Desc_L2L3DIS = 428;
            Desc_L2MBE_CPU = 429;
            Desc_L2_MC2CPU = 430;
            Desc_L2MC_DROP = 431;
            Desc_L2MC_MAIB_BROADCAST = 432;
            Desc_L2MC_MISS = 433;
            Desc_L2MFIBV6_MISS = 434;
            Desc_L2TPX_IGMP = 435;
            Desc_L2TPX_LAC = 436;
            Desc_L2TPX_LNSX_CONTROL = 437;
            Desc_L2TPX_LNSX_CTRLX_SCCRQ = 438;
            Desc_L2TPX_LNSX_CTRLX_SCCRQX_DETECTX_PACKET = 439;
            Desc_L2TPX_LNSX_HELLOX_ORX_ZLB = 440;
            Desc_L2TPX_LNSX_PPP = 441;
            Desc_L2TPX_LNSX_PPPX_ECHO = 442;
            Desc_L2_1588_OR_ANN_CHANGE = 443;
            Desc_L2_3AH_TEST_1 = 444;
            Desc_L2_3AH_TEST_2 = 445;
            Desc_L2_ASSP = 446;
            Desc_L2_EAPOL = 447;
            Desc_L2_EAPOL_START = 448;
            Desc_L2_IPV4 = 449;
            Desc_L2_IPV6 = 450;
            Desc_L2_MPLSUC = 452;
            Desc_L2_PPPOE_PADI = 453;
            Desc_L2_PPPOE_PADR = 454;
            Desc_L2_PPPOE_SESSION = 455;
            Desc_L2_SLOWPROTOCOL = 456;
            Desc_L3DIS_1 = 457;
            Desc_L3DIS_2 = 458;
            Desc_LABEL1 = 459;
            Desc_LABELERR = 460;
            Desc_LACPX_FLUSHX_FRAME = 461;
            Desc_LBK_ERR = 462;
            Desc_LBMDST = 463;
            Desc_LBRDST = 464;
            Desc_LB_TRANS_TIMESTAMP = 465;
            Desc_LCLLPDROP = 466;
            Desc_LCLONLY = 467;
            Desc_LCL_TOKEN_CHKERR = 468;
            Desc_LDP_1 = 469;
            Desc_LDP_2 = 470;
            Desc_LDP_HELLO = 471;
            Desc_LDP_UDP = 472;
            Desc_LENERR_1 = 473;
            Desc_LENERR_2 = 474;
            Desc_LIMIT_AFUL_DROP = 475;
            Desc_LINK_DETECT = 476;
            Desc_LLDP = 477;
            Desc_LMM_CW_TO_CP = 478;
            Desc_LMM_NO_CW_TO_CP = 479;
            Desc_LMR_CW_TO_CP = 480;
            Desc_LMR_NO_CW_TO_CP = 481;
            Desc_LNT_ALM = 482;
            Desc_LNT_PKT = 483;
            Desc_LOOPBACK_TEST_PKT = 484;
            Desc_LOOPDETECT = 485;
            Desc_LOOP_HEARTBEAT_TO_CP = 486;
            Desc_LRNONLY_1 = 487;
            Desc_LRNONLY_2 = 488;
            Desc_LRNSYS_ERR = 489;
            Desc_LSFX_BROADCAST = 490;
            Desc_LSPX_PING = 491;
            Desc_LTMDST = 492;
            Desc_LTMMID = 493;
            Desc_LTRDST = 494;
            Desc_MACBYPASS_TRIGGER = 495;
            Desc_MAC_ACCOUNT_MISS = 496;
            Desc_MAC_ADD_MSG = 497;
            Desc_MAC_DELETE_FLAPPING = 498;
            Desc_MAC_SB_FLAPPING = 499;
            Desc_MAC_UPDATE_FLAPPING = 500;
            Desc_MAC_UPDATE_MSG = 501;
            Desc_MARKER = 502;
            Desc_MAXLEN_ERR = 503;
            Desc_MC_MFIB_DUMMY_DROP = 504;
            Desc_MC_MFIB_SG_DROP = 505;
            Desc_MC_MIB_GRE = 506;
            Desc_MC_SEL_DROP = 507;
            Desc_MDLVL = 508;
            Desc_MEAP_PKT = 509;
            Desc_ME_GTOKEN_PRUNE = 510;
            Desc_ME_LTOKEN_PRUNE = 511;
            Desc_MIBT_NV = 512;
            Desc_MINLEN_ERR = 513;
            Desc_MIRRORX_TOX_CPU = 514;
            Desc_MIRROR_TO_CP_EGRESS = 515;
            Desc_MIRROR_TO_CP_INGRESS = 516;
            Desc_MISMATCHX_RECOVER = 517;
            Desc_MISMATCH_SMAC_PKT_1 = 518;
            Desc_MISMATCH_SMAC_PKT_2 = 519;
            Desc_MKA = 520;
            Desc_MOAM = 521;
            Desc_MPLSDIS_1 = 522;
            Desc_MPLSDIS_2 = 523;
            Desc_MPLSOAM_BROADCAST = 524;
            Desc_MPLSX_ARPX_MISS = 525;
            Desc_MPLSX_ARPX_MISSX_MESSAGEX_TOX_CPU = 526;
            Desc_MPLSX_LABELX_FAIL = 527;
            Desc_MPLSX_MULTICAST = 528;
            Desc_MPLSX_OAMX_FAULTX_BROADCAST = 529;
            Desc_MPLSX_PROTOCOLX_S = 530;
            Desc_MPLSX_TTLX_EXPIRES = 531;
            Desc_MPLSX_X_EXCEEDINGX_MTU = 532;
            Desc_MPLSX_X_FORWARDINGX_TOX_CP = 533;
            Desc_MPLSX_X_TOKENX_FAIL = 534;
            Desc_MPLSX_X_TOX_CPUX_AFTERX_3X_MPLSX_LABELX_POP = 535;
            Desc_MPLSX_X_TOX_CPUX_AFTERX_POP = 536;
            Desc_MPLSX_X_WITHX_ROUTERX_ALERT = 537;
            Desc_MPLS_LABEL_CHECK_FAIL = 538;
            Desc_MPLS_PATHMTU_ERROR = 539;
            Desc_MSDP = 540;
            Desc_MTC_MFIB_SG_DROP = 541;
            Desc_MTC_MFIB_SSM_CAUSE = 542;
            Desc_MTUERR_VVBM = 543;
            Desc_MULTICASTX_DUMMYX_TABLEX_DECIDINGX_TOX_CPU = 544;
            Desc_MULTICASTX_LEAFX_TABLEX_DECIDINGX_TOX_CPU = 545;
            Desc_NETSECCHN_SOCKETX_PACKET = 546;
            Desc_NETSTREAMX_S = 547;
            Desc_NEW_BFD = 548;
            Desc_NEW_DLP_OPENFLOW = 549;
            Desc_NEW_ETRUNK = 550;
            Desc_NEW_TCPSYN_FTPSERVER = 551;
            Desc_NEW_TCPSYN_MSDP = 552;
            Desc_NHLFE_NV = 553;
            Desc_NHPPTR_CHKERR = 554;
            Desc_NHRP_MISS_PACKET = 555;
            Desc_NHRP_NO_REGISTER_REQUEST_PACKET = 556;
            Desc_NHRP_REDIRECT_PACKET = 557;
            Desc_NHRP_REGISTER_REQUEST_PACKET = 558;
            Desc_NOE_CHGVID_PRUNE = 559;
            Desc_NOE_PRUNE = 560;
            Desc_NOE_QUALIFY = 561;
            Desc_NOIPV4 = 562;
            Desc_NOIPV6 = 563;
            Desc_NONEX_ARPX_BROADCASTX_X_TOX_CPU = 564;
            Desc_NONEX_GREX_X_EXITSX_GREX_TUNNEL = 565;
            Desc_NQA_CROSS_BOARD_TO_CP = 566;
            Desc_NQA_ICMP_JITTER = 567;
            Desc_NQA_RCV = 568;
            Desc_NQA_RCV_CROSS = 569;
            Desc_NQA_SEND_OVER_TO_CP = 570;
            Desc_NQA_TRANS_TIMESTAMP = 571;
            Desc_NQA_UDP_JITTER = 572;
            Desc_NSID_CFGERR = 573;
            Desc_NS_TOCOP = 574;
            Desc_NTP_1 = 575;
            Desc_NTP_2 = 576;
            Desc_OAMX_1AGX_TEST = 577;
            Desc_OAMX_3AHX_TEST = 578;
            Desc_OAMX_BDIX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 579;
            Desc_OAMX_CVFFDX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 580;
            Desc_OAM_TOCOP = 581;
            Desc_OLDERR = 582;
            Desc_ONLINEX_USERX_DHCPV4X_REQUEST = 583;
            Desc_ONLINEX_USERX_DHCPV6X_REQUEST = 584;
            Desc_ONLINEX_USERX_DHCPV6X_SOLICIT = 585;
            Desc_OPENFLOWX_PACKET = 586;
            Desc_OSPF = 587;
            Desc_OSPFV3 = 588;
            Desc_OSPFV3X_PACKET = 589;
            Desc_OSPFV3_19E = 590;
            Desc_OTHERX_PROTOCOLX_S = 591;
            Desc_OUTBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 592;
            Desc_OUTPBT_ERR = 593;
            Desc_OUTPKTLEN_ERR = 594;
            Desc_P2MPBFD_SESSION_DOWN = 595;
            Desc_P2MPCHKERR = 596;
            Desc_PACKETX_WITHOUTX_NEXTX_HOPX_LEX_POINTER = 597;
            Desc_PAKCETX_TOX_CPUX_WHENX_MFIBV6X_TABLEX_MISMATCH = 598;
            Desc_PARITY_ERR = 599;
            Desc_PATHMTU_ERROR = 600;
            Desc_PBB_HVPLS_EQ_BRIDGE_MAC = 601;
            Desc_PBB_HVPLS_NEED_STUDY = 602;
            Desc_PBTCC = 603;
            Desc_PBTCC_ACLMISS = 604;
            Desc_PBT_SELECTDROP = 605;
            Desc_PDTX_CHANNELX_RECEIVESX_APS = 606;
            Desc_PERFTEST_DETECT_PKT = 607;
            Desc_PESX_HEARTX_BEAT = 608;
            Desc_PIB_EXT_NV = 609;
            Desc_PIB_NV = 610;
            Desc_PIMV6X_PACKET = 611;
            Desc_PIM_1 = 612;
            Desc_PIM_2 = 613;
            Desc_PIM_FROM_LSP = 614;
            Desc_PIM_FROM_VLAN = 615;
            Desc_PKTLENERR = 616;
            Desc_PKT_COVER_EPEFIFO = 617;
            Desc_PLENERR = 618;
            Desc_POLICYDIP_FIB_NM = 619;
            Desc_POLICY_FIBV6_NM = 620;
            Desc_POLICY_FIB_NM = 621;
            Desc_PORTALX_FORCE = 622;
            Desc_PORTAL_SYNX_PACKET = 623;
            Desc_PORT_ERR = 624;
            Desc_PORT_PRUNE_ERR = 625;
            Desc_POSPDUUK = 626;
            Desc_PPPIPX = 627;
            Desc_PPPX_CONFIGX_X_TOX_CPU = 628;
            Desc_PPPX_CONTROL = 629;
            Desc_PPPX_PADT = 630;
            Desc_PPP_ACERR = 631;
            Desc_PPP_LLDP = 632;
            Desc_PPP_MPLS_PASSBY = 633;
            Desc_PPP_PATHMTU_ERROR = 634;
            Desc_PRUNEINDEX_CHKERR = 635;
            Desc_PSF = 636;
            Desc_PSFX_BROADCAST = 637;
            Desc_PST_BROADCAST = 638;
            Desc_PWE3 = 639;
            Desc_PWGARP = 640;
            Desc_PWNGARP = 641;
            Desc_PW_DM_TO_CP = 642;
            Desc_PW_SL_TO_CP = 643;
            Desc_QINQ_PRUNE_CHKERR = 644;
            Desc_QOE_TOCOP_10 = 645;
            Desc_QOE_TOCOP_11 = 646;
            Desc_QOE_TOCOP_12 = 647;
            Desc_QOE_TOCOP_2 = 648;
            Desc_QOE_TOCOP_3 = 649;
            Desc_QOE_TOCOP_4 = 650;
            Desc_QOE_TOCOP_5 = 651;
            Desc_QOE_TOCOP_6 = 652;
            Desc_QOE_TOCOP_7 = 653;
            Desc_QOE_TOCOP_8 = 654;
            Desc_QOE_TOCOP_9 = 655;
            Desc_QOS_ACL_REDIRECT_TO_CP = 656;
            Desc_QOS_EFIT_DROP = 657;
            Desc_QOS_ID_BASE = 658;
            Desc_QOS_IFIT_DROP = 659;
            Desc_QOS_RE_DROP = 660;
            Desc_QPPB_DROP = 661;
            Desc_QUALIFY_ERR = 662;
            Desc_QVCTX_MISSX_DHCPX_X_ORX_DHCPX_DISCOVER = 663;
            Desc_QVCT_MISS_IPV4_PACKET = 664;
            Desc_QVCT_MISS_IPV6_DHCP_PACKET = 665;
            Desc_QVCT_MISS_IPV6_ND_PACKET = 666;
            Desc_QVCT_MISS_PPPOE_PACKET = 667;
            Desc_RADIUS = 668;
            Desc_RAPSX_SPECIALX_TOX_CP = 669;
            Desc_RAPS_EG_TO_CP = 670;
            Desc_RAPS_TO_CP = 671;
            Desc_RECYCLE_TYPE_ERR = 672;
            Desc_REDIRECTX_DEFAULT = 673;
            Desc_REDIRECTX_TOX_OTHERX_BOARDX_CPU = 674;
            Desc_REDIRECT_DHCP = 675;
            Desc_REDIRECT_ICMP = 676;
            Desc_REDIRECT_RIP1 = 677;
            Desc_REDIRECT_SNMP = 678;
            Desc_REPTR_CHKERR = 679;
            Desc_RESERVED = 680;
            Desc_RESERVEDX_MULTICASTX_PIM = 681;
            Desc_RESERVED_1 = 682;
            Desc_RESERVED_2 = 683;
            Desc_RESERVED_MC_IF_ROUTER = 684;
            Desc_RESERVED_MC_OSPF = 685;
            Desc_RESERVED_MC_OSPF_DR = 686;
            Desc_RESERVED_MC_RIP2 = 687;
            Desc_RES_UDP_TO_IP_MODULE = 688;
            Desc_RE_PRUNE = 689;
            Desc_RIPV6_1 = 690;
            Desc_RIPV6_2 = 691;
            Desc_RIP_1 = 692;
            Desc_RIP_2 = 693;
            Desc_RPR_CTRL = 694;
            Desc_RRPP = 695;
            Desc_RRPPCPU = 696;
            Desc_RRPPDROP = 697;
            Desc_RRPPINV = 698;
            Desc_RRPP_BLK = 699;
            Desc_RSVP_1 = 700;
            Desc_RSVP_2 = 701;
            Desc_SCHKERR = 702;
            Desc_SEARCHX_TRAFFICX_POLICYX_REX_TABLEX_TOX_DECIDEX_WHETHERX_SENDINGX_TOX_CPU = 703;
            Desc_SFTPX_CLIENT = 704;
            Desc_SFTPX_SERVER = 705;
            Desc_SIPDIPERR = 706;
            Desc_SIPERR = 707;
            Desc_SIPFLTRERR = 708;
            Desc_SLBLSERR = 709;
            Desc_SMACERR_1 = 710;
            Desc_SMACERR_2 = 711;
            Desc_SMACERR_DROP = 712;
            Desc_SNMP = 713;
            Desc_SNMPV6X_PACKET = 714;
            Desc_SOFTX_GRE = 715;
            Desc_SOURCE_CHECKERR = 716;
            Desc_SPECIALX_INBOUNDX_TRAFFICX_POLICYX_CONTENTX_SENDINGX_TOX_CPU = 717;
            Desc_SPECIALX_IPV4X_MULTICASTX_X_224X_0X_0X_0X_224X_0X_0X_255 = 718;
            Desc_SPECIALX_IPV6X_MULTICAST = 719;
            Desc_SPKERR = 720;
            Desc_SSHV6X_SERVERX_PACKET = 721;
            Desc_SSHX_CLIENT = 722;
            Desc_SSHX_SERVER = 723;
            Desc_SSM_PKT_TO_CP = 724;
            Desc_STATUS_ERR = 725;
            Desc_STP_OVER_VPLS_BPDU_1 = 726;
            Desc_STP_OVER_VPLS_BPDU_2 = 727;
            Desc_ST_BLK_1 = 728;
            Desc_ST_BLK_2 = 729;
            Desc_SYLM_TO_CP = 730;
            Desc_SYLR_TO_CP = 731;
            Desc_SYSLOG = 732;
            Desc_SYSTEMX_MESSAGE = 733;
            Desc_TAG_ERR_1 = 734;
            Desc_TAG_ERR_2 = 735;
            Desc_TARGETX_IPX_ISX_BROADCASTX_ADDRESS = 736;
            Desc_TBTP_INVALID = 737;
            Desc_TCPSYNX_PACKET = 738;
            Desc_TCPSYNX_SX_FORX_BGP = 739;
            Desc_TCPSYNX_SX_FORX_LDP = 740;
            Desc_TCPSYNX_SX_FORX_SSH = 741;
            Desc_TCPSYNX_SX_FORX_TELNET = 742;
            Desc_TCP_ABNORMAL = 743;
            Desc_TCP_UDPFLOOD = 744;
            Desc_TELEMETRY_PACK = 745;
            Desc_TELNETV6X_CLIENTX_PACKET = 746;
            Desc_TELNETV6X_SERVERX_PACKET = 747;
            Desc_TELNETX_CLIENT = 748;
            Desc_TELNETX_SERVER = 749;
            Desc_TFTPV6X_CLIENTX_PACKET = 750;
            Desc_TFTPX_SERVER = 751;
            Desc_TIMER_SYN = 752;
            Desc_TIMER_SYN_CLEAR_ISBC = 753;
            Desc_TIME_OUT_PIEP = 754;
            Desc_TO_MNG_PORT_FTPX_PACKET = 755;
            Desc_TO_MNG_PORT_OTHERX_PACKET = 756;
            Desc_TP_OAM_CCM = 757;
            Desc_TP_OAM_DMM = 758;
            Desc_TP_OAM_LMM = 759;
            Desc_TRACERT = 760;
            Desc_TRAFFIC_BEHAVIOR_LOG = 761;
            Desc_TRUNK_INVALID = 762;
            Desc_TWAMP = 763;
            Desc_TWAMPX_PACKET = 764;
            Desc_UDLD = 765;
            Desc_UKUC_CPU = 766;
            Desc_UKUC_DROP = 767;
            Desc_UMCMASKERR = 768;
            Desc_UMC_CPU = 769;
            Desc_UMC_DROP = 770;
            Desc_UNCLASSIFIEDX_X_TOX_CPU = 771;
            Desc_UNICASTX_SMACX_CONFIGX_TOX_BEX_LEARNEDX_BYX_CPU = 772;
            Desc_UNICASTX_VRRPX_PACKET = 773;
            Desc_UNKNOWN = 774;
            Desc_UNKNOWNMTU = 775;
            Desc_UNKNOWNX_MPLSX_OAM = 776;
            Desc_UNKNOWNX_PPPX_FRAMEX_TOX_CPU = 777;
            Desc_UNKNOWN_COP = 778;
            Desc_UPNHLFE_NV = 779;
            Desc_USERMACX_MISSX_ARPX_ORX_IPV4X_PACKET = 780;
            Desc_USERMACX_MISSX_IPARP = 781;
            Desc_USERX_DEFINEDX_FLOWX_1 = 782;
            Desc_USERX_DEFINEDX_FLOWX_10 = 783;
            Desc_USERX_DEFINEDX_FLOWX_11 = 784;
            Desc_USERX_DEFINEDX_FLOWX_12 = 785;
            Desc_USERX_DEFINEDX_FLOWX_13 = 786;
            Desc_USERX_DEFINEDX_FLOWX_14 = 787;
            Desc_USERX_DEFINEDX_FLOWX_15 = 788;
            Desc_USERX_DEFINEDX_FLOWX_16 = 789;
            Desc_USERX_DEFINEDX_FLOWX_17 = 790;
            Desc_USERX_DEFINEDX_FLOWX_18 = 791;
            Desc_USERX_DEFINEDX_FLOWX_19 = 792;
            Desc_USERX_DEFINEDX_FLOWX_2 = 793;
            Desc_USERX_DEFINEDX_FLOWX_20 = 794;
            Desc_USERX_DEFINEDX_FLOWX_21 = 795;
            Desc_USERX_DEFINEDX_FLOWX_22 = 796;
            Desc_USERX_DEFINEDX_FLOWX_23 = 797;
            Desc_USERX_DEFINEDX_FLOWX_24 = 798;
            Desc_USERX_DEFINEDX_FLOWX_25 = 799;
            Desc_USERX_DEFINEDX_FLOWX_26 = 800;
            Desc_USERX_DEFINEDX_FLOWX_27 = 801;
            Desc_USERX_DEFINEDX_FLOWX_28 = 802;
            Desc_USERX_DEFINEDX_FLOWX_29 = 803;
            Desc_USERX_DEFINEDX_FLOWX_3 = 804;
            Desc_USERX_DEFINEDX_FLOWX_30 = 805;
            Desc_USERX_DEFINEDX_FLOWX_31 = 806;
            Desc_USERX_DEFINEDX_FLOWX_32 = 807;
            Desc_USERX_DEFINEDX_FLOWX_33 = 808;
            Desc_USERX_DEFINEDX_FLOWX_34 = 809;
            Desc_USERX_DEFINEDX_FLOWX_35 = 810;
            Desc_USERX_DEFINEDX_FLOWX_36 = 811;
            Desc_USERX_DEFINEDX_FLOWX_37 = 812;
            Desc_USERX_DEFINEDX_FLOWX_38 = 813;
            Desc_USERX_DEFINEDX_FLOWX_39 = 814;
            Desc_USERX_DEFINEDX_FLOWX_4 = 815;
            Desc_USERX_DEFINEDX_FLOWX_40 = 816;
            Desc_USERX_DEFINEDX_FLOWX_41 = 817;
            Desc_USERX_DEFINEDX_FLOWX_42 = 818;
            Desc_USERX_DEFINEDX_FLOWX_43 = 819;
            Desc_USERX_DEFINEDX_FLOWX_44 = 820;
            Desc_USERX_DEFINEDX_FLOWX_45 = 821;
            Desc_USERX_DEFINEDX_FLOWX_46 = 822;
            Desc_USERX_DEFINEDX_FLOWX_47 = 823;
            Desc_USERX_DEFINEDX_FLOWX_48 = 824;
            Desc_USERX_DEFINEDX_FLOWX_49 = 825;
            Desc_USERX_DEFINEDX_FLOWX_5 = 826;
            Desc_USERX_DEFINEDX_FLOWX_50 = 827;
            Desc_USERX_DEFINEDX_FLOWX_51 = 828;
            Desc_USERX_DEFINEDX_FLOWX_52 = 829;
            Desc_USERX_DEFINEDX_FLOWX_53 = 830;
            Desc_USERX_DEFINEDX_FLOWX_54 = 831;
            Desc_USERX_DEFINEDX_FLOWX_55 = 832;
            Desc_USERX_DEFINEDX_FLOWX_56 = 833;
            Desc_USERX_DEFINEDX_FLOWX_57 = 834;
            Desc_USERX_DEFINEDX_FLOWX_58 = 835;
            Desc_USERX_DEFINEDX_FLOWX_59 = 836;
            Desc_USERX_DEFINEDX_FLOWX_6 = 837;
            Desc_USERX_DEFINEDX_FLOWX_60 = 838;
            Desc_USERX_DEFINEDX_FLOWX_61 = 839;
            Desc_USERX_DEFINEDX_FLOWX_62 = 840;
            Desc_USERX_DEFINEDX_FLOWX_63 = 841;
            Desc_USERX_DEFINEDX_FLOWX_64 = 842;
            Desc_USERX_DEFINEDX_FLOWX_7 = 843;
            Desc_USERX_DEFINEDX_FLOWX_8 = 844;
            Desc_USERX_DEFINEDX_FLOWX_9 = 845;
            Desc_USER_MAC_MISS_IP_ARP = 846;
            Desc_USMACX_MISSX_IPV6 = 847;
            Desc_USMAC_ARP_PACKET = 848;
            Desc_USMAC_IGMP_PACKET = 849;
            Desc_UUCMASKERR = 850;
            Desc_V6EINDX_MISS = 851;
            Desc_V6MLD_DONE = 852;
            Desc_V6MLD_QUERY = 853;
            Desc_V6MLD_V1REP = 854;
            Desc_V6MLD_V2REP = 855;
            Desc_V6ND_NA = 856;
            Desc_V6ND_NS = 857;
            Desc_V6ND_RA = 858;
            Desc_V6ND_REDIRECT = 859;
            Desc_V6ND_RS = 860;
            Desc_V6OUTV4_V6MC = 861;
            Desc_VALN_STACKING_CHK = 862;
            Desc_VC_HUB = 863;
            Desc_VGMP = 864;
            Desc_VIRTUAL_CAUSE_NEW_FRAGMENT = 865;
            Desc_VLAN_HOSTCAR_ATTACK = 866;
            Desc_VLLVM = 867;
            Desc_VLLVM_ARP = 868;
            Desc_VLLVM_HDLC = 869;
            Desc_VLLVM_PPP = 870;
            Desc_VRRP_1 = 871;
            Desc_VRRP_2 = 872;
            Desc_VRRP_MAC_ADD_MSG = 873;
            Desc_VSM_CGN = 874;
            Desc_VSM_HA = 875;
            Desc_VSM_IPSEC = 876;
            Desc_VSM_IPSEC_PLAIN = 877;
            Desc_VXLANPING = 878;
            Desc_WEB = 879;
            Desc_WEBX_AUTHX_SERVERX_PACKET = 880;
            Desc_WEB_USEER_RESTRAIN = 881;
            Desc_WHITELIST = 882;
            Desc_WHITELIST_OSPF_PACKET = 883;
            Desc_WHITELIST_RADIUS_PACKET = 884;
            Desc_WORKDIS = 885;
            Desc_WRAP = 886;
            Desc_X_1355 = 887;
            Desc_X_1356 = 888;
            Desc_X_1564_STOP = 889;
            Desc_X_1564_TOCP = 890;
            Desc_X_1AG = 891;
            Desc_X_1AG_UNK = 892;
            Desc_X_1AG_CC_LEVEL_ERR_UP = 893;
            Desc_X_1AG_CC_MEPID_ERR_DOWN = 894;
            Desc_X_1AG_CC_MEPID_ERR_UP_1 = 895;
            Desc_X_1AG_CC_MEPID_ERR_UP_2 = 896;
            Desc_X_1AG_VERIFY_ERR = 898;
            Desc_X_1DM_CW_TO_CP = 899;
            Desc_X_1DM_NO_CW_TO_CP = 900;
            Desc_X_2544_TIME_DELAY = 901;
            Desc_X_3AH = 902;
            Desc_X_3AHLCLLPBK = 903;
            Desc_X_3AHX_LOOPX_TESTX_SUCCESSX_MESSAGE = 904;
            Desc_X_3AH_PDU = 905;
            Desc_X_4OVER6_PRTCL_ERROR = 906;
            Desc_X_5822_FIDT_NV = 907;
            Desc_X_588CAUSE_114 = 908;
            Desc_X_588CAUSE_115 = 909;
            Desc_X_588CAUSE_121 = 910;
            Desc_X_588CAUSE_126 = 911;
            Desc_X_588CAUSE_128 = 912;
            Desc_X_588CAUSE_129 = 913;
            Desc_X_588CAUSE_131 = 914;
            Desc_X_588CAUSE_132 = 915;
            Desc_X_588CAUSE_133 = 916;
            Desc_X_588CAUSE_183 = 917;
            Desc_X_588CAUSE_191 = 918;
            Desc_X_588CAUSE_208 = 919;
            Desc_X_588CAUSE_253 = 920;
            Desc_X_588CAUSE_254 = 921;
            Desc_X_588CAUSE_255 = 922;
            Desc_X_802X_1AG = 923;
            Desc_Y1731_AIS_INWARD_EGRESS = 924;
            Desc_Y1731_AIS_OUTWARD_INGRESS = 925;
            Desc_Y1731_DM_AC_INANDOUT = 926;
            Desc_Y1731_ETH_BN = 927;
            Desc_Y1731_LCK = 928;
            Desc_Y1731_LMR_AC_INANDOUT = 929;
            Desc_Y1731_MLB_INWARD_EGRESS = 930;
            Desc_Y1731_MLB_OUTWARD_INGRESS = 931;
            Desc_ADMINX_LSX_PACKET = 932;
            Desc_ICMP6X_ECHOX_PACKET = 933;
            Desc_ICMP_ECHO = 934;
            Desc_IPV6X_SYNX_BGPX_PACKET = 935;
            Desc_IPV6X_SYNX_SSHX_PACKET = 936;
            Desc_IPV6X_SYNX_TELNETX_PACKET = 937;
            Desc_LPT = 938;
            Desc_MAP_ICMP = 939;
            Desc_MLDP_MBB_PKT = 940;
            Desc_SRHX_OTPX_TOCPX_PACKET = 941;
            Desc_IPTVX_INGRESSX_PACKET = 942;
         };
         Desc desc = 1;
         uint32 secMinPkt = 2;
         uint32 secPolicyCbs = 3;
         uint32 secPolicyCir = 4;
         uint32 secPolicyTypeID = 5;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_CS7 = 6;
            SecPriority_DEFAULT = 7;
            SecPriority_EF = 8;
            SecPriority_HIGH = 9;
            SecPriority_LOW = 10;
            SecPriority_MIDDLE = 11;
         };
         SecPriority secPriority = 6;
         string secSlotId = 7;
      }
      repeated SecCurrentCarNode secCurrentCarNode = 1;
   }
   SecCurrentCarNodes secCurrentCarNodes = 24;
   message SecDisArpChks {
      message SecDisArpChk {
         enum SecChkType {
            SecChkType_CHECKDESTIP = 0;
            SecChkType_CHECKVALID = 1;
         };
         SecChkType secChkType = 1;
         uint64 secDropedPkts = 2;
         uint64 secPassedPkts = 3;
         string secSlotId = 4;
         uint64 secTotalPkts = 5;
      }
      repeated SecDisArpChk secDisArpChk = 1;
   }
   SecDisArpChks secDisArpChks = 25;
   message SecDisDefaultCars {
      message SecDisDefaultCar {
         uint32 secCbs = 1;
         uint32 secCir = 2;
         uint32 secMinPkt = 3;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_CS7 = 6;
            SecPriority_DEFAULT = 7;
            SecPriority_EF = 8;
            SecPriority_HIGH = 9;
            SecPriority_LOW = 10;
            SecPriority_MIDDLE = 11;
         };
         SecPriority secPriority = 4;
         string secSlotId = 5;
         uint32 secSysId = 6;
         enum SecTypeId {
            SecTypeId_ABNORM = 0;
            SecTypeId_ACCESSIMAC_ERR = 1;
            SecTypeId_ACL = 2;
            SecTypeId_ACL_CAPTURE_PKT_3 = 3;
            SecTypeId_ACL_CAPTURE_PKT_4 = 4;
            SecTypeId_ACL_CAPTURE_PKT_5 = 5;
            SecTypeId_ACL_CAPTURE_PKT_6 = 6;
            SecTypeId_ACL_CAPTURE_PKT_7 = 7;
            SecTypeId_ACL_CAPTURE_PKT_8 = 8;
            SecTypeId_ACR_DELAY_REQ = 9;
            SecTypeId_ACT_DISPKT = 10;
            SecTypeId_AGG_AGINGPKT = 11;
            SecTypeId_AIBX_TABLEX_INVALIDX_MESSAGEX_TOX_CPUX_INX_MEX_ENCAPSULATION = 12;
            SecTypeId_AIB_FAKE = 13;
            SecTypeId_AIDCHKERR = 14;
            SecTypeId_AID_CFGERR = 15;
            SecTypeId_AID_NV_ME = 16;
            SecTypeId_AID_NV_ME_LE = 17;
            SecTypeId_AID_NV_ME_ME = 18;
            SecTypeId_AID_NV_TE_RLY = 19;
            SecTypeId_AID_NV_TE_TUL = 20;
            SecTypeId_ALL_HUB = 21;
            SecTypeId_ALL_SPOKE = 22;
            SecTypeId_APS = 23;
            SecTypeId_APSX_SWAPX_FRAME = 24;
            SecTypeId_APSX_X_TOX_CPU = 25;
            SecTypeId_APS_ACLMISS = 26;
            SecTypeId_APS_ALARM_MSG = 27;
            SecTypeId_APS_BC = 28;
            SecTypeId_APS_CC_UP_DOWN_BC_MSG = 29;
            SecTypeId_APS_INTERNAL_SW_MSG = 30;
            SecTypeId_APS_PORT_STATUS_BROADCAST = 31;
            SecTypeId_APS_RDI_RDI_R_BC_MSG = 32;
            SecTypeId_APS_UPDATE_IVSI_BC_MSG = 33;
            SecTypeId_APS_UPDATE_PBT_GROUP_BC_MSG = 34;
            SecTypeId_ARPCHKERR = 35;
            SecTypeId_ARPCHK_DIPERR = 36;
            SecTypeId_ARPV6X_MISSX_MESSAGEX_TOX_CPU = 37;
            SecTypeId_ARP_ACLMISS = 38;
            SecTypeId_ARP_ATTACK = 39;
            SecTypeId_ARP_DROP = 40;
            SecTypeId_ARP_REPLY_NO_INCOMPLETE = 41;
            SecTypeId_ARP_REQ_ANTIATTACK = 42;
            SecTypeId_ARP_SAFEGUARD_REPLY = 43;
            SecTypeId_ATMX_INARPX_PACKET = 44;
            SecTypeId_ATM_OAM = 45;
            SecTypeId_AUTORP = 46;
            SecTypeId_BASX_ARPX_REPLY = 47;
            SecTypeId_BASX_IPOEV6X_LINKLOCAL = 48;
            SecTypeId_BASX_IPOEX_ICMPV6X_MC = 49;
            SecTypeId_BASX_QVCTX_MISS = 50;
            SecTypeId_BASX_QVCTX_MISSX_ARPX_PACKET = 51;
            SecTypeId_BASX_REVX_MCX_PACKET = 52;
            SecTypeId_BAS_CONTROL_PPP = 53;
            SecTypeId_BAS_DHCP_DISCOVER = 54;
            SecTypeId_BAS_DIRECT_CP = 55;
            SecTypeId_BAS_IPV4_DHCPX_PACKET = 56;
            SecTypeId_BAS_IPV4_REDIRECT_TCP = 57;
            SecTypeId_BAS_IPV6_NAX_PACKET = 58;
            SecTypeId_BAS_IPV6_NA_REDIRECT_CPX_PACKET = 59;
            SecTypeId_BAS_IPV6_NSX_PACKET = 60;
            SecTypeId_BAS_IPV6_NS_REDIRECT_CPX_PACKET = 61;
            SecTypeId_BAS_IPV6_REDIRECT_CP = 62;
            SecTypeId_BAS_IPV6_RSX_PACKET = 63;
            SecTypeId_BAS_MUTE_CLIENTX_PACKET = 64;
            SecTypeId_BAS_PPP_ECHO_NOUSER = 65;
            SecTypeId_BAS_PPP_KEEP_LIVE = 66;
            SecTypeId_BAS_SSDPX_PACKET = 67;
            SecTypeId_BAS_VBAS = 68;
            SecTypeId_BAS_WEB = 69;
            SecTypeId_BCMASKERR = 70;
            SecTypeId_BET_INVALID = 71;
            SecTypeId_BE_ABNORMITY_SB = 72;
            SecTypeId_BE_DELETE = 73;
            SecTypeId_BE_DIFF_UPDATE = 74;
            SecTypeId_BE_SB = 75;
            SecTypeId_BE_STATIC = 76;
            SecTypeId_BE_SYN = 77;
            SecTypeId_BFD = 78;
            SecTypeId_BFDX_FAILINGX_MESSAGE = 79;
            SecTypeId_BFDX_RECEIVEX_X_FROMX_LOCAL = 80;
            SecTypeId_BFDX_SESSIONDOWNX_MESSAGE = 81;
            SecTypeId_BFDX_STATEX_CHANGINGX_MESSAGEX_FORWARDINGX_TOX_CP = 82;
            SecTypeId_BFDX_TOX_CPU_1 = 83;
            SecTypeId_BFDX_TOX_CPU_2 = 84;
            SecTypeId_BFDX_TOX_CPU_3 = 85;
            SecTypeId_BFDX_X_NOTX_UPX_MESSAGE = 86;
            SecTypeId_BFDX_X_TOX_CPUX_FROMX_OTHERX_BOARD = 87;
            SecTypeId_BFD_ACLMISS = 88;
            SecTypeId_BFD_BIT_ERROR_DETECT = 89;
            SecTypeId_BFD_FAULT_BC = 90;
            SecTypeId_BFD_REMOTE_YD0 = 91;
            SecTypeId_BGPV6X_PACKET = 92;
            SecTypeId_BGP_1 = 93;
            SecTypeId_BGP_2 = 94;
            SecTypeId_BH_LOOPDETECT_CPU = 95;
            SecTypeId_BIGHEART = 96;
            SecTypeId_BLACKLIST = 97;
            SecTypeId_BPDU = 98;
            SecTypeId_BPDU_E = 99;
            SecTypeId_BPDU_TNL = 100;
            SecTypeId_BRIDGEX_FDBX_LEARN = 101;
            SecTypeId_BRIDGEX_MACX_TOX_CPU = 102;
            SecTypeId_BRIDGE_CIB_MAC_LIMIT = 103;
            SecTypeId_BRIDGE_DISABLE = 104;
            SecTypeId_BRIDGE_EGRESS_FDB_LEARN = 105;
            SecTypeId_BRIDGE_INGRESS_FDB_LEARN = 106;
            SecTypeId_BRIDGE_PCT_MAC_LIMIT = 107;
            SecTypeId_BRIDGE_VSI_MAC_LIMIT = 108;
            SecTypeId_BROADCASTX_SENDINGX_MULTICASTX_X_CAUSEX_INX_FULLX_FRAME = 109;
            SecTypeId_CCM = 110;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_MESSAGE = 111;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_FIRSTX_WAKENX_TIMEOUTX_MESSAGE = 112;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_RDIX_MESSAGE = 113;
            SecTypeId_CCMX_X_TOX_CPUX_WITHX_UPX_DOWNX_MESSAGE = 114;
            SecTypeId_CCM_ACLMISS = 115;
            SecTypeId_CCM_Y1731_TO_CP = 116;
            SecTypeId_CCX_X_FREQUENCYX_X_SMACX_X_MAIDX_FIELDX_MISMATCHX_ERROR = 117;
            SecTypeId_CC_FREQ_RECOVER = 118;
            SecTypeId_CC_LEVELERR = 119;
            SecTypeId_CC_MAID_RECOVER = 120;
            SecTypeId_CC_SMAC_RECOVER = 121;
            SecTypeId_CDP = 122;
            SecTypeId_CFGERR_1 = 123;
            SecTypeId_CFGERR_2 = 124;
            SecTypeId_CHADDRERR = 125;
            SecTypeId_CHDLCX_KEEPLIVE = 126;
            SecTypeId_CHECKSUMERR = 127;
            SecTypeId_CHECKURPFERR = 128;
            SecTypeId_CIB_EXT_NV = 129;
            SecTypeId_CIB_NV = 130;
            SecTypeId_CIB_PV_EXT_NV = 131;
            SecTypeId_CIB_PV_NV = 132;
            SecTypeId_CPACLX_CARX_SOURCEX_TRACE = 133;
            SecTypeId_CRB1MISS = 134;
            SecTypeId_CRB2MISS = 135;
            SecTypeId_CRBITAGMISS = 136;
            SecTypeId_CRBQINQMISS = 137;
            SecTypeId_CROSSBOARD_MACDEL = 138;
            SecTypeId_CWCMD2 = 139;
            SecTypeId_CWCMD3 = 140;
            SecTypeId_DCN = 141;
            SecTypeId_DCNX_DATA = 142;
            SecTypeId_DCNX_REDIRECT = 143;
            SecTypeId_DCN_PKT_FIN = 144;
            SecTypeId_DCN_PKT_INIT = 145;
            SecTypeId_DEFAULTX_RESERVEDX_MULTICAST = 146;
            SecTypeId_DESCERR = 147;
            SecTypeId_DESCMERGEDERR = 148;
            SecTypeId_DESC_PASS_ERR = 149;
            SecTypeId_DHCPCHKERR = 150;
            SecTypeId_DHCPINV = 151;
            SecTypeId_DHCPREP = 152;
            SecTypeId_DHCPREQ = 153;
            SecTypeId_DHCPSTRONG = 154;
            SecTypeId_DHCPUNT = 155;
            SecTypeId_DHCP_1 = 156;
            SecTypeId_DHCP_2 = 157;
            SecTypeId_DHCP_PKT = 158;
            SecTypeId_DHCP_SMAC_ERR = 159;
            SecTypeId_DHCP_SP_ERR = 160;
            SecTypeId_DIAMETERX_PACKET = 161;
            SecTypeId_DIP224_DROP = 162;
            SecTypeId_DIP224_TCP = 163;
            SecTypeId_DIP224_UDP = 164;
            SecTypeId_DIPERR_1 = 165;
            SecTypeId_DIPERR_2 = 166;
            SecTypeId_DIPERR_DROP = 167;
            SecTypeId_DIS = 168;
            SecTypeId_DISIPV4MC = 169;
            SecTypeId_DISIPV4UC = 170;
            SecTypeId_DISIPV6MC = 171;
            SecTypeId_DISIPV6UC = 172;
            SecTypeId_DISRE = 173;
            SecTypeId_DLP_BGP = 174;
            SecTypeId_DLP_IPV6_OSPF = 175;
            SecTypeId_DLP_ISIS = 176;
            SecTypeId_DLP_LDP = 177;
            SecTypeId_DLP_LDP_UDP = 178;
            SecTypeId_DLP_RSVP = 179;
            SecTypeId_DMM_CW_TO_CP = 180;
            SecTypeId_DMM_NO_CW_TO_CP = 181;
            SecTypeId_DMR_CW_TO_CP = 182;
            SecTypeId_DMR_NO_CW_TO_CP = 183;
            SecTypeId_DNSUNT = 184;
            SecTypeId_DNSV6X_PACKET = 185;
            SecTypeId_DNSX_CLIENT = 186;
            SecTypeId_DROPPINGX_UNKNOWNX_MULTICAST = 187;
            SecTypeId_DROPPINGX_UNKNOWNX_UNICAST = 188;
            SecTypeId_DROP_CPUIRT = 189;
            SecTypeId_DROP_CPUT = 190;
            SecTypeId_DROP_ERED = 191;
            SecTypeId_DROP_EYELLOW = 192;
            SecTypeId_DROP_IRED = 193;
            SecTypeId_DROP_IYELLOW = 194;
            SecTypeId_EAPOLX_FRAME = 195;
            SecTypeId_ECC_ERR = 196;
            SecTypeId_ECIB_NV = 197;
            SecTypeId_ECID_NV = 198;
            SecTypeId_ECMP_PRUNE = 199;
            SecTypeId_EFIT_DROP = 200;
            SecTypeId_ELMI = 201;
            SecTypeId_EMCPAT_NV = 202;
            SecTypeId_EMPTYLOADIPERR = 203;
            SecTypeId_ENCAP_UK = 204;
            SecTypeId_EOPPAT_NV = 205;
            SecTypeId_EPEPAT_NV = 206;
            SecTypeId_ETHERNETX_BPDU = 207;
            SecTypeId_ETHERNETX_CONFIGX_X_TOX_CPU = 208;
            SecTypeId_ETHERX_TRUNKX_LACP = 209;
            SecTypeId_ETH_HGMP = 210;
            SecTypeId_ETH_IPX = 211;
            SecTypeId_ETH_PATHMTU_ERROR = 212;
            SecTypeId_ETH_UKTYPE = 213;
            SecTypeId_ETH_VRRP = 214;
            SecTypeId_FABRIC_HEART_1 = 215;
            SecTypeId_FABRIC_HEART_2 = 216;
            SecTypeId_FABRIC_HEART_PLUS_1 = 217;
            SecTypeId_FABRIC_HEART_PLUS_2 = 218;
            SecTypeId_FABRI_HEART_PLUS = 219;
            SecTypeId_FHFT = 220;
            SecTypeId_FIDTOUT_NV = 221;
            SecTypeId_FLUSH = 222;
            SecTypeId_FLUSHX_X_TOX_CPU = 223;
            SecTypeId_FRAGMENTX_PACKET = 224;
            SecTypeId_FRINARP = 225;
            SecTypeId_FRISIS = 226;
            SecTypeId_FRLMI = 227;
            SecTypeId_FRUK = 228;
            SecTypeId_FTPV6X_CLIENTX_PACKET = 229;
            SecTypeId_FTPV6X_SERVERX_PACKET = 230;
            SecTypeId_FTPX_CLIENT = 231;
            SecTypeId_FTPX_SERVER = 232;
            SecTypeId_GLB_TOKEN_CHKERR = 233;
            SecTypeId_GMACLBM = 234;
            SecTypeId_GMACLBR = 235;
            SecTypeId_GMACLTMDST = 236;
            SecTypeId_GMACLTMMID = 237;
            SecTypeId_GMACLTR = 238;
            SecTypeId_GMRPX_FRAMEX_ANDX_GVRPX_FRAME = 239;
            SecTypeId_GREINDEX_MISS = 240;
            SecTypeId_GRE_KEY_ERR = 241;
            SecTypeId_GRE_MF_TOCPU = 242;
            SecTypeId_GRE_ROUTING = 243;
            SecTypeId_GRE_UK = 244;
            SecTypeId_GSMP = 245;
            SecTypeId_GTSM_CHECKERR = 246;
            SecTypeId_GVRP_TOCP = 247;
            SecTypeId_HDLCCFG = 248;
            SecTypeId_HDLCIPX = 249;
            SecTypeId_HDLCUK = 250;
            SecTypeId_HDLC_ACERR = 251;
            SecTypeId_HEARTBEAT1 = 252;
            SecTypeId_HEARTBEAT10 = 253;
            SecTypeId_HEARTBEAT11 = 254;
            SecTypeId_HEARTBEAT2 = 255;
            SecTypeId_HEARTBEAT3 = 256;
            SecTypeId_HEARTBEAT4 = 257;
            SecTypeId_HEARTBEAT5 = 258;
            SecTypeId_HEARTBEAT6 = 259;
            SecTypeId_HEARTBEAT7 = 260;
            SecTypeId_HEARTBEAT8 = 261;
            SecTypeId_HEARTBEAT9 = 262;
            SecTypeId_HGMPX_V1X_FRAME = 263;
            SecTypeId_HOSTCAR_ATTAC = 264;
            SecTypeId_HTTPX_REDIRECTX_X_OFX_CHASTENX_USER = 265;
            SecTypeId_HTTP_HOSTCAR_ATTACK = 266;
            SecTypeId_HUBVLAN_ERR = 267;
            SecTypeId_HUB_ERR = 268;
            SecTypeId_HVRP = 269;
            SecTypeId_HWTACACS = 270;
            SecTypeId_IBE_ABNORMITY_SB = 271;
            SecTypeId_IBE_DELETE = 272;
            SecTypeId_IBE_DYNAMIC_DIFF_DROP = 273;
            SecTypeId_IBE_INVALID = 274;
            SecTypeId_IBE_SB = 275;
            SecTypeId_IBE_STATIC_DIFF_DROP = 276;
            SecTypeId_ICMP = 277;
            SecTypeId_ICMPV6X_PACKET = 278;
            SecTypeId_ICMPV6_REPLY = 279;
            SecTypeId_ICMPV6_REQUEST = 280;
            SecTypeId_ICMP_BROADCAST_ADDRESS_ECHO = 281;
            SecTypeId_ICMP_FRAG = 282;
            SecTypeId_ICMP_REPLY = 283;
            SecTypeId_ICMP_REQUEST = 284;
            SecTypeId_IEPPAT_NV_1 = 285;
            SecTypeId_IEPPAT_NV_2 = 286;
            SecTypeId_IFIT_CPU_SPECIAL = 287;
            SecTypeId_IFIT_DROP = 288;
            SecTypeId_IGMP_1 = 289;
            SecTypeId_IGMP_2 = 290;
            SecTypeId_IGMP_ACLMISS = 291;
            SecTypeId_IGMP_FAST_JOIN_1 = 292;
            SecTypeId_IGMP_FAST_JOIN_2 = 293;
            SecTypeId_IGMP_FROM_LSP = 294;
            SecTypeId_IGMP_FROM_VLAN = 295;
            SecTypeId_IGP_MAINTAIN_UNITX_PACKET = 296;
            SecTypeId_IHLERR = 297;
            SecTypeId_IKE_PROTOCOL = 298;
            SecTypeId_IMAC_ADD_MSG = 299;
            SecTypeId_IMAC_UPDATE_MSG = 300;
            SecTypeId_INBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 301;
            SecTypeId_INGRESS_BE_TOCPU = 302;
            SecTypeId_IPFPM = 303;
            SecTypeId_IPOPT_TCP = 304;
            SecTypeId_IPOPT_UDP = 305;
            SecTypeId_IPTV = 306;
            SecTypeId_IPV4ACL_STREAM_MISS = 307;
            SecTypeId_IPV4LENERR = 308;
            SecTypeId_IPV4MCTTLCHECK_ERR = 309;
            SecTypeId_IPV4PLENERR = 310;
            SecTypeId_IPV4X_ARP = 311;
            SecTypeId_IPV4X_ARPX_MISS = 312;
            SecTypeId_IPV4X_FIBX_MISS = 313;
            SecTypeId_IPV4X_ISISX_X_OVERX_GREX_TUNNEL = 314;
            SecTypeId_IPV4X_MULTICASTX_FIBX_MISS = 315;
            SecTypeId_IPV4X_MULTICASTX_REGISTRATION = 316;
            SecTypeId_IPV4X_MULTICASTX_RPFX_CHECKINGX_FAILS = 317;
            SecTypeId_IPV4X_OPTION = 318;
            SecTypeId_IPV4X_OSPFX_X_TOX_CPU = 319;
            SecTypeId_IPV4X_OVERX_IPV6X_ETUNNELX_X_TOX_CPUX_WITHX_TUNNELX_INDEXX_CHECKINGX_MISS = 320;
            SecTypeId_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_NONX_IPV4X_MESSAGEX_AFTERX_IPV6X_HEADX_EXTENSION = 321;
            SecTypeId_IPV4X_OVERX_IPV6X_EX_TUNNELX_X_TOX_CPUX_WITHX_UNSUPPORTEDX_IPV6X_HEADX_EXTENSION = 322;
            SecTypeId_IPV4X_OVERX_IPV6X_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTUX_BUTX_DFX_FLAGX_SETX_TOX_1X_INX_IPX_HEAD = 323;
            SecTypeId_IPV4X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 324;
            SecTypeId_IPV4X_TCPX_X_TOX_CPU = 325;
            SecTypeId_IPV4X_TTLX_EXPIRES = 326;
            SecTypeId_IPV4X_UDPX_PTPX_320 = 327;
            SecTypeId_IPV4X_UDPX_PTRX_320 = 328;
            SecTypeId_IPV4X_UDPX_X_TOX_CPU = 329;
            SecTypeId_IPV4X_X_OVERX_GREX_TUNNELX_DETECTSX_KEEPLIVEX_MESSAGE = 330;
            SecTypeId_IPV4X_X_OVERX_GREX_TUNNELX_ECHOSX_KEEPLIVEX_MESSAGE = 331;
            SecTypeId_IPV4X_X_TOX_CPUX_AFTERX_FIBX_CHECK = 332;
            SecTypeId_IPV4X_X_TOX_CPUX_EXCEEDINGX_MTUX_LIMIT = 333;
            SecTypeId_IPV4_AT_MISS = 334;
            SecTypeId_IPV4_BFD = 335;
            SecTypeId_IPV4_FIB_DROP_1 = 336;
            SecTypeId_IPV4_FIB_DROP_2 = 337;
            SecTypeId_IPV4_IGMP = 338;
            SecTypeId_IPV4_LDP = 339;
            SecTypeId_IPV4_MC_SOFTWARE_FWD = 340;
            SecTypeId_IPV4_MC_TO_CP = 341;
            SecTypeId_IPV4_RARP = 342;
            SecTypeId_IPV4_REMOTE_BFD = 343;
            SecTypeId_IPV4_RESV2_TO_CP = 344;
            SecTypeId_IPV4_RSVP_TO_CP = 345;
            SecTypeId_IPV4_TCP_BGP = 346;
            SecTypeId_IPV4_TCP_FTP = 347;
            SecTypeId_IPV4_TCP_TELNET = 348;
            SecTypeId_IPV4_UDP_PGP = 349;
            SecTypeId_IPV4_UNK_MC_1 = 350;
            SecTypeId_IPV4_UNK_MC_2 = 351;
            SecTypeId_IPV6DIPERR = 352;
            SecTypeId_IPV6LENERR_1 = 353;
            SecTypeId_IPV6LENERR_2 = 354;
            SecTypeId_IPV6MCTTLCHECK_ERR = 355;
            SecTypeId_IPV6PLENERR = 356;
            SecTypeId_IPV6SIPERR = 357;
            SecTypeId_IPV6X_CHECKINGX_NDHX_MISS = 358;
            SecTypeId_IPV6X_CHECKINGX_NDX_MISSX_MESSAGE = 359;
            SecTypeId_IPV6X_DHCP = 360;
            SecTypeId_IPV6X_EXITX_TUNNELX_FRAGMENTATION = 361;
            SecTypeId_IPV6X_EXITX_TUNNELX_HOP = 362;
            SecTypeId_IPV6X_EXITX_TUNNELX_REDIRECTX_SNMP = 363;
            SecTypeId_IPV6X_EXITX_TUNNELX_RESERVEDX_MULTICAST = 364;
            SecTypeId_IPV6X_EXITX_TUNNELX_X_TOX_CPU = 365;
            SecTypeId_IPV6X_FIBX_CHECKINGX_MISSES = 366;
            SecTypeId_IPV6X_MLD = 367;
            SecTypeId_IPV6X_MULTICASTX_FRAGMENTATION = 368;
            SecTypeId_IPV6X_MULTICASTX_REGISTRATION = 369;
            SecTypeId_IPV6X_MULTICASTX_RPFX_CHECKINGX_FAIL = 370;
            SecTypeId_IPV6X_MULTICASTX_TOX_CPUX_MISS = 371;
            SecTypeId_IPV6X_MULTICASTX_X_TOX_CPU = 372;
            SecTypeId_IPV6X_NA = 373;
            SecTypeId_IPV6X_NDHX_MACX_MISSX_TCAMX_MISSX_ = 374;
            SecTypeId_IPV6X_NDX_MACX_MISSX_TCAMX_MISSX_ = 375;
            SecTypeId_IPV6X_NDX_MISS = 376;
            SecTypeId_IPV6X_NDX_REDIRECTX_CONTROLX_PACKET = 377;
            SecTypeId_IPV6X_NEXTX_HOPX_X_TOX_CPU = 378;
            SecTypeId_IPV6X_NS = 379;
            SecTypeId_IPV6X_OVERX_GREX_INX_TUNNELX_X_TOX_CPUX_WITHX_LENGTHX_EXCEEDINGX_MTU = 380;
            SecTypeId_IPV6X_RA = 381;
            SecTypeId_IPV6X_REDIRECTEDX_X_TOX_CPU = 382;
            SecTypeId_IPV6X_REDIRECTX_ICMP = 383;
            SecTypeId_IPV6X_REDIRECTX_SNMP = 384;
            SecTypeId_IPV6X_REDIRECTX_TCP = 385;
            SecTypeId_IPV6X_REDIRECTX_X_TOX_CPU = 386;
            SecTypeId_IPV6X_REFUSEDX_SENDINGX_ROUTEX_TOX_CPU = 387;
            SecTypeId_IPV6X_REJECT = 388;
            SecTypeId_IPV6X_RESERVEDX_MULTICAST = 389;
            SecTypeId_IPV6X_RESERVEX_MULTICAST = 390;
            SecTypeId_IPV6X_RS = 391;
            SecTypeId_IPV6X_TTLX_EXPIRES = 392;
            SecTypeId_IPV6X_WHITELIST = 393;
            SecTypeId_IPV6X_X_TOOX_BIG = 394;
            SecTypeId_IPV6X_X_TOX_CPUX_AFTERX_LOCALX_FIBX_CHECK = 395;
            SecTypeId_IPV6_4OVER6 = 396;
            SecTypeId_IPV6_AH_OPTIONX_PACKET = 397;
            SecTypeId_IPV6_BFD_1 = 398;
            SecTypeId_IPV6_BFD_2 = 399;
            SecTypeId_IPV6_BFD_TOCOP_FROM5822 = 400;
            SecTypeId_IPV6_ESP_OPTIONX_PACKET = 401;
            SecTypeId_IPV6_FIB_DROP = 402;
            SecTypeId_IPV6_FWD_TABLE_VLAN = 403;
            SecTypeId_IPV6_GRE = 404;
            SecTypeId_IPV6_HOP_BY_HOP_OPTIONX_PACKET = 405;
            SecTypeId_IPV6_ID_BASE = 406;
            SecTypeId_IPV6_OTHER_OPTIONX_PACKET = 407;
            SecTypeId_IPV6_PIM = 408;
            SecTypeId_IPV6_REMOTE_BFD = 409;
            SecTypeId_IPV6_TCP_BGP = 410;
            SecTypeId_IPV6_UDP_L2TP = 411;
            SecTypeId_IPV6_UDP_NTP = 412;
            SecTypeId_IPV6_UNK_MC_1 = 413;
            SecTypeId_IPV6_UNK_MC_2 = 414;
            SecTypeId_IPV6_VRRP = 415;
            SecTypeId_IPXX_FRAMEX_TOX_CPU = 416;
            SecTypeId_IPX_X_TOX_CPU = 417;
            SecTypeId_ISIS = 418;
            SecTypeId_ITAGCC = 419;
            SecTypeId_ITAGCC_ACLMISS = 420;
            SecTypeId_JUMBO = 421;
            SecTypeId_L2BE_DROP = 422;
            SecTypeId_L2DIS_1 = 423;
            SecTypeId_L2DIS_2 = 424;
            SecTypeId_L2IBE_DROP = 425;
            SecTypeId_L2I_3AH_LOOPBACK = 426;
            SecTypeId_L2I_PAT_INV = 427;
            SecTypeId_L2L3DIS = 428;
            SecTypeId_L2MBE_CPU = 429;
            SecTypeId_L2_MC2CPU = 430;
            SecTypeId_L2MC_DROP = 431;
            SecTypeId_L2MC_MAIB_BROADCAST = 432;
            SecTypeId_L2MC_MISS = 433;
            SecTypeId_L2MFIBV6_MISS = 434;
            SecTypeId_L2TPX_IGMP = 435;
            SecTypeId_L2TPX_LAC = 436;
            SecTypeId_L2TPX_LNSX_CONTROL = 437;
            SecTypeId_L2TPX_LNSX_CTRLX_SCCRQ = 438;
            SecTypeId_L2TPX_LNSX_CTRLX_SCCRQX_DETECTX_PACKET = 439;
            SecTypeId_L2TPX_LNSX_HELLOX_ORX_ZLB = 440;
            SecTypeId_L2TPX_LNSX_PPP = 441;
            SecTypeId_L2TPX_LNSX_PPPX_ECHO = 442;
            SecTypeId_L2_1588_OR_ANN_CHANGE = 443;
            SecTypeId_L2_3AH_TEST_1 = 444;
            SecTypeId_L2_3AH_TEST_2 = 445;
            SecTypeId_L2_ASSP = 446;
            SecTypeId_L2_EAPOL = 447;
            SecTypeId_L2_EAPOL_START = 448;
            SecTypeId_L2_IPV4 = 449;
            SecTypeId_L2_IPV6 = 450;
            SecTypeId_L2_MPLSUC = 452;
            SecTypeId_L2_PPPOE_PADI = 453;
            SecTypeId_L2_PPPOE_PADR = 454;
            SecTypeId_L2_PPPOE_SESSION = 455;
            SecTypeId_L2_SLOWPROTOCOL = 456;
            SecTypeId_L3DIS_1 = 457;
            SecTypeId_L3DIS_2 = 458;
            SecTypeId_LABEL1 = 459;
            SecTypeId_LABELERR = 460;
            SecTypeId_LACPX_FLUSHX_FRAME = 461;
            SecTypeId_LBK_ERR = 462;
            SecTypeId_LBMDST = 463;
            SecTypeId_LBRDST = 464;
            SecTypeId_LB_TRANS_TIMESTAMP = 465;
            SecTypeId_LCLLPDROP = 466;
            SecTypeId_LCLONLY = 467;
            SecTypeId_LCL_TOKEN_CHKERR = 468;
            SecTypeId_LDP_1 = 469;
            SecTypeId_LDP_2 = 470;
            SecTypeId_LDP_HELLO = 471;
            SecTypeId_LDP_UDP = 472;
            SecTypeId_LENERR_1 = 473;
            SecTypeId_LENERR_2 = 474;
            SecTypeId_LIMIT_AFUL_DROP = 475;
            SecTypeId_LINK_DETECT = 476;
            SecTypeId_LLDP = 477;
            SecTypeId_LMM_CW_TO_CP = 478;
            SecTypeId_LMM_NO_CW_TO_CP = 479;
            SecTypeId_LMR_CW_TO_CP = 480;
            SecTypeId_LMR_NO_CW_TO_CP = 481;
            SecTypeId_LNT_ALM = 482;
            SecTypeId_LNT_PKT = 483;
            SecTypeId_LOOPBACK_TEST_PKT = 484;
            SecTypeId_LOOPDETECT = 485;
            SecTypeId_LOOP_HEARTBEAT_TO_CP = 486;
            SecTypeId_LRNONLY_1 = 487;
            SecTypeId_LRNONLY_2 = 488;
            SecTypeId_LRNSYS_ERR = 489;
            SecTypeId_LSFX_BROADCAST = 490;
            SecTypeId_LSPX_PING = 491;
            SecTypeId_LTMDST = 492;
            SecTypeId_LTMMID = 493;
            SecTypeId_LTRDST = 494;
            SecTypeId_MACBYPASS_TRIGGER = 495;
            SecTypeId_MAC_ACCOUNT_MISS = 496;
            SecTypeId_MAC_ADD_MSG = 497;
            SecTypeId_MAC_DELETE_FLAPPING = 498;
            SecTypeId_MAC_SB_FLAPPING = 499;
            SecTypeId_MAC_UPDATE_FLAPPING = 500;
            SecTypeId_MAC_UPDATE_MSG = 501;
            SecTypeId_MARKER = 502;
            SecTypeId_MAXLEN_ERR = 503;
            SecTypeId_MC_MFIB_DUMMY_DROP = 504;
            SecTypeId_MC_MFIB_SG_DROP = 505;
            SecTypeId_MC_MIB_GRE = 506;
            SecTypeId_MC_SEL_DROP = 507;
            SecTypeId_MDLVL = 508;
            SecTypeId_MEAP_PKT = 509;
            SecTypeId_ME_GTOKEN_PRUNE = 510;
            SecTypeId_ME_LTOKEN_PRUNE = 511;
            SecTypeId_MIBT_NV = 512;
            SecTypeId_MINLEN_ERR = 513;
            SecTypeId_MIRRORX_TOX_CPU = 514;
            SecTypeId_MIRROR_TO_CP_EGRESS = 515;
            SecTypeId_MIRROR_TO_CP_INGRESS = 516;
            SecTypeId_MISMATCHX_RECOVER = 517;
            SecTypeId_MISMATCH_SMAC_PKT_1 = 518;
            SecTypeId_MISMATCH_SMAC_PKT_2 = 519;
            SecTypeId_MKA = 520;
            SecTypeId_MOAM = 521;
            SecTypeId_MPLSDIS_1 = 522;
            SecTypeId_MPLSDIS_2 = 523;
            SecTypeId_MPLSOAM_BROADCAST = 524;
            SecTypeId_MPLSX_ARPX_MISS = 525;
            SecTypeId_MPLSX_ARPX_MISSX_MESSAGEX_TOX_CPU = 526;
            SecTypeId_MPLSX_LABELX_FAIL = 527;
            SecTypeId_MPLSX_MULTICAST = 528;
            SecTypeId_MPLSX_OAMX_FAULTX_BROADCAST = 529;
            SecTypeId_MPLSX_PROTOCOLX_S = 530;
            SecTypeId_MPLSX_TTLX_EXPIRES = 531;
            SecTypeId_MPLSX_X_EXCEEDINGX_MTU = 532;
            SecTypeId_MPLSX_X_FORWARDINGX_TOX_CP = 533;
            SecTypeId_MPLSX_X_TOKENX_FAIL = 534;
            SecTypeId_MPLSX_X_TOX_CPUX_AFTERX_3X_MPLSX_LABELX_POP = 535;
            SecTypeId_MPLSX_X_TOX_CPUX_AFTERX_POP = 536;
            SecTypeId_MPLSX_X_WITHX_ROUTERX_ALERT = 537;
            SecTypeId_MPLS_LABEL_CHECK_FAIL = 538;
            SecTypeId_MPLS_PATHMTU_ERROR = 539;
            SecTypeId_MSDP = 540;
            SecTypeId_MTC_MFIB_SG_DROP = 541;
            SecTypeId_MTC_MFIB_SSM_CAUSE = 542;
            SecTypeId_MTUERR_VVBM = 543;
            SecTypeId_MULTICASTX_DUMMYX_TABLEX_DECIDINGX_TOX_CPU = 544;
            SecTypeId_MULTICASTX_LEAFX_TABLEX_DECIDINGX_TOX_CPU = 545;
            SecTypeId_NETSECCHN_SOCKETX_PACKET = 546;
            SecTypeId_NETSTREAMX_S = 547;
            SecTypeId_NEW_BFD = 548;
            SecTypeId_NEW_DLP_OPENFLOW = 549;
            SecTypeId_NEW_ETRUNK = 550;
            SecTypeId_NEW_TCPSYN_FTPSERVER = 551;
            SecTypeId_NEW_TCPSYN_MSDP = 552;
            SecTypeId_NHLFE_NV = 553;
            SecTypeId_NHPPTR_CHKERR = 554;
            SecTypeId_NHRP_MISS_PACKET = 555;
            SecTypeId_NHRP_NO_REGISTER_REQUEST_PACKET = 556;
            SecTypeId_NHRP_REDIRECT_PACKET = 557;
            SecTypeId_NHRP_REGISTER_REQUEST_PACKET = 558;
            SecTypeId_NOE_CHGVID_PRUNE = 559;
            SecTypeId_NOE_PRUNE = 560;
            SecTypeId_NOE_QUALIFY = 561;
            SecTypeId_NOIPV4 = 562;
            SecTypeId_NOIPV6 = 563;
            SecTypeId_NONEX_ARPX_BROADCASTX_X_TOX_CPU = 564;
            SecTypeId_NONEX_GREX_X_EXITSX_GREX_TUNNEL = 565;
            SecTypeId_NQA_CROSS_BOARD_TO_CP = 566;
            SecTypeId_NQA_ICMP_JITTER = 567;
            SecTypeId_NQA_RCV = 568;
            SecTypeId_NQA_RCV_CROSS = 569;
            SecTypeId_NQA_SEND_OVER_TO_CP = 570;
            SecTypeId_NQA_TRANS_TIMESTAMP = 571;
            SecTypeId_NQA_UDP_JITTER = 572;
            SecTypeId_NSID_CFGERR = 573;
            SecTypeId_NS_TOCOP = 574;
            SecTypeId_NTP_1 = 575;
            SecTypeId_NTP_2 = 576;
            SecTypeId_OAMX_1AGX_TEST = 577;
            SecTypeId_OAMX_3AHX_TEST = 578;
            SecTypeId_OAMX_BDIX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 579;
            SecTypeId_OAMX_CVFFDX_STATEX_CHANGEX_MESSAGEX_TOX_CPU = 580;
            SecTypeId_OAM_TOCOP = 581;
            SecTypeId_OLDERR = 582;
            SecTypeId_ONLINEX_USERX_DHCPV4X_REQUEST = 583;
            SecTypeId_ONLINEX_USERX_DHCPV6X_REQUEST = 584;
            SecTypeId_ONLINEX_USERX_DHCPV6X_SOLICIT = 585;
            SecTypeId_OPENFLOWX_PACKET = 586;
            SecTypeId_OSPF = 587;
            SecTypeId_OSPFV3 = 588;
            SecTypeId_OSPFV3X_PACKET = 589;
            SecTypeId_OSPFV3_19E = 590;
            SecTypeId_OTHERX_PROTOCOLX_S = 591;
            SecTypeId_OUTBOUNDX_TRAFFICX_POLICYX_TABLEX_CONTENTX_SENDINGX_TOX_CPU = 592;
            SecTypeId_OUTPBT_ERR = 593;
            SecTypeId_OUTPKTLEN_ERR = 594;
            SecTypeId_P2MPBFD_SESSION_DOWN = 595;
            SecTypeId_P2MPCHKERR = 596;
            SecTypeId_PACKETX_WITHOUTX_NEXTX_HOPX_LEX_POINTER = 597;
            SecTypeId_PAKCETX_TOX_CPUX_WHENX_MFIBV6X_TABLEX_MISMATCH = 598;
            SecTypeId_PARITY_ERR = 599;
            SecTypeId_PATHMTU_ERROR = 600;
            SecTypeId_PBB_HVPLS_EQ_BRIDGE_MAC = 601;
            SecTypeId_PBB_HVPLS_NEED_STUDY = 602;
            SecTypeId_PBTCC = 603;
            SecTypeId_PBTCC_ACLMISS = 604;
            SecTypeId_PBT_SELECTDROP = 605;
            SecTypeId_PDTX_CHANNELX_RECEIVESX_APS = 606;
            SecTypeId_PERFTEST_DETECT_PKT = 607;
            SecTypeId_PESX_HEARTX_BEAT = 608;
            SecTypeId_PIB_EXT_NV = 609;
            SecTypeId_PIB_NV = 610;
            SecTypeId_PIMV6X_PACKET = 611;
            SecTypeId_PIM_1 = 612;
            SecTypeId_PIM_2 = 613;
            SecTypeId_PIM_FROM_LSP = 614;
            SecTypeId_PIM_FROM_VLAN = 615;
            SecTypeId_PKTLENERR = 616;
            SecTypeId_PKT_COVER_EPEFIFO = 617;
            SecTypeId_PLENERR = 618;
            SecTypeId_POLICYDIP_FIB_NM = 619;
            SecTypeId_POLICY_FIBV6_NM = 620;
            SecTypeId_POLICY_FIB_NM = 621;
            SecTypeId_PORTALX_FORCE = 622;
            SecTypeId_PORTAL_SYNX_PACKET = 623;
            SecTypeId_PORT_ERR = 624;
            SecTypeId_PORT_PRUNE_ERR = 625;
            SecTypeId_POSPDUUK = 626;
            SecTypeId_PPPIPX = 627;
            SecTypeId_PPPX_CONFIGX_X_TOX_CPU = 628;
            SecTypeId_PPPX_CONTROL = 629;
            SecTypeId_PPPX_PADT = 630;
            SecTypeId_PPP_ACERR = 631;
            SecTypeId_PPP_LLDP = 632;
            SecTypeId_PPP_MPLS_PASSBY = 633;
            SecTypeId_PPP_PATHMTU_ERROR = 634;
            SecTypeId_PRUNEINDEX_CHKERR = 635;
            SecTypeId_PSF = 636;
            SecTypeId_PSFX_BROADCAST = 637;
            SecTypeId_PST_BROADCAST = 638;
            SecTypeId_PWE3 = 639;
            SecTypeId_PWGARP = 640;
            SecTypeId_PWNGARP = 641;
            SecTypeId_PW_DM_TO_CP = 642;
            SecTypeId_PW_SL_TO_CP = 643;
            SecTypeId_QINQ_PRUNE_CHKERR = 644;
            SecTypeId_QOE_TOCOP_10 = 645;
            SecTypeId_QOE_TOCOP_11 = 646;
            SecTypeId_QOE_TOCOP_12 = 647;
            SecTypeId_QOE_TOCOP_2 = 648;
            SecTypeId_QOE_TOCOP_3 = 649;
            SecTypeId_QOE_TOCOP_4 = 650;
            SecTypeId_QOE_TOCOP_5 = 651;
            SecTypeId_QOE_TOCOP_6 = 652;
            SecTypeId_QOE_TOCOP_7 = 653;
            SecTypeId_QOE_TOCOP_8 = 654;
            SecTypeId_QOE_TOCOP_9 = 655;
            SecTypeId_QOS_ACL_REDIRECT_TO_CP = 656;
            SecTypeId_QOS_EFIT_DROP = 657;
            SecTypeId_QOS_ID_BASE = 658;
            SecTypeId_QOS_IFIT_DROP = 659;
            SecTypeId_QOS_RE_DROP = 660;
            SecTypeId_QPPB_DROP = 661;
            SecTypeId_QUALIFY_ERR = 662;
            SecTypeId_QVCTX_MISSX_DHCPX_X_ORX_DHCPX_DISCOVER = 663;
            SecTypeId_QVCT_MISS_IPV4_PACKET = 664;
            SecTypeId_QVCT_MISS_IPV6_DHCP_PACKET = 665;
            SecTypeId_QVCT_MISS_IPV6_ND_PACKET = 666;
            SecTypeId_QVCT_MISS_PPPOE_PACKET = 667;
            SecTypeId_RADIUS = 668;
            SecTypeId_RAPSX_SPECIALX_TOX_CP = 669;
            SecTypeId_RAPS_EG_TO_CP = 670;
            SecTypeId_RAPS_TO_CP = 671;
            SecTypeId_RECYCLE_TYPE_ERR = 672;
            SecTypeId_REDIRECTX_DEFAULT = 673;
            SecTypeId_REDIRECTX_TOX_OTHERX_BOARDX_CPU = 674;
            SecTypeId_REDIRECT_DHCP = 675;
            SecTypeId_REDIRECT_ICMP = 676;
            SecTypeId_REDIRECT_RIP1 = 677;
            SecTypeId_REDIRECT_SNMP = 678;
            SecTypeId_REPTR_CHKERR = 679;
            SecTypeId_RESERVED = 680;
            SecTypeId_RESERVEDX_MULTICASTX_PIM = 681;
            SecTypeId_RESERVED_1 = 682;
            SecTypeId_RESERVED_2 = 683;
            SecTypeId_RESERVED_MC_IF_ROUTER = 684;
            SecTypeId_RESERVED_MC_OSPF = 685;
            SecTypeId_RESERVED_MC_OSPF_DR = 686;
            SecTypeId_RESERVED_MC_RIP2 = 687;
            SecTypeId_RES_UDP_TO_IP_MODULE = 688;
            SecTypeId_RE_PRUNE = 689;
            SecTypeId_RIPV6_1 = 690;
            SecTypeId_RIPV6_2 = 691;
            SecTypeId_RIP_1 = 692;
            SecTypeId_RIP_2 = 693;
            SecTypeId_RPR_CTRL = 694;
            SecTypeId_RRPP = 695;
            SecTypeId_RRPPCPU = 696;
            SecTypeId_RRPPDROP = 697;
            SecTypeId_RRPPINV = 698;
            SecTypeId_RRPP_BLK = 699;
            SecTypeId_RSVP_1 = 700;
            SecTypeId_RSVP_2 = 701;
            SecTypeId_SCHKERR = 702;
            SecTypeId_SEARCHX_TRAFFICX_POLICYX_REX_TABLEX_TOX_DECIDEX_WHETHERX_SENDINGX_TOX_CPU = 703;
            SecTypeId_SFTPX_CLIENT = 704;
            SecTypeId_SFTPX_SERVER = 705;
            SecTypeId_SIPDIPERR = 706;
            SecTypeId_SIPERR = 707;
            SecTypeId_SIPFLTRERR = 708;
            SecTypeId_SLBLSERR = 709;
            SecTypeId_SMACERR_1 = 710;
            SecTypeId_SMACERR_2 = 711;
            SecTypeId_SMACERR_DROP = 712;
            SecTypeId_SNMP = 713;
            SecTypeId_SNMPV6X_PACKET = 714;
            SecTypeId_SOFTX_GRE = 715;
            SecTypeId_SOURCE_CHECKERR = 716;
            SecTypeId_SPECIALX_INBOUNDX_TRAFFICX_POLICYX_CONTENTX_SENDINGX_TOX_CPU = 717;
            SecTypeId_SPECIALX_IPV4X_MULTICASTX_X_224X_0X_0X_0X_224X_0X_0X_255 = 718;
            SecTypeId_SPECIALX_IPV6X_MULTICAST = 719;
            SecTypeId_SPKERR = 720;
            SecTypeId_SSHV6X_SERVERX_PACKET = 721;
            SecTypeId_SSHX_CLIENT = 722;
            SecTypeId_SSHX_SERVER = 723;
            SecTypeId_SSM_PKT_TO_CP = 724;
            SecTypeId_STATUS_ERR = 725;
            SecTypeId_STP_OVER_VPLS_BPDU_1 = 726;
            SecTypeId_STP_OVER_VPLS_BPDU_2 = 727;
            SecTypeId_ST_BLK_1 = 728;
            SecTypeId_ST_BLK_2 = 729;
            SecTypeId_SYLM_TO_CP = 730;
            SecTypeId_SYLR_TO_CP = 731;
            SecTypeId_SYSLOG = 732;
            SecTypeId_SYSTEMX_MESSAGE = 733;
            SecTypeId_TAG_ERR_1 = 734;
            SecTypeId_TAG_ERR_2 = 735;
            SecTypeId_TARGETX_IPX_ISX_BROADCASTX_ADDRESS = 736;
            SecTypeId_TBTP_INVALID = 737;
            SecTypeId_TCPSYNX_PACKET = 738;
            SecTypeId_TCPSYNX_SX_FORX_BGP = 739;
            SecTypeId_TCPSYNX_SX_FORX_LDP = 740;
            SecTypeId_TCPSYNX_SX_FORX_SSH = 741;
            SecTypeId_TCPSYNX_SX_FORX_TELNET = 742;
            SecTypeId_TCP_ABNORMAL = 743;
            SecTypeId_TCP_UDPFLOOD = 744;
            SecTypeId_TELEMETRY_PACK = 745;
            SecTypeId_TELNETV6X_CLIENTX_PACKET = 746;
            SecTypeId_TELNETV6X_SERVERX_PACKET = 747;
            SecTypeId_TELNETX_CLIENT = 748;
            SecTypeId_TELNETX_SERVER = 749;
            SecTypeId_TFTPV6X_CLIENTX_PACKET = 750;
            SecTypeId_TFTPX_SERVER = 751;
            SecTypeId_TIMER_SYN = 752;
            SecTypeId_TIMER_SYN_CLEAR_ISBC = 753;
            SecTypeId_TIME_OUT_PIEP = 754;
            SecTypeId_TO_MNG_PORT_FTPX_PACKET = 755;
            SecTypeId_TO_MNG_PORT_OTHERX_PACKET = 756;
            SecTypeId_TP_OAM_CCM = 757;
            SecTypeId_TP_OAM_DMM = 758;
            SecTypeId_TP_OAM_LMM = 759;
            SecTypeId_TRACERT = 760;
            SecTypeId_TRAFFIC_BEHAVIOR_LOG = 761;
            SecTypeId_TRUNK_INVALID = 762;
            SecTypeId_TWAMP = 763;
            SecTypeId_TWAMPX_PACKET = 764;
            SecTypeId_UDLD = 765;
            SecTypeId_UKUC_CPU = 766;
            SecTypeId_UKUC_DROP = 767;
            SecTypeId_UMCMASKERR = 768;
            SecTypeId_UMC_CPU = 769;
            SecTypeId_UMC_DROP = 770;
            SecTypeId_UNCLASSIFIEDX_X_TOX_CPU = 771;
            SecTypeId_UNICASTX_SMACX_CONFIGX_TOX_BEX_LEARNEDX_BYX_CPU = 772;
            SecTypeId_UNICASTX_VRRPX_PACKET = 773;
            SecTypeId_UNKNOWN = 774;
            SecTypeId_UNKNOWNMTU = 775;
            SecTypeId_UNKNOWNX_MPLSX_OAM = 776;
            SecTypeId_UNKNOWNX_PPPX_FRAMEX_TOX_CPU = 777;
            SecTypeId_UNKNOWN_COP = 778;
            SecTypeId_UPNHLFE_NV = 779;
            SecTypeId_USERMACX_MISSX_ARPX_ORX_IPV4X_PACKET = 780;
            SecTypeId_USERMACX_MISSX_IPARP = 781;
            SecTypeId_USERX_DEFINEDX_FLOWX_1 = 782;
            SecTypeId_USERX_DEFINEDX_FLOWX_10 = 783;
            SecTypeId_USERX_DEFINEDX_FLOWX_11 = 784;
            SecTypeId_USERX_DEFINEDX_FLOWX_12 = 785;
            SecTypeId_USERX_DEFINEDX_FLOWX_13 = 786;
            SecTypeId_USERX_DEFINEDX_FLOWX_14 = 787;
            SecTypeId_USERX_DEFINEDX_FLOWX_15 = 788;
            SecTypeId_USERX_DEFINEDX_FLOWX_16 = 789;
            SecTypeId_USERX_DEFINEDX_FLOWX_17 = 790;
            SecTypeId_USERX_DEFINEDX_FLOWX_18 = 791;
            SecTypeId_USERX_DEFINEDX_FLOWX_19 = 792;
            SecTypeId_USERX_DEFINEDX_FLOWX_2 = 793;
            SecTypeId_USERX_DEFINEDX_FLOWX_20 = 794;
            SecTypeId_USERX_DEFINEDX_FLOWX_21 = 795;
            SecTypeId_USERX_DEFINEDX_FLOWX_22 = 796;
            SecTypeId_USERX_DEFINEDX_FLOWX_23 = 797;
            SecTypeId_USERX_DEFINEDX_FLOWX_24 = 798;
            SecTypeId_USERX_DEFINEDX_FLOWX_25 = 799;
            SecTypeId_USERX_DEFINEDX_FLOWX_26 = 800;
            SecTypeId_USERX_DEFINEDX_FLOWX_27 = 801;
            SecTypeId_USERX_DEFINEDX_FLOWX_28 = 802;
            SecTypeId_USERX_DEFINEDX_FLOWX_29 = 803;
            SecTypeId_USERX_DEFINEDX_FLOWX_3 = 804;
            SecTypeId_USERX_DEFINEDX_FLOWX_30 = 805;
            SecTypeId_USERX_DEFINEDX_FLOWX_31 = 806;
            SecTypeId_USERX_DEFINEDX_FLOWX_32 = 807;
            SecTypeId_USERX_DEFINEDX_FLOWX_33 = 808;
            SecTypeId_USERX_DEFINEDX_FLOWX_34 = 809;
            SecTypeId_USERX_DEFINEDX_FLOWX_35 = 810;
            SecTypeId_USERX_DEFINEDX_FLOWX_36 = 811;
            SecTypeId_USERX_DEFINEDX_FLOWX_37 = 812;
            SecTypeId_USERX_DEFINEDX_FLOWX_38 = 813;
            SecTypeId_USERX_DEFINEDX_FLOWX_39 = 814;
            SecTypeId_USERX_DEFINEDX_FLOWX_4 = 815;
            SecTypeId_USERX_DEFINEDX_FLOWX_40 = 816;
            SecTypeId_USERX_DEFINEDX_FLOWX_41 = 817;
            SecTypeId_USERX_DEFINEDX_FLOWX_42 = 818;
            SecTypeId_USERX_DEFINEDX_FLOWX_43 = 819;
            SecTypeId_USERX_DEFINEDX_FLOWX_44 = 820;
            SecTypeId_USERX_DEFINEDX_FLOWX_45 = 821;
            SecTypeId_USERX_DEFINEDX_FLOWX_46 = 822;
            SecTypeId_USERX_DEFINEDX_FLOWX_47 = 823;
            SecTypeId_USERX_DEFINEDX_FLOWX_48 = 824;
            SecTypeId_USERX_DEFINEDX_FLOWX_49 = 825;
            SecTypeId_USERX_DEFINEDX_FLOWX_5 = 826;
            SecTypeId_USERX_DEFINEDX_FLOWX_50 = 827;
            SecTypeId_USERX_DEFINEDX_FLOWX_51 = 828;
            SecTypeId_USERX_DEFINEDX_FLOWX_52 = 829;
            SecTypeId_USERX_DEFINEDX_FLOWX_53 = 830;
            SecTypeId_USERX_DEFINEDX_FLOWX_54 = 831;
            SecTypeId_USERX_DEFINEDX_FLOWX_55 = 832;
            SecTypeId_USERX_DEFINEDX_FLOWX_56 = 833;
            SecTypeId_USERX_DEFINEDX_FLOWX_57 = 834;
            SecTypeId_USERX_DEFINEDX_FLOWX_58 = 835;
            SecTypeId_USERX_DEFINEDX_FLOWX_59 = 836;
            SecTypeId_USERX_DEFINEDX_FLOWX_6 = 837;
            SecTypeId_USERX_DEFINEDX_FLOWX_60 = 838;
            SecTypeId_USERX_DEFINEDX_FLOWX_61 = 839;
            SecTypeId_USERX_DEFINEDX_FLOWX_62 = 840;
            SecTypeId_USERX_DEFINEDX_FLOWX_63 = 841;
            SecTypeId_USERX_DEFINEDX_FLOWX_64 = 842;
            SecTypeId_USERX_DEFINEDX_FLOWX_7 = 843;
            SecTypeId_USERX_DEFINEDX_FLOWX_8 = 844;
            SecTypeId_USERX_DEFINEDX_FLOWX_9 = 845;
            SecTypeId_USER_MAC_MISS_IP_ARP = 846;
            SecTypeId_USMACX_MISSX_IPV6 = 847;
            SecTypeId_USMAC_ARP_PACKET = 848;
            SecTypeId_USMAC_IGMP_PACKET = 849;
            SecTypeId_UUCMASKERR = 850;
            SecTypeId_V6EINDX_MISS = 851;
            SecTypeId_V6MLD_DONE = 852;
            SecTypeId_V6MLD_QUERY = 853;
            SecTypeId_V6MLD_V1REP = 854;
            SecTypeId_V6MLD_V2REP = 855;
            SecTypeId_V6ND_NA = 856;
            SecTypeId_V6ND_NS = 857;
            SecTypeId_V6ND_RA = 858;
            SecTypeId_V6ND_REDIRECT = 859;
            SecTypeId_V6ND_RS = 860;
            SecTypeId_V6OUTV4_V6MC = 861;
            SecTypeId_VALN_STACKING_CHK = 862;
            SecTypeId_VC_HUB = 863;
            SecTypeId_VGMP = 864;
            SecTypeId_VIRTUAL_CAUSE_NEW_FRAGMENT = 865;
            SecTypeId_VLAN_HOSTCAR_ATTACK = 866;
            SecTypeId_VLLVM = 867;
            SecTypeId_VLLVM_ARP = 868;
            SecTypeId_VLLVM_HDLC = 869;
            SecTypeId_VLLVM_PPP = 870;
            SecTypeId_VRRP_1 = 871;
            SecTypeId_VRRP_2 = 872;
            SecTypeId_VRRP_MAC_ADD_MSG = 873;
            SecTypeId_VSM_CGN = 874;
            SecTypeId_VSM_HA = 875;
            SecTypeId_VSM_IPSEC = 876;
            SecTypeId_VSM_IPSEC_PLAIN = 877;
            SecTypeId_VXLANPING = 878;
            SecTypeId_WEB = 879;
            SecTypeId_WEBX_AUTHX_SERVERX_PACKET = 880;
            SecTypeId_WEB_USEER_RESTRAIN = 881;
            SecTypeId_WHITELIST = 882;
            SecTypeId_WHITELIST_OSPF_PACKET = 883;
            SecTypeId_WHITELIST_RADIUS_PACKET = 884;
            SecTypeId_WORKDIS = 885;
            SecTypeId_WRAP = 886;
            SecTypeId_X_1355 = 887;
            SecTypeId_X_1356 = 888;
            SecTypeId_X_1564_STOP = 889;
            SecTypeId_X_1564_TOCP = 890;
            SecTypeId_X_1AG = 891;
            SecTypeId_X_1AG_UNK = 892;
            SecTypeId_X_1AG_CC_LEVEL_ERR_UP = 893;
            SecTypeId_X_1AG_CC_MEPID_ERR_DOWN = 894;
            SecTypeId_X_1AG_CC_MEPID_ERR_UP_1 = 895;
            SecTypeId_X_1AG_CC_MEPID_ERR_UP_2 = 896;
            SecTypeId_X_1AG_VERIFY_ERR = 898;
            SecTypeId_X_1DM_CW_TO_CP = 899;
            SecTypeId_X_1DM_NO_CW_TO_CP = 900;
            SecTypeId_X_2544_TIME_DELAY = 901;
            SecTypeId_X_3AH = 902;
            SecTypeId_X_3AHLCLLPBK = 903;
            SecTypeId_X_3AHX_LOOPX_TESTX_SUCCESSX_MESSAGE = 904;
            SecTypeId_X_3AH_PDU = 905;
            SecTypeId_X_4OVER6_PRTCL_ERROR = 906;
            SecTypeId_X_5822_FIDT_NV = 907;
            SecTypeId_X_588CAUSE_114 = 908;
            SecTypeId_X_588CAUSE_115 = 909;
            SecTypeId_X_588CAUSE_121 = 910;
            SecTypeId_X_588CAUSE_126 = 911;
            SecTypeId_X_588CAUSE_128 = 912;
            SecTypeId_X_588CAUSE_129 = 913;
            SecTypeId_X_588CAUSE_131 = 914;
            SecTypeId_X_588CAUSE_132 = 915;
            SecTypeId_X_588CAUSE_133 = 916;
            SecTypeId_X_588CAUSE_183 = 917;
            SecTypeId_X_588CAUSE_191 = 918;
            SecTypeId_X_588CAUSE_208 = 919;
            SecTypeId_X_588CAUSE_253 = 920;
            SecTypeId_X_588CAUSE_254 = 921;
            SecTypeId_X_588CAUSE_255 = 922;
            SecTypeId_X_802X_1AG = 923;
            SecTypeId_Y1731_AIS_INWARD_EGRESS = 924;
            SecTypeId_Y1731_AIS_OUTWARD_INGRESS = 925;
            SecTypeId_Y1731_DM_AC_INANDOUT = 926;
            SecTypeId_Y1731_ETH_BN = 927;
            SecTypeId_Y1731_LCK = 928;
            SecTypeId_Y1731_LMR_AC_INANDOUT = 929;
            SecTypeId_Y1731_MLB_INWARD_EGRESS = 930;
            SecTypeId_Y1731_MLB_OUTWARD_INGRESS = 931;
            SecTypeId_ADMINX_LSX_PACKET = 932;
            SecTypeId_ICMP6X_ECHOX_PACKET = 933;
            SecTypeId_ICMP_ECHO = 934;
            SecTypeId_IPV6X_SYNX_BGPX_PACKET = 935;
            SecTypeId_IPV6X_SYNX_SSHX_PACKET = 936;
            SecTypeId_IPV6X_SYNX_TELNETX_PACKET = 937;
            SecTypeId_LPT = 938;
            SecTypeId_MAP_ICMP = 939;
            SecTypeId_MLDP_MBB_PKT = 940;
            SecTypeId_SRHX_OTPX_TOCPX_PACKET = 941;
            SecTypeId_IPTVX_INGRESSX_PACKET = 942;
         };
         SecTypeId secTypeId = 7;
      }
      repeated SecDisDefaultCar secDisDefaultCar = 1;
   }
   SecDisDefaultCars secDisDefaultCars = 26;
   message SecDisRateLimits {
      message SecDisRateLimit {
         uint64 secDropPkts = 1;
         string secIfName = 2;
         uint64 secPassPkts = 3;
         enum SecProtocolType {
            SecProtocolType_ARP = 0;
            SecProtocolType_DHCP = 1;
            SecProtocolType_ICMP = 2;
            SecProtocolType_ICMPV6 = 3;
            SecProtocolType_ICMPX_ND = 4;
            SecProtocolType_PORTX_CAR = 5;
            SecProtocolType_SNMP = 6;
            SecProtocolType_SSH = 7;
            SecProtocolType_TELNET = 8;
         };
         SecProtocolType secProtocolType = 4;
         uint64 secTotalPkts = 5;
      }
      repeated SecDisRateLimit secDisRateLimit = 1;
   }
   SecDisRateLimits secDisRateLimits = 27;
   message SecDisSQStats {
      message SecDisSQStat {
         message SecDisFQStats {
            message SecDisFQStat {
               uint64 secAF1DropPkts = 1;
               uint64 secAF1PassPkts = 2;
               uint64 secAF2DropPkts = 3;
               uint64 secAF2PassPkts = 4;
               uint64 secAF3DropPkts = 5;
               uint64 secAF3PassPkts = 6;
               uint64 secAF4DropPkts = 7;
               uint64 secAF4PassPkts = 8;
               uint64 secBEDropPkts = 9;
               uint64 secBEPassPkts = 10;
               uint64 secCS6DropPkts = 11;
               uint64 secCS6PassPkts = 12;
               uint64 secCS7DropPkts = 13;
               uint64 secCS7PassPkts = 14;
               uint64 secEFDropPkts = 15;
               uint64 secEFPassPkts = 16;
            }
            repeated SecDisFQStat secDisFQStat = 1;
         }
         SecDisFQStats secDisFQStats = 1;
         uint64 secDropedPkts = 2;
         uint64 secPassedPkts = 3;
         enum SecSQType {
            SecSQType_ACCESSX_USER = 0;
            SecSQType_ARP = 1;
            SecSQType_ATNX_ACCESSX_USER = 2;
            SecSQType_ATNX_ARP = 3;
            SecSQType_ATNX_BLACKLIST = 4;
            SecSQType_ATNX_CHECKX_FAILED = 5;
            SecSQType_ATNX_CLOCK = 6;
            SecSQType_ATNX_FWDDATAX_TOX_CP = 7;
            SecSQType_ATNX_HEARTBEAT = 8;
            SecSQType_ATNX_LINKX_LAYER = 9;
            SecSQType_ATNX_MANAGEMENT = 10;
            SecSQType_ATNX_MPLS = 11;
            SecSQType_ATNX_MULTICAST = 12;
            SecSQType_ATNX_NETWORKX_LAYER = 13;
            SecSQType_ATNX_OAMX_CHECK = 14;
            SecSQType_ATNX_ROUTEX_PROTOCOL = 15;
            SecSQType_ATNX_WHITELIST = 16;
            SecSQType_LINKX_LAYER = 17;
            SecSQType_MANAGEMENT = 18;
            SecSQType_MPLS = 19;
            SecSQType_MULTICAST = 20;
            SecSQType_NETWORKX_LAYER = 21;
            SecSQType_ROUTEX_PROTOCOL = 22;
            SecSQType_USERX_DEFINEDX_FLOW = 23;
            SecSQType_WHITELIST = 24;
         };
         SecSQType secSQType = 4;
         string secSlotId = 5;
      }
      repeated SecDisSQStat secDisSQStat = 1;
   }
   SecDisSQStats secDisSQStats = 28;
   message SecDisSQWeights {
      message SecDisSQWeight {
         uint32 secConfigSQCir = 1;
         uint32 secConfigSQPir = 2;
         uint32 secConfigWeight = 3;
         uint32 secDftSQCir = 4;
         uint32 secDftSQPir = 5;
         uint32 secDftWeight = 6;
         enum SecSQType {
            SecSQType_ACCESSX_USER = 0;
            SecSQType_ARP = 1;
            SecSQType_ATNX_ACCESSX_USER = 2;
            SecSQType_ATNX_ARP = 3;
            SecSQType_ATNX_BLACKLIST = 4;
            SecSQType_ATNX_CHECKX_FAILED = 5;
            SecSQType_ATNX_CLOCK = 6;
            SecSQType_ATNX_FWDDATAX_TOX_CP = 7;
            SecSQType_ATNX_HEARTBEAT = 8;
            SecSQType_ATNX_LINKX_LAYER = 9;
            SecSQType_ATNX_MANAGEMENT = 10;
            SecSQType_ATNX_MPLS = 11;
            SecSQType_ATNX_MULTICAST = 12;
            SecSQType_ATNX_NETWORKX_LAYER = 13;
            SecSQType_ATNX_OAMX_CHECK = 14;
            SecSQType_ATNX_ROUTEX_PROTOCOL = 15;
            SecSQType_ATNX_WHITELIST = 16;
            SecSQType_LINKX_LAYER = 17;
            SecSQType_MANAGEMENT = 18;
            SecSQType_MPLS = 19;
            SecSQType_MULTICAST = 20;
            SecSQType_NETWORKX_LAYER = 21;
            SecSQType_ROUTEX_PROTOCOL = 22;
            SecSQType_USERX_DEFINEDX_FLOW = 23;
            SecSQType_WHITELIST = 24;
         };
         SecSQType secSQType = 7;
         string secSlotId = 8;
      }
      repeated SecDisSQWeight secDisSQWeight = 1;
   }
   SecDisSQWeights secDisSQWeights = 29;
   message SecEnL2LoDetects {
      message SecEnL2LoDetect {
         bool secDetectFlag = 1;
         string secSlotId = 2;
      }
      repeated SecEnL2LoDetect secEnL2LoDetect = 1;
   }
   SecEnL2LoDetects secEnL2LoDetects = 30;
   message SecFilterMacs {
      message SecFilterMac {
         string ifName = 1;
         string secMacAddr = 2;
      }
      repeated SecFilterMac secFilterMac = 1;
   }
   SecFilterMacs secFilterMacs = 31;
   message SecGlobalUrpfs {
      message SecGlobalUrpf {
         enum SecProtoFamily {
            SecProtoFamily_IPV4 = 0;
         };
         SecProtoFamily secProtoFamily = 1;
         enum SecUrpfDefault {
            SecUrpfDefault_ALLOW = 0;
            SecUrpfDefault_DISALLOW = 1;
         };
         SecUrpfDefault secUrpfDefault = 2;
         enum SecUrpfLoose {
            SecUrpfLoose_LOOSE = 0;
            SecUrpfLoose_STRICT = 1;
         };
         SecUrpfLoose secUrpfLoose = 3;
      }
      repeated SecGlobalUrpf secGlobalUrpf = 1;
   }
   SecGlobalUrpfs secGlobalUrpfs = 32;
   message SecHostCarStats {
      message SecHostCarStat {
         uint64 droppedBytes = 1;
         uint32 hostCarID = 2;
         enum HostCarType {
            HostCarType_HOSTCAR = 0;
            HostCarType_HTTPX_HOSTCAR = 1;
            HostCarType_VLANX_HOSTX_CAR = 2;
         };
         HostCarType hostCarType = 3;
         uint32 httpHostCarID = 4;
         uint64 passedBytes = 5;
         string slotID = 6;
         enum StatType {
            StatType_ACTIVE = 0;
            StatType_ALL = 1;
            StatType_AUTOX_ADJUST = 2;
            StatType_CARID = 3;
            StatType_DROPPED = 4;
            StatType_NONX_DROPPED = 5;
         };
         StatType statType = 7;
         uint32 vlanHostCarID = 8;
      }
      repeated SecHostCarStat secHostCarStat = 1;
   }
   SecHostCarStats secHostCarStats = 33;
   message SecL2LoDisPckIns {
      message SecL2LoDisPckIn {
         uint32 secCeVlanId = 1;
         string secIfName = 2;
         uint32 secNumber = 3;
         uint32 secPeVlanId = 4;
         enum SecPktType {
            SecPktType_BROADCAST = 0;
            SecPktType_MULTICAST = 1;
            SecPktType_UNICAST = 2;
         };
         SecPktType secPktType = 5;
         enum SecProtocol {
            SecProtocol_ABNORMAL = 0;
            SecProtocol_ABNORMALPACKET = 1;
            SecProtocol_ARP = 2;
            SecProtocol_BFD = 3;
            SecProtocol_BGP = 4;
            SecProtocol_BGP2 = 5;
            SecProtocol_BGPV6 = 6;
            SecProtocol_BPDU = 7;
            SecProtocol_DHCP = 8;
            SecProtocol_DIAMETER = 9;
            SecProtocol_DNSCLIENT = 10;
            SecProtocol_DNSV6 = 11;
            SecProtocol_FRAGMENTPACKET = 12;
            SecProtocol_FRAMGMENT = 13;
            SecProtocol_FTPCLIENT = 14;
            SecProtocol_FTPSERVER = 15;
            SecProtocol_FTPSERVER2 = 16;
            SecProtocol_FTPV6_CLIENT = 17;
            SecProtocol_FTPV6_SERVER = 18;
            SecProtocol_HWTACACS = 19;
            SecProtocol_ICMP = 20;
            SecProtocol_ICMPV6 = 21;
            SecProtocol_IGMP = 22;
            SecProtocol_IGPMU = 23;
            SecProtocol_IPFPM = 24;
            SecProtocol_ISIS = 25;
            SecProtocol_ISIS2 = 26;
            SecProtocol_LACP = 27;
            SecProtocol_LDP = 28;
            SecProtocol_LDP2 = 29;
            SecProtocol_LSPPING = 30;
            SecProtocol_MPLSOAM = 31;
            SecProtocol_MSDP = 32;
            SecProtocol_NTP = 33;
            SecProtocol_OPENFLOW = 34;
            SecProtocol_OSPF = 35;
            SecProtocol_OSPF2 = 36;
            SecProtocol_OSPFV3 = 37;
            SecProtocol_PIM = 38;
            SecProtocol_PIMV6 = 39;
            SecProtocol_RADIUS = 40;
            SecProtocol_RIP = 41;
            SecProtocol_RIP2 = 42;
            SecProtocol_RRPP = 43;
            SecProtocol_RSVP = 44;
            SecProtocol_RSVP2 = 45;
            SecProtocol_SFTPCLIENT = 46;
            SecProtocol_SFTPSERVER = 47;
            SecProtocol_SNMP = 48;
            SecProtocol_SNMP2 = 49;
            SecProtocol_SSHCLIENT = 50;
            SecProtocol_SSHSERVER = 51;
            SecProtocol_SSHSERVER2 = 52;
            SecProtocol_SSHV6_SERVER = 53;
            SecProtocol_SYSLOG = 54;
            SecProtocol_TCPSYN = 55;
            SecProtocol_TCPSYNPACKET = 56;
            SecProtocol_TELNETCLIENT = 57;
            SecProtocol_TELNETSERVER = 58;
            SecProtocol_TELNETSERVER2 = 59;
            SecProtocol_TELNETV6 = 60;
            SecProtocol_TELNETV6_CLIENT = 61;
            SecProtocol_TELNETV6_SERVER = 62;
            SecProtocol_TFTP = 63;
            SecProtocol_TFTP2 = 64;
            SecProtocol_UDP = 65;
            SecProtocol_UDPPACKET = 66;
            SecProtocol_UNICAST_VRRP = 67;
            SecProtocol_URPF = 68;
            SecProtocol_VGMP = 69;
            SecProtocol_VRRP = 70;
            SecProtocol_WEB_AUTH_SERVER = 71;
            SecProtocol_X_8021AG = 72;
         };
         SecProtocol secProtocol = 6;
         string secSlotId = 7;
         string secSrcMac = 8;
      }
      repeated SecL2LoDisPckIn secL2LoDisPckIn = 1;
   }
   SecL2LoDisPckIns secL2LoDisPckIns = 34;
   message SecL2LoDisStaIns {
      message SecL2LoDisStaIn {
         enum SecActionFlag {
            SecActionFlag_NONE = 0;
            SecActionFlag_SHUT = 1;
            SecActionFlag_TRAP = 2;
            SecActionFlag_TRAPANDSHUT = 3;
         };
         SecActionFlag secActionFlag = 1;
         string secIfName = 2;
         enum SecLoopLevel {
            SecLoopLevel_DETERMINED = 0;
            SecLoopLevel_NOTIFICATION = 1;
            SecLoopLevel_SUSPECT = 2;
         };
         SecLoopLevel secLoopLevel = 3;
         enum SecPortState {
            SecPortState_DOWN = 0;
            SecPortState_UP = 1;
         };
         SecPortState secPortState = 4;
         string secSlotId = 5;
         uint32 secVlanID = 6;
      }
      repeated SecL2LoDisStaIn secL2LoDisStaIn = 1;
   }
   SecL2LoDisStaIns secL2LoDisStaIns = 35;
   message SecL2LoDteShuts {
      message SecL2LoDteShut {
         bool secShutFlag = 1;
         string secSlotId = 2;
         uint32 secUpInterval = 3;
         uint32 secUpTimes = 4;
      }
      repeated SecL2LoDteShut secL2LoDteShut = 1;
   }
   SecL2LoDteShuts secL2LoDteShuts = 36;
   message SecL2LoDteTraps {
      message SecL2LoDteTrap {
         string secSlotId = 1;
         bool secTrapFlag = 2;
      }
      repeated SecL2LoDteTrap secL2LoDteTrap = 1;
   }
   SecL2LoDteTraps secL2LoDteTraps = 37;
   message SecMacFiltStats {
      message SecMacFiltStat {
         uint64 secBlkDrpPkts = 1;
         uint64 secWhtDrpPkts = 2;
      }
      repeated SecMacFiltStat secMacFiltStat = 1;
   }
   SecMacFiltStats secMacFiltStats = 38;
   message SecMacFilterEns {
      message SecMacFilterEn {
         string ifName = 1;
         enum SecMacBlckLstEn {
            SecMacBlckLstEn_DISABLE = 0;
            SecMacBlckLstEn_ENABLE = 1;
         };
         SecMacBlckLstEn secMacBlckLstEn = 2;
         enum SecMacWhtLstEn {
            SecMacWhtLstEn_DISABLE = 0;
            SecMacWhtLstEn_ENABLE = 1;
         };
         SecMacWhtLstEn secMacWhtLstEn = 3;
      }
      repeated SecMacFilterEn secMacFilterEn = 1;
   }
   SecMacFilterEns secMacFilterEns = 39;
   message SecMacFlterInfos {
      message SecMacFlterInfo {
         string secIfName = 1;
         string secMacAddr = 2;
         enum SecMacBlkEn {
            SecMacBlkEn_DISABLE = 0;
            SecMacBlkEn_ENABLE = 1;
         };
         SecMacBlkEn secMacBlkEn = 3;
         enum SecMacWhtEn {
            SecMacWhtEn_DISABLE = 0;
            SecMacWhtEn_ENABLE = 1;
         };
         SecMacWhtEn secMacWhtEn = 4;
      }
      repeated SecMacFlterInfo secMacFlterInfo = 1;
   }
   SecMacFlterInfos secMacFlterInfos = 40;
   message SecPortCars {
      message SecPortCar {
         string ifName = 1;
         uint32 secCir = 2;
         enum SecProtocolType {
            SecProtocolType_ARP = 0;
            SecProtocolType_DHCP = 1;
            SecProtocolType_ICMP = 2;
            SecProtocolType_ICMPV6 = 3;
            SecProtocolType_ICMPX_ND = 4;
            SecProtocolType_PORTX_CAR = 5;
            SecProtocolType_SNMP = 6;
            SecProtocolType_SSH = 7;
            SecProtocolType_TELNET = 8;
         };
         SecProtocolType secProtocolType = 3;
      }
      repeated SecPortCar secPortCar = 1;
   }
   SecPortCars secPortCars = 41;
   message SecSlotArpAtcks {
      message SecSlotArpAtck {
         uint32 secCeVlanId = 1;
         uint32 secCtrlVlan = 2;
         uint64 secDropBytes = 3;
         uint64 secDropPkts = 4;
         uint64 secDroppedBytes = 5;
         uint64 secDroppedPkts = 6;
         bool secEnableArpCar = 7;
         string secEndTime = 8;
         enum SecHistory {
            SecHistory_ALL = 0;
            SecHistory_NO = 1;
            SecHistory_YES = 2;
         };
         SecHistory secHistory = 9;
         string secIfIndex = 10;
         string secIfSubIndex = 11;
         uint64 secPassBytes = 12;
         uint64 secPassPkts = 13;
         uint64 secPassedBytes = 14;
         uint64 secPassedPkts = 15;
         uint32 secPeVlanId = 16;
         string secSlotId = 17;
         string secStartTime = 18;
         uint32 secVlanId = 19;
         uint32 secShowNo = 20;
      }
      repeated SecSlotArpAtck secSlotArpAtck = 1;
   }
   SecSlotArpAtcks secSlotArpAtcks = 42;
   message SecTMSQWeights {
      message SecTMSQWeight {
         uint32 secPolicyID = 1;
         uint32 secSQCir = 2;
         uint32 secSQPir = 3;
         enum SecSQType {
            SecSQType_ACCESSX_USER = 0;
            SecSQType_ARP = 1;
            SecSQType_ATNX_ACCESSX_USER = 2;
            SecSQType_ATNX_ARP = 3;
            SecSQType_ATNX_BLACKLIST = 4;
            SecSQType_ATNX_CHECKX_FAILED = 5;
            SecSQType_ATNX_CLOCK = 6;
            SecSQType_ATNX_FWDDATAX_TOX_CP = 7;
            SecSQType_ATNX_HEARTBEAT = 8;
            SecSQType_ATNX_LINKX_LAYER = 9;
            SecSQType_ATNX_MANAGEMENT = 10;
            SecSQType_ATNX_MPLS = 11;
            SecSQType_ATNX_MULTICAST = 12;
            SecSQType_ATNX_NETWORKX_LAYER = 13;
            SecSQType_ATNX_OAMX_CHECK = 14;
            SecSQType_ATNX_ROUTEX_PROTOCOL = 15;
            SecSQType_ATNX_WHITELIST = 16;
            SecSQType_LINKX_LAYER = 17;
            SecSQType_MANAGEMENT = 18;
            SecSQType_MPLS = 19;
            SecSQType_MULTICAST = 20;
            SecSQType_NETWORKX_LAYER = 21;
            SecSQType_ROUTEX_PROTOCOL = 22;
            SecSQType_USERX_DEFINEDX_FLOW = 23;
            SecSQType_WHITELIST = 24;
         };
         SecSQType secSQType = 4;
         uint32 secSQWeight = 5;
      }
      repeated SecTMSQWeight secTMSQWeight = 1;
   }
   SecTMSQWeights secTMSQWeights = 43;
   message SecTotalPktStats {
      message SecTotalPktStat {
         uint64 secDropPkt = 1;
         uint64 secPassPkt = 2;
         string secSlotId = 3;
         uint64 secTotalPkt = 4;
      }
      repeated SecTotalPktStat secTotalPktStat = 1;
   }
   SecTotalPktStats secTotalPktStats = 44;
   message Secappstats {
      message Secappstat {
         enum Sec8021Ag {
            Sec8021Ag_CLOSE = 0;
            Sec8021Ag_OPEN = 1;
         };
         Sec8021Ag sec8021ag = 1;
         enum SecAppDefAct {
            SecAppDefAct_DROP = 0;
            SecAppDefAct_MIN_TO_CP = 1;
         };
         SecAppDefAct secAppDefAct = 2;
         enum SecAppEnable {
            SecAppEnable_CLOSE = 0;
            SecAppEnable_OPEN = 1;
         };
         SecAppEnable secAppEnable = 3;
         enum SecBfd {
            SecBfd_CLOSE = 0;
            SecBfd_OPEN = 1;
         };
         SecBfd secBfd = 4;
         enum SecBgp {
            SecBgp_CLOSE = 0;
            SecBgp_OPEN = 1;
         };
         SecBgp secBgp = 5;
         enum SecBgpV6 {
            SecBgpV6_CLOSE = 0;
            SecBgpV6_OPEN = 1;
         };
         SecBgpV6 secBgpV6 = 6;
         enum SecDhcp {
            SecDhcp_CLOSE = 0;
            SecDhcp_OPEN = 1;
         };
         SecDhcp secDhcp = 7;
         enum SecDiameter {
            SecDiameter_CLOSE = 0;
            SecDiameter_OPEN = 1;
         };
         SecDiameter secDiameter = 8;
         enum SecDnsClient {
            SecDnsClient_CLOSE = 0;
            SecDnsClient_OPEN = 1;
         };
         SecDnsClient secDnsClient = 9;
         enum SecDnsV6 {
            SecDnsV6_CLOSE = 0;
            SecDnsV6_OPEN = 1;
         };
         SecDnsV6 secDnsV6 = 10;
         enum SecFtpClient {
            SecFtpClient_CLOSE = 0;
            SecFtpClient_OPEN = 1;
         };
         SecFtpClient secFtpClient = 11;
         enum SecFtpServer {
            SecFtpServer_CLOSE = 0;
            SecFtpServer_OPEN = 1;
         };
         SecFtpServer secFtpServer = 12;
         enum SecFtpV6Client {
            SecFtpV6Client_CLOSE = 0;
            SecFtpV6Client_OPEN = 1;
         };
         SecFtpV6Client secFtpV6Client = 13;
         enum SecFtpV6Server {
            SecFtpV6Server_CLOSE = 0;
            SecFtpV6Server_OPEN = 1;
         };
         SecFtpV6Server secFtpV6Server = 14;
         enum SecHwtacacs {
            SecHwtacacs_CLOSE = 0;
            SecHwtacacs_OPEN = 1;
         };
         SecHwtacacs secHwtacacs = 15;
         enum SecIcmp {
            SecIcmp_CLOSE = 0;
            SecIcmp_OPEN = 1;
         };
         SecIcmp secIcmp = 16;
         enum SecIcmpV6 {
            SecIcmpV6_CLOSE = 0;
            SecIcmpV6_OPEN = 1;
         };
         SecIcmpV6 secIcmpV6 = 17;
         enum SecIgmp {
            SecIgmp_CLOSE = 0;
            SecIgmp_OPEN = 1;
         };
         SecIgmp secIgmp = 18;
         enum SecIgpmu {
            SecIgpmu_CLOSE = 0;
            SecIgpmu_OPEN = 1;
         };
         SecIgpmu secIgpmu = 19;
         enum SecIpfpm {
            SecIpfpm_CLOSE = 0;
            SecIpfpm_OPEN = 1;
         };
         SecIpfpm secIpfpm = 20;
         enum SecIsis {
            SecIsis_CLOSE = 0;
            SecIsis_OPEN = 1;
         };
         SecIsis secIsis = 21;
         enum SecLacp {
            SecLacp_CLOSE = 0;
            SecLacp_OPEN = 1;
         };
         SecLacp secLacp = 22;
         enum SecLdp {
            SecLdp_CLOSE = 0;
            SecLdp_OPEN = 1;
         };
         SecLdp secLdp = 23;
         enum SecLspping {
            SecLspping_CLOSE = 0;
            SecLspping_OPEN = 1;
         };
         SecLspping secLspping = 24;
         enum SecMsdp {
            SecMsdp_CLOSE = 0;
            SecMsdp_OPEN = 1;
         };
         SecMsdp secMsdp = 25;
         enum SecNtp {
            SecNtp_CLOSE = 0;
            SecNtp_OPEN = 1;
         };
         SecNtp secNtp = 26;
         enum SecOpenflow {
            SecOpenflow_CLOSE = 0;
            SecOpenflow_OPEN = 1;
         };
         SecOpenflow secOpenflow = 27;
         enum SecOspf {
            SecOspf_CLOSE = 0;
            SecOspf_OPEN = 1;
         };
         SecOspf secOspf = 28;
         enum SecOspfV3 {
            SecOspfV3_CLOSE = 0;
            SecOspfV3_OPEN = 1;
         };
         SecOspfV3 secOspfV3 = 29;
         enum SecPim {
            SecPim_CLOSE = 0;
            SecPim_OPEN = 1;
         };
         SecPim secPim = 30;
         enum SecPimV6 {
            SecPimV6_CLOSE = 0;
            SecPimV6_OPEN = 1;
         };
         SecPimV6 secPimV6 = 31;
         enum SecRadius {
            SecRadius_CLOSE = 0;
            SecRadius_OPEN = 1;
         };
         SecRadius secRadius = 32;
         enum SecRip {
            SecRip_CLOSE = 0;
            SecRip_OPEN = 1;
         };
         SecRip secRip = 33;
         enum SecRsvp {
            SecRsvp_CLOSE = 0;
            SecRsvp_OPEN = 1;
         };
         SecRsvp secRsvp = 34;
         string secSlotId = 35;
         enum SecSnmp {
            SecSnmp_CLOSE = 0;
            SecSnmp_OPEN = 1;
         };
         SecSnmp secSnmp = 36;
         enum SecSshClient {
            SecSshClient_CLOSE = 0;
            SecSshClient_OPEN = 1;
         };
         SecSshClient secSshClient = 37;
         enum SecSshServer {
            SecSshServer_CLOSE = 0;
            SecSshServer_OPEN = 1;
         };
         SecSshServer secSshServer = 38;
         enum SecSshV6Server {
            SecSshV6Server_CLOSE = 0;
            SecSshV6Server_OPEN = 1;
         };
         SecSshV6Server secSshV6Server = 39;
         enum SecSysLog {
            SecSysLog_CLOSE = 0;
            SecSysLog_OPEN = 1;
         };
         SecSysLog secSysLog = 40;
         enum SecTelnetClient {
            SecTelnetClient_CLOSE = 0;
            SecTelnetClient_OPEN = 1;
         };
         SecTelnetClient secTelnetClient = 41;
         enum SecTelnetServer {
            SecTelnetServer_CLOSE = 0;
            SecTelnetServer_OPEN = 1;
         };
         SecTelnetServer secTelnetServer = 42;
         enum SecTelnetV6Client {
            SecTelnetV6Client_CLOSE = 0;
            SecTelnetV6Client_OPEN = 1;
         };
         SecTelnetV6Client secTelnetV6Client = 43;
         enum SecTelnetV6Server {
            SecTelnetV6Server_CLOSE = 0;
            SecTelnetV6Server_OPEN = 1;
         };
         SecTelnetV6Server secTelnetV6Server = 44;
         enum SecTftp {
            SecTftp_CLOSE = 0;
            SecTftp_OPEN = 1;
         };
         SecTftp secTftp = 45;
         enum SecUnicastVrrp {
            SecUnicastVrrp_CLOSE = 0;
            SecUnicastVrrp_OPEN = 1;
         };
         SecUnicastVrrp secUnicastVrrp = 46;
         enum SecVrrp {
            SecVrrp_CLOSE = 0;
            SecVrrp_OPEN = 1;
         };
         SecVrrp secVrrp = 47;
         enum SecWebAuthServ {
            SecWebAuthServ_CLOSE = 0;
            SecWebAuthServ_OPEN = 1;
         };
         SecWebAuthServ secWebAuthServ = 48;
      }
      repeated Secappstat secappstat = 1;
   }
   Secappstats secappstats = 45;
   message Secattsrcorgs {
      message Secattsrcorg {
         string ifName = 1;
         string secAttSrcData = 2;
         enum SecAttType {
            SecAttType_APP = 0;
            SecAttType_CAR = 1;
            SecAttType_MADEFEND = 2;
            SecAttType_TCPIP = 3;
            SecAttType_TOTALCAR = 4;
            SecAttType_URPF = 5;
         };
         SecAttType secAttType = 3;
         uint32 secBufferSize = 4;
         uint32 secCVlanId = 5;
         uint32 secCoverFlag = 6;
         string secDateTime = 7;
         uint32 secPVlanId = 8;
         uint32 secPktNumber = 9;
         uint32 secRecordNumber = 10;
         string secSlotId = 11;
      }
      repeated Secattsrcorg secattsrcorg = 1;
   }
   Secattsrcorgs secattsrcorgs = 46;
   message Seccarstats {
      message Seccarstat {
         uint64 secAclDenyPkts = 1;
         uint32 secActualCbs = 2;
         uint32 secActualCir = 3;
         enum SecAppDefAct {
            SecAppDefAct_DROP = 0;
            SecAppDefAct_MIN_TO_CP = 1;
         };
         SecAppDefAct secAppDefAct = 4;
         bool secAppEnable = 5;
         uint32 secCfgCbs = 6;
         uint32 secCfgCir = 7;
         uint64 secDropedPkts = 8;
         uint64 secHistPps = 9;
         string secHistPpsTime = 10;
         string secLastDrpBTime = 11;
         string secLastDrpETime = 12;
         uint64 secLastPps = 13;
         uint32 secMinPktLen = 14;
         uint64 secPassedPkts = 15;
         enum SecPolicyType {
            SecPolicyType_APP = 0;
            SecPolicyType_BLACKLIST = 1;
            SecPolicyType_INDEX = 2;
            SecPolicyType_MA = 3;
            SecPolicyType_PROTOCOL = 4;
            SecPolicyType_TCPIP = 5;
            SecPolicyType_TOTALPKT = 6;
            SecPolicyType_URPF = 7;
            SecPolicyType_USERFLOW = 8;
            SecPolicyType_WHITELIST = 9;
            SecPolicyType_WHITELISTV6 = 10;
         };
         SecPolicyType secPolicyType = 16;
         uint32 secPolicyTypeID = 17;
         enum SecPriority {
            SecPriority_AF1 = 0;
            SecPriority_AF2 = 1;
            SecPriority_AF3 = 2;
            SecPriority_AF4 = 3;
            SecPriority_BE = 4;
            SecPriority_CS6 = 5;
            SecPriority_EF = 6;
            SecPriority_HIGH = 7;
            SecPriority_LOW = 8;
            SecPriority_MIDDLE = 9;
         };
         SecPriority secPriority = 18;
         bool secProtoEnable = 19;
         string secSlotId = 20;
         uint64 secTotalPkts = 21;
         uint64 secTtlDropPkts = 22;
      }
      repeated Seccarstat seccarstat = 1;
   }
   Seccarstats seccarstats = 47;
   message Seccarsysids {
      message Seccarsysid {
         uint32 secCarCbs = 1;
         uint32 secCarCir = 2;
         uint32 secCarSysId = 3;
         uint32 secDefaultCbs = 4;
         uint32 secDefaultCir = 5;
         string secDescription = 6;
         uint32 secPolicyID = 7;
         string secSlotId = 8;
      }
      repeated Seccarsysid seccarsysid = 1;
   }
   Seccarsysids seccarsysids = 48;
   message Secdispintfurpfstats {
      message Secdispintfurpfstat {
         string ifName = 1;
         uint64 secV4DiscardPkts = 2;
         uint64 secV6DiscardPkts = 3;
      }
      repeated Secdispintfurpfstat secdispintfurpfstat = 1;
   }
   Secdispintfurpfstats secdispintfurpfstats = 49;
   message SechostcarNodes {
      message SechostcarNode {
         uint32 cbs = 1;
         uint32 cir = 2;
         enum HostCarType {
            HostCarType_HOSTCAR = 0;
            HostCarType_HTTPX_HOSTCAR = 1;
            HostCarType_VLANX_HOSTX_CAR = 2;
         };
         HostCarType hostCarType = 3;
         uint32 pbs = 4;
         uint32 pir = 5;
         string slotID = 6;
      }
      repeated SechostcarNode sechostcarNode = 1;
   }
   SechostcarNodes sechostcarNodes = 50;
   message Secintfurpfs {
      message Secintfurpf {
         string ifName = 1;
         enum SecProtoFamily {
            SecProtoFamily_IPV4 = 0;
            SecProtoFamily_IPV6 = 1;
         };
         SecProtoFamily secProtoFamily = 2;
         enum SecUrfpDefault {
            SecUrfpDefault_ALLOW = 0;
            SecUrfpDefault_DISALLOW = 1;
         };
         SecUrfpDefault secUrfpDefault = 3;
         enum SecUrpfLoose {
            SecUrpfLoose_LOOSE = 0;
            SecUrpfLoose_STRICT = 1;
            SecUrpfLoose_PEERX_BASED = 2;
         };
         SecUrpfLoose secUrpfLoose = 4;
         enum SecUrpfStatisticsEn {
            SecUrpfStatisticsEn_DISABLE = 0;
            SecUrpfStatisticsEn_ENABLE = 1;
         };
         SecUrpfStatisticsEn secUrpfStatisticsEn = 5;
         uint32 secUrpfpeerID = 6;
      }
      repeated Secintfurpf secintfurpf = 1;
   }
   Secintfurpfs secintfurpfs = 51;
   message Secipurpfstats {
      message Secipurpfstat {
         uint64 secDiscardPkts = 1;
         enum SecProtoFamily {
            SecProtoFamily_IPV4 = 0;
            SecProtoFamily_IPV6 = 1;
         };
         SecProtoFamily secProtoFamily = 2;
         string secSlotId = 3;
      }
      repeated Secipurpfstat secipurpfstat = 1;
   }
   Secipurpfstats secipurpfstats = 52;
   message Secnoncarstats {
      message Secnoncarstat {
         enum SecPolicyType {
            SecPolicyType_APP = 0;
            SecPolicyType_MA = 1;
            SecPolicyType_TCPIP = 2;
            SecPolicyType_URPF = 3;
            SecPolicyType_TCPIPV6 = 4;
            SecPolicyType_NDFILTER = 5;
         };
         SecPolicyType secPolicyType = 1;
         enum SecPolicyTypeID {
            SecPolicyTypeID_ABNORMAL = 0;
            SecPolicyTypeID_ABNORMALPACKET = 1;
            SecPolicyTypeID_ARP = 2;
            SecPolicyTypeID_BFD = 3;
            SecPolicyTypeID_BGP = 4;
            SecPolicyTypeID_BGP2 = 5;
            SecPolicyTypeID_BGPV6 = 6;
            SecPolicyTypeID_BPDU = 7;
            SecPolicyTypeID_DHCP = 8;
            SecPolicyTypeID_DIAMETER = 9;
            SecPolicyTypeID_DNSCLIENT = 10;
            SecPolicyTypeID_DNSV6 = 11;
            SecPolicyTypeID_FRAGMENTPACKET = 12;
            SecPolicyTypeID_FRAMGMENT = 13;
            SecPolicyTypeID_FTPCLIENT = 14;
            SecPolicyTypeID_FTPSERVER = 15;
            SecPolicyTypeID_FTPSERVER2 = 16;
            SecPolicyTypeID_FTPV6_CLIENT = 17;
            SecPolicyTypeID_FTPV6_SERVER = 18;
            SecPolicyTypeID_HWTACACS = 19;
            SecPolicyTypeID_ICMP = 20;
            SecPolicyTypeID_ICMPV6 = 21;
            SecPolicyTypeID_IGMP = 22;
            SecPolicyTypeID_IGPMU = 23;
            SecPolicyTypeID_IPFPM = 24;
            SecPolicyTypeID_ISIS = 25;
            SecPolicyTypeID_ISIS2 = 26;
            SecPolicyTypeID_LACP = 27;
            SecPolicyTypeID_LDP = 28;
            SecPolicyTypeID_LDP2 = 29;
            SecPolicyTypeID_LSPPING = 30;
            SecPolicyTypeID_MPLSOAM = 31;
            SecPolicyTypeID_MSDP = 32;
            SecPolicyTypeID_NTP = 33;
            SecPolicyTypeID_OPENFLOW = 34;
            SecPolicyTypeID_OSPF = 35;
            SecPolicyTypeID_OSPF2 = 36;
            SecPolicyTypeID_OSPFV3 = 37;
            SecPolicyTypeID_PIM = 38;
            SecPolicyTypeID_PIMV6 = 39;
            SecPolicyTypeID_RADIUS = 40;
            SecPolicyTypeID_RIP = 41;
            SecPolicyTypeID_RIP2 = 42;
            SecPolicyTypeID_RRPP = 43;
            SecPolicyTypeID_RSVP = 44;
            SecPolicyTypeID_RSVP2 = 45;
            SecPolicyTypeID_SFTPCLIENT = 46;
            SecPolicyTypeID_SFTPSERVER = 47;
            SecPolicyTypeID_SNMP = 48;
            SecPolicyTypeID_SNMP2 = 49;
            SecPolicyTypeID_SSHCLIENT = 50;
            SecPolicyTypeID_SSHSERVER = 51;
            SecPolicyTypeID_SSHSERVER2 = 52;
            SecPolicyTypeID_SSHV6_SERVER = 53;
            SecPolicyTypeID_SYSLOG = 54;
            SecPolicyTypeID_TCPSYN = 55;
            SecPolicyTypeID_TCPSYNPACKET = 56;
            SecPolicyTypeID_TELNETCLIENT = 57;
            SecPolicyTypeID_TELNETSERVER = 58;
            SecPolicyTypeID_TELNETSERVER2 = 59;
            SecPolicyTypeID_TELNETV6 = 60;
            SecPolicyTypeID_TELNETV6_CLIENT = 61;
            SecPolicyTypeID_TELNETV6_SERVER = 62;
            SecPolicyTypeID_TFTP = 63;
            SecPolicyTypeID_TFTP2 = 64;
            SecPolicyTypeID_UDP = 65;
            SecPolicyTypeID_UDPPACKET = 66;
            SecPolicyTypeID_UNICAST_VRRP = 67;
            SecPolicyTypeID_URPF = 68;
            SecPolicyTypeID_VGMP = 69;
            SecPolicyTypeID_VRRP = 70;
            SecPolicyTypeID_WEB_AUTH_SERVER = 71;
            SecPolicyTypeID_X_8021AG = 72;
         };
         SecPolicyTypeID secPolicyTypeID = 2;
         string secSlotId = 3;
         uint64 secSubDropPkts = 4;
         uint64 secSubPassPkts = 5;
         uint64 secSubTotalPkts = 6;
      }
      repeated Secnoncarstat secnoncarstat = 1;
   }
   Secnoncarstats secnoncarstats = 53;
   message Secpolicycfgs {
      message Secpolicycfg {
         uint32 secPolicyID = 1;
         string secSlotIdStr = 2;
      }
      repeated Secpolicycfg secpolicycfg = 1;
   }
   Secpolicycfgs secpolicycfgs = 54;
   message Secpolicys {
      message Secpolicy {
         message SECCrssBrdCarNodes {
            message SECCrssBrdCarNode {
               uint32 secPolicyCbs = 1;
               uint32 secPolicyCir = 2;
            }
            repeated SECCrssBrdCarNode sECCrssBrdCarNode = 1;
         }
         SECCrssBrdCarNodes sECCrssBrdCarNodes = 1;
         string secDescription = 2;
         message SecDevUrpfs {
            message SecDevUrpf {
               bool secEnableDefaultRoute = 1;
               enum SecUrpfLooseType {
                  SecUrpfLooseType_LOOSE = 0;
                  SecUrpfLooseType_STRICT = 1;
               };
               SecUrpfLooseType secUrpfLooseType = 2;
            }
            repeated SecDevUrpf secDevUrpf = 1;
         }
         SecDevUrpfs secDevUrpfs = 3;
         message SecEnablePolicy {
            bool secPolicyIsEn = 1;
         }
         SecEnablePolicy secEnablePolicy = 4;
         uint32 secPolicyID = 5;
         message SecTMSQConfig {
            bool secStatus = 1;
         }
         SecTMSQConfig secTMSQConfig = 6;
         message Secpolicyacls {
            message Secpolicyacl {
               uint32 secAclNum = 1;
               enum SecPolicyType {
                  SecPolicyType_BLACKLIST = 0;
                  SecPolicyType_IPV6BLACKLIST = 1;
                  SecPolicyType_IPV6USERFLOW = 2;
                  SecPolicyType_IPV6WHITELIST = 3;
                  SecPolicyType_USERFLOW = 4;
                  SecPolicyType_WHITELIST = 5;
               };
               SecPolicyType secPolicyType = 2;
               uint32 secPolicyTypeID = 3;
               bool secPrior = 4;
               string secAclName = 5;
               string secAclNumOrName = 6;
            }
            repeated Secpolicyacl secpolicyacl = 1;
         }
         Secpolicyacls secpolicyacls = 7;
         message Secpolicyalarms {
            message Secpolicyalarm {
               bool secAlarmFlag = 1;
               uint32 secAlarmInt = 2;
               uint32 secAlarmResume = 3;
               uint32 secAlarmSpd = 4;
               uint32 secAlarmThld = 5;
               enum SecPolicyType {
                  SecPolicyType_APP = 0;
                  SecPolicyType_BLACKLIST = 1;
                  SecPolicyType_INDEX = 2;
                  SecPolicyType_MA = 3;
                  SecPolicyType_PROTOCOL = 4;
                  SecPolicyType_TCPIP = 5;
                  SecPolicyType_TOTALPKT = 6;
                  SecPolicyType_TTLEXPIREDLOOP = 7;
                  SecPolicyType_URPF = 8;
                  SecPolicyType_USERFLOW = 9;
                  SecPolicyType_WHITELIST = 10;
                  SecPolicyType_WHITELISTV6 = 11;
                  SecPolicyType_TCPIPV6 = 12;
               };
               SecPolicyType secPolicyType = 6;
               uint32 secPolicyTypeID = 7;
               enum SubProtoType {
                  SubProtoType_ARP = 0;
                  SubProtoType_ARPX_MISS = 1;
                  SubProtoType_BGP = 2;
                  SubProtoType_BGPV6 = 3;
                  SubProtoType_BPDU = 4;
                  SubProtoType_DCN = 5;
                  SubProtoType_DEFAULTX_TCP = 6;
                  SubProtoType_DEFAULTX_UDP = 7;
                  SubProtoType_DHCP = 8;
                  SubProtoType_DHCPV6 = 9;
                  SubProtoType_DNSV6 = 10;
                  SubProtoType_FTPV6X_CLIENT = 11;
                  SubProtoType_FTPV6X_SERVER = 12;
                  SubProtoType_FTPX_CLIENT = 13;
                  SubProtoType_FTPX_SERVER = 14;
                  SubProtoType_HOPX_BYX_HOP = 15;
                  SubProtoType_HWTACACS = 16;
                  SubProtoType_ICMP = 17;
                  SubProtoType_ICMPV6 = 18;
                  SubProtoType_ICMPX_BROADCASTX_ADDRESSX_ECHO = 19;
                  SubProtoType_ICMPX_ND = 20;
                  SubProtoType_ICMPX_NOREACH = 21;
                  SubProtoType_IGMP = 22;
                  SubProtoType_IPFPM = 23;
                  SubProtoType_IPV6X_FIBX_MISS = 24;
                  SubProtoType_IPV6X_NDHX_MISS = 25;
                  SubProtoType_IPV6X_NDX_MISS = 26;
                  SubProtoType_IPV6X_TTLX_EXPIRE = 27;
                  SubProtoType_ISIS = 28;
                  SubProtoType_LACP = 29;
                  SubProtoType_LDP = 30;
                  SubProtoType_LLDP = 31;
                  SubProtoType_LSPPING = 32;
                  SubProtoType_MPLSX_ROUTERX_ALERT = 33;
                  SubProtoType_MPLSX_TRACEX_ROUTE = 34;
                  SubProtoType_MSDP = 35;
                  SubProtoType_MTUV6 = 36;
                  SubProtoType_NA = 37;
                  SubProtoType_NTP = 38;
                  SubProtoType_OSPF = 39;
                  SubProtoType_OSPFV3 = 40;
                  SubProtoType_OTHERS = 41;
                  SubProtoType_PIM = 42;
                  SubProtoType_PIMV6 = 43;
                  SubProtoType_PPP = 44;
                  SubProtoType_RA = 45;
                  SubProtoType_RADIUS = 46;
                  SubProtoType_RIP = 47;
                  SubProtoType_RS = 48;
                  SubProtoType_RSVP = 49;
                  SubProtoType_SNMP = 50;
                  SubProtoType_SSHV6X_SERVER = 51;
                  SubProtoType_SSHX_CLIENT = 52;
                  SubProtoType_SSHX_SERVER = 53;
                  SubProtoType_TELNETV6X_CLIENT = 54;
                  SubProtoType_TELNETV6X_SERVER = 55;
                  SubProtoType_TELNETX_CLIENT = 56;
                  SubProtoType_TELNETX_SERVER = 57;
                  SubProtoType_TFTP = 58;
                  SubProtoType_TRAFFICX_BEHAVIORX_LOG = 59;
                  SubProtoType_VRRP = 60;
                  SubProtoType_X_1588ACR = 61;
                  SubProtoType_X_802X_3AH = 62;
                  SubProtoType_BFD = 63;
                  SubProtoType_DNSX_CLIENT = 64;
                  SubProtoType_EAPOL = 65;
                  SubProtoType_MKA = 66;
                  SubProtoType_X_802X_1AG = 67;
                  SubProtoType_MLD = 68;
               };
               SubProtoType subProtoType = 8;
            }
            repeated Secpolicyalarm secpolicyalarm = 1;
         }
         Secpolicyalarms secpolicyalarms = 8;
         message Secpolicyallpkt {
            enum SecRateFlag {
               SecRateFlag_HIGH = 0;
               SecRateFlag_LOW = 1;
               SecRateFlag_MIDDLE = 2;
            };
            SecRateFlag secRateFlag = 1;
            uint32 secRateValue = 2;
         }
         Secpolicyallpkt secpolicyallpkt = 9;
         message Secpolicyapplnk {
            enum SecDftAction {
               SecDftAction_DROP = 0;
               SecDftAction_MIN_TO_CP = 1;
            };
            SecDftAction secDftAction = 1;
         }
         Secpolicyapplnk secpolicyapplnk = 10;
         message Secpolicyattcfg {
            bool secAttSrcAppLnk = 1;
            bool secAttSrcCpCar = 2;
            bool secAttSrcMa = 3;
            enum SecAttSrcRate {
               SecAttSrcRate_X_1000X_1 = 0;
               SecAttSrcRate_X_100X_1 = 1;
               SecAttSrcRate_X_10X_1 = 2;
               SecAttSrcRate_X_1X_1 = 3;
            };
            SecAttSrcRate secAttSrcRate = 4;
            bool secAttSrcTcpip = 5;
            bool secAttSrcTotCar = 6;
            bool secIsAttackSrc = 7;
         }
         Secpolicyattcfg secpolicyattcfg = 11;
         message Secpolicycars {
            message Secpolicycar {
               uint32 secMinPktLen = 1;
               uint32 secPolicyCbs = 2;
               uint32 secPolicyCbs4Sh = 3;
               uint32 secPolicyCir = 4;
               enum SecPolicyType {
                  SecPolicyType_BLACKLIST = 0;
                  SecPolicyType_INDEX = 1;
                  SecPolicyType_PROTOCOL = 2;
                  SecPolicyType_TCPIP = 3;
                  SecPolicyType_USERFLOW = 4;
                  SecPolicyType_WHITELIST = 5;
                  SecPolicyType_WHITELISTV6 = 6;
               };
               SecPolicyType secPolicyType = 5;
               uint32 secPolicyTypeID = 6;
               enum SubProtoType {
                  SubProtoType_ARP = 0;
                  SubProtoType_ARP_MISS = 1;
                  SubProtoType_ATM_INARP = 2;
                  SubProtoType_ATNX_1588ACR = 3;
                  SubProtoType_ATNX_802X_1AG = 4;
                  SubProtoType_ATNX_802X_3AH = 5;
                  SubProtoType_ATNX_ARP = 6;
                  SubProtoType_ATNX_ARPX_MISS = 7;
                  SubProtoType_ATNX_BFD = 8;
                  SubProtoType_ATNX_BGP = 9;
                  SubProtoType_ATNX_BGPV6 = 10;
                  SubProtoType_ATNX_BPDU = 11;
                  SubProtoType_ATNX_DCN = 12;
                  SubProtoType_ATNX_DEFAULTX_TCP = 13;
                  SubProtoType_ATNX_DEFAULTX_UDP = 14;
                  SubProtoType_ATNX_DHCP = 15;
                  SubProtoType_ATNX_DHCPV6 = 16;
                  SubProtoType_ATNX_DNSV6 = 17;
                  SubProtoType_ATNX_EAPOL = 18;
                  SubProtoType_ATNX_FRAGMENT = 19;
                  SubProtoType_ATNX_FTPV6X_CLIENT = 20;
                  SubProtoType_ATNX_FTPV6X_SERVER = 21;
                  SubProtoType_ATNX_FTPX_CLIENT = 22;
                  SubProtoType_ATNX_FTPX_SERVER = 23;
                  SubProtoType_ATNX_HOPX_BYX_HOP = 24;
                  SubProtoType_ATNX_HWTACACS = 25;
                  SubProtoType_ATNX_ICMP = 26;
                  SubProtoType_ATNX_ICMPV6 = 27;
                  SubProtoType_ATNX_ICMPX_BROADCASTX_ADDRESSX_ECHO = 28;
                  SubProtoType_ATNX_ICMPX_ND = 29;
                  SubProtoType_ATNX_ICMPX_NOREACH = 30;
                  SubProtoType_ATNX_IGMP = 31;
                  SubProtoType_ATNX_IPFPM = 32;
                  SubProtoType_ATNX_IPV6X_FIBX_MISS = 33;
                  SubProtoType_ATNX_IPV6X_NDHX_MISS = 34;
                  SubProtoType_ATNX_IPV6X_NDX_MISS = 35;
                  SubProtoType_ATNX_IPV6X_TTLX_EXPIRE = 36;
                  SubProtoType_ATNX_ISIS = 37;
                  SubProtoType_ATNX_LACP = 38;
                  SubProtoType_ATNX_LDP = 39;
                  SubProtoType_ATNX_LLDP = 40;
                  SubProtoType_ATNX_LSPPING = 41;
                  SubProtoType_ATNX_MKA = 42;
                  SubProtoType_ATNX_MPLSX_ROUTERX_ALERT = 43;
                  SubProtoType_ATNX_MPLSX_TRACEX_ROUTE = 44;
                  SubProtoType_ATNX_MSDP = 45;
                  SubProtoType_ATNX_MTUV6 = 46;
                  SubProtoType_ATNX_NA = 47;
                  SubProtoType_ATNX_NTP = 48;
                  SubProtoType_ATNX_OSPF = 49;
                  SubProtoType_ATNX_OSPFV3 = 50;
                  SubProtoType_ATNX_OTHERS = 51;
                  SubProtoType_ATNX_PIM = 52;
                  SubProtoType_ATNX_PIMV6 = 53;
                  SubProtoType_ATNX_PPP = 54;
                  SubProtoType_ATNX_RA = 55;
                  SubProtoType_ATNX_RADIUS = 56;
                  SubProtoType_ATNX_RIP = 57;
                  SubProtoType_ATNX_RS = 58;
                  SubProtoType_ATNX_RSVP = 59;
                  SubProtoType_ATNX_SNMP = 60;
                  SubProtoType_ATNX_SSHV6X_SERVER = 61;
                  SubProtoType_ATNX_SSHX_CLIENT = 62;
                  SubProtoType_ATNX_SSHX_SERVER = 63;
                  SubProtoType_ATNX_TELNETV6X_CLIENT = 64;
                  SubProtoType_ATNX_TELNETV6X_SERVER = 65;
                  SubProtoType_ATNX_TELNETX_CLIENT = 66;
                  SubProtoType_ATNX_TELNETX_SERVER = 67;
                  SubProtoType_ATNX_TFTP = 68;
                  SubProtoType_ATNX_TRAFFICX_BEHAVIORX_LOG = 69;
                  SubProtoType_ATNX_VRRP = 70;
                  SubProtoType_BFD = 71;
                  SubProtoType_BGP = 72;
                  SubProtoType_BGPV6 = 73;
                  SubProtoType_BPDU = 74;
                  SubProtoType_DHCP = 75;
                  SubProtoType_DHCPV6 = 76;
                  SubProtoType_DIAMETER = 77;
                  SubProtoType_DNSV6 = 78;
                  SubProtoType_DNS_CLIENT = 79;
                  SubProtoType_EAPOL = 80;
                  SubProtoType_FTPV6_CLIENT = 81;
                  SubProtoType_FTPV6_SERVER = 82;
                  SubProtoType_FTP_CLIENT = 83;
                  SubProtoType_FTP_SERVER = 84;
                  SubProtoType_HTTP_REDIRECT_CHASTEN = 85;
                  SubProtoType_HWTACACS = 86;
                  SubProtoType_ICMP = 87;
                  SubProtoType_ICMPV6 = 88;
                  SubProtoType_ICMP_BROADCAST_ADDRESS_ECHO = 89;
                  SubProtoType_IGMP = 90;
                  SubProtoType_IPTV = 91;
                  SubProtoType_IPV4_FIB_MISS = 92;
                  SubProtoType_IPV4_MULTICAST_FIB_MISS = 93;
                  SubProtoType_IPV4_TTL_EXPIRE = 94;
                  SubProtoType_IPV6_FIB_MISS = 95;
                  SubProtoType_IPV6_ND_MISS = 96;
                  SubProtoType_IPV6_TTL_EXPIRE = 97;
                  SubProtoType_ISIS = 98;
                  SubProtoType_LACP = 99;
                  SubProtoType_LDP = 100;
                  SubProtoType_LLDP = 101;
                  SubProtoType_LSPPING = 102;
                  SubProtoType_MKA = 103;
                  SubProtoType_MLD = 104;
                  SubProtoType_MPLS_ARP_MISS = 105;
                  SubProtoType_MPLS_TTL_EXPIRE = 106;
                  SubProtoType_MSDP = 107;
                  SubProtoType_NA = 108;
                  SubProtoType_NA_PROTOCOL = 109;
                  SubProtoType_NETSTREAM = 110;
                  SubProtoType_NS_PROTOCOL = 111;
                  SubProtoType_NTP = 112;
                  SubProtoType_OPENFLOW = 113;
                  SubProtoType_OSPF = 114;
                  SubProtoType_OSPFV3 = 115;
                  SubProtoType_PIM = 116;
                  SubProtoType_PIMV6 = 117;
                  SubProtoType_PORTAL = 118;
                  SubProtoType_RADIUS = 119;
                  SubProtoType_RA_PROTOCOL = 120;
                  SubProtoType_RIP = 121;
                  SubProtoType_RRPP = 122;
                  SubProtoType_RSVP = 123;
                  SubProtoType_RS_PROTOCOL = 124;
                  SubProtoType_SNMP = 125;
                  SubProtoType_SNMPV6 = 126;
                  SubProtoType_SOFT_GRE = 127;
                  SubProtoType_SSHV6_SERVER = 128;
                  SubProtoType_SSH_CLIENT = 129;
                  SubProtoType_SSH_SERVER = 130;
                  SubProtoType_SYSLOG = 131;
                  SubProtoType_TELNETV6_CLIENT = 132;
                  SubProtoType_TELNETV6_SERVER = 133;
                  SubProtoType_TELNET_CLIENT = 134;
                  SubProtoType_TELNET_SERVER = 135;
                  SubProtoType_TFTP = 136;
                  SubProtoType_TFTPV6_CLIENT = 137;
                  SubProtoType_TRAFFIC_BEHAVIOR_LOG = 138;
                  SubProtoType_UNICAST_VRRP = 139;
                  SubProtoType_VRRP = 140;
                  SubProtoType_WEB = 141;
                  SubProtoType_WEB_AUTH_SERVER = 142;
                  SubProtoType_X_802DOT1AG = 143;
                  SubProtoType_ATNX_DNSX_CLIENT = 144;
                  SubProtoType_ATNX_MLD = 145;
               };
               SubProtoType subProtoType = 7;
               enum SubTcpIpType {
                  SubTcpIpType_FRAGMENT = 0;
                  SubTcpIpType_NA = 1;
                  SubTcpIpType_TCPSYN = 2;
               };
               SubTcpIpType subTcpIpType = 8;
            }
            repeated Secpolicycar secpolicycar = 1;
         }
         Secpolicycars secpolicycars = 12;
         message Secpolicyprios {
            message Secpolicyprio {
               enum SecPolicyType {
                  SecPolicyType_BLACKLIST = 0;
                  SecPolicyType_INDEX = 1;
                  SecPolicyType_PROTOCOL = 2;
                  SecPolicyType_TCPIP = 3;
                  SecPolicyType_USERFLOW = 4;
                  SecPolicyType_WHITELIST = 5;
                  SecPolicyType_WHITELISTV6 = 6;
               };
               SecPolicyType secPolicyType = 1;
               uint32 secPolicyTypeID = 2;
               enum SecPriority {
                  SecPriority_AF1 = 0;
                  SecPriority_AF2 = 1;
                  SecPriority_AF3 = 2;
                  SecPriority_AF4 = 3;
                  SecPriority_BE = 4;
                  SecPriority_CS6 = 5;
                  SecPriority_EF = 6;
                  SecPriority_HIGH = 7;
                  SecPriority_LOW = 8;
                  SecPriority_MIDDLE = 9;
               };
               SecPriority secPriority = 3;
               enum SubProtoType {
                  SubProtoType_ARP = 0;
                  SubProtoType_ARP_MISS = 1;
                  SubProtoType_ATM_INARP = 2;
                  SubProtoType_ATNX_1588ACR = 3;
                  SubProtoType_ATNX_802X_1AG = 4;
                  SubProtoType_ATNX_802X_3AH = 5;
                  SubProtoType_ATNX_ARP = 6;
                  SubProtoType_ATNX_ARPX_MISS = 7;
                  SubProtoType_ATNX_BFD = 8;
                  SubProtoType_ATNX_BGP = 9;
                  SubProtoType_ATNX_BGPV6 = 10;
                  SubProtoType_ATNX_BPDU = 11;
                  SubProtoType_ATNX_DCN = 12;
                  SubProtoType_ATNX_DEFAULTX_TCP = 13;
                  SubProtoType_ATNX_DEFAULTX_UDP = 14;
                  SubProtoType_ATNX_DHCP = 15;
                  SubProtoType_ATNX_DHCPV6 = 16;
                  SubProtoType_ATNX_DNSV6 = 17;
                  SubProtoType_ATNX_EAPOL = 18;
                  SubProtoType_ATNX_FRAGMENT = 19;
                  SubProtoType_ATNX_FTPV6X_CLIENT = 20;
                  SubProtoType_ATNX_FTPV6X_SERVER = 21;
                  SubProtoType_ATNX_FTPX_CLIENT = 22;
                  SubProtoType_ATNX_FTPX_SERVER = 23;
                  SubProtoType_ATNX_HOPX_BYX_HOP = 24;
                  SubProtoType_ATNX_HWTACACS = 25;
                  SubProtoType_ATNX_ICMP = 26;
                  SubProtoType_ATNX_ICMPV6 = 27;
                  SubProtoType_ATNX_ICMPX_BROADCASTX_ADDRESSX_ECHO = 28;
                  SubProtoType_ATNX_ICMPX_ND = 29;
                  SubProtoType_ATNX_ICMPX_NOREACH = 30;
                  SubProtoType_ATNX_IGMP = 31;
                  SubProtoType_ATNX_IPFPM = 32;
                  SubProtoType_ATNX_IPV6X_FIBX_MISS = 33;
                  SubProtoType_ATNX_IPV6X_NDHX_MISS = 34;
                  SubProtoType_ATNX_IPV6X_NDX_MISS = 35;
                  SubProtoType_ATNX_IPV6X_TTLX_EXPIRE = 36;
                  SubProtoType_ATNX_ISIS = 37;
                  SubProtoType_ATNX_LACP = 38;
                  SubProtoType_ATNX_LDP = 39;
                  SubProtoType_ATNX_LLDP = 40;
                  SubProtoType_ATNX_LSPPING = 41;
                  SubProtoType_ATNX_MKA = 42;
                  SubProtoType_ATNX_MPLSX_ROUTERX_ALERT = 43;
                  SubProtoType_ATNX_MPLSX_TRACEX_ROUTE = 44;
                  SubProtoType_ATNX_MSDP = 45;
                  SubProtoType_ATNX_MTUV6 = 46;
                  SubProtoType_ATNX_NA = 47;
                  SubProtoType_ATNX_NTP = 48;
                  SubProtoType_ATNX_OSPF = 49;
                  SubProtoType_ATNX_OSPFV3 = 50;
                  SubProtoType_ATNX_OTHERS = 51;
                  SubProtoType_ATNX_PIM = 52;
                  SubProtoType_ATNX_PIMV6 = 53;
                  SubProtoType_ATNX_PPP = 54;
                  SubProtoType_ATNX_RA = 55;
                  SubProtoType_ATNX_RADIUS = 56;
                  SubProtoType_ATNX_RIP = 57;
                  SubProtoType_ATNX_RS = 58;
                  SubProtoType_ATNX_RSVP = 59;
                  SubProtoType_ATNX_SNMP = 60;
                  SubProtoType_ATNX_SSHV6X_SERVER = 61;
                  SubProtoType_ATNX_SSHX_CLIENT = 62;
                  SubProtoType_ATNX_SSHX_SERVER = 63;
                  SubProtoType_ATNX_TELNETV6X_CLIENT = 64;
                  SubProtoType_ATNX_TELNETV6X_SERVER = 65;
                  SubProtoType_ATNX_TELNETX_CLIENT = 66;
                  SubProtoType_ATNX_TELNETX_SERVER = 67;
                  SubProtoType_ATNX_TFTP = 68;
                  SubProtoType_ATNX_TRAFFICX_BEHAVIORX_LOG = 69;
                  SubProtoType_ATNX_VRRP = 70;
                  SubProtoType_BFD = 71;
                  SubProtoType_BGP = 72;
                  SubProtoType_BGPV6 = 73;
                  SubProtoType_BPDU = 74;
                  SubProtoType_DHCP = 75;
                  SubProtoType_DHCPV6 = 76;
                  SubProtoType_DIAMETER = 77;
                  SubProtoType_DNSV6 = 78;
                  SubProtoType_DNS_CLIENT = 79;
                  SubProtoType_EAPOL = 80;
                  SubProtoType_FTPV6_CLIENT = 81;
                  SubProtoType_FTPV6_SERVER = 82;
                  SubProtoType_FTP_CLIENT = 83;
                  SubProtoType_FTP_SERVER = 84;
                  SubProtoType_HTTP_REDIRECT_CHASTEN = 85;
                  SubProtoType_HWTACACS = 86;
                  SubProtoType_ICMP = 87;
                  SubProtoType_ICMPV6 = 88;
                  SubProtoType_ICMP_BROADCAST_ADDRESS_ECHO = 89;
                  SubProtoType_IGMP = 90;
                  SubProtoType_IPTV = 91;
                  SubProtoType_IPV4_FIB_MISS = 92;
                  SubProtoType_IPV4_MULTICAST_FIB_MISS = 93;
                  SubProtoType_IPV4_TTL_EXPIRE = 94;
                  SubProtoType_IPV6_FIB_MISS = 95;
                  SubProtoType_IPV6_ND_MISS = 96;
                  SubProtoType_IPV6_TTL_EXPIRE = 97;
                  SubProtoType_ISIS = 98;
                  SubProtoType_LACP = 99;
                  SubProtoType_LDP = 100;
                  SubProtoType_LLDP = 101;
                  SubProtoType_LSPPING = 102;
                  SubProtoType_MKA = 103;
                  SubProtoType_MLD = 104;
                  SubProtoType_MPLS_ARP_MISS = 105;
                  SubProtoType_MPLS_TTL_EXPIRE = 106;
                  SubProtoType_MSDP = 107;
                  SubProtoType_NA = 108;
                  SubProtoType_NA_PROTOCOL = 109;
                  SubProtoType_NETSTREAM = 110;
                  SubProtoType_NS_PROTOCOL = 111;
                  SubProtoType_NTP = 112;
                  SubProtoType_OPENFLOW = 113;
                  SubProtoType_OSPF = 114;
                  SubProtoType_OSPFV3 = 115;
                  SubProtoType_PIM = 116;
                  SubProtoType_PIMV6 = 117;
                  SubProtoType_PORTAL = 118;
                  SubProtoType_RADIUS = 119;
                  SubProtoType_RA_PROTOCOL = 120;
                  SubProtoType_RIP = 121;
                  SubProtoType_RRPP = 122;
                  SubProtoType_RSVP = 123;
                  SubProtoType_RS_PROTOCOL = 124;
                  SubProtoType_SNMP = 125;
                  SubProtoType_SNMPV6 = 126;
                  SubProtoType_SOFT_GRE = 127;
                  SubProtoType_SSHV6_SERVER = 128;
                  SubProtoType_SSH_CLIENT = 129;
                  SubProtoType_SSH_SERVER = 130;
                  SubProtoType_SYSLOG = 131;
                  SubProtoType_TELNETV6_CLIENT = 132;
                  SubProtoType_TELNETV6_SERVER = 133;
                  SubProtoType_TELNET_CLIENT = 134;
                  SubProtoType_TELNET_SERVER = 135;
                  SubProtoType_TFTP = 136;
                  SubProtoType_TFTPV6_CLIENT = 137;
                  SubProtoType_TRAFFIC_BEHAVIOR_LOG = 138;
                  SubProtoType_UNICAST_VRRP = 139;
                  SubProtoType_VRRP = 140;
                  SubProtoType_WEB = 141;
                  SubProtoType_WEB_AUTH_SERVER = 142;
                  SubProtoType_X_802DOT1AG = 143;
                  SubProtoType_ATNX_DNSX_CLIENT = 144;
                  SubProtoType_ATNX_MLD = 145;
               };
               SubProtoType subProtoType = 4;
            }
            repeated Secpolicyprio secpolicyprio = 1;
         }
         Secpolicyprios secpolicyprios = 13;
         message Secpolicyproseq {
            enum SecProSeqBL {
               SecProSeqBL_FIFTH = 0;
               SecProSeqBL_FIRST = 1;
               SecProSeqBL_FOURTH = 2;
               SecProSeqBL_SECOND = 3;
               SecProSeqBL_SEVENTH = 4;
               SecProSeqBL_SIXTH = 5;
               SecProSeqBL_THIRD = 6;
            };
            SecProSeqBL secProSeqBL = 1;
            enum SecProSeqDLP {
               SecProSeqDLP_FIFTH = 0;
               SecProSeqDLP_FIRST = 1;
               SecProSeqDLP_FOURTH = 2;
               SecProSeqDLP_SECOND = 3;
               SecProSeqDLP_SEVENTH = 4;
               SecProSeqDLP_SIXTH = 5;
               SecProSeqDLP_THIRD = 6;
            };
            SecProSeqDLP secProSeqDLP = 2;
            enum SecProSeqFR {
               SecProSeqFR_FIFTH = 0;
               SecProSeqFR_FIRST = 1;
               SecProSeqFR_FOURTH = 2;
               SecProSeqFR_SECOND = 3;
               SecProSeqFR_SEVENTH = 4;
               SecProSeqFR_SIXTH = 5;
               SecProSeqFR_THIRD = 6;
            };
            SecProSeqFR secProSeqFR = 3;
            enum SecProSeqMNG {
               SecProSeqMNG_FIFTH = 0;
               SecProSeqMNG_FIRST = 1;
               SecProSeqMNG_FOURTH = 2;
               SecProSeqMNG_SECOND = 3;
               SecProSeqMNG_SEVENTH = 4;
               SecProSeqMNG_SIXTH = 5;
               SecProSeqMNG_THIRD = 6;
            };
            SecProSeqMNG secProSeqMNG = 4;
            enum SecProSeqTS {
               SecProSeqTS_FIFTH = 0;
               SecProSeqTS_FIRST = 1;
               SecProSeqTS_FOURTH = 2;
               SecProSeqTS_SECOND = 3;
               SecProSeqTS_SEVENTH = 4;
               SecProSeqTS_SIXTH = 5;
               SecProSeqTS_THIRD = 6;
            };
            SecProSeqTS secProSeqTS = 5;
            enum SecProSeqUF {
               SecProSeqUF_FIFTH = 0;
               SecProSeqUF_FIRST = 1;
               SecProSeqUF_FOURTH = 2;
               SecProSeqUF_SECOND = 3;
               SecProSeqUF_SEVENTH = 4;
               SecProSeqUF_SIXTH = 5;
               SecProSeqUF_THIRD = 6;
            };
            SecProSeqUF secProSeqUF = 6;
            enum SecProSeqWL {
               SecProSeqWL_FIFTH = 0;
               SecProSeqWL_FIRST = 1;
               SecProSeqWL_FOURTH = 2;
               SecProSeqWL_SECOND = 3;
               SecProSeqWL_SEVENTH = 4;
               SecProSeqWL_SIXTH = 5;
               SecProSeqWL_THIRD = 6;
            };
            SecProSeqWL secProSeqWL = 7;
         }
         Secpolicyproseq secpolicyproseq = 14;
         message Secpolicyswitchs {
            message Secpolicyswitch {
               bool secPolicyEnable = 1;
               enum SecPolicyType {
                  SecPolicyType_ACLENABLE = 0;
                  SecPolicyType_ACLIPPOOL = 1;
                  SecPolicyType_APP = 2;
                  SecPolicyType_BLACKLIST = 3;
                  SecPolicyType_DYNAMIC_LINK_PROTECTION = 4;
                  SecPolicyType_ICMP_BROADCAST_ADDRESS_ECHO = 5;
                  SecPolicyType_IPV6ENHANCE = 6;
                  SecPolicyType_MANAGEMENTACL = 7;
                  SecPolicyType_TCPIP = 8;
                  SecPolicyType_WHITELIST = 9;
                  SecPolicyType_CPACL_VPN_INSTANCE = 10;
               };
               SecPolicyType secPolicyType = 2;
               enum SecPolicyTypeID {
                  SecPolicyTypeID_IPV4_MULTICAST_FIB_MISS = 0;
                  SecPolicyTypeID_NA = 1;
                  SecPolicyTypeID_DHCP_DISCOVER = 2;
               };
               SecPolicyTypeID secPolicyTypeID = 3;
               enum SubTcpIpType {
                  SubTcpIpType_ABNORMAL = 0;
                  SubTcpIpType_FRAGMENT = 1;
                  SubTcpIpType_NA = 2;
                  SubTcpIpType_TCPSYN = 3;
                  SubTcpIpType_UDPFLOOD = 4;
                  SubTcpIpType_IPV6ABNORMAL = 5;
                  SubTcpIpType_IPV6TCPSYN = 6;
                  SubTcpIpType_IPV6UDPFLOOD = 7;
               };
               SubTcpIpType subTcpIpType = 4;
            }
            repeated Secpolicyswitch secpolicyswitch = 1;
         }
         Secpolicyswitchs secpolicyswitchs = 15;
         message Secsessioncars {
            message Secsessioncar {
               uint32 secCbs = 1;
               uint32 secCir = 2;
               bool secEnable = 3;
               uint32 secPbs = 4;
               uint32 secPir = 5;
               enum SecProtocolType {
                  SecProtocolType_BGP = 0;
                  SecProtocolType_BGPV6 = 1;
                  SecProtocolType_OSPF = 2;
               };
               SecProtocolType secProtocolType = 6;
            }
            repeated Secsessioncar secsessioncar = 1;
         }
         Secsessioncars secsessioncars = 16;
      }
      repeated Secpolicy secpolicy = 1;
   }
   Secpolicys secpolicys = 55;
   message Secsloturpfs {
      message Secsloturpf {
         string secSlotName = 1;
         enum SecUrpfLoose {
            SecUrpfLoose_TRUE = 0;
         };
         SecUrpfLoose secUrpfLoose = 2;
      }
      repeated Secsloturpf secsloturpf = 1;
   }
   Secsloturpfs secsloturpfs = 56;
   message Secvsufcpcars {
      message Secvsufcpcar {
         string secSlotName = 1;
         uint32 secVSUFPolicyCbs = 2;
         uint32 secVSUFPolicyCir = 3;
         enum SecVSUFProtoType {
            SecVSUFProtoType_BFD_DOWN = 0;
            SecVSUFProtoType_BGP = 1;
            SecVSUFProtoType_CGN_ICMP = 2;
            SecVSUFProtoType_CGN_ICMPV6 = 3;
            SecVSUFProtoType_CGN_IPV4_OTHER = 4;
            SecVSUFProtoType_CGN_IPV6_OTHER = 5;
            SecVSUFProtoType_CGN_IPV6_RAW = 6;
            SecVSUFProtoType_CGN_TOTAL = 7;
            SecVSUFProtoType_CIPHER_SA_MISS = 8;
            SecVSUFProtoType_DEFAULT = 9;
            SecVSUFProtoType_DSLITE_PRIVATE_IPV4 = 10;
            SecVSUFProtoType_FAST_CHANNEL = 11;
            SecVSUFProtoType_GRE = 12;
            SecVSUFProtoType_ICMP = 13;
            SecVSUFProtoType_IKE_DPD = 14;
            SecVSUFProtoType_IKE_TOTAL_CAR = 15;
            SecVSUFProtoType_IKE_TUNNEL_CAR = 16;
            SecVSUFProtoType_IPSEC_REKEY = 17;
            SecVSUFProtoType_IP_OPTION = 18;
            SecVSUFProtoType_MTU_EXCEED = 19;
            SecVSUFProtoType_PLAIN_SA_MISS = 20;
            SecVSUFProtoType_PST = 21;
            SecVSUFProtoType_TCP = 22;
            SecVSUFProtoType_TOTAL = 23;
            SecVSUFProtoType_UDP = 24;
         };
         SecVSUFProtoType secVSUFProtoType = 4;
      }
      repeated Secvsufcpcar secvsufcpcar = 1;
   }
   Secvsufcpcars secvsufcpcars = 57;
   message Secvsufcpcarstats {
      message Secvsufcpcarstat {
         uint64 secDropedPkts = 1;
         uint64 secPassedPkts = 2;
         string secSlotId = 3;
         enum SecVSUFProtoType {
            SecVSUFProtoType_BFD_DOWN = 0;
            SecVSUFProtoType_BGP = 1;
            SecVSUFProtoType_CGN_ICMP = 2;
            SecVSUFProtoType_CGN_ICMPV6 = 3;
            SecVSUFProtoType_CGN_IPV4_OTHER = 4;
            SecVSUFProtoType_CGN_IPV6_OTHER = 5;
            SecVSUFProtoType_CGN_IPV6_RAW = 6;
            SecVSUFProtoType_CGN_TOTAL = 7;
            SecVSUFProtoType_CIPHER_SA_MISS = 8;
            SecVSUFProtoType_DEFAULT = 9;
            SecVSUFProtoType_DSLITE_PRIVATE_IPV4 = 10;
            SecVSUFProtoType_FAST_CHANNEL = 11;
            SecVSUFProtoType_GRE = 12;
            SecVSUFProtoType_ICMP = 13;
            SecVSUFProtoType_IKE_DPD = 14;
            SecVSUFProtoType_IKE_TOTAL_CAR = 15;
            SecVSUFProtoType_IKE_TUNNEL_CAR = 16;
            SecVSUFProtoType_IPSEC_REKEY = 17;
            SecVSUFProtoType_IP_OPTION = 18;
            SecVSUFProtoType_MTU_EXCEED = 19;
            SecVSUFProtoType_PLAIN_SA_MISS = 20;
            SecVSUFProtoType_PST = 21;
            SecVSUFProtoType_TCP = 22;
            SecVSUFProtoType_TOTAL = 23;
            SecVSUFProtoType_UDP = 24;
         };
         SecVSUFProtoType secVSUFProtoType = 4;
      }
      repeated Secvsufcpcarstat secvsufcpcarstat = 1;
   }
   Secvsufcpcarstats secvsufcpcarstats = 58;
   message SocHostCarCfgs {
      message SocHostCarCfg {
         uint32 actualCbs = 1;
         uint32 actualCir = 2;
         uint32 actualPbs = 3;
         uint32 actualPir = 4;
         uint32 defaultCbs = 5;
         uint32 defaultCir = 6;
         uint32 defaultPbs = 7;
         uint32 defaultPir = 8;
         enum DroprateEn {
            DroprateEn_DISABLE = 0;
            DroprateEn_ENABLE = 1;
         };
         DroprateEn droprateEn = 9;
         enum HostCarType {
            HostCarType_HOSTCAR = 0;
            HostCarType_HTTPX_HOSTCAR = 1;
            HostCarType_VLANX_HOSTX_CAR = 2;
         };
         HostCarType hostCarType = 10;
         uint32 logInterval = 11;
         uint32 logThreshold = 12;
         string socSlotID = 13;
      }
      repeated SocHostCarCfg socHostCarCfg = 1;
   }
   SocHostCarCfgs socHostCarCfgs = 59;
   message SocHstcAdjNodes {
      message SocHstcAdjNode {
         uint32 dropThreshold = 1;
         enum HostCarType {
            HostCarType_HOSTCAR = 0;
            HostCarType_HTTPX_HOSTCAR = 1;
            HostCarType_VLANX_HOSTX_CAR = 2;
         };
         HostCarType hostCarType = 2;
         uint32 interval = 3;
         string slotID = 4;
      }
      repeated SocHstcAdjNode socHstcAdjNode = 1;
   }
   SocHstcAdjNodes socHstcAdjNodes = 60;
   message SocHstcAdjustNodes {
      message SocHstcAdjustNode {
         enum HostCarType {
            HostCarType_HOSTCAR = 0;
            HostCarType_HTTPX_HOSTCAR = 1;
            HostCarType_VLANX_HOSTX_CAR = 2;
         };
         HostCarType hostCarType = 1;
         enum IfEnable {
            IfEnable_DISABLE = 0;
            IfEnable_ENABLE = 1;
         };
         IfEnable ifEnable = 2;
         string slotID = 3;
      }
      repeated SocHstcAdjustNode socHstcAdjustNode = 1;
   }
   SocHstcAdjustNodes socHstcAdjustNodes = 61;
   message SecHostAcls {
      message SecHostAcl {
         enum SecAclFamily {
            SecAclFamily_IPV4 = 0;
            SecAclFamily_IPV6 = 1;
         };
         SecAclFamily secAclFamily = 1;
         string secAclNumOrName = 2;
         string secSlotID = 3;
      }
      repeated SecHostAcl secHostAcl = 1;
   }
   SecHostAcls secHostAcls = 62;
   message SecNdPacketFilterEn {
      bool secNdPacketFiltEnable = 1;
   }
   SecNdPacketFilterEn secNdPacketFilterEn = 63;
   message SecPortCarAlarms {
      message SecPortCarAlarm {
         bool enableFlag = 1;
         string ifName = 2;
         uint32 interval = 3;
         uint32 threshold = 4;
      }
      repeated SecPortCarAlarm secPortCarAlarm = 1;
   }
   SecPortCarAlarms secPortCarAlarms = 64;
   message Nvsecsessioncarstats {
      message Nvsecsessioncarstat {
         uint32 secApId = 1;
         string secDestinationIP = 2;
         uint32 secDestinationPort = 3;
         uint64 secGreenPkts = 4;
         uint32 secProtocolID = 5;
         enum SecProtocolType {
            SecProtocolType_BGP = 0;
            SecProtocolType_BGPV6 = 1;
            SecProtocolType_OSPF = 2;
         };
         SecProtocolType secProtocolType = 6;
         uint64 secRedPkts = 7;
         string secSlotId = 8;
         string secSourceIP = 9;
         uint32 secSourcePort = 10;
         uint32 secVsID = 11;
         uint64 secYellowPkts = 12;
         string secIPv6DestinationIP = 13;
         string secIPv6SourceIP = 14;
         uint32 secShowNo = 15;
      }
      repeated Nvsecsessioncarstat nvsecsessioncarstat = 1;
   }
   Nvsecsessioncarstats nvsecsessioncarstats = 65;
   message Secsessioncarstats {
      message Secsessioncarstat {
         string secDestinationIP = 1;
         uint32 secDestinationPort = 2;
         uint64 secGreenPkts = 3;
         uint32 secProtocolID = 4;
         enum SecProtocolType {
            SecProtocolType_BGP = 0;
            SecProtocolType_BGPV6 = 1;
            SecProtocolType_OSPF = 2;
         };
         SecProtocolType secProtocolType = 5;
         uint64 secRedPkts = 6;
         string secSlotId = 7;
         string secSourceIP = 8;
         uint32 secSourcePort = 9;
         uint32 secVsID = 10;
         uint64 secYellowPkts = 11;
         string secIPv6DestinationIP = 12;
         string secIPv6SourceIP = 13;
         uint32 secShowNo = 14;
      }
      repeated Secsessioncarstat secsessioncarstat = 1;
   }
   Secsessioncarstats secsessioncarstats = 66;
   message Policys {
      message Policy {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         bool enable = 3 [json_name = "enable"];
         bool icmp_broadcast_echo_enable = 4 [json_name = "icmp-broadcast-echo-enable"];
         message CpcarProtocolNames {
            message CpcarProtocolName {
               enum ProtocolName {
                  ProtocolName_X_1588ACR = 0;
                  ProtocolName_X_802DOT1AG = 1;
                  ProtocolName_X_802DOT3AH = 2;
                  ProtocolName_ARP = 3;
                  ProtocolName_ARPX_MISS = 4;
                  ProtocolName_ATMX_INARP = 5;
                  ProtocolName_BFD = 6;
                  ProtocolName_BGP = 7;
                  ProtocolName_BGPV6 = 8;
                  ProtocolName_BLACKLIST = 9;
                  ProtocolName_BPDU = 10;
                  ProtocolName_DCN = 11;
                  ProtocolName_DEFAULT = 12;
                  ProtocolName_DEFAULTX_TCP = 13;
                  ProtocolName_DEFAULTX_UDP = 14;
                  ProtocolName_DHCP = 15;
                  ProtocolName_DHCPV6 = 16;
                  ProtocolName_DIAMETER = 17;
                  ProtocolName_DNSX_CLIENT = 18;
                  ProtocolName_DNSV6 = 19;
                  ProtocolName_EAPOL = 20;
                  ProtocolName_FRAGMENT = 21;
                  ProtocolName_FTPX_CLIENT = 22;
                  ProtocolName_FTPX_SERVER = 23;
                  ProtocolName_FTPV6X_CLIENT = 24;
                  ProtocolName_FTPV6X_SERVER = 25;
                  ProtocolName_HOPX_BYX_HOP = 26;
                  ProtocolName_HTTPX_REDIRECTX_CHASTEN = 27;
                  ProtocolName_HWTACACS = 28;
                  ProtocolName_ICMP = 29;
                  ProtocolName_ICMPX_BROADCASTX_ADDRESSX_ECHO = 30;
                  ProtocolName_ICMPX_ND = 31;
                  ProtocolName_ICMPX_NOREACH = 32;
                  ProtocolName_ICMPV6 = 33;
                  ProtocolName_ICMPV6X_NA = 34;
                  ProtocolName_ICMPV6X_NS = 35;
                  ProtocolName_ICMPV6X_RA = 36;
                  ProtocolName_ICMPV6X_RS = 37;
                  ProtocolName_IGMP = 38;
                  ProtocolName_IPFPM = 39;
                  ProtocolName_IPTV = 40;
                  ProtocolName_IPV4X_FIBX_MISS = 41;
                  ProtocolName_IPV4X_MULTICASTX_FIBX_MISS = 42;
                  ProtocolName_IPV4X_TTLX_EXPIRE = 43;
                  ProtocolName_IPV6X_FIBX_MISS = 44;
                  ProtocolName_IPV6X_NDHX_MISS = 45;
                  ProtocolName_IPV6X_NDX_MISS = 46;
                  ProtocolName_IPV6X_TTLX_EXPIRE = 47;
                  ProtocolName_ISIS = 48;
                  ProtocolName_LACP = 49;
                  ProtocolName_LDP = 50;
                  ProtocolName_LLDP = 51;
                  ProtocolName_LSPPING = 52;
                  ProtocolName_MKA = 53;
                  ProtocolName_MLD = 54;
                  ProtocolName_MPLSX_ARPX_MISS = 55;
                  ProtocolName_MPLSX_ROUTERX_ALERT = 56;
                  ProtocolName_MPLSX_TRACEX_ROUTE = 57;
                  ProtocolName_MPLSX_TTLX_EXPIRE = 58;
                  ProtocolName_MSDP = 59;
                  ProtocolName_MTUV6 = 60;
                  ProtocolName_NETSTREAM = 61;
                  ProtocolName_NTP = 62;
                  ProtocolName_OPENFLOW = 63;
                  ProtocolName_OSPF = 64;
                  ProtocolName_OSPFV3 = 65;
                  ProtocolName_PIM = 66;
                  ProtocolName_PIMV6 = 67;
                  ProtocolName_PORTAL = 68;
                  ProtocolName_PPP = 69;
                  ProtocolName_RADIUS = 70;
                  ProtocolName_RIP = 71;
                  ProtocolName_RRPP = 72;
                  ProtocolName_RSVP = 73;
                  ProtocolName_SNMP = 74;
                  ProtocolName_SNMPV6 = 75;
                  ProtocolName_SOFTX_GRE = 76;
                  ProtocolName_SSHX_CLIENT = 77;
                  ProtocolName_SSHX_SERVER = 78;
                  ProtocolName_SSHV6X_SERVER = 79;
                  ProtocolName_SYSLOG = 80;
                  ProtocolName_TCPSYN = 81;
                  ProtocolName_TELNETX_CLIENT = 82;
                  ProtocolName_TELNETX_SERVER = 83;
                  ProtocolName_TELNETV6X_CLIENT = 84;
                  ProtocolName_TELNETV6X_SERVER = 85;
                  ProtocolName_TFTP = 86;
                  ProtocolName_TFTPV6X_CLIENT = 87;
                  ProtocolName_TRAFFICX_BEHAVIORX_LOG = 88;
                  ProtocolName_UNICASTX_VRRP = 89;
                  ProtocolName_USERX_DEFINEDX_FLOWX_1 = 90;
                  ProtocolName_USERX_DEFINEDX_FLOWX_2 = 91;
                  ProtocolName_USERX_DEFINEDX_FLOWX_3 = 92;
                  ProtocolName_USERX_DEFINEDX_FLOWX_4 = 93;
                  ProtocolName_USERX_DEFINEDX_FLOWX_5 = 94;
                  ProtocolName_USERX_DEFINEDX_FLOWX_6 = 95;
                  ProtocolName_USERX_DEFINEDX_FLOWX_7 = 96;
                  ProtocolName_USERX_DEFINEDX_FLOWX_8 = 97;
                  ProtocolName_USERX_DEFINEDX_FLOWX_9 = 98;
                  ProtocolName_USERX_DEFINEDX_FLOWX_10 = 99;
                  ProtocolName_USERX_DEFINEDX_FLOWX_11 = 100;
                  ProtocolName_USERX_DEFINEDX_FLOWX_12 = 101;
                  ProtocolName_USERX_DEFINEDX_FLOWX_13 = 102;
                  ProtocolName_USERX_DEFINEDX_FLOWX_14 = 103;
                  ProtocolName_USERX_DEFINEDX_FLOWX_15 = 104;
                  ProtocolName_USERX_DEFINEDX_FLOWX_16 = 105;
                  ProtocolName_USERX_DEFINEDX_FLOWX_17 = 106;
                  ProtocolName_USERX_DEFINEDX_FLOWX_18 = 107;
                  ProtocolName_USERX_DEFINEDX_FLOWX_19 = 108;
                  ProtocolName_USERX_DEFINEDX_FLOWX_20 = 109;
                  ProtocolName_USERX_DEFINEDX_FLOWX_21 = 110;
                  ProtocolName_USERX_DEFINEDX_FLOWX_22 = 111;
                  ProtocolName_USERX_DEFINEDX_FLOWX_23 = 112;
                  ProtocolName_USERX_DEFINEDX_FLOWX_24 = 113;
                  ProtocolName_USERX_DEFINEDX_FLOWX_25 = 114;
                  ProtocolName_USERX_DEFINEDX_FLOWX_26 = 115;
                  ProtocolName_USERX_DEFINEDX_FLOWX_27 = 116;
                  ProtocolName_USERX_DEFINEDX_FLOWX_28 = 117;
                  ProtocolName_USERX_DEFINEDX_FLOWX_29 = 118;
                  ProtocolName_USERX_DEFINEDX_FLOWX_30 = 119;
                  ProtocolName_USERX_DEFINEDX_FLOWX_31 = 120;
                  ProtocolName_USERX_DEFINEDX_FLOWX_32 = 121;
                  ProtocolName_USERX_DEFINEDX_FLOWX_33 = 122;
                  ProtocolName_USERX_DEFINEDX_FLOWX_34 = 123;
                  ProtocolName_USERX_DEFINEDX_FLOWX_35 = 124;
                  ProtocolName_USERX_DEFINEDX_FLOWX_36 = 125;
                  ProtocolName_USERX_DEFINEDX_FLOWX_37 = 126;
                  ProtocolName_USERX_DEFINEDX_FLOWX_38 = 127;
                  ProtocolName_USERX_DEFINEDX_FLOWX_39 = 128;
                  ProtocolName_USERX_DEFINEDX_FLOWX_40 = 129;
                  ProtocolName_USERX_DEFINEDX_FLOWX_41 = 130;
                  ProtocolName_USERX_DEFINEDX_FLOWX_42 = 131;
                  ProtocolName_USERX_DEFINEDX_FLOWX_43 = 132;
                  ProtocolName_USERX_DEFINEDX_FLOWX_44 = 133;
                  ProtocolName_USERX_DEFINEDX_FLOWX_45 = 134;
                  ProtocolName_USERX_DEFINEDX_FLOWX_46 = 135;
                  ProtocolName_USERX_DEFINEDX_FLOWX_47 = 136;
                  ProtocolName_USERX_DEFINEDX_FLOWX_48 = 137;
                  ProtocolName_USERX_DEFINEDX_FLOWX_49 = 138;
                  ProtocolName_USERX_DEFINEDX_FLOWX_50 = 139;
                  ProtocolName_USERX_DEFINEDX_FLOWX_51 = 140;
                  ProtocolName_USERX_DEFINEDX_FLOWX_52 = 141;
                  ProtocolName_USERX_DEFINEDX_FLOWX_53 = 142;
                  ProtocolName_USERX_DEFINEDX_FLOWX_54 = 143;
                  ProtocolName_USERX_DEFINEDX_FLOWX_55 = 144;
                  ProtocolName_USERX_DEFINEDX_FLOWX_56 = 145;
                  ProtocolName_USERX_DEFINEDX_FLOWX_57 = 146;
                  ProtocolName_USERX_DEFINEDX_FLOWX_58 = 147;
                  ProtocolName_USERX_DEFINEDX_FLOWX_59 = 148;
                  ProtocolName_USERX_DEFINEDX_FLOWX_60 = 149;
                  ProtocolName_USERX_DEFINEDX_FLOWX_61 = 150;
                  ProtocolName_USERX_DEFINEDX_FLOWX_62 = 151;
                  ProtocolName_USERX_DEFINEDX_FLOWX_63 = 152;
                  ProtocolName_USERX_DEFINEDX_FLOWX_64 = 153;
                  ProtocolName_VRRP = 154;
                  ProtocolName_WEB = 155;
                  ProtocolName_WEBX_AUTHX_SERVER = 156;
                  ProtocolName_WHITELIST = 157;
                  ProtocolName_WHITELISTX_BGP = 158;
                  ProtocolName_WHITELISTX_ISIS = 159;
                  ProtocolName_WHITELISTX_LDP = 160;
                  ProtocolName_WHITELISTX_OSPF = 161;
                  ProtocolName_WHITELISTX_RADIUS = 162;
                  ProtocolName_WHITELISTX_RSVP = 163;
                  ProtocolName_WHITELISTV6 = 164;
                  ProtocolName_WHITELISTV6X_BGPV6 = 165;
                  ProtocolName_WHITELISTV6X_OSPFV3 = 166;
                  ProtocolName_HWTACACSV6 = 167;
                  ProtocolName_LSPPINGV6 = 168;
                  ProtocolName_PCEP = 169;
                  ProtocolName_RADIUSV6 = 170;
                  ProtocolName_SYSLOGV6 = 171;
                  ProtocolName_VRRPV6 = 172;
                  ProtocolName_WEBX_AUTHX_SERVERV6 = 173;
                  ProtocolName_OTHERS = 174;
                  ProtocolName_TOTALX_PACKET = 175;
                  ProtocolName_CUSP = 176;
               };
               ProtocolName protocol_name = 1 [json_name = "protocol-name"];
               uint32 cir = 2 [json_name = "cir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 min_packet_length = 4 [json_name = "min-packet-length"];
               enum Priority {
                  INVALID_ENUM_VALUE_Priority = 0;
                  Priority_LOW = 1;
                  Priority_MIDDLE = 2;
                  Priority_HIGH = 3;
                  Priority_BE = 4;
                  Priority_AF1 = 5;
                  Priority_AF2 = 6;
                  Priority_AF3 = 7;
                  Priority_AF4 = 8;
                  Priority_EF = 9;
                  Priority_CS6 = 10;
                  Priority_CS7 = 11;
               };
               Priority priority = 5 [json_name = "priority"];
            }
            repeated CpcarProtocolName cpcar_protocol_name = 1 [json_name = "cpcar-protocol-name"];
         }
         CpcarProtocolNames cpcar_protocol_names = 5 [json_name = "cpcar-protocol-names"];
         message CpcarProtocolIds {
            message CpcarProtocolId {
               uint32 protocol_id = 1 [json_name = "protocol-id"];
               uint32 cir = 2 [json_name = "cir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 min_packet_length = 4 [json_name = "min-packet-length"];
               enum Priority {
                  INVALID_ENUM_VALUE_Priority = 0;
                  Priority_LOW = 1;
                  Priority_MIDDLE = 2;
                  Priority_HIGH = 3;
                  Priority_BE = 4;
                  Priority_AF1 = 5;
                  Priority_AF2 = 6;
                  Priority_AF3 = 7;
                  Priority_AF4 = 8;
                  Priority_EF = 9;
                  Priority_CS6 = 10;
                  Priority_CS7 = 11;
               };
               Priority priority = 5 [json_name = "priority"];
            }
            repeated CpcarProtocolId cpcar_protocol_id = 1 [json_name = "cpcar-protocol-id"];
         }
         CpcarProtocolIds cpcar_protocol_ids = 6 [json_name = "cpcar-protocol-ids"];
         message AlarmProtocolIds {
            message AlarmProtocolId {
               uint32 protocol_id = 1 [json_name = "protocol-id"];
               bool enable = 2 [json_name = "enable"];
               uint32 threshold = 3 [json_name = "threshold"];
               uint32 interval = 4 [json_name = "interval"];
               uint32 speed_threshold = 5 [json_name = "speed-threshold"];
            }
            repeated AlarmProtocolId alarm_protocol_id = 1 [json_name = "alarm-protocol-id"];
         }
         AlarmProtocolIds alarm_protocol_ids = 7 [json_name = "alarm-protocol-ids"];
         message TtlExpiredLoop {
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 resume_cycles = 4 [json_name = "resume-cycles"];
            }
            AlarmDropRate alarm_drop_rate = 1 [json_name = "alarm-drop-rate"];
         }
         TtlExpiredLoop ttl_expired_loop = 8 [json_name = "ttl-expired-loop"];
         message AlarmProtocolNames {
            message AlarmProtocolName {
               enum ProtocolName {
                  ProtocolName_X_1588ACR = 0;
                  ProtocolName_X_802DOT1AG = 1;
                  ProtocolName_X_802DOT3AH = 2;
                  ProtocolName_ARP = 3;
                  ProtocolName_ARPX_MISS = 4;
                  ProtocolName_BFD = 6;
                  ProtocolName_BGP = 7;
                  ProtocolName_BGPV6 = 8;
                  ProtocolName_BPDU = 10;
                  ProtocolName_DCN = 11;
                  ProtocolName_DEFAULTX_TCP = 13;
                  ProtocolName_DEFAULTX_UDP = 14;
                  ProtocolName_DHCP = 15;
                  ProtocolName_DHCPV6 = 16;
                  ProtocolName_DNSX_CLIENT = 18;
                  ProtocolName_DNSV6 = 19;
                  ProtocolName_EAPOL = 20;
                  ProtocolName_FTPX_CLIENT = 22;
                  ProtocolName_FTPX_SERVER = 23;
                  ProtocolName_FTPV6X_CLIENT = 24;
                  ProtocolName_FTPV6X_SERVER = 25;
                  ProtocolName_HOPX_BYX_HOP = 26;
                  ProtocolName_HWTACACS = 28;
                  ProtocolName_ICMP = 29;
                  ProtocolName_ICMPX_BROADCASTX_ADDRESSX_ECHO = 30;
                  ProtocolName_ICMPX_ND = 31;
                  ProtocolName_ICMPX_NOREACH = 32;
                  ProtocolName_ICMPV6 = 33;
                  ProtocolName_ICMPV6X_NA = 34;
                  ProtocolName_ICMPV6X_RA = 36;
                  ProtocolName_ICMPV6X_RS = 37;
                  ProtocolName_IGMP = 38;
                  ProtocolName_IPFPM = 39;
                  ProtocolName_IPV6X_FIBX_MISS = 44;
                  ProtocolName_IPV6X_NDHX_MISS = 45;
                  ProtocolName_IPV6X_NDX_MISS = 46;
                  ProtocolName_IPV6X_TTLX_EXPIRE = 47;
                  ProtocolName_ISIS = 48;
                  ProtocolName_LACP = 49;
                  ProtocolName_LDP = 50;
                  ProtocolName_LLDP = 51;
                  ProtocolName_LSPPING = 52;
                  ProtocolName_MKA = 53;
                  ProtocolName_MLD = 54;
                  ProtocolName_MPLSX_ROUTERX_ALERT = 56;
                  ProtocolName_MPLSX_TRACEX_ROUTE = 57;
                  ProtocolName_MSDP = 59;
                  ProtocolName_MTUV6 = 60;
                  ProtocolName_NTP = 62;
                  ProtocolName_OSPF = 64;
                  ProtocolName_OSPFV3 = 65;
                  ProtocolName_PIM = 66;
                  ProtocolName_PIMV6 = 67;
                  ProtocolName_PPP = 69;
                  ProtocolName_RADIUS = 70;
                  ProtocolName_RIP = 71;
                  ProtocolName_RSVP = 73;
                  ProtocolName_SNMP = 74;
                  ProtocolName_SSHX_CLIENT = 77;
                  ProtocolName_SSHX_SERVER = 78;
                  ProtocolName_SSHV6X_SERVER = 79;
                  ProtocolName_TELNETX_CLIENT = 82;
                  ProtocolName_TELNETX_SERVER = 83;
                  ProtocolName_TELNETV6X_CLIENT = 84;
                  ProtocolName_TELNETV6X_SERVER = 85;
                  ProtocolName_TFTP = 86;
                  ProtocolName_TRAFFICX_BEHAVIORX_LOG = 88;
                  ProtocolName_VRRP = 154;
                  ProtocolName_HWTACACSV6 = 167;
                  ProtocolName_LSPPINGV6 = 168;
                  ProtocolName_PCEP = 169;
                  ProtocolName_RADIUSV6 = 170;
                  ProtocolName_SYSLOGV6 = 171;
                  ProtocolName_VRRPV6 = 172;
                  ProtocolName_WEBX_AUTHX_SERVERV6 = 173;
                  ProtocolName_OTHERS = 174;
                  ProtocolName_TOTALX_PACKET = 175;
               };
               ProtocolName protocol_name = 1 [json_name = "protocol-name"];
               bool enable = 2 [json_name = "enable"];
               uint32 threshold = 3 [json_name = "threshold"];
               uint32 interval = 4 [json_name = "interval"];
               uint32 speed_threshold = 5 [json_name = "speed-threshold"];
            }
            repeated AlarmProtocolName alarm_protocol_name = 1 [json_name = "alarm-protocol-name"];
         }
         AlarmProtocolNames alarm_protocol_names = 9 [json_name = "alarm-protocol-names"];
         message MaDefend {
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
            }
            AlarmDropRate alarm_drop_rate = 1 [json_name = "alarm-drop-rate"];
         }
         MaDefend ma_defend = 10 [json_name = "ma-defend"];
         message TcpipDefend {
            bool abnormal_packet_defend_enable = 1 [json_name = "abnormal-packet-defend-enable"];
            bool udp_packet_defend_enable = 2 [json_name = "udp-packet-defend-enable"];
            bool tcpsyn_flood_enable = 3 [json_name = "tcpsyn-flood-enable"];
            bool fragment_flood_enable = 4 [json_name = "fragment-flood-enable"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 5 [json_name = "alarm-drop-rate"];
         }
         TcpipDefend tcpip_defend = 11 [json_name = "tcpip-defend"];
         message Ipv6TcpipDefend {
            bool abnormal_packet_defend_enable = 1 [json_name = "abnormal-packet-defend-enable"];
            bool udp_packet_defend_enable = 2 [json_name = "udp-packet-defend-enable"];
            bool tcpsyn_flood_enable = 3 [json_name = "tcpsyn-flood-enable"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 4 [json_name = "alarm-drop-rate"];
         }
         Ipv6TcpipDefend ipv6_tcpip_defend = 12 [json_name = "ipv6-tcpip-defend"];
         message TotalCar {
            message CpuDefendTotalCar {
               message RateLimit_Value {
                  uint32 value7 = 1 [json_name = "value"];
               }
               message RateLimit_Level {
                  enum Level7 {
                     INVALID_ENUM_VALUE_Level7 = 0;
                     Level7_LOW = 1;
                     Level7_MIDDLE = 2;
                     Level7_HIGH = 3;
                  };
                  Level7 level7 = 1 [json_name = "level"];
               }
               oneof RateLimit {
                  RateLimit_Value rate_limit_value = 1 [json_name = "value"];
                  RateLimit_Level rate_limit_level = 2 [json_name = "level"];
               }
            }
            CpuDefendTotalCar cpu_defend_total_car = 1 [json_name = "cpu-defend-total-car"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
            }
            AlarmDropRate alarm_drop_rate = 2 [json_name = "alarm-drop-rate"];
         }
         TotalCar total_car = 13 [json_name = "total-car"];
         message Urpf {
            message CpuDefendUrpf {
               enum Mode {
                  Mode_STRICT = 0;
                  Mode_LOOSE = 1;
               };
               Mode mode = 1 [json_name = "mode"];
               bool default_route = 2 [json_name = "default-route"];
            }
            CpuDefendUrpf cpu_defend_urpf = 1 [json_name = "cpu-defend-urpf"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 2 [json_name = "alarm-drop-rate"];
         }
         Urpf urpf = 14 [json_name = "urpf"];
         message DynamicLinkProtection {
            bool enable = 1 [json_name = "enable"];
         }
         DynamicLinkProtection dynamic_link_protection = 15 [json_name = "dynamic-link-protection"];
         message CrossBoardCar {
            uint32 cir = 1 [json_name = "cir"];
            uint32 cbs = 2 [json_name = "cbs"];
         }
         CrossBoardCar cross_board_car = 16 [json_name = "cross-board-car"];
         message ProcessSequence {
            enum TcpsynFlood {
               INVALID_ENUM_VALUE_TcpsynFlood = 0;
               TcpsynFlood_FIRST = 1;
               TcpsynFlood_SECOND = 2;
               TcpsynFlood_THIRD = 3;
               TcpsynFlood_FOURTH = 4;
               TcpsynFlood_FIFTH = 5;
               TcpsynFlood_SIXTH = 6;
               TcpsynFlood_SEVENTH = 7;
            };
            TcpsynFlood tcpsyn_flood = 1 [json_name = "tcpsyn-flood"];
            enum FragmentFlood {
               INVALID_ENUM_VALUE_FragmentFlood = 0;
               FragmentFlood_FIRST = 1;
               FragmentFlood_SECOND = 2;
               FragmentFlood_THIRD = 3;
               FragmentFlood_FOURTH = 4;
               FragmentFlood_FIFTH = 5;
               FragmentFlood_SIXTH = 6;
               FragmentFlood_SEVENTH = 7;
            };
            FragmentFlood fragment_flood = 2 [json_name = "fragment-flood"];
            enum DynamicLinkProtection {
               INVALID_ENUM_VALUE_DynamicLinkProtection = 0;
               DynamicLinkProtection_FIRST = 1;
               DynamicLinkProtection_SECOND = 2;
               DynamicLinkProtection_THIRD = 3;
               DynamicLinkProtection_FOURTH = 4;
               DynamicLinkProtection_FIFTH = 5;
               DynamicLinkProtection_SIXTH = 6;
               DynamicLinkProtection_SEVENTH = 7;
            };
            DynamicLinkProtection dynamic_link_protection = 3 [json_name = "dynamic-link-protection"];
            enum ManagementAcl {
               INVALID_ENUM_VALUE_ManagementAcl = 0;
               ManagementAcl_FIRST = 1;
               ManagementAcl_SECOND = 2;
               ManagementAcl_THIRD = 3;
               ManagementAcl_FOURTH = 4;
               ManagementAcl_FIFTH = 5;
               ManagementAcl_SIXTH = 6;
               ManagementAcl_SEVENTH = 7;
            };
            ManagementAcl management_acl = 4 [json_name = "management-acl"];
            enum Whitelist {
               INVALID_ENUM_VALUE_Whitelist = 0;
               Whitelist_FIRST = 1;
               Whitelist_SECOND = 2;
               Whitelist_THIRD = 3;
               Whitelist_FOURTH = 4;
               Whitelist_FIFTH = 5;
               Whitelist_SIXTH = 6;
               Whitelist_SEVENTH = 7;
            };
            Whitelist whitelist = 5 [json_name = "whitelist"];
            enum Blacklist {
               INVALID_ENUM_VALUE_Blacklist = 0;
               Blacklist_FIRST = 1;
               Blacklist_SECOND = 2;
               Blacklist_THIRD = 3;
               Blacklist_FOURTH = 4;
               Blacklist_FIFTH = 5;
               Blacklist_SIXTH = 6;
               Blacklist_SEVENTH = 7;
            };
            Blacklist blacklist = 6 [json_name = "blacklist"];
            enum UserDefinedFlow {
               INVALID_ENUM_VALUE_UserDefinedFlow = 0;
               UserDefinedFlow_FIRST = 1;
               UserDefinedFlow_SECOND = 2;
               UserDefinedFlow_THIRD = 3;
               UserDefinedFlow_FOURTH = 4;
               UserDefinedFlow_FIFTH = 5;
               UserDefinedFlow_SIXTH = 6;
               UserDefinedFlow_SEVENTH = 7;
            };
            UserDefinedFlow user_defined_flow = 7 [json_name = "user-defined-flow"];
         }
         ProcessSequence process_sequence = 17 [json_name = "process-sequence"];
         message ApplicationApperceive {
            enum DefaultAction {
               INVALID_ENUM_VALUE_DefaultAction = 0;
               DefaultAction_DROP = 1;
               DefaultAction_MINX_TOX_CP = 2;
            };
            DefaultAction default_action = 1 [json_name = "default-action"];
            bool enable = 2 [json_name = "enable"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 3 [json_name = "alarm-drop-rate"];
         }
         ApplicationApperceive application_apperceive = 18 [json_name = "application-apperceive"];
         message AttackSourceTrace {
            bool enable = 1 [json_name = "enable"];
            bool cpcar_enable = 2 [json_name = "cpcar-enable"];
            bool tcpip_defend_enable = 3 [json_name = "tcpip-defend-enable"];
            bool application_apperceive_enable = 4 [json_name = "application-apperceive-enable"];
            bool ma_defend_enable = 5 [json_name = "ma-defend-enable"];
            bool totalcar_enable = 6 [json_name = "totalcar-enable"];
            enum SampleRate {
               INVALID_ENUM_VALUE_SampleRate = 0;
               SampleRate_X_1 = 1;
               SampleRate_X_10 = 2;
               SampleRate_X_100 = 3;
               SampleRate_X_1000 = 4;
            };
            SampleRate sample_rate = 7 [json_name = "sample-rate"];
         }
         AttackSourceTrace attack_source_trace = 19 [json_name = "attack-source-trace"];
         message CpuDefendAcl {
            bool ip_pool_enable = 1 [json_name = "ip-pool-enable"];
            bool vpn_instance_enable = 2 [json_name = "vpn-instance-enable"];
            bool ipv6_enhance_enable = 3 [json_name = "ipv6-enhance-enable"];
            bool dhcp_discover_enable = 4 [json_name = "dhcp-discover-enable"];
            bool ipv4_multicast_fib_miss_enable = 5 [json_name = "ipv4-multicast-fib-miss-enable"];
            bool management_acl_enable = 6 [json_name = "management-acl-enable"];
         }
         CpuDefendAcl cpu_defend_acl = 20 [json_name = "cpu-defend-acl"];
         message TmScheduling {
            message ProtocolGroupSettings {
               message ProtocolGroupSetting {
                  enum Group {
                     INVALID_ENUM_VALUE_Group = 0;
                     Group_WHITELIST = 1;
                     Group_USERX_DEFINEDX_FLOW = 2;
                     Group_MANAGEMENT = 3;
                     Group_ROUTE = 4;
                     Group_MULTICAST = 5;
                     Group_ARP = 6;
                     Group_MPLS = 7;
                     Group_ACCESSX_USER = 8;
                     Group_LINKX_LAYER = 9;
                     Group_NETWORKX_LAYER = 10;
                     Group_SYSTEMX_MESSAGE = 12;
                     Group_BLACKLIST = 13;
                     Group_CHECKX_FAILED = 14;
                     Group_FWDDATAX_TOX_CP = 15;
                     Group_OAMX_CHECK = 16;
                     Group_CLOCK = 17;
                     Group_HEARTBEAT = 18;
                  };
                  Group group = 1 [json_name = "group"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 weight = 3 [json_name = "weight"];
               }
               repeated ProtocolGroupSetting protocol_group_setting = 1 [json_name = "protocol-group-setting"];
            }
            ProtocolGroupSettings protocol_group_settings = 1 [json_name = "protocol-group-settings"];
            message ProtocolQueueSettings {
               message ProtocolQueueSetting {
                  enum Queue {
                     INVALID_ENUM_VALUE_Queue = 0;
                     Queue_WHITELISTX_BGP = 1;
                     Queue_WHITELISTX_LDP = 2;
                     Queue_WHITELISTX_MANAGEMENT = 3;
                     Queue_WHITELISTX_MULTICAST = 4;
                     Queue_WHITELISTX_RESERVE = 5;
                     Queue_USERX_DEFINEX_FLOWX_1 = 6;
                     Queue_USERX_DEFINEX_FLOWX_2 = 7;
                     Queue_USERX_DEFINEX_FLOWX_3 = 8;
                     Queue_USERX_DEFINEX_FLOWX_4 = 9;
                     Queue_USERX_DEFINEX_FLOWX_5 = 10;
                     Queue_USERX_DEFINEX_FLOWX_6 = 11;
                     Queue_USERX_DEFINEX_FLOWX_7 = 12;
                     Queue_USERX_DEFINEX_FLOWX_8 = 13;
                     Queue_DCN = 14;
                     Queue_FTP = 15;
                     Queue_NTP = 16;
                     Queue_SNMP = 17;
                     Queue_SSH = 18;
                     Queue_SSHV6 = 19;
                     Queue_SYSLOG = 20;
                     Queue_TELNET = 21;
                     Queue_BGP = 22;
                     Queue_BGPV6 = 23;
                     Queue_ISIS = 24;
                     Queue_OSPF = 25;
                     Queue_OSPFV3 = 26;
                     Queue_RIP = 27;
                     Queue_IGMP = 28;
                     Queue_MULTICASTX_RESERVE = 29;
                     Queue_MSDP = 30;
                     Queue_PIM = 31;
                     Queue_ARP = 32;
                     Queue_ND = 33;
                     Queue_LDP = 34;
                     Queue_OAMX_PING = 35;
                     Queue_RSVP = 36;
                     Queue_VXLAN = 37;
                     Queue_BASX_ARP = 38;
                     Queue_BASX_IGMP = 39;
                     Queue_BASX_ND = 40;
                     Queue_BASX_TRIGGER = 41;
                     Queue_DHCP = 42;
                     Queue_DHCPV6 = 43;
                     Queue_EAPOL = 44;
                     Queue_L2TP = 45;
                     Queue_LLDP = 46;
                     Queue_PPP = 47;
                     Queue_VBASX_RESERVE = 48;
                     Queue_WEB = 49;
                     Queue_X_3AH = 50;
                     Queue_BFD = 51;
                     Queue_LINKX_DETECT = 52;
                     Queue_TRUNK = 53;
                     Queue_Y1731 = 54;
                     Queue_INTERFACEX_RDI = 55;
                     Queue_LAGX_CHECK = 56;
                     Queue_LAGX_PINGX_TRACE = 57;
                     Queue_MACX_VLAN = 58;
                     Queue_CLOCK = 59;
                     Queue_DEFAULT = 60;
                     Queue_DNS = 61;
                     Queue_FRAGMENT = 62;
                     Queue_GRE = 63;
                     Queue_HWTACACS = 64;
                     Queue_ICMP = 65;
                     Queue_ICMPV6 = 66;
                     Queue_IPV4X_RESERVE = 67;
                     Queue_IPV6X_OPTION = 68;
                     Queue_NHRP = 69;
                     Queue_VRRP = 70;
                     Queue_RADIUSX_DIAMETER = 71;
                     Queue_SYSTEMX_MESSAGE = 72;
                     Queue_BLACKLIST = 73;
                     Queue_CHECKX_FAILED = 74;
                     Queue_FORWARDX_DATA = 75;
                  };
                  Queue queue = 1 [json_name = "queue"];
                  uint32 weight = 2 [json_name = "weight"];
               }
               repeated ProtocolQueueSetting protocol_queue_setting = 1 [json_name = "protocol-queue-setting"];
            }
            ProtocolQueueSettings protocol_queue_settings = 2 [json_name = "protocol-queue-settings"];
            message ProtocolQueuePrioritys {
               message ProtocolQueuePriority {
                  enum Queue {
                     INVALID_ENUM_VALUE_Queue = 0;
                     Queue_WHITELISTX_BGP = 1;
                     Queue_WHITELISTX_LDP = 2;
                     Queue_WHITELISTX_MANAGEMENT = 3;
                     Queue_WHITELISTX_MULTICAST = 4;
                     Queue_WHITELISTX_RESERVE = 5;
                     Queue_USERX_DEFINEX_FLOWX_1 = 6;
                     Queue_USERX_DEFINEX_FLOWX_2 = 7;
                     Queue_USERX_DEFINEX_FLOWX_3 = 8;
                     Queue_USERX_DEFINEX_FLOWX_4 = 9;
                     Queue_USERX_DEFINEX_FLOWX_5 = 10;
                     Queue_USERX_DEFINEX_FLOWX_6 = 11;
                     Queue_USERX_DEFINEX_FLOWX_7 = 12;
                     Queue_USERX_DEFINEX_FLOWX_8 = 13;
                     Queue_DCN = 14;
                     Queue_FTP = 15;
                     Queue_NTP = 16;
                     Queue_SNMP = 17;
                     Queue_SSH = 18;
                     Queue_SSHV6 = 19;
                     Queue_SYSLOG = 20;
                     Queue_TELNET = 21;
                     Queue_BGP = 22;
                     Queue_BGPV6 = 23;
                     Queue_ISIS = 24;
                     Queue_OSPF = 25;
                     Queue_OSPFV3 = 26;
                     Queue_RIP = 27;
                     Queue_IGMP = 28;
                     Queue_MULTICASTX_RESERVE = 29;
                     Queue_MSDP = 30;
                     Queue_PIM = 31;
                     Queue_ARP = 32;
                     Queue_ND = 33;
                     Queue_LDP = 34;
                     Queue_OAMX_PING = 35;
                     Queue_RSVP = 36;
                     Queue_VXLAN = 37;
                     Queue_BASX_ARP = 38;
                     Queue_BASX_IGMP = 39;
                     Queue_BASX_ND = 40;
                     Queue_BASX_TRIGGER = 41;
                     Queue_DHCP = 42;
                     Queue_DHCPV6 = 43;
                     Queue_EAPOL = 44;
                     Queue_L2TP = 45;
                     Queue_LLDP = 46;
                     Queue_PPP = 47;
                     Queue_VBASX_RESERVE = 48;
                     Queue_WEB = 49;
                     Queue_X_3AH = 50;
                     Queue_BFD = 51;
                     Queue_LINKX_DETECT = 52;
                     Queue_TRUNK = 53;
                     Queue_Y1731 = 54;
                     Queue_INTERFACEX_RDI = 55;
                     Queue_LAGX_CHECK = 56;
                     Queue_LAGX_PINGX_TRACE = 57;
                     Queue_MACX_VLAN = 58;
                     Queue_CLOCK = 59;
                     Queue_DEFAULT = 60;
                     Queue_DNS = 61;
                     Queue_FRAGMENT = 62;
                     Queue_GRE = 63;
                     Queue_HWTACACS = 64;
                     Queue_ICMP = 65;
                     Queue_ICMPV6 = 66;
                     Queue_IPV4X_RESERVE = 67;
                     Queue_IPV6X_OPTION = 68;
                     Queue_NHRP = 69;
                     Queue_VRRP = 70;
                     Queue_RADIUSX_DIAMETER = 71;
                     Queue_SYSTEMX_MESSAGE = 72;
                     Queue_BLACKLIST = 73;
                     Queue_CHECKX_FAILED = 74;
                     Queue_FORWARDX_DATA = 75;
                  };
                  Queue queue = 1 [json_name = "queue"];
                  enum Priority {
                     Priority_BE = 0;
                     Priority_AF1 = 1;
                     Priority_AF2 = 2;
                     Priority_AF3 = 3;
                     Priority_AF4 = 4;
                     Priority_EF = 5;
                     Priority_CS6 = 6;
                     Priority_CS7 = 7;
                  };
                  Priority priority = 2 [json_name = "priority"];
                  uint32 weight = 3 [json_name = "weight"];
               }
               repeated ProtocolQueuePriority protocol_queue_priority = 1 [json_name = "protocol-queue-priority"];
            }
            ProtocolQueuePrioritys protocol_queue_prioritys = 3 [json_name = "protocol-queue-prioritys"];
         }
         TmScheduling tm_scheduling = 21 [json_name = "tm-scheduling"];
         message Blacklist {
            bool enable = 1 [json_name = "enable"];
            string ipv4_acl = 2 [json_name = "ipv4-acl"];
            string ipv6_acl = 3 [json_name = "ipv6-acl"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
            }
            AlarmDropRate alarm_drop_rate = 4 [json_name = "alarm-drop-rate"];
            message Ipv4AclType_ByIdentity {
               string ipv4_acl = 1 [json_name = "ipv4-acl"];
            }
            message Ipv4AclType_ByNumber {
               uint32 ipv4_acl_number = 1 [json_name = "ipv4-acl-number"];
            }
            oneof Ipv4AclType {
               Ipv4AclType_ByIdentity ipv4_acl_type_by_identity = 5 [json_name = "by-identity"];
               Ipv4AclType_ByNumber ipv4_acl_type_by_number = 6 [json_name = "by-number"];
            }
         }
         Blacklist blacklist = 22 [json_name = "blacklist"];
         message UserDefinedFlows {
            message UserDefinedFlow {
               uint32 flow_id = 1 [json_name = "flow-id"];
               message AlarmDropRate {
                  bool enable = 1 [json_name = "enable"];
                  uint32 threshold = 2 [json_name = "threshold"];
                  uint32 interval = 3 [json_name = "interval"];
                  uint32 speed_threshold = 4 [json_name = "speed-threshold"];
               }
               AlarmDropRate alarm_drop_rate = 2 [json_name = "alarm-drop-rate"];
               message AclType_Ipv4Identity {
                  string ipv4_acl = 1 [json_name = "ipv4-acl"];
                  bool prior = 2 [json_name = "prior"];
               }
               message AclType_Ipv4Number {
                  uint32 ipv4_acl_number = 1 [json_name = "ipv4-acl-number"];
                  bool acl_number_prior = 2 [json_name = "acl-number-prior"];
               }
               message AclType_Ipv6 {
                  string ipv6_acl = 1 [json_name = "ipv6-acl"];
               }
               oneof AclType {
                  AclType_Ipv4Identity acl_type_ipv4_identity = 3 [json_name = "ipv4-identity"];
                  AclType_Ipv4Number acl_type_ipv4_number = 4 [json_name = "ipv4-number"];
                  AclType_Ipv6 acl_type_ipv6 = 5 [json_name = "ipv6"];
               }
            }
            repeated UserDefinedFlow user_defined_flow = 1 [json_name = "user-defined-flow"];
         }
         UserDefinedFlows user_defined_flows = 23 [json_name = "user-defined-flows"];
         message Whitelist {
            bool enable = 1 [json_name = "enable"];
            string acl = 2 [json_name = "acl"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 3 [json_name = "alarm-drop-rate"];
            message AclType_ByIdentity {
               string acl = 1 [json_name = "acl"];
            }
            message AclType_ByNumber {
               uint32 acl_number = 1 [json_name = "acl-number"];
            }
            oneof AclType {
               AclType_ByIdentity acl_type_by_identity = 4 [json_name = "by-identity"];
               AclType_ByNumber acl_type_by_number = 5 [json_name = "by-number"];
            }
         }
         Whitelist whitelist = 24 [json_name = "whitelist"];
         message Ipv6Whitelist {
            bool enable = 1 [json_name = "enable"];
            string acl = 2 [json_name = "acl"];
            message AlarmDropRate {
               bool enable = 1 [json_name = "enable"];
               uint32 threshold = 2 [json_name = "threshold"];
               uint32 interval = 3 [json_name = "interval"];
               uint32 speed_threshold = 4 [json_name = "speed-threshold"];
            }
            AlarmDropRate alarm_drop_rate = 3 [json_name = "alarm-drop-rate"];
         }
         Ipv6Whitelist ipv6_whitelist = 25 [json_name = "ipv6-whitelist"];
         message WhitelistEnable {
            bool enable = 1 [json_name = "enable"];
         }
         WhitelistEnable whitelist_enable = 26 [json_name = "whitelist-enable"];
         bool user_defined_flow_car_enable = 27 [json_name = "user-defined-flow-car-enable"];
      }
      repeated Policy policy = 1 [json_name = "policy"];
   }
   Policys policys = 67 [json_name = "policys"];
   message HostCarDefense {
      message Statistics {
         message HostCar {
            message Alls {
               message All {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated All all = 1 [json_name = "all"];
            }
            Alls alls = 1 [json_name = "alls"];
            message AutoAdjusts {
               message AutoAdjust {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated AutoAdjust auto_adjust = 1 [json_name = "auto-adjust"];
            }
            AutoAdjusts auto_adjusts = 2 [json_name = "auto-adjusts"];
            message Droppeds {
               message Dropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated Dropped dropped = 1 [json_name = "dropped"];
            }
            Droppeds droppeds = 3 [json_name = "droppeds"];
            message NonDroppeds {
               message NonDropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated NonDropped non_dropped = 1 [json_name = "non-dropped"];
            }
            NonDroppeds non_droppeds = 4 [json_name = "non-droppeds"];
         }
         HostCar host_car = 1 [json_name = "host-car"];
         message HttpHostCar {
            message Alls {
               message All {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated All all = 1 [json_name = "all"];
            }
            Alls alls = 1 [json_name = "alls"];
            message AutoAdjusts {
               message AutoAdjust {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated AutoAdjust auto_adjust = 1 [json_name = "auto-adjust"];
            }
            AutoAdjusts auto_adjusts = 2 [json_name = "auto-adjusts"];
            message Droppeds {
               message Dropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated Dropped dropped = 1 [json_name = "dropped"];
            }
            Droppeds droppeds = 3 [json_name = "droppeds"];
            message NonDroppeds {
               message NonDropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated NonDropped non_dropped = 1 [json_name = "non-dropped"];
            }
            NonDroppeds non_droppeds = 4 [json_name = "non-droppeds"];
         }
         HttpHostCar http_host_car = 2 [json_name = "http-host-car"];
         message VlanHostCar {
            message Alls {
               message All {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated All all = 1 [json_name = "all"];
            }
            Alls alls = 1 [json_name = "alls"];
            message AutoAdjusts {
               message AutoAdjust {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated AutoAdjust auto_adjust = 1 [json_name = "auto-adjust"];
            }
            AutoAdjusts auto_adjusts = 2 [json_name = "auto-adjusts"];
            message Droppeds {
               message Dropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated Dropped dropped = 1 [json_name = "dropped"];
            }
            Droppeds droppeds = 3 [json_name = "droppeds"];
            message NonDroppeds {
               message NonDropped {
                  string slot = 1 [json_name = "slot"];
                  uint32 car_id = 2 [json_name = "car-id"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
               }
               repeated NonDropped non_dropped = 1 [json_name = "non-dropped"];
            }
            NonDroppeds non_droppeds = 4 [json_name = "non-droppeds"];
         }
         VlanHostCar vlan_host_car = 3 [json_name = "vlan-host-car"];
      }
      Statistics statistics = 1 [json_name = "statistics"];
      message HostCarParameters {
         message HostCarParameter {
            string slot = 1 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_HOSTX_CAR = 1;
               Type_HTTPX_HOSTX_CAR = 2;
               Type_VLANX_HOSTX_CAR = 3;
            };
            Type type = 2 [json_name = "type"];
            uint32 default_cir = 3 [json_name = "default-cir"];
            uint32 default_cbs = 4 [json_name = "default-cbs"];
            uint32 default_pir = 5 [json_name = "default-pir"];
            uint32 default_pbs = 6 [json_name = "default-pbs"];
            bool default_auto_adjust = 7 [json_name = "default-auto-adjust"];
            uint32 default_logging_interval = 8 [json_name = "default-logging-interval"];
            uint32 default_logging_discard_threshold = 9 [json_name = "default-logging-discard-threshold"];
            uint32 actual_cir = 10 [json_name = "actual-cir"];
            uint32 actual_cbs = 11 [json_name = "actual-cbs"];
            uint32 actual_pir = 12 [json_name = "actual-pir"];
            uint32 actual_pbs = 13 [json_name = "actual-pbs"];
            bool actual_auto_adjust = 14 [json_name = "actual-auto-adjust"];
            uint32 actual_logging_interval = 15 [json_name = "actual-logging-interval"];
            uint32 actual_logging_discard_threshold = 16 [json_name = "actual-logging-discard-threshold"];
         }
         repeated HostCarParameter host_car_parameter = 1 [json_name = "host-car-parameter"];
      }
      HostCarParameters host_car_parameters = 2 [json_name = "host-car-parameters"];
      message HostCarUserStates {
         message HostCarUserState {
            string slot = 1 [json_name = "slot"];
            uint32 car_id = 2 [json_name = "car-id"];
            uint32 user_id = 3 [json_name = "user-id"];
            string mac_address = 4 [json_name = "mac-address"];
            string ipv4_address = 5 [json_name = "ipv4-address"];
            string ipv6_address = 6 [json_name = "ipv6-address"];
            uint32 outer_vlan = 7 [json_name = "outer-vlan"];
            uint32 inner_vlan = 8 [json_name = "inner-vlan"];
            string user_name = 9 [json_name = "user-name"];
            enum UserStatus {
               INVALID_ENUM_VALUE_UserStatus = 0;
               UserStatus_ONLINE = 1;
               UserStatus_ONLINEX_FAIL = 2;
               UserStatus_OFFLINEX_NORMAL = 3;
               UserStatus_OFFLINEX_ABNORMAL = 4;
            };
            UserStatus user_status = 10 [json_name = "user-status"];
            string hash_mode = 11 [json_name = "hash-mode"];
            uint32 current_hash_mode = 12 [json_name = "current-hash-mode"];
         }
         repeated HostCarUserState host_car_user_state = 1 [json_name = "host-car-user-state"];
      }
      HostCarUserStates host_car_user_states = 3 [json_name = "host-car-user-states"];
   }
   HostCarDefense host_car_defense = 68 [json_name = "host-car-defense"];
   message NdAttackDefense {
      bool packet_filter = 1 [json_name = "packet-filter"];
      message PacketFilterStatisticss {
         message PacketFilterStatistics {
            string slot = 1 [json_name = "slot"];
            uint64 discard_packets = 2 [json_name = "discard-packets"];
         }
         repeated PacketFilterStatistics packet_filter_statistics = 1 [json_name = "packet-filter-statistics"];
      }
      PacketFilterStatisticss packet_filter_statisticss = 2 [json_name = "packet-filter-statisticss"];
      message NdAttackCurrents {
         message NdAttackCurrent {
            uint32 number5 = 1 [json_name = "number"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_NA = 1;
               Type_NSX_UNICAST = 2;
               Type_NSX_MULTICAST = 3;
            };
            Type type = 2 [json_name = "type"];
            string slot = 3 [json_name = "slot"];
            string physical_interface = 4 [json_name = "physical-interface"];
            string logical_interface = 5 [json_name = "logical-interface"];
            uint32 vlan_id = 6 [json_name = "vlan-id"];
            uint32 pe_vid = 7 [json_name = "pe-vid"];
            uint32 ce_vid = 8 [json_name = "ce-vid"];
            uint64 passed_packets = 9 [json_name = "passed-packets"];
            uint64 dropped_packets = 10 [json_name = "dropped-packets"];
            string defend_start_time = 11 [json_name = "defend-start-time"];
         }
         repeated NdAttackCurrent nd_attack_current = 1 [json_name = "nd-attack-current"];
      }
      NdAttackCurrents nd_attack_currents = 3 [json_name = "nd-attack-currents"];
      message NdAttackHistorys {
         message NdAttackHistory {
            uint32 number5 = 1 [json_name = "number"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_NA = 1;
               Type_NSX_UNICAST = 2;
               Type_NSX_MULTICAST = 3;
            };
            Type type = 2 [json_name = "type"];
            string slot = 3 [json_name = "slot"];
            string physical_interface = 4 [json_name = "physical-interface"];
            string logical_interface = 5 [json_name = "logical-interface"];
            uint32 vlan_id = 6 [json_name = "vlan-id"];
            uint32 pe_vid = 7 [json_name = "pe-vid"];
            uint32 ce_vid = 8 [json_name = "ce-vid"];
            uint64 passed_packets = 9 [json_name = "passed-packets"];
            uint64 dropped_packets = 10 [json_name = "dropped-packets"];
            string defend_start_time = 11 [json_name = "defend-start-time"];
            string defend_end_time = 12 [json_name = "defend-end-time"];
         }
         repeated NdAttackHistory nd_attack_history = 1 [json_name = "nd-attack-history"];
      }
      NdAttackHistorys nd_attack_historys = 4 [json_name = "nd-attack-historys"];
      message NdAttackBoardBaseds {
         message NdAttackBoardBased {
            string slot = 1 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_NA = 1;
               Type_NSX_UNICAST = 2;
               Type_NSX_MULTICAST = 3;
            };
            Type type = 2 [json_name = "type"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated NdAttackBoardBased nd_attack_board_based = 1 [json_name = "nd-attack-board-based"];
      }
      NdAttackBoardBaseds nd_attack_board_baseds = 5 [json_name = "nd-attack-board-baseds"];
   }
   NdAttackDefense nd_attack_defense = 69 [json_name = "nd-attack-defense"];
   message CrossBoardCar {
      message Statisticss {
         message Statistics {
            string slot = 1 [json_name = "slot"];
            uint64 passed_packets = 2 [json_name = "passed-packets"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint32 configured_cir = 4 [json_name = "configured-cir"];
            uint32 configured_cbs = 5 [json_name = "configured-cbs"];
            uint32 actual_cir = 6 [json_name = "actual-cir"];
            uint32 actual_cbs = 7 [json_name = "actual-cbs"];
         }
         repeated Statistics statistics = 1 [json_name = "statistics"];
      }
      Statisticss statisticss = 1 [json_name = "statisticss"];
   }
   CrossBoardCar cross_board_car = 70 [json_name = "cross-board-car"];
   message DynamicLinkProtection {
      message SessionCar {
         message Whitelists {
            message Whitelist {
               uint32 number6 = 1 [json_name = "number"];
               string slot = 2 [json_name = "slot"];
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_BGP = 1;
                  Protocol_OSPF = 3;
                  Protocol_LDPX_TCP = 5;
                  Protocol_RSVPX_TE = 7;
                  Protocol_PCEP = 8;
                  Protocol_WEBX_AUTHX_SERVER = 9;
                  Protocol_RADIUS = 11;
                  Protocol_DHCP = 13;
                  Protocol_GRPC = 15;
                  Protocol_CUSP = 17;
                  Protocol_ETRUNK = 18;
                  Protocol_RBS = 25;
                  Protocol_SELFX_PING = 28;
                  Protocol_PIM = 31;
                  Protocol_DISASTERX_RECOVERY = 33;
                  Protocol_LDPX_UDPX_REMOTE = 34;
                  Protocol_SSH = 36;
                  Protocol_TELNET = 38;
                  Protocol_FTP = 40;
                  Protocol_DHCPX_SERVER = 44;
                  Protocol_LDPX_UDPX_LOCAL = 46;
                  Protocol_SSHX_CLIENT = 47;
                  Protocol_NQAX_ICMP = 51;
                  Protocol_QXX_UDP = 53;
                  Protocol_QXX_TCP = 54;
                  Protocol_BMP = 55;
                  Protocol_RPKI = 57;
               };
               Protocol protocol = 3 [json_name = "protocol"];
               string source_ip = 4 [json_name = "source-ip"];
               uint32 source_port = 5 [json_name = "source-port"];
               string destination_ip = 6 [json_name = "destination-ip"];
               uint32 destination_port = 7 [json_name = "destination-port"];
               uint32 vs_id = 8 [json_name = "vs-id"];
               uint64 green_packets = 9 [json_name = "green-packets"];
               uint64 yellow_packets = 10 [json_name = "yellow-packets"];
               uint64 red_packets = 11 [json_name = "red-packets"];
               uint32 configured_cir = 12 [json_name = "configured-cir"];
               uint32 configured_cbs = 13 [json_name = "configured-cbs"];
               uint32 configured_pir = 14 [json_name = "configured-pir"];
               uint32 configured_pbs = 15 [json_name = "configured-pbs"];
               uint32 actual_cir = 16 [json_name = "actual-cir"];
               uint32 actual_cbs = 17 [json_name = "actual-cbs"];
               uint32 actual_pir = 18 [json_name = "actual-pir"];
               uint32 actual_pbs = 19 [json_name = "actual-pbs"];
               uint32 fixed_packet_length = 20 [json_name = "fixed-packet-length"];
               enum CirConfiguredType {
                  CirConfiguredType_APPX_DEFAULT = 0;
                  CirConfiguredType_CIRX_CONFIGURE = 1;
                  CirConfiguredType_CBSX_CONFIGURE = 2;
                  CirConfiguredType_PIRX_CONFIGURE = 4;
                  CirConfiguredType_PBSX_CONFIGURE = 8;
               };
               CirConfiguredType cir_configured_type = 21 [json_name = "cir-configured-type"];
               enum CbsConfiguredType {
                  CbsConfiguredType_APPX_DEFAULT = 0;
                  CbsConfiguredType_CIRX_CONFIGURE = 1;
                  CbsConfiguredType_CBSX_CONFIGURE = 2;
                  CbsConfiguredType_PIRX_CONFIGURE = 4;
                  CbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               CbsConfiguredType cbs_configured_type = 22 [json_name = "cbs-configured-type"];
               enum PirConfiguredType {
                  PirConfiguredType_APPX_DEFAULT = 0;
                  PirConfiguredType_CIRX_CONFIGURE = 1;
                  PirConfiguredType_CBSX_CONFIGURE = 2;
                  PirConfiguredType_PIRX_CONFIGURE = 4;
                  PirConfiguredType_PBSX_CONFIGURE = 8;
               };
               PirConfiguredType pir_configured_type = 23 [json_name = "pir-configured-type"];
               enum PbsConfiguredType {
                  PbsConfiguredType_APPX_DEFAULT = 0;
                  PbsConfiguredType_CIRX_CONFIGURE = 1;
                  PbsConfiguredType_CBSX_CONFIGURE = 2;
                  PbsConfiguredType_PIRX_CONFIGURE = 4;
                  PbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               PbsConfiguredType pbs_configured_type = 24 [json_name = "pbs-configured-type"];
            }
            repeated Whitelist whitelist = 1 [json_name = "whitelist"];
         }
         Whitelists whitelists = 1 [json_name = "whitelists"];
         message WhitelistV6S {
            message WhitelistV6 {
               uint32 number6 = 1 [json_name = "number"];
               string slot = 2 [json_name = "slot"];
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_BGPV6 = 2;
                  Protocol_OSPFV3 = 4;
                  Protocol_WEBX_AUTHX_SERVERV6 = 10;
                  Protocol_RADIUSV6 = 12;
                  Protocol_DHCPV6 = 14;
                  Protocol_GRPCV6 = 16;
                  Protocol_PIMV6 = 32;
                  Protocol_SSHV6 = 37;
                  Protocol_TELNETV6 = 39;
                  Protocol_FTPV6 = 41;
                  Protocol_DHCPV6X_SERVER = 45;
                  Protocol_RBSV6 = 49;
                  Protocol_ETRUNKV6 = 50;
                  Protocol_NQAX_ICMPV6 = 52;
                  Protocol_BMPV6 = 56;
                  Protocol_RPKIV6 = 58;
               };
               Protocol protocol = 3 [json_name = "protocol"];
               string source_ipv6 = 4 [json_name = "source-ipv6"];
               uint32 source_port = 5 [json_name = "source-port"];
               string destination_ipv6 = 6 [json_name = "destination-ipv6"];
               uint32 destination_port = 7 [json_name = "destination-port"];
               uint32 vs_id = 8 [json_name = "vs-id"];
               uint64 green_packets = 9 [json_name = "green-packets"];
               uint64 yellow_packets = 10 [json_name = "yellow-packets"];
               uint64 red_packets = 11 [json_name = "red-packets"];
               uint32 configured_cir = 12 [json_name = "configured-cir"];
               uint32 configured_cbs = 13 [json_name = "configured-cbs"];
               uint32 configured_pir = 14 [json_name = "configured-pir"];
               uint32 configured_pbs = 15 [json_name = "configured-pbs"];
               uint32 actual_cir = 16 [json_name = "actual-cir"];
               uint32 actual_cbs = 17 [json_name = "actual-cbs"];
               uint32 actual_pir = 18 [json_name = "actual-pir"];
               uint32 actual_pbs = 19 [json_name = "actual-pbs"];
               uint32 fixed_packet_length = 20 [json_name = "fixed-packet-length"];
               enum CirConfiguredType {
                  CirConfiguredType_APPX_DEFAULT = 0;
                  CirConfiguredType_CIRX_CONFIGURE = 1;
                  CirConfiguredType_CBSX_CONFIGURE = 2;
                  CirConfiguredType_PIRX_CONFIGURE = 4;
                  CirConfiguredType_PBSX_CONFIGURE = 8;
               };
               CirConfiguredType cir_configured_type = 21 [json_name = "cir-configured-type"];
               enum CbsConfiguredType {
                  CbsConfiguredType_APPX_DEFAULT = 0;
                  CbsConfiguredType_CIRX_CONFIGURE = 1;
                  CbsConfiguredType_CBSX_CONFIGURE = 2;
                  CbsConfiguredType_PIRX_CONFIGURE = 4;
                  CbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               CbsConfiguredType cbs_configured_type = 22 [json_name = "cbs-configured-type"];
               enum PirConfiguredType {
                  PirConfiguredType_APPX_DEFAULT = 0;
                  PirConfiguredType_CIRX_CONFIGURE = 1;
                  PirConfiguredType_CBSX_CONFIGURE = 2;
                  PirConfiguredType_PIRX_CONFIGURE = 4;
                  PirConfiguredType_PBSX_CONFIGURE = 8;
               };
               PirConfiguredType pir_configured_type = 23 [json_name = "pir-configured-type"];
               enum PbsConfiguredType {
                  PbsConfiguredType_APPX_DEFAULT = 0;
                  PbsConfiguredType_CIRX_CONFIGURE = 1;
                  PbsConfiguredType_CBSX_CONFIGURE = 2;
                  PbsConfiguredType_PIRX_CONFIGURE = 4;
                  PbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               PbsConfiguredType pbs_configured_type = 24 [json_name = "pbs-configured-type"];
            }
            repeated WhitelistV6 whitelist_v6 = 1 [json_name = "whitelist-v6"];
         }
         WhitelistV6S whitelist_v6s = 2 [json_name = "whitelist-v6s"];
         message WhitelistL2S {
            message WhitelistL2 {
               uint32 number6 = 1 [json_name = "number"];
               string slot = 2 [json_name = "slot"];
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_ISIS = 6;
                  Protocol_VRRP = 20;
                  Protocol_VRRPV6 = 21;
               };
               Protocol protocol = 3 [json_name = "protocol"];
               uint32 if_index = 4 [json_name = "if-index"];
               string source_mac = 5 [json_name = "source-mac"];
               uint32 source_port = 6 [json_name = "source-port"];
               string destination_mac = 7 [json_name = "destination-mac"];
               uint32 destination_port = 8 [json_name = "destination-port"];
               uint32 vs_id = 9 [json_name = "vs-id"];
               uint64 green_packets = 10 [json_name = "green-packets"];
               uint64 yellow_packets = 11 [json_name = "yellow-packets"];
               uint64 red_packets = 12 [json_name = "red-packets"];
               uint32 configured_cir = 13 [json_name = "configured-cir"];
               uint32 configured_cbs = 14 [json_name = "configured-cbs"];
               uint32 configured_pir = 15 [json_name = "configured-pir"];
               uint32 configured_pbs = 16 [json_name = "configured-pbs"];
               uint32 actual_cir = 17 [json_name = "actual-cir"];
               uint32 actual_cbs = 18 [json_name = "actual-cbs"];
               uint32 actual_pir = 19 [json_name = "actual-pir"];
               uint32 actual_pbs = 20 [json_name = "actual-pbs"];
               uint32 fixed_packet_length = 21 [json_name = "fixed-packet-length"];
               enum CirConfiguredType {
                  CirConfiguredType_APPX_DEFAULT = 0;
                  CirConfiguredType_CIRX_CONFIGURE = 1;
                  CirConfiguredType_CBSX_CONFIGURE = 2;
                  CirConfiguredType_PIRX_CONFIGURE = 4;
                  CirConfiguredType_PBSX_CONFIGURE = 8;
               };
               CirConfiguredType cir_configured_type = 22 [json_name = "cir-configured-type"];
               enum CbsConfiguredType {
                  CbsConfiguredType_APPX_DEFAULT = 0;
                  CbsConfiguredType_CIRX_CONFIGURE = 1;
                  CbsConfiguredType_CBSX_CONFIGURE = 2;
                  CbsConfiguredType_PIRX_CONFIGURE = 4;
                  CbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               CbsConfiguredType cbs_configured_type = 23 [json_name = "cbs-configured-type"];
               enum PirConfiguredType {
                  PirConfiguredType_APPX_DEFAULT = 0;
                  PirConfiguredType_CIRX_CONFIGURE = 1;
                  PirConfiguredType_CBSX_CONFIGURE = 2;
                  PirConfiguredType_PIRX_CONFIGURE = 4;
                  PirConfiguredType_PBSX_CONFIGURE = 8;
               };
               PirConfiguredType pir_configured_type = 24 [json_name = "pir-configured-type"];
               enum PbsConfiguredType {
                  PbsConfiguredType_APPX_DEFAULT = 0;
                  PbsConfiguredType_CIRX_CONFIGURE = 1;
                  PbsConfiguredType_CBSX_CONFIGURE = 2;
                  PbsConfiguredType_PIRX_CONFIGURE = 4;
                  PbsConfiguredType_PBSX_CONFIGURE = 8;
               };
               PbsConfiguredType pbs_configured_type = 25 [json_name = "pbs-configured-type"];
            }
            repeated WhitelistL2 whitelist_l2 = 1 [json_name = "whitelist-l2"];
         }
         WhitelistL2S whitelist_l2s = 3 [json_name = "whitelist-l2s"];
      }
      SessionCar session_car = 1 [json_name = "session-car"];
   }
   DynamicLinkProtection dynamic_link_protection = 71 [json_name = "dynamic-link-protection"];
   message ProtocolPortCar {
      message Statisticss {
         message Statistics {
            string interface = 1 [json_name = "interface"];
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_ARP = 1;
               Protocol_DHCP = 2;
               Protocol_SNMP = 3;
               Protocol_TELNET = 4;
               Protocol_ICMP = 5;
               Protocol_SSH = 6;
               Protocol_ICMPX_ND = 7;
               Protocol_ICMPV6 = 8;
               Protocol_PORT = 9;
            };
            Protocol protocol = 2 [json_name = "protocol"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated Statistics statistics = 1 [json_name = "statistics"];
      }
      Statisticss statisticss = 1 [json_name = "statisticss"];
   }
   ProtocolPortCar protocol_port_car = 72 [json_name = "protocol-port-car"];
   message ArpAttackDefense {
      message ArpCheckStatisticss {
         message ArpCheckStatistics {
            string slot = 1 [json_name = "slot"];
            enum Type {
               Type_CHECKX_DESTINATIONX_IP = 0;
               Type_CHECKX_VALID = 1;
            };
            Type type = 2 [json_name = "type"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated ArpCheckStatistics arp_check_statistics = 1 [json_name = "arp-check-statistics"];
      }
      ArpCheckStatisticss arp_check_statisticss = 1 [json_name = "arp-check-statisticss"];
      message ArpSafeguardStatisticss {
         message ArpSafeguardStatistics {
            string slot = 1 [json_name = "slot"];
            uint64 arp_request_packets = 2 [json_name = "arp-request-packets"];
            uint64 arp_reply_packets = 3 [json_name = "arp-reply-packets"];
            uint64 arp_tocpu_packets = 4 [json_name = "arp-tocpu-packets"];
            uint64 arp_dropped_packets = 5 [json_name = "arp-dropped-packets"];
         }
         repeated ArpSafeguardStatistics arp_safeguard_statistics = 1 [json_name = "arp-safeguard-statistics"];
      }
      ArpSafeguardStatisticss arp_safeguard_statisticss = 2 [json_name = "arp-safeguard-statisticss"];
      message ArpAttackCurrents {
         message ArpAttackCurrent {
            uint32 number5 = 1 [json_name = "number"];
            string slot = 2 [json_name = "slot"];
            string physical_interface = 3 [json_name = "physical-interface"];
            string logical_interface = 4 [json_name = "logical-interface"];
            uint32 vlan_id = 5 [json_name = "vlan-id"];
            uint32 pe_vid = 6 [json_name = "pe-vid"];
            uint32 ce_vid = 7 [json_name = "ce-vid"];
            bool enable_arp_car = 8 [json_name = "enable-arp-car"];
            uint64 passed_bytes = 9 [json_name = "passed-bytes"];
            uint64 passed_packets = 10 [json_name = "passed-packets"];
            uint64 dropped_bytes = 11 [json_name = "dropped-bytes"];
            uint64 dropped_packets = 12 [json_name = "dropped-packets"];
            string defend_start_time = 13 [json_name = "defend-start-time"];
         }
         repeated ArpAttackCurrent arp_attack_current = 1 [json_name = "arp-attack-current"];
      }
      ArpAttackCurrents arp_attack_currents = 3 [json_name = "arp-attack-currents"];
      message ArpAttackHistorys {
         message ArpAttackHistory {
            uint32 number5 = 1 [json_name = "number"];
            string slot = 2 [json_name = "slot"];
            string physical_interface = 3 [json_name = "physical-interface"];
            string logical_interface = 4 [json_name = "logical-interface"];
            uint32 vlan_id = 5 [json_name = "vlan-id"];
            uint32 pe_vid = 6 [json_name = "pe-vid"];
            uint32 ce_vid = 7 [json_name = "ce-vid"];
            bool enable_arp_car = 8 [json_name = "enable-arp-car"];
            uint64 passed_bytes = 9 [json_name = "passed-bytes"];
            uint64 passed_packets = 10 [json_name = "passed-packets"];
            uint64 dropped_bytes = 11 [json_name = "dropped-bytes"];
            uint64 dropped_packets = 12 [json_name = "dropped-packets"];
            string defend_start_time = 13 [json_name = "defend-start-time"];
            string defend_end_time = 14 [json_name = "defend-end-time"];
         }
         repeated ArpAttackHistory arp_attack_history = 1 [json_name = "arp-attack-history"];
      }
      ArpAttackHistorys arp_attack_historys = 4 [json_name = "arp-attack-historys"];
      message ArpAttackBoardBaseds {
         message ArpAttackBoardBased {
            string slot = 1 [json_name = "slot"];
            uint64 passed_bytes = 2 [json_name = "passed-bytes"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated ArpAttackBoardBased arp_attack_board_based = 1 [json_name = "arp-attack-board-based"];
      }
      ArpAttackBoardBaseds arp_attack_board_baseds = 5 [json_name = "arp-attack-board-baseds"];
   }
   ArpAttackDefense arp_attack_defense = 73 [json_name = "arp-attack-defense"];
   message ApplicationApperceive {
      message BoardBasedStates {
         message BoardBasedState {
            string slot = 1 [json_name = "slot"];
            enum ApplicationSwitch {
               ApplicationSwitch_CLOSED = 0;
               ApplicationSwitch_OPEN = 1;
            };
            ApplicationSwitch application_switch = 2 [json_name = "application-switch"];
            enum DefaultAction {
               INVALID_ENUM_VALUE_DefaultAction = 0;
               DefaultAction_DROP = 1;
               DefaultAction_MINX_TOX_CP = 2;
            };
            DefaultAction default_action = 3 [json_name = "default-action"];
         }
         repeated BoardBasedState board_based_state = 1 [json_name = "board-based-state"];
      }
      BoardBasedStates board_based_states = 1 [json_name = "board-based-states"];
      message ProtocolStates {
         message ProtocolState {
            string slot = 1 [json_name = "slot"];
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_FTPX_SERVER = 1;
               Protocol_SSHX_SERVER = 2;
               Protocol_SNMP = 3;
               Protocol_TELNETX_SERVER = 4;
               Protocol_TFTP = 5;
               Protocol_BGP = 6;
               Protocol_LDP = 7;
               Protocol_RSVP = 8;
               Protocol_OSPF = 9;
               Protocol_RIP = 10;
               Protocol_MSDP = 11;
               Protocol_PIM = 12;
               Protocol_IGMP = 13;
               Protocol_ISIS = 14;
               Protocol_FTPX_CLIENT = 15;
               Protocol_TELNETX_CLIENT = 16;
               Protocol_SSHX_CLIENT = 17;
               Protocol_NTP = 18;
               Protocol_RADIUS = 19;
               Protocol_HWTACACS = 20;
               Protocol_LSPPING = 21;
               Protocol_ICMP = 22;
               Protocol_VRRP = 23;
               Protocol_DHCP = 24;
               Protocol_DNSX_CLIENT = 25;
               Protocol_SYSLOG = 26;
               Protocol_X_802X_1AG = 27;
               Protocol_BFD = 28;
               Protocol_LACP = 29;
               Protocol_BGPV6 = 30;
               Protocol_OSPFV3 = 31;
               Protocol_FTPV6X_SERVER = 32;
               Protocol_FTPV6X_CLIENT = 33;
               Protocol_ICMPV6 = 34;
               Protocol_PIMV6 = 35;
               Protocol_SSHV6X_SERVER = 36;
               Protocol_TELNETV6X_CLIENT = 37;
               Protocol_TELNETV6X_SERVER = 38;
               Protocol_DNSX_V6 = 39;
               Protocol_WEBX_AUTHX_SERVER = 40;
               Protocol_DIAMETER = 41;
               Protocol_OPENX_FLOW = 42;
               Protocol_UNICASTX_VRRP = 43;
               Protocol_IGPMU = 44;
               Protocol_IPFPM = 45;
               Protocol_HWTACACSV6 = 46;
               Protocol_LSPPINGV6 = 47;
               Protocol_PCEP = 48;
               Protocol_RADIUSV6 = 49;
               Protocol_SYSLOGV6 = 50;
               Protocol_VRRPV6 = 51;
               Protocol_WEBX_AUTHX_SERVERV6 = 52;
               Protocol_CUSP = 53;
            };
            Protocol protocol = 2 [json_name = "protocol"];
            enum State {
               State_CLOSED = 0;
               State_OPEN = 1;
            };
            State state = 3 [json_name = "state"];
         }
         repeated ProtocolState protocol_state = 1 [json_name = "protocol-state"];
      }
      ProtocolStates protocol_states = 2 [json_name = "protocol-states"];
      message ApProtocolStates {
         message ApProtocolState {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_FTPX_SERVER = 1;
               Protocol_SSHX_SERVER = 2;
               Protocol_SNMP = 3;
               Protocol_TELNETX_SERVER = 4;
               Protocol_TFTP = 5;
               Protocol_BGP = 6;
               Protocol_LDP = 7;
               Protocol_RSVP = 8;
               Protocol_OSPF = 9;
               Protocol_RIP = 10;
               Protocol_MSDP = 11;
               Protocol_PIM = 12;
               Protocol_IGMP = 13;
               Protocol_ISIS = 14;
               Protocol_FTPX_CLIENT = 15;
               Protocol_TELNETX_CLIENT = 16;
               Protocol_SSHX_CLIENT = 17;
               Protocol_NTP = 18;
               Protocol_RADIUS = 19;
               Protocol_HWTACACS = 20;
               Protocol_LSPPING = 21;
               Protocol_ICMP = 22;
               Protocol_VRRP = 23;
               Protocol_DHCP = 24;
               Protocol_DNSX_CLIENT = 25;
               Protocol_SYSLOG = 26;
               Protocol_X_802X_1AG = 27;
               Protocol_BFD = 28;
               Protocol_LACP = 29;
               Protocol_BGPV6 = 30;
               Protocol_OSPFV3 = 31;
               Protocol_FTPV6X_SERVER = 32;
               Protocol_FTPV6X_CLIENT = 33;
               Protocol_ICMPV6 = 34;
               Protocol_PIMV6 = 35;
               Protocol_SSHV6X_SERVER = 36;
               Protocol_TELNETV6X_CLIENT = 37;
               Protocol_TELNETV6X_SERVER = 38;
               Protocol_DNSX_V6 = 39;
               Protocol_WEBX_AUTHX_SERVER = 40;
               Protocol_DIAMETER = 41;
               Protocol_OPENX_FLOW = 42;
               Protocol_UNICASTX_VRRP = 43;
               Protocol_IGPMU = 44;
               Protocol_IPFPM = 45;
               Protocol_HWTACACSV6 = 46;
               Protocol_LSPPINGV6 = 47;
               Protocol_PCEP = 48;
               Protocol_RADIUSV6 = 49;
               Protocol_SYSLOGV6 = 50;
               Protocol_VRRPV6 = 51;
               Protocol_WEBX_AUTHX_SERVERV6 = 52;
               Protocol_CUSP = 53;
            };
            Protocol protocol = 3 [json_name = "protocol"];
            enum State {
               State_CLOSED = 0;
               State_OPEN = 1;
            };
            State state = 4 [json_name = "state"];
         }
         repeated ApProtocolState ap_protocol_state = 1 [json_name = "ap-protocol-state"];
      }
      ApProtocolStates ap_protocol_states = 3 [json_name = "ap-protocol-states"];
      message ProtocolStatisticss {
         message ProtocolStatistics {
            string slot = 1 [json_name = "slot"];
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_FTPX_SERVER = 1;
               Protocol_SSHX_SERVER = 2;
               Protocol_SNMP = 3;
               Protocol_TELNETX_SERVER = 4;
               Protocol_TFTP = 5;
               Protocol_BGP = 6;
               Protocol_LDP = 7;
               Protocol_RSVP = 8;
               Protocol_OSPF = 9;
               Protocol_RIP = 10;
               Protocol_MSDP = 11;
               Protocol_PIM = 12;
               Protocol_IGMP = 13;
               Protocol_ISIS = 14;
               Protocol_FTPX_CLIENT = 15;
               Protocol_TELNETX_CLIENT = 16;
               Protocol_SSHX_CLIENT = 17;
               Protocol_NTP = 18;
               Protocol_RADIUS = 19;
               Protocol_HWTACACS = 20;
               Protocol_LSPPING = 21;
               Protocol_ICMP = 22;
               Protocol_VRRP = 23;
               Protocol_DHCP = 24;
               Protocol_DNSX_CLIENT = 25;
               Protocol_SYSLOG = 26;
               Protocol_X_802X_1AG = 27;
               Protocol_BFD = 28;
               Protocol_LACP = 29;
               Protocol_BGPV6 = 30;
               Protocol_OSPFV3 = 31;
               Protocol_FTPV6X_SERVER = 32;
               Protocol_FTPV6X_CLIENT = 33;
               Protocol_ICMPV6 = 34;
               Protocol_PIMV6 = 35;
               Protocol_SSHV6X_SERVER = 36;
               Protocol_TELNETV6X_CLIENT = 37;
               Protocol_TELNETV6X_SERVER = 38;
               Protocol_DNSX_V6 = 39;
               Protocol_WEBX_AUTHX_SERVER = 40;
               Protocol_DIAMETER = 41;
               Protocol_OPENX_FLOW = 42;
               Protocol_UNICASTX_VRRP = 43;
               Protocol_IGPMU = 44;
               Protocol_IPFPM = 45;
               Protocol_HWTACACSV6 = 46;
               Protocol_LSPPINGV6 = 47;
               Protocol_PCEP = 48;
               Protocol_RADIUSV6 = 49;
               Protocol_SYSLOGV6 = 50;
               Protocol_VRRPV6 = 51;
               Protocol_WEBX_AUTHX_SERVERV6 = 52;
               Protocol_CUSP = 53;
            };
            Protocol protocol = 2 [json_name = "protocol"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated ProtocolStatistics protocol_statistics = 1 [json_name = "protocol-statistics"];
      }
      ProtocolStatisticss protocol_statisticss = 4 [json_name = "protocol-statisticss"];
      message ApProtocolStatisticss {
         message ApProtocolStatistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            enum Protocol {
               INVALID_ENUM_VALUE_Protocol = 0;
               Protocol_FTPX_SERVER = 1;
               Protocol_SSHX_SERVER = 2;
               Protocol_SNMP = 3;
               Protocol_TELNETX_SERVER = 4;
               Protocol_TFTP = 5;
               Protocol_BGP = 6;
               Protocol_LDP = 7;
               Protocol_RSVP = 8;
               Protocol_OSPF = 9;
               Protocol_RIP = 10;
               Protocol_MSDP = 11;
               Protocol_PIM = 12;
               Protocol_IGMP = 13;
               Protocol_ISIS = 14;
               Protocol_FTPX_CLIENT = 15;
               Protocol_TELNETX_CLIENT = 16;
               Protocol_SSHX_CLIENT = 17;
               Protocol_NTP = 18;
               Protocol_RADIUS = 19;
               Protocol_HWTACACS = 20;
               Protocol_LSPPING = 21;
               Protocol_ICMP = 22;
               Protocol_VRRP = 23;
               Protocol_DHCP = 24;
               Protocol_DNSX_CLIENT = 25;
               Protocol_SYSLOG = 26;
               Protocol_X_802X_1AG = 27;
               Protocol_BFD = 28;
               Protocol_LACP = 29;
               Protocol_BGPV6 = 30;
               Protocol_OSPFV3 = 31;
               Protocol_FTPV6X_SERVER = 32;
               Protocol_FTPV6X_CLIENT = 33;
               Protocol_ICMPV6 = 34;
               Protocol_PIMV6 = 35;
               Protocol_SSHV6X_SERVER = 36;
               Protocol_TELNETV6X_CLIENT = 37;
               Protocol_TELNETV6X_SERVER = 38;
               Protocol_DNSX_V6 = 39;
               Protocol_WEBX_AUTHX_SERVER = 40;
               Protocol_DIAMETER = 41;
               Protocol_OPENX_FLOW = 42;
               Protocol_UNICASTX_VRRP = 43;
               Protocol_IGPMU = 44;
               Protocol_IPFPM = 45;
               Protocol_HWTACACSV6 = 46;
               Protocol_LSPPINGV6 = 47;
               Protocol_PCEP = 48;
               Protocol_RADIUSV6 = 49;
               Protocol_SYSLOGV6 = 50;
               Protocol_VRRPV6 = 51;
               Protocol_WEBX_AUTHX_SERVERV6 = 52;
               Protocol_CUSP = 53;
            };
            Protocol protocol = 3 [json_name = "protocol"];
            uint64 total_packets = 4 [json_name = "total-packets"];
            uint64 passed_packets = 5 [json_name = "passed-packets"];
            uint64 dropped_packets = 6 [json_name = "dropped-packets"];
         }
         repeated ApProtocolStatistics ap_protocol_statistics = 1 [json_name = "ap-protocol-statistics"];
      }
      ApProtocolStatisticss ap_protocol_statisticss = 5 [json_name = "ap-protocol-statisticss"];
   }
   ApplicationApperceive application_apperceive = 74 [json_name = "application-apperceive"];
   message AttackSourceTrace {
      message Buffers {
         message Buffer {
            string slot = 1 [json_name = "slot"];
            uint32 buffer_size = 2 [json_name = "buffer-size"];
            uint32 record_number = 3 [json_name = "record-number"];
            enum OverwriteFlag {
               OverwriteFlag_NO = 0;
               OverwriteFlag_YES = 1;
            };
            OverwriteFlag overwrite_flag = 4 [json_name = "overwrite-flag"];
         }
         repeated Buffer buffer = 1 [json_name = "buffer"];
      }
      Buffers buffers = 1 [json_name = "buffers"];
      message Verboses {
         message Verbose {
            string slot = 1 [json_name = "slot"];
            uint32 packet_number = 2 [json_name = "packet-number"];
            string interface_name = 3 [json_name = "interface-name"];
            uint32 car_index = 4 [json_name = "car-index"];
            enum AttackType {
               INVALID_ENUM_VALUE_AttackType = 0;
               AttackType_APPLICATIONX_APPERCEIVE = 1;
               AttackType_CAR = 2;
               AttackType_TOTALCAR = 3;
               AttackType_TCPIPX_DEFEND = 4;
               AttackType_MAX_DEFEND = 5;
            };
            AttackType attack_type = 5 [json_name = "attack-type"];
            string start_time = 6 [json_name = "start-time"];
            uint32 pe_vlan_id = 7 [json_name = "pe-vlan-id"];
            uint32 ce_vlan_id = 8 [json_name = "ce-vlan-id"];
            enum Layer2Type {
               Layer2Type_UNKNOWN = 0;
               Layer2Type_XX_25 = 1;
               Layer2Type_ATM = 2;
               Layer2Type_FR = 3;
               Layer2Type_PPP = 4;
               Layer2Type_CHDLC = 5;
               Layer2Type_ETHERNET = 6;
               Layer2Type_ARP = 8;
               Layer2Type_MPLS = 9;
               Layer2Type_IPV4 = 10;
               Layer2Type_IPV6 = 11;
               Layer2Type_TCP = 12;
               Layer2Type_UDP = 13;
               Layer2Type_ICMP = 14;
               Layer2Type_ICMPV6 = 15;
               Layer2Type_IGMP = 16;
            };
            Layer2Type layer_2_type = 9 [json_name = "layer-2-type"];
            string source_mac = 10 [json_name = "source-mac"];
            string destination_mac = 11 [json_name = "destination-mac"];
            uint32 protocol_number = 12 [json_name = "protocol-number"];
            enum ProtocolType {
               INVALID_ENUM_VALUE_ProtocolType = 0;
               ProtocolType_IP = 2048;
               ProtocolType_ARP = 2054;
               ProtocolType_RARP = 32821;
               ProtocolType_X_8021Q = 33024;
               ProtocolType_IPV6 = 34525;
               ProtocolType_MPLS = 34887;
               ProtocolType_PPPOE = 34915;
               ProtocolType_X_8021X = 34958;
               ProtocolType_X_8021AD = 34984;
               ProtocolType_X_8021AG = 35704;
            };
            ProtocolType protocol_type = 13 [json_name = "protocol-type"];
            uint32 atm_vpi = 14 [json_name = "atm-vpi"];
            uint32 atm_vci = 15 [json_name = "atm-vci"];
            enum Layer2Dot5Type {
               Layer2Dot5Type_UNKNOWN = 0;
               Layer2Dot5Type_ARP = 8;
               Layer2Dot5Type_MPLS = 9;
            };
            Layer2Dot5Type layer_2dot5_type = 16 [json_name = "layer-2dot5-type"];
            enum ArpType {
               INVALID_ENUM_VALUE_ArpType = 0;
               ArpType_ARPX_REQUEST = 1;
               ArpType_ARPX_REPLY = 2;
            };
            ArpType arp_type = 17 [json_name = "arp-type"];
            string source_ip = 18 [json_name = "source-ip"];
            string destination_ip = 19 [json_name = "destination-ip"];
            uint32 mpls_lable_1 = 20 [json_name = "mpls-lable-1"];
            uint32 mpls_lable_2 = 21 [json_name = "mpls-lable-2"];
            uint32 mpls_lable_3 = 22 [json_name = "mpls-lable-3"];
            uint32 mpls_lable_4 = 23 [json_name = "mpls-lable-4"];
            uint32 mpls_lable_5 = 24 [json_name = "mpls-lable-5"];
            enum Layer3Type {
               Layer3Type_UNKNOWN = 0;
               Layer3Type_IP = 10;
               Layer3Type_IPV6 = 11;
            };
            Layer3Type layer_3_type = 25 [json_name = "layer-3-type"];
            uint32 ip_version = 26 [json_name = "ip-version"];
            uint32 ip_header_length = 27 [json_name = "ip-header-length"];
            uint32 ip_type_of_service = 28 [json_name = "ip-type-of-service"];
            uint32 ip_total_length = 29 [json_name = "ip-total-length"];
            uint32 ip_identification = 30 [json_name = "ip-identification"];
            uint32 ip_fragment_offset = 31 [json_name = "ip-fragment-offset"];
            uint32 ip_ttl = 32 [json_name = "ip-ttl"];
            uint32 ip_protocol_number = 33 [json_name = "ip-protocol-number"];
            uint32 ip_checksum = 34 [json_name = "ip-checksum"];
            uint32 ipv6_traffic_class = 35 [json_name = "ipv6-traffic-class"];
            uint32 ipv6_flow_label = 36 [json_name = "ipv6-flow-label"];
            uint32 ipv6_payload_length = 37 [json_name = "ipv6-payload-length"];
            uint32 ipv6_next_header = 38 [json_name = "ipv6-next-header"];
            uint32 ipv6_hop_limit = 39 [json_name = "ipv6-hop-limit"];
            string ipv6_source_address = 40 [json_name = "ipv6-source-address"];
            string ipv6_destination_address = 41 [json_name = "ipv6-destination-address"];
            enum Layer4Type {
               Layer4Type_UNKNOWN = 0;
               Layer4Type_TCP = 12;
               Layer4Type_UDP = 13;
               Layer4Type_ICMP = 14;
               Layer4Type_ICMPV6 = 15;
               Layer4Type_IGMP = 16;
            };
            Layer4Type layer_4_type = 42 [json_name = "layer-4-type"];
            uint32 source_port = 43 [json_name = "source-port"];
            uint32 destination_port = 44 [json_name = "destination-port"];
            uint32 tcp_sequence_num = 45 [json_name = "tcp-sequence-num"];
            uint32 tcp_acknowledgement_num = 46 [json_name = "tcp-acknowledgement-num"];
            uint32 tcp_flags = 47 [json_name = "tcp-flags"];
            uint32 tcp_win_size = 48 [json_name = "tcp-win-size"];
            uint32 udp_length = 49 [json_name = "udp-length"];
            uint32 icmp_or_igmp_type = 50 [json_name = "icmp-or-igmp-type"];
            uint32 icmp_or_igmp_code = 51 [json_name = "icmp-or-igmp-code"];
            uint32 checksum = 52 [json_name = "checksum"];
            string igmp_group_address = 53 [json_name = "igmp-group-address"];
            string attack_trace_data = 54 [json_name = "attack-trace-data"];
         }
         repeated Verbose verbose = 1 [json_name = "verbose"];
      }
      Verboses verboses = 2 [json_name = "verboses"];
   }
   AttackSourceTrace attack_source_trace = 75 [json_name = "attack-source-trace"];
   message Cpcar {
      message DefaultStates {
         message DefaultState {
            string slot = 1 [json_name = "slot"];
            uint32 protocol_id = 2 [json_name = "protocol-id"];
            uint32 cir = 3 [json_name = "cir"];
            uint32 cbs = 4 [json_name = "cbs"];
            uint32 min_packet_length = 5 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 6 [json_name = "fixed-packet-length"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 7 [json_name = "priority"];
            string description = 8 [json_name = "description"];
         }
         repeated DefaultState default_state = 1 [json_name = "default-state"];
      }
      DefaultStates default_states = 1 [json_name = "default-states"];
      message ApDefaultStates {
         message ApDefaultState {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            uint32 protocol_id = 3 [json_name = "protocol-id"];
            uint32 cir = 4 [json_name = "cir"];
            uint32 cbs = 5 [json_name = "cbs"];
            uint32 min_packet_length = 6 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 7 [json_name = "fixed-packet-length"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 8 [json_name = "priority"];
            string description = 9 [json_name = "description"];
         }
         repeated ApDefaultState ap_default_state = 1 [json_name = "ap-default-state"];
      }
      ApDefaultStates ap_default_states = 2 [json_name = "ap-default-states"];
      message CurrentStates {
         message CurrentState {
            string slot = 1 [json_name = "slot"];
            uint32 protocol_id = 2 [json_name = "protocol-id"];
            uint32 cir = 3 [json_name = "cir"];
            uint32 cbs = 4 [json_name = "cbs"];
            uint32 min_packet_length = 5 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 6 [json_name = "fixed-packet-length"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 7 [json_name = "priority"];
            string description = 8 [json_name = "description"];
         }
         repeated CurrentState current_state = 1 [json_name = "current-state"];
      }
      CurrentStates current_states = 3 [json_name = "current-states"];
      message ApCurrentStates {
         message ApCurrentState {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            uint32 protocol_id = 3 [json_name = "protocol-id"];
            uint32 cir = 4 [json_name = "cir"];
            uint32 cbs = 5 [json_name = "cbs"];
            uint32 min_packet_length = 6 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 7 [json_name = "fixed-packet-length"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 8 [json_name = "priority"];
            string description = 9 [json_name = "description"];
         }
         repeated ApCurrentState ap_current_state = 1 [json_name = "ap-current-state"];
      }
      ApCurrentStates ap_current_states = 4 [json_name = "ap-current-states"];
      message ProtocolNameStatisticss {
         message ProtocolNameStatistics {
            string slot = 1 [json_name = "slot"];
            enum ProtocolName {
               ProtocolName_X_1588ACR = 0;
               ProtocolName_X_802DOT1AG = 1;
               ProtocolName_X_802DOT3AH = 2;
               ProtocolName_ARP = 3;
               ProtocolName_ARPX_MISS = 4;
               ProtocolName_ATMX_INARP = 5;
               ProtocolName_BFD = 6;
               ProtocolName_BGP = 7;
               ProtocolName_BGPV6 = 8;
               ProtocolName_BLACKLIST = 9;
               ProtocolName_BPDU = 10;
               ProtocolName_DCN = 11;
               ProtocolName_DEFAULT = 12;
               ProtocolName_DEFAULTX_TCP = 13;
               ProtocolName_DEFAULTX_UDP = 14;
               ProtocolName_DHCP = 15;
               ProtocolName_DHCPV6 = 16;
               ProtocolName_DIAMETER = 17;
               ProtocolName_DNSX_CLIENT = 18;
               ProtocolName_DNSV6 = 19;
               ProtocolName_EAPOL = 20;
               ProtocolName_FRAGMENT = 21;
               ProtocolName_FTPX_CLIENT = 22;
               ProtocolName_FTPX_SERVER = 23;
               ProtocolName_FTPV6X_CLIENT = 24;
               ProtocolName_FTPV6X_SERVER = 25;
               ProtocolName_HOPX_BYX_HOP = 26;
               ProtocolName_HTTPX_REDIRECTX_CHASTEN = 27;
               ProtocolName_HWTACACS = 28;
               ProtocolName_ICMP = 29;
               ProtocolName_ICMPX_BROADCASTX_ADDRESSX_ECHO = 30;
               ProtocolName_ICMPX_ND = 31;
               ProtocolName_ICMPX_NOREACH = 32;
               ProtocolName_ICMPV6 = 33;
               ProtocolName_ICMPV6X_NA = 34;
               ProtocolName_ICMPV6X_NS = 35;
               ProtocolName_ICMPV6X_RA = 36;
               ProtocolName_ICMPV6X_RS = 37;
               ProtocolName_IGMP = 38;
               ProtocolName_IPFPM = 39;
               ProtocolName_IPTV = 40;
               ProtocolName_IPV4X_FIBX_MISS = 41;
               ProtocolName_IPV4X_MULTICASTX_FIBX_MISS = 42;
               ProtocolName_IPV4X_TTLX_EXPIRE = 43;
               ProtocolName_IPV6X_FIBX_MISS = 44;
               ProtocolName_IPV6X_NDHX_MISS = 45;
               ProtocolName_IPV6X_NDX_MISS = 46;
               ProtocolName_IPV6X_TTLX_EXPIRE = 47;
               ProtocolName_ISIS = 48;
               ProtocolName_LACP = 49;
               ProtocolName_LDP = 50;
               ProtocolName_LLDP = 51;
               ProtocolName_LSPPING = 52;
               ProtocolName_MKA = 53;
               ProtocolName_MLD = 54;
               ProtocolName_MPLSX_ARPX_MISS = 55;
               ProtocolName_MPLSX_ROUTERX_ALERT = 56;
               ProtocolName_MPLSX_TRACEX_ROUTE = 57;
               ProtocolName_MPLSX_TTLX_EXPIRE = 58;
               ProtocolName_MSDP = 59;
               ProtocolName_MTUV6 = 60;
               ProtocolName_NETSTREAM = 61;
               ProtocolName_NTP = 62;
               ProtocolName_OPENFLOW = 63;
               ProtocolName_OSPF = 64;
               ProtocolName_OSPFV3 = 65;
               ProtocolName_PIM = 66;
               ProtocolName_PIMV6 = 67;
               ProtocolName_PORTAL = 68;
               ProtocolName_PPP = 69;
               ProtocolName_RADIUS = 70;
               ProtocolName_RIP = 71;
               ProtocolName_RRPP = 72;
               ProtocolName_RSVP = 73;
               ProtocolName_SNMP = 74;
               ProtocolName_SNMPV6 = 75;
               ProtocolName_SOFTX_GRE = 76;
               ProtocolName_SSHX_CLIENT = 77;
               ProtocolName_SSHX_SERVER = 78;
               ProtocolName_SSHV6X_SERVER = 79;
               ProtocolName_SYSLOG = 80;
               ProtocolName_TCPSYN = 81;
               ProtocolName_TELNETX_CLIENT = 82;
               ProtocolName_TELNETX_SERVER = 83;
               ProtocolName_TELNETV6X_CLIENT = 84;
               ProtocolName_TELNETV6X_SERVER = 85;
               ProtocolName_TFTP = 86;
               ProtocolName_TFTPV6X_CLIENT = 87;
               ProtocolName_TRAFFICX_BEHAVIORX_LOG = 88;
               ProtocolName_UNICASTX_VRRP = 89;
               ProtocolName_USERX_DEFINEDX_FLOWX_1 = 90;
               ProtocolName_USERX_DEFINEDX_FLOWX_2 = 91;
               ProtocolName_USERX_DEFINEDX_FLOWX_3 = 92;
               ProtocolName_USERX_DEFINEDX_FLOWX_4 = 93;
               ProtocolName_USERX_DEFINEDX_FLOWX_5 = 94;
               ProtocolName_USERX_DEFINEDX_FLOWX_6 = 95;
               ProtocolName_USERX_DEFINEDX_FLOWX_7 = 96;
               ProtocolName_USERX_DEFINEDX_FLOWX_8 = 97;
               ProtocolName_USERX_DEFINEDX_FLOWX_9 = 98;
               ProtocolName_USERX_DEFINEDX_FLOWX_10 = 99;
               ProtocolName_USERX_DEFINEDX_FLOWX_11 = 100;
               ProtocolName_USERX_DEFINEDX_FLOWX_12 = 101;
               ProtocolName_USERX_DEFINEDX_FLOWX_13 = 102;
               ProtocolName_USERX_DEFINEDX_FLOWX_14 = 103;
               ProtocolName_USERX_DEFINEDX_FLOWX_15 = 104;
               ProtocolName_USERX_DEFINEDX_FLOWX_16 = 105;
               ProtocolName_USERX_DEFINEDX_FLOWX_17 = 106;
               ProtocolName_USERX_DEFINEDX_FLOWX_18 = 107;
               ProtocolName_USERX_DEFINEDX_FLOWX_19 = 108;
               ProtocolName_USERX_DEFINEDX_FLOWX_20 = 109;
               ProtocolName_USERX_DEFINEDX_FLOWX_21 = 110;
               ProtocolName_USERX_DEFINEDX_FLOWX_22 = 111;
               ProtocolName_USERX_DEFINEDX_FLOWX_23 = 112;
               ProtocolName_USERX_DEFINEDX_FLOWX_24 = 113;
               ProtocolName_USERX_DEFINEDX_FLOWX_25 = 114;
               ProtocolName_USERX_DEFINEDX_FLOWX_26 = 115;
               ProtocolName_USERX_DEFINEDX_FLOWX_27 = 116;
               ProtocolName_USERX_DEFINEDX_FLOWX_28 = 117;
               ProtocolName_USERX_DEFINEDX_FLOWX_29 = 118;
               ProtocolName_USERX_DEFINEDX_FLOWX_30 = 119;
               ProtocolName_USERX_DEFINEDX_FLOWX_31 = 120;
               ProtocolName_USERX_DEFINEDX_FLOWX_32 = 121;
               ProtocolName_USERX_DEFINEDX_FLOWX_33 = 122;
               ProtocolName_USERX_DEFINEDX_FLOWX_34 = 123;
               ProtocolName_USERX_DEFINEDX_FLOWX_35 = 124;
               ProtocolName_USERX_DEFINEDX_FLOWX_36 = 125;
               ProtocolName_USERX_DEFINEDX_FLOWX_37 = 126;
               ProtocolName_USERX_DEFINEDX_FLOWX_38 = 127;
               ProtocolName_USERX_DEFINEDX_FLOWX_39 = 128;
               ProtocolName_USERX_DEFINEDX_FLOWX_40 = 129;
               ProtocolName_USERX_DEFINEDX_FLOWX_41 = 130;
               ProtocolName_USERX_DEFINEDX_FLOWX_42 = 131;
               ProtocolName_USERX_DEFINEDX_FLOWX_43 = 132;
               ProtocolName_USERX_DEFINEDX_FLOWX_44 = 133;
               ProtocolName_USERX_DEFINEDX_FLOWX_45 = 134;
               ProtocolName_USERX_DEFINEDX_FLOWX_46 = 135;
               ProtocolName_USERX_DEFINEDX_FLOWX_47 = 136;
               ProtocolName_USERX_DEFINEDX_FLOWX_48 = 137;
               ProtocolName_USERX_DEFINEDX_FLOWX_49 = 138;
               ProtocolName_USERX_DEFINEDX_FLOWX_50 = 139;
               ProtocolName_USERX_DEFINEDX_FLOWX_51 = 140;
               ProtocolName_USERX_DEFINEDX_FLOWX_52 = 141;
               ProtocolName_USERX_DEFINEDX_FLOWX_53 = 142;
               ProtocolName_USERX_DEFINEDX_FLOWX_54 = 143;
               ProtocolName_USERX_DEFINEDX_FLOWX_55 = 144;
               ProtocolName_USERX_DEFINEDX_FLOWX_56 = 145;
               ProtocolName_USERX_DEFINEDX_FLOWX_57 = 146;
               ProtocolName_USERX_DEFINEDX_FLOWX_58 = 147;
               ProtocolName_USERX_DEFINEDX_FLOWX_59 = 148;
               ProtocolName_USERX_DEFINEDX_FLOWX_60 = 149;
               ProtocolName_USERX_DEFINEDX_FLOWX_61 = 150;
               ProtocolName_USERX_DEFINEDX_FLOWX_62 = 151;
               ProtocolName_USERX_DEFINEDX_FLOWX_63 = 152;
               ProtocolName_USERX_DEFINEDX_FLOWX_64 = 153;
               ProtocolName_VRRP = 154;
               ProtocolName_WEB = 155;
               ProtocolName_WEBX_AUTHX_SERVER = 156;
               ProtocolName_WHITELIST = 157;
               ProtocolName_WHITELISTX_BGP = 158;
               ProtocolName_WHITELISTX_ISIS = 159;
               ProtocolName_WHITELISTX_LDP = 160;
               ProtocolName_WHITELISTX_OSPF = 161;
               ProtocolName_WHITELISTX_RADIUS = 162;
               ProtocolName_WHITELISTX_RSVP = 163;
               ProtocolName_WHITELISTV6 = 164;
               ProtocolName_WHITELISTV6X_BGPV6 = 165;
               ProtocolName_WHITELISTV6X_OSPFV3 = 166;
               ProtocolName_HWTACACSV6 = 167;
               ProtocolName_LSPPINGV6 = 168;
               ProtocolName_PCEP = 169;
               ProtocolName_RADIUSV6 = 170;
               ProtocolName_SYSLOGV6 = 171;
               ProtocolName_VRRPV6 = 172;
               ProtocolName_WEBX_AUTHX_SERVERV6 = 173;
               ProtocolName_OTHERS = 174;
               ProtocolName_TOTALX_PACKET = 175;
               ProtocolName_CUSP = 176;
            };
            ProtocolName protocol_name = 2 [json_name = "protocol-name"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
            uint64 acl_denied_packets = 5 [json_name = "acl-denied-packets"];
            uint32 configured_cir = 6 [json_name = "configured-cir"];
            uint32 configured_cbs = 7 [json_name = "configured-cbs"];
            uint32 actual_cir = 8 [json_name = "actual-cir"];
            uint32 actual_cbs = 9 [json_name = "actual-cbs"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 10 [json_name = "priority"];
            uint32 min_packet_length = 11 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 12 [json_name = "fixed-packet-length"];
            string last_drop_start_time = 13 [json_name = "last-drop-start-time"];
            string last_drop_end_time = 14 [json_name = "last-drop-end-time"];
            uint64 last_drop_rate = 15 [json_name = "last-drop-rate"];
            uint64 last_drop_packets = 16 [json_name = "last-drop-packets"];
            string peak_rate_time = 17 [json_name = "peak-rate-time"];
            uint64 peak_rate = 18 [json_name = "peak-rate"];
         }
         repeated ProtocolNameStatistics protocol_name_statistics = 1 [json_name = "protocol-name-statistics"];
      }
      ProtocolNameStatisticss protocol_name_statisticss = 5 [json_name = "protocol-name-statisticss"];
      message ApProtocolNameStatisticss {
         message ApProtocolNameStatistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            enum ProtocolName {
               ProtocolName_X_1588ACR = 0;
               ProtocolName_X_802DOT1AG = 1;
               ProtocolName_X_802DOT3AH = 2;
               ProtocolName_ARP = 3;
               ProtocolName_ARPX_MISS = 4;
               ProtocolName_ATMX_INARP = 5;
               ProtocolName_BFD = 6;
               ProtocolName_BGP = 7;
               ProtocolName_BGPV6 = 8;
               ProtocolName_BLACKLIST = 9;
               ProtocolName_BPDU = 10;
               ProtocolName_DCN = 11;
               ProtocolName_DEFAULT = 12;
               ProtocolName_DEFAULTX_TCP = 13;
               ProtocolName_DEFAULTX_UDP = 14;
               ProtocolName_DHCP = 15;
               ProtocolName_DHCPV6 = 16;
               ProtocolName_DIAMETER = 17;
               ProtocolName_DNSX_CLIENT = 18;
               ProtocolName_DNSV6 = 19;
               ProtocolName_EAPOL = 20;
               ProtocolName_FRAGMENT = 21;
               ProtocolName_FTPX_CLIENT = 22;
               ProtocolName_FTPX_SERVER = 23;
               ProtocolName_FTPV6X_CLIENT = 24;
               ProtocolName_FTPV6X_SERVER = 25;
               ProtocolName_HOPX_BYX_HOP = 26;
               ProtocolName_HTTPX_REDIRECTX_CHASTEN = 27;
               ProtocolName_HWTACACS = 28;
               ProtocolName_ICMP = 29;
               ProtocolName_ICMPX_BROADCASTX_ADDRESSX_ECHO = 30;
               ProtocolName_ICMPX_ND = 31;
               ProtocolName_ICMPX_NOREACH = 32;
               ProtocolName_ICMPV6 = 33;
               ProtocolName_ICMPV6X_NA = 34;
               ProtocolName_ICMPV6X_NS = 35;
               ProtocolName_ICMPV6X_RA = 36;
               ProtocolName_ICMPV6X_RS = 37;
               ProtocolName_IGMP = 38;
               ProtocolName_IPFPM = 39;
               ProtocolName_IPTV = 40;
               ProtocolName_IPV4X_FIBX_MISS = 41;
               ProtocolName_IPV4X_MULTICASTX_FIBX_MISS = 42;
               ProtocolName_IPV4X_TTLX_EXPIRE = 43;
               ProtocolName_IPV6X_FIBX_MISS = 44;
               ProtocolName_IPV6X_NDHX_MISS = 45;
               ProtocolName_IPV6X_NDX_MISS = 46;
               ProtocolName_IPV6X_TTLX_EXPIRE = 47;
               ProtocolName_ISIS = 48;
               ProtocolName_LACP = 49;
               ProtocolName_LDP = 50;
               ProtocolName_LLDP = 51;
               ProtocolName_LSPPING = 52;
               ProtocolName_MKA = 53;
               ProtocolName_MLD = 54;
               ProtocolName_MPLSX_ARPX_MISS = 55;
               ProtocolName_MPLSX_ROUTERX_ALERT = 56;
               ProtocolName_MPLSX_TRACEX_ROUTE = 57;
               ProtocolName_MPLSX_TTLX_EXPIRE = 58;
               ProtocolName_MSDP = 59;
               ProtocolName_MTUV6 = 60;
               ProtocolName_NETSTREAM = 61;
               ProtocolName_NTP = 62;
               ProtocolName_OPENFLOW = 63;
               ProtocolName_OSPF = 64;
               ProtocolName_OSPFV3 = 65;
               ProtocolName_PIM = 66;
               ProtocolName_PIMV6 = 67;
               ProtocolName_PORTAL = 68;
               ProtocolName_PPP = 69;
               ProtocolName_RADIUS = 70;
               ProtocolName_RIP = 71;
               ProtocolName_RRPP = 72;
               ProtocolName_RSVP = 73;
               ProtocolName_SNMP = 74;
               ProtocolName_SNMPV6 = 75;
               ProtocolName_SOFTX_GRE = 76;
               ProtocolName_SSHX_CLIENT = 77;
               ProtocolName_SSHX_SERVER = 78;
               ProtocolName_SSHV6X_SERVER = 79;
               ProtocolName_SYSLOG = 80;
               ProtocolName_TCPSYN = 81;
               ProtocolName_TELNETX_CLIENT = 82;
               ProtocolName_TELNETX_SERVER = 83;
               ProtocolName_TELNETV6X_CLIENT = 84;
               ProtocolName_TELNETV6X_SERVER = 85;
               ProtocolName_TFTP = 86;
               ProtocolName_TFTPV6X_CLIENT = 87;
               ProtocolName_TRAFFICX_BEHAVIORX_LOG = 88;
               ProtocolName_UNICASTX_VRRP = 89;
               ProtocolName_USERX_DEFINEDX_FLOWX_1 = 90;
               ProtocolName_USERX_DEFINEDX_FLOWX_2 = 91;
               ProtocolName_USERX_DEFINEDX_FLOWX_3 = 92;
               ProtocolName_USERX_DEFINEDX_FLOWX_4 = 93;
               ProtocolName_USERX_DEFINEDX_FLOWX_5 = 94;
               ProtocolName_USERX_DEFINEDX_FLOWX_6 = 95;
               ProtocolName_USERX_DEFINEDX_FLOWX_7 = 96;
               ProtocolName_USERX_DEFINEDX_FLOWX_8 = 97;
               ProtocolName_USERX_DEFINEDX_FLOWX_9 = 98;
               ProtocolName_USERX_DEFINEDX_FLOWX_10 = 99;
               ProtocolName_USERX_DEFINEDX_FLOWX_11 = 100;
               ProtocolName_USERX_DEFINEDX_FLOWX_12 = 101;
               ProtocolName_USERX_DEFINEDX_FLOWX_13 = 102;
               ProtocolName_USERX_DEFINEDX_FLOWX_14 = 103;
               ProtocolName_USERX_DEFINEDX_FLOWX_15 = 104;
               ProtocolName_USERX_DEFINEDX_FLOWX_16 = 105;
               ProtocolName_USERX_DEFINEDX_FLOWX_17 = 106;
               ProtocolName_USERX_DEFINEDX_FLOWX_18 = 107;
               ProtocolName_USERX_DEFINEDX_FLOWX_19 = 108;
               ProtocolName_USERX_DEFINEDX_FLOWX_20 = 109;
               ProtocolName_USERX_DEFINEDX_FLOWX_21 = 110;
               ProtocolName_USERX_DEFINEDX_FLOWX_22 = 111;
               ProtocolName_USERX_DEFINEDX_FLOWX_23 = 112;
               ProtocolName_USERX_DEFINEDX_FLOWX_24 = 113;
               ProtocolName_USERX_DEFINEDX_FLOWX_25 = 114;
               ProtocolName_USERX_DEFINEDX_FLOWX_26 = 115;
               ProtocolName_USERX_DEFINEDX_FLOWX_27 = 116;
               ProtocolName_USERX_DEFINEDX_FLOWX_28 = 117;
               ProtocolName_USERX_DEFINEDX_FLOWX_29 = 118;
               ProtocolName_USERX_DEFINEDX_FLOWX_30 = 119;
               ProtocolName_USERX_DEFINEDX_FLOWX_31 = 120;
               ProtocolName_USERX_DEFINEDX_FLOWX_32 = 121;
               ProtocolName_USERX_DEFINEDX_FLOWX_33 = 122;
               ProtocolName_USERX_DEFINEDX_FLOWX_34 = 123;
               ProtocolName_USERX_DEFINEDX_FLOWX_35 = 124;
               ProtocolName_USERX_DEFINEDX_FLOWX_36 = 125;
               ProtocolName_USERX_DEFINEDX_FLOWX_37 = 126;
               ProtocolName_USERX_DEFINEDX_FLOWX_38 = 127;
               ProtocolName_USERX_DEFINEDX_FLOWX_39 = 128;
               ProtocolName_USERX_DEFINEDX_FLOWX_40 = 129;
               ProtocolName_USERX_DEFINEDX_FLOWX_41 = 130;
               ProtocolName_USERX_DEFINEDX_FLOWX_42 = 131;
               ProtocolName_USERX_DEFINEDX_FLOWX_43 = 132;
               ProtocolName_USERX_DEFINEDX_FLOWX_44 = 133;
               ProtocolName_USERX_DEFINEDX_FLOWX_45 = 134;
               ProtocolName_USERX_DEFINEDX_FLOWX_46 = 135;
               ProtocolName_USERX_DEFINEDX_FLOWX_47 = 136;
               ProtocolName_USERX_DEFINEDX_FLOWX_48 = 137;
               ProtocolName_USERX_DEFINEDX_FLOWX_49 = 138;
               ProtocolName_USERX_DEFINEDX_FLOWX_50 = 139;
               ProtocolName_USERX_DEFINEDX_FLOWX_51 = 140;
               ProtocolName_USERX_DEFINEDX_FLOWX_52 = 141;
               ProtocolName_USERX_DEFINEDX_FLOWX_53 = 142;
               ProtocolName_USERX_DEFINEDX_FLOWX_54 = 143;
               ProtocolName_USERX_DEFINEDX_FLOWX_55 = 144;
               ProtocolName_USERX_DEFINEDX_FLOWX_56 = 145;
               ProtocolName_USERX_DEFINEDX_FLOWX_57 = 146;
               ProtocolName_USERX_DEFINEDX_FLOWX_58 = 147;
               ProtocolName_USERX_DEFINEDX_FLOWX_59 = 148;
               ProtocolName_USERX_DEFINEDX_FLOWX_60 = 149;
               ProtocolName_USERX_DEFINEDX_FLOWX_61 = 150;
               ProtocolName_USERX_DEFINEDX_FLOWX_62 = 151;
               ProtocolName_USERX_DEFINEDX_FLOWX_63 = 152;
               ProtocolName_USERX_DEFINEDX_FLOWX_64 = 153;
               ProtocolName_VRRP = 154;
               ProtocolName_WEB = 155;
               ProtocolName_WEBX_AUTHX_SERVER = 156;
               ProtocolName_WHITELIST = 157;
               ProtocolName_WHITELISTX_BGP = 158;
               ProtocolName_WHITELISTX_ISIS = 159;
               ProtocolName_WHITELISTX_LDP = 160;
               ProtocolName_WHITELISTX_OSPF = 161;
               ProtocolName_WHITELISTX_RADIUS = 162;
               ProtocolName_WHITELISTX_RSVP = 163;
               ProtocolName_WHITELISTV6 = 164;
               ProtocolName_WHITELISTV6X_BGPV6 = 165;
               ProtocolName_WHITELISTV6X_OSPFV3 = 166;
               ProtocolName_HWTACACSV6 = 167;
               ProtocolName_LSPPINGV6 = 168;
               ProtocolName_PCEP = 169;
               ProtocolName_RADIUSV6 = 170;
               ProtocolName_SYSLOGV6 = 171;
               ProtocolName_VRRPV6 = 172;
               ProtocolName_WEBX_AUTHX_SERVERV6 = 173;
               ProtocolName_OTHERS = 174;
               ProtocolName_TOTALX_PACKET = 175;
               ProtocolName_CUSP = 176;
            };
            ProtocolName protocol_name = 3 [json_name = "protocol-name"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
            uint64 acl_denied_packets = 6 [json_name = "acl-denied-packets"];
            uint32 configured_cir = 7 [json_name = "configured-cir"];
            uint32 configured_cbs = 8 [json_name = "configured-cbs"];
            uint32 actual_cir = 9 [json_name = "actual-cir"];
            uint32 actual_cbs = 10 [json_name = "actual-cbs"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 11 [json_name = "priority"];
            uint32 min_packet_length = 12 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 13 [json_name = "fixed-packet-length"];
            string last_drop_start_time = 14 [json_name = "last-drop-start-time"];
            string last_drop_end_time = 15 [json_name = "last-drop-end-time"];
            uint64 last_drop_rate = 16 [json_name = "last-drop-rate"];
            uint64 last_drop_packets = 17 [json_name = "last-drop-packets"];
            string peak_rate_time = 18 [json_name = "peak-rate-time"];
            uint64 peak_rate = 19 [json_name = "peak-rate"];
         }
         repeated ApProtocolNameStatistics ap_protocol_name_statistics = 1 [json_name = "ap-protocol-name-statistics"];
      }
      ApProtocolNameStatisticss ap_protocol_name_statisticss = 6 [json_name = "ap-protocol-name-statisticss"];
      message ProtocolIdStatisticss {
         message ProtocolIdStatistics {
            string slot = 1 [json_name = "slot"];
            uint32 protocol_id = 2 [json_name = "protocol-id"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
            uint64 acl_denied_packets = 5 [json_name = "acl-denied-packets"];
            uint32 configured_cir = 6 [json_name = "configured-cir"];
            uint32 configured_cbs = 7 [json_name = "configured-cbs"];
            uint32 actual_cir = 8 [json_name = "actual-cir"];
            uint32 actual_cbs = 9 [json_name = "actual-cbs"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 10 [json_name = "priority"];
            uint32 min_packet_length = 11 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 12 [json_name = "fixed-packet-length"];
            string last_drop_start_time = 13 [json_name = "last-drop-start-time"];
            string last_drop_end_time = 14 [json_name = "last-drop-end-time"];
            uint64 last_drop_rate = 15 [json_name = "last-drop-rate"];
            uint64 last_drop_packets = 16 [json_name = "last-drop-packets"];
            string peak_rate_time = 17 [json_name = "peak-rate-time"];
            uint64 peak_rate = 18 [json_name = "peak-rate"];
         }
         repeated ProtocolIdStatistics protocol_id_statistics = 1 [json_name = "protocol-id-statistics"];
      }
      ProtocolIdStatisticss protocol_id_statisticss = 7 [json_name = "protocol-id-statisticss"];
      message ApProtocolIdStatisticss {
         message ApProtocolIdStatistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            uint32 protocol_id = 3 [json_name = "protocol-id"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
            uint64 acl_denied_packets = 6 [json_name = "acl-denied-packets"];
            uint32 configured_cir = 7 [json_name = "configured-cir"];
            uint32 configured_cbs = 8 [json_name = "configured-cbs"];
            uint32 actual_cir = 9 [json_name = "actual-cir"];
            uint32 actual_cbs = 10 [json_name = "actual-cbs"];
            enum Priority {
               INVALID_ENUM_VALUE_Priority = 0;
               Priority_LOW = 1;
               Priority_MIDDLE = 2;
               Priority_HIGH = 3;
               Priority_BE = 4;
               Priority_AF1 = 5;
               Priority_AF2 = 6;
               Priority_AF3 = 7;
               Priority_AF4 = 8;
               Priority_EF = 9;
               Priority_CS6 = 10;
               Priority_CS7 = 11;
            };
            Priority priority = 11 [json_name = "priority"];
            uint32 min_packet_length = 12 [json_name = "min-packet-length"];
            uint32 fixed_packet_length = 13 [json_name = "fixed-packet-length"];
            string last_drop_start_time = 14 [json_name = "last-drop-start-time"];
            string last_drop_end_time = 15 [json_name = "last-drop-end-time"];
            uint64 last_drop_rate = 16 [json_name = "last-drop-rate"];
            uint64 last_drop_packets = 17 [json_name = "last-drop-packets"];
            string peak_rate_time = 18 [json_name = "peak-rate-time"];
            uint64 peak_rate = 19 [json_name = "peak-rate"];
         }
         repeated ApProtocolIdStatistics ap_protocol_id_statistics = 1 [json_name = "ap-protocol-id-statistics"];
      }
      ApProtocolIdStatisticss ap_protocol_id_statisticss = 8 [json_name = "ap-protocol-id-statisticss"];
   }
   Cpcar cpcar = 76 [json_name = "cpcar"];
   message CpRateLimit {
      message EnhanceStatisticss {
         message EnhanceStatistics {
            string slot = 1 [json_name = "slot"];
            string interface = 2 [json_name = "interface"];
            enum Protocol {
               Protocol_PORT = 0;
               Protocol_DHCP = 1;
               Protocol_DHCPV6 = 2;
               Protocol_ICMP = 3;
               Protocol_ICMPV6 = 4;
            };
            Protocol protocol = 3 [json_name = "protocol"];
            uint64 passed_bytes = 4 [json_name = "passed-bytes"];
            uint64 passed_byte_rate = 5 [json_name = "passed-byte-rate"];
            uint64 dropped_bytes = 6 [json_name = "dropped-bytes"];
            uint64 dropped_byte_rate = 7 [json_name = "dropped-byte-rate"];
            uint64 passed_packets = 8 [json_name = "passed-packets"];
            uint64 passed_packet_rate = 9 [json_name = "passed-packet-rate"];
            uint64 dropped_packets = 10 [json_name = "dropped-packets"];
            uint64 dropped_packet_rate = 11 [json_name = "dropped-packet-rate"];
         }
         repeated EnhanceStatistics enhance_statistics = 1 [json_name = "enhance-statistics"];
      }
      EnhanceStatisticss enhance_statisticss = 1 [json_name = "enhance-statisticss"];
      message PortStatisticss {
         message PortStatistics {
            uint32 record_number = 1 [json_name = "record-number"];
            string slot = 2 [json_name = "slot"];
            string interface = 3 [json_name = "interface"];
            enum Protocol {
               Protocol_PORT = 0;
               Protocol_RSVP = 7;
               Protocol_OSPF = 8;
               Protocol_RIP = 9;
               Protocol_ISIS = 10;
               Protocol_ICMP = 12;
               Protocol_PIM = 14;
               Protocol_DHCP = 17;
               Protocol_IGMP = 23;
               Protocol_VRRP = 26;
               Protocol_LDPX_HELLO = 171;
               Protocol_DHCPV6 = 259;
               Protocol_RIPNG = 437;
               Protocol_OSPFV3 = 671;
               Protocol_ICMPV6 = 675;
               Protocol_PIMV6 = 677;
               Protocol_VRRPV6 = 1097;
            };
            Protocol protocol = 4 [json_name = "protocol"];
            uint32 outer_vlan = 5 [json_name = "outer-vlan"];
            uint32 inner_vlan = 6 [json_name = "inner-vlan"];
            uint64 passed_bytes = 7 [json_name = "passed-bytes"];
            uint64 passed_byte_rate = 8 [json_name = "passed-byte-rate"];
            uint64 dropped_bytes = 9 [json_name = "dropped-bytes"];
            uint64 dropped_byte_rate = 10 [json_name = "dropped-byte-rate"];
            uint64 passed_packets = 11 [json_name = "passed-packets"];
            uint64 passed_packet_rate = 12 [json_name = "passed-packet-rate"];
            uint64 dropped_packets = 13 [json_name = "dropped-packets"];
            uint64 dropped_packet_rate = 14 [json_name = "dropped-packet-rate"];
         }
         repeated PortStatistics port_statistics = 1 [json_name = "port-statistics"];
      }
      PortStatisticss port_statisticss = 2 [json_name = "port-statisticss"];
   }
   CpRateLimit cp_rate_limit = 77 [json_name = "cp-rate-limit"];
   message TcpipDefend {
      message Ipv4Statisticss {
         message Ipv4Statistics {
            string slot = 1 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ABNORMALX_PACKETX_DEFEND = 1;
               Type_UDPX_PACKETX_DEFEND = 2;
               Type_TCPSYNX_FLOOD = 3;
               Type_FRAGMENTX_FLOOD = 4;
            };
            Type type = 2 [json_name = "type"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated Ipv4Statistics ipv4_statistics = 1 [json_name = "ipv4-statistics"];
      }
      Ipv4Statisticss ipv4_statisticss = 1 [json_name = "ipv4-statisticss"];
      message ApIpv4Statisticss {
         message ApIpv4Statistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ABNORMALX_PACKETX_DEFEND = 1;
               Type_UDPX_PACKETX_DEFEND = 2;
               Type_TCPSYNX_FLOOD = 3;
               Type_FRAGMENTX_FLOOD = 4;
            };
            Type type = 3 [json_name = "type"];
            uint64 total_packets = 4 [json_name = "total-packets"];
            uint64 passed_packets = 5 [json_name = "passed-packets"];
            uint64 dropped_packets = 6 [json_name = "dropped-packets"];
         }
         repeated ApIpv4Statistics ap_ipv4_statistics = 1 [json_name = "ap-ipv4-statistics"];
      }
      ApIpv4Statisticss ap_ipv4_statisticss = 2 [json_name = "ap-ipv4-statisticss"];
      message Ipv6Statisticss {
         message Ipv6Statistics {
            string slot = 1 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ABNORMALX_PACKETX_DEFEND = 1;
               Type_UDPX_PACKETX_DEFEND = 2;
               Type_TCPSYNX_FLOOD = 3;
            };
            Type type = 2 [json_name = "type"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated Ipv6Statistics ipv6_statistics = 1 [json_name = "ipv6-statistics"];
      }
      Ipv6Statisticss ipv6_statisticss = 3 [json_name = "ipv6-statisticss"];
      message ApIpv6Statisticss {
         message ApIpv6Statistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ABNORMALX_PACKETX_DEFEND = 1;
               Type_UDPX_PACKETX_DEFEND = 2;
               Type_TCPSYNX_FLOOD = 3;
            };
            Type type = 3 [json_name = "type"];
            uint64 total_packets = 4 [json_name = "total-packets"];
            uint64 passed_packets = 5 [json_name = "passed-packets"];
            uint64 dropped_packets = 6 [json_name = "dropped-packets"];
         }
         repeated ApIpv6Statistics ap_ipv6_statistics = 1 [json_name = "ap-ipv6-statistics"];
      }
      ApIpv6Statisticss ap_ipv6_statisticss = 4 [json_name = "ap-ipv6-statisticss"];
   }
   TcpipDefend tcpip_defend = 78 [json_name = "tcpip-defend"];
   message Urpf {
      message Ipv4Statisticss {
         message Ipv4Statistics {
            string slot = 1 [json_name = "slot"];
            uint64 discard_packets = 2 [json_name = "discard-packets"];
         }
         repeated Ipv4Statistics ipv4_statistics = 1 [json_name = "ipv4-statistics"];
      }
      Ipv4Statisticss ipv4_statisticss = 1 [json_name = "ipv4-statisticss"];
      message Ipv6Statisticss {
         message Ipv6Statistics {
            string slot = 1 [json_name = "slot"];
            uint64 discard_packets = 2 [json_name = "discard-packets"];
         }
         repeated Ipv6Statistics ipv6_statistics = 1 [json_name = "ipv6-statistics"];
      }
      Ipv6Statisticss ipv6_statisticss = 2 [json_name = "ipv6-statisticss"];
      message CpuDefendUrpf {
         message Statisticss {
            message Statistics {
               string slot = 1 [json_name = "slot"];
               uint64 total_packets = 2 [json_name = "total-packets"];
               uint64 passed_packets = 3 [json_name = "passed-packets"];
               uint64 dropped_packets = 4 [json_name = "dropped-packets"];
            }
            repeated Statistics statistics = 1 [json_name = "statistics"];
         }
         Statisticss statisticss = 1 [json_name = "statisticss"];
         message ApStatisticss {
            message ApStatistics {
               uint32 ap_id = 1 [json_name = "ap-id"];
               string slot = 2 [json_name = "slot"];
               uint64 total_packets = 3 [json_name = "total-packets"];
               uint64 passed_packets = 4 [json_name = "passed-packets"];
               uint64 dropped_packets = 5 [json_name = "dropped-packets"];
            }
            repeated ApStatistics ap_statistics = 1 [json_name = "ap-statistics"];
         }
         ApStatisticss ap_statisticss = 2 [json_name = "ap-statisticss"];
      }
      CpuDefendUrpf cpu_defend_urpf = 3 [json_name = "cpu-defend-urpf"];
      message InterfaceDiscards {
         message InterfaceDiscard {
            string interface = 1 [json_name = "interface"];
            uint64 ipv4_discard_packets = 2 [json_name = "ipv4-discard-packets"];
            uint64 ipv6_discard_packets = 3 [json_name = "ipv6-discard-packets"];
         }
         repeated InterfaceDiscard interface_discard = 1 [json_name = "interface-discard"];
      }
      InterfaceDiscards interface_discards = 4 [json_name = "interface-discards"];
      message GlobalUrpf {
         enum Mode {
            Mode_STRICT = 0;
            Mode_LOOSE = 1;
         };
         Mode mode = 1 [json_name = "mode"];
         bool default_route = 2 [json_name = "default-route"];
      }
      GlobalUrpf global_urpf = 5 [json_name = "global-urpf"];
   }
   Urpf urpf = 79 [json_name = "urpf"];
   message TotalCar {
      message Statisticss {
         message Statistics {
            string slot = 1 [json_name = "slot"];
            uint64 total_packets = 2 [json_name = "total-packets"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated Statistics statistics = 1 [json_name = "statistics"];
      }
      Statisticss statisticss = 1 [json_name = "statisticss"];
      message ApStatisticss {
         message ApStatistics {
            uint32 ap_id = 1 [json_name = "ap-id"];
            string slot = 2 [json_name = "slot"];
            uint64 total_packets = 3 [json_name = "total-packets"];
            uint64 passed_packets = 4 [json_name = "passed-packets"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated ApStatistics ap_statistics = 1 [json_name = "ap-statistics"];
      }
      ApStatisticss ap_statisticss = 2 [json_name = "ap-statisticss"];
   }
   TotalCar total_car = 80 [json_name = "total-car"];
   message TmScheduling {
      message ProtocolGroupStatisticss {
         message ProtocolGroupStatistics {
            string slot = 1 [json_name = "slot"];
            enum Group {
               INVALID_ENUM_VALUE_Group = 0;
               Group_WHITELIST = 1;
               Group_USERX_DEFINEDX_FLOW = 2;
               Group_MANAGEMENT = 3;
               Group_ROUTE = 4;
               Group_MULTICAST = 5;
               Group_ARP = 6;
               Group_MPLS = 7;
               Group_ACCESSX_USER = 8;
               Group_LINKX_LAYER = 9;
               Group_NETWORKX_LAYER = 10;
               Group_SYSTEMX_MESSAGE = 12;
               Group_BLACKLIST = 13;
               Group_CHECKX_FAILED = 14;
               Group_FWDDATAX_TOX_CP = 15;
               Group_OAMX_CHECK = 16;
               Group_CLOCK = 17;
               Group_HEARTBEAT = 18;
            };
            Group group = 2 [json_name = "group"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
            message QueueStatistics {
               message QueueStatistic {
                  enum Queue {
                     INVALID_ENUM_VALUE_Queue = 0;
                     Queue_WHITELISTX_BGP = 1;
                     Queue_WHITELISTX_LDP = 2;
                     Queue_WHITELISTX_MANAGEMENT = 3;
                     Queue_WHITELISTX_MULTICAST = 4;
                     Queue_WHITELISTX_RESERVE = 5;
                     Queue_USERX_DEFINEX_FLOWX_1 = 6;
                     Queue_USERX_DEFINEX_FLOWX_2 = 7;
                     Queue_USERX_DEFINEX_FLOWX_3 = 8;
                     Queue_USERX_DEFINEX_FLOWX_4 = 9;
                     Queue_USERX_DEFINEX_FLOWX_5 = 10;
                     Queue_USERX_DEFINEX_FLOWX_6 = 11;
                     Queue_USERX_DEFINEX_FLOWX_7 = 12;
                     Queue_USERX_DEFINEX_FLOWX_8 = 13;
                     Queue_DCN = 14;
                     Queue_FTP = 15;
                     Queue_NTP = 16;
                     Queue_SNMP = 17;
                     Queue_SSH = 18;
                     Queue_SSHV6 = 19;
                     Queue_SYSLOG = 20;
                     Queue_TELNET = 21;
                     Queue_BGP = 22;
                     Queue_BGPV6 = 23;
                     Queue_ISIS = 24;
                     Queue_OSPF = 25;
                     Queue_OSPFV3 = 26;
                     Queue_RIP = 27;
                     Queue_IGMP = 28;
                     Queue_MULTICASTX_RESERVE = 29;
                     Queue_MSDP = 30;
                     Queue_PIM = 31;
                     Queue_ARP = 32;
                     Queue_ND = 33;
                     Queue_LDP = 34;
                     Queue_OAMX_PING = 35;
                     Queue_RSVP = 36;
                     Queue_VXLAN = 37;
                     Queue_BASX_ARP = 38;
                     Queue_BASX_IGMP = 39;
                     Queue_BASX_ND = 40;
                     Queue_BASX_TRIGGER = 41;
                     Queue_DHCP = 42;
                     Queue_DHCPV6 = 43;
                     Queue_EAPOL = 44;
                     Queue_L2TP = 45;
                     Queue_LLDP = 46;
                     Queue_PPP = 47;
                     Queue_VBASX_RESERVE = 48;
                     Queue_WEB = 49;
                     Queue_X_3AH = 50;
                     Queue_BFD = 51;
                     Queue_LINKX_DETECT = 52;
                     Queue_TRUNK = 53;
                     Queue_Y1731 = 54;
                     Queue_INTERFACEX_RDI = 55;
                     Queue_LAGX_CHECK = 56;
                     Queue_LAGX_PINGX_TRACE = 57;
                     Queue_MACX_VLAN = 58;
                     Queue_CLOCK = 59;
                     Queue_DEFAULT = 60;
                     Queue_DNS = 61;
                     Queue_FRAGMENT = 62;
                     Queue_GRE = 63;
                     Queue_HWTACACS = 64;
                     Queue_ICMP = 65;
                     Queue_ICMPV6 = 66;
                     Queue_IPV4X_RESERVE = 67;
                     Queue_IPV6X_OPTION = 68;
                     Queue_NHRP = 69;
                     Queue_VRRP = 70;
                     Queue_RADIUSX_DIAMETER = 71;
                     Queue_SYSTEMX_MESSAGE = 72;
                     Queue_BLACKLIST = 73;
                     Queue_CHECKX_FAILED = 74;
                     Queue_FORWARDX_DATA = 75;
                  };
                  Queue queue = 1 [json_name = "queue"];
                  uint64 passed_packets = 2 [json_name = "passed-packets"];
                  uint64 dropped_packets = 3 [json_name = "dropped-packets"];
               }
               repeated QueueStatistic queue_statistic = 1 [json_name = "queue-statistic"];
            }
            QueueStatistics queue_statistics = 5 [json_name = "queue-statistics"];
         }
         repeated ProtocolGroupStatistics protocol_group_statistics = 1 [json_name = "protocol-group-statistics"];
      }
      ProtocolGroupStatisticss protocol_group_statisticss = 1 [json_name = "protocol-group-statisticss"];
      message ProtocolGroupStates {
         message ProtocolGroupState {
            string slot = 1 [json_name = "slot"];
            enum Group {
               INVALID_ENUM_VALUE_Group = 0;
               Group_WHITELIST = 1;
               Group_USERX_DEFINEDX_FLOW = 2;
               Group_MANAGEMENT = 3;
               Group_ROUTE = 4;
               Group_MULTICAST = 5;
               Group_ARP = 6;
               Group_MPLS = 7;
               Group_ACCESSX_USER = 8;
               Group_LINKX_LAYER = 9;
               Group_NETWORKX_LAYER = 10;
               Group_SYSTEMX_MESSAGE = 12;
               Group_BLACKLIST = 13;
               Group_CHECKX_FAILED = 14;
               Group_FWDDATAX_TOX_CP = 15;
               Group_OAMX_CHECK = 16;
               Group_CLOCK = 17;
               Group_HEARTBEAT = 18;
            };
            Group group = 2 [json_name = "group"];
            uint32 cir_configured = 3 [json_name = "cir-configured"];
            uint32 cir_default = 4 [json_name = "cir-default"];
            uint32 weight_configured = 5 [json_name = "weight-configured"];
            uint32 weight_default = 6 [json_name = "weight-default"];
            message QueueStates {
               message QueueState {
                  enum Queue {
                     INVALID_ENUM_VALUE_Queue = 0;
                     Queue_WHITELISTX_BGP = 1;
                     Queue_WHITELISTX_LDP = 2;
                     Queue_WHITELISTX_MANAGEMENT = 3;
                     Queue_WHITELISTX_MULTICAST = 4;
                     Queue_WHITELISTX_RESERVE = 5;
                     Queue_USERX_DEFINEX_FLOWX_1 = 6;
                     Queue_USERX_DEFINEX_FLOWX_2 = 7;
                     Queue_USERX_DEFINEX_FLOWX_3 = 8;
                     Queue_USERX_DEFINEX_FLOWX_4 = 9;
                     Queue_USERX_DEFINEX_FLOWX_5 = 10;
                     Queue_USERX_DEFINEX_FLOWX_6 = 11;
                     Queue_USERX_DEFINEX_FLOWX_7 = 12;
                     Queue_USERX_DEFINEX_FLOWX_8 = 13;
                     Queue_DCN = 14;
                     Queue_FTP = 15;
                     Queue_NTP = 16;
                     Queue_SNMP = 17;
                     Queue_SSH = 18;
                     Queue_SSHV6 = 19;
                     Queue_SYSLOG = 20;
                     Queue_TELNET = 21;
                     Queue_BGP = 22;
                     Queue_BGPV6 = 23;
                     Queue_ISIS = 24;
                     Queue_OSPF = 25;
                     Queue_OSPFV3 = 26;
                     Queue_RIP = 27;
                     Queue_IGMP = 28;
                     Queue_MULTICASTX_RESERVE = 29;
                     Queue_MSDP = 30;
                     Queue_PIM = 31;
                     Queue_ARP = 32;
                     Queue_ND = 33;
                     Queue_LDP = 34;
                     Queue_OAMX_PING = 35;
                     Queue_RSVP = 36;
                     Queue_VXLAN = 37;
                     Queue_BASX_ARP = 38;
                     Queue_BASX_IGMP = 39;
                     Queue_BASX_ND = 40;
                     Queue_BASX_TRIGGER = 41;
                     Queue_DHCP = 42;
                     Queue_DHCPV6 = 43;
                     Queue_EAPOL = 44;
                     Queue_L2TP = 45;
                     Queue_LLDP = 46;
                     Queue_PPP = 47;
                     Queue_VBASX_RESERVE = 48;
                     Queue_WEB = 49;
                     Queue_X_3AH = 50;
                     Queue_BFD = 51;
                     Queue_LINKX_DETECT = 52;
                     Queue_TRUNK = 53;
                     Queue_Y1731 = 54;
                     Queue_INTERFACEX_RDI = 55;
                     Queue_LAGX_CHECK = 56;
                     Queue_LAGX_PINGX_TRACE = 57;
                     Queue_MACX_VLAN = 58;
                     Queue_CLOCK = 59;
                     Queue_DEFAULT = 60;
                     Queue_DNS = 61;
                     Queue_FRAGMENT = 62;
                     Queue_GRE = 63;
                     Queue_HWTACACS = 64;
                     Queue_ICMP = 65;
                     Queue_ICMPV6 = 66;
                     Queue_IPV4X_RESERVE = 67;
                     Queue_IPV6X_OPTION = 68;
                     Queue_NHRP = 69;
                     Queue_VRRP = 70;
                     Queue_RADIUSX_DIAMETER = 71;
                     Queue_SYSTEMX_MESSAGE = 72;
                     Queue_BLACKLIST = 73;
                     Queue_CHECKX_FAILED = 74;
                     Queue_FORWARDX_DATA = 75;
                  };
                  Queue queue = 1 [json_name = "queue"];
                  uint32 weight_configured = 2 [json_name = "weight-configured"];
                  uint32 weight_default = 3 [json_name = "weight-default"];
               }
               repeated QueueState queue_state = 1 [json_name = "queue-state"];
            }
            QueueStates queue_states = 7 [json_name = "queue-states"];
            message FqStates {
               message FqState {
                  enum FqType {
                     FqType_BE = 0;
                     FqType_AF1 = 1;
                     FqType_AF2 = 2;
                     FqType_AF3 = 3;
                     FqType_AF4 = 4;
                     FqType_EF = 5;
                     FqType_CS6 = 6;
                     FqType_CS7 = 7;
                  };
                  FqType fq_type = 1 [json_name = "fq-type"];
                  uint32 weight_configured = 2 [json_name = "weight-configured"];
               }
               repeated FqState fq_state = 1 [json_name = "fq-state"];
            }
            FqStates fq_states = 8 [json_name = "fq-states"];
         }
         repeated ProtocolGroupState protocol_group_state = 1 [json_name = "protocol-group-state"];
      }
      ProtocolGroupStates protocol_group_states = 2 [json_name = "protocol-group-states"];
      message ProtocolQueueStates {
         message ProtocolQueueState {
            string slot = 1 [json_name = "slot"];
            enum Queue {
               INVALID_ENUM_VALUE_Queue = 0;
               Queue_WHITELISTX_BGP = 1;
               Queue_WHITELISTX_LDP = 2;
               Queue_WHITELISTX_MANAGEMENT = 3;
               Queue_WHITELISTX_MULTICAST = 4;
               Queue_WHITELISTX_RESERVE = 5;
               Queue_USERX_DEFINEX_FLOWX_1 = 6;
               Queue_USERX_DEFINEX_FLOWX_2 = 7;
               Queue_USERX_DEFINEX_FLOWX_3 = 8;
               Queue_USERX_DEFINEX_FLOWX_4 = 9;
               Queue_USERX_DEFINEX_FLOWX_5 = 10;
               Queue_USERX_DEFINEX_FLOWX_6 = 11;
               Queue_USERX_DEFINEX_FLOWX_7 = 12;
               Queue_USERX_DEFINEX_FLOWX_8 = 13;
               Queue_DCN = 14;
               Queue_FTP = 15;
               Queue_NTP = 16;
               Queue_SNMP = 17;
               Queue_SSH = 18;
               Queue_SSHV6 = 19;
               Queue_SYSLOG = 20;
               Queue_TELNET = 21;
               Queue_BGP = 22;
               Queue_BGPV6 = 23;
               Queue_ISIS = 24;
               Queue_OSPF = 25;
               Queue_OSPFV3 = 26;
               Queue_RIP = 27;
               Queue_IGMP = 28;
               Queue_MULTICASTX_RESERVE = 29;
               Queue_MSDP = 30;
               Queue_PIM = 31;
               Queue_ARP = 32;
               Queue_ND = 33;
               Queue_LDP = 34;
               Queue_OAMX_PING = 35;
               Queue_RSVP = 36;
               Queue_VXLAN = 37;
               Queue_BASX_ARP = 38;
               Queue_BASX_IGMP = 39;
               Queue_BASX_ND = 40;
               Queue_BASX_TRIGGER = 41;
               Queue_DHCP = 42;
               Queue_DHCPV6 = 43;
               Queue_EAPOL = 44;
               Queue_L2TP = 45;
               Queue_LLDP = 46;
               Queue_PPP = 47;
               Queue_VBASX_RESERVE = 48;
               Queue_WEB = 49;
               Queue_X_3AH = 50;
               Queue_BFD = 51;
               Queue_LINKX_DETECT = 52;
               Queue_TRUNK = 53;
               Queue_Y1731 = 54;
               Queue_INTERFACEX_RDI = 55;
               Queue_LAGX_CHECK = 56;
               Queue_LAGX_PINGX_TRACE = 57;
               Queue_MACX_VLAN = 58;
               Queue_CLOCK = 59;
               Queue_DEFAULT = 60;
               Queue_DNS = 61;
               Queue_FRAGMENT = 62;
               Queue_GRE = 63;
               Queue_HWTACACS = 64;
               Queue_ICMP = 65;
               Queue_ICMPV6 = 66;
               Queue_IPV4X_RESERVE = 67;
               Queue_IPV6X_OPTION = 68;
               Queue_NHRP = 69;
               Queue_VRRP = 70;
               Queue_RADIUSX_DIAMETER = 71;
               Queue_SYSTEMX_MESSAGE = 72;
               Queue_BLACKLIST = 73;
               Queue_CHECKX_FAILED = 74;
               Queue_FORWARDX_DATA = 75;
            };
            Queue queue = 2 [json_name = "queue"];
            uint32 weight_configured = 3 [json_name = "weight-configured"];
            uint32 weight_default = 4 [json_name = "weight-default"];
            message FqStates {
               message FqState {
                  enum FqType {
                     FqType_BE = 0;
                     FqType_AF1 = 1;
                     FqType_AF2 = 2;
                     FqType_AF3 = 3;
                     FqType_AF4 = 4;
                     FqType_EF = 5;
                     FqType_CS6 = 6;
                     FqType_CS7 = 7;
                  };
                  FqType fq_type = 1 [json_name = "fq-type"];
                  uint32 weight_configured = 2 [json_name = "weight-configured"];
                  uint32 weight_default = 3 [json_name = "weight-default"];
               }
               repeated FqState fq_state = 1 [json_name = "fq-state"];
            }
            FqStates fq_states = 5 [json_name = "fq-states"];
         }
         repeated ProtocolQueueState protocol_queue_state = 1 [json_name = "protocol-queue-state"];
      }
      ProtocolQueueStates protocol_queue_states = 3 [json_name = "protocol-queue-states"];
   }
   TmScheduling tm_scheduling = 81 [json_name = "tm-scheduling"];
   message PortMacFilter {
      message Statistics {
         uint64 whitelist_packets = 1 [json_name = "whitelist-packets"];
         uint64 blacklist_packets = 2 [json_name = "blacklist-packets"];
      }
      Statistics statistics = 1 [json_name = "statistics"];
   }
   PortMacFilter port_mac_filter = 82 [json_name = "port-mac-filter"];
   message SpuCar {
      message Statisticss {
         message Statistics {
            string slot = 1 [json_name = "slot"];
            enum CarType {
               INVALID_ENUM_VALUE_CarType = 0;
               CarType_ICMP = 1;
               CarType_TCP = 2;
               CarType_UDP = 3;
               CarType_GRE = 4;
               CarType_BGP = 5;
               CarType_DEFAULT = 6;
               CarType_TOTAL = 7;
               CarType_IKEX_TOTALX_CAR = 8;
               CarType_IKEX_TUNNELX_CAR = 9;
               CarType_PLAINX_SAX_MISS = 10;
               CarType_CIPHERX_SAX_MISS = 11;
               CarType_IPSECX_REKEY = 12;
               CarType_IKEX_DPD = 13;
               CarType_FASTX_CHANNEL = 14;
               CarType_BFDX_DOWN = 15;
               CarType_PST = 16;
               CarType_DSLITEX_PRIVATEX_IPV4 = 17;
               CarType_IPX_OPTION = 18;
               CarType_MTUX_EXCEED = 19;
               CarType_CGNX_ICMP = 20;
               CarType_CGNX_ICMPV6 = 21;
               CarType_CGNX_IPV4X_OTHER = 22;
               CarType_CGNX_IPV6X_OTHER = 23;
               CarType_CGNX_IPV6X_RAW = 24;
               CarType_CGNX_TOTAL = 25;
               CarType_TSUX_DETECTX_KEEPLIVE = 26;
            };
            CarType car_type = 2 [json_name = "car-type"];
            uint64 passed_packets = 3 [json_name = "passed-packets"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated Statistics statistics = 1 [json_name = "statistics"];
      }
      Statisticss statisticss = 1 [json_name = "statisticss"];
   }
   SpuCar spu_car = 83 [json_name = "spu-car"];
   message AclStatistics {
      message ManagementStatistics {
         message ManagementStatistic {
            enum ManagementType {
               ManagementType_FTP = 0;
               ManagementType_SSH = 1;
               ManagementType_SNMP = 2;
               ManagementType_TELNET = 3;
            };
            ManagementType management_type = 1 [json_name = "management-type"];
            string slot = 2 [json_name = "slot"];
            string packet_info = 3 [json_name = "packet-info"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated ManagementStatistic management_statistic = 1 [json_name = "management-statistic"];
      }
      ManagementStatistics management_statistics = 1 [json_name = "management-statistics"];
      message BlacklistStatistics {
         message BlacklistStatistic {
            enum AclIpType {
               AclIpType_IPV4 = 0;
               AclIpType_IPV6 = 1;
            };
            AclIpType acl_ip_type = 1 [json_name = "acl-ip-type"];
            string slot = 2 [json_name = "slot"];
            string packet_info = 3 [json_name = "packet-info"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated BlacklistStatistic blacklist_statistic = 1 [json_name = "blacklist-statistic"];
      }
      BlacklistStatistics blacklist_statistics = 2 [json_name = "blacklist-statistics"];
      message WhitelistStatistics {
         message WhitelistStatistic {
            enum AclIpType {
               AclIpType_IPV4 = 0;
               AclIpType_IPV6 = 1;
            };
            AclIpType acl_ip_type = 1 [json_name = "acl-ip-type"];
            string slot = 2 [json_name = "slot"];
            string packet_info = 3 [json_name = "packet-info"];
            uint64 dropped_packets = 4 [json_name = "dropped-packets"];
         }
         repeated WhitelistStatistic whitelist_statistic = 1 [json_name = "whitelist-statistic"];
      }
      WhitelistStatistics whitelist_statistics = 3 [json_name = "whitelist-statistics"];
      message UserDefinedFlowStatistics {
         message UserDefinedFlowStatistic {
            uint32 flow_id = 1 [json_name = "flow-id"];
            enum AclIpType {
               AclIpType_IPV4 = 0;
               AclIpType_IPV6 = 1;
            };
            AclIpType acl_ip_type = 2 [json_name = "acl-ip-type"];
            string slot = 3 [json_name = "slot"];
            string packet_info = 4 [json_name = "packet-info"];
            uint64 dropped_packets = 5 [json_name = "dropped-packets"];
         }
         repeated UserDefinedFlowStatistic user_defined_flow_statistic = 1 [json_name = "user-defined-flow-statistic"];
      }
      UserDefinedFlowStatistics user_defined_flow_statistics = 4 [json_name = "user-defined-flow-statistics"];
   }
   AclStatistics acl_statistics = 84 [json_name = "acl-statistics"];
}
message HwApplicationRateResume {
   int32 ChassisID = 1;
   int32 CurrentRateHigh = 2;
   int32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   int32 Protocol = 5;
   string ProtocolDescription = 6;
   int32 RateInterval = 7;
   int32 RateThreshold = 8;
   string Reason = 9;
   int32 SlotID = 10;
}
message HwApplicationRateRising {
   int32 ChassisID = 1;
   int32 CurrentRateHigh = 2;
   int32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   int32 Protocol = 5;
   string ProtocolDescription = 6;
   int32 RateInterval = 7;
   int32 RateThreshold = 8;
   string Reason = 9;
   int32 SlotID = 10;
}
message HwCfgApTrapFailAlarm {
   uint32 ApId = 1;
   string IpAddr = 2;
   string Operation = 3;
   string Reason = 4;
   string UserName = 5;
}
message HwCpDefendDisAlarm {
   uint32 ChassisID = 1;
   uint64 DiscardedPackets = 2;
   uint32 DiscardedThreshold = 3;
   int32 ObjectIndex = 4;
   string ProtocolDescription = 5;
   string Reason = 6;
   int32 SlotID = 7;
}
message HwCpDefendDisAlarmCle {
   uint32 ChassisID = 1;
   uint64 DiscardedPackets = 2;
   uint32 DiscardedThreshold = 3;
   int32 ObjectIndex = 4;
   string ProtocolDescription = 5;
   string Reason = 6;
   int32 SlotID = 7;
}
message HwTcpIpAttackRateResume {
   int32 ChassisID = 1;
   uint32 CurrentRateHigh = 2;
   uint32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   string ProtocolDescription = 5;
   int32 RateInterval = 6;
   int32 RateThreshold = 7;
   string Reason = 8;
   int32 SlotID = 9;
   int32 Type = 10;
}
message HwTcpIpAttackRateRising {
   int32 ChassisID = 1;
   uint32 CurrentRateHigh = 2;
   uint32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   string ProtocolDescription = 5;
   int32 RateInterval = 6;
   int32 RateThreshold = 7;
   string Reason = 8;
   int32 SlotID = 9;
   int32 Type = 10;
}
message HwTtlExpiredLoop {
   int32 CHASSISID = 1;
   uint32 CURRENTRATEHIGH = 2;
   uint32 CURRENTRATELOW = 3;
   uint32 INTERVAL = 4;
   uint32 LASTRATEHIGH = 5;
   uint32 LASTRATELOW = 6;
   int32 SLOTID = 7;
   uint32 THRESHOLD = 8;
}
message HwTtlExpiredLoopResume {
   int32 CHASSISID = 1;
   uint32 CURRENTRATEHIGH = 2;
   uint32 CURRENTRATELOW = 3;
   uint32 INTERVAL = 4;
   uint32 LASTRATEHIGH = 5;
   uint32 LASTRATELOW = 6;
   int32 SLOTID = 7;
   uint32 THRESHOLD = 8;
}
message HwUrpfDiscardedResume {
   int32 ChassisID = 1;
   uint32 CurrentRateHigh = 2;
   uint32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   int32 RateInterval = 5;
   int32 RateThreshold = 6;
   int32 SlotID = 7;
}
message HwUrpfDiscardedRising {
   int32 ChassisID = 1;
   uint32 CurrentRateHigh = 2;
   uint32 CurrentRateLow = 3;
   int32 NotifyEnabled = 4;
   int32 RateInterval = 5;
   int32 RateThreshold = 6;
   int32 SlotID = 7;
}
message HwPortCarPassedPacketAlarm {
   uint32 ChassisID = 1;
   string Interface = 2;
   int32 ObjectIndex = 3;
   int32 SlotID = 4;
   uint32 Threshold = 5;
   uint64 TotalPacket = 6;
}
message PortCarPassedPacketAlarmClear {
   uint32 ChassisID = 1;
   string Interface = 2;
   int32 ObjectIndex = 3;
   int32 SlotID = 4;
   uint32 Threshold = 5;
   uint64 TotalPacket = 6;
}


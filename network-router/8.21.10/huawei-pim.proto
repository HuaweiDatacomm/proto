syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-09 17:30:03
// ProtoYang-version 1
// module huawei-pim
// revision 2021-07-29
// revision 2020-03-16
// revision 2020-02-11
// revision 2020-02-07
// revision 2020-01-19
// revision 2019-12-12
// revision 2019-12-05
// revision 2019-05-06
// namespace urn:huawei:yang:huawei-pim

package huawei_pim;

message Pim {
   message Bsrafspro {
      message BsrAf4CbsrGrps {
         message BsrAf4CbsrGrp {
            string groupMask = 1;
            string grpAddr = 2;
            uint32 hashLength = 3;
            uint32 priority = 4;
            string vrfName = 5;
         }
         repeated BsrAf4CbsrGrp bsrAf4CbsrGrp = 1;
      }
      BsrAf4CbsrGrps bsrAf4CbsrGrps = 1;
      message BsrAf4CrpCfgs {
         message BsrAf4CrpCfg {
            uint32 cRpAdvInterval = 1;
            enum CRpBidir {
               CRpBidir_BIDIR = 0;
               CRpBidir_NOTBIDIR = 1;
            };
            CRpBidir cRpBidir = 2;
            string cRpGrpPlyName = 3;
            uint32 cRpHoldTime = 4;
            string cRpIfName = 5;
            uint32 cRpPriority = 6;
            string vrfName = 7;
         }
         repeated BsrAf4CrpCfg bsrAf4CrpCfg = 1;
      }
      BsrAf4CrpCfgs bsrAf4CrpCfgs = 2;
      message BsrAf6CrpCfgs {
         message BsrAf6CrpCfg {
            string cRpAddr = 1;
            uint32 cRpAdvInterval = 2;
            enum CRpBidir {
               CRpBidir_BIDIR = 0;
               CRpBidir_NOTBIDIR = 1;
            };
            CRpBidir cRpBidir = 3;
            string cRpGrpPlyName = 4;
            uint32 cRpHoldTime = 5;
            uint32 cRpPriority = 6;
            string vrfName = 7;
         }
         repeated BsrAf6CrpCfg bsrAf6CrpCfg = 1;
      }
      BsrAf6CrpCfgs bsrAf6CrpCfgs = 3;
      message BsrAfsAutoRpCfgs {
         message BsrAfsAutoRpCfg {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string vrfName = 2;
         }
         repeated BsrAfsAutoRpCfg bsrAfsAutoRpCfg = 1;
      }
      BsrAfsAutoRpCfgs bsrAfsAutoRpCfgs = 4;
      message BsrAfsCbsrs {
         message BsrAfsCbsr {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string cbsrAddr = 2;
            enum FsmState {
               FsmState_ACCEPTANY = 0;
               FsmState_ACCEPTPREFERRED = 1;
               FsmState_CANDIDATE = 2;
               FsmState_ELECTED = 3;
               FsmState_PENDING = 4;
               FsmState_UNKNOWN = 5;
            };
            FsmState fsmState = 3;
            string grpAddr = 4;
            uint32 grpMaskLen = 5;
            uint32 hashLenth = 6;
            enum IsWaitToBsr {
               IsWaitToBsr_JOIN = 0;
               IsWaitToBsr_NOTJOIN = 1;
            };
            IsWaitToBsr isWaitToBsr = 7;
            uint32 priority = 8;
            enum Scope {
               Scope_ADMINSCOPE = 0;
               Scope_GLOBAL = 1;
               Scope_NOTSCOPED = 2;
            };
            Scope scope = 9;
            string vrfName = 10;
         }
         repeated BsrAfsCbsr bsrAfsCbsr = 1;
      }
      BsrAfsCbsrs bsrAfsCbsrs = 5;
      message BsrAfsEbsrRps {
         message BsrAfsEbsrRp {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            bool bidirEnable = 2;
            uint32 expiryTime = 3;
            string grpAddr = 4;
            uint32 grpMaskLen = 5;
            uint32 priority = 6;
            string rpAddr = 7;
            bool rpAddrIsLocal = 8;
            uint32 upTime = 9;
            string vrfName = 10;
         }
         repeated BsrAfsEbsrRp bsrAfsEbsrRp = 1;
      }
      BsrAfsEbsrRps bsrAfsEbsrRps = 6;
      message BsrAfsEbsrs {
         message BsrAfsEbsr {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string bsrAddr = 2;
            uint32 crpCnt = 3;
            uint32 expireTime = 4;
            enum FsmState {
               FsmState_ACCEPTANY = 0;
               FsmState_ACCEPTPREFERRED = 1;
               FsmState_CANDIDATE = 2;
               FsmState_ELECTED = 3;
               FsmState_PENDING = 4;
               FsmState_UNKNOWN = 5;
            };
            FsmState fsmState = 5;
            string grpAddr = 6;
            uint32 grpMaskLen = 7;
            uint32 hashLenth = 8;
            uint32 priority = 9;
            enum Scope {
               Scope_ADMINSCOPE = 0;
               Scope_GLOBAL = 1;
               Scope_NOTSCOPED = 2;
            };
            Scope scope = 10;
            uint32 upTime = 11;
            string vrfName = 12;
         }
         repeated BsrAfsEbsr bsrAfsEbsr = 1;
      }
      BsrAfsEbsrs bsrAfsEbsrs = 7;
      message BsrAfsSiteCfgs {
         message BsrAfsSiteCfg {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            bool cBsrAdminScope = 2;
            bool cBsrGlobalEnable = 3;
            uint32 cBsrGlobalHashLength = 4;
            uint32 cBsrGlobalPriority = 5;
            uint32 cBsrHashLen = 6;
            uint32 cBsrHoldTime = 7;
            string cBsrIfAddr = 8;
            string cBsrIfName = 9;
            uint32 cBsrInterval = 10;
            string cBsrPlyIpv6 = 11;
            string cBsrPlyName = 12;
            uint32 cBsrPriority = 13;
            uint32 cRpAdvInterval = 14;
            uint32 cRpHoldTime = 15;
            string cRpPlyIpv6 = 16;
            string cRpPlyName = 17;
            uint32 cRpPriority = 18;
            bool isFragable = 19;
            string vrfName = 20;
         }
         repeated BsrAfsSiteCfg bsrAfsSiteCfg = 1;
      }
      BsrAfsSiteCfgs bsrAfsSiteCfgs = 8;
   }
   Bsrafspro bsrafspro = 1;
   message PimIfInvPacketCntSchms {
      message PimIfInvPacketCntSchm {
         enum AddrFamily {
            AddrFamily_IPV4UNICAST = 0;
            AddrFamily_IPV6UNICAST = 1;
         };
         AddrFamily addrFamily = 1;
         string ifName = 2;
         message InvAssertCnt {
            uint32 assertFaultLength = 1;
            uint32 assertInvalidDestAddr = 2;
            uint32 assertInvalidIpSourceAddr = 3;
            uint32 assertInvalidMulticastGroup = 4;
            uint32 assertInvalidMulticastSource = 5;
         }
         InvAssertCnt invAssertCnt = 3;
         message InvAutoRPAnnounceCnt {
            uint32 announcInvDest = 1;
            uint32 announcInvPort = 2;
            uint32 announcInvSrc = 3;
            uint32 announcInvTTL = 4;
         }
         InvAutoRPAnnounceCnt invAutoRPAnnounceCnt = 4;
         message InvAutoRPDiscoveryCnt {
            uint32 discovFltLen = 1;
            uint32 discovInvGrp = 2;
            uint32 discovInvPort = 3;
            uint32 discovInvRP = 4;
            uint32 discovInvSrc = 5;
            uint32 discovInvTTL = 6;
         }
         InvAutoRPDiscoveryCnt invAutoRPDiscoveryCnt = 5;
         message InvBSRCnt {
            uint32 bsrBadPayload = 1;
            uint32 bsrBadScopeMask = 2;
            uint32 bsrFaultHashLength = 3;
            uint32 bsrFaultLength = 4;
            uint32 bsrInvalidBSRAddr = 5;
            uint32 bsrInvalidIpSourceAddr = 6;
            uint32 bsrInvalidMulticastGroup = 7;
            uint32 bsrNotCBSRButBSR = 8;
         }
         InvBSRCnt invBSRCnt = 6;
         message InvGraftAckCnt {
            uint32 graftAckFaultLength = 1;
            uint32 graftAckInvalidIPSourceAddr = 2;
            uint32 graftAckInvalidMulticastGroup = 3;
            uint32 graftAckInvalidMulticastSource = 4;
            uint32 graftAckInvalidUpNeighbor = 5;
         }
         InvGraftAckCnt invGraftAckCnt = 7;
         message InvGraftCnt {
            uint32 graftFaultLength = 1;
            uint32 graftInvalidIPSourceAddr = 2;
            uint32 graftInvalidMulticastGroup = 3;
            uint32 graftInvalidMulticastSource = 4;
            uint32 graftInvalidUpNeighbor = 5;
         }
         InvGraftCnt invGraftCnt = 8;
         message InvHelloCnt {
            uint32 helloBadDrPriorityLength = 1;
            uint32 helloBadGenIDLength = 2;
            uint32 helloBadHoldtimeLength = 3;
            uint32 helloBadLanPruneDelayLength = 4;
            uint32 helloFaultLength = 5;
            uint32 helloInvalidAddrList = 6;
            uint32 helloInvalidDestAddr = 7;
            uint32 helloInvalidISourceAddr = 8;
         }
         InvHelloCnt invHelloCnt = 9;
         message InvJoinPruneCnt {
            uint32 joinpruneFaultLength = 1;
            uint32 joinpruneInvalidDestAddr = 2;
            uint32 joinpruneInvalidIPSourceAddr = 3;
            uint32 joinpruneInvalidMulticastGroup = 4;
            uint32 joinpruneInvalidMulticastSource = 5;
            uint32 joinpruneInvalidUpNeighbor = 6;
         }
         InvJoinPruneCnt invJoinPruneCnt = 10;
         message InvStateRefreshCnt {
            uint32 stateRefreshFaultLength = 1;
            uint32 stateRefreshInvalidMCASTGroup = 2;
            uint32 stateRefreshInvalidMCASTSource = 3;
            uint32 stateRefreshInvalidOriginator = 4;
         }
         InvStateRefreshCnt invStateRefreshCnt = 11;
         string vrfName = 12;
      }
      repeated PimIfInvPacketCntSchm pimIfInvPacketCntSchm = 1;
   }
   PimIfInvPacketCntSchms pimIfInvPacketCntSchms = 2;
   message PimInvPacketSchms {
      message PimInvPacketSchm {
         enum AddrFamily {
            AddrFamily_IPV4UNICAST = 0;
            AddrFamily_IPV6UNICAST = 1;
         };
         AddrFamily addrFamily = 1;
         message InvPackets {
            message InvPacket {
               string interfaceName = 1;
               string invalidType = 2;
               uint32 messageLength = 3;
               string packetContent = 4;
               uint32 packetIndex = 5;
               string time = 6;
               string timeZone = 7;
            }
            repeated InvPacket invPacket = 1;
         }
         InvPackets invPackets = 2;
      }
      repeated PimInvPacketSchm pimInvPacketSchm = 1;
   }
   PimInvPacketSchms pimInvPacketSchms = 3;
   message PimVrfInvPacketCntSchms {
      message PimVrfInvPacketCntSchm {
         enum AddrFamily {
            AddrFamily_IPV4UNICAST = 0;
            AddrFamily_IPV6UNICAST = 1;
         };
         AddrFamily addrFamily = 1;
         message InvAssertCnt {
            uint32 assertFaultLength = 1;
            uint32 assertInvalidDestAddr = 2;
            uint32 assertInvalidIpSourceAddr = 3;
            uint32 assertInvalidMulticastGroup = 4;
            uint32 assertInvalidMulticastSource = 5;
         }
         InvAssertCnt invAssertCnt = 2;
         message InvAutoRPAnnounceCnt {
            uint32 announcInvDest = 1;
            uint32 announcInvPort = 2;
            uint32 announcInvSrc = 3;
            uint32 announcInvTTL = 4;
         }
         InvAutoRPAnnounceCnt invAutoRPAnnounceCnt = 3;
         message InvAutoRPDiscoveryCnt {
            uint32 discovFltLen = 1;
            uint32 discovInvGrp = 2;
            uint32 discovInvPort = 3;
            uint32 discovInvRP = 4;
            uint32 discovInvSrc = 5;
            uint32 discovInvTTL = 6;
         }
         InvAutoRPDiscoveryCnt invAutoRPDiscoveryCnt = 4;
         message InvBSRCnt {
            uint32 bsrBadPayload = 1;
            uint32 bsrBadScopeMask = 2;
            uint32 bsrFaultHashLength = 3;
            uint32 bsrFaultLength = 4;
            uint32 bsrInvalidBSRAddr = 5;
            uint32 bsrInvalidIpSourceAddr = 6;
            uint32 bsrInvalidMulticastGroup = 7;
            uint32 bsrNotCBSRButBSR = 8;
         }
         InvBSRCnt invBSRCnt = 5;
         message InvCRPCnt {
            uint32 crpCRPAdvFaultLength = 1;
            uint32 crpFaultLength = 2;
            uint32 crpInvalidCrpAddr = 3;
            uint32 crpInvalidDestAddr = 4;
            uint32 crpInvalidMulticastGroup = 5;
         }
         InvCRPCnt invCRPCnt = 6;
         message InvGeneralCnt {
            uint32 pimBadChecksum = 1;
            uint32 pimFaultLength = 2;
            uint32 pimInvalidType = 3;
            uint32 pimInvalidVersion = 4;
         }
         InvGeneralCnt invGeneralCnt = 7;
         message InvGraftAckCnt {
            uint32 graftAckFaultLength = 1;
            uint32 graftAckInvalidIPSourceAddr = 2;
            uint32 graftAckInvalidMulticastGroup = 3;
            uint32 graftAckInvalidMulticastSource = 4;
            uint32 graftAckInvalidUpNeighbor = 5;
         }
         InvGraftAckCnt invGraftAckCnt = 8;
         message InvGraftCnt {
            uint32 graftFaultLength = 1;
            uint32 graftInvalidIPSourceAddr = 2;
            uint32 graftInvalidMulticastGroup = 3;
            uint32 graftInvalidMulticastSource = 4;
            uint32 graftInvalidUpNeighbor = 5;
         }
         InvGraftCnt invGraftCnt = 9;
         message InvHelloCnt {
            uint32 helloBadDrPriorityLength = 1;
            uint32 helloBadGenIDLength = 2;
            uint32 helloBadHoldtimeLength = 3;
            uint32 helloBadLanPruneDelayLength = 4;
            uint32 helloFaultLength = 5;
            uint32 helloInvalidAddrList = 6;
            uint32 helloInvalidDestAddr = 7;
            uint32 helloInvalidISourceAddr = 8;
         }
         InvHelloCnt invHelloCnt = 10;
         message InvJoinPruneCnt {
            uint32 joinpruneFaultLength = 1;
            uint32 joinpruneInvalidDestAddr = 2;
            uint32 joinpruneInvalidIPSourceAddr = 3;
            uint32 joinpruneInvalidMulticastGroup = 4;
            uint32 joinpruneInvalidMulticastSource = 5;
            uint32 joinpruneInvalidUpNeighbor = 6;
         }
         InvJoinPruneCnt invJoinPruneCnt = 11;
         message InvRegisterCnt {
            uint32 regInvalidDestAddr = 1;
            uint32 regInvalidMulticastGroup = 2;
            uint32 regInvalidMulticastSource = 3;
         }
         InvRegisterCnt invRegisterCnt = 12;
         message InvRegisterStopCnt {
            uint32 regstopInvalidDestAddr = 1;
            uint32 regstopInvalidMulticastGroup = 2;
            uint32 regstopInvalidMulticastSource = 3;
            uint32 regstopIpSourceNotRp = 4;
         }
         InvRegisterStopCnt invRegisterStopCnt = 13;
         message InvStateRefreshCnt {
            uint32 stateRefreshFaultLength = 1;
            uint32 stateRefreshInvalidMCASTGroup = 2;
            uint32 stateRefreshInvalidMCASTSource = 3;
            uint32 stateRefreshInvalidOriginator = 4;
         }
         InvStateRefreshCnt invStateRefreshCnt = 14;
         string vrfName = 15;
      }
      repeated PimVrfInvPacketCntSchm pimVrfInvPacketCntSchm = 1;
   }
   PimVrfInvPacketCntSchms pimVrfInvPacketCntSchms = 4;
   message Pimafspro {
      message PimAfsBfdInfos {
         message PimAfsBfdInfo {
            uint32 ActMulti = 1;
            uint32 ActRx = 2;
            uint32 ActTx = 3;
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 4;
            enum BfdStatus {
               BfdStatus_ADMINX_DOWN = 0;
               BfdStatus_BFDX_SESSIONX_NUMBERX_EXCEED = 1;
               BfdStatus_DOWN = 2;
               BfdStatus_INIT = 3;
               BfdStatus_UP = 4;
            };
            BfdStatus bfdStatus = 5;
            string ifName = 6;
            uint32 localPort = 7;
            string neighborAddr = 8;
            uint32 remotePort = 9;
            string vrfName = 10;
         }
         repeated PimAfsBfdInfo pimAfsBfdInfo = 1;
      }
      PimAfsBfdInfos pimAfsBfdInfos = 1;
      message PimAfsDfInfos {
         message PimAfsDfInfo {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string dfAddr = 2;
            uint32 dfMetric = 3;
            uint32 dfPref = 4;
            enum DfState {
               DfState_BACKOFF = 0;
               DfState_LOSE = 1;
               DfState_OFFER = 2;
               DfState_WIN = 3;
            };
            DfState dfState = 5;
            uint32 dfUpTime = 6;
            string ifName = 7;
            uint32 metric = 8;
            uint32 pref = 9;
            string rpAddr = 10;
            bool rpfInf = 11;
            string vrfName = 12;
         }
         repeated PimAfsDfInfo pimAfsDfInfo = 1;
      }
      PimAfsDfInfos pimAfsDfInfos = 2;
      message PimAfsEmbeddedRpInfos {
         message PimAfsEmbeddedRpInfo {
            string embeddedRpAddr = 1;
            string grpAddr = 2;
            string vrfName = 3;
         }
         repeated PimAfsEmbeddedRpInfo pimAfsEmbeddedRpInfo = 1;
      }
      PimAfsEmbeddedRpInfos pimAfsEmbeddedRpInfos = 3;
      message PimAfsGraftInfos {
         message PimAfsGraftInfo {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 expireTime = 2;
            string grpAddr = 3;
            uint32 retransmitIn = 4;
            string srcAddr = 5;
            string vrfName = 6;
         }
         repeated PimAfsGraftInfo pimAfsGraftInfo = 1;
      }
      PimAfsGraftInfos pimAfsGraftInfos = 4;
      message PimAfsIfCfgs {
         message PimAfsIfCfg {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 assertHoldtime = 2;
            bool bfdEnable = 3;
            uint32 bfdMinRx = 4;
            uint32 bfdMinTx = 5;
            uint32 bfdMultiplier = 6;
            uint32 bidirBkoffInterval = 7;
            uint32 bidirOfferInterval = 8;
            uint32 bidirRobCount = 9;
            uint32 drPriority = 10;
            uint32 drSwtDelayInterval = 11;
            uint32 graftRetry = 12;
            uint32 helloHoldtime = 13;
            uint32 helloInterval = 14;
            uint32 helloLanDelay = 15;
            uint32 helloOverride = 16;
            string ifName = 17;
            bool ignoreAssert = 18;
            bool ignoreDr = 19;
            string ipsecName = 20;
            enum IpsecType {
               IpsecType_FORALL = 0;
               IpsecType_FORHELLO = 1;
            };
            IpsecType ipsecType = 21;
            bool isDrSwtDelay = 22;
            bool isSilent = 23;
            bool isStaRefCap = 24;
            string jpAsmPlyIpv6 = 25;
            string jpAsmPlyName = 26;
            uint32 jpHoldtime = 27;
            string jpPlyIpv6 = 28;
            string jpPlyName = 29;
            string jpSsmPlyIpv6 = 30;
            string jpSsmPlyName = 31;
            uint32 jpTimerInterval = 32;
            string nbrPlyIpv6 = 33;
            string nbrPlyName = 34;
            enum PimBsrBoundary {
               PimBsrBoundary_BOTH = 0;
               PimBsrBoundary_INCOMING = 1;
               PimBsrBoundary_NONE = 2;
            };
            PimBsrBoundary pimBsrBoundary = 35;
            enum PimMode {
               PimMode_DENSE = 0;
               PimMode_SPARSE = 1;
            };
            PimMode pimMode = 36;
            bool pimsmEnable = 37;
            bool requireGenId = 38;
            bool singleTagFwdEnable = 39;
            string vrfName = 40;
         }
         repeated PimAfsIfCfg pimAfsIfCfg = 1;
      }
      PimAfsIfCfgs pimAfsIfCfgs = 5;
      message PimAfsIfInfoTbls {
         message PimAfsIfInfoTbl {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 assertHoldTime = 2;
            uint32 backoffInterval = 3;
            string drAddr = 4;
            uint32 drPriority = 5;
            uint32 electionRobustCount = 6;
            string genId = 7;
            uint32 graftRetry = 8;
            uint32 helloHoldTime = 9;
            uint32 helloInterval = 10;
            uint32 helloOverInvNeg = 11;
            string ifName = 12;
            enum IfUpState {
               IfUpState_BACKUP = 0;
               IfUpState_DOWN = 1;
               IfUpState_UP = 2;
            };
            IfUpState ifUpState = 13;
            bool ignoreAssert = 14;
            bool ignoreDr = 15;
            string ipsecName = 16;
            enum IpsecType {
               IpsecType_FORALL = 0;
               IpsecType_FORHELLO = 1;
            };
            IpsecType ipsecType = 17;
            bool isStaRefCap = 18;
            bool joinAttribute = 19;
            uint32 jpHoldTime = 20;
            uint32 jpInterval = 21;
            uint32 lanDelayNeg = 22;
            uint32 nbrCnt = 23;
            uint32 noDrNum = 24;
            uint32 noJoinAttributeNum = 25;
            uint32 noLanDelayNum = 26;
            uint32 offerInterval = 27;
            enum PimMode {
               PimMode_DENSE = 0;
               PimMode_SPARSE = 1;
            };
            PimMode pimMode = 28;
            uint32 pimVersion = 29;
            bool staRefProc = 30;
            uint32 staRefreshInt = 31;
            string vrfName = 32;
            bool pimSnpEnable = 33;
         }
         repeated PimAfsIfInfoTbl pimAfsIfInfoTbl = 1;
      }
      PimAfsIfInfoTbls pimAfsIfInfoTbls = 6;
      message PimAfsNbrInfoTbls {
         message PimAfsNbrInfoTbl {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            bool bidirEnable = 2;
            bool drPriPresent = 3;
            uint32 drPriority = 4;
            uint32 expireTime = 5;
            string genId = 6;
            bool genIdPriPresent = 7;
            uint32 holdTime = 8;
            string ifName = 9;
            bool joinAttribute = 10;
            uint32 lanDelay = 11;
            bool lanDelayPresent = 12;
            string nbrAddr = 13;
            uint32 overrideInv = 14;
            message PimAfsSecondAddrs {
               message PimAfsSecondAddr {
                  string secondAddr = 1;
               }
               repeated PimAfsSecondAddr pimAfsSecondAddr = 1;
            }
            PimAfsSecondAddrs pimAfsSecondAddrs = 15;
            uint32 staRefreshInt = 16;
            uint32 upTime = 17;
            string vrfName = 18;
         }
         repeated PimAfsNbrInfoTbl pimAfsNbrInfoTbl = 1;
      }
      PimAfsNbrInfoTbls pimAfsNbrInfoTbls = 7;
      message PimAfsRPFRtTbls {
         message PimAfsRPFRtTbl {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string bRouteImportAddr = 2;
            uint32 bRouteImportVrf = 3;
            string bRpfAddr = 4;
            uint32 bSrcAsGlobal = 5;
            string destAddr = 6;
            string ifName = 7;
            message PimAfsClaimRtSGs {
               message PimAfsClaimRtSG {
                  string grpAddr = 1;
                  string srcAddr = 2;
               }
               repeated PimAfsClaimRtSG pimAfsClaimRtSG = 1;
            }
            PimAfsClaimRtSGs pimAfsClaimRtSGs = 8;
            string referRouteAddr = 9;
            uint32 referRouteMaskLen = 10;
            enum ReferRouteType {
               ReferRouteType_DIRECT = 0;
               ReferRouteType_EGP = 1;
               ReferRouteType_IGP = 2;
               ReferRouteType_MBGP = 3;
               ReferRouteType_MIGP = 4;
               ReferRouteType_MULTICASTSTATIC = 5;
               ReferRouteType_UNICAST = 6;
            };
            ReferRouteType referRouteType = 11;
            string routeImportAddr = 12;
            uint32 routeImportVrf = 13;
            string rpfAddr = 14;
            uint32 srcAsGlobal = 15;
            string vrfName = 16;
         }
         repeated PimAfsRPFRtTbl pimAfsRPFRtTbl = 1;
      }
      PimAfsRPFRtTbls pimAfsRPFRtTbls = 8;
      message PimAfsRouteTbls {
         message PimAfsRouteTbl {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 backSgUpExpTime = 2;
            string backupSgIifName = 3;
            string backupSgRpfAddr = 4;
            string backupSgUpNbrAddr = 5;
            string grpAddr = 6;
            string origSrcAddr = 7;
            message PimAfsExtraRecverTbls {
               message PimAfsExtraRecverTbl {
                  string vrfName = 1;
               }
               repeated PimAfsExtraRecverTbl pimAfsExtraRecverTbl = 1;
            }
            PimAfsExtraRecverTbls pimAfsExtraRecverTbls = 8;
            message PimAfsRouteDownstreamTbls {
               message PimAfsRouteDownstreamTbl {
                  bool isIgnoreDr = 1;
                  message PimAfsRouteDownstreamVectors {
                     message PimAfsRouteDownstreamVector {
                        string neighborAddr = 1;
                        uint32 neighborExpireTime = 2;
                        string neighborVectorAddr = 3;
                        string neighborVectorRd = 4;
                        message PimAfsDownstreamVectorAddrs {
                           message PimAfsDownstreamVectorAddr {
                              uint32 sequenceNum = 1;
                              string vectorAddr = 2;
                           }
                           repeated PimAfsDownstreamVectorAddr pimAfsDownstreamVectorAddr = 1;
                        }
                        PimAfsDownstreamVectorAddrs pimAfsDownstreamVectorAddrs = 5;
                     }
                     repeated PimAfsRouteDownstreamVector pimAfsRouteDownstreamVector = 1;
                  }
                  PimAfsRouteDownstreamVectors pimAfsRouteDownstreamVectors = 2;
                  enum SgAttributeState {
                     SgAttributeState_SAFE = 0;
                     SgAttributeState_UNSAFE = 1;
                  };
                  SgAttributeState sgAttributeState = 3;
                  enum SgDsAstState {
                     SgDsAstState_LOSER = 0;
                     SgDsAstState_NOINFO = 1;
                     SgDsAstState_WINNER = 2;
                  };
                  SgDsAstState sgDsAstState = 4;
                  uint32 sgDsAstTime = 5;
                  string sgDsAstWinAddr = 6;
                  uint32 sgDsAstWinMetric = 7;
                  uint32 sgDsAstWinMetricPre = 8;
                  bool sgDsDrState = 9;
                  uint32 sgDsExpireTime = 10;
                  bool sgDsLocalMember = 11;
                  string sgDsOifName = 12;
                  uint32 sgDsPPTTime = 13;
                  string sgDsProtoclType = 14;
                  uint32 sgDsRptExpireTime = 15;
                  uint32 sgDsRptPPTTime = 16;
                  enum SgDsRptState {
                     SgDsRptState_MAX = 0;
                     SgDsRptState_NOINFO = 1;
                     SgDsRptState_PRUNED = 2;
                     SgDsRptState_PRUNEPENDING = 3;
                  };
                  SgDsRptState sgDsRptState = 17;
                  enum SgDsState {
                     SgDsState_JOINED = 0;
                     SgDsState_NOINFO = 1;
                     SgDsState_PRUNED = 2;
                     SgDsState_PRUNEPENDING = 3;
                  };
                  SgDsState sgDsState = 18;
                  uint32 sgDsUpTime = 19;
                  string sgElectedNeighbor = 20;
                  string sgElectedVector = 21;
                  uint32 sgVectorNum = 22;
               }
               repeated PimAfsRouteDownstreamTbl pimAfsRouteDownstreamTbl = 1;
            }
            PimAfsRouteDownstreamTbls pimAfsRouteDownstreamTbls = 9;
            string rpAddr = 10;
            bool rpAddrIsLocal = 11;
            enum RpModeType {
               RpModeType_AUTORP = 0;
               RpModeType_BSR = 1;
               RpModeType_CONFIGSSM = 2;
               RpModeType_EMBEDDED = 3;
               RpModeType_FIXED = 4;
               RpModeType_OTHER = 5;
               RpModeType_STATIC = 6;
            };
            RpModeType rpModeType = 12;
            string sgElectVectorAddr = 13;
            string sgElectVectorRd = 14;
            string sgFlag = 15;
            uint32 sgGraftTime = 16;
            string sgIifName = 17;
            uint32 sgOverrideTime = 18;
            uint32 sgPruneLimitTime = 19;
            string sgReferAddr = 20;
            enum SgRegState {
               SgRegState_JOIN = 0;
               SgRegState_JOINPENDING = 1;
               SgRegState_NOINFO = 2;
               SgRegState_PRUNE = 3;
            };
            SgRegState sgRegState = 21;
            uint32 sgRegStopTime = 22;
            string sgRpfAddr = 23;
            uint32 sgRpfMaskLen = 24;
            uint32 sgRpfMetric = 25;
            uint32 sgRpfMetricPre = 26;
            uint32 sgUpExpTime = 27;
            string sgUpNbrAddr = 28;
            enum SgUpProtoclType {
               SgUpProtoclType_ASM = 0;
               SgUpProtoclType_BIDIR = 1;
               SgUpProtoclType_DM = 2;
               SgUpProtoclType_NONE = 3;
               SgUpProtoclType_OTHER = 4;
               SgUpProtoclType_SSM = 5;
            };
            SgUpProtoclType sgUpProtoclType = 29;
            uint32 sgUpRptOverTime = 30;
            enum SgUpRptState {
               SgUpRptState_MAX = 0;
               SgUpRptState_NOTJOINED = 1;
               SgUpRptState_NOTPRUNED = 2;
               SgUpRptState_PRUNED = 3;
            };
            SgUpRptState sgUpRptState = 31;
            enum SgUpState {
               SgUpState_ACKPEND = 0;
               SgUpState_FORWARD = 1;
               SgUpState_JOINED = 2;
               SgUpState_NOTJOINED = 3;
               SgUpState_PRUNED = 4;
            };
            SgUpState sgUpState = 32;
            uint32 sgUptime = 33;
            string sgVectorAddr = 34;
            string sgVectorRd = 35;
            string srcAddr = 36;
            string srcVrfName = 37;
            uint32 userId = 38;
            string vrfName = 39;
         }
         repeated PimAfsRouteTbl pimAfsRouteTbl = 1;
      }
      PimAfsRouteTbls pimAfsRouteTbls = 9;
      message PimAfsRpBidirIIfInfos {
         message PimAfsRpBidirIIfInfo {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            string ifName = 2;
            string rpAddr = 3;
            bool rpfInf = 4;
            uint32 upTime = 5;
            string vrfName = 6;
         }
         repeated PimAfsRpBidirIIfInfo pimAfsRpBidirIIfInfo = 1;
      }
      PimAfsRpBidirIIfInfos pimAfsRpBidirIIfInfos = 10;
      message PimAfsRpfVectorPaths {
         message PimAfsRpfVectorPath {
            string pathName = 1;
            enum PathType {
               PathType_LOOSE = 0;
               PathType_STRICT = 1;
            };
            PathType pathType = 2;
            message VectorPathHops {
               message VectorPathHop {
                  uint32 hopIndex = 1;
                  string hopIpAddr = 2;
               }
               repeated VectorPathHop vectorPathHop = 1;
            }
            VectorPathHops vectorPathHops = 3;
         }
         repeated PimAfsRpfVectorPath pimAfsRpfVectorPath = 1;
      }
      PimAfsRpfVectorPaths pimAfsRpfVectorPaths = 11;
      message PimAfsSchVrfConMsgs {
         message PimAfsSchVrfConMsg {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 crpFilterNum = 2;
            uint32 crpInvaNum = 3;
            uint32 crpRecvNum = 4;
            uint32 crpSendNum = 5;
            message PimAfsSchIfConMsgs {
               message PimAfsSchIfConMsg {
                  uint32 assertFilterNum = 1;
                  uint32 assertInvaNum = 2;
                  uint32 assertRecvNum = 3;
                  uint32 assertSendNum = 4;
                  uint32 backoffFilterNum = 5;
                  uint32 backoffInvaNum = 6;
                  uint32 backoffRecvNum = 7;
                  uint32 backoffSendNum = 8;
                  uint32 bsrFilterNum = 9;
                  uint32 bsrInvaNum = 10;
                  uint32 bsrRecvNum = 11;
                  uint32 bsrSendNum = 12;
                  uint32 graftAckFilterNum = 13;
                  uint32 graftAckInvaNum = 14;
                  uint32 graftAckRecvNum = 15;
                  uint32 graftAckSendNum = 16;
                  uint32 graftFilterNum = 17;
                  uint32 graftInvaNum = 18;
                  uint32 graftRecvNum = 19;
                  uint32 graftSendNum = 20;
                  uint32 helloFilterNum = 21;
                  uint32 helloInvaNum = 22;
                  uint32 helloRecvNum = 23;
                  uint32 helloSendNum = 24;
                  string ifName = 25;
                  uint32 jpFilterNum = 26;
                  uint32 jpInvaNum = 27;
                  uint32 jpRecvNum = 28;
                  uint32 jpSendNum = 29;
                  uint32 offerFilterNum = 30;
                  uint32 offerInvaNum = 31;
                  uint32 offerRecvNum = 32;
                  uint32 offerSendNum = 33;
                  uint32 passFilterNum = 34;
                  uint32 passInvaNum = 35;
                  uint32 passRecvNum = 36;
                  uint32 passSendNum = 37;
                  uint32 staRefFilterNum = 38;
                  uint32 staRefInvaNum = 39;
                  uint32 staRefRecvNum = 40;
                  uint32 staRefSendNum = 41;
                  uint32 winFilterNum = 42;
                  uint32 winInvaNum = 43;
                  uint32 winRecvNum = 44;
                  uint32 winSendNum = 45;
               }
               repeated PimAfsSchIfConMsg pimAfsSchIfConMsg = 1;
            }
            PimAfsSchIfConMsgs pimAfsSchIfConMsgs = 6;
            uint32 probeFilterNum = 7;
            uint32 probeInvaNum = 8;
            uint32 probeRecvNum = 9;
            uint32 probeSendNum = 10;
            uint32 regFilterNum = 11;
            uint32 regInvaNum = 12;
            uint32 regRecvNum = 13;
            uint32 regSendNum = 14;
            uint32 regStopFltNum = 15;
            uint32 regStopInvaNum = 16;
            uint32 regStopRecvNum = 17;
            uint32 regStopSendNum = 18;
            string vrfName = 19;
         }
         repeated PimAfsSchVrfConMsg pimAfsSchVrfConMsg = 1;
      }
      PimAfsSchVrfConMsgs pimAfsSchVrfConMsgs = 12;
      message PimAfsSiteCfgs {
         message PimAfsSiteCfg {
            enum AddressFamily {
               AddressFamily_IPV4UNICAST = 0;
               AddressFamily_IPV6UNICAST = 1;
            };
            AddressFamily addressFamily = 1;
            uint32 assertHoldTime = 2;
            string bsrPlyIpv6 = 3;
            string bsrPlyName = 4;
            bool cloneIntfInhEnable = 5;
            uint32 drPriority = 6;
            string embRpPlyName = 7;
            bool embeddedRp = 8;
            uint32 helloHoldtime = 9;
            uint32 helloInterval = 10;
            bool helloJoinAttrEnable = 11;
            uint32 helloLandelay = 12;
            uint32 helloOverride = 13;
            string intfInhDisPlyName = 14;
            string ipsecName = 15;
            enum IpsecType {
               IpsecType_FORALL = 0;
               IpsecType_FORHELLO = 1;
            };
            IpsecType ipsecType = 16;
            uint32 jpHoldTime = 17;
            uint32 jpTimerInterval = 18;
            bool jpTrigCacheDisable = 19;
            bool nbrCheckRecv = 20;
            bool nbrCheckSend = 21;
            message PimAfsAnyRps {
               message PimAfsAnyRp {
                  string localAddress = 1;
                  message PimAfsRpPeers {
                     message PimAfsRpPeer {
                        string fwdPolicy = 1;
                        string fwdPolicyIpv6 = 2;
                        bool fwdSaSwt = 3;
                        string rpPeerAddress = 4;
                     }
                     repeated PimAfsRpPeer pimAfsRpPeer = 1;
                  }
                  PimAfsRpPeers pimAfsRpPeers = 2;
                  string rpAddress = 3;
               }
               repeated PimAfsAnyRp pimAfsAnyRp = 1;
            }
            PimAfsAnyRps pimAfsAnyRps = 22;
            message PimAfsBidirCfg {
               uint32 backOffInterval = 1;
               bool bidirPimEnable = 2;
               uint32 electRobCount = 3;
               uint32 offerInterval = 4;
            }
            PimAfsBidirCfg pimAfsBidirCfg = 23;
            message PimAfsCloneJoins {
               message PimAfsCloneJoin {
                  string backupJoinSrcAddr = 1;
                  uint32 masklen = 2;
                  string primaryJoinSrcAddr = 3;
                  string sourceAddr = 4;
               }
               repeated PimAfsCloneJoin pimAfsCloneJoin = 1;
            }
            PimAfsCloneJoins pimAfsCloneJoins = 24;
            message PimAfsCloneSources {
               message PimAfsCloneSource {
                  string backupSrcAddr = 1;
                  uint32 masklen = 2;
                  string primarySrcAddr = 3;
                  string sourceAddr = 4;
               }
               repeated PimAfsCloneSource pimAfsCloneSource = 1;
            }
            PimAfsCloneSources pimAfsCloneSources = 25;
            message PimAfsP2MpBindCfgs {
               message PimAfsP2MpBindCfg {
                  string p2mpRootIp = 1;
                  uint32 tunnelId = 2;
               }
               repeated PimAfsP2MpBindCfg pimAfsP2mpBindCfg = 1;
            }
            PimAfsP2MpBindCfgs pimAfsP2mpBindCfgs = 26;
            message PimAfsP2MpCfg {
               bool bRpfDisable = 1;
               bool bRpfEcmpEnable = 2;
               bool bSrcProxyEnable = 3;
               string rpfDisablePlyName = 4;
               string rpfDisablePlyNameIpv6 = 5;
               string srcProxyPlyName = 6;
               string srcProxyPlyNameIpv6 = 7;
            }
            PimAfsP2MpCfg pimAfsP2mpCfg = 27;
            message PimAfsRpfVectorDestinations {
               message PimAfsRpfVectorDestination {
                  string destinationAddr = 1;
                  uint32 masklen = 2;
                  string pathName = 3;
               }
               repeated PimAfsRpfVectorDestination pimAfsRpfVectorDestination = 1;
            }
            PimAfsRpfVectorDestinations pimAfsRpfVectorDestinations = 28;
            message PimAfsSptSwitch6S {
               message PimAfsSptSwitch6 {
                  bool infinity = 1;
                  bool isACLEnable = 2;
                  uint32 sptGrpPlcyOrder = 3;
                  string sptGrpPlyIpv6 = 4;
                  uint32 sptThreshHold = 5;
               }
               repeated PimAfsSptSwitch6 pimAfsSptSwitch6 = 1;
            }
            PimAfsSptSwitch6S pimAfsSptSwitch6s = 29;
            message PimAfsSptSwitchs {
               message PimAfsSptSwitch {
                  bool infinity = 1;
                  bool isACLEnable = 2;
                  uint32 sptGrpPlcyOrder = 3;
                  string sptGrpPlyName = 4;
                  uint32 sptThreshHold = 5;
               }
               repeated PimAfsSptSwitch pimAfsSptSwitch = 1;
            }
            PimAfsSptSwitchs pimAfsSptSwitchs = 30;
            message PimAfsStaticRps {
               message PimAfsStaticRp {
                  enum BidirEnable {
                     BidirEnable_BIDIR = 0;
                     BidirEnable_NOTBIDIR = 1;
                  };
                  BidirEnable bidirEnable = 1;
                  enum Preference {
                     Preference_NOTPREFER = 0;
                     Preference_PREFER = 1;
                  };
                  Preference preference = 2;
                  string staticRpAddr = 3;
                  string staticRpPlyName = 4;
                  string staticRpPlyNameIpv6 = 5;
               }
               repeated PimAfsStaticRp pimAfsStaticRp = 1;
            }
            PimAfsStaticRps pimAfsStaticRps = 31;
            message PimAfsVectorCfg {
               bool rpfVectorCompatibleStandard = 1;
               bool rpfVectorEnable = 2;
            }
            PimAfsVectorCfg pimAfsVectorCfg = 32;
            bool pimFrr = 33;
            string pimFrrPolicyName = 34;
            uint32 probeInterval = 35;
            bool regCheckSum = 36;
            string regPlyIpv6 = 37;
            string regPlyName = 38;
            string regSrcAddr = 39;
            string regSrcIfName = 40;
            uint32 regSuppInterval = 41;
            bool regWithProbe = 42;
            bool rpLoadSplit = 43;
            uint32 sourceLifeTime = 44;
            uint32 sptDetInterval = 45;
            string srcPlyIpv6 = 46;
            string srcPlyName = 47;
            string ssmPlyIpv6 = 48;
            string ssmPlyName = 49;
            uint32 staRefRatLimit = 50;
            uint32 staRefreshInt = 51;
            uint32 staRefreshTtl = 52;
            string uniIpsecName = 53;
            string vrfName = 54;
            bool genIdChangEnable = 55;
         }
         repeated PimAfsSiteCfg pimAfsSiteCfg = 1;
      }
      PimAfsSiteCfgs pimAfsSiteCfgs = 13;
   }
   Pimafspro pimafspro = 5;
   message PimPackets {
      message PimPacket {
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4UNICAST = 1;
            AddrFamily_IPV6UNICAST = 2;
         };
         AddrFamily addr_family = 1 [json_name = "addr-family"];
         message InvalidPackets {
            message InvalidPacket {
               uint32 packet_index = 1 [json_name = "packet-index"];
               string interface = 2 [json_name = "interface"];
               string time = 3 [json_name = "time"];
               uint32 message_length = 4 [json_name = "message-length"];
               string invalid_reason = 5 [json_name = "invalid-reason"];
               string packet_content = 6 [json_name = "packet-content"];
            }
            repeated InvalidPacket invalid_packet = 1 [json_name = "invalid-packet"];
         }
         InvalidPackets invalid_packets = 2 [json_name = "invalid-packets"];
      }
      repeated PimPacket pim_packet = 1 [json_name = "pim-packet"];
   }
   PimPackets pim_packets = 6 [json_name = "pim-packets"];
}
message HwPimBasNeighborLoss {
   int32 InstanceID = 1;
   string InstanceName = 2;
   string NbrAddr = 3;
   int32 NbrAddrType = 4;
   int32 NbrIntIndex = 5;
   string NbrIntName = 6;
   int32 NbrUpTime = 7;
   enum NeighborLossReason_1 {
      NeighborLossReason_HOLDTIMEEXPIRED = 0;
   };
   NeighborLossReason_1 NeighborLossReason = 8;
}
message InterfaceElection {
   string Addr = 1;
   uint32 IfAddrType = 2;
   uint32 IfIPverion = 3;
   uint32 IfIndex = 4;
   uint32 PimInstanceID = 5;
   string PimInstanceName = 6;
   string PimInterfaceName = 7;
}
message InvalidJoinPrune {
   uint32 GroupMappingAddrType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddrType = 4;
   string GrpAddr = 5;
   uint32 GrpPfxLen = 6;
   uint32 InvJPAddrType = 7;
   string InvJPGrpAddr = 8;
   string InvJPOriginAddr = 9;
   string InvJPRpAddr = 10;
   string NbrAddr = 11;
   uint32 NbrAddrType = 12;
   uint32 NbrIfIndex = 13;
   string NbrName = 14;
   uint32 NbrUpTime = 15;
   uint32 PimInstanceID = 16;
   string PimInstanceName = 17;
   string RPAddr = 18;
}
message InvalidRegister {
   uint32 GroupMappingAddressType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddressType = 4;
   string GrpAddr = 5;
   uint32 GrpPfxLen = 6;
   uint32 InvRegAddressType = 7;
   string InvRegGrpAddr = 8;
   string InvRegOriginAddr = 9;
   string InvRegRpAddr = 10;
   uint32 PimInstanceID = 11;
   string PimInstanceName = 12;
   string RPAddr = 13;
}
message NeighborLoss {
   int32 InstanceID = 1;
   string InstanceName = 2;
   string NbrAddr = 3;
   int32 NbrAddrType = 4;
   int32 NbrExpiryTime = 5;
   int32 NbrIntIndex = 6;
   string NbrIntName = 7;
   int32 NbrUpTime = 8;
   bytes NeighborLossReason = 9;
   uint32 ifIndex = 10;
}
message NewNeighbor {
   int32 InstanceID = 1;
   string InstanceName = 2;
   string NbrAddr = 3;
   int32 NbrAddrType = 4;
   int32 NbrExpiryTime = 5;
   int32 NbrIntIndex = 6;
   string NbrIntName = 7;
   int32 NbrUpTime = 8;
   bytes NeighborLossReason = 9;
   uint32 ifIndex = 10;
}
message PimNeighborLoss {
   string NbrAddr = 1;
   uint32 NbrAddrType = 2;
   uint32 NbrIntIndex = 3;
   uint32 NbrUpTime = 4;
}
message Piminterfaceelection {
   string Addr = 1;
   uint32 IfAddrType = 2;
   uint32 IfIPverion = 3;
   uint32 IfIndex = 4;
}
message Piminvalidjoinprune {
   uint32 GroupMappingAddrType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddrType = 4;
   string GrpAddr = 5;
   uint32 GrpPfxLen = 6;
   uint32 InvJPAddrType = 7;
   string InvJPGrpAddr = 8;
   string InvJPOriginAddr = 9;
   string InvJPRpAddr = 10;
   string NbrAddr = 11;
   uint32 NbrAddrType = 12;
   uint32 NbrIfIndex = 13;
   uint32 NbrUpTime = 14;
   string RPAddr = 15;
}
message Piminvalidregister {
   uint32 GroupMappingAddressType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddressType = 4;
   string GrpAddr = 5;
   uint32 GrpPfxLen = 6;
   uint32 InvRegAddressType = 7;
   string InvRegGrpAddr = 8;
   string InvRegOriginAddr = 9;
   string InvRegRpAddr = 10;
   string RPAddr = 11;
}
message Pimrpmappingchange {
   uint32 GroupMappingAddressType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddressType = 4;
   uint32 GrpPfxLen = 5;
   uint32 Precedence = 6;
   string RPAddr = 7;
   string szGrpAddr = 8;
}
message RouteExceed {
   string AddressFamily = 1;
   uint32 CurrentCount = 2;
   string GrpAddr = 3;
   string InstanceName = 4;
   uint32 LimitCount = 5;
   uint32 LimitType = 6;
   string ReasonType = 7;
   uint32 ReasonTypeCode = 8;
   string SrcAddr = 9;
}
message RouteExceedClear {
   string AddressFamily = 1;
   uint32 CurrentCount = 2;
   string GrpAddr = 3;
   string InstanceName = 4;
   uint32 LimitCount = 5;
   uint32 LimitType = 6;
   string ReasonType = 7;
   uint32 ReasonTypeCode = 8;
   string SrcAddr = 9;
}
message RouteThresholdExceed {
   string AddressFamily = 1;
   uint32 CurrentCount = 2;
   uint32 LimitCount = 3;
   uint32 LimitType = 4;
   string ReasonType = 5;
   uint32 ReasonTypeCode = 6;
   uint32 ThresholdCount = 7;
}
message RouteThresholdExceedClear {
   string AddressFamily = 1;
   uint32 CurrentCount = 2;
   uint32 LimitCount = 3;
   uint32 LimitType = 4;
   string ReasonType = 5;
   uint32 ReasonTypeCode = 6;
   uint32 ThresholdCount = 7;
}
message RpMappingChange {
   uint32 GroupMappingAddressType = 1;
   uint32 GroupMappingOrigin = 2;
   uint32 GroupMappingPimMode = 3;
   uint32 GroupMappingRPAddressType = 4;
   uint32 GrpPfxLen = 5;
   uint32 PimInstanceID = 6;
   string PimInstanceName = 7;
   uint32 Precedence = 8;
   string RPAddr = 9;
   string szGrpAddr = 10;
}
message HwPimBasNeighborExceed {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   string SlotName = 3;
}
message HwPimBasNeighborExceedClear {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   string SlotName = 3;
}
message HwPimVrfTypeSGExceed {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   string GrpAddr = 3;
   uint32 LimitCount = 4;
   uint32 LimitType = 5;
   string ReasonType = 6;
   uint32 ReasonTypeCode = 7;
   string SrcAddr = 8;
   string VpnName = 9;
}
message HwPimVrfTypeSGExceedClear {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   string GrpAddr = 3;
   uint32 LimitCount = 4;
   uint32 LimitType = 5;
   string ReasonType = 6;
   uint32 ReasonTypeCode = 7;
   string SrcAddr = 8;
   string VpnName = 9;
}
message HwPimVrfTypeSGThresholdExceed {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   uint32 LimitCount = 3;
   uint32 LimitType = 4;
   string ReasonType = 5;
   uint32 ReasonTypeCode = 6;
   uint32 ThresholdCount = 7;
   string VpnName = 8;
}
message HwPimVrfTypeSGThresholdExceedClear {
   int32 AddressFamily = 1;
   uint32 CurrentCount = 2;
   uint32 LimitCount = 3;
   uint32 LimitType = 4;
   string ReasonType = 5;
   uint32 ReasonTypeCode = 6;
   uint32 ThresholdCount = 7;
   string VpnName = 8;
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-04-28 20:47:26
// ProtoYang-version 1
// module huawei-l2vpn
// revision 2022-04-09
// revision 2021-08-05
// revision 2020-10-22
// revision 2020-05-14
// revision 2019-09-16
// revision 2019-07-08
// revision 2019-04-04
// namespace urn:huawei:yang:huawei-l2vpn

package huawei_l2vpn;

message L2Vpn {
   message Common {
      message Global {
         enum LdpDefaultMode {
            LdpDefaultMode_PWE3 = 0;
            LdpDefaultMode_MARTINI = 1;
         };
         LdpDefaultMode ldp_default_mode = 1 [json_name = "ldp-default-mode"];
         bool vpls_ignore_ac_state = 2 [json_name = "vpls-ignore-ac-state"];
         bool vpls_loop_detect_enable = 3 [json_name = "vpls-loop-detect-enable"];
         enum BfdCvType {
            BfdCvType_CVX_LINKAGEX_BFD = 0;
            BfdCvType_CVX_BFD = 1;
            BfdCvType_CVX_PWX_ACHX_BFD = 2;
         };
         BfdCvType bfd_cv_type = 4 [json_name = "bfd-cv-type"];
         bool ignore_te_oam_state = 5 [json_name = "ignore-te-oam-state"];
         bool auto_create_session = 6 [json_name = "auto-create-session"];
         bool grp_selective_ldp_enable = 7 [json_name = "grp-selective-ldp-enable"];
         uint32 label_block_size = 8 [json_name = "label-block-size"];
      }
      Global global = 1 [json_name = "global"];
      message PwTemplates {
         message PwTemplate {
            string name = 1 [json_name = "name"];
            string peer_address = 2 [json_name = "peer-address"];
            uint32 mtu = 3 [json_name = "mtu"];
            enum ControlWord {
               INVALID_ENUM_VALUE_ControlWord = 0;
               ControlWord_DISABLE = 1;
               ControlWord_ENABLE = 2;
            };
            ControlWord control_word = 4 [json_name = "control-word"];
            string tunnel_policy = 5 [json_name = "tunnel-policy"];
            string vccv_capability = 6 [json_name = "vccv-capability"];
            uint32 total_pw_num = 7 [json_name = "total-pw-num"];
            uint32 static_pw_num = 8 [json_name = "static-pw-num"];
            uint32 ldp_pw_num = 9 [json_name = "ldp-pw-num"];
            message TdmParameter {
               uint32 tdm_encapsulate_number = 1 [json_name = "tdm-encapsulate-number"];
               uint32 jitter_buffer = 2 [json_name = "jitter-buffer"];
               uint32 jitter_buffer_cep = 3 [json_name = "jitter-buffer-cep"];
               bool rtp_header = 4 [json_name = "rtp-header"];
               string idle_code = 5 [json_name = "idle-code"];
               enum PayloadCompression {
                  PayloadCompression_DISABLE = 0;
                  PayloadCompression_UNEQ = 1;
               };
               PayloadCompression payload_compression = 6 [json_name = "payload-compression"];
            }
            TdmParameter tdm_parameter = 10 [json_name = "tdm-parameter"];
            message AtmParameter {
               uint32 max_atm_cells = 1 [json_name = "max-atm-cells"];
               uint32 atm_pack_overtime = 2 [json_name = "atm-pack-overtime"];
               uint32 atm_transmit_cell = 3 [json_name = "atm-transmit-cell"];
               bool sequence_number = 4 [json_name = "sequence-number"];
            }
            AtmParameter atm_parameter = 11 [json_name = "atm-parameter"];
            message BfdParameter {
               uint32 min_rx_interval = 1 [json_name = "min-rx-interval"];
               uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
               uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
            }
            BfdParameter bfd_parameter = 12 [json_name = "bfd-parameter"];
            message FlowLabel {
               enum Ability {
                  Ability_DEFAULT = 0;
                  Ability_SEND = 1;
                  Ability_RECEIVE = 2;
                  Ability_BOTH = 3;
                  Ability_DISABLE = 4;
               };
               Ability ability = 1 [json_name = "ability"];
               bool static = 2 [json_name = "static"];
            }
            FlowLabel flow_label = 13 [json_name = "flow-label"];
            message QosParameter {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
               string profile_name = 3 [json_name = "profile-name"];
            }
            QosParameter qos_parameter = 14 [json_name = "qos-parameter"];
         }
         repeated PwTemplate pw_template = 1 [json_name = "pw-template"];
      }
      PwTemplates pw_templates = 2 [json_name = "pw-templates"];
      message PwApss {
         message PwAps {
            uint32 aps_id = 1 [json_name = "aps-id"];
            string description = 2 [json_name = "description"];
            enum ProtectType {
               INVALID_ENUM_VALUE_ProtectType = 0;
               ProtectType_PWX_APS = 1;
               ProtectType_MCX_PWX_APS = 2;
               ProtectType_PWX_FPS = 3;
            };
            ProtectType protect_type = 3 [json_name = "protect-type"];
            enum Role {
               INVALID_ENUM_VALUE_Role = 0;
               Role_PWX_APS = 1;
               Role_MASTER = 2;
               Role_SLAVE = 3;
            };
            Role role = 4 [json_name = "role"];
            uint32 remote_aps_id = 5 [json_name = "remote-aps-id"];
            uint32 holdoff = 6 [json_name = "holdoff"];
            uint32 wtr = 7 [json_name = "wtr"];
            enum OperationType {
               OperationType_NONX_REVERTIVE = 0;
               OperationType_REVERTIVE = 1;
            };
            OperationType operation_type = 8 [json_name = "operation-type"];
            enum ProtectMode {
               INVALID_ENUM_VALUE_ProtectMode = 0;
               ProtectMode_X_1TO1 = 1;
            };
            ProtectMode protect_mode = 9 [json_name = "protect-mode"];
            message PwApsInfo {
               enum ApsStatus {
                  INVALID_ENUM_VALUE_ApsStatus = 0;
                  ApsStatus_LO = 1;
                  ApsStatus_SFX_P = 2;
                  ApsStatus_FS = 3;
                  ApsStatus_SF = 4;
                  ApsStatus_SDX_P = 5;
                  ApsStatus_SD = 6;
                  ApsStatus_MS = 7;
                  ApsStatus_WTR = 8;
                  ApsStatus_EXER = 9;
                  ApsStatus_RR = 10;
                  ApsStatus_DNR = 11;
                  ApsStatus_NR = 12;
                  ApsStatus_MSX_P = 13;
                  ApsStatus_MSX_W = 14;
                  ApsStatus_EXERX_P = 15;
                  ApsStatus_EXERX_W = 16;
                  ApsStatus_RRX_P = 17;
                  ApsStatus_RRX_W = 18;
                  ApsStatus_NRX_P = 19;
                  ApsStatus_NRX_W = 20;
               };
               ApsStatus aps_status = 1 [json_name = "aps-status"];
               enum WorkPathStatus {
                  WorkPathStatus_NOX_DEFECT = 0;
                  WorkPathStatus_DEFECT = 1;
                  WorkPathStatus_DEFECTX_SD = 2;
                  WorkPathStatus_INVALID = 3;
               };
               WorkPathStatus work_path_status = 2 [json_name = "work-path-status"];
               enum ProtectPathStatus {
                  ProtectPathStatus_NOX_DEFECT = 0;
                  ProtectPathStatus_DEFECT = 1;
                  ProtectPathStatus_DEFECTX_SD = 2;
                  ProtectPathStatus_INVALID = 3;
               };
               ProtectPathStatus protect_path_status = 3 [json_name = "protect-path-status"];
               enum FarEndStatus {
                  INVALID_ENUM_VALUE_FarEndStatus = 0;
                  FarEndStatus_LO = 1;
                  FarEndStatus_SFX_P = 2;
                  FarEndStatus_FS = 3;
                  FarEndStatus_SF = 4;
                  FarEndStatus_SDX_P = 5;
                  FarEndStatus_SD = 6;
                  FarEndStatus_MS = 7;
                  FarEndStatus_WTR = 8;
                  FarEndStatus_EXER = 9;
                  FarEndStatus_RR = 10;
                  FarEndStatus_DNR = 11;
                  FarEndStatus_NR = 12;
                  FarEndStatus_MSX_P = 13;
                  FarEndStatus_MSX_W = 14;
                  FarEndStatus_EXERX_P = 15;
                  FarEndStatus_EXERX_W = 16;
                  FarEndStatus_RRX_P = 17;
                  FarEndStatus_RRX_W = 18;
                  FarEndStatus_NRX_P = 19;
                  FarEndStatus_NRX_W = 20;
               };
               FarEndStatus far_end_status = 4 [json_name = "far-end-status"];
               enum RequestResult {
                  RequestResult_WORK = 0;
                  RequestResult_PROTECT = 1;
               };
               RequestResult request_result = 5 [json_name = "request-result"];
               string alarm = 6 [json_name = "alarm"];
               uint32 total_vpn_num = 7 [json_name = "total-vpn-num"];
            }
            PwApsInfo pw_aps_info = 10 [json_name = "pw-aps-info"];
            message ApsVpwsInstances {
               message ApsVpwsInstance {
                  string client_interface = 1 [json_name = "client-interface"];
                  string instance_name = 2 [json_name = "instance-name"];
                  enum BindType {
                     INVALID_ENUM_VALUE_BindType = 0;
                     BindType_ADMIN = 1;
                     BindType_REFERENCE = 2;
                  };
                  BindType bind_type = 3 [json_name = "bind-type"];
                  enum EncapsulationType {
                     INVALID_ENUM_VALUE_EncapsulationType = 0;
                     EncapsulationType_FR = 1;
                     EncapsulationType_ATMX_AAL5X_SDU = 2;
                     EncapsulationType_ATMX_TRANSX_CELL = 3;
                     EncapsulationType_VLAN = 4;
                     EncapsulationType_ETHERNET = 5;
                     EncapsulationType_HDLC = 6;
                     EncapsulationType_PPP = 7;
                     EncapsulationType_CEM = 8;
                     EncapsulationType_ATMX_NTO1X_VCC = 9;
                     EncapsulationType_ATMX_NTO1X_VPC = 10;
                     EncapsulationType_IPX_LAYER2 = 11;
                     EncapsulationType_ATMX_1TO1X_VCC = 12;
                     EncapsulationType_ATMX_1TO1X_VPC = 13;
                     EncapsulationType_ATMX_AAL5X_PDU = 14;
                     EncapsulationType_FRX_PORTX_MODE = 15;
                     EncapsulationType_CEP = 16;
                     EncapsulationType_SATOPX_E1 = 17;
                     EncapsulationType_SATOPX_T1 = 18;
                     EncapsulationType_SATOPX_E3 = 19;
                     EncapsulationType_SATOPX_T3 = 20;
                     EncapsulationType_CESOPSNX_BASIC = 21;
                     EncapsulationType_TDMOIPX_AAL1 = 22;
                     EncapsulationType_CESOPSNX_TDM = 23;
                     EncapsulationType_TDMOIPX_AAL2 = 24;
                     EncapsulationType_FRX_DLCI = 25;
                     EncapsulationType_IPX_INTERWORKING = 64;
                     EncapsulationType_UNSUPPORT = 255;
                  };
                  EncapsulationType encapsulation_type = 4 [json_name = "encapsulation-type"];
                  string description = 5 [json_name = "description"];
                  message ApsVpwsPws {
                     message ApsVpwsPw {
                        enum Role {
                           INVALID_ENUM_VALUE_Role = 0;
                           Role_PRIMARY = 1;
                           Role_BACKUP = 2;
                           Role_BYPASS = 3;
                           Role_ACX_BYPASS = 7;
                           Role_PWX_BYPASS = 8;
                        };
                        Role role = 1 [json_name = "role"];
                        uint32 pw_id = 2 [json_name = "pw-id"];
                        enum EncapsulationType {
                           INVALID_ENUM_VALUE_EncapsulationType = 0;
                           EncapsulationType_FR = 1;
                           EncapsulationType_ATMX_AAL5X_SDU = 2;
                           EncapsulationType_ATMX_TRANSX_CELL = 3;
                           EncapsulationType_VLAN = 4;
                           EncapsulationType_ETHERNET = 5;
                           EncapsulationType_HDLC = 6;
                           EncapsulationType_PPP = 7;
                           EncapsulationType_CEM = 8;
                           EncapsulationType_ATMX_NTO1X_VCC = 9;
                           EncapsulationType_ATMX_NTO1X_VPC = 10;
                           EncapsulationType_IPX_LAYER2 = 11;
                           EncapsulationType_ATMX_1TO1X_VCC = 12;
                           EncapsulationType_ATMX_1TO1X_VPC = 13;
                           EncapsulationType_ATMX_AAL5X_PDU = 14;
                           EncapsulationType_FRX_PORTX_MODE = 15;
                           EncapsulationType_CEP = 16;
                           EncapsulationType_SATOPX_E1 = 17;
                           EncapsulationType_SATOPX_T1 = 18;
                           EncapsulationType_SATOPX_E3 = 19;
                           EncapsulationType_SATOPX_T3 = 20;
                           EncapsulationType_CESOPSNX_BASIC = 21;
                           EncapsulationType_TDMOIPX_AAL1 = 22;
                           EncapsulationType_CESOPSNX_TDM = 23;
                           EncapsulationType_TDMOIPX_AAL2 = 24;
                           EncapsulationType_FRX_DLCI = 25;
                           EncapsulationType_IPX_INTERWORKING = 64;
                           EncapsulationType_UNSUPPORT = 255;
                        };
                        EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
                        string peer_ip = 4 [json_name = "peer-ip"];
                        enum PwState {
                           PwState_DOWN = 0;
                           PwState_UP = 1;
                           PwState_BACKUP = 2;
                        };
                        PwState pw_state = 5 [json_name = "pw-state"];
                     }
                     repeated ApsVpwsPw aps_vpws_pw = 1 [json_name = "aps-vpws-pw"];
                  }
                  ApsVpwsPws aps_vpws_pws = 6 [json_name = "aps-vpws-pws"];
               }
               repeated ApsVpwsInstance aps_vpws_instance = 1 [json_name = "aps-vpws-instance"];
            }
            ApsVpwsInstances aps_vpws_instances = 11 [json_name = "aps-vpws-instances"];
         }
         repeated PwAps pw_aps = 1 [json_name = "pw-aps"];
      }
      PwApss pw_apss = 3 [json_name = "pw-apss"];
      message ServicePeers {
         message ServicePeer {
            string peer_ip = 1 [json_name = "peer-ip"];
            enum LdpMode {
               LdpMode_PWE3 = 0;
               LdpMode_MARTINI = 1;
               LdpMode_DEFAULT = 2;
            };
            LdpMode ldp_mode = 2 [json_name = "ldp-mode"];
         }
         repeated ServicePeer service_peer = 1 [json_name = "service-peer"];
      }
      ServicePeers service_peers = 4 [json_name = "service-peers"];
      message PeerNoRequests {
         message PeerNoRequest {
            string peer_ip = 1 [json_name = "peer-ip"];
         }
         repeated PeerNoRequest peer_no_request = 1 [json_name = "peer-no-request"];
      }
      PeerNoRequests peer_no_requests = 5 [json_name = "peer-no-requests"];
      message PeerBfdCvStds {
         message PeerBfdCvStd {
            string peer_ip = 1 [json_name = "peer-ip"];
            enum Enable {
               INVALID_ENUM_VALUE_Enable = 0;
               Enable_DISABLE = 1;
               Enable_ENABLE = 2;
            };
            Enable enable = 2 [json_name = "enable"];
            enum Type {
               Type_CVX_LINKAGEX_BFD = 0;
               Type_CVX_BFD = 1;
               Type_CVX_PWX_ACHX_BFD = 2;
            };
            Type type = 3 [json_name = "type"];
         }
         repeated PeerBfdCvStd peer_bfd_cv_std = 1 [json_name = "peer-bfd-cv-std"];
      }
      PeerBfdCvStds peer_bfd_cv_stds = 6 [json_name = "peer-bfd-cv-stds"];
      message VpwsBgpVpns {
         message VpwsBgpVpn {
            string name = 1 [json_name = "name"];
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_IPX_INTERWORKING = 64;
            };
            EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
            enum ControlWord {
               INVALID_ENUM_VALUE_ControlWord = 0;
               ControlWord_DISABLE = 1;
               ControlWord_ENABLE = 2;
            };
            ControlWord control_word = 3 [json_name = "control-word"];
            string route_distinguisher = 4 [json_name = "route-distinguisher"];
            uint32 mtu = 5 [json_name = "mtu"];
            bool ignore_mtu_match = 6 [json_name = "ignore-mtu-match"];
            string auto_route_distinguisher = 7 [json_name = "auto-route-distinguisher"];
            message VpnTargets {
               message VpnTarget {
                  string rt_value = 1 [json_name = "rt-value"];
                  enum RtType {
                     INVALID_ENUM_VALUE_RtType = 0;
                     RtType_EXPORTX_EXTCOMMUNITY = 2;
                     RtType_IMPORTX_EXTCOMMUNITY = 3;
                  };
                  RtType rt_type = 2 [json_name = "rt-type"];
               }
               repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
            }
            VpnTargets vpn_targets = 8 [json_name = "vpn-targets"];
            message Sites {
               message Site {
                  string name = 1 [json_name = "name"];
                  uint32 id = 2 [json_name = "id"];
                  uint32 range = 3 [json_name = "range"];
                  uint32 default_offset = 4 [json_name = "default-offset"];
                  message LabelBlocks {
                     message LabelBlock {
                        uint32 label_offset = 1 [json_name = "label-offset"];
                        uint32 label_base = 2 [json_name = "label-base"];
                        uint32 ce_base = 3 [json_name = "ce-base"];
                        uint32 label_range = 4 [json_name = "label-range"];
                     }
                     repeated LabelBlock label_block = 1 [json_name = "label-block"];
                  }
                  LabelBlocks label_blocks = 5 [json_name = "label-blocks"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 9 [json_name = "sites"];
            message RemoteSites {
               message RemoteSite {
                  uint32 id = 1 [json_name = "id"];
                  string peer_ip = 2 [json_name = "peer-ip"];
                  string route_distinguisher = 3 [json_name = "route-distinguisher"];
                  message Labels {
                     message Label {
                        uint32 label_offset = 1 [json_name = "label-offset"];
                        uint32 label_base = 2 [json_name = "label-base"];
                        uint32 label_range = 3 [json_name = "label-range"];
                     }
                     repeated Label label = 1 [json_name = "label"];
                  }
                  Labels labels = 4 [json_name = "labels"];
               }
               repeated RemoteSite remote_site = 1 [json_name = "remote-site"];
            }
            RemoteSites remote_sites = 10 [json_name = "remote-sites"];
         }
         repeated VpwsBgpVpn vpws_bgp_vpn = 1 [json_name = "vpws-bgp-vpn"];
      }
      VpwsBgpVpns vpws_bgp_vpns = 7 [json_name = "vpws-bgp-vpns"];
      message NotMatchRemoteLdps {
         message NotMatchRemoteLdp {
            uint32 pw_id = 1 [json_name = "pw-id"];
            string peer_ip = 2 [json_name = "peer-ip"];
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_FR = 1;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_CEM = 8;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_ATMX_AAL5X_PDU = 14;
               EncapsulationType_FRX_PORTX_MODE = 15;
               EncapsulationType_CEP = 16;
               EncapsulationType_SATOPX_E1 = 17;
               EncapsulationType_SATOPX_T1 = 18;
               EncapsulationType_SATOPX_E3 = 19;
               EncapsulationType_SATOPX_T3 = 20;
               EncapsulationType_CESOPSNX_BASIC = 21;
               EncapsulationType_TDMOIPX_AAL1 = 22;
               EncapsulationType_CESOPSNX_TDM = 23;
               EncapsulationType_TDMOIPX_AAL2 = 24;
               EncapsulationType_FRX_DLCI = 25;
               EncapsulationType_IPX_INTERWORKING = 64;
               EncapsulationType_UNSUPPORT = 255;
            };
            EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
            uint32 remote_label = 4 [json_name = "remote-label"];
            uint32 remote_group_id = 5 [json_name = "remote-group-id"];
            uint32 remote_mtu = 6 [json_name = "remote-mtu"];
            enum RemoteStateCode {
               RemoteStateCode_FORWARD = 0;
               RemoteStateCode_STANDBY = 1;
               RemoteStateCode_ACX_FAULT = 2;
               RemoteStateCode_PSNX_FAULT = 3;
               RemoteStateCode_NOTX_FORWARD = 4;
            };
            RemoteStateCode remote_state_code = 7 [json_name = "remote-state-code"];
         }
         repeated NotMatchRemoteLdp not_match_remote_ldp = 1 [json_name = "not-match-remote-ldp"];
      }
      NotMatchRemoteLdps not_match_remote_ldps = 8 [json_name = "not-match-remote-ldps"];
      message VpwsStatistic {
         message VpwsLdpAc {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsLdpAc vpws_ldp_ac = 1 [json_name = "vpws-ldp-ac"];
         message VpwsLdpPw {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsLdpPw vpws_ldp_pw = 2 [json_name = "vpws-ldp-pw"];
         message VpwsLdpPwRemote {
            uint32 remote_num = 1 [json_name = "remote-num"];
         }
         VpwsLdpPwRemote vpws_ldp_pw_remote = 3 [json_name = "vpws-ldp-pw-remote"];
         message VpwsStaticAc {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsStaticAc vpws_static_ac = 4 [json_name = "vpws-static-ac"];
         message VpwsStaticPw {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsStaticPw vpws_static_pw = 5 [json_name = "vpws-static-pw"];
         message VpwsSwitchInstance {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsSwitchInstance vpws_switch_instance = 6 [json_name = "vpws-switch-instance"];
         message VpwsVrrps {
            message VpwsVrrp {
               string vrrp_interface_name = 1 [json_name = "vrrp-interface-name"];
               uint32 vrrp_vrid = 2 [json_name = "vrrp-vrid"];
               enum VrrpState {
                  VrrpState_INITIALIZE = 0;
                  VrrpState_BACKUP = 1;
                  VrrpState_MASTER = 2;
               };
               VrrpState vrrp_state = 3 [json_name = "vrrp-state"];
               uint32 pw_number = 4 [json_name = "pw-number"];
               message PwInfos {
                  message PwInfo {
                     string client_interface_name = 1 [json_name = "client-interface-name"];
                     enum PwState {
                        PwState_DOWN = 0;
                        PwState_UP = 1;
                        PwState_BACKUP = 2;
                     };
                     PwState pw_state = 2 [json_name = "pw-state"];
                     uint32 pw_id = 3 [json_name = "pw-id"];
                     enum EncapsulationType {
                        INVALID_ENUM_VALUE_EncapsulationType = 0;
                        EncapsulationType_FR = 1;
                        EncapsulationType_ATMX_AAL5X_SDU = 2;
                        EncapsulationType_ATMX_TRANSX_CELL = 3;
                        EncapsulationType_VLAN = 4;
                        EncapsulationType_ETHERNET = 5;
                        EncapsulationType_HDLC = 6;
                        EncapsulationType_PPP = 7;
                        EncapsulationType_CEM = 8;
                        EncapsulationType_ATMX_NTO1X_VCC = 9;
                        EncapsulationType_ATMX_NTO1X_VPC = 10;
                        EncapsulationType_IPX_LAYER2 = 11;
                        EncapsulationType_ATMX_1TO1X_VCC = 12;
                        EncapsulationType_ATMX_1TO1X_VPC = 13;
                        EncapsulationType_ATMX_AAL5X_PDU = 14;
                        EncapsulationType_FRX_PORTX_MODE = 15;
                        EncapsulationType_CEP = 16;
                        EncapsulationType_SATOPX_E1 = 17;
                        EncapsulationType_SATOPX_T1 = 18;
                        EncapsulationType_SATOPX_E3 = 19;
                        EncapsulationType_SATOPX_T3 = 20;
                        EncapsulationType_CESOPSNX_BASIC = 21;
                        EncapsulationType_TDMOIPX_AAL1 = 22;
                        EncapsulationType_CESOPSNX_TDM = 23;
                        EncapsulationType_TDMOIPX_AAL2 = 24;
                        EncapsulationType_FRX_DLCI = 25;
                        EncapsulationType_IPX_INTERWORKING = 64;
                        EncapsulationType_UNSUPPORT = 255;
                     };
                     EncapsulationType encapsulation_type = 4 [json_name = "encapsulation-type"];
                     enum LinkState {
                        LinkState_DEFAULT = 0;
                        LinkState_DOWN = 1;
                        LinkState_UP = 2;
                     };
                     LinkState link_state = 5 [json_name = "link-state"];
                  }
                  repeated PwInfo pw_info = 1 [json_name = "pw-info"];
               }
               PwInfos pw_infos = 5 [json_name = "pw-infos"];
            }
            repeated VpwsVrrp vpws_vrrp = 1 [json_name = "vpws-vrrp"];
         }
         VpwsVrrps vpws_vrrps = 7 [json_name = "vpws-vrrps"];
         message Arp {
            uint32 total_ce_mac_num = 1 [json_name = "total-ce-mac-num"];
            uint32 dynamic_ce_mac_num = 2 [json_name = "dynamic-ce-mac-num"];
            uint32 static_ce_mac_num = 3 [json_name = "static-ce-mac-num"];
            uint32 brd_ce_mac_num = 4 [json_name = "brd-ce-mac-num"];
         }
         Arp arp = 8 [json_name = "arp"];
         message VpwsCccInstance {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 local_num = 2 [json_name = "local-num"];
            uint32 local_up_num = 3 [json_name = "local-up-num"];
            uint32 remote_num = 4 [json_name = "remote-num"];
            uint32 remote_up_num = 5 [json_name = "remote-up-num"];
         }
         VpwsCccInstance vpws_ccc_instance = 9 [json_name = "vpws-ccc-instance"];
         message VpwsCccAc {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsCccAc vpws_ccc_ac = 10 [json_name = "vpws-ccc-ac"];
         message VpwsBgpPw {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         VpwsBgpPw vpws_bgp_pw = 11 [json_name = "vpws-bgp-pw"];
      }
      VpwsStatistic vpws_statistic = 9 [json_name = "vpws-statistic"];
      message VplsStatistic {
         message VplsInstance {
            uint32 total_vsi_num = 1 [json_name = "total-vsi-num"];
            uint32 vsi_up_num = 2 [json_name = "vsi-up-num"];
            uint32 vsi_down_num = 3 [json_name = "vsi-down-num"];
            uint32 ldp_mode_num = 4 [json_name = "ldp-mode-num"];
            uint32 bgp_vsi_num = 5 [json_name = "bgp-vsi-num"];
            uint32 bgpad_vsi_num = 6 [json_name = "bgpad-vsi-num"];
            uint32 unspecified_num = 7 [json_name = "unspecified-num"];
            uint32 mix_vsi_num = 8 [json_name = "mix-vsi-num"];
            uint32 max_vsi_num = 9 [json_name = "max-vsi-num"];
         }
         VplsInstance vpls_instance = 1 [json_name = "vpls-instance"];
         message VplsPw {
            uint32 total_pw_num = 1 [json_name = "total-pw-num"];
            uint32 up_pw_num = 2 [json_name = "up-pw-num"];
            uint32 down_pw_num = 3 [json_name = "down-pw-num"];
            uint32 ldp_pw_num = 4 [json_name = "ldp-pw-num"];
            uint32 bgp_pw_num = 5 [json_name = "bgp-pw-num"];
            uint32 bgpad_pw_num = 6 [json_name = "bgpad-pw-num"];
         }
         VplsPw vpls_pw = 2 [json_name = "vpls-pw"];
         message Ac {
            uint32 total_num = 1 [json_name = "total-num"];
            uint32 up_num = 2 [json_name = "up-num"];
            uint32 down_num = 3 [json_name = "down-num"];
         }
         Ac ac = 3 [json_name = "ac"];
         message VplsTunnelReferences {
            message VplsTunnelReference {
               string tunnel_policy = 1 [json_name = "tunnel-policy"];
               message References {
                  message Reference {
                     string instance_name = 1 [json_name = "instance-name"];
                  }
                  repeated Reference reference = 1 [json_name = "reference"];
               }
               References references = 2 [json_name = "references"];
            }
            repeated VplsTunnelReference vpls_tunnel_reference = 1 [json_name = "vpls-tunnel-reference"];
         }
         VplsTunnelReferences vpls_tunnel_references = 4 [json_name = "vpls-tunnel-references"];
         message VplsLoopDetect {
            uint32 total_num = 1 [json_name = "total-num"];
         }
         VplsLoopDetect vpls_loop_detect = 5 [json_name = "vpls-loop-detect"];
         message VplsBgpads {
            message VplsBgpad {
               string vpls_id = 1 [json_name = "vpls-id"];
               string rt_value = 2 [json_name = "rt-value"];
               enum RtType {
                  INVALID_ENUM_VALUE_RtType = 0;
                  RtType_EXPORTX_EXTCOMMUNITY = 2;
                  RtType_IMPORTX_EXTCOMMUNITY = 3;
               };
               RtType rt_type = 3 [json_name = "rt-type"];
            }
            repeated VplsBgpad vpls_bgpad = 1 [json_name = "vpls-bgpad"];
         }
         VplsBgpads vpls_bgpads = 6 [json_name = "vpls-bgpads"];
         message BgpadRemotes {
            message BgpadRemote {
               string peer_ip = 1 [json_name = "peer-ip"];
               string vpls_id = 2 [json_name = "vpls-id"];
               string vsi_id = 3 [json_name = "vsi-id"];
               uint32 vsi_index = 4 [json_name = "vsi-index"];
               message ExportVpnTargets {
                  message ExportVpnTarget {
                     string rt_value = 1 [json_name = "rt-value"];
                     enum RtType {
                        INVALID_ENUM_VALUE_RtType = 0;
                        RtType_EXPORTX_EXTCOMMUNITY = 2;
                        RtType_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     RtType rt_type = 2 [json_name = "rt-type"];
                  }
                  repeated ExportVpnTarget export_vpn_target = 1 [json_name = "export-vpn-target"];
               }
               ExportVpnTargets export_vpn_targets = 5 [json_name = "export-vpn-targets"];
            }
            repeated BgpadRemote bgpad_remote = 1 [json_name = "bgpad-remote"];
         }
         BgpadRemotes bgpad_remotes = 7 [json_name = "bgpad-remotes"];
         message RemoteFec129S {
            message RemoteFec129 {
               string peer_router_id = 1 [json_name = "peer-router-id"];
               enum EncapsulationType {
                  INVALID_ENUM_VALUE_EncapsulationType = 0;
                  EncapsulationType_FR = 1;
                  EncapsulationType_ATMX_AAL5X_SDU = 2;
                  EncapsulationType_ATMX_TRANSX_CELL = 3;
                  EncapsulationType_VLAN = 4;
                  EncapsulationType_ETHERNET = 5;
                  EncapsulationType_HDLC = 6;
                  EncapsulationType_PPP = 7;
                  EncapsulationType_CEM = 8;
                  EncapsulationType_ATMX_NTO1X_VCC = 9;
                  EncapsulationType_ATMX_NTO1X_VPC = 10;
                  EncapsulationType_IPX_LAYER2 = 11;
                  EncapsulationType_ATMX_1TO1X_VCC = 12;
                  EncapsulationType_ATMX_1TO1X_VPC = 13;
                  EncapsulationType_ATMX_AAL5X_PDU = 14;
                  EncapsulationType_FRX_PORTX_MODE = 15;
                  EncapsulationType_CEP = 16;
                  EncapsulationType_SATOPX_E1 = 17;
                  EncapsulationType_SATOPX_T1 = 18;
                  EncapsulationType_SATOPX_E3 = 19;
                  EncapsulationType_SATOPX_T3 = 20;
                  EncapsulationType_CESOPSNX_BASIC = 21;
                  EncapsulationType_TDMOIPX_AAL1 = 22;
                  EncapsulationType_CESOPSNX_TDM = 23;
                  EncapsulationType_TDMOIPX_AAL2 = 24;
                  EncapsulationType_FRX_DLCI = 25;
                  EncapsulationType_IPX_INTERWORKING = 64;
                  EncapsulationType_UNSUPPORT = 255;
               };
               EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
               string vpls_id = 3 [json_name = "vpls-id"];
               string saii = 4 [json_name = "saii"];
               string taii = 5 [json_name = "taii"];
               uint32 vc_label = 6 [json_name = "vc-label"];
               uint32 mtu = 7 [json_name = "mtu"];
               uint32 vsi_index = 8 [json_name = "vsi-index"];
               string remote_vccv = 9 [json_name = "remote-vccv"];
               string remote_vccv_code = 10 [json_name = "remote-vccv-code"];
            }
            repeated RemoteFec129 remote_fec129 = 1 [json_name = "remote-fec129"];
         }
         RemoteFec129S remote_fec129s = 8 [json_name = "remote-fec129s"];
         message BgpRemotes {
            message BgpRemote {
               uint32 site_id = 1 [json_name = "site-id"];
               uint32 offset = 2 [json_name = "offset"];
               string route_distinguisher = 3 [json_name = "route-distinguisher"];
               uint32 label_start = 4 [json_name = "label-start"];
               uint32 add_range = 5 [json_name = "add-range"];
               string peer_ip = 6 [json_name = "peer-ip"];
               uint32 mtu = 7 [json_name = "mtu"];
               enum EncapsulationType {
                  INVALID_ENUM_VALUE_EncapsulationType = 0;
                  EncapsulationType_VPLS = 19;
               };
               EncapsulationType encapsulation_type = 8 [json_name = "encapsulation-type"];
               string control_lags = 9 [json_name = "control-lags"];
               uint32 preference = 10 [json_name = "preference"];
               message ExportVpnTargets {
                  message ExportVpnTarget {
                     string rt_value = 1 [json_name = "rt-value"];
                     enum RtType {
                        INVALID_ENUM_VALUE_RtType = 0;
                        RtType_EXPORTX_EXTCOMMUNITY = 2;
                        RtType_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     RtType rt_type = 2 [json_name = "rt-type"];
                  }
                  repeated ExportVpnTarget export_vpn_target = 1 [json_name = "export-vpn-target"];
               }
               ExportVpnTargets export_vpn_targets = 11 [json_name = "export-vpn-targets"];
            }
            repeated BgpRemote bgp_remote = 1 [json_name = "bgp-remote"];
         }
         BgpRemotes bgp_remotes = 9 [json_name = "bgp-remotes"];
         message VplsPbbBDmacs {
            message VplsPbbBDmac {
               string b_dmac = 1 [json_name = "b-dmac"];
               message ReferenceVsis {
                  message ReferenceVsi {
                     string vsi_name = 1 [json_name = "vsi-name"];
                     enum Flag {
                        INVALID_ENUM_VALUE_Flag = 0;
                        Flag_FIRST = 1;
                     };
                     Flag flag = 2 [json_name = "flag"];
                  }
                  repeated ReferenceVsi reference_vsi = 1 [json_name = "reference-vsi"];
               }
               ReferenceVsis reference_vsis = 2 [json_name = "reference-vsis"];
            }
            repeated VplsPbbBDmac vpls_pbb_b_dmac = 1 [json_name = "vpls-pbb-b-dmac"];
         }
         VplsPbbBDmacs vpls_pbb_b_dmacs = 10 [json_name = "vpls-pbb-b-dmacs"];
         message VplsPbbBSmacs {
            message VplsPbbBSmac {
               string b_smac = 1 [json_name = "b-smac"];
               message ReferenceVsis {
                  message ReferenceVsi {
                     string vsi_name = 1 [json_name = "vsi-name"];
                     enum VsiType {
                        VsiType_NORMAL = 0;
                        VsiType_BX_VSI = 1;
                        VsiType_IX_VSI = 2;
                     };
                     VsiType vsi_type = 2 [json_name = "vsi-type"];
                  }
                  repeated ReferenceVsi reference_vsi = 1 [json_name = "reference-vsi"];
               }
               ReferenceVsis reference_vsis = 2 [json_name = "reference-vsis"];
            }
            repeated VplsPbbBSmac vpls_pbb_b_smac = 1 [json_name = "vpls-pbb-b-smac"];
         }
         VplsPbbBSmacs vpls_pbb_b_smacs = 11 [json_name = "vpls-pbb-b-smacs"];
      }
      VplsStatistic vpls_statistic = 10 [json_name = "vpls-statistic"];
      message L2VpnExt {
         bool vpls_ldp_fast_switch = 1 [json_name = "vpls-ldp-fast-switch"];
         bool pw_source_tunnel_check = 2 [json_name = "pw-source-tunnel-check"];
         enum FlowLabelHash {
            FlowLabelHash_L4 = 0;
            FlowLabelHash_L3 = 1;
            FlowLabelHash_L2 = 2;
         };
         FlowLabelHash flow_label_hash = 3 [json_name = "flow-label-hash"];
         bool convergence_separate_in_system = 4 [json_name = "convergence-separate-in-system"];
         bool vpls_tm_prune_enable = 5 [json_name = "vpls-tm-prune-enable"];
      }
      L2VpnExt l2vpn_ext = 11 [json_name = "l2vpn-ext"];
      message TrackRouteStatistics {
         uint32 total_track_route_num = 1 [json_name = "total-track-route-num"];
         uint32 reach_track_route_num = 2 [json_name = "reach-track-route-num"];
         uint32 unreach_track_route_num = 3 [json_name = "unreach-track-route-num"];
      }
      TrackRouteStatistics track_route_statistics = 12 [json_name = "track-route-statistics"];
      message VrfRoutes {
         message VrfRoute {
            string vrf_name = 1 [json_name = "vrf-name"];
            string destination = 2 [json_name = "destination"];
            uint32 mask_length = 3 [json_name = "mask-length"];
            enum RouteState {
               INVALID_ENUM_VALUE_RouteState = 0;
               RouteState_REACHABLE = 1;
               RouteState_UNREACHABLE = 2;
            };
            RouteState route_state = 4 [json_name = "route-state"];
            uint32 pw_number = 5 [json_name = "pw-number"];
            message VrfRoutePws {
               message VrfRoutePw {
                  string peer_ip = 1 [json_name = "peer-ip"];
                  uint32 pw_id = 2 [json_name = "pw-id"];
                  enum EncapsulationType {
                     INVALID_ENUM_VALUE_EncapsulationType = 0;
                     EncapsulationType_FR = 1;
                     EncapsulationType_ATMX_AAL5X_SDU = 2;
                     EncapsulationType_ATMX_TRANSX_CELL = 3;
                     EncapsulationType_VLAN = 4;
                     EncapsulationType_ETHERNET = 5;
                     EncapsulationType_HDLC = 6;
                     EncapsulationType_PPP = 7;
                     EncapsulationType_CEM = 8;
                     EncapsulationType_ATMX_NTO1X_VCC = 9;
                     EncapsulationType_ATMX_NTO1X_VPC = 10;
                     EncapsulationType_IPX_LAYER2 = 11;
                     EncapsulationType_ATMX_1TO1X_VCC = 12;
                     EncapsulationType_ATMX_1TO1X_VPC = 13;
                     EncapsulationType_ATMX_AAL5X_PDU = 14;
                     EncapsulationType_FRX_PORTX_MODE = 15;
                     EncapsulationType_CEP = 16;
                     EncapsulationType_SATOPX_E1 = 17;
                     EncapsulationType_SATOPX_T1 = 18;
                     EncapsulationType_SATOPX_E3 = 19;
                     EncapsulationType_SATOPX_T3 = 20;
                     EncapsulationType_CESOPSNX_BASIC = 21;
                     EncapsulationType_TDMOIPX_AAL1 = 22;
                     EncapsulationType_CESOPSNX_TDM = 23;
                     EncapsulationType_TDMOIPX_AAL2 = 24;
                     EncapsulationType_FRX_DLCI = 25;
                     EncapsulationType_IPX_INTERWORKING = 64;
                     EncapsulationType_UNSUPPORT = 255;
                  };
                  EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
                  enum PwState {
                     PwState_DOWN = 0;
                     PwState_UP = 1;
                     PwState_BACKUP = 2;
                  };
                  PwState pw_state = 4 [json_name = "pw-state"];
               }
               repeated VrfRoutePw vrf_route_pw = 1 [json_name = "vrf-route-pw"];
            }
            VrfRoutePws vrf_route_pws = 6 [json_name = "vrf-route-pws"];
         }
         repeated VrfRoute vrf_route = 1 [json_name = "vrf-route"];
      }
      VrfRoutes vrf_routes = 13 [json_name = "vrf-routes"];
      message MonitorGroups {
         message MonitorGroup {
            string name = 1 [json_name = "name"];
            bool monitor_ability = 2 [json_name = "monitor-ability"];
            uint32 pw_up_unblock_delay_time = 3 [json_name = "pw-up-unblock-delay-time"];
            uint32 unblock_delay_time = 4 [json_name = "unblock-delay-time"];
            message BindingPws {
               message BindingPw {
                  string peer_ip = 1 [json_name = "peer-ip"];
                  uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                  enum EncapsulationType {
                     INVALID_ENUM_VALUE_EncapsulationType = 0;
                     EncapsulationType_VLAN = 4;
                     EncapsulationType_ETHERNET = 5;
                     EncapsulationType_UNSUPPORT = 255;
                  };
                  EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
                  string vsi_name = 4 [json_name = "vsi-name"];
               }
               repeated BindingPw binding_pw = 1 [json_name = "binding-pw"];
            }
            BindingPws binding_pws = 5 [json_name = "binding-pws"];
         }
         repeated MonitorGroup monitor_group = 1 [json_name = "monitor-group"];
      }
      MonitorGroups monitor_groups = 14 [json_name = "monitor-groups"];
   }
   Common common = 1 [json_name = "common"];
   message Instances {
      message Instance {
         string name = 1 [json_name = "name"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_VPWSX_LOCALX_CCC = 1;
            Type_VPWSX_REMOTEX_CCC = 2;
            Type_VPWSX_SVC = 3;
            Type_VPWSX_LDP = 4;
            Type_VPWSX_SWITCH = 5;
            Type_VPLS = 6;
            Type_VPWSX_BGP = 8;
            Type_VPWSX_SINGLEX_CCC = 9;
         };
         Type type = 2 [json_name = "type"];
         string description = 3 [json_name = "description"];
         enum State {
            State_DOWN = 0;
            State_UP = 1;
            State_ADMINX_DOWN = 2;
         };
         State state = 4 [json_name = "state"];
         string last_up_time = 5 [json_name = "last-up-time"];
         string total_up_time = 6 [json_name = "total-up-time"];
         message VpwsLocalCcc {
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_FR = 1;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_CEM = 8;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_ATMX_AAL5X_PDU = 14;
               EncapsulationType_FRX_PORTX_MODE = 15;
               EncapsulationType_CEP = 16;
               EncapsulationType_SATOPX_E1 = 17;
               EncapsulationType_SATOPX_T1 = 18;
               EncapsulationType_SATOPX_E3 = 19;
               EncapsulationType_SATOPX_T3 = 20;
               EncapsulationType_CESOPSNX_BASIC = 21;
               EncapsulationType_TDMOIPX_AAL1 = 22;
               EncapsulationType_CESOPSNX_TDM = 23;
               EncapsulationType_TDMOIPX_AAL2 = 24;
               EncapsulationType_FRX_DLCI = 25;
               EncapsulationType_IPX_INTERWORKING = 64;
               EncapsulationType_UNSUPPORT = 255;
            };
            EncapsulationType encapsulation_type = 1 [json_name = "encapsulation-type"];
            message Acs {
               message Ac {
                  string interface_name = 1 [json_name = "interface-name"];
                  bool tagged = 2 [json_name = "tagged"];
                  enum State {
                     State_DEFAULT = 0;
                     State_DOWN = 1;
                     State_UP = 2;
                  };
                  State state = 3 [json_name = "state"];
                  bool access_port = 4 [json_name = "access-port"];
                  bool trigger_interface_down = 5 [json_name = "trigger-interface-down"];
                  bool token_exceed = 6 [json_name = "token-exceed"];
                  message ArpEntry {
                     string local_ce_mac = 1 [json_name = "local-ce-mac"];
                     string local_ce_ip = 2 [json_name = "local-ce-ip"];
                     bool local_ce_broadcast = 3 [json_name = "local-ce-broadcast"];
                     string remote_ce_ip = 4 [json_name = "remote-ce-ip"];
                  }
                  ArpEntry arp_entry = 7 [json_name = "arp-entry"];
                  message AcArps {
                     message AcArp {
                        enum MacType {
                           INVALID_ENUM_VALUE_MacType = 0;
                           MacType_STATIC = 1;
                           MacType_DYNAMIC = 2;
                           MacType_BROADCAST = 3;
                        };
                        MacType mac_type = 1 [json_name = "mac-type"];
                        string mac_address = 2 [json_name = "mac-address"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        uint32 vlan_id = 4 [json_name = "vlan-id"];
                        string ip_address = 5 [json_name = "ip-address"];
                     }
                     repeated AcArp ac_arp = 1 [json_name = "ac-arp"];
                  }
                  AcArps ac_arps = 8 [json_name = "ac-arps"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                           ProtocolType_LLDP = 2;
                           ProtocolType_BPDU = 4;
                           ProtocolType_CDP = 5;
                           ProtocolType_UDLD = 6;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                           Action_DISCARD = 2;
                           Action_TRANSPORT = 3;
                           Action_TRANSPORTX_TAGGED = 4;
                        };
                        Action action = 2 [json_name = "action"];
                        enum Mode {
                           Mode_NORMAL = 0;
                           Mode_UNTAG = 1;
                           Mode_UNTAGX_VLANX_CHECK = 2;
                        };
                        Mode mode = 3 [json_name = "mode"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 9 [json_name = "protocol-actions"];
                  message Lpt {
                     message PtpInstance {
                        bool enable = 1 [json_name = "enable"];
                        uint32 recover_time = 2 [json_name = "recover-time"];
                        uint32 hold_off_time = 3 [json_name = "hold-off-time"];
                        uint32 oam_period = 4 [json_name = "oam-period"];
                        string net_if_name = 5 [json_name = "net-if-name"];
                        enum UserPortState {
                           UserPortState_DOWN = 0;
                           UserPortState_UP = 1;
                        };
                        UserPortState user_port_state = 6 [json_name = "user-port-state"];
                        enum ProtocolState {
                           ProtocolState_INIT = 0;
                           ProtocolState_USERX_FAULT = 1;
                           ProtocolState_NETWORKX_FAULT = 2;
                           ProtocolState_NORMAL = 3;
                           ProtocolState_RESUMEX_WAIT = 4;
                           ProtocolState_USERX_RESUME = 5;
                        };
                        ProtocolState protocol_state = 7 [json_name = "protocol-state"];
                        bool local_fault = 8 [json_name = "local-fault"];
                        bool net_fault = 9 [json_name = "net-fault"];
                        bool remote_fault = 10 [json_name = "remote-fault"];
                        enum NetCarrierType {
                           NetCarrierType_PW = 0;
                           NetCarrierType_QINQX_LINK = 1;
                        };
                        NetCarrierType net_carrier_type = 11 [json_name = "net-carrier-type"];
                        enum NotificationMode {
                           NotificationMode_LPTX_MODE = 0;
                           NotificationMode_CSFX_MODE = 1;
                        };
                        NotificationMode notification_mode = 12 [json_name = "notification-mode"];
                        enum OamType {
                           INVALID_ENUM_VALUE_OamType = 0;
                           OamType_LPTX_OAM = 1;
                           OamType_PWX_OAM = 2;
                        };
                        OamType oam_type = 13 [json_name = "oam-type"];
                     }
                     PtpInstance ptp_instance = 1 [json_name = "ptp-instance"];
                  }
                  Lpt lpt = 10 [json_name = "lpt"];
               }
               repeated Ac ac = 1 [json_name = "ac"];
            }
            Acs acs = 2 [json_name = "acs"];
            message TdmParameter {
               uint32 tdm_encapsulate_number = 1 [json_name = "tdm-encapsulate-number"];
               uint32 jitter_buffer = 2 [json_name = "jitter-buffer"];
               bool rtp_header = 3 [json_name = "rtp-header"];
               string idle_code = 4 [json_name = "idle-code"];
            }
            TdmParameter tdm_parameter = 3 [json_name = "tdm-parameter"];
            message AtmParameter {
               uint32 max_atm_cells = 1 [json_name = "max-atm-cells"];
               uint32 atm_pack_overtime = 2 [json_name = "atm-pack-overtime"];
            }
            AtmParameter atm_parameter = 4 [json_name = "atm-parameter"];
         }
         VpwsLocalCcc vpws_local_ccc = 7 [json_name = "vpws-local-ccc"];
         message VpwsLdp {
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_FR = 1;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_CEM = 8;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_ATMX_AAL5X_PDU = 14;
               EncapsulationType_FRX_PORTX_MODE = 15;
               EncapsulationType_CEP = 16;
               EncapsulationType_SATOPX_E1 = 17;
               EncapsulationType_SATOPX_T1 = 18;
               EncapsulationType_SATOPX_E3 = 19;
               EncapsulationType_SATOPX_T3 = 20;
               EncapsulationType_CESOPSNX_BASIC = 21;
               EncapsulationType_TDMOIPX_AAL1 = 22;
               EncapsulationType_CESOPSNX_TDM = 23;
               EncapsulationType_TDMOIPX_AAL2 = 24;
               EncapsulationType_FRX_DLCI = 25;
               EncapsulationType_IPX_INTERWORKING = 64;
               EncapsulationType_UNSUPPORT = 255;
            };
            EncapsulationType encapsulation_type = 1 [json_name = "encapsulation-type"];
            bool mac_withdraw_disable = 2 [json_name = "mac-withdraw-disable"];
            enum LoadBalance {
               INVALID_ENUM_VALUE_LoadBalance = 0;
               LoadBalance_PACKET = 1;
               LoadBalance_FLOW = 2;
            };
            LoadBalance load_balance = 3 [json_name = "load-balance"];
            string service_name = 4 [json_name = "service-name"];
            bool bit_error_detection = 5 [json_name = "bit-error-detection"];
            message Acs {
               message Ac {
                  string interface_name = 1 [json_name = "interface-name"];
                  bool tagged = 2 [json_name = "tagged"];
                  bool access_port = 3 [json_name = "access-port"];
                  bool trigger_interface_down = 4 [json_name = "trigger-interface-down"];
                  bool forward_mode = 5 [json_name = "forward-mode"];
                  bool performance_statistics = 6 [json_name = "performance-statistics"];
                  enum State {
                     State_DEFAULT = 0;
                     State_DOWN = 1;
                     State_UP = 2;
                  };
                  State state = 7 [json_name = "state"];
                  bool token_exceed = 8 [json_name = "token-exceed"];
                  message ArpEntry {
                     string local_ce_mac = 1 [json_name = "local-ce-mac"];
                     string local_ce_ip = 2 [json_name = "local-ce-ip"];
                     bool local_ce_broadcast = 3 [json_name = "local-ce-broadcast"];
                     string remote_ce_ip = 4 [json_name = "remote-ce-ip"];
                  }
                  ArpEntry arp_entry = 9 [json_name = "arp-entry"];
                  message AcArps {
                     message AcArp {
                        enum MacType {
                           INVALID_ENUM_VALUE_MacType = 0;
                           MacType_STATIC = 1;
                           MacType_DYNAMIC = 2;
                           MacType_BROADCAST = 3;
                        };
                        MacType mac_type = 1 [json_name = "mac-type"];
                        string mac_address = 2 [json_name = "mac-address"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        uint32 vlan_id = 4 [json_name = "vlan-id"];
                        string ip_address = 5 [json_name = "ip-address"];
                     }
                     repeated AcArp ac_arp = 1 [json_name = "ac-arp"];
                  }
                  AcArps ac_arps = 10 [json_name = "ac-arps"];
                  message Lpt {
                     message PtpInstance {
                        bool enable = 1 [json_name = "enable"];
                        uint32 recover_time = 2 [json_name = "recover-time"];
                        uint32 hold_off_time = 3 [json_name = "hold-off-time"];
                        uint32 oam_period = 4 [json_name = "oam-period"];
                        string peer_ip = 5 [json_name = "peer-ip"];
                        uint32 vc_id = 6 [json_name = "vc-id"];
                        enum VcType {
                           INVALID_ENUM_VALUE_VcType = 0;
                           VcType_VLAN = 4;
                           VcType_ETHERNET = 5;
                        };
                        VcType vc_type = 7 [json_name = "vc-type"];
                        enum UserPortState {
                           UserPortState_DOWN = 0;
                           UserPortState_UP = 1;
                        };
                        UserPortState user_port_state = 8 [json_name = "user-port-state"];
                        enum ProtocolState {
                           ProtocolState_INIT = 0;
                           ProtocolState_USERX_FAULT = 1;
                           ProtocolState_NETWORKX_FAULT = 2;
                           ProtocolState_NORMAL = 3;
                           ProtocolState_RESUMEX_WAIT = 4;
                           ProtocolState_USERX_RESUME = 5;
                        };
                        ProtocolState protocol_state = 9 [json_name = "protocol-state"];
                        bool local_fault = 10 [json_name = "local-fault"];
                        bool net_fault = 11 [json_name = "net-fault"];
                        bool remote_fault = 12 [json_name = "remote-fault"];
                        enum NetCarrierType {
                           NetCarrierType_PW = 0;
                           NetCarrierType_QINQX_LINK = 1;
                        };
                        NetCarrierType net_carrier_type = 13 [json_name = "net-carrier-type"];
                        enum NotificationMode {
                           NotificationMode_LPTX_MODE = 0;
                           NotificationMode_CSFX_MODE = 1;
                        };
                        NotificationMode notification_mode = 14 [json_name = "notification-mode"];
                        enum OamType {
                           INVALID_ENUM_VALUE_OamType = 0;
                           OamType_LPTX_OAM = 1;
                           OamType_PWX_OAM = 2;
                        };
                        OamType oam_type = 15 [json_name = "oam-type"];
                     }
                     PtpInstance ptp_instance = 1 [json_name = "ptp-instance"];
                  }
                  Lpt lpt = 11 [json_name = "lpt"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                           ProtocolType_LLDP = 2;
                           ProtocolType_BPDU = 4;
                           ProtocolType_CDP = 5;
                           ProtocolType_UDLD = 6;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                           Action_DISCARD = 2;
                           Action_TRANSPORT = 3;
                           Action_TRANSPORTX_TAGGED = 4;
                        };
                        Action action = 2 [json_name = "action"];
                        enum Mode {
                           Mode_NORMAL = 0;
                           Mode_UNTAG = 1;
                           Mode_UNTAGX_VLANX_CHECK = 2;
                        };
                        Mode mode = 3 [json_name = "mode"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 12 [json_name = "protocol-actions"];
                  message TdmPerformanceStatistic {
                     uint64 missing_packets = 1 [json_name = "missing-packets"];
                     uint64 jitter_buffer_overruns = 2 [json_name = "jitter-buffer-overruns"];
                     uint64 jitter_buffer_underruns = 3 [json_name = "jitter-buffer-underruns"];
                     uint64 misorder_packets = 4 [json_name = "misorder-packets"];
                     uint64 malformed_packet = 5 [json_name = "malformed-packet"];
                     uint64 misconnected_packets = 6 [json_name = "misconnected-packets"];
                     uint64 error_seconds = 7 [json_name = "error-seconds"];
                     uint64 severely_error_seconds = 8 [json_name = "severely-error-seconds"];
                     uint64 unavailable_seconds = 9 [json_name = "unavailable-seconds"];
                  }
                  TdmPerformanceStatistic tdm_performance_statistic = 13 [json_name = "tdm-performance-statistic"];
                  message AtmPerformanceStatistic {
                     uint64 missing_packets = 1 [json_name = "missing-packets"];
                     uint64 misorder_packets = 2 [json_name = "misorder-packets"];
                     uint64 transmitted_cells = 3 [json_name = "transmitted-cells"];
                     uint64 received_cells = 4 [json_name = "received-cells"];
                     uint64 unknown_cells = 5 [json_name = "unknown-cells"];
                  }
                  AtmPerformanceStatistic atm_performance_statistic = 14 [json_name = "atm-performance-statistic"];
                  message BlockAc {
                     enum BlockAc8 {
                        BlockAc8_DISABLE = 0;
                        BlockAc8_ENABLE = 1;
                     };
                     BlockAc8 block_ac = 1 [json_name = "block-ac"];
                  }
                  BlockAc block_ac = 15 [json_name = "block-ac"];
                  message TimeDelayCompensationState {
                     enum AcBlockState {
                        AcBlockState_ACTIVE = 0;
                        AcBlockState_BLOCK = 1;
                        AcBlockState_NOTX_SUPPORT = 2;
                     };
                     AcBlockState ac_block_state = 1 [json_name = "ac-block-state"];
                     string ac_block_reason = 2 [json_name = "ac-block-reason"];
                     enum CompensationState {
                        CompensationState_DISABLE = 0;
                        CompensationState_ENABLE = 1;
                     };
                     CompensationState compensation_state = 3 [json_name = "compensation-state"];
                     uint32 real_time_sample1 = 4 [json_name = "real-time-sample1"];
                     uint32 real_time_sample2 = 5 [json_name = "real-time-sample2"];
                     uint32 real_time_sample3 = 6 [json_name = "real-time-sample3"];
                  }
                  TimeDelayCompensationState time_delay_compensation_state = 16 [json_name = "time-delay-compensation-state"];
                  message StreamSelectReceivingState {
                     enum ActivePwRole {
                        ActivePwRole_PRIMARY = 0;
                        ActivePwRole_SECONDARY = 1;
                     };
                     ActivePwRole active_pw_role = 1 [json_name = "active-pw-role"];
                     enum PrimaryPwFaultStatus {
                        PrimaryPwFaultStatus_NORMAL = 0;
                        PrimaryPwFaultStatus_ABNORMAL = 1;
                     };
                     PrimaryPwFaultStatus primary_pw_fault_status = 2 [json_name = "primary-pw-fault-status"];
                     enum SecondaryPwFaultStatus {
                        SecondaryPwFaultStatus_NORMAL = 0;
                        SecondaryPwFaultStatus_ABNORMAL = 1;
                     };
                     SecondaryPwFaultStatus secondary_pw_fault_status = 3 [json_name = "secondary-pw-fault-status"];
                  }
                  StreamSelectReceivingState stream_select_receiving_state = 17 [json_name = "stream-select-receiving-state"];
               }
               repeated Ac ac = 1 [json_name = "ac"];
            }
            Acs acs = 6 [json_name = "acs"];
            message Pws {
               message Pw {
                  enum Role {
                     INVALID_ENUM_VALUE_Role = 0;
                     Role_PRIMARY = 1;
                     Role_BACKUP = 2;
                     Role_BYPASS = 3;
                     Role_ACX_BYPASS = 7;
                     Role_PWX_BYPASS = 8;
                  };
                  Role role = 1 [json_name = "role"];
                  uint32 pw_id = 2 [json_name = "pw-id"];
                  string peer_ip = 3 [json_name = "peer-ip"];
                  bool admin_pw = 4 [json_name = "admin-pw"];
                  uint32 transmit_label = 5 [json_name = "transmit-label"];
                  uint32 receive_label = 6 [json_name = "receive-label"];
                  enum ControlWord {
                     ControlWord_DEFAULT = 0;
                     ControlWord_DISABLE = 1;
                     ControlWord_ENABLE = 2;
                     ControlWord_PREFER = 3;
                  };
                  ControlWord control_word = 7 [json_name = "control-word"];
                  bool vccv_ability = 8 [json_name = "vccv-ability"];
                  string tunnel_policy = 9 [json_name = "tunnel-policy"];
                  string pw_template = 10 [json_name = "pw-template"];
                  bool ignore_standby = 11 [json_name = "ignore-standby"];
                  bool set_fault = 12 [json_name = "set-fault"];
                  uint32 pw_ttl = 13 [json_name = "pw-ttl"];
                  string track_admin_pw = 14 [json_name = "track-admin-pw"];
                  bool traffic_statistics_collection = 15 [json_name = "traffic-statistics-collection"];
                  bool ignore_ac_state = 16 [json_name = "ignore-ac-state"];
                  message TrackVrrp {
                     string vrrp_interface_name = 1 [json_name = "vrrp-interface-name"];
                     uint32 vrrp_vrid = 2 [json_name = "vrrp-vrid"];
                     bool pw_redundancy = 3 [json_name = "pw-redundancy"];
                  }
                  TrackVrrp track_vrrp = 17 [json_name = "track-vrrp"];
                  message FlowLabel {
                     enum Ability {
                        Ability_DEFAULT = 0;
                        Ability_SEND = 1;
                        Ability_RECEIVE = 2;
                        Ability_BOTH = 3;
                        Ability_DISABLE = 4;
                     };
                     Ability ability = 1 [json_name = "ability"];
                     bool static = 2 [json_name = "static"];
                  }
                  FlowLabel flow_label = 18 [json_name = "flow-label"];
                  message TrackVrfRoutes {
                     message TrackVrfRoute {
                        string vrf_name = 1 [json_name = "vrf-name"];
                        string ip_address = 2 [json_name = "ip-address"];
                        uint32 mask_length = 3 [json_name = "mask-length"];
                     }
                     repeated TrackVrfRoute track_vrf_route = 1 [json_name = "track-vrf-route"];
                  }
                  TrackVrfRoutes track_vrf_routes = 19 [json_name = "track-vrf-routes"];
                  message Bfd {
                     uint32 min_rx_interval = 1 [json_name = "min-rx-interval"];
                     uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                     uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                     uint32 remote_vc_id = 4 [json_name = "remote-vc-id"];
                     bool track_interface = 5 [json_name = "track-interface"];
                     string track_interface_name = 6 [json_name = "track-interface-name"];
                  }
                  Bfd bfd = 20 [json_name = "bfd"];
                  message PwInfo {
                     string interface_name = 1 [json_name = "interface-name"];
                     enum IfState {
                        IfState_DOWN = 0;
                        IfState_UP = 1;
                        IfState_PLUGX_OUT = 2;
                        IfState_NOTIFYX_DOWN = 3;
                        IfState_DOWNX_NOTIFY = 4;
                     };
                     IfState if_state = 2 [json_name = "if-state"];
                     enum SessionState {
                        SessionState_DEFAULT = 0;
                        SessionState_DOWN = 1;
                        SessionState_UP = 2;
                     };
                     SessionState session_state = 3 [json_name = "session-state"];
                     enum IntegrativeAcState {
                        IntegrativeAcState_DOWN = 0;
                        IntegrativeAcState_UP = 1;
                        IntegrativeAcState_PLUGX_OUT = 2;
                        IntegrativeAcState_NOTIFYX_DOWN = 3;
                        IntegrativeAcState_DOWNX_NOTIFY = 4;
                     };
                     IntegrativeAcState integrative_ac_state = 4 [json_name = "integrative-ac-state"];
                     enum AcState {
                        AcState_DOWN = 0;
                        AcState_UP = 1;
                        AcState_PLUGX_OUT = 2;
                        AcState_NOTIFYX_DOWN = 3;
                        AcState_DOWNX_NOTIFY = 4;
                     };
                     AcState ac_state = 5 [json_name = "ac-state"];
                     enum PwState {
                        PwState_DOWN = 0;
                        PwState_UP = 1;
                        PwState_BACKUP = 2;
                     };
                     PwState pw_state = 6 [json_name = "pw-state"];
                     uint32 pw_id = 7 [json_name = "pw-id"];
                     enum EncapsulationType {
                        INVALID_ENUM_VALUE_EncapsulationType = 0;
                        EncapsulationType_FR = 1;
                        EncapsulationType_ATMX_AAL5X_SDU = 2;
                        EncapsulationType_ATMX_TRANSX_CELL = 3;
                        EncapsulationType_VLAN = 4;
                        EncapsulationType_ETHERNET = 5;
                        EncapsulationType_HDLC = 6;
                        EncapsulationType_PPP = 7;
                        EncapsulationType_CEM = 8;
                        EncapsulationType_ATMX_NTO1X_VCC = 9;
                        EncapsulationType_ATMX_NTO1X_VPC = 10;
                        EncapsulationType_IPX_LAYER2 = 11;
                        EncapsulationType_ATMX_1TO1X_VCC = 12;
                        EncapsulationType_ATMX_1TO1X_VPC = 13;
                        EncapsulationType_ATMX_AAL5X_PDU = 14;
                        EncapsulationType_FRX_PORTX_MODE = 15;
                        EncapsulationType_CEP = 16;
                        EncapsulationType_SATOPX_E1 = 17;
                        EncapsulationType_SATOPX_T1 = 18;
                        EncapsulationType_SATOPX_E3 = 19;
                        EncapsulationType_SATOPX_T3 = 20;
                        EncapsulationType_CESOPSNX_BASIC = 21;
                        EncapsulationType_TDMOIPX_AAL1 = 22;
                        EncapsulationType_CESOPSNX_TDM = 23;
                        EncapsulationType_TDMOIPX_AAL2 = 24;
                        EncapsulationType_FRX_DLCI = 25;
                        EncapsulationType_IPX_INTERWORKING = 64;
                        EncapsulationType_UNSUPPORT = 255;
                     };
                     EncapsulationType encapsulation_type = 8 [json_name = "encapsulation-type"];
                     string destination = 9 [json_name = "destination"];
                     uint32 local_group_id = 10 [json_name = "local-group-id"];
                     uint32 remote_group_id = 11 [json_name = "remote-group-id"];
                     uint32 local_vc_label = 12 [json_name = "local-vc-label"];
                     uint32 remote_vc_label = 13 [json_name = "remote-vc-label"];
                     uint32 local_tdm_encapsulate_num = 14 [json_name = "local-tdm-encapsulate-num"];
                     uint32 remote_tdm_encapsulate_num = 15 [json_name = "remote-tdm-encapsulate-num"];
                     uint32 jitter_buffer = 16 [json_name = "jitter-buffer"];
                     string idle_code = 17 [json_name = "idle-code"];
                     enum LocalRtpHeaderEnable {
                        LocalRtpHeaderEnable_FALSE = 0;
                        LocalRtpHeaderEnable_STANDARD = 1;
                        LocalRtpHeaderEnable_PRIVATE = 2;
                     };
                     LocalRtpHeaderEnable local_rtp_header_enable = 18 [json_name = "local-rtp-header-enable"];
                     enum RemoteRtpHeaderEnable {
                        RemoteRtpHeaderEnable_FALSE = 0;
                        RemoteRtpHeaderEnable_STANDARD = 1;
                        RemoteRtpHeaderEnable_PRIVATE = 2;
                     };
                     RemoteRtpHeaderEnable remote_rtp_header_enable = 19 [json_name = "remote-rtp-header-enable"];
                     uint32 max_atm_cells = 20 [json_name = "max-atm-cells"];
                     uint32 remote_max_atm_cells = 21 [json_name = "remote-max-atm-cells"];
                     uint32 atm_pack_overtime = 22 [json_name = "atm-pack-overtime"];
                     uint32 atm_transmit_cell = 23 [json_name = "atm-transmit-cell"];
                     bool sequence_number = 24 [json_name = "sequence-number"];
                     uint32 local_bit_rate = 25 [json_name = "local-bit-rate"];
                     uint32 remote_bit_rate = 26 [json_name = "remote-bit-rate"];
                     enum LocalAcOam {
                        LocalAcOam_DEFAULT = 0;
                        LocalAcOam_DOWN = 1;
                        LocalAcOam_UP = 2;
                     };
                     LocalAcOam local_ac_oam = 27 [json_name = "local-ac-oam"];
                     enum LocalPsnOam {
                        LocalPsnOam_DEFAULT = 0;
                        LocalPsnOam_DOWN = 1;
                        LocalPsnOam_UP = 2;
                     };
                     LocalPsnOam local_psn_oam = 28 [json_name = "local-psn-oam"];
                     enum LocalForwardState {
                        LocalForwardState_NOTX_FORWARDING = 0;
                        LocalForwardState_FORWARDING = 1;
                     };
                     LocalForwardState local_forward_state = 29 [json_name = "local-forward-state"];
                     string local_state_code = 30 [json_name = "local-state-code"];
                     enum RemoteAcOam {
                        RemoteAcOam_DEFAULT = 0;
                        RemoteAcOam_DOWN = 1;
                        RemoteAcOam_UP = 2;
                     };
                     RemoteAcOam remote_ac_oam = 31 [json_name = "remote-ac-oam"];
                     enum RemotePsnOam {
                        RemotePsnOam_DEFAULT = 0;
                        RemotePsnOam_DOWN = 1;
                        RemotePsnOam_UP = 2;
                     };
                     RemotePsnOam remote_psn_oam = 32 [json_name = "remote-psn-oam"];
                     enum RemoteForwardState {
                        RemoteForwardState_NOTX_FORWARDING = 0;
                        RemoteForwardState_FORWARDING = 1;
                     };
                     RemoteForwardState remote_forward_state = 33 [json_name = "remote-forward-state"];
                     string remote_state_code = 34 [json_name = "remote-state-code"];
                     bool ignore_standby = 35 [json_name = "ignore-standby"];
                     bool bfd_enable = 36 [json_name = "bfd-enable"];
                     enum BfdState {
                        BfdState_INVALID = 0;
                        BfdState_DOWN = 1;
                        BfdState_UP = 2;
                        BfdState_ADMINX_DOWN = 3;
                     };
                     BfdState bfd_state = 37 [json_name = "bfd-state"];
                     uint32 bfd_session_index = 38 [json_name = "bfd-session-index"];
                     bool is_manual_fault = 39 [json_name = "is-manual-fault"];
                     bool is_active = 40 [json_name = "is-active"];
                     bool is_forward_exist = 41 [json_name = "is-forward-exist"];
                     enum LinkState {
                        LinkState_DEFAULT = 0;
                        LinkState_DOWN = 1;
                        LinkState_UP = 2;
                     };
                     LinkState link_state = 42 [json_name = "link-state"];
                     uint32 local_vc_mtu = 43 [json_name = "local-vc-mtu"];
                     uint32 remote_vc_mtu = 44 [json_name = "remote-vc-mtu"];
                     string local_vccv = 45 [json_name = "local-vccv"];
                     string remote_vccv = 46 [json_name = "remote-vccv"];
                     enum LocalControlWord {
                        LocalControlWord_DEFAULT = 0;
                        LocalControlWord_DISABLE = 1;
                        LocalControlWord_ENABLE = 2;
                        LocalControlWord_PREFER = 3;
                     };
                     LocalControlWord local_control_word = 47 [json_name = "local-control-word"];
                     enum RemoteControlWord {
                        RemoteControlWord_DEFAULT = 0;
                        RemoteControlWord_DISABLE = 1;
                        RemoteControlWord_ENABLE = 2;
                        RemoteControlWord_PREFER = 3;
                     };
                     RemoteControlWord remote_control_word = 48 [json_name = "remote-control-word"];
                     string tunnel_policy = 49 [json_name = "tunnel-policy"];
                     string template_name = 50 [json_name = "template-name"];
                     enum PrimaryOrSecond {
                        INVALID_ENUM_VALUE_PrimaryOrSecond = 0;
                        PrimaryOrSecond_PRIMARY = 1;
                        PrimaryOrSecond_SECONDARY = 2;
                        PrimaryOrSecond_BYPASS = 3;
                        PrimaryOrSecond_ACX_BYPASS = 4;
                        PrimaryOrSecond_PWX_BYPASS = 5;
                     };
                     PrimaryOrSecond primary_or_second = 51 [json_name = "primary-or-second"];
                     bool access_port = 52 [json_name = "access-port"];
                     enum OamProtocol {
                        INVALID_ENUM_VALUE_OamProtocol = 0;
                        OamProtocol_MPLSX_OAM = 3;
                        OamProtocol_TPX_OAM = 4;
                        OamProtocol_NONE = 5;
                     };
                     OamProtocol oam_protocol = 53 [json_name = "oam-protocol"];
                     enum OamStatus {
                        INVALID_ENUM_VALUE_OamStatus = 0;
                        OamStatus_NONDEFECT = 1;
                        OamStatus_DEFECT = 2;
                        OamStatus_DETECTX_STOP = 3;
                        OamStatus_INVALID = 4;
                     };
                     OamStatus oam_status = 54 [json_name = "oam-status"];
                     string oam_fault_type = 55 [json_name = "oam-fault-type"];
                     uint32 aps_id = 56 [json_name = "aps-id"];
                     enum ApsStatus {
                        INVALID_ENUM_VALUE_ApsStatus = 0;
                        ApsStatus_LO = 1;
                        ApsStatus_SFX_P = 2;
                        ApsStatus_FS = 3;
                        ApsStatus_SF = 4;
                        ApsStatus_SDX_P = 5;
                        ApsStatus_SD = 6;
                        ApsStatus_MS = 7;
                        ApsStatus_WTR = 8;
                        ApsStatus_EXER = 9;
                        ApsStatus_RR = 10;
                        ApsStatus_DNR = 11;
                        ApsStatus_NR = 12;
                        ApsStatus_MSX_P = 13;
                        ApsStatus_MSX_W = 14;
                        ApsStatus_EXERX_P = 15;
                        ApsStatus_EXERX_W = 16;
                        ApsStatus_RRX_P = 17;
                        ApsStatus_RRX_W = 18;
                        ApsStatus_NRX_P = 19;
                        ApsStatus_NRX_W = 20;
                     };
                     ApsStatus aps_status = 57 [json_name = "aps-status"];
                     uint32 aps_ttl = 58 [json_name = "aps-ttl"];
                     uint32 tunnel_count = 59 [json_name = "tunnel-count"];
                     uint32 spe_count = 60 [json_name = "spe-count"];
                     string create_time = 61 [json_name = "create-time"];
                     string up_time = 62 [json_name = "up-time"];
                     string last_change_time = 63 [json_name = "last-change-time"];
                     string last_up_time = 64 [json_name = "last-up-time"];
                     string total_up_time = 65 [json_name = "total-up-time"];
                     uint32 c_key = 66 [json_name = "c-key"];
                     uint32 n_key = 67 [json_name = "n-key"];
                     bool support_notification = 68 [json_name = "support-notification"];
                     enum RouteState {
                        INVALID_ENUM_VALUE_RouteState = 0;
                        RouteState_REACHABLE = 1;
                        RouteState_UNREACHABLE = 2;
                     };
                     RouteState route_state = 69 [json_name = "route-state"];
                     enum ReceivedFlowLabel {
                        ReceivedFlowLabel_DEFAULT = 0;
                        ReceivedFlowLabel_SEND = 1;
                        ReceivedFlowLabel_RECEIVE = 2;
                        ReceivedFlowLabel_BOTH = 3;
                        ReceivedFlowLabel_DISABLE = 4;
                     };
                     ReceivedFlowLabel received_flow_label = 70 [json_name = "received-flow-label"];
                     enum NegotiatedFlowLabel {
                        NegotiatedFlowLabel_DEFAULT = 0;
                        NegotiatedFlowLabel_SEND = 1;
                        NegotiatedFlowLabel_RECEIVE = 2;
                        NegotiatedFlowLabel_BOTH = 3;
                        NegotiatedFlowLabel_DISABLE = 4;
                     };
                     NegotiatedFlowLabel negotiated_flow_label = 71 [json_name = "negotiated-flow-label"];
                     string dynamic_bfd_session = 72 [json_name = "dynamic-bfd-session"];
                     string bfd_for_pw = 73 [json_name = "bfd-for-pw"];
                     string remote_vccv_code = 74 [json_name = "remote-vccv-code"];
                     uint32 hard_pipe_bandwidth = 75 [json_name = "hard-pipe-bandwidth"];
                     string hard_pipe_expand_ratio = 76 [json_name = "hard-pipe-expand-ratio"];
                     uint32 hard_pipe_burst_time = 77 [json_name = "hard-pipe-burst-time"];
                     enum LocalPayloadCompression {
                        LocalPayloadCompression_DISABLE = 0;
                        LocalPayloadCompression_UNEQ = 1;
                     };
                     LocalPayloadCompression local_payload_compression = 78 [json_name = "local-payload-compression"];
                     enum RemotePayloadCompression {
                        RemotePayloadCompression_DISABLE = 0;
                        RemotePayloadCompression_UNEQ = 1;
                     };
                     RemotePayloadCompression remote_payload_compression = 79 [json_name = "remote-payload-compression"];
                     enum SendReceiveActive {
                        SendReceiveActive_SENDX_RECEIVEX_INACTIVE = 0;
                        SendReceiveActive_SENDX_ACTIVEX_RECEIVEX_INACTIVE = 2;
                        SendReceiveActive_SENDX_INACTIVEX_RECEIVEX_ACTIVE = 4;
                        SendReceiveActive_SENDX_RECEIVEX_ACTIVE = 6;
                     };
                     SendReceiveActive send_receive_active = 80 [json_name = "send-receive-active"];
                     enum AcBlockState {
                        AcBlockState_UNBLOCKED = 0;
                        AcBlockState_BLOCKED = 1;
                     };
                     AcBlockState ac_block_state = 81 [json_name = "ac-block-state"];
                     bool pw_token_exceed = 82 [json_name = "pw-token-exceed"];
                     message Tunnels {
                        message Tunnel {
                           string tunnel_key = 1 [json_name = "tunnel-key"];
                           enum TunnelType {
                              TunnelType_INVALID = 0;
                              TunnelType_LDP = 1;
                              TunnelType_BGP = 2;
                              TunnelType_TE = 3;
                              TunnelType_STATICX_LSP = 4;
                              TunnelType_GRE = 5;
                              TunnelType_UNI = 6;
                              TunnelType_TNLX_GROUP = 7;
                              TunnelType_SUBX_TE = 8;
                              TunnelType_SUBX_GROUP = 9;
                              TunnelType_X_6OVER4 = 10;
                              TunnelType_X_6TO4 = 11;
                              TunnelType_BGPX_LOCALX_IFNET = 12;
                              TunnelType_LDP6 = 13;
                              TunnelType_SRBEX_LSP = 41;
                              TunnelType_SRX_TEX_POLICY = 50;
                              TunnelType_SRV6X_TEX_POLICY = 52;
                           };
                           TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                           string tunnel_name = 3 [json_name = "tunnel-name"];
                           string public_next_hop = 4 [json_name = "public-next-hop"];
                        }
                        repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                     }
                     Tunnels tunnels = 83 [json_name = "tunnels"];
                     message Spes {
                        message Spe {
                           uint32 spe_pw_id = 1 [json_name = "spe-pw-id"];
                           string spe_peer_ip = 2 [json_name = "spe-peer-ip"];
                        }
                        repeated Spe spe = 1 [json_name = "spe"];
                     }
                     Spes spes = 84 [json_name = "spes"];
                     message LabelStacks {
                        message LabelStack {
                           uint32 label_stack = 1 [json_name = "label-stack"];
                           uint32 level = 2 [json_name = "level"];
                           string type = 3 [json_name = "type"];
                           string label = 4 [json_name = "label"];
                           string out_interface = 5 [json_name = "out-interface"];
                        }
                        repeated LabelStack label_stack = 1 [json_name = "label-stack"];
                     }
                     LabelStacks label_stacks = 85 [json_name = "label-stacks"];
                     message DownCauses {
                        message DownCause {
                           uint32 down_cause_index = 1 [json_name = "down-cause-index"];
                           string down_cause = 2 [json_name = "down-cause"];
                        }
                        repeated DownCause down_cause = 1 [json_name = "down-cause"];
                     }
                     DownCauses down_causes = 86 [json_name = "down-causes"];
                     message StatusChanges {
                        message StatusChange {
                           uint32 index = 1 [json_name = "index"];
                           string timestamp = 2 [json_name = "timestamp"];
                           string reason = 3 [json_name = "reason"];
                        }
                        repeated StatusChange status_change = 1 [json_name = "status-change"];
                     }
                     StatusChanges status_changes = 87 [json_name = "status-changes"];
                     string remote_interface = 88 [json_name = "remote-interface"];
                  }
                  PwInfo pw_info = 21 [json_name = "pw-info"];
                  message TrafficStatistics {
                     string interface_name = 1 [json_name = "interface-name"];
                     string last_clear_time = 2 [json_name = "last-clear-time"];
                     uint64 input_bytes_rate = 3 [json_name = "input-bytes-rate"];
                     uint64 output_bytes_rate = 4 [json_name = "output-bytes-rate"];
                     uint64 input_packets_rate = 5 [json_name = "input-packets-rate"];
                     uint64 output_packets_rate = 6 [json_name = "output-packets-rate"];
                     uint64 input_bytes = 7 [json_name = "input-bytes"];
                     uint64 output_bytes = 8 [json_name = "output-bytes"];
                     uint64 input_packets = 9 [json_name = "input-packets"];
                     uint64 output_packets = 10 [json_name = "output-packets"];
                  }
                  TrafficStatistics traffic_statistics = 22 [json_name = "traffic-statistics"];
                  message TdmParameter {
                     uint32 tdm_encapsulate_number = 1 [json_name = "tdm-encapsulate-number"];
                     uint32 jitter_buffer = 2 [json_name = "jitter-buffer"];
                     bool sequence_number = 3 [json_name = "sequence-number"];
                     enum RtpHeader {
                        RtpHeader_FALSE = 0;
                        RtpHeader_STANDARD = 1;
                        RtpHeader_PRIVATE = 2;
                     };
                     RtpHeader rtp_header = 4 [json_name = "rtp-header"];
                     string idle_code = 5 [json_name = "idle-code"];
                     enum PayloadCompression {
                        PayloadCompression_DISABLE = 0;
                        PayloadCompression_UNEQ = 1;
                     };
                     PayloadCompression payload_compression = 6 [json_name = "payload-compression"];
                  }
                  TdmParameter tdm_parameter = 23 [json_name = "tdm-parameter"];
                  message AtmParameter {
                     uint32 max_atm_cells = 1 [json_name = "max-atm-cells"];
                     uint32 atm_pack_overtime = 2 [json_name = "atm-pack-overtime"];
                     uint32 atm_transmit_cell = 3 [json_name = "atm-transmit-cell"];
                     bool sequence_number = 4 [json_name = "sequence-number"];
                  }
                  AtmParameter atm_parameter = 24 [json_name = "atm-parameter"];
                  message QosParameter {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 pir = 2 [json_name = "pir"];
                     string profile_name = 3 [json_name = "profile-name"];
                  }
                  QosParameter qos_parameter = 25 [json_name = "qos-parameter"];
                  message QosTrafficStatistics {
                     string interface_name = 1 [json_name = "interface-name"];
                     string last_clear_time = 2 [json_name = "last-clear-time"];
                     uint64 bits_rate = 3 [json_name = "bits-rate"];
                     uint64 packets_rate = 4 [json_name = "packets-rate"];
                     uint64 output_bytes = 5 [json_name = "output-bytes"];
                     uint64 output_packets = 6 [json_name = "output-packets"];
                     message QosQuerys {
                        message QosQuery {
                           enum Query {
                              Query_BE = 0;
                              Query_AF1 = 1;
                              Query_AF2 = 2;
                              Query_AF3 = 3;
                              Query_AF4 = 4;
                              Query_EF = 5;
                              Query_CS6 = 6;
                              Query_CS7 = 7;
                           };
                           Query query = 1 [json_name = "query"];
                           uint64 packets = 2 [json_name = "packets"];
                           uint64 bytes = 3 [json_name = "bytes"];
                           uint64 packets_rate = 4 [json_name = "packets-rate"];
                           uint64 bits_rate = 5 [json_name = "bits-rate"];
                           uint64 discard_packets = 6 [json_name = "discard-packets"];
                           uint64 discard_bytes = 7 [json_name = "discard-bytes"];
                           uint64 discard_packets_rate = 8 [json_name = "discard-packets-rate"];
                           uint64 discard_bit_rate = 9 [json_name = "discard-bit-rate"];
                        }
                        repeated QosQuery qos_query = 1 [json_name = "qos-query"];
                     }
                     QosQuerys qos_querys = 7 [json_name = "qos-querys"];
                  }
                  QosTrafficStatistics qos_traffic_statistics = 26 [json_name = "qos-traffic-statistics"];
                  string endpoint = 27 [json_name = "endpoint"];
                  uint32 color = 28 [json_name = "color"];
                  message TimeDelayCompensation {
                     uint32 compensation_value = 1 [json_name = "compensation-value"];
                  }
                  TimeDelayCompensation time_delay_compensation = 29 [json_name = "time-delay-compensation"];
                  message TimeDelayMeasureResults {
                     string measure_time = 1 [json_name = "measure-time"];
                     enum ActiveState {
                        ActiveState_INACTIVE = 0;
                        ActiveState_ACTIVE = 1;
                     };
                     ActiveState active_state = 2 [json_name = "active-state"];
                     string measurement_failure_reason = 3 [json_name = "measurement-failure-reason"];
                     uint32 measurement_sample1 = 4 [json_name = "measurement-sample1"];
                     uint32 measurement_sample2 = 5 [json_name = "measurement-sample2"];
                     uint32 measurement_sample3 = 6 [json_name = "measurement-sample3"];
                  }
                  TimeDelayMeasureResults time_delay_measure_results = 30 [json_name = "time-delay-measure-results"];
                  bool track_l2ve_service_state = 31 [json_name = "track-l2ve-service-state"];
               }
               repeated Pw pw = 1 [json_name = "pw"];
            }
            Pws pws = 7 [json_name = "pws"];
            message OutAcs {
               message OutAc {
                  string interface_name = 1 [json_name = "interface-name"];
                  enum Role {
                     INVALID_ENUM_VALUE_Role = 0;
                     Role_PRIMARY = 1;
                     Role_BACKUP = 2;
                     Role_BYPASS = 3;
                     Role_ACX_BYPASS = 7;
                     Role_PWX_BYPASS = 8;
                  };
                  Role role = 2 [json_name = "role"];
                  message TdmParameter {
                     uint32 tdm_encapsulate_number = 1 [json_name = "tdm-encapsulate-number"];
                     uint32 jitter_buffer = 2 [json_name = "jitter-buffer"];
                     bool rtp_header = 3 [json_name = "rtp-header"];
                     string idle_code = 4 [json_name = "idle-code"];
                  }
                  TdmParameter tdm_parameter = 3 [json_name = "tdm-parameter"];
                  message AtmParameter {
                     uint32 max_atm_cells = 1 [json_name = "max-atm-cells"];
                     uint32 atm_pack_overtime = 2 [json_name = "atm-pack-overtime"];
                  }
                  AtmParameter atm_parameter = 4 [json_name = "atm-parameter"];
               }
               repeated OutAc out_ac = 1 [json_name = "out-ac"];
            }
            OutAcs out_acs = 8 [json_name = "out-acs"];
            message HardPipe {
               uint32 bandwidth = 1 [json_name = "bandwidth"];
               uint32 expand_ratio = 2 [json_name = "expand-ratio"];
               uint32 burst_time = 3 [json_name = "burst-time"];
            }
            HardPipe hard_pipe = 9 [json_name = "hard-pipe"];
            message AcOamMapping {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_DEFAULT = 1;
                  Type_X_1AG = 2;
                  Type_X_3AH = 3;
               };
               Type type = 1 [json_name = "type"];
               string md_name = 2 [json_name = "md-name"];
               string ma_name = 3 [json_name = "ma-name"];
            }
            AcOamMapping ac_oam_mapping = 10 [json_name = "ac-oam-mapping"];
            message Reliability {
               enum RedundancyMode {
                  RedundancyMode_FRR = 0;
                  RedundancyMode_INDEPENDENT = 1;
                  RedundancyMode_MASTER = 2;
                  RedundancyMode_NONE = 3;
               };
               RedundancyMode redundancy_mode = 1 [json_name = "redundancy-mode"];
               bool switchover = 2 [json_name = "switchover"];
               bool dual_receive = 3 [json_name = "dual-receive"];
               bool dual_send = 4 [json_name = "dual-send"];
               uint32 holdoff = 5 [json_name = "holdoff"];
               message Reroute {
                  enum ReroutePolicy {
                     INVALID_ENUM_VALUE_ReroutePolicy = 0;
                     ReroutePolicy_DELAY = 1;
                     ReroutePolicy_IMMEDIATELY = 2;
                     ReroutePolicy_NEVER = 3;
                  };
                  ReroutePolicy reroute_policy = 1 [json_name = "reroute-policy"];
                  uint32 delay_time = 2 [json_name = "delay-time"];
                  uint32 resume_time = 3 [json_name = "resume-time"];
                  string last_switchback_reason = 4 [json_name = "last-switchback-reason"];
                  string last_switchback_time = 5 [json_name = "last-switchback-time"];
                  uint32 delay_residual = 6 [json_name = "delay-residual"];
                  uint32 resume_residual = 7 [json_name = "resume-residual"];
               }
               Reroute reroute = 6 [json_name = "reroute"];
               message ApsParameter {
                  uint32 aps_id = 1 [json_name = "aps-id"];
                  enum BindType {
                     INVALID_ENUM_VALUE_BindType = 0;
                     BindType_ADMIN = 1;
                     BindType_REFERENCE = 2;
                  };
                  BindType bind_type = 2 [json_name = "bind-type"];
               }
               ApsParameter aps_parameter = 7 [json_name = "aps-parameter"];
            }
            Reliability reliability = 11 [json_name = "reliability"];
         }
         VpwsLdp vpws_ldp = 8 [json_name = "vpws-ldp"];
         message VpwsSwitch {
            enum SwitchType {
               INVALID_ENUM_VALUE_SwitchType = 0;
               SwitchType_SVCX_SVC = 1;
               SwitchType_LDPX_SVC = 2;
               SwitchType_LDPX_LDP = 3;
               SwitchType_UPE = 4;
               SwitchType_LDPX_LDPX_BAK = 5;
            };
            SwitchType switch_type = 1 [json_name = "switch-type"];
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_FR = 1;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_CEM = 8;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_ATMX_AAL5X_PDU = 14;
               EncapsulationType_FRX_PORTX_MODE = 15;
               EncapsulationType_CEP = 16;
               EncapsulationType_SATOPX_E1 = 17;
               EncapsulationType_SATOPX_T1 = 18;
               EncapsulationType_SATOPX_E3 = 19;
               EncapsulationType_SATOPX_T3 = 20;
               EncapsulationType_CESOPSNX_BASIC = 21;
               EncapsulationType_TDMOIPX_AAL1 = 22;
               EncapsulationType_CESOPSNX_TDM = 23;
               EncapsulationType_TDMOIPX_AAL2 = 24;
               EncapsulationType_FRX_DLCI = 25;
               EncapsulationType_IPX_INTERWORKING = 64;
               EncapsulationType_UNSUPPORT = 255;
            };
            EncapsulationType encapsulation_type = 2 [json_name = "encapsulation-type"];
            bool control_word_trans = 3 [json_name = "control-word-trans"];
            enum ControlWord {
               ControlWord_DEFAULT = 0;
               ControlWord_DISABLE = 1;
               ControlWord_ENABLE = 2;
               ControlWord_PREFER = 3;
            };
            ControlWord control_word = 4 [json_name = "control-word"];
            uint32 mtu = 5 [json_name = "mtu"];
            bool bit_error_detection = 6 [json_name = "bit-error-detection"];
            string create_time = 7 [json_name = "create-time"];
            string up_time = 8 [json_name = "up-time"];
            string last_change_time = 9 [json_name = "last-change-time"];
            message Pws {
               message Pw {
                  enum Role {
                     INVALID_ENUM_VALUE_Role = 0;
                     Role_LEFTX_PRIMARY = 4;
                     Role_RIGHTX_PRIMARY = 5;
                     Role_RIGHTX_BACKUP = 6;
                  };
                  Role role = 1 [json_name = "role"];
                  uint32 pw_id = 2 [json_name = "pw-id"];
                  string peer_ip = 3 [json_name = "peer-ip"];
                  uint32 transmit_label = 4 [json_name = "transmit-label"];
                  uint32 receive_label = 5 [json_name = "receive-label"];
                  string tunnel_policy = 6 [json_name = "tunnel-policy"];
                  message FlowLabel {
                     enum Ability {
                        Ability_DEFAULT = 0;
                        Ability_SEND = 1;
                        Ability_RECEIVE = 2;
                        Ability_BOTH = 3;
                        Ability_DISABLE = 4;
                     };
                     Ability ability = 1 [json_name = "ability"];
                     bool oam_packet_pop = 2 [json_name = "oam-packet-pop"];
                  }
                  FlowLabel flow_label = 7 [json_name = "flow-label"];
                  message HardPipe {
                     uint32 bandwidth = 1 [json_name = "bandwidth"];
                     uint32 expand_ratio = 2 [json_name = "expand-ratio"];
                  }
                  HardPipe hard_pipe = 8 [json_name = "hard-pipe"];
                  message QosParameter {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 pir = 2 [json_name = "pir"];
                     string profile_name = 3 [json_name = "profile-name"];
                  }
                  QosParameter qos_parameter = 9 [json_name = "qos-parameter"];
                  message TdmParameter {
                     uint32 tdm_encapsulate_number = 1 [json_name = "tdm-encapsulate-number"];
                     enum RtpHeader {
                        RtpHeader_FALSE = 0;
                        RtpHeader_STANDARD = 1;
                        RtpHeader_PRIVATE = 2;
                     };
                     RtpHeader rtp_header = 2 [json_name = "rtp-header"];
                     uint32 time_slot = 3 [json_name = "time-slot"];
                  }
                  TdmParameter tdm_parameter = 10 [json_name = "tdm-parameter"];
                  message PwInfo {
                     enum SessionState {
                        SessionState_DEFAULT = 0;
                        SessionState_DOWN = 1;
                        SessionState_UP = 2;
                     };
                     SessionState session_state = 1 [json_name = "session-state"];
                     enum PwState {
                        PwState_DOWN = 0;
                        PwState_UP = 1;
                        PwState_BACKUP = 2;
                     };
                     PwState pw_state = 2 [json_name = "pw-state"];
                     uint32 pw_id = 3 [json_name = "pw-id"];
                     enum EncapsulationType {
                        INVALID_ENUM_VALUE_EncapsulationType = 0;
                        EncapsulationType_FR = 1;
                        EncapsulationType_ATMX_AAL5X_SDU = 2;
                        EncapsulationType_ATMX_TRANSX_CELL = 3;
                        EncapsulationType_VLAN = 4;
                        EncapsulationType_ETHERNET = 5;
                        EncapsulationType_HDLC = 6;
                        EncapsulationType_PPP = 7;
                        EncapsulationType_CEM = 8;
                        EncapsulationType_ATMX_NTO1X_VCC = 9;
                        EncapsulationType_ATMX_NTO1X_VPC = 10;
                        EncapsulationType_IPX_LAYER2 = 11;
                        EncapsulationType_ATMX_1TO1X_VCC = 12;
                        EncapsulationType_ATMX_1TO1X_VPC = 13;
                        EncapsulationType_ATMX_AAL5X_PDU = 14;
                        EncapsulationType_FRX_PORTX_MODE = 15;
                        EncapsulationType_CEP = 16;
                        EncapsulationType_SATOPX_E1 = 17;
                        EncapsulationType_SATOPX_T1 = 18;
                        EncapsulationType_SATOPX_E3 = 19;
                        EncapsulationType_SATOPX_T3 = 20;
                        EncapsulationType_CESOPSNX_BASIC = 21;
                        EncapsulationType_TDMOIPX_AAL1 = 22;
                        EncapsulationType_CESOPSNX_TDM = 23;
                        EncapsulationType_TDMOIPX_AAL2 = 24;
                        EncapsulationType_FRX_DLCI = 25;
                        EncapsulationType_IPX_INTERWORKING = 64;
                        EncapsulationType_UNSUPPORT = 255;
                     };
                     EncapsulationType encapsulation_type = 4 [json_name = "encapsulation-type"];
                     string destination = 5 [json_name = "destination"];
                     uint32 local_vc_label = 6 [json_name = "local-vc-label"];
                     uint32 remote_vc_label = 7 [json_name = "remote-vc-label"];
                     enum LocalAcOam {
                        LocalAcOam_DEFAULT = 0;
                        LocalAcOam_DOWN = 1;
                        LocalAcOam_UP = 2;
                     };
                     LocalAcOam local_ac_oam = 8 [json_name = "local-ac-oam"];
                     enum LocalPsnOam {
                        LocalPsnOam_DEFAULT = 0;
                        LocalPsnOam_DOWN = 1;
                        LocalPsnOam_UP = 2;
                     };
                     LocalPsnOam local_psn_oam = 9 [json_name = "local-psn-oam"];
                     enum LocalForwardState {
                        LocalForwardState_NOTX_FORWARDING = 0;
                        LocalForwardState_FORWARDING = 1;
                     };
                     LocalForwardState local_forward_state = 10 [json_name = "local-forward-state"];
                     enum RemoteAcOam {
                        RemoteAcOam_DEFAULT = 0;
                        RemoteAcOam_DOWN = 1;
                        RemoteAcOam_UP = 2;
                     };
                     RemoteAcOam remote_ac_oam = 11 [json_name = "remote-ac-oam"];
                     enum RemotePsnOam {
                        RemotePsnOam_DEFAULT = 0;
                        RemotePsnOam_DOWN = 1;
                        RemotePsnOam_UP = 2;
                     };
                     RemotePsnOam remote_psn_oam = 12 [json_name = "remote-psn-oam"];
                     enum RemoteForwardState {
                        RemoteForwardState_NOTX_FORWARDING = 0;
                        RemoteForwardState_FORWARDING = 1;
                     };
                     RemoteForwardState remote_forward_state = 13 [json_name = "remote-forward-state"];
                     uint32 local_vc_mtu = 14 [json_name = "local-vc-mtu"];
                     uint32 remote_vc_mtu = 15 [json_name = "remote-vc-mtu"];
                     string local_vccv = 16 [json_name = "local-vccv"];
                     string remote_vccv = 17 [json_name = "remote-vccv"];
                     enum LocalControlWord {
                        LocalControlWord_DEFAULT = 0;
                        LocalControlWord_DISABLE = 1;
                        LocalControlWord_ENABLE = 2;
                        LocalControlWord_PREFER = 3;
                     };
                     LocalControlWord local_control_word = 18 [json_name = "local-control-word"];
                     enum RemoteControlWord {
                        RemoteControlWord_DEFAULT = 0;
                        RemoteControlWord_DISABLE = 1;
                        RemoteControlWord_ENABLE = 2;
                        RemoteControlWord_PREFER = 3;
                     };
                     RemoteControlWord remote_control_word = 19 [json_name = "remote-control-word"];
                     string tunnel_policy = 20 [json_name = "tunnel-policy"];
                     uint32 tunnel_count = 21 [json_name = "tunnel-count"];
                     uint32 spe_count = 22 [json_name = "spe-count"];
                     string create_time = 23 [json_name = "create-time"];
                     string up_time = 24 [json_name = "up-time"];
                     string last_change_time = 25 [json_name = "last-change-time"];
                     string last_up_time = 26 [json_name = "last-up-time"];
                     string total_up_time = 27 [json_name = "total-up-time"];
                     uint32 c_key = 28 [json_name = "c-key"];
                     uint32 n_key = 29 [json_name = "n-key"];
                     string remote_vccv_code = 30 [json_name = "remote-vccv-code"];
                     uint32 hard_pipe_bandwidth = 31 [json_name = "hard-pipe-bandwidth"];
                     string hard_pipe_expand_ratio = 32 [json_name = "hard-pipe-expand-ratio"];
                     bool pw_token_exceed = 33 [json_name = "pw-token-exceed"];
                     message Spes {
                        message Spe {
                           uint32 spe_pw_id = 1 [json_name = "spe-pw-id"];
                           string spe_peer_ip = 2 [json_name = "spe-peer-ip"];
                        }
                        repeated Spe spe = 1 [json_name = "spe"];
                     }
                     Spes spes = 34 [json_name = "spes"];
                     message Tunnels {
                        message Tunnel {
                           string tunnel_key = 1 [json_name = "tunnel-key"];
                           enum TunnelType {
                              TunnelType_INVALID = 0;
                              TunnelType_LDP = 1;
                              TunnelType_BGP = 2;
                              TunnelType_TE = 3;
                              TunnelType_STATICX_LSP = 4;
                              TunnelType_GRE = 5;
                              TunnelType_UNI = 6;
                              TunnelType_TNLX_GROUP = 7;
                              TunnelType_SUBX_TE = 8;
                              TunnelType_SUBX_GROUP = 9;
                              TunnelType_X_6OVER4 = 10;
                              TunnelType_X_6TO4 = 11;
                              TunnelType_BGPX_LOCALX_IFNET = 12;
                              TunnelType_LDP6 = 13;
                              TunnelType_SRBEX_LSP = 41;
                              TunnelType_SRX_TEX_POLICY = 50;
                              TunnelType_SRV6X_TEX_POLICY = 52;
                           };
                           TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                           string tunnel_name = 3 [json_name = "tunnel-name"];
                           string public_next_hop = 4 [json_name = "public-next-hop"];
                        }
                        repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                     }
                     Tunnels tunnels = 35 [json_name = "tunnels"];
                     message DownCauses {
                        message DownCause {
                           uint32 down_cause_index = 1 [json_name = "down-cause-index"];
                           string down_cause = 2 [json_name = "down-cause"];
                        }
                        repeated DownCause down_cause = 1 [json_name = "down-cause"];
                     }
                     DownCauses down_causes = 36 [json_name = "down-causes"];
                     message StatusChanges {
                        message StatusChange {
                           uint32 index = 1 [json_name = "index"];
                           string timestamp = 2 [json_name = "timestamp"];
                           string reason = 3 [json_name = "reason"];
                        }
                        repeated StatusChange status_change = 1 [json_name = "status-change"];
                     }
                     StatusChanges status_changes = 37 [json_name = "status-changes"];
                  }
                  PwInfo pw_info = 11 [json_name = "pw-info"];
                  string endpoint = 12 [json_name = "endpoint"];
                  uint32 color = 13 [json_name = "color"];
               }
               repeated Pw pw = 1 [json_name = "pw"];
            }
            Pws pws = 10 [json_name = "pws"];
            message Reliability {
               enum RedundancyMode {
                  RedundancyMode_FRR = 0;
                  RedundancyMode_INDEPENDENT = 1;
                  RedundancyMode_MASTER = 2;
                  RedundancyMode_NONE = 3;
               };
               RedundancyMode redundancy_mode = 1 [json_name = "redundancy-mode"];
               bool switchover = 2 [json_name = "switchover"];
               message Reroute {
                  enum ReroutePolicy {
                     INVALID_ENUM_VALUE_ReroutePolicy = 0;
                     ReroutePolicy_DELAY = 1;
                     ReroutePolicy_IMMEDIATELY = 2;
                     ReroutePolicy_NEVER = 3;
                  };
                  ReroutePolicy reroute_policy = 1 [json_name = "reroute-policy"];
                  uint32 delay_time = 2 [json_name = "delay-time"];
                  string last_switchback_reason = 3 [json_name = "last-switchback-reason"];
                  string last_switchback_time = 4 [json_name = "last-switchback-time"];
                  uint32 delay_residual = 5 [json_name = "delay-residual"];
               }
               Reroute reroute = 3 [json_name = "reroute"];
            }
            Reliability reliability = 11 [json_name = "reliability"];
         }
         VpwsSwitch vpws_switch = 9 [json_name = "vpws-switch"];
         message VpwsBgp {
            string vpn_instance = 1 [json_name = "vpn-instance"];
            string local_site = 2 [json_name = "local-site"];
            message Acs {
               message Ac {
                  string interface_name = 1 [json_name = "interface-name"];
                  bool tagged = 2 [json_name = "tagged"];
                  bool trigger_interface_down = 3 [json_name = "trigger-interface-down"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                           ProtocolType_LLDP = 2;
                           ProtocolType_BPDU = 4;
                           ProtocolType_CDP = 5;
                           ProtocolType_UDLD = 6;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                           Action_DISCARD = 2;
                           Action_TRANSPORT = 3;
                           Action_TRANSPORTX_TAGGED = 4;
                        };
                        Action action = 2 [json_name = "action"];
                        enum Mode {
                           Mode_NORMAL = 0;
                           Mode_UNTAG = 1;
                           Mode_UNTAGX_VLANX_CHECK = 2;
                        };
                        Mode mode = 3 [json_name = "mode"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 4 [json_name = "protocol-actions"];
                  enum State {
                     State_DEFAULT = 0;
                     State_DOWN = 1;
                     State_UP = 2;
                  };
                  State state = 5 [json_name = "state"];
                  bool token_exceed = 6 [json_name = "token-exceed"];
               }
               repeated Ac ac = 1 [json_name = "ac"];
            }
            Acs acs = 3 [json_name = "acs"];
            message Pws {
               message Pw {
                  uint32 remote_site_id = 1 [json_name = "remote-site-id"];
                  enum Role {
                     INVALID_ENUM_VALUE_Role = 0;
                     Role_PRIMARY = 1;
                     Role_BACKUP = 2;
                     Role_BYPASS = 3;
                     Role_ACX_BYPASS = 7;
                     Role_PWX_BYPASS = 8;
                  };
                  Role role = 2 [json_name = "role"];
                  string tunnel_policy = 3 [json_name = "tunnel-policy"];
                  bool traffic_statistics_collection = 4 [json_name = "traffic-statistics-collection"];
                  bool manual_set_fault = 5 [json_name = "manual-set-fault"];
                  message Bfd {
                     uint32 min_rx_interval = 1 [json_name = "min-rx-interval"];
                     uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                     uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                     bool track_interface = 4 [json_name = "track-interface"];
                  }
                  Bfd bfd = 6 [json_name = "bfd"];
                  message PwInfo {
                     enum Type {
                        Type_LOCAL = 0;
                        Type_REMOTE = 1;
                        Type_UNKNOWN = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum LocalVcState {
                        LocalVcState_DOWN = 0;
                        LocalVcState_UP = 1;
                        LocalVcState_BACKUP = 2;
                     };
                     LocalVcState local_vc_state = 2 [json_name = "local-vc-state"];
                     enum RemoteVcState {
                        RemoteVcState_DOWN = 0;
                        RemoteVcState_UP = 1;
                        RemoteVcState_BACKUP = 2;
                     };
                     RemoteVcState remote_vc_state = 3 [json_name = "remote-vc-state"];
                     string peer_ip = 4 [json_name = "peer-ip"];
                     uint32 local_vc_label = 5 [json_name = "local-vc-label"];
                     uint32 remote_vc_label = 6 [json_name = "remote-vc-label"];
                     enum AcOamState {
                        AcOamState_DOWN = 0;
                        AcOamState_UP = 1;
                        AcOamState_INVALID = 2;
                     };
                     AcOamState ac_oam_state = 7 [json_name = "ac-oam-state"];
                     enum BfdState {
                        BfdState_INVALID = 0;
                        BfdState_DOWN = 1;
                        BfdState_UP = 2;
                        BfdState_ADMINX_DOWN = 3;
                     };
                     BfdState bfd_state = 8 [json_name = "bfd-state"];
                     enum ControlFlagBit {
                        ControlFlagBit_SBIT = 0;
                        ControlFlagBit_LOCALX_CBIT = 1;
                        ControlFlagBit_FBIT = 2;
                        ControlFlagBit_QBIT = 3;
                        ControlFlagBit_REMOTEX_CX_BIT = 4;
                     };
                     repeated ControlFlagBit control_flag_bit = 9 [json_name = "control-flag-bit"];
                     bool pw_token_exceed = 10 [json_name = "pw-token-exceed"];
                     message DownCauses {
                        message DownCause {
                           uint32 down_cause_index = 1 [json_name = "down-cause-index"];
                           string down_cause = 2 [json_name = "down-cause"];
                        }
                        repeated DownCause down_cause = 1 [json_name = "down-cause"];
                     }
                     DownCauses down_causes = 11 [json_name = "down-causes"];
                  }
                  PwInfo pw_info = 7 [json_name = "pw-info"];
                  message Tunnels {
                     message Tunnel {
                        string tunnel_key = 1 [json_name = "tunnel-key"];
                        enum TunnelType {
                           TunnelType_INVALID = 0;
                           TunnelType_LDP = 1;
                           TunnelType_BGP = 2;
                           TunnelType_TE = 3;
                           TunnelType_STATICX_LSP = 4;
                           TunnelType_GRE = 5;
                           TunnelType_UNI = 6;
                           TunnelType_TNLX_GROUP = 7;
                           TunnelType_SUBX_TE = 8;
                           TunnelType_SUBX_GROUP = 9;
                           TunnelType_X_6OVER4 = 10;
                           TunnelType_X_6TO4 = 11;
                           TunnelType_BGPX_LOCALX_IFNET = 12;
                           TunnelType_LDP6 = 13;
                           TunnelType_SRBEX_LSP = 41;
                           TunnelType_SRX_TEX_POLICY = 50;
                           TunnelType_SRV6X_TEX_POLICY = 52;
                        };
                        TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                        string tunnel_name = 3 [json_name = "tunnel-name"];
                        string public_next_hop = 4 [json_name = "public-next-hop"];
                     }
                     repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                  }
                  Tunnels tunnels = 8 [json_name = "tunnels"];
                  message TrafficStatistics {
                     string interface_name = 1 [json_name = "interface-name"];
                     string last_clear_time = 2 [json_name = "last-clear-time"];
                     uint64 input_bytes_rate = 3 [json_name = "input-bytes-rate"];
                     uint64 input_packets_rate = 4 [json_name = "input-packets-rate"];
                     uint64 output_bytes_rate = 5 [json_name = "output-bytes-rate"];
                     uint64 output_packets_rate = 6 [json_name = "output-packets-rate"];
                     uint64 input_bytes = 7 [json_name = "input-bytes"];
                     uint64 input_packets = 8 [json_name = "input-packets"];
                     uint64 output_bytes = 9 [json_name = "output-bytes"];
                     uint64 output_packets = 10 [json_name = "output-packets"];
                  }
                  TrafficStatistics traffic_statistics = 9 [json_name = "traffic-statistics"];
                  message QosParameter {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 pir = 2 [json_name = "pir"];
                     string profile_name = 3 [json_name = "profile-name"];
                  }
                  QosParameter qos_parameter = 10 [json_name = "qos-parameter"];
                  message QosTrafficStatistics {
                     string interface_name = 1 [json_name = "interface-name"];
                     string last_clear_time = 2 [json_name = "last-clear-time"];
                     uint64 bits_rate = 3 [json_name = "bits-rate"];
                     uint64 packets_rate = 4 [json_name = "packets-rate"];
                     uint64 output_bytes = 5 [json_name = "output-bytes"];
                     uint64 output_packets = 6 [json_name = "output-packets"];
                     message QosQuerys {
                        message QosQuery {
                           enum Query {
                              Query_BE = 0;
                              Query_AF1 = 1;
                              Query_AF2 = 2;
                              Query_AF3 = 3;
                              Query_AF4 = 4;
                              Query_EF = 5;
                              Query_CS6 = 6;
                              Query_CS7 = 7;
                           };
                           Query query = 1 [json_name = "query"];
                           uint64 packets = 2 [json_name = "packets"];
                           uint64 bytes = 3 [json_name = "bytes"];
                           uint64 packets_rate = 4 [json_name = "packets-rate"];
                           uint64 bits_rate = 5 [json_name = "bits-rate"];
                           uint64 discard_packets = 6 [json_name = "discard-packets"];
                           uint64 discard_bytes = 7 [json_name = "discard-bytes"];
                           uint64 discard_packets_rate = 8 [json_name = "discard-packets-rate"];
                           uint64 discard_bit_rate = 9 [json_name = "discard-bit-rate"];
                        }
                        repeated QosQuery qos_query = 1 [json_name = "qos-query"];
                     }
                     QosQuerys qos_querys = 7 [json_name = "qos-querys"];
                  }
                  QosTrafficStatistics qos_traffic_statistics = 11 [json_name = "qos-traffic-statistics"];
               }
               repeated Pw pw = 1 [json_name = "pw"];
            }
            Pws pws = 4 [json_name = "pws"];
            message Reliability {
               enum RedundancyMode {
                  RedundancyMode_FRR = 0;
                  RedundancyMode_INDEPENDENT = 1;
                  RedundancyMode_MASTER = 2;
                  RedundancyMode_NONE = 3;
               };
               RedundancyMode redundancy_mode = 1 [json_name = "redundancy-mode"];
               bool dual_receive = 2 [json_name = "dual-receive"];
               message Reroute {
                  enum ReroutePolicy {
                     INVALID_ENUM_VALUE_ReroutePolicy = 0;
                     ReroutePolicy_DELAY = 1;
                     ReroutePolicy_IMMEDIATELY = 2;
                     ReroutePolicy_NEVER = 3;
                  };
                  ReroutePolicy reroute_policy = 1 [json_name = "reroute-policy"];
                  uint32 delay_time = 2 [json_name = "delay-time"];
                  uint32 resume_time = 3 [json_name = "resume-time"];
                  string last_switchback_reason = 4 [json_name = "last-switchback-reason"];
                  string last_switchback_time = 5 [json_name = "last-switchback-time"];
                  uint32 delay_residual = 6 [json_name = "delay-residual"];
                  uint32 resume_residual = 7 [json_name = "resume-residual"];
               }
               Reroute reroute = 3 [json_name = "reroute"];
            }
            Reliability reliability = 5 [json_name = "reliability"];
            message OamMapping {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_DEFAULT = 1;
                  Type_X_1AG = 2;
                  Type_X_3AH = 3;
               };
               Type type = 1 [json_name = "type"];
               string md_name = 2 [json_name = "md-name"];
               string ma_name = 3 [json_name = "ma-name"];
            }
            OamMapping oam_mapping = 6 [json_name = "oam-mapping"];
         }
         VpwsBgp vpws_bgp = 10 [json_name = "vpws-bgp"];
         message Vpls {
            enum MemberDiscoveryMode {
               MemberDiscoveryMode_DEFAULT = 0;
               MemberDiscoveryMode_AUTO = 1;
               MemberDiscoveryMode_STATIC = 2;
            };
            MemberDiscoveryMode member_discovery_mode = 1 [json_name = "member-discovery-mode"];
            enum WorkMode {
               WorkMode_NORMAL = 0;
               WorkMode_BDX_MODE = 1;
               WorkMode_BX_VSI = 3;
               WorkMode_IX_VSI = 4;
               WorkMode_IX_VSIX_P2P = 5;
               WorkMode_IX_VSIX_BX_EVPNX_INTERWORKING = 7;
            };
            WorkMode work_mode = 2 [json_name = "work-mode"];
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
            };
            EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
            uint32 mtu = 4 [json_name = "mtu"];
            string tunnel_policy = 5 [json_name = "tunnel-policy"];
            bool shutdown = 6 [json_name = "shutdown"];
            bool isolate_spoken = 7 [json_name = "isolate-spoken"];
            bool isolate_spoken_include_multicast = 8 [json_name = "isolate-spoken-include-multicast"];
            bool ignore_ac_state = 9 [json_name = "ignore-ac-state"];
            bool response_ac_state = 10 [json_name = "response-ac-state"];
            bool admin_vsi = 11 [json_name = "admin-vsi"];
            string track_admin_vsi = 12 [json_name = "track-admin-vsi"];
            enum UnknownUnicastAction {
               UnknownUnicastAction_BROADCAST = 0;
               UnknownUnicastAction_DROP = 1;
               UnknownUnicastAction_LOCALX_HANDLE = 2;
               UnknownUnicastAction_DROPX_LEARN = 3;
            };
            UnknownUnicastAction unknown_unicast_action = 13 [json_name = "unknown-unicast-action"];
            enum UnknownMulticastAction {
               UnknownMulticastAction_BROADCAST = 0;
               UnknownMulticastAction_DROP = 1;
               UnknownMulticastAction_LOCALX_HANDLE = 2;
               UnknownMulticastAction_DROPX_LEARN = 3;
            };
            UnknownMulticastAction unknown_multicast_action = 14 [json_name = "unknown-multicast-action"];
            bool isolate_hub_ac_pw = 15 [json_name = "isolate-hub-ac-pw"];
            bool p2p_vsi = 16 [json_name = "p2p-vsi"];
            bool traffic_statistics_collection = 17 [json_name = "traffic-statistics-collection"];
            enum MacRemoveMode {
               MacRemoveMode_INVALID = 0;
               MacRemoveMode_ALLX_BUTX_MINE = 1;
               MacRemoveMode_ALLX_FROMX_ME = 2;
            };
            MacRemoveMode mac_remove_mode = 18 [json_name = "mac-remove-mode"];
            bool mac_learn = 19 [json_name = "mac-learn"];
            enum MacLearnStyle {
               INVALID_ENUM_VALUE_MacLearnStyle = 0;
               MacLearnStyle_UNQUALIFY = 1;
               MacLearnStyle_QUALIFY = 2;
               MacLearnStyle_QUALIFYX_OUTERX_VLAN = 3;
               MacLearnStyle_QUALIFYX_INNERX_VLAN = 4;
            };
            MacLearnStyle mac_learn_style = 20 [json_name = "mac-learn-style"];
            uint32 mac_age_time = 21 [json_name = "mac-age-time"];
            uint32 local_mac_age_time = 22 [json_name = "local-mac-age-time"];
            uint32 remote_mac_age_time = 23 [json_name = "remote-mac-age-time"];
            bool mac_withdraw = 24 [json_name = "mac-withdraw"];
            bool interface_change_mac_withdraw = 25 [json_name = "interface-change-mac-withdraw"];
            enum InterfaceChangeMacWithdrawType {
               InterfaceChangeMacWithdrawType_ALL = 0;
               InterfaceChangeMacWithdrawType_UP = 1;
               InterfaceChangeMacWithdrawType_DOWN = 2;
            };
            InterfaceChangeMacWithdrawType interface_change_mac_withdraw_type = 26 [json_name = "interface-change-mac-withdraw-type"];
            bool bd_pwtag_mac_withdraw = 27 [json_name = "bd-pwtag-mac-withdraw"];
            bool bd_down_mac_withdraw = 28 [json_name = "bd-down-mac-withdraw"];
            bool propagate_mac_withdraw = 29 [json_name = "propagate-mac-withdraw"];
            bool mac_flush_rfc_compatible = 30 [json_name = "mac-flush-rfc-compatible"];
            uint32 vrrp_mac_withdraw_retry = 31 [json_name = "vrrp-mac-withdraw-retry"];
            message LdpSignaling {
               uint64 vsi_id = 1 [json_name = "vsi-id"];
               bool traffic_statistics_collection = 2 [json_name = "traffic-statistics-collection"];
               enum ControlWord {
                  ControlWord_DEFAULT = 0;
                  ControlWord_DISABLE = 1;
                  ControlWord_ENABLE = 2;
                  ControlWord_PREFER = 3;
               };
               ControlWord control_word = 3 [json_name = "control-word"];
               bool hard_pipe = 4 [json_name = "hard-pipe"];
               bool mac_withdraw = 5 [json_name = "mac-withdraw"];
               bool interface_change_mac_withdraw = 6 [json_name = "interface-change-mac-withdraw"];
               enum InterfaceChangeMacWithdrawType {
                  InterfaceChangeMacWithdrawType_ALL = 0;
                  InterfaceChangeMacWithdrawType_UP = 1;
                  InterfaceChangeMacWithdrawType_DOWN = 2;
               };
               InterfaceChangeMacWithdrawType interface_change_mac_withdraw_type = 7 [json_name = "interface-change-mac-withdraw-type"];
               bool upe_upe_mac_withdraw = 8 [json_name = "upe-upe-mac-withdraw"];
               bool upe_npe_mac_withdraw = 9 [json_name = "upe-npe-mac-withdraw"];
               bool npe_upe_mac_withdraw = 10 [json_name = "npe-upe-mac-withdraw"];
               message FlowLabel {
                  enum Ability {
                     Ability_DEFAULT = 0;
                     Ability_SEND = 1;
                     Ability_RECEIVE = 2;
                     Ability_BOTH = 3;
                     Ability_DISABLE = 4;
                  };
                  Ability ability = 1 [json_name = "ability"];
                  bool static = 2 [json_name = "static"];
               }
               FlowLabel flow_label = 11 [json_name = "flow-label"];
               message Pws {
                  message Pw {
                     string peer_ip = 1 [json_name = "peer-ip"];
                     uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                     enum EncapsulationType {
                        INVALID_ENUM_VALUE_EncapsulationType = 0;
                        EncapsulationType_VLAN = 4;
                        EncapsulationType_ETHERNET = 5;
                        EncapsulationType_UNSUPPORT = 255;
                     };
                     EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
                     enum Role {
                        INVALID_ENUM_VALUE_Role = 0;
                        Role_PRIMARY = 1;
                        Role_BACKUP = 2;
                     };
                     Role role = 4 [json_name = "role"];
                     string name = 5 [json_name = "name"];
                     enum SignalType {
                        INVALID_ENUM_VALUE_SignalType = 0;
                        SignalType_LDP = 1;
                        SignalType_STATIC = 2;
                     };
                     SignalType signal_type = 6 [json_name = "signal-type"];
                     uint32 transmit_label = 7 [json_name = "transmit-label"];
                     uint32 receive_label = 8 [json_name = "receive-label"];
                     enum ControlWord {
                        ControlWord_DEFAULT = 0;
                        ControlWord_DISABLE = 1;
                        ControlWord_ENABLE = 2;
                        ControlWord_PREFER = 3;
                     };
                     ControlWord control_word = 9 [json_name = "control-word"];
                     bool vccv = 10 [json_name = "vccv"];
                     bool ignore_standby = 11 [json_name = "ignore-standby"];
                     bool upe = 12 [json_name = "upe"];
                     string tunnel_policy = 13 [json_name = "tunnel-policy"];
                     enum TrafficStatisticsCollection {
                        TrafficStatisticsCollection_DEFAULT = 0;
                        TrafficStatisticsCollection_DISABLE = 1;
                        TrafficStatisticsCollection_ENABLE = 2;
                     };
                     TrafficStatisticsCollection traffic_statistics_collection = 14 [json_name = "traffic-statistics-collection"];
                     bool track_hub_pw = 15 [json_name = "track-hub-pw"];
                     bool ignore_stp_loop_check = 16 [json_name = "ignore-stp-loop-check"];
                     uint32 hard_pipe_bandwidth = 17 [json_name = "hard-pipe-bandwidth"];
                     uint32 hard_pipe_burst_time = 18 [json_name = "hard-pipe-burst-time"];
                     bool status_code_change_flush_mac_disable = 19 [json_name = "status-code-change-flush-mac-disable"];
                     bool ac_mode = 20 [json_name = "ac-mode"];
                     message FlowLabel {
                        enum Ability {
                           Ability_DEFAULT = 0;
                           Ability_SEND = 1;
                           Ability_RECEIVE = 2;
                           Ability_BOTH = 3;
                           Ability_DISABLE = 4;
                        };
                        Ability ability = 1 [json_name = "ability"];
                        bool static = 2 [json_name = "static"];
                     }
                     FlowLabel flow_label = 21 [json_name = "flow-label"];
                     message Bfd {
                        uint32 min_rx_interval = 1 [json_name = "min-rx-interval"];
                        uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                        uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                        bool option_tlv = 4 [json_name = "option-tlv"];
                     }
                     Bfd bfd = 22 [json_name = "bfd"];
                     message MstpAttribute {
                        bool enable = 1 [json_name = "enable"];
                        bool loop_protection = 2 [json_name = "loop-protection"];
                        bool no_agreement_check = 3 [json_name = "no-agreement-check"];
                        enum PointToPoint {
                           INVALID_ENUM_VALUE_PointToPoint = 0;
                           PointToPoint_FORCEX_TRUE = 1;
                           PointToPoint_FORCEX_FALSE = 2;
                           PointToPoint_AUTO = 3;
                        };
                        PointToPoint point_to_point = 4 [json_name = "point-to-point"];
                        bool root_protection = 5 [json_name = "root-protection"];
                        uint32 transmit_limit = 6 [json_name = "transmit-limit"];
                        bool tc_restriction = 7 [json_name = "tc-restriction"];
                        enum Compliance {
                           INVALID_ENUM_VALUE_Compliance = 0;
                           Compliance_AUTO = 1;
                           Compliance_DOT1S = 2;
                           Compliance_LEGACY = 3;
                        };
                        Compliance compliance = 8 [json_name = "compliance"];
                        bool digest_snooping = 9 [json_name = "digest-snooping"];
                        enum BpduEncapsulation {
                           INVALID_ENUM_VALUE_BpduEncapsulation = 0;
                           BpduEncapsulation_VBST = 1;
                           BpduEncapsulation_STP = 2;
                        };
                        BpduEncapsulation bpdu_encapsulation = 10 [json_name = "bpdu-encapsulation"];
                        message PermitMacs {
                           message PermitMac {
                              string mac = 1 [json_name = "mac"];
                              string mask = 2 [json_name = "mask"];
                           }
                           repeated PermitMac permit_mac = 1 [json_name = "permit-mac"];
                        }
                        PermitMacs permit_macs = 11 [json_name = "permit-macs"];
                        message Process {
                           uint32 process_id = 1 [json_name = "process-id"];
                           repeated uint32 link_share_process = 2 [json_name = "link-share-process"];
                        }
                        Process process = 12 [json_name = "process"];
                        message DefaultProcessInstance {
                           message DefaultInstance10 {
                              uint32 cost = 1 [json_name = "cost"];
                              uint32 priority = 2 [json_name = "priority"];
                           }
                           DefaultInstance10 default_instance10 = 1 [json_name = "default-instance"];
                           message Instances10 {
                              message Instance11 {
                                 uint32 instance_id = 1 [json_name = "instance-id"];
                                 uint32 cost = 2 [json_name = "cost"];
                                 uint32 priority = 3 [json_name = "priority"];
                              }
                              repeated Instance11 instance11 = 1 [json_name = "instance"];
                           }
                           Instances10 instances10 = 2 [json_name = "instances"];
                        }
                        DefaultProcessInstance default_process_instance = 13 [json_name = "default-process-instance"];
                        message ProcessInstances {
                           message DefaultInstances {
                              message DefaultInstance11 {
                                 uint32 process_id = 1 [json_name = "process-id"];
                                 uint32 cost = 2 [json_name = "cost"];
                                 uint32 priority = 3 [json_name = "priority"];
                              }
                              repeated DefaultInstance11 default_instance11 = 1 [json_name = "default-instance"];
                           }
                           DefaultInstances default_instances = 1 [json_name = "default-instances"];
                           message Instances10 {
                              message Instance11 {
                                 uint32 process_id = 1 [json_name = "process-id"];
                                 uint32 instance_id = 2 [json_name = "instance-id"];
                                 uint32 cost = 3 [json_name = "cost"];
                                 uint32 priority = 4 [json_name = "priority"];
                              }
                              repeated Instance11 instance11 = 1 [json_name = "instance"];
                           }
                           Instances10 instances10 = 2 [json_name = "instances"];
                        }
                        ProcessInstances process_instances = 14 [json_name = "process-instances"];
                        message ProcessAttributes {
                           message ProcessAttribute {
                              uint32 process_id = 1 [json_name = "process-id"];
                              uint32 cost = 2 [json_name = "cost"];
                              uint32 priority = 3 [json_name = "priority"];
                           }
                           repeated ProcessAttribute process_attribute = 1 [json_name = "process-attribute"];
                        }
                        ProcessAttributes process_attributes = 15 [json_name = "process-attributes"];
                        string deny_vlans = 16 [json_name = "deny-vlans"];
                     }
                     MstpAttribute mstp_attribute = 23 [json_name = "mstp-attribute"];
                     message Evpn {
                        bool etree_leaf_enable = 1 [json_name = "etree-leaf-enable"];
                        string esi = 2 [json_name = "esi"];
                        enum State {
                           State_DOWN = 0;
                           State_UP = 1;
                           State_BACKUP = 2;
                        };
                        State state = 3 [json_name = "state"];
                     }
                     Evpn evpn = 24 [json_name = "evpn"];
                     message QosParameter {
                        uint32 cir = 1 [json_name = "cir"];
                        uint32 pir = 2 [json_name = "pir"];
                        string profile_name = 3 [json_name = "profile-name"];
                     }
                     QosParameter qos_parameter = 25 [json_name = "qos-parameter"];
                     message EncapsulationVlan {
                        bool vlan_pass = 1 [json_name = "vlan-pass"];
                     }
                     EncapsulationVlan encapsulation_vlan = 26 [json_name = "encapsulation-vlan"];
                     enum EtreeMode {
                        EtreeMode_DEFAULT = 0;
                        EtreeMode_OPTIMIZED = 1;
                        EtreeMode_COMPATIBLE = 2;
                     };
                     EtreeMode etree_mode = 27 [json_name = "etree-mode"];
                     bool etree_leaf = 28 [json_name = "etree-leaf"];
                     message PwInfo {
                        string peer_ip = 1 [json_name = "peer-ip"];
                        uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                        enum PwType {
                           PwType_LABEL = 0;
                           PwType_QINQ = 1;
                           PwType_MEHVPLS = 2;
                        };
                        PwType pw_type = 3 [json_name = "pw-type"];
                        enum SessionState {
                           SessionState_DEFAULT = 0;
                           SessionState_DOWN = 1;
                           SessionState_UP = 2;
                        };
                        SessionState session_state = 4 [json_name = "session-state"];
                        enum PwState {
                           PwState_DOWN = 0;
                           PwState_UP = 1;
                           PwState_BACKUP = 2;
                        };
                        PwState pw_state = 5 [json_name = "pw-state"];
                        uint32 local_vc_label = 6 [json_name = "local-vc-label"];
                        uint32 remote_vc_label = 7 [json_name = "remote-vc-label"];
                        enum RemoteControlWord {
                           RemoteControlWord_DEFAULT = 0;
                           RemoteControlWord_DISABLE = 1;
                           RemoteControlWord_ENABLE = 2;
                           RemoteControlWord_PREFER = 3;
                        };
                        RemoteControlWord remote_control_word = 8 [json_name = "remote-control-word"];
                        string tunnel_policy = 9 [json_name = "tunnel-policy"];
                        string last_up_time = 10 [json_name = "last-up-time"];
                        string total_up_time = 11 [json_name = "total-up-time"];
                        uint32 c_key = 12 [json_name = "c-key"];
                        uint32 n_key = 13 [json_name = "n-key"];
                        uint32 spe_count = 14 [json_name = "spe-count"];
                        bool stp_enable = 15 [json_name = "stp-enable"];
                        enum MacFlappingState {
                           MacFlappingState_DEFAULT = 0;
                           MacFlappingState_BLOCKED = 1;
                           MacFlappingState_UNBLOCKED = 2;
                           MacFlappingState_TEMPX_BLOCKED = 3;
                        };
                        MacFlappingState mac_flapping_state = 16 [json_name = "mac-flapping-state"];
                        uint32 pw_index = 17 [json_name = "pw-index"];
                        uint32 remote_group_id = 18 [json_name = "remote-group-id"];
                        uint32 remote_mtu = 19 [json_name = "remote-mtu"];
                        enum RemoteStateCode {
                           RemoteStateCode_FORWARD = 0;
                           RemoteStateCode_STANDBY = 1;
                           RemoteStateCode_ACX_FAULT = 2;
                           RemoteStateCode_PSNX_FAULT = 3;
                           RemoteStateCode_NOTX_FORWARD = 4;
                        };
                        RemoteStateCode remote_state_code = 20 [json_name = "remote-state-code"];
                        enum ReceivedFlowLabel {
                           ReceivedFlowLabel_DEFAULT = 0;
                           ReceivedFlowLabel_SEND = 1;
                           ReceivedFlowLabel_RECEIVE = 2;
                           ReceivedFlowLabel_BOTH = 3;
                           ReceivedFlowLabel_DISABLE = 4;
                        };
                        ReceivedFlowLabel received_flow_label = 21 [json_name = "received-flow-label"];
                        enum NegotiatedFlowLabel {
                           NegotiatedFlowLabel_DEFAULT = 0;
                           NegotiatedFlowLabel_SEND = 1;
                           NegotiatedFlowLabel_RECEIVE = 2;
                           NegotiatedFlowLabel_BOTH = 3;
                           NegotiatedFlowLabel_DISABLE = 4;
                        };
                        NegotiatedFlowLabel negotiated_flow_label = 22 [json_name = "negotiated-flow-label"];
                        string remote_vccv_code = 23 [json_name = "remote-vccv-code"];
                        bool bfd_enable = 24 [json_name = "bfd-enable"];
                        enum BfdState {
                           BfdState_INVALID = 0;
                           BfdState_DOWN = 1;
                           BfdState_UP = 2;
                           BfdState_ADMINX_DOWN = 3;
                           BfdState_REMOTEX_ACX_ERROR = 4;
                           BfdState_REMOTEX_ACX_ERRORX_RESUME = 5;
                        };
                        BfdState bfd_state = 25 [json_name = "bfd-state"];
                        uint32 bfd_session_index = 26 [json_name = "bfd-session-index"];
                        bool dynamic_bfd_session = 27 [json_name = "dynamic-bfd-session"];
                        bool bfd_for_pw = 28 [json_name = "bfd-for-pw"];
                        enum BlockStatus {
                           BlockStatus_DEFAULT = 0;
                           BlockStatus_BLOCKED = 1;
                           BlockStatus_UNBLOCKED = 2;
                           BlockStatus_TEMPX_BLOCKED = 3;
                        };
                        BlockStatus block_status = 29 [json_name = "block-status"];
                        bool pw_token_exceed = 30 [json_name = "pw-token-exceed"];
                        message Tunnels {
                           message Tunnel {
                              string tunnel_key = 1 [json_name = "tunnel-key"];
                              enum TunnelType {
                                 TunnelType_INVALID = 0;
                                 TunnelType_LDP = 1;
                                 TunnelType_BGP = 2;
                                 TunnelType_TE = 3;
                                 TunnelType_STATICX_LSP = 4;
                                 TunnelType_GRE = 5;
                                 TunnelType_UNI = 6;
                                 TunnelType_TNLX_GROUP = 7;
                                 TunnelType_SUBX_TE = 8;
                                 TunnelType_SUBX_GROUP = 9;
                                 TunnelType_X_6OVER4 = 10;
                                 TunnelType_X_6TO4 = 11;
                                 TunnelType_BGPX_LOCALX_IFNET = 12;
                                 TunnelType_LDP6 = 13;
                                 TunnelType_SRBEX_LSP = 41;
                                 TunnelType_SRX_TEX_POLICY = 50;
                                 TunnelType_SRV6X_TEX_POLICY = 52;
                              };
                              TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                              string out_interface = 3 [json_name = "out-interface"];
                              string tunnel_name = 4 [json_name = "tunnel-name"];
                              string public_next_hop = 5 [json_name = "public-next-hop"];
                           }
                           repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                        }
                        Tunnels tunnels = 31 [json_name = "tunnels"];
                        message Spes {
                           message Spe {
                              uint32 spe_pw_id = 1 [json_name = "spe-pw-id"];
                              string spe_peer_ip = 2 [json_name = "spe-peer-ip"];
                           }
                           repeated Spe spe = 1 [json_name = "spe"];
                        }
                        Spes spes = 32 [json_name = "spes"];
                        message LabelStacks {
                           message LabelStack {
                              uint32 label_stack = 1 [json_name = "label-stack"];
                              uint32 level = 2 [json_name = "level"];
                              string type = 3 [json_name = "type"];
                              string label = 4 [json_name = "label"];
                              string out_interface = 5 [json_name = "out-interface"];
                           }
                           repeated LabelStack label_stack = 1 [json_name = "label-stack"];
                        }
                        LabelStacks label_stacks = 33 [json_name = "label-stacks"];
                        message DownCauses {
                           message DownCause {
                              uint32 down_cause_index = 1 [json_name = "down-cause-index"];
                              string down_cause = 2 [json_name = "down-cause"];
                           }
                           repeated DownCause down_cause = 1 [json_name = "down-cause"];
                        }
                        DownCauses down_causes = 34 [json_name = "down-causes"];
                        message StatusChanges {
                           message StatusChange {
                              uint32 index = 1 [json_name = "index"];
                              string timestamp = 2 [json_name = "timestamp"];
                              string reason = 3 [json_name = "reason"];
                           }
                           repeated StatusChange status_change = 1 [json_name = "status-change"];
                        }
                        StatusChanges status_changes = 35 [json_name = "status-changes"];
                     }
                     PwInfo pw_info = 29 [json_name = "pw-info"];
                     message SuppressionStatisticss {
                        message SuppressionStatistics {
                           enum SuppressionType {
                              SuppressionType_BROADCAST = 0;
                              SuppressionType_MULTICAST = 1;
                              SuppressionType_UNKNOWNX_UNICAST = 2;
                           };
                           SuppressionType suppression_type = 1 [json_name = "suppression-type"];
                           uint32 cir = 2 [json_name = "cir"];
                           uint32 pir = 3 [json_name = "pir"];
                           uint32 cbs = 4 [json_name = "cbs"];
                           uint32 pbs = 5 [json_name = "pbs"];
                           uint64 passed_packets = 6 [json_name = "passed-packets"];
                           uint64 passed_bytes = 7 [json_name = "passed-bytes"];
                           uint64 discard_packets = 8 [json_name = "discard-packets"];
                           uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                           uint64 passed_packet_rate = 10 [json_name = "passed-packet-rate"];
                           uint64 passed_bit_rate = 11 [json_name = "passed-bit-rate"];
                           uint64 discard_packet_rate = 12 [json_name = "discard-packet-rate"];
                           uint64 discard_bit_rate = 13 [json_name = "discard-bit-rate"];
                        }
                        repeated SuppressionStatistics suppression_statistics = 1 [json_name = "suppression-statistics"];
                     }
                     SuppressionStatisticss suppression_statisticss = 30 [json_name = "suppression-statisticss"];
                     message TrafficStatistics {
                        uint64 in_traffic_rate = 1 [json_name = "in-traffic-rate"];
                        uint64 out_traffic_rate = 2 [json_name = "out-traffic-rate"];
                        uint64 in_frame_rate = 3 [json_name = "in-frame-rate"];
                        uint64 out_frame_rate = 4 [json_name = "out-frame-rate"];
                        uint64 in_bytes = 5 [json_name = "in-bytes"];
                        uint64 out_bytes = 6 [json_name = "out-bytes"];
                        uint64 in_frames = 7 [json_name = "in-frames"];
                        uint64 out_frames = 8 [json_name = "out-frames"];
                        uint64 in_unicast_frames = 9 [json_name = "in-unicast-frames"];
                        uint64 in_unicast_bytes = 10 [json_name = "in-unicast-bytes"];
                        uint64 in_multicast_frames = 11 [json_name = "in-multicast-frames"];
                        uint64 in_multicast_bytes = 12 [json_name = "in-multicast-bytes"];
                        uint64 in_broadcast_frames = 13 [json_name = "in-broadcast-frames"];
                        uint64 in_broadcast_bytes = 14 [json_name = "in-broadcast-bytes"];
                        uint64 out_unicast_frames = 15 [json_name = "out-unicast-frames"];
                        uint64 out_unicast_bytes = 16 [json_name = "out-unicast-bytes"];
                        uint64 out_multicast_frames = 17 [json_name = "out-multicast-frames"];
                        uint64 out_multicast_bytes = 18 [json_name = "out-multicast-bytes"];
                        uint64 out_broadcast_frames = 19 [json_name = "out-broadcast-frames"];
                        uint64 out_broadcast_bytes = 20 [json_name = "out-broadcast-bytes"];
                        uint64 in_discard_frames = 21 [json_name = "in-discard-frames"];
                        string reset_time = 22 [json_name = "reset-time"];
                     }
                     TrafficStatistics traffic_statistics = 31 [json_name = "traffic-statistics"];
                     message HardPipeTrafficStatistics {
                        string last_clear_time = 1 [json_name = "last-clear-time"];
                        uint64 pass_packets_rate = 2 [json_name = "pass-packets-rate"];
                        uint64 pass_bytes_rate = 3 [json_name = "pass-bytes-rate"];
                        uint64 discard_packets_rate = 4 [json_name = "discard-packets-rate"];
                        uint64 discard_bytes_rate = 5 [json_name = "discard-bytes-rate"];
                        uint64 pass_packets = 6 [json_name = "pass-packets"];
                        uint64 pass_bytes = 7 [json_name = "pass-bytes"];
                        uint64 drop_packets = 8 [json_name = "drop-packets"];
                        uint64 drop_bytes = 9 [json_name = "drop-bytes"];
                     }
                     HardPipeTrafficStatistics hard_pipe_traffic_statistics = 32 [json_name = "hard-pipe-traffic-statistics"];
                     message QosTrafficStatistics {
                        string last_clear_time = 1 [json_name = "last-clear-time"];
                        uint64 bits_rate = 2 [json_name = "bits-rate"];
                        uint64 packets_rate = 3 [json_name = "packets-rate"];
                        uint64 output_bytes = 4 [json_name = "output-bytes"];
                        uint64 output_packets = 5 [json_name = "output-packets"];
                        message QosQuerys {
                           message QosQuery {
                              enum Query {
                                 Query_BE = 0;
                                 Query_AF1 = 1;
                                 Query_AF2 = 2;
                                 Query_AF3 = 3;
                                 Query_AF4 = 4;
                                 Query_EF = 5;
                                 Query_CS6 = 6;
                                 Query_CS7 = 7;
                              };
                              Query query = 1 [json_name = "query"];
                              uint64 packets = 2 [json_name = "packets"];
                              uint64 bytes = 3 [json_name = "bytes"];
                              uint64 packets_rate = 4 [json_name = "packets-rate"];
                              uint64 bits_rate = 5 [json_name = "bits-rate"];
                              uint64 discard_packets = 6 [json_name = "discard-packets"];
                              uint64 discard_bytes = 7 [json_name = "discard-bytes"];
                              uint64 discard_packets_rate = 8 [json_name = "discard-packets-rate"];
                              uint64 discard_bit_rate = 9 [json_name = "discard-bit-rate"];
                           }
                           repeated QosQuery qos_query = 1 [json_name = "qos-query"];
                        }
                        QosQuerys qos_querys = 6 [json_name = "qos-querys"];
                     }
                     QosTrafficStatistics qos_traffic_statistics = 33 [json_name = "qos-traffic-statistics"];
                     message TrackVrrp {
                        string vrrp_interface_name = 1 [json_name = "vrrp-interface-name"];
                        uint32 vrrp_vrid = 2 [json_name = "vrrp-vrid"];
                        bool pw_redundancy = 3 [json_name = "pw-redundancy"];
                        bool backup_block_all = 4 [json_name = "backup-block-all"];
                     }
                     TrackVrrp track_vrrp = 34 [json_name = "track-vrrp"];
                     message Mac {
                        message MacLimit {
                           uint32 maximum = 1 [json_name = "maximum"];
                           uint32 rate = 2 [json_name = "rate"];
                           enum Action {
                              Action_DISCARD = 0;
                              Action_FORWARD = 1;
                           };
                           Action action = 3 [json_name = "action"];
                           enum Alarm {
                              Alarm_DISABLE = 0;
                              Alarm_ENABLE = 1;
                           };
                           Alarm alarm = 4 [json_name = "alarm"];
                        }
                        MacLimit mac_limit = 1 [json_name = "mac-limit"];
                        message Suppressions {
                           message Suppression {
                              enum Type {
                                 Type_BROADCAST = 0;
                                 Type_MULTICAST = 1;
                                 Type_UNKNOWNX_UNICAST = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint64 cir = 2 [json_name = "cir"];
                              uint64 cbs = 3 [json_name = "cbs"];
                           }
                           repeated Suppression suppression = 1 [json_name = "suppression"];
                        }
                        Suppressions suppressions = 2 [json_name = "suppressions"];
                     }
                     Mac mac = 35 [json_name = "mac"];
                     message MacFlapping {
                        message BlockPriority {
                           uint32 priority = 1 [json_name = "priority"];
                        }
                        BlockPriority block_priority = 1 [json_name = "block-priority"];
                     }
                     MacFlapping mac_flapping = 36 [json_name = "mac-flapping"];
                     message MstpProcessAttribute {
                        message Processes {
                           message Process {
                              uint32 process_id = 1 [json_name = "process-id"];
                              uint32 cost = 2 [json_name = "cost"];
                              uint32 priority = 3 [json_name = "priority"];
                           }
                           repeated Process process = 1 [json_name = "process"];
                        }
                        Processes processes = 1 [json_name = "processes"];
                     }
                     MstpProcessAttribute mstp_process_attribute = 37 [json_name = "mstp-process-attribute"];
                     message MonitorGroup {
                        string name = 1 [json_name = "name"];
                     }
                     MonitorGroup monitor_group = 38 [json_name = "monitor-group"];
                     string endpoint = 39 [json_name = "endpoint"];
                     uint32 color = 40 [json_name = "color"];
                  }
                  repeated Pw pw = 1 [json_name = "pw"];
               }
               Pws pws = 12 [json_name = "pws"];
               message RedundancyProtectGroups {
                  message RedundancyProtectGroup {
                     string name = 1 [json_name = "name"];
                     enum ProtectMode {
                        INVALID_ENUM_VALUE_ProtectMode = 0;
                        ProtectMode_INDEPENDENT = 1;
                        ProtectMode_MASTER = 2;
                        ProtectMode_NONE = 3;
                     };
                     ProtectMode protect_mode = 2 [json_name = "protect-mode"];
                     bool dual_receive = 3 [json_name = "dual-receive"];
                     uint32 holdoff = 4 [json_name = "holdoff"];
                     message ReroutePolicy {
                        enum Policy {
                           INVALID_ENUM_VALUE_Policy = 0;
                           Policy_DELAY = 1;
                           Policy_IMMEDIATELY = 2;
                           Policy_NEVER = 3;
                        };
                        Policy policy = 1 [json_name = "policy"];
                        uint32 delay_time = 2 [json_name = "delay-time"];
                        string last_switchback_time = 3 [json_name = "last-switchback-time"];
                        string last_reroute_action = 4 [json_name = "last-reroute-action"];
                        string last_switchback_reason = 5 [json_name = "last-switchback-reason"];
                     }
                     ReroutePolicy reroute_policy = 5 [json_name = "reroute-policy"];
                     message PwMembers {
                        message PwMember {
                           string peer_ip = 1 [json_name = "peer-ip"];
                           uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                           enum EncapsulationType {
                              INVALID_ENUM_VALUE_EncapsulationType = 0;
                              EncapsulationType_VLAN = 4;
                              EncapsulationType_ETHERNET = 5;
                              EncapsulationType_UNSUPPORT = 255;
                           };
                           EncapsulationType encapsulation_type = 3 [json_name = "encapsulation-type"];
                           uint32 preference = 4 [json_name = "preference"];
                           enum Role {
                              INVALID_ENUM_VALUE_Role = 0;
                              Role_PRIMARY = 1;
                              Role_SECONDARY = 2;
                              Role_BYPASS = 3;
                              Role_ACX_BYPASS = 4;
                              Role_PWX_BYPASS = 5;
                           };
                           Role role = 5 [json_name = "role"];
                           bool active_state = 6 [json_name = "active-state"];
                        }
                        repeated PwMember pw_member = 1 [json_name = "pw-member"];
                     }
                     PwMembers pw_members = 6 [json_name = "pw-members"];
                     message Historys {
                        message History {
                           uint32 num = 1 [json_name = "num"];
                           string reroute_time = 2 [json_name = "reroute-time"];
                           string reroute_action = 3 [json_name = "reroute-action"];
                           string reroute_reason = 4 [json_name = "reroute-reason"];
                        }
                        repeated History history = 1 [json_name = "history"];
                     }
                     Historys historys = 7 [json_name = "historys"];
                  }
                  repeated RedundancyProtectGroup redundancy_protect_group = 1 [json_name = "redundancy-protect-group"];
               }
               RedundancyProtectGroups redundancy_protect_groups = 13 [json_name = "redundancy-protect-groups"];
               message TrafficStatistics {
                  string last_cleared = 1 [json_name = "last-cleared"];
                  uint64 in_packets_rate = 2 [json_name = "in-packets-rate"];
                  uint64 out_packets_rate = 3 [json_name = "out-packets-rate"];
                  uint64 in_packets = 4 [json_name = "in-packets"];
                  uint64 out_packets = 5 [json_name = "out-packets"];
                  uint64 in_unicast_packets = 6 [json_name = "in-unicast-packets"];
                  uint64 in_multicast_packets = 7 [json_name = "in-multicast-packets"];
                  uint64 in_drop_packets = 8 [json_name = "in-drop-packets"];
                  uint64 out_unicast_packets = 9 [json_name = "out-unicast-packets"];
                  uint64 out_multicast_packets = 10 [json_name = "out-multicast-packets"];
               }
               TrafficStatistics traffic_statistics = 14 [json_name = "traffic-statistics"];
            }
            LdpSignaling ldp_signaling = 32 [json_name = "ldp-signaling"];
            message BgpSignaling {
               string route_distinguisher = 1 [json_name = "route-distinguisher"];
               bool encapsulation_rfc4761_compatible = 2 [json_name = "encapsulation-rfc4761-compatible"];
               bool encapsulation_vpls_family_compatible = 3 [json_name = "encapsulation-vpls-family-compatible"];
               bool mtu_negotiate_disable = 4 [json_name = "mtu-negotiate-disable"];
               enum ControlWord {
                  ControlWord_DEFAULT = 0;
                  ControlWord_DISABLE = 1;
                  ControlWord_ENABLE = 2;
                  ControlWord_PREFER = 3;
               };
               ControlWord control_word = 5 [json_name = "control-word"];
               string auto_route_distinguisher = 6 [json_name = "auto-route-distinguisher"];
               message Sites {
                  message Site {
                     uint32 site_id = 1 [json_name = "site-id"];
                     uint32 range = 2 [json_name = "range"];
                     uint32 default_offset = 3 [json_name = "default-offset"];
                  }
                  repeated Site site = 1 [json_name = "site"];
               }
               Sites sites = 7 [json_name = "sites"];
               message VpnTargets {
                  message VpnTarget {
                     string rt_value = 1 [json_name = "rt-value"];
                     enum RtType {
                        INVALID_ENUM_VALUE_RtType = 0;
                        RtType_EXPORTX_EXTCOMMUNITY = 2;
                        RtType_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     RtType rt_type = 2 [json_name = "rt-type"];
                  }
                  repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
               }
               VpnTargets vpn_targets = 8 [json_name = "vpn-targets"];
               message FlowLabel {
                  enum Ability {
                     Ability_DEFAULT = 0;
                     Ability_SEND = 1;
                     Ability_RECEIVE = 2;
                     Ability_BOTH = 3;
                     Ability_DISABLE = 4;
                  };
                  Ability ability = 1 [json_name = "ability"];
                  bool static = 2 [json_name = "static"];
               }
               FlowLabel flow_label = 9 [json_name = "flow-label"];
               message Pws {
                  message Pw {
                     string peer_ip = 1 [json_name = "peer-ip"];
                     uint32 remote_site_id = 2 [json_name = "remote-site-id"];
                     string name = 3 [json_name = "name"];
                     message SuppressionStatisticss {
                        message SuppressionStatistics {
                           enum SuppressionType {
                              SuppressionType_BROADCAST = 0;
                              SuppressionType_MULTICAST = 1;
                              SuppressionType_UNKNOWNX_UNICAST = 2;
                           };
                           SuppressionType suppression_type = 1 [json_name = "suppression-type"];
                           uint32 cir = 2 [json_name = "cir"];
                           uint32 pir = 3 [json_name = "pir"];
                           uint32 cbs = 4 [json_name = "cbs"];
                           uint32 pbs = 5 [json_name = "pbs"];
                           uint64 passed_packets = 6 [json_name = "passed-packets"];
                           uint64 passed_bytes = 7 [json_name = "passed-bytes"];
                           uint64 discard_packets = 8 [json_name = "discard-packets"];
                           uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                           uint64 passed_packet_rate = 10 [json_name = "passed-packet-rate"];
                           uint64 passed_bit_rate = 11 [json_name = "passed-bit-rate"];
                           uint64 discard_packet_rate = 12 [json_name = "discard-packet-rate"];
                           uint64 discard_bit_rate = 13 [json_name = "discard-bit-rate"];
                        }
                        repeated SuppressionStatistics suppression_statistics = 1 [json_name = "suppression-statistics"];
                     }
                     SuppressionStatisticss suppression_statisticss = 4 [json_name = "suppression-statisticss"];
                     bool traffic_statistics_collection = 5 [json_name = "traffic-statistics-collection"];
                     message Mac {
                        message Suppressions {
                           message Suppression {
                              enum Type {
                                 Type_BROADCAST = 0;
                                 Type_MULTICAST = 1;
                                 Type_UNKNOWNX_UNICAST = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint64 cir = 2 [json_name = "cir"];
                              uint64 cbs = 3 [json_name = "cbs"];
                           }
                           repeated Suppression suppression = 1 [json_name = "suppression"];
                        }
                        Suppressions suppressions = 1 [json_name = "suppressions"];
                     }
                     Mac mac = 6 [json_name = "mac"];
                  }
                  repeated Pw pw = 1 [json_name = "pw"];
               }
               Pws pws = 10 [json_name = "pws"];
               message LocalLabelBlocks {
                  message LocalLabelBlock {
                     uint32 offset = 1 [json_name = "offset"];
                     uint32 label_start = 2 [json_name = "label-start"];
                     uint32 add_range = 3 [json_name = "add-range"];
                     uint32 site_base = 4 [json_name = "site-base"];
                  }
                  repeated LocalLabelBlock local_label_block = 1 [json_name = "local-label-block"];
               }
               LocalLabelBlocks local_label_blocks = 11 [json_name = "local-label-blocks"];
               message PwInfos {
                  message PwInfo {
                     uint32 site_id = 1 [json_name = "site-id"];
                     uint32 offset = 2 [json_name = "offset"];
                     string peer_ip = 3 [json_name = "peer-ip"];
                     enum PwType {
                        PwType_LABEL = 0;
                        PwType_QINQ = 1;
                        PwType_MEHVPLS = 2;
                     };
                     PwType pw_type = 4 [json_name = "pw-type"];
                     enum PwState {
                        PwState_DOWN = 0;
                        PwState_UP = 1;
                        PwState_BACKUP = 2;
                     };
                     PwState pw_state = 5 [json_name = "pw-state"];
                     uint32 local_vc_label = 6 [json_name = "local-vc-label"];
                     uint32 remote_vc_label = 7 [json_name = "remote-vc-label"];
                     string last_up_time = 8 [json_name = "last-up-time"];
                     string total_up_time = 9 [json_name = "total-up-time"];
                     uint32 c_key = 10 [json_name = "c-key"];
                     uint32 n_key = 11 [json_name = "n-key"];
                     string broadcast_tunnel_key = 12 [json_name = "broadcast-tunnel-key"];
                     bool stp_enable = 13 [json_name = "stp-enable"];
                     enum MacFlappingEnable {
                        MacFlappingEnable_DEFAULT = 0;
                        MacFlappingEnable_BLOCKED = 1;
                        MacFlappingEnable_UNBLOCKED = 2;
                        MacFlappingEnable_TEMPX_BLOCKED = 3;
                     };
                     MacFlappingEnable mac_flapping_enable = 14 [json_name = "mac-flapping-enable"];
                     string main_pw_token = 15 [json_name = "main-pw-token"];
                     string backup_pw_token = 16 [json_name = "backup-pw-token"];
                     enum ReceiveFlowLabel {
                        ReceiveFlowLabel_DEFAULT = 0;
                        ReceiveFlowLabel_SEND = 1;
                        ReceiveFlowLabel_RECEIVE = 2;
                        ReceiveFlowLabel_BOTH = 3;
                        ReceiveFlowLabel_DISABLE = 4;
                     };
                     ReceiveFlowLabel receive_flow_label = 17 [json_name = "receive-flow-label"];
                     enum NegotiateFlowLabel {
                        NegotiateFlowLabel_DEFAULT = 0;
                        NegotiateFlowLabel_SEND = 1;
                        NegotiateFlowLabel_RECEIVE = 2;
                        NegotiateFlowLabel_BOTH = 3;
                        NegotiateFlowLabel_DISABLE = 4;
                     };
                     NegotiateFlowLabel negotiate_flow_label = 18 [json_name = "negotiate-flow-label"];
                     enum RemoteControlWord {
                        RemoteControlWord_DEFAULT = 0;
                        RemoteControlWord_DISABLE = 1;
                        RemoteControlWord_ENABLE = 2;
                        RemoteControlWord_PREFER = 3;
                     };
                     RemoteControlWord remote_control_word = 19 [json_name = "remote-control-word"];
                     enum NegotiateControlWord {
                        NegotiateControlWord_DEFAULT = 0;
                        NegotiateControlWord_DISABLE = 1;
                        NegotiateControlWord_ENABLE = 2;
                        NegotiateControlWord_PREFER = 3;
                     };
                     NegotiateControlWord negotiate_control_word = 20 [json_name = "negotiate-control-word"];
                     message Tunnels {
                        message Tunnel {
                           string tunnel_key = 1 [json_name = "tunnel-key"];
                           enum TunnelType {
                              TunnelType_INVALID = 0;
                              TunnelType_LDP = 1;
                              TunnelType_BGP = 2;
                              TunnelType_TE = 3;
                              TunnelType_STATICX_LSP = 4;
                              TunnelType_GRE = 5;
                              TunnelType_UNI = 6;
                              TunnelType_TNLX_GROUP = 7;
                              TunnelType_SUBX_TE = 8;
                              TunnelType_SUBX_GROUP = 9;
                              TunnelType_X_6OVER4 = 10;
                              TunnelType_X_6TO4 = 11;
                              TunnelType_BGPX_LOCALX_IFNET = 12;
                              TunnelType_LDP6 = 13;
                              TunnelType_SRBEX_LSP = 41;
                              TunnelType_SRX_TEX_POLICY = 50;
                              TunnelType_SRV6X_TEX_POLICY = 52;
                           };
                           TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                           string out_interface = 3 [json_name = "out-interface"];
                           string tunnel_name = 4 [json_name = "tunnel-name"];
                           string public_next_hop = 5 [json_name = "public-next-hop"];
                        }
                        repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                     }
                     Tunnels tunnels = 21 [json_name = "tunnels"];
                     message TrafficStatistics {
                        uint64 in_traffic_rate = 1 [json_name = "in-traffic-rate"];
                        uint64 out_traffic_rate = 2 [json_name = "out-traffic-rate"];
                        uint64 in_frame_rate = 3 [json_name = "in-frame-rate"];
                        uint64 out_frame_rate = 4 [json_name = "out-frame-rate"];
                        uint64 in_bytes = 5 [json_name = "in-bytes"];
                        uint64 out_bytes = 6 [json_name = "out-bytes"];
                        uint64 in_frames = 7 [json_name = "in-frames"];
                        uint64 out_frames = 8 [json_name = "out-frames"];
                        uint64 in_unicast_frames = 9 [json_name = "in-unicast-frames"];
                        uint64 in_unicast_bytes = 10 [json_name = "in-unicast-bytes"];
                        uint64 in_multicast_frames = 11 [json_name = "in-multicast-frames"];
                        uint64 in_multicast_bytes = 12 [json_name = "in-multicast-bytes"];
                        uint64 in_broadcast_frames = 13 [json_name = "in-broadcast-frames"];
                        uint64 in_broadcast_bytes = 14 [json_name = "in-broadcast-bytes"];
                        uint64 out_unicast_frames = 15 [json_name = "out-unicast-frames"];
                        uint64 out_unicast_bytes = 16 [json_name = "out-unicast-bytes"];
                        uint64 out_multicast_frames = 17 [json_name = "out-multicast-frames"];
                        uint64 out_multicast_bytes = 18 [json_name = "out-multicast-bytes"];
                        uint64 out_broadcast_frames = 19 [json_name = "out-broadcast-frames"];
                        uint64 out_broadcast_bytes = 20 [json_name = "out-broadcast-bytes"];
                        uint64 in_discard_frames = 21 [json_name = "in-discard-frames"];
                        string reset_time = 22 [json_name = "reset-time"];
                     }
                     TrafficStatistics traffic_statistics = 22 [json_name = "traffic-statistics"];
                  }
                  repeated PwInfo pw_info = 1 [json_name = "pw-info"];
               }
               PwInfos pw_infos = 12 [json_name = "pw-infos"];
               message RemoteLabelBlocks {
                  message RemoteLabelBlock {
                     string route_distinguisher = 1 [json_name = "route-distinguisher"];
                     uint32 site_id = 2 [json_name = "site-id"];
                     uint32 offset = 3 [json_name = "offset"];
                     uint32 label_start = 4 [json_name = "label-start"];
                     uint32 add_range = 5 [json_name = "add-range"];
                  }
                  repeated RemoteLabelBlock remote_label_block = 1 [json_name = "remote-label-block"];
               }
               RemoteLabelBlocks remote_label_blocks = 13 [json_name = "remote-label-blocks"];
            }
            BgpSignaling bgp_signaling = 33 [json_name = "bgp-signaling"];
            message BgpMultiHomingSignaling {
               string route_distinguisher = 1 [json_name = "route-distinguisher"];
               bool encapsulation_rfc4761_compatible = 2 [json_name = "encapsulation-rfc4761-compatible"];
               bool encapsulation_vpls_family_compatible = 3 [json_name = "encapsulation-vpls-family-compatible"];
               bool mtu_negotiate_disable = 4 [json_name = "mtu-negotiate-disable"];
               uint32 site_range = 5 [json_name = "site-range"];
               uint32 default_offset = 6 [json_name = "default-offset"];
               enum ControlWord {
                  ControlWord_DEFAULT = 0;
                  ControlWord_DISABLE = 1;
                  ControlWord_ENABLE = 2;
                  ControlWord_PREFER = 3;
               };
               ControlWord control_word = 7 [json_name = "control-word"];
               string auto_route_distinguisher = 8 [json_name = "auto-route-distinguisher"];
               message DefaultSite {
                  string name = 1 [json_name = "name"];
                  uint32 site_id = 2 [json_name = "site-id"];
                  uint32 preference = 3 [json_name = "preference"];
                  bool selected = 4 [json_name = "selected"];
                  message RemoteSites {
                     message RemoteSite {
                        uint32 remote_site_id = 1 [json_name = "remote-site-id"];
                        string peer_ip = 2 [json_name = "peer-ip"];
                     }
                     repeated RemoteSite remote_site = 1 [json_name = "remote-site"];
                  }
                  RemoteSites remote_sites = 5 [json_name = "remote-sites"];
               }
               DefaultSite default_site = 9 [json_name = "default-site"];
               message Sites {
                  message Site {
                     string name = 1 [json_name = "name"];
                     uint32 site_id = 2 [json_name = "site-id"];
                     uint32 preference = 3 [json_name = "preference"];
                     uint32 active_delay_time = 4 [json_name = "active-delay-time"];
                     uint32 recover_delay_time = 5 [json_name = "recover-delay-time"];
                     bool best_site = 6 [json_name = "best-site"];
                     bool selected = 7 [json_name = "selected"];
                     message RemoteSites {
                        message RemoteSite {
                           uint32 remote_site_id = 1 [json_name = "remote-site-id"];
                           string peer_ip = 2 [json_name = "peer-ip"];
                        }
                        repeated RemoteSite remote_site = 1 [json_name = "remote-site"];
                     }
                     RemoteSites remote_sites = 8 [json_name = "remote-sites"];
                     message AcInfos {
                        message AcInfo {
                           string interface_name = 1 [json_name = "interface-name"];
                           enum AcState {
                              AcState_DOWN = 0;
                              AcState_UP = 1;
                              AcState_PLUGX_OUT = 2;
                              AcState_NOTIFYX_DOWN = 3;
                              AcState_DOWNX_NOTIFY = 4;
                           };
                           AcState ac_state = 2 [json_name = "ac-state"];
                           enum MflpState {
                              MflpState_UNBLOCKED = 0;
                              MflpState_BLOCKED = 1;
                           };
                           MflpState mflp_state = 3 [json_name = "mflp-state"];
                           enum BlockState {
                              BlockState_UNBLOCKED = 0;
                              BlockState_BLOCKED = 1;
                           };
                           BlockState block_state = 4 [json_name = "block-state"];
                        }
                        repeated AcInfo ac_info = 1 [json_name = "ac-info"];
                     }
                     AcInfos ac_infos = 9 [json_name = "ac-infos"];
                  }
                  repeated Site site = 1 [json_name = "site"];
               }
               Sites sites = 10 [json_name = "sites"];
               message VpnTargets {
                  message VpnTarget {
                     string rt_value = 1 [json_name = "rt-value"];
                     enum RtType {
                        INVALID_ENUM_VALUE_RtType = 0;
                        RtType_EXPORTX_EXTCOMMUNITY = 2;
                        RtType_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     RtType rt_type = 2 [json_name = "rt-type"];
                  }
                  repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
               }
               VpnTargets vpn_targets = 11 [json_name = "vpn-targets"];
               message PwInfos {
                  message PwInfo {
                     uint32 site_id = 1 [json_name = "site-id"];
                     uint32 offset = 2 [json_name = "offset"];
                     string peer_ip = 3 [json_name = "peer-ip"];
                     enum PwType {
                        PwType_LABEL = 0;
                        PwType_QINQ = 1;
                        PwType_MEHVPLS = 2;
                     };
                     PwType pw_type = 4 [json_name = "pw-type"];
                     enum PwState {
                        PwState_DOWN = 0;
                        PwState_UP = 1;
                        PwState_BACKUP = 2;
                     };
                     PwState pw_state = 5 [json_name = "pw-state"];
                     uint32 local_vc_label = 6 [json_name = "local-vc-label"];
                     uint32 remote_vc_label = 7 [json_name = "remote-vc-label"];
                     string last_up_time = 8 [json_name = "last-up-time"];
                     string total_up_time = 9 [json_name = "total-up-time"];
                     uint32 c_key = 10 [json_name = "c-key"];
                     uint32 n_key = 11 [json_name = "n-key"];
                     string broadcast_tunnel_key = 12 [json_name = "broadcast-tunnel-key"];
                     bool stp_enable = 13 [json_name = "stp-enable"];
                     enum MacFlappingEnable {
                        MacFlappingEnable_DEFAULT = 0;
                        MacFlappingEnable_BLOCKED = 1;
                        MacFlappingEnable_UNBLOCKED = 2;
                        MacFlappingEnable_TEMPX_BLOCKED = 3;
                     };
                     MacFlappingEnable mac_flapping_enable = 14 [json_name = "mac-flapping-enable"];
                     string main_pw_token = 15 [json_name = "main-pw-token"];
                     string backup_pw_token = 16 [json_name = "backup-pw-token"];
                     enum RemoteControlWord {
                        RemoteControlWord_DEFAULT = 0;
                        RemoteControlWord_DISABLE = 1;
                        RemoteControlWord_ENABLE = 2;
                        RemoteControlWord_PREFER = 3;
                     };
                     RemoteControlWord remote_control_word = 17 [json_name = "remote-control-word"];
                     enum NegotiateControlWord {
                        NegotiateControlWord_DEFAULT = 0;
                        NegotiateControlWord_DISABLE = 1;
                        NegotiateControlWord_ENABLE = 2;
                        NegotiateControlWord_PREFER = 3;
                     };
                     NegotiateControlWord negotiate_control_word = 18 [json_name = "negotiate-control-word"];
                     message Tunnels {
                        message Tunnel {
                           string tunnel_key = 1 [json_name = "tunnel-key"];
                           enum TunnelType {
                              TunnelType_INVALID = 0;
                              TunnelType_LDP = 1;
                              TunnelType_BGP = 2;
                              TunnelType_TE = 3;
                              TunnelType_STATICX_LSP = 4;
                              TunnelType_GRE = 5;
                              TunnelType_UNI = 6;
                              TunnelType_TNLX_GROUP = 7;
                              TunnelType_SUBX_TE = 8;
                              TunnelType_SUBX_GROUP = 9;
                              TunnelType_X_6OVER4 = 10;
                              TunnelType_X_6TO4 = 11;
                              TunnelType_BGPX_LOCALX_IFNET = 12;
                              TunnelType_LDP6 = 13;
                              TunnelType_SRBEX_LSP = 41;
                              TunnelType_SRX_TEX_POLICY = 50;
                              TunnelType_SRV6X_TEX_POLICY = 52;
                           };
                           TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                           string out_interface = 3 [json_name = "out-interface"];
                           string tunnel_name = 4 [json_name = "tunnel-name"];
                           string public_next_hop = 5 [json_name = "public-next-hop"];
                        }
                        repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                     }
                     Tunnels tunnels = 19 [json_name = "tunnels"];
                     message TrafficStatistics {
                        uint64 in_traffic_rate = 1 [json_name = "in-traffic-rate"];
                        uint64 out_traffic_rate = 2 [json_name = "out-traffic-rate"];
                        uint64 in_frame_rate = 3 [json_name = "in-frame-rate"];
                        uint64 out_frame_rate = 4 [json_name = "out-frame-rate"];
                        uint64 in_bytes = 5 [json_name = "in-bytes"];
                        uint64 out_bytes = 6 [json_name = "out-bytes"];
                        uint64 in_frames = 7 [json_name = "in-frames"];
                        uint64 out_frames = 8 [json_name = "out-frames"];
                        uint64 in_unicast_frames = 9 [json_name = "in-unicast-frames"];
                        uint64 in_unicast_bytes = 10 [json_name = "in-unicast-bytes"];
                        uint64 in_multicast_frames = 11 [json_name = "in-multicast-frames"];
                        uint64 in_multicast_bytes = 12 [json_name = "in-multicast-bytes"];
                        uint64 in_broadcast_frames = 13 [json_name = "in-broadcast-frames"];
                        uint64 in_broadcast_bytes = 14 [json_name = "in-broadcast-bytes"];
                        uint64 out_unicast_frames = 15 [json_name = "out-unicast-frames"];
                        uint64 out_unicast_bytes = 16 [json_name = "out-unicast-bytes"];
                        uint64 out_multicast_frames = 17 [json_name = "out-multicast-frames"];
                        uint64 out_multicast_bytes = 18 [json_name = "out-multicast-bytes"];
                        uint64 out_broadcast_frames = 19 [json_name = "out-broadcast-frames"];
                        uint64 out_broadcast_bytes = 20 [json_name = "out-broadcast-bytes"];
                        uint64 in_discard_frames = 21 [json_name = "in-discard-frames"];
                        string reset_time = 22 [json_name = "reset-time"];
                     }
                     TrafficStatistics traffic_statistics = 20 [json_name = "traffic-statistics"];
                  }
                  repeated PwInfo pw_info = 1 [json_name = "pw-info"];
               }
               PwInfos pw_infos = 12 [json_name = "pw-infos"];
               message Pws {
                  message Pw {
                     string peer_ip = 1 [json_name = "peer-ip"];
                     string name = 2 [json_name = "name"];
                     bool traffic_statistics_collection = 3 [json_name = "traffic-statistics-collection"];
                     message SuppressionStatisticss {
                        message SuppressionStatistics {
                           enum SuppressionType {
                              SuppressionType_BROADCAST = 0;
                              SuppressionType_MULTICAST = 1;
                              SuppressionType_UNKNOWNX_UNICAST = 2;
                           };
                           SuppressionType suppression_type = 1 [json_name = "suppression-type"];
                           uint32 cir = 2 [json_name = "cir"];
                           uint32 pir = 3 [json_name = "pir"];
                           uint32 cbs = 4 [json_name = "cbs"];
                           uint32 pbs = 5 [json_name = "pbs"];
                           uint64 passed_packets = 6 [json_name = "passed-packets"];
                           uint64 passed_bytes = 7 [json_name = "passed-bytes"];
                           uint64 discard_packets = 8 [json_name = "discard-packets"];
                           uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                           uint64 passed_packet_rate = 10 [json_name = "passed-packet-rate"];
                           uint64 passed_bit_rate = 11 [json_name = "passed-bit-rate"];
                           uint64 discard_packet_rate = 12 [json_name = "discard-packet-rate"];
                           uint64 discard_bit_rate = 13 [json_name = "discard-bit-rate"];
                        }
                        repeated SuppressionStatistics suppression_statistics = 1 [json_name = "suppression-statistics"];
                     }
                     SuppressionStatisticss suppression_statisticss = 4 [json_name = "suppression-statisticss"];
                     message Mac {
                        message Suppressions {
                           message Suppression {
                              enum Type {
                                 Type_BROADCAST = 0;
                                 Type_MULTICAST = 1;
                                 Type_UNKNOWNX_UNICAST = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint64 cir = 2 [json_name = "cir"];
                              uint64 cbs = 3 [json_name = "cbs"];
                           }
                           repeated Suppression suppression = 1 [json_name = "suppression"];
                        }
                        Suppressions suppressions = 1 [json_name = "suppressions"];
                     }
                     Mac mac = 5 [json_name = "mac"];
                  }
                  repeated Pw pw = 1 [json_name = "pw"];
               }
               Pws pws = 13 [json_name = "pws"];
               message LocalLabelBlocks {
                  message LocalLabelBlock {
                     uint32 offset = 1 [json_name = "offset"];
                     uint32 label_start = 2 [json_name = "label-start"];
                     uint32 add_range = 3 [json_name = "add-range"];
                     uint32 site_base = 4 [json_name = "site-base"];
                  }
                  repeated LocalLabelBlock local_label_block = 1 [json_name = "local-label-block"];
               }
               LocalLabelBlocks local_label_blocks = 14 [json_name = "local-label-blocks"];
               message RemoteSites {
                  message RemoteSite {
                     uint32 site_id = 1 [json_name = "site-id"];
                     string route_distinguisher = 2 [json_name = "route-distinguisher"];
                     uint32 offset = 3 [json_name = "offset"];
                     string peer_ip = 4 [json_name = "peer-ip"];
                     uint32 mtu = 5 [json_name = "mtu"];
                     enum EncapsulationType {
                        INVALID_ENUM_VALUE_EncapsulationType = 0;
                        EncapsulationType_VPLS = 19;
                     };
                     EncapsulationType encapsulation_type = 6 [json_name = "encapsulation-type"];
                     uint32 label_start = 7 [json_name = "label-start"];
                     uint32 add_range = 8 [json_name = "add-range"];
                  }
                  repeated RemoteSite remote_site = 1 [json_name = "remote-site"];
               }
               RemoteSites remote_sites = 15 [json_name = "remote-sites"];
            }
            BgpMultiHomingSignaling bgp_multi_homing_signaling = 34 [json_name = "bgp-multi-homing-signaling"];
            message BgpadSignaling {
               string vpls_id = 1 [json_name = "vpls-id"];
               enum SplitHorizon {
                  INVALID_ENUM_VALUE_SplitHorizon = 0;
                  SplitHorizon_SPOKE = 1;
                  SplitHorizon_HUB = 2;
               };
               SplitHorizon split_horizon = 2 [json_name = "split-horizon"];
               bool traffic_statistics_collection = 3 [json_name = "traffic-statistics-collection"];
               string route_distinguisher = 4 [json_name = "route-distinguisher"];
               string vsi_id = 5 [json_name = "vsi-id"];
               message VpnTargets {
                  message VpnTarget {
                     string rt_value = 1 [json_name = "rt-value"];
                     enum RtType {
                        INVALID_ENUM_VALUE_RtType = 0;
                        RtType_EXPORTX_EXTCOMMUNITY = 2;
                        RtType_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     RtType rt_type = 2 [json_name = "rt-type"];
                  }
                  repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
               }
               VpnTargets vpn_targets = 6 [json_name = "vpn-targets"];
               message Pws {
                  message Pw {
                     string peer_ip = 1 [json_name = "peer-ip"];
                     string name = 2 [json_name = "name"];
                     bool traffic_statistics_collection = 3 [json_name = "traffic-statistics-collection"];
                     message SuppressionStatisticss {
                        message SuppressionStatistics {
                           enum SuppressionType {
                              SuppressionType_BROADCAST = 0;
                              SuppressionType_MULTICAST = 1;
                              SuppressionType_UNKNOWNX_UNICAST = 2;
                           };
                           SuppressionType suppression_type = 1 [json_name = "suppression-type"];
                           uint32 cir = 2 [json_name = "cir"];
                           uint32 pir = 3 [json_name = "pir"];
                           uint32 cbs = 4 [json_name = "cbs"];
                           uint32 pbs = 5 [json_name = "pbs"];
                           uint64 passed_packets = 6 [json_name = "passed-packets"];
                           uint64 passed_bytes = 7 [json_name = "passed-bytes"];
                           uint64 discard_packets = 8 [json_name = "discard-packets"];
                           uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                           uint64 passed_packet_rate = 10 [json_name = "passed-packet-rate"];
                           uint64 passed_bit_rate = 11 [json_name = "passed-bit-rate"];
                           uint64 discard_packet_rate = 12 [json_name = "discard-packet-rate"];
                           uint64 discard_bit_rate = 13 [json_name = "discard-bit-rate"];
                        }
                        repeated SuppressionStatistics suppression_statistics = 1 [json_name = "suppression-statistics"];
                     }
                     SuppressionStatisticss suppression_statisticss = 4 [json_name = "suppression-statisticss"];
                     message Mac {
                        message Suppressions {
                           message Suppression {
                              enum Type {
                                 Type_BROADCAST = 0;
                                 Type_MULTICAST = 1;
                                 Type_UNKNOWNX_UNICAST = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint64 cir = 2 [json_name = "cir"];
                              uint64 cbs = 3 [json_name = "cbs"];
                           }
                           repeated Suppression suppression = 1 [json_name = "suppression"];
                        }
                        Suppressions suppressions = 1 [json_name = "suppressions"];
                     }
                     Mac mac = 5 [json_name = "mac"];
                     message MonitorGroup {
                        string name = 1 [json_name = "name"];
                     }
                     MonitorGroup monitor_group = 6 [json_name = "monitor-group"];
                  }
                  repeated Pw pw = 1 [json_name = "pw"];
               }
               Pws pws = 7 [json_name = "pws"];
               message Peers {
                  message Peer {
                     string peer_router_id = 1 [json_name = "peer-router-id"];
                     string vpls_id = 2 [json_name = "vpls-id"];
                     string saii = 3 [json_name = "saii"];
                     string taii = 4 [json_name = "taii"];
                     enum PeerType {
                        PeerType_STATIC = 0;
                        PeerType_DYNAMIC = 1;
                     };
                     PeerType peer_type = 5 [json_name = "peer-type"];
                     message PwInfo {
                        string peer_ip = 1 [json_name = "peer-ip"];
                        enum PwType {
                           PwType_LABEL = 0;
                           PwType_QINQ = 1;
                           PwType_MEHVPLS = 2;
                        };
                        PwType pw_type = 2 [json_name = "pw-type"];
                        enum SessionState {
                           SessionState_DEFAULT = 0;
                           SessionState_DOWN = 1;
                           SessionState_UP = 2;
                        };
                        SessionState session_state = 3 [json_name = "session-state"];
                        enum PwState {
                           PwState_DOWN = 0;
                           PwState_UP = 1;
                           PwState_BACKUP = 2;
                        };
                        PwState pw_state = 4 [json_name = "pw-state"];
                        uint32 local_vc_label = 5 [json_name = "local-vc-label"];
                        uint32 remote_vc_label = 6 [json_name = "remote-vc-label"];
                        string last_up_time = 7 [json_name = "last-up-time"];
                        string total_up_time = 8 [json_name = "total-up-time"];
                        uint32 c_key = 9 [json_name = "c-key"];
                        uint32 n_key = 10 [json_name = "n-key"];
                        string broadcast_tunnel_key = 11 [json_name = "broadcast-tunnel-key"];
                        bool stp_enable = 12 [json_name = "stp-enable"];
                        enum MacFlappingEnable {
                           MacFlappingEnable_DEFAULT = 0;
                           MacFlappingEnable_BLOCKED = 1;
                           MacFlappingEnable_UNBLOCKED = 2;
                           MacFlappingEnable_TEMPX_BLOCKED = 3;
                        };
                        MacFlappingEnable mac_flapping_enable = 13 [json_name = "mac-flapping-enable"];
                        string main_pw_token = 14 [json_name = "main-pw-token"];
                        string backup_pw_token = 15 [json_name = "backup-pw-token"];
                        string remote_vccv_code = 16 [json_name = "remote-vccv-code"];
                        bool pw_token_exceed = 17 [json_name = "pw-token-exceed"];
                        message Tunnels {
                           message Tunnel {
                              string tunnel_key = 1 [json_name = "tunnel-key"];
                              enum TunnelType {
                                 TunnelType_INVALID = 0;
                                 TunnelType_LDP = 1;
                                 TunnelType_BGP = 2;
                                 TunnelType_TE = 3;
                                 TunnelType_STATICX_LSP = 4;
                                 TunnelType_GRE = 5;
                                 TunnelType_UNI = 6;
                                 TunnelType_TNLX_GROUP = 7;
                                 TunnelType_SUBX_TE = 8;
                                 TunnelType_SUBX_GROUP = 9;
                                 TunnelType_X_6OVER4 = 10;
                                 TunnelType_X_6TO4 = 11;
                                 TunnelType_BGPX_LOCALX_IFNET = 12;
                                 TunnelType_LDP6 = 13;
                                 TunnelType_SRBEX_LSP = 41;
                                 TunnelType_SRX_TEX_POLICY = 50;
                                 TunnelType_SRV6X_TEX_POLICY = 52;
                              };
                              TunnelType tunnel_type = 2 [json_name = "tunnel-type"];
                              string out_interface = 3 [json_name = "out-interface"];
                              string tunnel_name = 4 [json_name = "tunnel-name"];
                              string public_next_hop = 5 [json_name = "public-next-hop"];
                           }
                           repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                        }
                        Tunnels tunnels = 18 [json_name = "tunnels"];
                     }
                     PwInfo pw_info = 6 [json_name = "pw-info"];
                     message TrafficStatistics {
                        uint64 in_traffic_rate = 1 [json_name = "in-traffic-rate"];
                        uint64 out_traffic_rate = 2 [json_name = "out-traffic-rate"];
                        uint64 in_frame_rate = 3 [json_name = "in-frame-rate"];
                        uint64 out_frame_rate = 4 [json_name = "out-frame-rate"];
                        uint64 in_bytes = 5 [json_name = "in-bytes"];
                        uint64 out_bytes = 6 [json_name = "out-bytes"];
                        uint64 in_frames = 7 [json_name = "in-frames"];
                        uint64 out_frames = 8 [json_name = "out-frames"];
                        uint64 in_unicast_frames = 9 [json_name = "in-unicast-frames"];
                        uint64 in_unicast_bytes = 10 [json_name = "in-unicast-bytes"];
                        uint64 in_multicast_frames = 11 [json_name = "in-multicast-frames"];
                        uint64 in_multicast_bytes = 12 [json_name = "in-multicast-bytes"];
                        uint64 in_broadcast_frames = 13 [json_name = "in-broadcast-frames"];
                        uint64 in_broadcast_bytes = 14 [json_name = "in-broadcast-bytes"];
                        uint64 out_unicast_frames = 15 [json_name = "out-unicast-frames"];
                        uint64 out_unicast_bytes = 16 [json_name = "out-unicast-bytes"];
                        uint64 out_multicast_frames = 17 [json_name = "out-multicast-frames"];
                        uint64 out_multicast_bytes = 18 [json_name = "out-multicast-bytes"];
                        uint64 out_broadcast_frames = 19 [json_name = "out-broadcast-frames"];
                        uint64 out_broadcast_bytes = 20 [json_name = "out-broadcast-bytes"];
                        uint64 in_discard_frames = 21 [json_name = "in-discard-frames"];
                        string reset_time = 22 [json_name = "reset-time"];
                     }
                     TrafficStatistics traffic_statistics = 7 [json_name = "traffic-statistics"];
                  }
                  repeated Peer peer = 1 [json_name = "peer"];
               }
               Peers peers = 8 [json_name = "peers"];
            }
            BgpadSignaling bgpad_signaling = 35 [json_name = "bgpad-signaling"];
            message Acs {
               message Ac {
                  string interface_name = 1 [json_name = "interface-name"];
                  string site_name = 2 [json_name = "site-name"];
                  bool hub_mode = 3 [json_name = "hub-mode"];
                  bool access_port = 4 [json_name = "access-port"];
                  enum State {
                     State_DOWN = 0;
                     State_UP = 1;
                     State_PLUGX_OUT = 2;
                     State_NOTIFYX_DOWN = 3;
                     State_DOWNX_NOTIFY = 4;
                  };
                  State state = 5 [json_name = "state"];
                  enum BlockState {
                     BlockState_UNBLOCKED = 0;
                     BlockState_BLOCKED = 1;
                  };
                  BlockState block_state = 6 [json_name = "block-state"];
                  string last_up_time = 7 [json_name = "last-up-time"];
                  string total_up_time = 8 [json_name = "total-up-time"];
                  bool token_exceed = 9 [json_name = "token-exceed"];
                  enum OamState {
                     OamState_DOWN = 0;
                     OamState_UP = 1;
                     OamState_INVALID = 2;
                  };
                  OamState oam_state = 10 [json_name = "oam-state"];
                  message IgmpSnooping {
                     message LimitMaxEntry {
                        uint32 config_entry = 1 [json_name = "config-entry"];
                        string except_acl = 2 [json_name = "except-acl"];
                        uint32 current_entry = 3 [json_name = "current-entry"];
                     }
                     LimitMaxEntry limit_max_entry = 1 [json_name = "limit-max-entry"];
                     message StaticRouterPort {
                     }
                     StaticRouterPort static_router_port = 2 [json_name = "static-router-port"];
                     message ProxyUplinkPort {
                        uint32 pe_vid = 1 [json_name = "pe-vid"];
                        uint32 ce_vid = 2 [json_name = "ce-vid"];
                     }
                     ProxyUplinkPort proxy_uplink_port = 3 [json_name = "proxy-uplink-port"];
                     message ProxyUplinkDot1QPort {
                        message Vlans {
                           message Vlan {
                              uint32 vlan_id = 1 [json_name = "vlan-id"];
                           }
                           repeated Vlan vlan = 1 [json_name = "vlan"];
                        }
                        Vlans vlans = 1 [json_name = "vlans"];
                     }
                     ProxyUplinkDot1QPort proxy_uplink_dot1q_port = 4 [json_name = "proxy-uplink-dot1q-port"];
                     message ProxyUplinkQinqPort {
                        message Vlans {
                           message Vlan {
                              uint32 pe_vid = 1 [json_name = "pe-vid"];
                              uint32 ce_vid = 2 [json_name = "ce-vid"];
                           }
                           repeated Vlan vlan = 1 [json_name = "vlan"];
                        }
                        Vlans vlans = 1 [json_name = "vlans"];
                     }
                     ProxyUplinkQinqPort proxy_uplink_qinq_port = 5 [json_name = "proxy-uplink-qinq-port"];
                     message StaticGroups {
                        message StaticGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                        }
                        repeated StaticGroup static_group = 1 [json_name = "static-group"];
                     }
                     StaticGroups static_groups = 6 [json_name = "static-groups"];
                     message StaticDot1QGroups {
                        message StaticDot1QGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           uint32 vlan_id = 3 [json_name = "vlan-id"];
                        }
                        repeated StaticDot1QGroup static_dot1q_group = 1 [json_name = "static-dot1q-group"];
                     }
                     StaticDot1QGroups static_dot1q_groups = 7 [json_name = "static-dot1q-groups"];
                     message StaticQinqGroups {
                        message StaticQinqGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           message Vlans {
                              message Vlan {
                                 uint32 pe_vid = 1 [json_name = "pe-vid"];
                                 uint32 ce_vid = 2 [json_name = "ce-vid"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 3 [json_name = "vlans"];
                           uint32 pe_vid = 4 [json_name = "pe-vid"];
                           uint32 ce_vid = 5 [json_name = "ce-vid"];
                        }
                        repeated StaticQinqGroup static_qinq_group = 1 [json_name = "static-qinq-group"];
                     }
                     StaticQinqGroups static_qinq_groups = 8 [json_name = "static-qinq-groups"];
                     message BackupReportForward {
                     }
                     BackupReportForward backup_report_forward = 9 [json_name = "backup-report-forward"];
                     message GroupPolicy {
                        string acl = 1 [json_name = "acl"];
                        uint32 version = 2 [json_name = "version"];
                     }
                     GroupPolicy group_policy = 10 [json_name = "group-policy"];
                     message Dot1QGroupPolicys {
                        message Dot1QGroupPolicy {
                           string acl = 1 [json_name = "acl"];
                           uint32 version = 2 [json_name = "version"];
                           string dot1q_vlan_range = 3 [json_name = "dot1q-vlan-range"];
                        }
                        repeated Dot1QGroupPolicy dot1q_group_policy = 1 [json_name = "dot1q-group-policy"];
                     }
                     Dot1QGroupPolicys dot1q_group_policys = 11 [json_name = "dot1q-group-policys"];
                     message QinqGroupPolicys {
                        message QinqGroupPolicy {
                           string acl = 1 [json_name = "acl"];
                           uint32 version = 2 [json_name = "version"];
                           message Vlans {
                              message Vlan {
                                 uint32 pe_vid = 1 [json_name = "pe-vid"];
                                 string ce_vid_range = 2 [json_name = "ce-vid-range"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 3 [json_name = "vlans"];
                        }
                        repeated QinqGroupPolicy qinq_group_policy = 1 [json_name = "qinq-group-policy"];
                     }
                     QinqGroupPolicys qinq_group_policys = 12 [json_name = "qinq-group-policys"];
                     message LimitBandwidths {
                        message LimitBandwidth {
                           uint32 bandwidth = 1 [json_name = "bandwidth"];
                           string config_vlans = 2 [json_name = "config-vlans"];
                           message Vlans {
                              message Vlan {
                                 uint32 vlan_id = 1 [json_name = "vlan-id"];
                                 uint32 current_bandwidth = 2 [json_name = "current-bandwidth"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 3 [json_name = "vlans"];
                        }
                        repeated LimitBandwidth limit_bandwidth = 1 [json_name = "limit-bandwidth"];
                     }
                     LimitBandwidths limit_bandwidths = 13 [json_name = "limit-bandwidths"];
                     message LimitChannelBandwidths {
                        message LimitChannelBandwidth {
                           string channel_name = 1 [json_name = "channel-name"];
                           uint32 bandwidth = 2 [json_name = "bandwidth"];
                           string config_vlans = 3 [json_name = "config-vlans"];
                           message Vlans {
                              message Vlan {
                                 uint32 vlan_id = 1 [json_name = "vlan-id"];
                                 uint32 current_bandwidth = 2 [json_name = "current-bandwidth"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 4 [json_name = "vlans"];
                        }
                        repeated LimitChannelBandwidth limit_channel_bandwidth = 1 [json_name = "limit-channel-bandwidth"];
                     }
                     LimitChannelBandwidths limit_channel_bandwidths = 14 [json_name = "limit-channel-bandwidths"];
                     message LimitPerTrunkMemberBandwidths {
                        message LimitPerTrunkMemberBandwidth {
                           uint32 bandwidth = 1 [json_name = "bandwidth"];
                           string config_vlans = 2 [json_name = "config-vlans"];
                        }
                        repeated LimitPerTrunkMemberBandwidth limit_per_trunk_member_bandwidth = 1 [json_name = "limit-per-trunk-member-bandwidth"];
                     }
                     LimitPerTrunkMemberBandwidths limit_per_trunk_member_bandwidths = 15 [json_name = "limit-per-trunk-member-bandwidths"];
                     message DynamicTrunkBandwidthLoseMode {
                     }
                     DynamicTrunkBandwidthLoseMode dynamic_trunk_bandwidth_lose_mode = 16 [json_name = "dynamic-trunk-bandwidth-lose-mode"];
                     message ReportListening {
                        enum CopyMode {
                           CopyMode_INVALID = 0;
                           CopyMode_BYX_VLAN = 1;
                           CopyMode_BYX_UNICASTX_MAC = 2;
                        };
                        CopyMode copy_mode = 1 [json_name = "copy-mode"];
                     }
                     ReportListening report_listening = 17 [json_name = "report-listening"];
                  }
                  IgmpSnooping igmp_snooping = 11 [json_name = "igmp-snooping"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                           ProtocolType_LLDP = 2;
                           ProtocolType_BPDU = 4;
                           ProtocolType_CDP = 5;
                           ProtocolType_UDLD = 6;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                           Action_DISCARD = 2;
                           Action_TRANSPORT = 3;
                           Action_TRANSPORTX_TAGGED = 4;
                        };
                        Action action = 2 [json_name = "action"];
                        enum Mode {
                           Mode_NORMAL = 0;
                           Mode_UNTAG = 1;
                           Mode_UNTAGX_VLANX_CHECK = 2;
                        };
                        Mode mode = 3 [json_name = "mode"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 12 [json_name = "protocol-actions"];
                  message VplsAcSuppression {
                     string time = 1 [json_name = "time"];
                     bool unicast_in_flag = 2 [json_name = "unicast-in-flag"];
                     uint64 unicast_in_pass_packets = 3 [json_name = "unicast-in-pass-packets"];
                     uint64 unicast_in_pass_bytes = 4 [json_name = "unicast-in-pass-bytes"];
                     uint64 unicast_in_drop_packets = 5 [json_name = "unicast-in-drop-packets"];
                     uint64 unicast_in_drop_bytes = 6 [json_name = "unicast-in-drop-bytes"];
                     bool unicast_out_flag = 7 [json_name = "unicast-out-flag"];
                     uint64 unicast_out_pass_packets = 8 [json_name = "unicast-out-pass-packets"];
                     uint64 unicast_out_pass_bytes = 9 [json_name = "unicast-out-pass-bytes"];
                     uint64 unicast_out_drop_packets = 10 [json_name = "unicast-out-drop-packets"];
                     uint64 unicast_out_drop_bytes = 11 [json_name = "unicast-out-drop-bytes"];
                     bool multicast_in_flag = 12 [json_name = "multicast-in-flag"];
                     uint64 multicast_in_pass_packets = 13 [json_name = "multicast-in-pass-packets"];
                     uint64 multicast_in_pass_bytes = 14 [json_name = "multicast-in-pass-bytes"];
                     uint64 multicast_in_drop_packets = 15 [json_name = "multicast-in-drop-packets"];
                     uint64 multicast_in_drop_bytes = 16 [json_name = "multicast-in-drop-bytes"];
                     bool multicast_out_flag = 17 [json_name = "multicast-out-flag"];
                     uint64 multicast_out_pass_packets = 18 [json_name = "multicast-out-pass-packets"];
                     uint64 multicast_out_pass_bytes = 19 [json_name = "multicast-out-pass-bytes"];
                     uint64 multicast_out_drop_packets = 20 [json_name = "multicast-out-drop-packets"];
                     uint64 multicast_out_drop_bytes = 21 [json_name = "multicast-out-drop-bytes"];
                     bool broadcast_in_flag = 22 [json_name = "broadcast-in-flag"];
                     uint64 broadcast_in_pass_packets = 23 [json_name = "broadcast-in-pass-packets"];
                     uint64 broadcast_in_pass_bytes = 24 [json_name = "broadcast-in-pass-bytes"];
                     uint64 broadcast_in_drop_packets = 25 [json_name = "broadcast-in-drop-packets"];
                     uint64 broadcast_in_drop_bytes = 26 [json_name = "broadcast-in-drop-bytes"];
                     bool broadcast_out_flag = 27 [json_name = "broadcast-out-flag"];
                     uint64 broadcast_out_pass_packets = 28 [json_name = "broadcast-out-pass-packets"];
                     uint64 broadcast_out_pass_bytes = 29 [json_name = "broadcast-out-pass-bytes"];
                     uint64 broadcast_out_drop_packets = 30 [json_name = "broadcast-out-drop-packets"];
                     uint64 broadcast_out_drop_bytes = 31 [json_name = "broadcast-out-drop-bytes"];
                  }
                  VplsAcSuppression vpls_ac_suppression = 13 [json_name = "vpls-ac-suppression"];
                  bool etree_leaf = 14 [json_name = "etree-leaf"];
                  message AcOamMapping {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_DEFAULT = 1;
                        Type_X_1AG = 2;
                        Type_X_3AH = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     string md_name = 2 [json_name = "md-name"];
                     string ma_name = 3 [json_name = "ma-name"];
                  }
                  AcOamMapping ac_oam_mapping = 15 [json_name = "ac-oam-mapping"];
                  message MldSnooping {
                     message StaticRouterPort {
                     }
                     StaticRouterPort static_router_port = 1 [json_name = "static-router-port"];
                     message ProxyUplinkPort {
                     }
                     ProxyUplinkPort proxy_uplink_port = 2 [json_name = "proxy-uplink-port"];
                     message StaticGroups {
                        message StaticGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                        }
                        repeated StaticGroup static_group = 1 [json_name = "static-group"];
                     }
                     StaticGroups static_groups = 3 [json_name = "static-groups"];
                     message StaticDot1QGroups {
                        message StaticDot1QGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           uint32 vlan_id = 3 [json_name = "vlan-id"];
                        }
                        repeated StaticDot1QGroup static_dot1q_group = 1 [json_name = "static-dot1q-group"];
                     }
                     StaticDot1QGroups static_dot1q_groups = 4 [json_name = "static-dot1q-groups"];
                     message StaticQinqGroups {
                        message StaticQinqGroup {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           message Vlans {
                              message Vlan {
                                 uint32 pe_vid = 1 [json_name = "pe-vid"];
                                 uint32 ce_vid = 2 [json_name = "ce-vid"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 3 [json_name = "vlans"];
                           uint32 pe_vid = 4 [json_name = "pe-vid"];
                           uint32 ce_vid = 5 [json_name = "ce-vid"];
                        }
                        repeated StaticQinqGroup static_qinq_group = 1 [json_name = "static-qinq-group"];
                     }
                     StaticQinqGroups static_qinq_groups = 5 [json_name = "static-qinq-groups"];
                     message GroupPolicy {
                        string acl = 1 [json_name = "acl"];
                        uint32 version = 2 [json_name = "version"];
                     }
                     GroupPolicy group_policy = 6 [json_name = "group-policy"];
                     message Dot1QGroupPolicys {
                        message Dot1QGroupPolicy {
                           string acl = 1 [json_name = "acl"];
                           uint32 version = 2 [json_name = "version"];
                           string dot1q_vlan_range = 3 [json_name = "dot1q-vlan-range"];
                        }
                        repeated Dot1QGroupPolicy dot1q_group_policy = 1 [json_name = "dot1q-group-policy"];
                     }
                     Dot1QGroupPolicys dot1q_group_policys = 7 [json_name = "dot1q-group-policys"];
                     message QinqGroupPolicys {
                        message QinqGroupPolicy {
                           string acl = 1 [json_name = "acl"];
                           uint32 version = 2 [json_name = "version"];
                           message Vlans {
                              message Vlan {
                                 uint32 pe_vid = 1 [json_name = "pe-vid"];
                                 string ce_vid_range = 2 [json_name = "ce-vid-range"];
                              }
                              repeated Vlan vlan = 1 [json_name = "vlan"];
                           }
                           Vlans vlans = 3 [json_name = "vlans"];
                        }
                        repeated QinqGroupPolicy qinq_group_policy = 1 [json_name = "qinq-group-policy"];
                     }
                     QinqGroupPolicys qinq_group_policys = 8 [json_name = "qinq-group-policys"];
                  }
                  MldSnooping mld_snooping = 16 [json_name = "mld-snooping"];
               }
               repeated Ac ac = 1 [json_name = "ac"];
            }
            Acs acs = 36 [json_name = "acs"];
            message Bds {
               message Bd {
                  uint32 id = 1 [json_name = "id"];
                  uint32 pw_tag = 2 [json_name = "pw-tag"];
                  enum State {
                     State_DOWN = 0;
                     State_UP = 1;
                     State_PLUGX_OUT = 2;
                     State_NOTIFYX_DOWN = 3;
                     State_DOWNX_NOTIFY = 4;
                  };
                  State state = 3 [json_name = "state"];
                  string last_up_time = 4 [json_name = "last-up-time"];
                  string total_up_time = 5 [json_name = "total-up-time"];
               }
               repeated Bd bd = 1 [json_name = "bd"];
            }
            Bds bds = 37 [json_name = "bds"];
            message Ipmsi {
               message Root {
                  bool data_switch_disable = 1 [json_name = "data-switch-disable"];
                  enum McTunnelType {
                     McTunnelType_INVALID = 0;
                     McTunnelType_MLDPX_P2MP = 1;
                     McTunnelType_TEX_P2MP = 3;
                  };
                  McTunnelType mc_tunnel_type = 2 [json_name = "mc-tunnel-type"];
                  string root_ip = 3 [json_name = "root-ip"];
                  bool te_p2mp_dynamic = 4 [json_name = "te-p2mp-dynamic"];
                  string p2mp_template_name = 5 [json_name = "p2mp-template-name"];
                  string bfd_track_if_name = 6 [json_name = "bfd-track-if-name"];
                  uint32 leaf_count = 7 [json_name = "leaf-count"];
                  message Tunnel {
                     string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                     enum State {
                        State_DEFAULT = 0;
                        State_DOWN = 1;
                        State_UP = 2;
                     };
                     State state = 2 [json_name = "state"];
                     uint32 session_id = 3 [json_name = "session-id"];
                     string p2mp_id = 4 [json_name = "p2mp-id"];
                     string opaque_value = 5 [json_name = "opaque-value"];
                  }
                  Tunnel tunnel = 8 [json_name = "tunnel"];
                  message Leafs {
                     message Leaf {
                        string peer_ip = 1 [json_name = "peer-ip"];
                     }
                     repeated Leaf leaf = 1 [json_name = "leaf"];
                  }
                  Leafs leafs = 9 [json_name = "leafs"];
               }
               Root root = 1 [json_name = "root"];
               message Leaf {
                  message PwProtectGroups {
                     message PwProtectGroup {
                        string primary_root_ip = 1 [json_name = "primary-root-ip"];
                        string backup_root_ip = 2 [json_name = "backup-root-ip"];
                        uint32 wtr = 3 [json_name = "wtr"];
                        bool primary_track_bfd = 4 [json_name = "primary-track-bfd"];
                        bool backup_track_bfd = 5 [json_name = "backup-track-bfd"];
                        message Primary {
                           bool valid = 1 [json_name = "valid"];
                           enum ActiveState {
                              ActiveState_DEFAULT = 0;
                              ActiveState_INACTIVE = 1;
                              ActiveState_ACTIVE = 2;
                           };
                           ActiveState active_state = 2 [json_name = "active-state"];
                           enum OamProtocol {
                              OamProtocol_NONE = 0;
                              OamProtocol_STATICX_BFD = 1;
                              OamProtocol_BFD = 2;
                              OamProtocol_MPLSX_OAM = 3;
                              OamProtocol_TPX_OAM = 4;
                           };
                           OamProtocol oam_protocol = 3 [json_name = "oam-protocol"];
                           enum OamState {
                              OamState_DOWN = 0;
                              OamState_UP = 1;
                              OamState_INVALID = 2;
                           };
                           OamState oam_state = 4 [json_name = "oam-state"];
                        }
                        Primary primary = 6 [json_name = "primary"];
                        message Backup {
                           bool valid = 1 [json_name = "valid"];
                           enum ActiveState {
                              ActiveState_DEFAULT = 0;
                              ActiveState_INACTIVE = 1;
                              ActiveState_ACTIVE = 2;
                           };
                           ActiveState active_state = 2 [json_name = "active-state"];
                           enum OamProtocol {
                              OamProtocol_NONE = 0;
                              OamProtocol_STATICX_BFD = 1;
                              OamProtocol_BFD = 2;
                              OamProtocol_MPLSX_OAM = 3;
                              OamProtocol_TPX_OAM = 4;
                           };
                           OamProtocol oam_protocol = 3 [json_name = "oam-protocol"];
                           enum OamState {
                              OamState_DOWN = 0;
                              OamState_UP = 1;
                              OamState_INVALID = 2;
                           };
                           OamState oam_state = 4 [json_name = "oam-state"];
                        }
                        Backup backup = 7 [json_name = "backup"];
                     }
                     repeated PwProtectGroup pw_protect_group = 1 [json_name = "pw-protect-group"];
                  }
                  PwProtectGroups pw_protect_groups = 1 [json_name = "pw-protect-groups"];
                  message MplsP2MpSlot {
                     string slotid = 1 [json_name = "slotid"];
                  }
                  MplsP2MpSlot mpls_p2mp_slot = 2 [json_name = "mpls-p2mp-slot"];
                  uint64 egress_count = 3 [json_name = "egress-count"];
                  message MldpP2MpTunnels {
                     message MldpP2MpTunnel {
                        string root_ip = 1 [json_name = "root-ip"];
                        string opaque_value = 2 [json_name = "opaque-value"];
                        enum State {
                           State_DEFAULT = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 3 [json_name = "state"];
                     }
                     repeated MldpP2MpTunnel mldp_p2mp_tunnel = 1 [json_name = "mldp-p2mp-tunnel"];
                  }
                  MldpP2MpTunnels mldp_p2mp_tunnels = 4 [json_name = "mldp-p2mp-tunnels"];
                  message TeP2MpTunnels {
                     message TeP2MpTunnel {
                        string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                        uint32 session_id = 2 [json_name = "session-id"];
                        string p2mp_id = 3 [json_name = "p2mp-id"];
                        enum State {
                           State_DEFAULT = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 4 [json_name = "state"];
                     }
                     repeated TeP2MpTunnel te_p2mp_tunnel = 1 [json_name = "te-p2mp-tunnel"];
                  }
                  TeP2MpTunnels te_p2mp_tunnels = 5 [json_name = "te-p2mp-tunnels"];
               }
               Leaf leaf = 2 [json_name = "leaf"];
            }
            Ipmsi ipmsi = 38 [json_name = "ipmsi"];
            message IgmpSnooping {
               message Global {
                  uint32 version = 1 [json_name = "version"];
                  bool ssm_mapping_enable = 2 [json_name = "ssm-mapping-enable"];
                  bool enable = 3 [json_name = "enable"];
                  uint32 max_response_time = 4 [json_name = "max-response-time"];
                  bool immediately_leave = 5 [json_name = "immediately-leave"];
                  bool proxy_enable = 6 [json_name = "proxy-enable"];
                  enum MulticastGroupModel {
                     INVALID_ENUM_VALUE_MulticastGroupModel = 0;
                     MulticastGroupModel_ASMX_SSM = 1;
                     MulticastGroupModel_ASMX_ONLY = 2;
                     MulticastGroupModel_SSMX_ONLY = 3;
                  };
                  MulticastGroupModel multicast_group_model = 7 [json_name = "multicast-group-model"];
                  bool querier_election = 8 [json_name = "querier-election"];
                  bool proxy_router_protocol_pass = 9 [json_name = "proxy-router-protocol-pass"];
                  bool querier_enable = 10 [json_name = "querier-enable"];
                  uint32 query_interval = 11 [json_name = "query-interval"];
                  bool require_router_alert = 12 [json_name = "require-router-alert"];
                  bool send_router_alert = 13 [json_name = "send-router-alert"];
                  uint32 robustness = 14 [json_name = "robustness"];
                  uint32 router_aging_time = 15 [json_name = "router-aging-time"];
                  bool router_port_learning = 16 [json_name = "router-port-learning"];
                  uint32 last_member_query_interval = 17 [json_name = "last-member-query-interval"];
                  bool static_group_suppress_dynamic_join = 18 [json_name = "static-group-suppress-dynamic-join"];
                  bool report_suppress = 19 [json_name = "report-suppress"];
                  uint32 source_life_time = 20 [json_name = "source-life-time"];
                  uint32 limit_max_entry = 21 [json_name = "limit-max-entry"];
                  bool backup_query_forward = 22 [json_name = "backup-query-forward"];
                  bool backup_query_source_mac_replace = 23 [json_name = "backup-query-source-mac-replace"];
                  bool backup_report_forward = 24 [json_name = "backup-report-forward"];
                  bool backup_report_source_mac_replace = 25 [json_name = "backup-report-source-mac-replace"];
                  bool dynamic_trunk_bandwidth_lose_mode = 26 [json_name = "dynamic-trunk-bandwidth-lose-mode"];
                  bool pim_forward_to_router_port_only = 27 [json_name = "pim-forward-to-router-port-only"];
                  bool qinq_stacking_listen = 28 [json_name = "qinq-stacking-listen"];
                  enum QinqStackingCopyMode {
                     QinqStackingCopyMode_INVALID = 0;
                     QinqStackingCopyMode_BYX_VLAN = 1;
                     QinqStackingCopyMode_BYX_UNICASTX_MAC = 2;
                  };
                  QinqStackingCopyMode qinq_stacking_copy_mode = 29 [json_name = "qinq-stacking-copy-mode"];
                  bool qinq_mapping_listen = 30 [json_name = "qinq-mapping-listen"];
                  enum QinqMappingCopyMode {
                     QinqMappingCopyMode_INVALID = 0;
                     QinqMappingCopyMode_BYX_VLAN = 1;
                     QinqMappingCopyMode_BYX_UNICASTX_MAC = 2;
                  };
                  QinqMappingCopyMode qinq_mapping_copy_mode = 31 [json_name = "qinq-mapping-copy-mode"];
                  uint32 user_info_delete_delay_time = 32 [json_name = "user-info-delete-delay-time"];
                  bool pw_fast_control = 33 [json_name = "pw-fast-control"];
                  bool packet_encapsulation_raw = 34 [json_name = "packet-encapsulation-raw"];
                  string ssm_policy_acl = 35 [json_name = "ssm-policy-acl"];
                  string ssm_mapping_policy = 36 [json_name = "ssm-mapping-policy"];
                  string group_policy_acl = 37 [json_name = "group-policy-acl"];
                  uint32 group_policy_version = 38 [json_name = "group-policy-version"];
                  string immediately_leave_acl = 39 [json_name = "immediately-leave-acl"];
                  string ip_policy_acl = 40 [json_name = "ip-policy-acl"];
                  string query_ip_policy_acl = 41 [json_name = "query-ip-policy-acl"];
                  string limit_except_acl = 42 [json_name = "limit-except-acl"];
                  uint32 pw_fast_control_holdtime = 43 [json_name = "pw-fast-control-holdtime"];
                  uint32 query_suppress_time = 44 [json_name = "query-suppress-time"];
                  message Status {
                     uint32 current_entry_count = 1 [json_name = "current-entry-count"];
                     string querier_address = 2 [json_name = "querier-address"];
                  }
                  Status status = 45 [json_name = "status"];
               }
               Global global = 1 [json_name = "global"];
               message StaticRouterPort {
                  message LdpPws {
                     message LdpPw {
                        string remote_peer = 1 [json_name = "remote-peer"];
                        uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                     }
                     repeated LdpPw ldp_pw = 1 [json_name = "ldp-pw"];
                  }
                  LdpPws ldp_pws = 1 [json_name = "ldp-pws"];
                  message BgpAdPws {
                     repeated string remoter_peer = 1 [json_name = "remoter-peer"];
                  }
                  BgpAdPws bgp_ad_pws = 2 [json_name = "bgp-ad-pws"];
               }
               StaticRouterPort static_router_port = 2 [json_name = "static-router-port"];
               message TransparentVlan {
               }
               TransparentVlan transparent_vlan = 3 [json_name = "transparent-vlan"];
               message ProxyUplinkPort {
                  message LdpPws {
                     message LdpPw {
                        string remote_peer = 1 [json_name = "remote-peer"];
                        uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                     }
                     repeated LdpPw ldp_pw = 1 [json_name = "ldp-pw"];
                  }
                  LdpPws ldp_pws = 1 [json_name = "ldp-pws"];
                  message BgpAdPws {
                     repeated string remoter_peer = 1 [json_name = "remoter-peer"];
                  }
                  BgpAdPws bgp_ad_pws = 2 [json_name = "bgp-ad-pws"];
               }
               ProxyUplinkPort proxy_uplink_port = 4 [json_name = "proxy-uplink-port"];
               message StaticGroups {
                  message StaticGroup {
                     string group_address = 1 [json_name = "group-address"];
                     string source_address = 2 [json_name = "source-address"];
                     string remote_peer = 3 [json_name = "remote-peer"];
                     uint32 negotiation_vc_id = 4 [json_name = "negotiation-vc-id"];
                  }
                  repeated StaticGroup static_group = 1 [json_name = "static-group"];
               }
               StaticGroups static_groups = 5 [json_name = "static-groups"];
               message PwLimitMaxEntrys {
                  message PwLimitMaxEntry {
                     enum PwType {
                        PwType_INVALID = 0;
                        PwType_VLAN = 4;
                        PwType_ETHERNET = 5;
                     };
                     PwType pw_type = 1 [json_name = "pw-type"];
                     uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                     string remote_peer = 3 [json_name = "remote-peer"];
                     uint32 limit_max_entry = 4 [json_name = "limit-max-entry"];
                     string except_acl = 5 [json_name = "except-acl"];
                     uint32 current_entry = 6 [json_name = "current-entry"];
                  }
                  repeated PwLimitMaxEntry pw_limit_max_entry = 1 [json_name = "pw-limit-max-entry"];
               }
               PwLimitMaxEntrys pw_limit_max_entrys = 6 [json_name = "pw-limit-max-entrys"];
               message FastChannels {
                  message FastChannel {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                     uint32 source_mask_length = 4 [json_name = "source-mask-length"];
                  }
                  repeated FastChannel fast_channel = 1 [json_name = "fast-channel"];
               }
               FastChannels fast_channels = 7 [json_name = "fast-channels"];
               message SsmMappingGroups {
                  message SsmMappingGroup {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
               }
               SsmMappingGroups ssm_mapping_groups = 8 [json_name = "ssm-mapping-groups"];
               message ChannelVsi {
                  bool unspecified_channel_deny = 1 [json_name = "unspecified-channel-deny"];
                  message Channels {
                     message Channel {
                        string channel_name = 1 [json_name = "channel-name"];
                        enum ChannelMode {
                           INVALID_ENUM_VALUE_ChannelMode = 0;
                           ChannelMode_ASM = 1;
                           ChannelMode_SSM = 2;
                        };
                        ChannelMode channel_mode = 2 [json_name = "channel-mode"];
                        message Groups {
                           message Group {
                              string group_address = 1 [json_name = "group-address"];
                              uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                              string source_address = 3 [json_name = "source-address"];
                              uint32 source_mask_length = 4 [json_name = "source-mask-length"];
                              uint32 per_bandwidth = 5 [json_name = "per-bandwidth"];
                           }
                           repeated Group group = 1 [json_name = "group"];
                        }
                        Groups groups = 3 [json_name = "groups"];
                     }
                     repeated Channel channel = 1 [json_name = "channel"];
                  }
                  Channels channels = 2 [json_name = "channels"];
               }
               ChannelVsi channel_vsi = 9 [json_name = "channel-vsi"];
               message RouterPorts {
                  message RouterPort {
                     string port_name = 1 [json_name = "port-name"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     string remote_peer = 5 [json_name = "remote-peer"];
                     uint32 vc_or_site_id = 6 [json_name = "vc-or-site-id"];
                     enum Pwsignal {
                        INVALID_ENUM_VALUE_Pwsignal = 0;
                        Pwsignal_BGPAD = 1;
                        Pwsignal_LDP = 2;
                     };
                     Pwsignal pwsignal = 7 [json_name = "pwsignal"];
                     uint32 up_time = 8 [json_name = "up-time"];
                     uint32 expire_time = 9 [json_name = "expire-time"];
                     uint32 port_number = 10 [json_name = "port-number"];
                     enum Flag {
                        INVALID_ENUM_VALUE_Flag = 0;
                        Flag_STATIC = 1;
                        Flag_DYNAMIC = 2;
                        Flag_STATICX_DYNAMIC = 3;
                        Flag_MAPPING = 4;
                        Flag_STATICX_MAPPING = 5;
                        Flag_DYNAMICX_MAPPING = 6;
                        Flag_STATICX_DYNAMICX_MAPPING = 7;
                     };
                     Flag flag = 11 [json_name = "flag"];
                  }
                  repeated RouterPort router_port = 1 [json_name = "router-port"];
               }
               RouterPorts router_ports = 10 [json_name = "router-ports"];
               message AcPorts {
                  message AcPort {
                     string interface = 1 [json_name = "interface"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           enum GroupTimer {
                              GroupTimer_NOTX_EXIST = 0;
                              GroupTimer_EXIST = 1;
                           };
                           GroupTimer group_timer = 4 [json_name = "group-timer"];
                           uint32 retran_count = 5 [json_name = "retran-count"];
                           bool last_member_query = 6 [json_name = "last-member-query"];
                           enum FilterMode {
                              FilterMode_EXCLUDE = 0;
                              FilterMode_INCLUDE = 1;
                              FilterMode_INVALID = 2;
                           };
                           FilterMode filter_mode = 7 [json_name = "filter-mode"];
                           enum CompatMode {
                              INVALID_ENUM_VALUE_CompatMode = 0;
                              CompatMode_V1 = 1;
                              CompatMode_V2 = 2;
                              CompatMode_V3 = 3;
                              CompatMode_INVALID = 255;
                           };
                           CompatMode compat_mode = 8 [json_name = "compat-mode"];
                           enum V1HostTimer {
                              V1HostTimer_NOTX_EXIST = 0;
                              V1HostTimer_EXIST = 1;
                           };
                           V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                           enum V2HostTimer {
                              V2HostTimer_NOTX_EXIST = 0;
                              V2HostTimer_EXIST = 1;
                           };
                           V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                           bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                           enum LastMemberQueryTimer {
                              LastMemberQueryTimer_NOTX_EXIST = 0;
                              LastMemberQueryTimer_EXIST = 1;
                           };
                           LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                           message Sources {
                              message Source {
                                 string source_address = 1 [json_name = "source-address"];
                                 uint32 up_time = 2 [json_name = "up-time"];
                                 uint32 expire_time = 3 [json_name = "expire-time"];
                                 enum SourceTimer {
                                    SourceTimer_NOTX_EXIST = 0;
                                    SourceTimer_EXIST = 1;
                                 };
                                 SourceTimer source_timer = 4 [json_name = "source-timer"];
                                 uint32 retran_count = 5 [json_name = "retran-count"];
                                 bool last_member_query = 6 [json_name = "last-member-query"];
                              }
                              repeated Source source = 1 [json_name = "source"];
                           }
                           Sources sources = 13 [json_name = "sources"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 5 [json_name = "groups"];
                  }
                  repeated AcPort ac_port = 1 [json_name = "ac-port"];
               }
               AcPorts ac_ports = 11 [json_name = "ac-ports"];
               message GroupPorts {
                  message GroupPort {
                     string group_address = 1 [json_name = "group-address"];
                     string source_address = 2 [json_name = "source-address"];
                     uint32 source_up_time = 3 [json_name = "source-up-time"];
                     uint32 group_up_time = 4 [json_name = "group-up-time"];
                     enum EntryFlag {
                        EntryFlag_NONE = 0;
                        EntryFlag_PROTOCOL = 1;
                        EntryFlag_ACTIVE = 2;
                        EntryFlag_PROTOCOLX_ACTIVE = 3;
                        EntryFlag_FASTCHANNEL = 4;
                        EntryFlag_PROTOCOLX_FASTCHANNEL = 5;
                        EntryFlag_ACTIVEX_FASTCHANNEL = 6;
                        EntryFlag_PROTOCOLX_ACTIVEX_FASTCHANNEL = 7;
                     };
                     EntryFlag entry_flag = 5 [json_name = "entry-flag"];
                     enum SourceFlag {
                        SourceFlag_UNKNOWN = 0;
                        SourceFlag_IGMP = 1;
                        SourceFlag_ACTIVE = 2;
                        SourceFlag_IGMPX_ACTIVE = 3;
                        SourceFlag_FASTCHANNEL = 4;
                        SourceFlag_IGMPX_FASTCHANNEL = 5;
                        SourceFlag_ACTIVEX_FASTCHANNEL = 6;
                        SourceFlag_IGMPX_ACTIVEX_FASTCHANNEL = 7;
                        SourceFlag_MLD = 9;
                        SourceFlag_ACTIVE6 = 10;
                        SourceFlag_MLDX_ACTIVE6 = 11;
                        SourceFlag_FASTCHANNEL6 = 12;
                        SourceFlag_MLDX_FASTCHANNEL6 = 13;
                        SourceFlag_ACTIVE6X_FASTCHANNEL6 = 14;
                        SourceFlag_MLDX_ACTIVE6X_FASTCHANNEL6 = 15;
                        SourceFlag_TRILL = 16;
                        SourceFlag_IGMPX_TRILL = 17;
                        SourceFlag_ACTIVEX_TRILL = 18;
                        SourceFlag_IGMPX_ACTIVEX_TRILL = 19;
                     };
                     SourceFlag source_flag = 6 [json_name = "source-flag"];
                     message Ports {
                        message Port {
                           string port_name = 1 [json_name = "port-name"];
                           enum PortType {
                              INVALID_ENUM_VALUE_PortType = 0;
                              PortType_INVALID = 1;
                              PortType_PWX_INTERFACE = 2;
                              PortType_L2X_INTERFACE = 3;
                              PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                              PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                              PortType_INTERFACEX_BOARD = 6;
                              PortType_VLANIFX_PORT = 7;
                              PortType_VXLANX_TUNNEL = 8;
                              PortType_STACKINGX_PORT = 9;
                              PortType_MAPPINGX_PORT = 10;
                              PortType_STACKINGX_MACX_PORT = 11;
                              PortType_MAPPINGX_MACX_PORT = 12;
                           };
                           PortType port_type = 2 [json_name = "port-type"];
                           uint32 pe_vid = 3 [json_name = "pe-vid"];
                           uint32 ce_vid = 4 [json_name = "ce-vid"];
                           string remote_peer = 5 [json_name = "remote-peer"];
                           uint32 vc_or_site_id = 6 [json_name = "vc-or-site-id"];
                           enum Pwsignal {
                              INVALID_ENUM_VALUE_Pwsignal = 0;
                              Pwsignal_BGPAD = 1;
                              Pwsignal_LDP = 2;
                           };
                           Pwsignal pwsignal = 7 [json_name = "pwsignal"];
                           string mac = 8 [json_name = "mac"];
                           uint32 up_time = 9 [json_name = "up-time"];
                           uint32 expire_time = 10 [json_name = "expire-time"];
                           enum PortFlag {
                              INVALID_ENUM_VALUE_PortFlag = 0;
                              PortFlag_STATIC = 1;
                              PortFlag_DYNAMIC = 2;
                              PortFlag_STATICX_DYNAMIC = 3;
                              PortFlag_MAPPING = 4;
                              PortFlag_STATICX_MAPPING = 5;
                              PortFlag_DYNAMICX_MAPPING = 6;
                              PortFlag_STATICX_DYNAMICX_MAPPING = 7;
                           };
                           PortFlag port_flag = 11 [json_name = "port-flag"];
                        }
                        repeated Port port = 1 [json_name = "port"];
                     }
                     Ports ports = 7 [json_name = "ports"];
                  }
                  repeated GroupPort group_port = 1 [json_name = "group-port"];
               }
               GroupPorts group_ports = 12 [json_name = "group-ports"];
               message PwGroups {
                  message PwGroup {
                     string remote_peer = 1 [json_name = "remote-peer"];
                     uint32 vc_or_site_id = 2 [json_name = "vc-or-site-id"];
                     enum Pwsignal {
                        INVALID_ENUM_VALUE_Pwsignal = 0;
                        Pwsignal_BGPAD = 1;
                        Pwsignal_LDP = 2;
                     };
                     Pwsignal pwsignal = 3 [json_name = "pwsignal"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           enum GroupTimer {
                              GroupTimer_NOTX_EXIST = 0;
                              GroupTimer_EXIST = 1;
                           };
                           GroupTimer group_timer = 4 [json_name = "group-timer"];
                           uint32 retran_count = 5 [json_name = "retran-count"];
                           bool last_member_query = 6 [json_name = "last-member-query"];
                           enum FilterMode {
                              FilterMode_EXCLUDE = 0;
                              FilterMode_INCLUDE = 1;
                              FilterMode_INVALID = 2;
                           };
                           FilterMode filter_mode = 7 [json_name = "filter-mode"];
                           enum CompatMode {
                              INVALID_ENUM_VALUE_CompatMode = 0;
                              CompatMode_V1 = 1;
                              CompatMode_V2 = 2;
                              CompatMode_V3 = 3;
                              CompatMode_INVALID = 255;
                           };
                           CompatMode compat_mode = 8 [json_name = "compat-mode"];
                           enum V1HostTimer {
                              V1HostTimer_NOTX_EXIST = 0;
                              V1HostTimer_EXIST = 1;
                           };
                           V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                           enum V2HostTimer {
                              V2HostTimer_NOTX_EXIST = 0;
                              V2HostTimer_EXIST = 1;
                           };
                           V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                           bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                           enum LastMemberQueryTimer {
                              LastMemberQueryTimer_NOTX_EXIST = 0;
                              LastMemberQueryTimer_EXIST = 1;
                           };
                           LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                           message Sources {
                              message Source {
                                 string source_address = 1 [json_name = "source-address"];
                                 uint32 up_time = 2 [json_name = "up-time"];
                                 uint32 expire_time = 3 [json_name = "expire-time"];
                                 enum SourceTimer {
                                    SourceTimer_NOTX_EXIST = 0;
                                    SourceTimer_EXIST = 1;
                                 };
                                 SourceTimer source_timer = 4 [json_name = "source-timer"];
                                 uint32 retran_count = 5 [json_name = "retran-count"];
                                 bool last_member_query = 6 [json_name = "last-member-query"];
                              }
                              repeated Source source = 1 [json_name = "source"];
                           }
                           Sources sources = 13 [json_name = "sources"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 4 [json_name = "groups"];
                  }
                  repeated PwGroup pw_group = 1 [json_name = "pw-group"];
               }
               PwGroups pw_groups = 13 [json_name = "pw-groups"];
               message AcListeningPorts {
                  message AcListeningPort {
                     string interface = 1 [json_name = "interface"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     string mac_address = 5 [json_name = "mac-address"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           enum GroupTimer {
                              GroupTimer_NOTX_EXIST = 0;
                              GroupTimer_EXIST = 1;
                           };
                           GroupTimer group_timer = 4 [json_name = "group-timer"];
                           uint32 retran_count = 5 [json_name = "retran-count"];
                           bool last_member_query = 6 [json_name = "last-member-query"];
                           enum FilterMode {
                              FilterMode_EXCLUDE = 0;
                              FilterMode_INCLUDE = 1;
                              FilterMode_INVALID = 2;
                           };
                           FilterMode filter_mode = 7 [json_name = "filter-mode"];
                           enum CompatMode {
                              INVALID_ENUM_VALUE_CompatMode = 0;
                              CompatMode_V1 = 1;
                              CompatMode_V2 = 2;
                              CompatMode_V3 = 3;
                              CompatMode_INVALID = 255;
                           };
                           CompatMode compat_mode = 8 [json_name = "compat-mode"];
                           enum V1HostTimer {
                              V1HostTimer_NOTX_EXIST = 0;
                              V1HostTimer_EXIST = 1;
                           };
                           V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                           enum V2HostTimer {
                              V2HostTimer_NOTX_EXIST = 0;
                              V2HostTimer_EXIST = 1;
                           };
                           V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                           bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                           enum LastMemberQueryTimer {
                              LastMemberQueryTimer_NOTX_EXIST = 0;
                              LastMemberQueryTimer_EXIST = 1;
                           };
                           LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                           message Sources {
                              message Source {
                                 string source_address = 1 [json_name = "source-address"];
                                 uint32 up_time = 2 [json_name = "up-time"];
                                 uint32 expire_time = 3 [json_name = "expire-time"];
                                 enum SourceTimer {
                                    SourceTimer_NOTX_EXIST = 0;
                                    SourceTimer_EXIST = 1;
                                 };
                                 SourceTimer source_timer = 4 [json_name = "source-timer"];
                                 uint32 retran_count = 5 [json_name = "retran-count"];
                                 bool last_member_query = 6 [json_name = "last-member-query"];
                              }
                              repeated Source source = 1 [json_name = "source"];
                           }
                           Sources sources = 13 [json_name = "sources"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 6 [json_name = "groups"];
                  }
                  repeated AcListeningPort ac_listening_port = 1 [json_name = "ac-listening-port"];
               }
               AcListeningPorts ac_listening_ports = 14 [json_name = "ac-listening-ports"];
               message ListeningUsers {
                  message ListeningUser {
                     string interface = 1 [json_name = "interface"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     string mac_address = 5 [json_name = "mac-address"];
                     uint32 broadcast_domain = 6 [json_name = "broadcast-domain"];
                     uint32 sub_domain = 7 [json_name = "sub-domain"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           uint32 up_time = 3 [json_name = "up-time"];
                           string port_flag = 4 [json_name = "port-flag"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 8 [json_name = "groups"];
                  }
                  repeated ListeningUser listening_user = 1 [json_name = "listening-user"];
               }
               ListeningUsers listening_users = 15 [json_name = "listening-users"];
               message GeneralQueryStatisticss {
                  message GeneralQueryStatistics {
                     uint32 sub_domain = 1 [json_name = "sub-domain"];
                     uint32 send_counts = 2 [json_name = "send-counts"];
                     string last_send_time = 3 [json_name = "last-send-time"];
                  }
                  repeated GeneralQueryStatistics general_query_statistics = 1 [json_name = "general-query-statistics"];
               }
               GeneralQueryStatisticss general_query_statisticss = 16 [json_name = "general-query-statisticss"];
               message ListeningInterfacePacketStatisticss {
                  message ListeningInterfacePacketStatistics {
                     string interface = 1 [json_name = "interface"];
                     uint32 received_v1_report = 2 [json_name = "received-v1-report"];
                     uint32 received_v2_report = 3 [json_name = "received-v2-report"];
                     uint32 received_v3_report = 4 [json_name = "received-v3-report"];
                     uint32 received_v1_query = 5 [json_name = "received-v1-query"];
                     uint32 received_v2_query = 6 [json_name = "received-v2-query"];
                     uint32 received_v3_query = 7 [json_name = "received-v3-query"];
                     uint32 received_leave = 8 [json_name = "received-leave"];
                     uint32 received_unknown = 9 [json_name = "received-unknown"];
                     uint32 discard = 10 [json_name = "discard"];
                  }
                  repeated ListeningInterfacePacketStatistics listening_interface_packet_statistics = 1 [json_name = "listening-interface-packet-statistics"];
               }
               ListeningInterfacePacketStatisticss listening_interface_packet_statisticss = 17 [json_name = "listening-interface-packet-statisticss"];
               message InterfacePacketStatisticss {
                  message InterfacePacketStatistics {
                     enum PortType {
                        PortType_AC = 0;
                        PortType_PW = 1;
                     };
                     PortType port_type = 1 [json_name = "port-type"];
                     string interface = 2 [json_name = "interface"];
                     string remote_peer = 3 [json_name = "remote-peer"];
                     uint32 vc_id = 4 [json_name = "vc-id"];
                     enum PwType {
                        PwType_INVALID = 0;
                        PwType_VLAN = 4;
                        PwType_ETHERNET = 5;
                     };
                     PwType pw_type = 5 [json_name = "pw-type"];
                     uint32 received_v1_report = 6 [json_name = "received-v1-report"];
                     uint32 received_v2_report = 7 [json_name = "received-v2-report"];
                     uint32 received_v3_report = 8 [json_name = "received-v3-report"];
                     uint32 received_v1_query = 9 [json_name = "received-v1-query"];
                     uint32 received_v2_query = 10 [json_name = "received-v2-query"];
                     uint32 received_v3_query = 11 [json_name = "received-v3-query"];
                     uint32 received_leave = 12 [json_name = "received-leave"];
                     uint32 received_unknown = 13 [json_name = "received-unknown"];
                     uint32 discard = 14 [json_name = "discard"];
                  }
                  repeated InterfacePacketStatistics interface_packet_statistics = 1 [json_name = "interface-packet-statistics"];
               }
               InterfacePacketStatisticss interface_packet_statisticss = 18 [json_name = "interface-packet-statisticss"];
               message ListenedUsersInGroups {
                  message ListenedUsersInGroup {
                     string slot_name = 1 [json_name = "slot-name"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           string source_address = 2 [json_name = "source-address"];
                           uint32 statistic_start_time = 3 [json_name = "statistic-start-time"];
                           uint32 limit_count = 4 [json_name = "limit-count"];
                           uint32 current_count = 5 [json_name = "current-count"];
                           uint32 last_5min_max_count = 6 [json_name = "last-5min-max-count"];
                           uint32 last_5min_min_count = 7 [json_name = "last-5min-min-count"];
                           uint32 last_5min_average_count = 8 [json_name = "last-5min-average-count"];
                           uint32 last_15min_max_count = 9 [json_name = "last-15min-max-count"];
                           uint32 last_15min_min_count = 10 [json_name = "last-15min-min-count"];
                           uint32 last_15min_average_count = 11 [json_name = "last-15min-average-count"];
                           uint32 last_24h_max_count = 12 [json_name = "last-24h-max-count"];
                           uint32 last_24h_min_count = 13 [json_name = "last-24h-min-count"];
                           uint32 last_24h_average_count = 14 [json_name = "last-24h-average-count"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 2 [json_name = "groups"];
                  }
                  repeated ListenedUsersInGroup listened_users_in_group = 1 [json_name = "listened-users-in-group"];
               }
               ListenedUsersInGroups listened_users_in_groups = 19 [json_name = "listened-users-in-groups"];
               message Statistics {
                  uint32 send_source_group_query_count = 1 [json_name = "send-source-group-query-count"];
                  uint32 v1_report_count = 2 [json_name = "v1-report-count"];
                  uint32 v2_report_count = 3 [json_name = "v2-report-count"];
                  uint32 v3_report_count = 4 [json_name = "v3-report-count"];
                  uint32 v1_query_count = 5 [json_name = "v1-query-count"];
                  uint32 v2_query_count = 6 [json_name = "v2-query-count"];
                  uint32 v3_query_cnt = 7 [json_name = "v3-query-cnt"];
                  uint32 leave_count = 8 [json_name = "leave-count"];
                  uint32 hello_count = 9 [json_name = "hello-count"];
                  uint32 s_flag_query_count = 10 [json_name = "s-flag-query-count"];
                  uint32 no_s_flag_query_count = 11 [json_name = "no-s-flag-query-count"];
                  uint32 send_general_query_count = 12 [json_name = "send-general-query-count"];
                  uint32 send_group_query_count = 13 [json_name = "send-group-query-count"];
                  uint32 invalid_count = 14 [json_name = "invalid-count"];
                  uint32 ignored_count = 15 [json_name = "ignored-count"];
                  uint32 forwarded_report_count = 16 [json_name = "forwarded-report-count"];
                  uint32 forwarded_leave_count = 17 [json_name = "forwarded-leave-count"];
                  uint32 forwarded_query_count = 18 [json_name = "forwarded-query-count"];
               }
               Statistics statistics = 20 [json_name = "statistics"];
               message InvalidPacket {
                  message GeneralCount {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                     uint32 invalid_type_count = 2 [json_name = "invalid-type-count"];
                     uint32 bad_checksum = 3 [json_name = "bad-checksum"];
                     uint32 fault_router_alert = 4 [json_name = "fault-router-alert"];
                  }
                  GeneralCount general_count = 1 [json_name = "general-count"];
                  message InvalidQueryCount {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                  }
                  InvalidQueryCount invalid_query_count = 2 [json_name = "invalid-query-count"];
                  message InvalidReportCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                     uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                  }
                  InvalidReportCount invalid_report_count = 3 [json_name = "invalid-report-count"];
                  message InvalicLeaveCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                  }
                  InvalicLeaveCount invalic_leave_count = 4 [json_name = "invalic-leave-count"];
                  message InvalidHelloCount {
                     uint32 invalid_pim_version = 1 [json_name = "invalid-pim-version"];
                     uint32 fault_length = 2 [json_name = "fault-length"];
                     uint32 bad_holdtime_length = 3 [json_name = "bad-holdtime-length"];
                     uint32 bad_dr_priority_length = 4 [json_name = "bad-dr-priority-length"];
                     uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                     uint32 bad_generation_id_length = 6 [json_name = "bad-generation-id-length"];
                     uint32 bad_lan_prune_delay_length = 7 [json_name = "bad-lan-prune-delay-length"];
                  }
                  InvalidHelloCount invalid_hello_count = 5 [json_name = "invalid-hello-count"];
                  message InvalidLeaveCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                  }
                  InvalidLeaveCount invalid_leave_count = 6 [json_name = "invalid-leave-count"];
               }
               InvalidPacket invalid_packet = 21 [json_name = "invalid-packet"];
            }
            IgmpSnooping igmp_snooping = 39 [json_name = "igmp-snooping"];
            message MldSnooping {
               message Global {
                  uint32 version = 1 [json_name = "version"];
                  bool ssm_mapping_enable = 2 [json_name = "ssm-mapping-enable"];
                  bool enable = 3 [json_name = "enable"];
                  uint32 max_response_time = 4 [json_name = "max-response-time"];
                  bool immediately_leave = 5 [json_name = "immediately-leave"];
                  bool proxy_enable = 6 [json_name = "proxy-enable"];
                  enum MulticastGroupModel {
                     INVALID_ENUM_VALUE_MulticastGroupModel = 0;
                     MulticastGroupModel_ASMX_SSM = 1;
                     MulticastGroupModel_ASMX_ONLY = 2;
                     MulticastGroupModel_SSMX_ONLY = 3;
                  };
                  MulticastGroupModel multicast_group_model = 7 [json_name = "multicast-group-model"];
                  bool querier_election = 8 [json_name = "querier-election"];
                  bool proxy_router_protocol_pass = 9 [json_name = "proxy-router-protocol-pass"];
                  bool querier_enable = 10 [json_name = "querier-enable"];
                  uint32 query_interval = 11 [json_name = "query-interval"];
                  bool require_router_alert = 12 [json_name = "require-router-alert"];
                  bool send_router_alert = 13 [json_name = "send-router-alert"];
                  uint32 robustness = 14 [json_name = "robustness"];
                  uint32 router_aging_time = 15 [json_name = "router-aging-time"];
                  bool router_port_learning = 16 [json_name = "router-port-learning"];
                  uint32 last_member_query_interval = 17 [json_name = "last-member-query-interval"];
                  bool static_group_suppress_dynamic_join = 18 [json_name = "static-group-suppress-dynamic-join"];
                  bool report_suppress = 19 [json_name = "report-suppress"];
                  uint32 source_life_time = 20 [json_name = "source-life-time"];
                  bool packet_encapsulation_raw = 21 [json_name = "packet-encapsulation-raw"];
                  string ssm_policy_acl = 22 [json_name = "ssm-policy-acl"];
                  string ssm_mapping_policy = 23 [json_name = "ssm-mapping-policy"];
                  string group_policy_acl = 24 [json_name = "group-policy-acl"];
                  uint32 group_policy_version = 25 [json_name = "group-policy-version"];
                  string immediately_leave_acl = 26 [json_name = "immediately-leave-acl"];
                  string ip_policy_acl = 27 [json_name = "ip-policy-acl"];
                  string query_ip_policy_acl = 28 [json_name = "query-ip-policy-acl"];
                  message Status {
                     uint32 current_entry_count = 1 [json_name = "current-entry-count"];
                     string querier_address = 2 [json_name = "querier-address"];
                  }
                  Status status = 29 [json_name = "status"];
               }
               Global global = 1 [json_name = "global"];
               message StaticRouterPort {
                  message LdpPws {
                     message LdpPw {
                        string remote_peer = 1 [json_name = "remote-peer"];
                        uint32 negotiation_vc_id = 2 [json_name = "negotiation-vc-id"];
                     }
                     repeated LdpPw ldp_pw = 1 [json_name = "ldp-pw"];
                  }
                  LdpPws ldp_pws = 1 [json_name = "ldp-pws"];
               }
               StaticRouterPort static_router_port = 2 [json_name = "static-router-port"];
               message StaticGroups {
                  message LdpPws {
                     message LdpPw {
                        string group_address = 1 [json_name = "group-address"];
                        string source_address = 2 [json_name = "source-address"];
                        string remote_peer = 3 [json_name = "remote-peer"];
                        uint32 negotiation_vc_id = 4 [json_name = "negotiation-vc-id"];
                     }
                     repeated LdpPw ldp_pw = 1 [json_name = "ldp-pw"];
                  }
                  LdpPws ldp_pws = 1 [json_name = "ldp-pws"];
                  message StaticGroup {
                     string group_address = 1 [json_name = "group-address"];
                     string source_address = 2 [json_name = "source-address"];
                     string remote_peer = 3 [json_name = "remote-peer"];
                     uint32 negotiation_vc_id = 4 [json_name = "negotiation-vc-id"];
                  }
                  repeated StaticGroup static_group = 2 [json_name = "static-group"];
               }
               StaticGroups static_groups = 3 [json_name = "static-groups"];
               message FastChannels {
                  message FastChannel {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                     uint32 source_mask_length = 4 [json_name = "source-mask-length"];
                  }
                  repeated FastChannel fast_channel = 1 [json_name = "fast-channel"];
               }
               FastChannels fast_channels = 4 [json_name = "fast-channels"];
               message SsmMappingGroups {
                  message SsmMappingGroup {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
               }
               SsmMappingGroups ssm_mapping_groups = 5 [json_name = "ssm-mapping-groups"];
               message RouterPorts {
                  message RouterPort {
                     string port_name = 1 [json_name = "port-name"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     string remote_peer = 5 [json_name = "remote-peer"];
                     enum Pwsignal {
                        INVALID_ENUM_VALUE_Pwsignal = 0;
                        Pwsignal_BGPAD = 1;
                        Pwsignal_LDP = 2;
                     };
                     Pwsignal pwsignal = 6 [json_name = "pwsignal"];
                     uint32 vc_or_site_id = 7 [json_name = "vc-or-site-id"];
                     uint32 up_time = 8 [json_name = "up-time"];
                     uint32 expire_time = 9 [json_name = "expire-time"];
                     uint32 port_number = 10 [json_name = "port-number"];
                     enum Flag {
                        INVALID_ENUM_VALUE_Flag = 0;
                        Flag_STATIC = 1;
                        Flag_DYNAMIC = 2;
                        Flag_STATICX_DYNAMIC = 3;
                        Flag_MAPPING = 4;
                        Flag_STATICX_MAPPING = 5;
                        Flag_DYNAMICX_MAPPING = 6;
                        Flag_STATICX_DYNAMICX_MAPPING = 7;
                     };
                     Flag flag = 11 [json_name = "flag"];
                  }
                  repeated RouterPort router_port = 1 [json_name = "router-port"];
               }
               RouterPorts router_ports = 6 [json_name = "router-ports"];
               message AcPorts {
                  message AcPort {
                     string interface = 1 [json_name = "interface"];
                     enum PortType {
                        INVALID_ENUM_VALUE_PortType = 0;
                        PortType_INVALID = 1;
                        PortType_PWX_INTERFACE = 2;
                        PortType_L2X_INTERFACE = 3;
                        PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                        PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                        PortType_INTERFACEX_BOARD = 6;
                        PortType_VLANIFX_PORT = 7;
                        PortType_VXLANX_TUNNEL = 8;
                        PortType_STACKINGX_PORT = 9;
                        PortType_MAPPINGX_PORT = 10;
                        PortType_STACKINGX_MACX_PORT = 11;
                        PortType_MAPPINGX_MACX_PORT = 12;
                     };
                     PortType port_type = 2 [json_name = "port-type"];
                     uint32 pe_vid = 3 [json_name = "pe-vid"];
                     uint32 ce_vid = 4 [json_name = "ce-vid"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           enum GroupTimer {
                              GroupTimer_NOTX_EXIST = 0;
                              GroupTimer_EXIST = 1;
                           };
                           GroupTimer group_timer = 4 [json_name = "group-timer"];
                           uint32 retran_count = 5 [json_name = "retran-count"];
                           bool last_member_query = 6 [json_name = "last-member-query"];
                           enum FilterMode {
                              FilterMode_EXCLUDE = 0;
                              FilterMode_INCLUDE = 1;
                              FilterMode_INVALID = 2;
                           };
                           FilterMode filter_mode = 7 [json_name = "filter-mode"];
                           enum CompatMode {
                              INVALID_ENUM_VALUE_CompatMode = 0;
                              CompatMode_V1 = 1;
                              CompatMode_V2 = 2;
                              CompatMode_V3 = 3;
                              CompatMode_INVALID = 255;
                           };
                           CompatMode compat_mode = 8 [json_name = "compat-mode"];
                           enum V1HostTimer {
                              V1HostTimer_NOTX_EXIST = 0;
                              V1HostTimer_EXIST = 1;
                           };
                           V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                           enum V2HostTimer {
                              V2HostTimer_NOTX_EXIST = 0;
                              V2HostTimer_EXIST = 1;
                           };
                           V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                           bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                           enum LastMemberQueryTimer {
                              LastMemberQueryTimer_NOTX_EXIST = 0;
                              LastMemberQueryTimer_EXIST = 1;
                           };
                           LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                           message Sources {
                              message Source {
                                 string source_address = 1 [json_name = "source-address"];
                                 uint32 up_time = 2 [json_name = "up-time"];
                                 uint32 expire_time = 3 [json_name = "expire-time"];
                                 enum SourceTimer {
                                    SourceTimer_NOTX_EXIST = 0;
                                    SourceTimer_EXIST = 1;
                                 };
                                 SourceTimer source_timer = 4 [json_name = "source-timer"];
                                 uint32 retran_count = 5 [json_name = "retran-count"];
                                 bool last_member_query = 6 [json_name = "last-member-query"];
                              }
                              repeated Source source = 1 [json_name = "source"];
                           }
                           Sources sources = 13 [json_name = "sources"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 5 [json_name = "groups"];
                  }
                  repeated AcPort ac_port = 1 [json_name = "ac-port"];
               }
               AcPorts ac_ports = 7 [json_name = "ac-ports"];
               message GroupPorts {
                  message GroupPort {
                     string group_address = 1 [json_name = "group-address"];
                     string source_address = 2 [json_name = "source-address"];
                     uint32 source_up_time = 3 [json_name = "source-up-time"];
                     uint32 group_up_time = 4 [json_name = "group-up-time"];
                     enum EntryFlag {
                        EntryFlag_NONE = 0;
                        EntryFlag_PROTOCOL = 1;
                        EntryFlag_ACTIVE = 2;
                        EntryFlag_PROTOCOLX_ACTIVE = 3;
                        EntryFlag_FASTCHANNEL = 4;
                        EntryFlag_PROTOCOLX_FASTCHANNEL = 5;
                        EntryFlag_ACTIVEX_FASTCHANNEL = 6;
                        EntryFlag_PROTOCOLX_ACTIVEX_FASTCHANNEL = 7;
                     };
                     EntryFlag entry_flag = 5 [json_name = "entry-flag"];
                     enum SourceFlag {
                        SourceFlag_UNKNOWN = 0;
                        SourceFlag_IGMP = 1;
                        SourceFlag_ACTIVE = 2;
                        SourceFlag_IGMPX_ACTIVE = 3;
                        SourceFlag_FASTCHANNEL = 4;
                        SourceFlag_IGMPX_FASTCHANNEL = 5;
                        SourceFlag_ACTIVEX_FASTCHANNEL = 6;
                        SourceFlag_IGMPX_ACTIVEX_FASTCHANNEL = 7;
                        SourceFlag_MLD = 9;
                        SourceFlag_ACTIVE6 = 10;
                        SourceFlag_MLDX_ACTIVE6 = 11;
                        SourceFlag_FASTCHANNEL6 = 12;
                        SourceFlag_MLDX_FASTCHANNEL6 = 13;
                        SourceFlag_ACTIVE6X_FASTCHANNEL6 = 14;
                        SourceFlag_MLDX_ACTIVE6X_FASTCHANNEL6 = 15;
                        SourceFlag_TRILL = 16;
                        SourceFlag_IGMPX_TRILL = 17;
                        SourceFlag_ACTIVEX_TRILL = 18;
                        SourceFlag_IGMPX_ACTIVEX_TRILL = 19;
                     };
                     SourceFlag source_flag = 6 [json_name = "source-flag"];
                     message Ports {
                        message Port {
                           string port_name = 1 [json_name = "port-name"];
                           enum PortType {
                              INVALID_ENUM_VALUE_PortType = 0;
                              PortType_INVALID = 1;
                              PortType_PWX_INTERFACE = 2;
                              PortType_L2X_INTERFACE = 3;
                              PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                              PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                              PortType_INTERFACEX_BOARD = 6;
                              PortType_VLANIFX_PORT = 7;
                              PortType_VXLANX_TUNNEL = 8;
                              PortType_STACKINGX_PORT = 9;
                              PortType_MAPPINGX_PORT = 10;
                              PortType_STACKINGX_MACX_PORT = 11;
                              PortType_MAPPINGX_MACX_PORT = 12;
                           };
                           PortType port_type = 2 [json_name = "port-type"];
                           uint32 pe_vid = 3 [json_name = "pe-vid"];
                           uint32 ce_vid = 4 [json_name = "ce-vid"];
                           string remote_peer = 5 [json_name = "remote-peer"];
                           uint32 vc_or_site_id = 6 [json_name = "vc-or-site-id"];
                           enum Pwsignal {
                              INVALID_ENUM_VALUE_Pwsignal = 0;
                              Pwsignal_BGPAD = 1;
                              Pwsignal_LDP = 2;
                           };
                           Pwsignal pwsignal = 7 [json_name = "pwsignal"];
                           string mac = 8 [json_name = "mac"];
                           uint32 up_time = 9 [json_name = "up-time"];
                           uint32 expire_time = 10 [json_name = "expire-time"];
                           string port_flag = 11 [json_name = "port-flag"];
                        }
                        repeated Port port = 1 [json_name = "port"];
                     }
                     Ports ports = 7 [json_name = "ports"];
                  }
                  repeated GroupPort group_port = 1 [json_name = "group-port"];
               }
               GroupPorts group_ports = 8 [json_name = "group-ports"];
               message PwGroups {
                  message PwGroup {
                     string remote_peer = 1 [json_name = "remote-peer"];
                     uint32 vc_or_site_id = 2 [json_name = "vc-or-site-id"];
                     enum Pwsignal {
                        INVALID_ENUM_VALUE_Pwsignal = 0;
                        Pwsignal_BGPAD = 1;
                        Pwsignal_LDP = 2;
                     };
                     Pwsignal pwsignal = 3 [json_name = "pwsignal"];
                     message Groups {
                        message Group {
                           string group_address = 1 [json_name = "group-address"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           enum GroupTimer {
                              GroupTimer_NOTX_EXIST = 0;
                              GroupTimer_EXIST = 1;
                           };
                           GroupTimer group_timer = 4 [json_name = "group-timer"];
                           uint32 retran_count = 5 [json_name = "retran-count"];
                           bool last_member_query = 6 [json_name = "last-member-query"];
                           enum FilterMode {
                              FilterMode_EXCLUDE = 0;
                              FilterMode_INCLUDE = 1;
                              FilterMode_INVALID = 2;
                           };
                           FilterMode filter_mode = 7 [json_name = "filter-mode"];
                           enum CompatMode {
                              INVALID_ENUM_VALUE_CompatMode = 0;
                              CompatMode_V1 = 1;
                              CompatMode_V2 = 2;
                              CompatMode_V3 = 3;
                              CompatMode_INVALID = 255;
                           };
                           CompatMode compat_mode = 8 [json_name = "compat-mode"];
                           enum V1HostTimer {
                              V1HostTimer_NOTX_EXIST = 0;
                              V1HostTimer_EXIST = 1;
                           };
                           V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                           enum V2HostTimer {
                              V2HostTimer_NOTX_EXIST = 0;
                              V2HostTimer_EXIST = 1;
                           };
                           V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                           bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                           enum LastMemberQueryTimer {
                              LastMemberQueryTimer_NOTX_EXIST = 0;
                              LastMemberQueryTimer_EXIST = 1;
                           };
                           LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                           message Sources {
                              message Source {
                                 string source_address = 1 [json_name = "source-address"];
                                 uint32 up_time = 2 [json_name = "up-time"];
                                 uint32 expire_time = 3 [json_name = "expire-time"];
                                 enum SourceTimer {
                                    SourceTimer_NOTX_EXIST = 0;
                                    SourceTimer_EXIST = 1;
                                 };
                                 SourceTimer source_timer = 4 [json_name = "source-timer"];
                                 uint32 retran_count = 5 [json_name = "retran-count"];
                                 bool last_member_query = 6 [json_name = "last-member-query"];
                              }
                              repeated Source source = 1 [json_name = "source"];
                           }
                           Sources sources = 13 [json_name = "sources"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     Groups groups = 4 [json_name = "groups"];
                  }
                  repeated PwGroup pw_group = 1 [json_name = "pw-group"];
               }
               PwGroups pw_groups = 9 [json_name = "pw-groups"];
               message Statistics {
                  uint32 send_source_group_query_count = 1 [json_name = "send-source-group-query-count"];
                  uint32 v1_report_count = 2 [json_name = "v1-report-count"];
                  uint32 v2_report_count = 3 [json_name = "v2-report-count"];
                  uint32 v3_report_count = 4 [json_name = "v3-report-count"];
                  uint32 v1_query_count = 5 [json_name = "v1-query-count"];
                  uint32 v2_query_count = 6 [json_name = "v2-query-count"];
                  uint32 v3_query_cnt = 7 [json_name = "v3-query-cnt"];
                  uint32 leave_count = 8 [json_name = "leave-count"];
                  uint32 hello_count = 9 [json_name = "hello-count"];
                  uint32 s_flag_query_count = 10 [json_name = "s-flag-query-count"];
                  uint32 no_s_flag_query_count = 11 [json_name = "no-s-flag-query-count"];
                  uint32 send_general_query_count = 12 [json_name = "send-general-query-count"];
                  uint32 send_group_query_count = 13 [json_name = "send-group-query-count"];
                  uint32 invalid_count = 14 [json_name = "invalid-count"];
                  uint32 ignored_count = 15 [json_name = "ignored-count"];
                  uint32 forwarded_report_count = 16 [json_name = "forwarded-report-count"];
                  uint32 forwarded_leave_count = 17 [json_name = "forwarded-leave-count"];
                  uint32 forwarded_query_count = 18 [json_name = "forwarded-query-count"];
               }
               Statistics statistics = 10 [json_name = "statistics"];
               message InvalidPacket {
                  message GeneralCount {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                     uint32 invalid_type_count = 2 [json_name = "invalid-type-count"];
                     uint32 bad_checksum = 3 [json_name = "bad-checksum"];
                     uint32 fault_router_alert = 4 [json_name = "fault-router-alert"];
                  }
                  GeneralCount general_count = 1 [json_name = "general-count"];
                  message InvalidQueryCount {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                  }
                  InvalidQueryCount invalid_query_count = 2 [json_name = "invalid-query-count"];
                  message InvalidReportCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                     uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                  }
                  InvalidReportCount invalid_report_count = 3 [json_name = "invalid-report-count"];
                  message InvalicLeaveCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                  }
                  InvalicLeaveCount invalic_leave_count = 4 [json_name = "invalic-leave-count"];
                  message InvalidHelloCount {
                     uint32 invalid_pim_version = 1 [json_name = "invalid-pim-version"];
                     uint32 fault_length = 2 [json_name = "fault-length"];
                     uint32 bad_holdtime_length = 3 [json_name = "bad-holdtime-length"];
                     uint32 bad_dr_priority_length = 4 [json_name = "bad-dr-priority-length"];
                     uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                     uint32 bad_generation_id_length = 6 [json_name = "bad-generation-id-length"];
                     uint32 bad_lan_prune_delay_length = 7 [json_name = "bad-lan-prune-delay-length"];
                  }
                  InvalidHelloCount invalid_hello_count = 5 [json_name = "invalid-hello-count"];
                  message InvalidLeaveCount {
                     uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                     uint32 invalid_version = 2 [json_name = "invalid-version"];
                  }
                  InvalidLeaveCount invalid_leave_count = 6 [json_name = "invalid-leave-count"];
               }
               InvalidPacket invalid_packet = 11 [json_name = "invalid-packet"];
            }
            MldSnooping mld_snooping = 40 [json_name = "mld-snooping"];
            message QosParameter {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
               string profile_name = 3 [json_name = "profile-name"];
            }
            QosParameter qos_parameter = 41 [json_name = "qos-parameter"];
            message MacFlapping {
               message LoopDetect {
                  uint32 loop_times = 1 [json_name = "loop-times"];
                  uint32 detect_cycle = 2 [json_name = "detect-cycle"];
                  uint32 cycles = 3 [json_name = "cycles"];
                  enum Action {
                     INVALID_ENUM_VALUE_Action = 0;
                     Action_BLOCK = 1;
                     Action_ALARM = 2;
                  };
                  Action action = 4 [json_name = "action"];
                  uint32 retry_times = 5 [json_name = "retry-times"];
                  uint32 block_time = 6 [json_name = "block-time"];
               }
               LoopDetect loop_detect = 1 [json_name = "loop-detect"];
               message PreciseBlock {
               }
               PreciseBlock precise_block = 2 [json_name = "precise-block"];
            }
            MacFlapping mac_flapping = 42 [json_name = "mac-flapping"];
            message Mac {
               message Suppression {
                  bool inbound = 1 [json_name = "inbound"];
                  bool outbound = 2 [json_name = "outbound"];
               }
               Suppression suppression = 1 [json_name = "suppression"];
               message UniSuppressions {
                  message UniSuppression {
                     enum Type {
                        Type_BROADCAST = 0;
                        Type_MULTICAST = 1;
                        Type_UNKNOWNX_UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum Direction {
                        Direction_UNIX_INBOUND = 0;
                        Direction_UNIX_OUTBOUND = 1;
                     };
                     Direction direction = 2 [json_name = "direction"];
                     uint64 cir = 3 [json_name = "cir"];
                     uint64 cbs = 4 [json_name = "cbs"];
                  }
                  repeated UniSuppression uni_suppression = 1 [json_name = "uni-suppression"];
               }
               UniSuppressions uni_suppressions = 2 [json_name = "uni-suppressions"];
               message MacLimit {
                  uint32 maximum = 1 [json_name = "maximum"];
                  uint32 rate = 2 [json_name = "rate"];
                  enum Action {
                     Action_DISCARD = 0;
                     Action_FORWARD = 1;
                  };
                  Action action = 3 [json_name = "action"];
                  enum Alarm {
                     Alarm_DISABLE = 0;
                     Alarm_ENABLE = 1;
                  };
                  Alarm alarm = 4 [json_name = "alarm"];
                  uint32 up_threshold = 5 [json_name = "up-threshold"];
                  uint32 down_threshold = 6 [json_name = "down-threshold"];
               }
               MacLimit mac_limit = 3 [json_name = "mac-limit"];
               message MacAddresss {
                  message Qualifys {
                     message Qualify {
                        uint32 vlan_id = 1 [json_name = "vlan-id"];
                        string address = 2 [json_name = "address"];
                        message MacType_BlackHole {
                           bool black_hole = 1 [json_name = "black-hole"];
                        }
                        message MacType_Static {
                           message OutBoundType_Ac {
                              string out_if_name = 1 [json_name = "out-if-name"];
                           }
                           message OutBoundType_Pw {
                              uint32 pw_id = 1 [json_name = "pw-id"];
                              string peer_ip = 2 [json_name = "peer-ip"];
                           }
                           oneof OutBoundType {
                              OutBoundType_Ac out_bound_type_ac = 1 [json_name = "ac"];
                              OutBoundType_Pw out_bound_type_pw = 2 [json_name = "pw"];
                           }
                        }
                        oneof MacType {
                           MacType_BlackHole mac_type_black_hole = 3 [json_name = "black-hole"];
                           MacType_Static mac_type_static = 4 [json_name = "static"];
                        }
                     }
                     repeated Qualify qualify = 1 [json_name = "qualify"];
                  }
                  Qualifys qualifys = 1 [json_name = "qualifys"];
                  message Unqualifys {
                     message Unqualify {
                        string address = 1 [json_name = "address"];
                        message MacType_BlackHole {
                           bool black_hole = 1 [json_name = "black-hole"];
                        }
                        message MacType_Static {
                           message OutBoundType_Ac {
                              string out_if_name = 1 [json_name = "out-if-name"];
                              uint32 pe_vid = 2 [json_name = "pe-vid"];
                              uint32 ce_vid = 3 [json_name = "ce-vid"];
                              bool ce_any = 4 [json_name = "ce-any"];
                              string vlanif_name = 5 [json_name = "vlanif-name"];
                           }
                           message OutBoundType_Pw {
                              uint32 pw_id = 1 [json_name = "pw-id"];
                              string peer_ip = 2 [json_name = "peer-ip"];
                           }
                           oneof OutBoundType {
                              OutBoundType_Ac out_bound_type_ac = 1 [json_name = "ac"];
                              OutBoundType_Pw out_bound_type_pw = 2 [json_name = "pw"];
                           }
                        }
                        oneof MacType {
                           MacType_BlackHole mac_type_black_hole = 2 [json_name = "black-hole"];
                           MacType_Static mac_type_static = 3 [json_name = "static"];
                        }
                     }
                     repeated Unqualify unqualify = 1 [json_name = "unqualify"];
                  }
                  Unqualifys unqualifys = 2 [json_name = "unqualifys"];
               }
               MacAddresss mac_addresss = 4 [json_name = "mac-addresss"];
            }
            Mac mac = 43 [json_name = "mac"];
            message VsiPipe {
               bool split_mode = 1 [json_name = "split-mode"];
               enum PipeMode {
                  INVALID_ENUM_VALUE_PipeMode = 0;
                  PipeMode_PIPE = 1;
                  PipeMode_SHORTPIPE = 2;
                  PipeMode_UNIFORM = 3;
               };
               PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
               enum IngressPipeMode {
                  INVALID_ENUM_VALUE_IngressPipeMode = 0;
                  IngressPipeMode_PIPE = 1;
                  IngressPipeMode_SHORTPIPE = 2;
                  IngressPipeMode_UNIFORM = 3;
               };
               IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
               enum EgressPipeMode {
                  INVALID_ENUM_VALUE_EgressPipeMode = 0;
                  EgressPipeMode_PIPE = 1;
                  EgressPipeMode_SHORTPIPE = 2;
                  EgressPipeMode_UNIFORM = 3;
               };
               EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               enum Color {
                  Color_GREEN = 0;
                  Color_YELLOW = 1;
                  Color_RED = 2;
               };
               Color color = 6 [json_name = "color"];
               string domain_name = 7 [json_name = "domain-name"];
               enum TrustType {
                  TrustType_OUTPRI = 0;
                  TrustType_INPRI = 1;
                  TrustType_IPDSCP = 2;
               };
               TrustType trust_type = 8 [json_name = "trust-type"];
            }
            VsiPipe vsi_pipe = 44 [json_name = "vsi-pipe"];
            message ReserveIfSwitch {
               bool enable = 1 [json_name = "enable"];
            }
            ReserveIfSwitch reserve_if_switch = 45 [json_name = "reserve-if-switch"];
            message VplsExt {
               bool vsi_multicast_switch = 1 [json_name = "vsi-multicast-switch"];
               bool pw_packet_type_traffic_statistic = 2 [json_name = "pw-packet-type-traffic-statistic"];
               bool convergence_separate = 3 [json_name = "convergence-separate"];
            }
            VplsExt vpls_ext = 46 [json_name = "vpls-ext"];
            message MacHops {
               message MacHop {
                  string mac_address = 1 [json_name = "mac-address"];
                  string interface_name = 2 [json_name = "interface-name"];
                  string peer_ip = 3 [json_name = "peer-ip"];
                  uint32 pw_id = 4 [json_name = "pw-id"];
                  string detect_time = 5 [json_name = "detect-time"];
               }
               repeated MacHop mac_hop = 1 [json_name = "mac-hop"];
            }
            MacHops mac_hops = 47 [json_name = "mac-hops"];
            message LoopDetectSuppression {
               string interface_name = 1 [json_name = "interface-name"];
               string peer_ip = 2 [json_name = "peer-ip"];
               uint32 vc_lable = 3 [json_name = "vc-lable"];
               uint32 cir = 4 [json_name = "cir"];
               string time = 5 [json_name = "time"];
               string state = 6 [json_name = "state"];
               string slot = 7 [json_name = "slot"];
            }
            LoopDetectSuppression loop_detect_suppression = 48 [json_name = "loop-detect-suppression"];
            message MacAccounting {
               bool enable = 1 [json_name = "enable"];
            }
            MacAccounting mac_accounting = 49 [json_name = "mac-accounting"];
            bool token_exceed = 50 [json_name = "token-exceed"];
            uint32 ac_count = 51 [json_name = "ac-count"];
            string create_time = 52 [json_name = "create-time"];
            bool ignore_ac_state_effect = 53 [json_name = "ignore-ac-state-effect"];
            message Etree {
               bool static = 1 [json_name = "static"];
               uint32 root_vlan = 2 [json_name = "root-vlan"];
               uint32 leaf_vlan = 3 [json_name = "leaf-vlan"];
            }
            Etree etree = 54 [json_name = "etree"];
            message Pbb {
               uint32 i_tag = 1 [json_name = "i-tag"];
               string backbone_source_mac = 2 [json_name = "backbone-source-mac"];
               string backbone_destination_mac = 3 [json_name = "backbone-destination-mac"];
               bool mac_withdraw_rfc7361_compatible = 4 [json_name = "mac-withdraw-rfc7361-compatible"];
               string b_vsi = 5 [json_name = "b-vsi"];
               string b_evpn = 6 [json_name = "b-evpn"];
               enum LearnedFlag {
                  INVALID_ENUM_VALUE_LearnedFlag = 0;
                  LearnedFlag_NOX_MAC = 1;
                  LearnedFlag_FIRST = 2;
                  LearnedFlag_MASTER = 3;
                  LearnedFlag_BACKUP = 4;
               };
               LearnedFlag learned_flag = 7 [json_name = "learned-flag"];
               uint32 learned_in_label = 8 [json_name = "learned-in-label"];
               uint32 learned_out_label = 9 [json_name = "learned-out-label"];
               message IVsis {
                  message IVsi {
                     string vsi_name = 1 [json_name = "vsi-name"];
                  }
                  repeated IVsi i_vsi = 1 [json_name = "i-vsi"];
               }
               IVsis i_vsis = 10 [json_name = "i-vsis"];
            }
            Pbb pbb = 55 [json_name = "pbb"];
            message MacWithdrawLoopDetect {
               enum LastLoopType {
                  INVALID_ENUM_VALUE_LastLoopType = 0;
                  LastLoopType_DETECTX_LOOP = 1;
                  LastLoopType_EXCEEDX_MAXX_HOP = 2;
               };
               LastLoopType last_loop_type = 1 [json_name = "last-loop-type"];
               string send_peer = 2 [json_name = "send-peer"];
               string receive_peer = 3 [json_name = "receive-peer"];
               string last_loop_time = 4 [json_name = "last-loop-time"];
            }
            MacWithdrawLoopDetect mac_withdraw_loop_detect = 56 [json_name = "mac-withdraw-loop-detect"];
            message DownCauses {
               message DownCause {
                  uint32 down_cause_index = 1 [json_name = "down-cause-index"];
                  string down_cause = 2 [json_name = "down-cause"];
               }
               repeated DownCause down_cause = 1 [json_name = "down-cause"];
            }
            DownCauses down_causes = 57 [json_name = "down-causes"];
            message Statistic {
               uint32 up_pw_num = 1 [json_name = "up-pw-num"];
               uint32 down_pw_num = 2 [json_name = "down-pw-num"];
               uint32 backup_pw_num = 3 [json_name = "backup-pw-num"];
               uint32 up_bfd_num = 4 [json_name = "up-bfd-num"];
               uint32 down_bfd_num = 5 [json_name = "down-bfd-num"];
               uint32 up_ac_num = 6 [json_name = "up-ac-num"];
               uint32 down_ac_num = 7 [json_name = "down-ac-num"];
               uint32 down_acoam_num = 8 [json_name = "down-acoam-num"];
            }
            Statistic statistic = 58 [json_name = "statistic"];
            message AcSuppressionStatisticss {
               message AcSuppressionStatistics {
                  enum Direction {
                     Direction_BOTH = 0;
                     Direction_INX_BOUND = 1;
                     Direction_OUTX_BOUND = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum SuppressionType {
                     SuppressionType_BROADCAST = 0;
                     SuppressionType_MULTICAST = 1;
                     SuppressionType_UNKNOWNX_UNICAST = 2;
                  };
                  SuppressionType suppression_type = 2 [json_name = "suppression-type"];
                  uint32 cir = 3 [json_name = "cir"];
                  uint32 pir = 4 [json_name = "pir"];
                  uint32 cbs = 5 [json_name = "cbs"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  uint64 passed_packets = 7 [json_name = "passed-packets"];
                  uint64 passed_bytes = 8 [json_name = "passed-bytes"];
                  uint64 discard_packets = 9 [json_name = "discard-packets"];
                  uint64 discard_bytes = 10 [json_name = "discard-bytes"];
                  uint64 passed_packet_rate = 11 [json_name = "passed-packet-rate"];
                  uint64 passed_bit_rate = 12 [json_name = "passed-bit-rate"];
                  uint64 discard_packet_rate = 13 [json_name = "discard-packet-rate"];
                  uint64 discard_bit_rate = 14 [json_name = "discard-bit-rate"];
               }
               repeated AcSuppressionStatistics ac_suppression_statistics = 1 [json_name = "ac-suppression-statistics"];
            }
            AcSuppressionStatisticss ac_suppression_statisticss = 59 [json_name = "ac-suppression-statisticss"];
            message QosTrafficStatistics {
               string last_clear_time = 1 [json_name = "last-clear-time"];
               uint64 bits_rate = 2 [json_name = "bits-rate"];
               uint64 packets_rate = 3 [json_name = "packets-rate"];
               uint64 output_bytes = 4 [json_name = "output-bytes"];
               uint64 output_packets = 5 [json_name = "output-packets"];
               message QosQuerys {
                  message QosQuery {
                     enum Query {
                        Query_BE = 0;
                        Query_AF1 = 1;
                        Query_AF2 = 2;
                        Query_AF3 = 3;
                        Query_AF4 = 4;
                        Query_EF = 5;
                        Query_CS6 = 6;
                        Query_CS7 = 7;
                     };
                     Query query = 1 [json_name = "query"];
                     uint64 packets = 2 [json_name = "packets"];
                     uint64 bytes = 3 [json_name = "bytes"];
                     uint64 packets_rate = 4 [json_name = "packets-rate"];
                     uint64 bits_rate = 5 [json_name = "bits-rate"];
                     uint64 discard_packets = 6 [json_name = "discard-packets"];
                     uint64 discard_bytes = 7 [json_name = "discard-bytes"];
                     uint64 discard_packets_rate = 8 [json_name = "discard-packets-rate"];
                     uint64 discard_bit_rate = 9 [json_name = "discard-bit-rate"];
                  }
                  repeated QosQuery qos_query = 1 [json_name = "qos-query"];
               }
               QosQuerys qos_querys = 6 [json_name = "qos-querys"];
            }
            QosTrafficStatistics qos_traffic_statistics = 60 [json_name = "qos-traffic-statistics"];
            message MulticastForward {
               message TrunkLoadBalanceEnable {
               }
               TrunkLoadBalanceEnable trunk_load_balance_enable = 1 [json_name = "trunk-load-balance-enable"];
               message MulticastForwardTlbStatistics {
                  message MulticastForwardTlbStatistic {
                     enum AddressFamily {
                        AddressFamily_UNKNOWN = 0;
                        AddressFamily_IPV4 = 1;
                        AddressFamily_IPV6 = 2;
                     };
                     AddressFamily address_family = 1 [json_name = "address-family"];
                     string source_address = 2 [json_name = "source-address"];
                     string group_address = 3 [json_name = "group-address"];
                     enum ForwardingMode {
                        INVALID_ENUM_VALUE_ForwardingMode = 0;
                        ForwardingMode_IP = 1;
                        ForwardingMode_MAC = 2;
                     };
                     ForwardingMode forwarding_mode = 4 [json_name = "forwarding-mode"];
                     enum Sg {
                        INVALID_ENUM_VALUE_Sg = 0;
                        Sg_SG = 1;
                        Sg_SOURCEX_WILDCARD = 2;
                        Sg_RTX_PORT = 3;
                     };
                     Sg sg = 5 [json_name = "sg"];
                     uint32 port_cnt = 6 [json_name = "port-cnt"];
                  }
                  repeated MulticastForwardTlbStatistic multicast_forward_tlb_statistic = 1 [json_name = "multicast-forward-tlb-statistic"];
               }
               MulticastForwardTlbStatistics multicast_forward_tlb_statistics = 2 [json_name = "multicast-forward-tlb-statistics"];
            }
            MulticastForward multicast_forward = 61 [json_name = "multicast-forward"];
            message MulticastForwardTlbStatistics {
               message MulticastForwardTlbStatistic {
                  string source_address = 1 [json_name = "source-address"];
                  string group_address = 2 [json_name = "group-address"];
                  enum ForwardingMode {
                     INVALID_ENUM_VALUE_ForwardingMode = 0;
                     ForwardingMode_IP = 1;
                     ForwardingMode_MAC = 2;
                  };
                  ForwardingMode forwarding_mode = 3 [json_name = "forwarding-mode"];
                  enum Sg {
                     INVALID_ENUM_VALUE_Sg = 0;
                     Sg_SG = 1;
                     Sg_SOURCEX_WILDCARD = 2;
                     Sg_RTX_PORT = 3;
                  };
                  Sg sg = 4 [json_name = "sg"];
                  uint32 port_cnt = 5 [json_name = "port-cnt"];
               }
               repeated MulticastForwardTlbStatistic multicast_forward_tlb_statistic = 1 [json_name = "multicast-forward-tlb-statistic"];
            }
            MulticastForwardTlbStatistics multicast_forward_tlb_statistics = 62 [json_name = "multicast-forward-tlb-statistics"];
            message DhcpSnoopingVsi {
               bool nni_server_enable = 1 [json_name = "nni-server-enable"];
            }
            DhcpSnoopingVsi dhcp_snooping_vsi = 63 [json_name = "dhcp-snooping-vsi"];
         }
         Vpls vpls = 11 [json_name = "vpls"];
         message VpwsRemoteCcc {
            enum EncapsulationType {
               INVALID_ENUM_VALUE_EncapsulationType = 0;
               EncapsulationType_FR = 1;
               EncapsulationType_ATMX_AAL5X_SDU = 2;
               EncapsulationType_ATMX_TRANSX_CELL = 3;
               EncapsulationType_VLAN = 4;
               EncapsulationType_ETHERNET = 5;
               EncapsulationType_HDLC = 6;
               EncapsulationType_PPP = 7;
               EncapsulationType_CEM = 8;
               EncapsulationType_ATMX_NTO1X_VCC = 9;
               EncapsulationType_ATMX_NTO1X_VPC = 10;
               EncapsulationType_IPX_LAYER2 = 11;
               EncapsulationType_ATMX_1TO1X_VCC = 12;
               EncapsulationType_ATMX_1TO1X_VPC = 13;
               EncapsulationType_ATMX_AAL5X_PDU = 14;
               EncapsulationType_FRX_PORTX_MODE = 15;
               EncapsulationType_CEP = 16;
               EncapsulationType_SATOPX_E1 = 17;
               EncapsulationType_SATOPX_T1 = 18;
               EncapsulationType_SATOPX_E3 = 19;
               EncapsulationType_SATOPX_T3 = 20;
               EncapsulationType_CESOPSNX_BASIC = 21;
               EncapsulationType_TDMOIPX_AAL1 = 22;
               EncapsulationType_CESOPSNX_TDM = 23;
               EncapsulationType_TDMOIPX_AAL2 = 24;
               EncapsulationType_FRX_DLCI = 25;
               EncapsulationType_IPX_INTERWORKING = 64;
               EncapsulationType_UNSUPPORT = 255;
            };
            EncapsulationType encapsulation_type = 1 [json_name = "encapsulation-type"];
            message Acs {
               message Ac {
                  string interface_name = 1 [json_name = "interface-name"];
                  bool tagged = 2 [json_name = "tagged"];
                  enum State {
                     State_DEFAULT = 0;
                     State_DOWN = 1;
                     State_UP = 2;
                  };
                  State state = 3 [json_name = "state"];
                  bool token_exceed = 4 [json_name = "token-exceed"];
                  message ArpEntry {
                     string local_ce_mac = 1 [json_name = "local-ce-mac"];
                     string local_ce_ip = 2 [json_name = "local-ce-ip"];
                     bool local_ce_broadcast = 3 [json_name = "local-ce-broadcast"];
                     string remote_ce_ip = 4 [json_name = "remote-ce-ip"];
                  }
                  ArpEntry arp_entry = 5 [json_name = "arp-entry"];
                  message AcArps {
                     message AcArp {
                        enum MacType {
                           INVALID_ENUM_VALUE_MacType = 0;
                           MacType_STATIC = 1;
                           MacType_DYNAMIC = 2;
                           MacType_BROADCAST = 3;
                        };
                        MacType mac_type = 1 [json_name = "mac-type"];
                        string mac_address = 2 [json_name = "mac-address"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        uint32 vlan_id = 4 [json_name = "vlan-id"];
                        string ip_address = 5 [json_name = "ip-address"];
                     }
                     repeated AcArp ac_arp = 1 [json_name = "ac-arp"];
                  }
                  AcArps ac_arps = 6 [json_name = "ac-arps"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                           ProtocolType_LLDP = 2;
                           ProtocolType_BPDU = 4;
                           ProtocolType_CDP = 5;
                           ProtocolType_UDLD = 6;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                           Action_DISCARD = 2;
                           Action_TRANSPORT = 3;
                           Action_TRANSPORTX_TAGGED = 4;
                        };
                        Action action = 2 [json_name = "action"];
                        enum Mode {
                           Mode_NORMAL = 0;
                           Mode_UNTAG = 1;
                           Mode_UNTAGX_VLANX_CHECK = 2;
                        };
                        Mode mode = 3 [json_name = "mode"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 7 [json_name = "protocol-actions"];
               }
               repeated Ac ac = 1 [json_name = "ac"];
            }
            Acs acs = 2 [json_name = "acs"];
            message Pw {
               uint32 out_label = 1 [json_name = "out-label"];
               uint32 in_label = 2 [json_name = "in-label"];
               enum ControlWord {
                  ControlWord_DEFAULT = 0;
                  ControlWord_DISABLE = 1;
                  ControlWord_ENABLE = 2;
                  ControlWord_PREFER = 3;
               };
               ControlWord control_word = 3 [json_name = "control-word"];
               string out_interface_name = 4 [json_name = "out-interface-name"];
               string next_hop = 5 [json_name = "next-hop"];
            }
            Pw pw = 3 [json_name = "pw"];
         }
         VpwsRemoteCcc vpws_remote_ccc = 12 [json_name = "vpws-remote-ccc"];
         message Qos {
            message PolicyApplys {
               message PolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
               }
               repeated PolicyApply policy_apply = 1 [json_name = "policy-apply"];
            }
            PolicyApplys policy_applys = 1 [json_name = "policy-applys"];
            message AcModePolicyApplys {
               message AcModePolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINKX_LAYER = 1;
                     Layer_ALLX_LAYER = 2;
                  };
                  Layer layer = 3 [json_name = "layer"];
               }
               repeated AcModePolicyApply ac_mode_policy_apply = 1 [json_name = "ac-mode-policy-apply"];
            }
            AcModePolicyApplys ac_mode_policy_applys = 2 [json_name = "ac-mode-policy-applys"];
         }
         Qos qos = 13 [json_name = "qos"];
         message DhcpSnoopingVsi {
            bool nni_server_enable = 1 [json_name = "nni-server-enable"];
         }
         DhcpSnoopingVsi dhcp_snooping_vsi = 14 [json_name = "dhcp-snooping-vsi"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 2 [json_name = "instances"];
}


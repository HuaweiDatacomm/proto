syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-01 20:16:01
// ProtoYang-version 1
// module huawei-mpls
// revision 2020-07-02
// revision 2020-04-13
// revision 2020-03-24
// revision 2020-03-17
// revision 2020-02-29
// revision 2020-02-27
// revision 2020-02-12
// revision 2019-04-02
// namespace urn:huawei:yang:huawei-mpls

package huawei_mpls;

message Mpls {
   message Common {
      message Global {
         bool mpls_enable = 1 [json_name = "mpls-enable"];
         string lsr_id = 2 [json_name = "lsr-id"];
         enum NullLableType {
            NullLableType_EXPLICITX_NULL = 0;
            NullLableType_IMPLICITX_NULL = 1;
            NullLableType_NONX_NULL = 2;
         };
         NullLableType null_lable_type = 3 [json_name = "null-lable-type"];
         enum DiffServMode {
            INVALID_ENUM_VALUE_DiffServMode = 0;
            DiffServMode_PIPE = 1;
            DiffServMode_UNIFORM = 2;
         };
         DiffServMode diff_serv_mode = 4 [json_name = "diff-serv-mode"];
         enum TeTtlMode {
            INVALID_ENUM_VALUE_TeTtlMode = 0;
            TeTtlMode_UNIFORM = 1;
            TeTtlMode_PIPE = 2;
         };
         TeTtlMode te_ttl_mode = 5 [json_name = "te-ttl-mode"];
         enum LdpTtlMode {
            INVALID_ENUM_VALUE_LdpTtlMode = 0;
            LdpTtlMode_UNIFORM = 1;
            LdpTtlMode_PIPE = 2;
         };
         LdpTtlMode ldp_ttl_mode = 6 [json_name = "ldp-ttl-mode"];
         enum SrTtlMode {
            INVALID_ENUM_VALUE_SrTtlMode = 0;
            SrTtlMode_UNIFORM = 1;
            SrTtlMode_PIPE = 2;
         };
         SrTtlMode sr_ttl_mode = 7 [json_name = "sr-ttl-mode"];
         enum MplsMinLabel {
            MplsMinLabel_X_0 = 0;
            MplsMinLabel_X_256K = 262144;
            MplsMinLabel_X_512K = 524288;
            MplsMinLabel_X_768K = 786432;
         };
         MplsMinLabel mpls_min_label = 8 [json_name = "mpls-min-label"];
         uint32 mpls_label_begin = 9 [json_name = "mpls-label-begin"];
         uint32 ftn_delay_time = 10 [json_name = "ftn-delay-time"];
         bool mpls_mtu_independent = 11 [json_name = "mpls-mtu-independent"];
         bool entropy_label_capability = 12 [json_name = "entropy-label-capability"];
         uint32 mpls_label_space = 13 [json_name = "mpls-label-space"];
         message TtlExpirationPop {
            bool switch_flag = 1 [json_name = "switch-flag"];
         }
         TtlExpirationPop ttl_expiration_pop = 14 [json_name = "ttl-expiration-pop"];
         message BgpTtlMode {
            enum TtlMode {
               INVALID_ENUM_VALUE_TtlMode = 0;
               TtlMode_UNIFORM = 1;
               TtlMode_PIPE = 2;
            };
            TtlMode ttl_mode = 1 [json_name = "ttl-mode"];
         }
         BgpTtlMode bgp_ttl_mode = 15 [json_name = "bgp-ttl-mode"];
         enum SrExpMode {
            INVALID_ENUM_VALUE_SrExpMode = 0;
            SrExpMode_PIPE = 1;
            SrExpMode_UNIFORM = 3;
         };
         SrExpMode sr_exp_mode = 16 [json_name = "sr-exp-mode"];
         message ExpTtlMode {
            enum Exppipemode {
               INVALID_ENUM_VALUE_Exppipemode = 0;
               Exppipemode_UNIFORM = 1;
               Exppipemode_PIPE = 2;
            };
            Exppipemode exppipemode = 1 [json_name = "exppipemode"];
            enum Ttlpipemode {
               Ttlpipemode_UNIFORM = 0;
               Ttlpipemode_PIPE = 1;
            };
            Ttlpipemode ttlpipemode = 2 [json_name = "ttlpipemode"];
         }
         ExpTtlMode exp_ttl_mode = 17 [json_name = "exp-ttl-mode"];
         message EntropyLabelMode {
            enum ExpPipemode {
               INVALID_ENUM_VALUE_ExpPipemode = 0;
               ExpPipemode_UNIFORM = 1;
               ExpPipemode_PIPE = 2;
            };
            ExpPipemode exp_pipemode = 1 [json_name = "exp-pipemode"];
            enum TtlPipemode {
               TtlPipemode_UNIFORM = 0;
               TtlPipemode_PIPE = 1;
            };
            TtlPipemode ttl_pipemode = 2 [json_name = "ttl-pipemode"];
         }
         EntropyLabelMode entropy_label_mode = 18 [json_name = "entropy-label-mode"];
         enum SrAdjacencyTtlMode {
            INVALID_ENUM_VALUE_SrAdjacencyTtlMode = 0;
            SrAdjacencyTtlMode_UNIFORM = 1;
            SrAdjacencyTtlMode_PIPE = 2;
         };
         SrAdjacencyTtlMode sr_adjacency_ttl_mode = 19 [json_name = "sr-adjacency-ttl-mode"];
         bool traffic_statistic_enable = 20 [json_name = "traffic-statistic-enable"];
      }
      Global global = 1 [json_name = "global"];
      message ThresholdAlarm {
         message AutobypassTunnelNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         AutobypassTunnelNumber autobypass_tunnel_number = 1 [json_name = "autobypass-tunnel-number"];
         message AutoprimaryTunnelNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         AutoprimaryTunnelNumber autoprimary_tunnel_number = 2 [json_name = "autoprimary-tunnel-number"];
         message LdpLspNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         LdpLspNumber ldp_lsp_number = 3 [json_name = "ldp-lsp-number"];
         message OutsegmentNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         OutsegmentNumber outsegment_number = 4 [json_name = "outsegment-number"];
         message RemoteAdjacencyNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         RemoteAdjacencyNumber remote_adjacency_number = 5 [json_name = "remote-adjacency-number"];
         message MldpTreeNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         MldpTreeNumber mldp_tree_number = 6 [json_name = "mldp-tree-number"];
         message MldpBranchNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         MldpBranchNumber mldp_branch_number = 7 [json_name = "mldp-branch-number"];
         message RsvpLspNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         RsvpLspNumber rsvp_lsp_number = 8 [json_name = "rsvp-lsp-number"];
         message DynamicLabelNumber {
            uint32 upper_value = 1 [json_name = "upper-value"];
            uint32 lower_value = 2 [json_name = "lower-value"];
         }
         DynamicLabelNumber dynamic_label_number = 9 [json_name = "dynamic-label-number"];
      }
      ThresholdAlarm threshold_alarm = 2 [json_name = "threshold-alarm"];
      message BitErrLevels {
         message BitErrLevel {
            uint32 level_number = 1 [json_name = "level-number"];
            uint32 switch_coe = 2 [json_name = "switch-coe"];
            uint32 switch_pow = 3 [json_name = "switch-pow"];
            uint32 resume_coe = 4 [json_name = "resume-coe"];
            uint32 resume_pow = 5 [json_name = "resume-pow"];
         }
         repeated BitErrLevel bit_err_level = 1 [json_name = "bit-err-level"];
      }
      BitErrLevels bit_err_levels = 3 [json_name = "bit-err-levels"];
      message LspStatistics {
         message LspStatistic {
            enum LspType {
               LspType_STATICX_LSP = 0;
               LspType_STATICX_CRLSP = 1;
               LspType_LDPX_LSP = 2;
               LspType_RSVPX_CRLSP = 3;
               LspType_BGPX_LSP = 4;
               LspType_ASBRX_LSP = 5;
               LspType_BGPX_IPV6X_LSP = 6;
               LspType_L3VPNX_IPV6X_LSP = 7;
               LspType_LSP = 8;
               LspType_CRLSP = 9;
               LspType_EVPNX_LSP = 10;
            };
            LspType lsp_type = 1 [json_name = "lsp-type"];
            uint32 ingress_lsp = 2 [json_name = "ingress-lsp"];
            uint32 egress_lsp = 3 [json_name = "egress-lsp"];
            uint32 transit_lsp = 4 [json_name = "transit-lsp"];
            uint32 total_lsp = 5 [json_name = "total-lsp"];
         }
         repeated LspStatistic lsp_statistic = 1 [json_name = "lsp-statistic"];
      }
      LspStatistics lsp_statistics = 4 [json_name = "lsp-statistics"];
      message CrossConnects {
         message CrossConnect {
            uint32 xc_index = 1 [json_name = "xc-index"];
            uint32 outsegment_index = 2 [json_name = "outsegment-index"];
            uint32 insegment_index = 3 [json_name = "insegment-index"];
            string xc_out_interface_name = 4 [json_name = "xc-out-interface-name"];
            uint32 xc_out_label = 5 [json_name = "xc-out-label"];
            string xc_next_hop = 6 [json_name = "xc-next-hop"];
            string xc_in_interface_name = 7 [json_name = "xc-in-interface-name"];
            uint32 xc_in_label = 8 [json_name = "xc-in-label"];
            uint32 xc_outgoing_tunnel_id = 9 [json_name = "xc-outgoing-tunnel-id"];
            enum XcOutgoingTunnelType {
               INVALID_ENUM_VALUE_XcOutgoingTunnelType = 0;
               XcOutgoingTunnelType_BGP = 2;
               XcOutgoingTunnelType_SRBE = 41;
            };
            XcOutgoingTunnelType xc_outgoing_tunnel_type = 10 [json_name = "xc-outgoing-tunnel-type"];
         }
         repeated CrossConnect cross_connect = 1 [json_name = "cross-connect"];
      }
      CrossConnects cross_connects = 5 [json_name = "cross-connects"];
      message IlmLabelStacks {
         message IlmLabelStack {
            uint32 in_label = 1 [json_name = "in-label"];
            uint32 label_stack = 2 [json_name = "label-stack"];
            uint32 level = 3 [json_name = "level"];
            string type = 4 [json_name = "type"];
            uint32 out_label = 5 [json_name = "out-label"];
            string out_interface_name = 6 [json_name = "out-interface-name"];
         }
         repeated IlmLabelStack ilm_label_stack = 1 [json_name = "ilm-label-stack"];
      }
      IlmLabelStacks ilm_label_stacks = 6 [json_name = "ilm-label-stacks"];
      message SessionCar {
         message RsvpTe {
            bool enable = 1 [json_name = "enable"];
            uint32 cir = 2 [json_name = "cir"];
            uint32 cbs = 3 [json_name = "cbs"];
            uint32 pir = 4 [json_name = "pir"];
            uint32 pbs = 5 [json_name = "pbs"];
         }
         RsvpTe rsvp_te = 1 [json_name = "rsvp-te"];
         message SelfPing {
            bool enable = 1 [json_name = "enable"];
            uint32 cir = 2 [json_name = "cir"];
            uint32 cbs = 3 [json_name = "cbs"];
            uint32 pir = 4 [json_name = "pir"];
            uint32 pbs = 5 [json_name = "pbs"];
         }
         SelfPing self_ping = 2 [json_name = "self-ping"];
         message Ldp {
            bool enable = 1 [json_name = "enable"];
            message Tcp {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
               uint32 pir = 3 [json_name = "pir"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            Tcp tcp = 2 [json_name = "tcp"];
            message UdpLocal {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
               uint32 pir = 3 [json_name = "pir"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            UdpLocal udp_local = 3 [json_name = "udp-local"];
            message UdpRemote {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
               uint32 pir = 3 [json_name = "pir"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            UdpRemote udp_remote = 4 [json_name = "udp-remote"];
         }
         Ldp ldp = 3 [json_name = "ldp"];
      }
      SessionCar session_car = 7 [json_name = "session-car"];
      message MplsForward {
         message StaticLabelOnly {
            uint32 max_label = 1 [json_name = "max-label"];
         }
         StaticLabelOnly static_label_only = 1 [json_name = "static-label-only"];
      }
      MplsForward mpls_forward = 8 [json_name = "mpls-forward"];
      message MicroIsolationCar {
         message RsvpTe {
            bool enable = 1 [json_name = "enable"];
            uint32 cir = 2 [json_name = "cir"];
            uint32 cbs = 3 [json_name = "cbs"];
            uint32 pir = 4 [json_name = "pir"];
            uint32 pbs = 5 [json_name = "pbs"];
         }
         RsvpTe rsvp_te = 1 [json_name = "rsvp-te"];
         message Ldp {
            bool enable = 1 [json_name = "enable"];
            message UdpLocal {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
               uint32 pir = 3 [json_name = "pir"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            UdpLocal udp_local = 2 [json_name = "udp-local"];
            message UdpRemote {
               uint32 cir = 1 [json_name = "cir"];
               uint32 cbs = 2 [json_name = "cbs"];
               uint32 pir = 3 [json_name = "pir"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            UdpRemote udp_remote = 3 [json_name = "udp-remote"];
         }
         Ldp ldp = 2 [json_name = "ldp"];
      }
      MicroIsolationCar micro_isolation_car = 9 [json_name = "micro-isolation-car"];
   }
   Common common = 1 [json_name = "common"];
   message Te {
      bool enable = 1 [json_name = "enable"];
      message Global {
         uint32 switch_delay_time = 1 [json_name = "switch-delay-time"];
         uint32 delete_delay_time = 2 [json_name = "delete-delay-time"];
         uint32 frr_timer_weight = 3 [json_name = "frr-timer-weight"];
         uint32 frr_switch_delay_time = 4 [json_name = "frr-switch-delay-time"];
         enum PceDelegate {
            PceDelegate_NO = 0;
            PceDelegate_ACTIVE = 1;
            PceDelegate_ONLYX_STATUSX_REPORT = 2;
         };
         PceDelegate pce_delegate = 5 [json_name = "pce-delegate"];
         bool pce_inter_layer_delegate = 6 [json_name = "pce-inter-layer-delegate"];
         bool pce_cleanup_lsp_state = 7 [json_name = "pce-cleanup-lsp-state"];
         bool pce_cleanup_initiated_lsp = 8 [json_name = "pce-cleanup-initiated-lsp"];
         bool pce_clean_stitch_label = 9 [json_name = "pce-clean-stitch-label"];
         enum PathSelection {
            INVALID_ENUM_VALUE_PathSelection = 0;
            PathSelection_OVERLOAD = 1;
         };
         PathSelection path_selection = 10 [json_name = "path-selection"];
         uint32 lsp_loopback_clear_time = 11 [json_name = "lsp-loopback-clear-time"];
         uint32 ip_prefix_delete_time = 12 [json_name = "ip-prefix-delete-time"];
         bool slsp_deduct_rsvp_bandwidth = 13 [json_name = "slsp-deduct-rsvp-bandwidth"];
         bool reoptimization_link_disable = 14 [json_name = "reoptimization-link-disable"];
         bool rsvp_entropy_label = 15 [json_name = "rsvp-entropy-label"];
         bool bandwidth_auto_config_disable = 16 [json_name = "bandwidth-auto-config-disable"];
         bool suppress_flapping_disable = 17 [json_name = "suppress-flapping-disable"];
         bool path_verification = 18 [json_name = "path-verification"];
         bool soft_preemption = 19 [json_name = "soft-preemption"];
         bool p2mp_enable = 20 [json_name = "p2mp-enable"];
         bool p2mp_auto_frr = 21 [json_name = "p2mp-auto-frr"];
         enum P2MpFrrMbbType {
            INVALID_ENUM_VALUE_P2MpFrrMbbType = 0;
            P2MpFrrMbbType_SUBX_LSP = 1;
            P2MpFrrMbbType_LSP = 2;
            P2MpFrrMbbType_BOTH = 4;
         };
         P2MpFrrMbbType p2mp_frr_mbb_type = 22 [json_name = "p2mp-frr-mbb-type"];
         bool auto_frr_enable = 23 [json_name = "auto-frr-enable"];
         bool auto_frr_self_adapting = 24 [json_name = "auto-frr-self-adapting"];
         bool auto_frr_reoptimization = 25 [json_name = "auto-frr-reoptimization"];
         uint32 auto_frr_frequency = 26 [json_name = "auto-frr-frequency"];
         bool auto_bandwidth_enable = 27 [json_name = "auto-bandwidth-enable"];
         uint32 auto_bandwidth_interval = 28 [json_name = "auto-bandwidth-interval"];
         bool flood_bandwidth_enable = 29 [json_name = "flood-bandwidth-enable"];
         uint32 flood_bandwidth_interval = 30 [json_name = "flood-bandwidth-interval"];
         bool explicit_path_deletion_down = 31 [json_name = "explicit-path-deletion-down"];
         bool self_ping = 32 [json_name = "self-ping"];
         uint32 self_ping_duration = 33 [json_name = "self-ping-duration"];
         uint32 p2mp_leaf_switch_delay_time = 34 [json_name = "p2mp-leaf-switch-delay-time"];
         uint32 p2mp_leaf_delete_delay_time = 35 [json_name = "p2mp-leaf-delete-delay-time"];
         enum DsTeMode {
            DsTeMode_NONX_IETF = 0;
            DsTeMode_IETF = 1;
         };
         DsTeMode ds_te_mode = 36 [json_name = "ds-te-mode"];
         message BcmModel {
            enum BcmMode {
               INVALID_ENUM_VALUE_BcmMode = 0;
               BcmMode_RDM = 1;
               BcmMode_MAM = 2;
            };
            BcmMode bcm_mode = 1 [json_name = "bcm-mode"];
         }
         BcmModel bcm_model = 37 [json_name = "bcm-model"];
      }
      Global global = 2 [json_name = "global"];
      message Rsvp {
         bool enable = 1 [json_name = "enable"];
         message Global {
            bool hello_enable = 1 [json_name = "hello-enable"];
            uint32 max_hello_miss_times = 2 [json_name = "max-hello-miss-times"];
            uint32 hello_interval = 3 [json_name = "hello-interval"];
            bool support_gr_enable = 4 [json_name = "support-gr-enable"];
            uint32 keep_multiplier = 5 [json_name = "keep-multiplier"];
            uint32 refresh_interval = 6 [json_name = "refresh-interval"];
            bool resv_confirm_enable = 7 [json_name = "resv-confirm-enable"];
            bool srefresh_enable = 8 [json_name = "srefresh-enable"];
            bool reliable_delivery_enable = 9 [json_name = "reliable-delivery-enable"];
            uint32 retransmission_interval = 10 [json_name = "retransmission-interval"];
            uint32 retransmission_increment_value = 11 [json_name = "retransmission-increment-value"];
            uint32 challenge_retransmission_interval = 12 [json_name = "challenge-retransmission-interval"];
            uint32 max_challenge_miss_times = 13 [json_name = "max-challenge-miss-times"];
            bool is_send_down_reason = 14 [json_name = "is-send-down-reason"];
            enum TransitRro1 {
               TransitRro1_DISABLE = 0;
               TransitRro1_INCOMING = 1;
               TransitRro1_INCOMINGX_WITHX_LABEL = 2;
               TransitRro1_OUTGOING = 3;
               TransitRro1_OUTGOINGX_WITHX_LABEL = 4;
               TransitRro1_ROUTERX_ID = 5;
               TransitRro1_ROUTERX_IDX_WITHX_LABEL = 6;
            };
            TransitRro1 transit_rro1 = 15 [json_name = "transit-rro1"];
            enum TransitRro2 {
               TransitRro2_DISABLE = 0;
               TransitRro2_INCOMING = 1;
               TransitRro2_INCOMINGX_WITHX_LABEL = 2;
               TransitRro2_OUTGOING = 3;
               TransitRro2_OUTGOINGX_WITHX_LABEL = 4;
               TransitRro2_ROUTERX_ID = 5;
               TransitRro2_ROUTERX_IDX_WITHX_LABEL = 6;
            };
            TransitRro2 transit_rro2 = 16 [json_name = "transit-rro2"];
            enum TransitRro3 {
               TransitRro3_DISABLE = 0;
               TransitRro3_INCOMING = 1;
               TransitRro3_INCOMINGX_WITHX_LABEL = 2;
               TransitRro3_OUTGOING = 3;
               TransitRro3_OUTGOINGX_WITHX_LABEL = 4;
               TransitRro3_ROUTERX_ID = 5;
               TransitRro3_ROUTERX_IDX_WITHX_LABEL = 6;
            };
            TransitRro3 transit_rro3 = 17 [json_name = "transit-rro3"];
            enum EgressRro1 {
               EgressRro1_DISABLE = 0;
               EgressRro1_INCOMING = 1;
               EgressRro1_INCOMINGX_WITHX_LABEL = 2;
               EgressRro1_ROUTERX_ID = 5;
               EgressRro1_ROUTERX_IDX_WITHX_LABEL = 6;
            };
            EgressRro1 egress_rro1 = 18 [json_name = "egress-rro1"];
            enum EgressRro2 {
               EgressRro2_DISABLE = 0;
               EgressRro2_INCOMING = 1;
               EgressRro2_INCOMINGX_WITHX_LABEL = 2;
               EgressRro2_ROUTERX_ID = 5;
               EgressRro2_ROUTERX_IDX_WITHX_LABEL = 6;
            };
            EgressRro2 egress_rro2 = 19 [json_name = "egress-rro2"];
            bool frr_bw_compatible = 20 [json_name = "frr-bw-compatible"];
            bool without_affinity = 21 [json_name = "without-affinity"];
            uint32 soft_preempt_interval = 22 [json_name = "soft-preempt-interval"];
            bool graceful_shutdown_enable = 23 [json_name = "graceful-shutdown-enable"];
            uint32 graceful_shutdown_time = 24 [json_name = "graceful-shutdown-time"];
            repeated string nodeid_session = 25 [json_name = "nodeid-session"];
         }
         Global global = 2 [json_name = "global"];
         message PeerInfos {
            message PeerInfo {
               enum Type {
                  Type_NODEX_ID = 0;
                  Type_NORMAL = 1;
                  Type_CONFIG = 2;
               };
               Type type = 1 [json_name = "type"];
               string ip_address = 2 [json_name = "ip-address"];
               string local_interface_name = 3 [json_name = "local-interface-name"];
               string src_instance = 4 [json_name = "src-instance"];
               string neighbor_src_instance = 5 [json_name = "neighbor-src-instance"];
               uint32 psb_count = 6 [json_name = "psb-count"];
               uint32 rsb_count = 7 [json_name = "rsb-count"];
               enum HelloTypeSent {
                  HelloTypeSent_NONE = 0;
                  HelloTypeSent_REQ = 1;
                  HelloTypeSent_ACK = 2;
               };
               HelloTypeSent hello_type_sent = 8 [json_name = "hello-type-sent"];
               bool hello_extension_enable = 9 [json_name = "hello-extension-enable"];
               bool srefresh_enable = 10 [json_name = "srefresh-enable"];
               bool authentication_enable = 11 [json_name = "authentication-enable"];
               enum AuthenticationType {
                  INVALID_ENUM_VALUE_AuthenticationType = 0;
                  AuthenticationType_HMACX_MD5 = 1;
                  AuthenticationType_KEYCHAIN = 2;
               };
               AuthenticationType authentication_type = 12 [json_name = "authentication-type"];
               string keychain_name = 13 [json_name = "keychain-name"];
               uint32 window_size = 14 [json_name = "window-size"];
               uint32 last_valid_sequence_h = 15 [json_name = "last-valid-sequence-h"];
               uint32 last_valid_sequence_l = 16 [json_name = "last-valid-sequence-l"];
            }
            repeated PeerInfo peer_info = 1 [json_name = "peer-info"];
         }
         PeerInfos peer_infos = 3 [json_name = "peer-infos"];
         message Neighbors {
            message Neighbor {
               string peer_ip_address = 1 [json_name = "peer-ip-address"];
               message Authentication {
                  bool enable = 1 [json_name = "enable"];
                  enum Type {
                     Type_MD5 = 0;
                     Type_MD5X_PLAIN = 1;
                     Type_KEYCHAIN = 2;
                  };
                  Type type = 2 [json_name = "type"];
                  string keychain_name = 3 [json_name = "keychain-name"];
                  string md5_password = 4 [json_name = "md5-password"];
                  uint32 life_time = 5 [json_name = "life-time"];
                  bool handshake_enable = 6 [json_name = "handshake-enable"];
                  uint32 window_size = 7 [json_name = "window-size"];
               }
               Authentication authentication = 2 [json_name = "authentication"];
            }
            repeated Neighbor neighbor = 1 [json_name = "neighbor"];
         }
         Neighbors neighbors = 4 [json_name = "neighbors"];
         message DistributeInstances {
            message DistributeInstance {
               string instance_name = 1 [json_name = "instance-name"];
               string os_group_name = 2 [json_name = "os-group-name"];
            }
            repeated DistributeInstance distribute_instance = 1 [json_name = "distribute-instance"];
         }
         DistributeInstances distribute_instances = 5 [json_name = "distribute-instances"];
         message BfdAllInterfaces {
            bool enable = 1 [json_name = "enable"];
            uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
            uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
            uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
            bool process_pst = 5 [json_name = "process-pst"];
            uint32 tos_exp = 6 [json_name = "tos-exp"];
         }
         BfdAllInterfaces bfd_all_interfaces = 6 [json_name = "bfd-all-interfaces"];
         message Statistics {
            string lsr_id = 1 [json_name = "lsr-id"];
            uint32 lsp_count = 2 [json_name = "lsp-count"];
            uint32 psb_count = 3 [json_name = "psb-count"];
            uint32 rsb_count = 4 [json_name = "rsb-count"];
            uint32 plr_available_lsps_count = 5 [json_name = "plr-available-lsps-count"];
            uint32 plr_inuse_lsps_count = 6 [json_name = "plr-inuse-lsps-count"];
            uint32 mp_available_lsps_count = 7 [json_name = "mp-available-lsps-count"];
            uint32 mp_inuse_lsps_count = 8 [json_name = "mp-inuse-lsps-count"];
            uint32 psb_cleanup_timeout_count = 9 [json_name = "psb-cleanup-timeout-count"];
            uint32 rsb_cleanup_timeout_count = 10 [json_name = "rsb-cleanup-timeout-count"];
            uint32 send_packet_count = 11 [json_name = "send-packet-count"];
            uint32 receive_packet_count = 12 [json_name = "receive-packet-count"];
            uint32 send_path_count = 13 [json_name = "send-path-count"];
            uint32 receive_path_count = 14 [json_name = "receive-path-count"];
            uint32 send_refresh_path_count = 15 [json_name = "send-refresh-path-count"];
            uint32 receive_refresh_path_count = 16 [json_name = "receive-refresh-path-count"];
            uint32 send_resv_count = 17 [json_name = "send-resv-count"];
            uint32 receive_resv_count = 18 [json_name = "receive-resv-count"];
            uint32 send_refresh_resv_count = 19 [json_name = "send-refresh-resv-count"];
            uint32 receive_refresh_resv_count = 20 [json_name = "receive-refresh-resv-count"];
            uint32 send_resv_conf_count = 21 [json_name = "send-resv-conf-count"];
            uint32 receive_resv_conf_count = 22 [json_name = "receive-resv-conf-count"];
            uint32 send_hello_count = 23 [json_name = "send-hello-count"];
            uint32 receive_hello_count = 24 [json_name = "receive-hello-count"];
            uint32 send_ack_count = 25 [json_name = "send-ack-count"];
            uint32 receive_ack_count = 26 [json_name = "receive-ack-count"];
            uint32 send_path_error_count = 27 [json_name = "send-path-error-count"];
            uint32 receive_path_error_count = 28 [json_name = "receive-path-error-count"];
            uint32 send_resv_error_count = 29 [json_name = "send-resv-error-count"];
            uint32 receive_resv_error_count = 30 [json_name = "receive-resv-error-count"];
            uint32 send_path_tear_count = 31 [json_name = "send-path-tear-count"];
            uint32 receive_path_tear_count = 32 [json_name = "receive-path-tear-count"];
            uint32 send_resv_tear_count = 33 [json_name = "send-resv-tear-count"];
            uint32 receive_resv_tear_count = 34 [json_name = "receive-resv-tear-count"];
            uint32 send_srefresh_count = 35 [json_name = "send-srefresh-count"];
            uint32 receive_srefresh_count = 36 [json_name = "receive-srefresh-count"];
            uint32 send_ack_msg_count = 37 [json_name = "send-ack-msg-count"];
            uint32 receive_ack_msg_count = 38 [json_name = "receive-ack-msg-count"];
            uint32 send_challenge_msg_count = 39 [json_name = "send-challenge-msg-count"];
            uint32 receive_challenge_msg_count = 40 [json_name = "receive-challenge-msg-count"];
            uint32 send_response_msg_count = 41 [json_name = "send-response-msg-count"];
            uint32 receive_response_msg_count = 42 [json_name = "receive-response-msg-count"];
            uint32 send_error_msg_count = 43 [json_name = "send-error-msg-count"];
            uint32 receive_error_msg_count = 44 [json_name = "receive-error-msg-count"];
            uint32 send_recovery_path_msg_count = 45 [json_name = "send-recovery-path-msg-count"];
            uint32 receive_recovery_path_msg_count = 46 [json_name = "receive-recovery-path-msg-count"];
            uint32 send_gr_path_msg_count = 47 [json_name = "send-gr-path-msg-count"];
            uint32 receive_gr_path_msg_count = 48 [json_name = "receive-gr-path-msg-count"];
            uint32 send_notify_msg_count = 49 [json_name = "send-notify-msg-count"];
            uint32 receive_notify_msg_count = 50 [json_name = "receive-notify-msg-count"];
            uint32 resource_fault_count = 51 [json_name = "resource-fault-count"];
            uint32 neighbor_counter = 52 [json_name = "neighbor-counter"];
            uint32 bfd_session_counter = 53 [json_name = "bfd-session-counter"];
            uint32 retransmit_packet_count = 54 [json_name = "retransmit-packet-count"];
            uint32 response_packet_count = 55 [json_name = "response-packet-count"];
            uint32 retransmit_path_count = 56 [json_name = "retransmit-path-count"];
            uint32 response_path_count = 57 [json_name = "response-path-count"];
            uint32 retransmit_resv_count = 58 [json_name = "retransmit-resv-count"];
            uint32 response_resv_count = 59 [json_name = "response-resv-count"];
            uint32 retransmit_resv_conf_count = 60 [json_name = "retransmit-resv-conf-count"];
            uint32 response_resv_conf_count = 61 [json_name = "response-resv-conf-count"];
            uint32 retransmit_path_error_count = 62 [json_name = "retransmit-path-error-count"];
            uint32 response_path_error_count = 63 [json_name = "response-path-error-count"];
            uint32 retransmit_resv_error_count = 64 [json_name = "retransmit-resv-error-count"];
            uint32 response_resv_error_count = 65 [json_name = "response-resv-error-count"];
            uint32 retransmit_path_tear_count = 66 [json_name = "retransmit-path-tear-count"];
            uint32 response_path_tear_count = 67 [json_name = "response-path-tear-count"];
            uint32 retransmit_resv_tear_count = 68 [json_name = "retransmit-resv-tear-count"];
            uint32 response_resv_tear_count = 69 [json_name = "response-resv-tear-count"];
            uint32 retransmit_srefresh_count = 70 [json_name = "retransmit-srefresh-count"];
            uint32 response_srefresh_count = 71 [json_name = "response-srefresh-count"];
            uint32 retransmit_recovery_path_msg_count = 72 [json_name = "retransmit-recovery-path-msg-count"];
            uint32 response_recovery_path_msg_count = 73 [json_name = "response-recovery-path-msg-count"];
            uint32 retransmit_gr_path_msg_count = 74 [json_name = "retransmit-gr-path-msg-count"];
            uint32 response_gr_path_msg_count = 75 [json_name = "response-gr-path-msg-count"];
            uint32 retransmit_notify_msg_count = 76 [json_name = "retransmit-notify-msg-count"];
            uint32 response_notify_msg_count = 77 [json_name = "response-notify-msg-count"];
         }
         Statistics statistics = 7 [json_name = "statistics"];
         message RsvpLsps {
            message RsvpLsp {
               string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
               string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
               uint32 session_id = 3 [json_name = "session-id"];
               uint32 lsp_id = 4 [json_name = "lsp-id"];
               string tunnel_name = 5 [json_name = "tunnel-name"];
               enum TunnelRole {
                  INVALID_ENUM_VALUE_TunnelRole = 0;
                  TunnelRole_HEAD = 1;
                  TunnelRole_TRANSIT = 2;
                  TunnelRole_TAIL = 3;
                  TunnelRole_HEADX_ANDX_TAIL = 4;
               };
               TunnelRole tunnel_role = 6 [json_name = "tunnel-role"];
               string incoming_interface_name = 7 [json_name = "incoming-interface-name"];
               string outgoing_interface_name = 8 [json_name = "outgoing-interface-name"];
               uint32 setup_priority = 9 [json_name = "setup-priority"];
               uint32 hold_priority = 10 [json_name = "hold-priority"];
               enum RecordRoute {
                  INVALID_ENUM_VALUE_RecordRoute = 0;
                  RecordRoute_DISABLE = 1;
                  RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                  RecordRoute_RECORDX_LABEL = 3;
               };
               RecordRoute record_route = 11 [json_name = "record-route"];
               bool dste_mode = 12 [json_name = "dste-mode"];
               uint32 reserved_bandwidth = 13 [json_name = "reserved-bandwidth"];
               string explicit_path_name = 14 [json_name = "explicit-path-name"];
               string include_all = 15 [json_name = "include-all"];
               string include_any = 16 [json_name = "include-any"];
               string exclude_any = 17 [json_name = "exclude-any"];
               bool local_protect_enable = 18 [json_name = "local-protect-enable"];
               enum LocalProtectInuse {
                  LocalProtectInuse_FRRX_NOTX_EXIST = 0;
                  LocalProtectInuse_FRRX_AVILABLE = 1;
                  LocalProtectInuse_FRRX_INUSED = 2;
               };
               LocalProtectInuse local_protect_inuse = 19 [json_name = "local-protect-inuse"];
               string bypass_tunnel_name = 20 [json_name = "bypass-tunnel-name"];
               bool permit_bandwidth_share = 21 [json_name = "permit-bandwidth-share"];
               uint32 lsp_mtu = 22 [json_name = "lsp-mtu"];
               enum OperStatus {
                  INVALID_ENUM_VALUE_OperStatus = 0;
                  OperStatus_DOWN = 1;
                  OperStatus_UP = 2;
               };
               OperStatus oper_status = 23 [json_name = "oper-status"];
               uint32 xcindex = 24 [json_name = "xcindex"];
               bool entropy_label = 25 [json_name = "entropy-label"];
               message ArHops {
                  message ArHop {
                     uint32 index = 1 [json_name = "index"];
                     bool incomming_type = 2 [json_name = "incomming-type"];
                     string ip_address = 3 [json_name = "ip-address"];
                     uint32 label = 4 [json_name = "label"];
                     bool local_protect_inuse = 5 [json_name = "local-protect-inuse"];
                     enum LocalProtectType {
                        LocalProtectType_NONE = 0;
                        LocalProtectType_LINK = 1;
                        LocalProtectType_NODE = 2;
                     };
                     LocalProtectType local_protect_type = 6 [json_name = "local-protect-type"];
                     bool bandwidth_protection = 7 [json_name = "bandwidth-protection"];
                  }
                  repeated ArHop ar_hop = 1 [json_name = "ar-hop"];
               }
               ArHops ar_hops = 26 [json_name = "ar-hops"];
               message CHops {
                  message CHop {
                     uint32 path_index = 1 [json_name = "path-index"];
                     uint32 index = 2 [json_name = "index"];
                     bool include = 3 [json_name = "include"];
                     enum HopType {
                        INVALID_ENUM_VALUE_HopType = 0;
                        HopType_STRICT = 1;
                        HopType_LOOSE = 2;
                     };
                     HopType hop_type = 4 [json_name = "hop-type"];
                     enum AddressType {
                        INVALID_ENUM_VALUE_AddressType = 0;
                        AddressType_IPV4 = 1;
                     };
                     AddressType address_type = 5 [json_name = "address-type"];
                     string ip_address = 6 [json_name = "ip-address"];
                  }
                  repeated CHop c_hop = 1 [json_name = "c-hop"];
               }
               CHops c_hops = 27 [json_name = "c-hops"];
               message DetourLsps {
                  message DetourLsp {
                     string local_addr = 1 [json_name = "local-addr"];
                     string nbr_addr = 2 [json_name = "nbr-addr"];
                     enum LsrRole {
                        INVALID_ENUM_VALUE_LsrRole = 0;
                        LsrRole_HEAD = 1;
                        LsrRole_TRANSIT = 2;
                        LsrRole_TAIL = 3;
                        LsrRole_HEADX_ANDX_TAIL = 4;
                     };
                     LsrRole lsr_role = 3 [json_name = "lsr-role"];
                     string incoming_interface_name = 4 [json_name = "incoming-interface-name"];
                     string outgoing_interface_name = 5 [json_name = "outgoing-interface-name"];
                     uint32 in_label = 6 [json_name = "in-label"];
                     uint32 out_label = 7 [json_name = "out-label"];
                     uint32 xcindex = 8 [json_name = "xcindex"];
                  }
                  repeated DetourLsp detour_lsp = 1 [json_name = "detour-lsp"];
               }
               DetourLsps detour_lsps = 28 [json_name = "detour-lsps"];
               message LockedPaths {
                  message LockedPath {
                     uint32 path_index = 1 [json_name = "path-index"];
                     uint32 hop_index = 2 [json_name = "hop-index"];
                     string hop_address = 3 [json_name = "hop-address"];
                  }
                  repeated LockedPath locked_path = 1 [json_name = "locked-path"];
               }
               LockedPaths locked_paths = 29 [json_name = "locked-paths"];
            }
            repeated RsvpLsp rsvp_lsp = 1 [json_name = "rsvp-lsp"];
         }
         RsvpLsps rsvp_lsps = 8 [json_name = "rsvp-lsps"];
      }
      Rsvp rsvp = 3 [json_name = "rsvp"];
      message Cspf {
         bool enable = 1 [json_name = "enable"];
         enum PreferredIgp {
            INVALID_ENUM_VALUE_PreferredIgp = 0;
            PreferredIgp_OSPF = 1;
            PreferredIgp_ISIS = 2;
         };
         PreferredIgp preferred_igp = 2 [json_name = "preferred-igp"];
         enum MultiInstancesShortPathMode {
            MultiInstancesShortPathMode_DISABLE = 0;
            MultiInstancesShortPathMode_ALLX_IGP = 1;
            MultiInstancesShortPathMode_PREFERREDX_IGP = 2;
         };
         MultiInstancesShortPathMode multi_instances_short_path_mode = 3 [json_name = "multi-instances-short-path-mode"];
         enum TieBreaking {
            INVALID_ENUM_VALUE_TieBreaking = 0;
            TieBreaking_LEASTX_FILL = 1;
            TieBreaking_MOSTX_FILL = 2;
            TieBreaking_RANDOM = 3;
         };
         TieBreaking tie_breaking = 4 [json_name = "tie-breaking"];
         enum PathMetricType {
            INVALID_ENUM_VALUE_PathMetricType = 0;
            PathMetricType_IGP = 2;
            PathMetricType_TE = 3;
         };
         PathMetricType path_metric_type = 5 [json_name = "path-metric-type"];
         enum SrlgPathCalculateMode {
            SrlgPathCalculateMode_DEFAULT = 0;
            SrlgPathCalculateMode_STRICT = 1;
            SrlgPathCalculateMode_PREFERRED = 2;
         };
         SrlgPathCalculateMode srlg_path_calculate_mode = 6 [json_name = "srlg-path-calculate-mode"];
         bool fast_notice = 7 [json_name = "fast-notice"];
         bool disable_optimize_mode = 8 [json_name = "disable-optimize-mode"];
         message Tedbs {
            message Tedb {
               enum IgpType {
                  INVALID_ENUM_VALUE_IgpType = 0;
                  IgpType_OSPF = 1;
                  IgpType_ISIS = 2;
               };
               IgpType igp_type = 1 [json_name = "igp-type"];
               uint32 process_id = 2 [json_name = "process-id"];
               string area_id = 3 [json_name = "area-id"];
               string router_id = 4 [json_name = "router-id"];
               uint32 link_count = 5 [json_name = "link-count"];
            }
            repeated Tedb tedb = 1 [json_name = "tedb"];
         }
         Tedbs tedbs = 9 [json_name = "tedbs"];
         message Srdbs {
            message Srdb {
               uint32 process_id = 1 [json_name = "process-id"];
               uint32 area_id = 2 [json_name = "area-id"];
               enum IgpType {
                  INVALID_ENUM_VALUE_IgpType = 0;
                  IgpType_OSPF = 1;
                  IgpType_ISIS = 2;
               };
               IgpType igp_type = 3 [json_name = "igp-type"];
               string router_id = 4 [json_name = "router-id"];
               uint32 ipv4_node_sid = 5 [json_name = "ipv4-node-sid"];
               uint32 adjacent_sid_count = 6 [json_name = "adjacent-sid-count"];
            }
            repeated Srdb srdb = 1 [json_name = "srdb"];
         }
         Srdbs srdbs = 10 [json_name = "srdbs"];
         uint32 preferred_ospf_process_id = 11 [json_name = "preferred-ospf-process-id"];
         string preferred_ospf_area_id = 12 [json_name = "preferred-ospf-area-id"];
         uint32 preferred_isis_process_id = 13 [json_name = "preferred-isis-process-id"];
         enum PreferredIsisLevel {
            INVALID_ENUM_VALUE_PreferredIsisLevel = 0;
            PreferredIsisLevel_LEVEL1 = 1;
            PreferredIsisLevel_LEVEL2 = 2;
         };
         PreferredIsisLevel preferred_isis_level = 14 [json_name = "preferred-isis-level"];
         enum MultiPreferredIgp {
            INVALID_ENUM_VALUE_MultiPreferredIgp = 0;
            MultiPreferredIgp_OSPF = 1;
            MultiPreferredIgp_ISIS = 2;
         };
         MultiPreferredIgp multi_preferred_igp = 15 [json_name = "multi-preferred-igp"];
         uint32 multi_preferred_ospf_process_id = 16 [json_name = "multi-preferred-ospf-process-id"];
         uint32 multi_preferred_isis_process_id = 17 [json_name = "multi-preferred-isis-process-id"];
      }
      Cspf cspf = 4 [json_name = "cspf"];
      message BfdForLsp {
         bool enable = 1 [json_name = "enable"];
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_ONEX_ARMX_ECHO = 1;
         };
         Mode mode = 2 [json_name = "mode"];
         uint32 min_tx_interval = 3 [json_name = "min-tx-interval"];
         uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
         uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
      }
      BfdForLsp bfd_for_lsp = 5 [json_name = "bfd-for-lsp"];
      message BfdForTunnel {
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_ONEX_ARMX_ECHO = 1;
         };
         Mode mode = 1 [json_name = "mode"];
         uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
         uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
         uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
      }
      BfdForTunnel bfd_for_tunnel = 6 [json_name = "bfd-for-tunnel"];
      message TunnelLocks {
         message TunnelLock {
            string name = 1 [json_name = "name"];
         }
         repeated TunnelLock tunnel_lock = 1 [json_name = "tunnel-lock"];
      }
      TunnelLocks tunnel_locks = 7 [json_name = "tunnel-locks"];
      message P2MpLeafLists {
         message P2MpLeafList {
            string name = 1 [json_name = "name"];
            message Leafs {
               message Leaf {
                  string destination = 1 [json_name = "destination"];
                  string explicit_path_name = 2 [json_name = "explicit-path-name"];
               }
               repeated Leaf leaf = 1 [json_name = "leaf"];
            }
            Leafs leafs = 2 [json_name = "leafs"];
         }
         repeated P2MpLeafList p2mp_leaf_list = 1 [json_name = "p2mp-leaf-list"];
      }
      P2MpLeafLists p2mp_leaf_lists = 8 [json_name = "p2mp-leaf-lists"];
      message P2MpTemplates {
         message P2MpTemplate {
            string name = 1 [json_name = "name"];
            bool cspf_disable = 2 [json_name = "cspf-disable"];
            enum RecordRoute {
               INVALID_ENUM_VALUE_RecordRoute = 0;
               RecordRoute_DISABLE = 1;
               RecordRoute_RECORDX_ROUTEX_ONLY = 2;
               RecordRoute_RECORDX_LABEL = 3;
            };
            RecordRoute record_route = 3 [json_name = "record-route"];
            enum ResvStyle {
               INVALID_ENUM_VALUE_ResvStyle = 0;
               ResvStyle_SE = 1;
               ResvStyle_FF = 2;
            };
            ResvStyle resv_style = 4 [json_name = "resv-style"];
            uint32 setup_priority = 5 [json_name = "setup-priority"];
            uint32 hold_priority = 6 [json_name = "hold-priority"];
            uint32 bandwidth = 7 [json_name = "bandwidth"];
            bool reoptimization = 8 [json_name = "reoptimization"];
            uint32 reoptimization_frequency = 9 [json_name = "reoptimization-frequency"];
            bool lsp_tp_outbound = 10 [json_name = "lsp-tp-outbound"];
            enum PathMetricType {
               INVALID_ENUM_VALUE_PathMetricType = 0;
               PathMetricType_NONE = 1;
               PathMetricType_IGP = 2;
               PathMetricType_TE = 3;
            };
            PathMetricType path_metric_type = 11 [json_name = "path-metric-type"];
            enum TieBreaking {
               INVALID_ENUM_VALUE_TieBreaking = 0;
               TieBreaking_LEASTX_FILL = 1;
               TieBreaking_MOSTX_FILL = 2;
               TieBreaking_RANDOM = 3;
               TieBreaking_DEFAULT = 4;
            };
            TieBreaking tie_breaking = 12 [json_name = "tie-breaking"];
            uint32 hop_limit = 13 [json_name = "hop-limit"];
            string include_any = 14 [json_name = "include-any"];
            string exclude_any = 15 [json_name = "exclude-any"];
            string include_all = 16 [json_name = "include-all"];
            string leaf_list_name = 17 [json_name = "leaf-list-name"];
            repeated string include_any_affinity_name = 18 [json_name = "include-any-affinity-name"];
            repeated string include_all_affinity_name = 19 [json_name = "include-all-affinity-name"];
            repeated string exclude_affinity_name = 20 [json_name = "exclude-affinity-name"];
            uint32 refer_number = 21 [json_name = "refer-number"];
            message Frr {
               bool enable = 1 [json_name = "enable"];
               bool bandwidth_protection_enable = 2 [json_name = "bandwidth-protection-enable"];
               uint32 bandwidth = 3 [json_name = "bandwidth"];
               uint32 setup_priority = 4 [json_name = "setup-priority"];
               uint32 hold_priority = 5 [json_name = "hold-priority"];
            }
            Frr frr = 22 [json_name = "frr"];
            message Bfd {
               bool enable = 1 [json_name = "enable"];
               uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
               uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
               uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
            }
            Bfd bfd = 23 [json_name = "bfd"];
            enum SoftPreempt {
               SoftPreempt_DISABLE = 0;
               SoftPreempt_ENABLE = 1;
               SoftPreempt_BLOCK = 2;
            };
            SoftPreempt soft_preempt = 24 [json_name = "soft-preempt"];
         }
         repeated P2MpTemplate p2mp_template = 1 [json_name = "p2mp-template"];
      }
      P2MpTemplates p2mp_templates = 9 [json_name = "p2mp-templates"];
      message P2PTemplates {
         message P2PTemplate {
            string name = 1 [json_name = "name"];
            enum RecordRoute {
               INVALID_ENUM_VALUE_RecordRoute = 0;
               RecordRoute_DISABLE = 1;
               RecordRoute_RECORDX_ROUTEX_ONLY = 2;
               RecordRoute_RECORDX_LABEL = 3;
            };
            RecordRoute record_route = 2 [json_name = "record-route"];
            enum ResvStyle {
               INVALID_ENUM_VALUE_ResvStyle = 0;
               ResvStyle_SE = 1;
               ResvStyle_FF = 2;
            };
            ResvStyle resv_style = 3 [json_name = "resv-style"];
            uint32 setup_priority = 4 [json_name = "setup-priority"];
            uint32 hold_priority = 5 [json_name = "hold-priority"];
            uint32 bandwidth = 6 [json_name = "bandwidth"];
            bool reoptimization = 7 [json_name = "reoptimization"];
            uint32 reoptimization_frequency = 8 [json_name = "reoptimization-frequency"];
            bool lsp_tp_outbound = 9 [json_name = "lsp-tp-outbound"];
            enum PathMetricType {
               INVALID_ENUM_VALUE_PathMetricType = 0;
               PathMetricType_NONE = 1;
               PathMetricType_IGP = 2;
               PathMetricType_TE = 3;
            };
            PathMetricType path_metric_type = 10 [json_name = "path-metric-type"];
            enum TieBreaking {
               INVALID_ENUM_VALUE_TieBreaking = 0;
               TieBreaking_LEASTX_FILL = 1;
               TieBreaking_MOSTX_FILL = 2;
               TieBreaking_RANDOM = 3;
               TieBreaking_DEFAULT = 4;
            };
            TieBreaking tie_breaking = 11 [json_name = "tie-breaking"];
            enum AutoBandwidthMode {
               AutoBandwidthMode_NONE = 0;
               AutoBandwidthMode_COLLECTX_BW = 1;
               AutoBandwidthMode_ADJUSTMENT = 2;
            };
            AutoBandwidthMode auto_bandwidth_mode = 12 [json_name = "auto-bandwidth-mode"];
            uint32 auto_bandwidth_frequency = 13 [json_name = "auto-bandwidth-frequency"];
            uint32 auto_bandwidth_max_bandwidth = 14 [json_name = "auto-bandwidth-max-bandwidth"];
            uint32 auto_bandwidth_min_bandwidth = 15 [json_name = "auto-bandwidth-min-bandwidth"];
            uint32 auto_bandwidth_threshold = 16 [json_name = "auto-bandwidth-threshold"];
            uint64 auto_bandwidth_threshold_absolute = 17 [json_name = "auto-bandwidth-threshold-absolute"];
            bool hotstandby_enable = 18 [json_name = "hotstandby-enable"];
            enum HotstandbyRevertiveMode {
               HotstandbyRevertiveMode_NONX_REVERTIVE = 0;
               HotstandbyRevertiveMode_REVERTIVE = 1;
            };
            HotstandbyRevertiveMode hotstandby_revertive_mode = 19 [json_name = "hotstandby-revertive-mode"];
            uint32 hotstandby_wtr = 20 [json_name = "hotstandby-wtr"];
            bool hotstandby_path_overlap = 21 [json_name = "hotstandby-path-overlap"];
            bool hotstandby_dynamic_bandwidth = 22 [json_name = "hotstandby-dynamic-bandwidth"];
            bool statistic_enable = 23 [json_name = "statistic-enable"];
            enum EntropyLabel {
               EntropyLabel_DEFAULT = 0;
               EntropyLabel_ENABLE = 1;
               EntropyLabel_BLOCK = 2;
            };
            EntropyLabel entropy_label = 24 [json_name = "entropy-label"];
            uint32 refer_number = 25 [json_name = "refer-number"];
            message Frr {
               bool enable = 1 [json_name = "enable"];
               bool bandwidth_protection_enable = 2 [json_name = "bandwidth-protection-enable"];
               uint32 bandwidth = 3 [json_name = "bandwidth"];
               uint32 setup_priority = 4 [json_name = "setup-priority"];
               uint32 hold_priority = 5 [json_name = "hold-priority"];
            }
            Frr frr = 26 [json_name = "frr"];
            message LspPaths {
               message LspPath {
                  enum PathType {
                     PathType_PRIMARY = 0;
                     PathType_HOTX_STANDBY = 1;
                     PathType_ORDINARY = 2;
                     PathType_BESTX_EFFORT = 3;
                  };
                  PathType path_type = 1 [json_name = "path-type"];
                  uint32 hop_limit = 2 [json_name = "hop-limit"];
                  string include_all = 3 [json_name = "include-all"];
                  string include_any = 4 [json_name = "include-any"];
                  string exclude_any = 5 [json_name = "exclude-any"];
                  repeated string include_any_affinity_name = 6 [json_name = "include-any-affinity-name"];
                  repeated string include_all_affinity_name = 7 [json_name = "include-all-affinity-name"];
                  repeated string exclude_affinity_name = 8 [json_name = "exclude-affinity-name"];
               }
               repeated LspPath lsp_path = 1 [json_name = "lsp-path"];
            }
            LspPaths lsp_paths = 27 [json_name = "lsp-paths"];
            message Bfd {
               bool enable = 1 [json_name = "enable"];
               uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
               uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
               uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
            }
            Bfd bfd = 28 [json_name = "bfd"];
         }
         repeated P2PTemplate p2p_template = 1 [json_name = "p2p-template"];
      }
      P2PTemplates p2p_templates = 10 [json_name = "p2p-templates"];
      message IpPrefixs {
         message IpPrefix {
            string name = 1 [json_name = "name"];
            string template_name = 2 [json_name = "template-name"];
         }
         repeated IpPrefix ip_prefix = 1 [json_name = "ip-prefix"];
      }
      IpPrefixs ip_prefixs = 11 [json_name = "ip-prefixs"];
      message TeClassMapping {
         message TeClasses {
            message TeClass {
               enum TeClassMode {
                  TeClassMode_TEX_CLASS0 = 0;
                  TeClassMode_TEX_CLASS1 = 1;
                  TeClassMode_TEX_CLASS2 = 2;
                  TeClassMode_TEX_CLASS3 = 3;
                  TeClassMode_TEX_CLASS4 = 4;
                  TeClassMode_TEX_CLASS5 = 5;
                  TeClassMode_TEX_CLASS6 = 6;
                  TeClassMode_TEX_CLASS7 = 7;
               };
               TeClassMode te_class_mode = 1 [json_name = "te-class-mode"];
               enum TeClassType {
                  TeClassType_CT0 = 0;
                  TeClassType_CT1 = 1;
                  TeClassType_CT2 = 2;
                  TeClassType_CT3 = 3;
                  TeClassType_CT4 = 4;
                  TeClassType_CT5 = 5;
                  TeClassType_CT6 = 6;
                  TeClassType_CT7 = 7;
               };
               TeClassType te_class_type = 2 [json_name = "te-class-type"];
               uint32 priority = 3 [json_name = "priority"];
               string description = 4 [json_name = "description"];
            }
            repeated TeClass te_class = 1 [json_name = "te-class"];
         }
         TeClasses te_classes = 1 [json_name = "te-classes"];
      }
      TeClassMapping te_class_mapping = 12 [json_name = "te-class-mapping"];
      message AssociateGroups {
         message AssociateGroup {
            uint32 group_id = 1 [json_name = "group-id"];
            enum BackupType {
               BackupType_LOADX_BALANCE = 0;
               BackupType_BACKUP = 1;
            };
            BackupType backup_type = 2 [json_name = "backup-type"];
            message OriginalTunnels {
               message OriginalTunnel {
                  string name = 1 [json_name = "name"];
                  enum State {
                     INVALID_ENUM_VALUE_State = 0;
                     State_UP = 1;
                     State_DOWN = 2;
                     State_FRRX_INUSE = 4;
                  };
                  State state = 2 [json_name = "state"];
                  message SplitTunnels {
                     message SplitTunnel {
                        string name = 1 [json_name = "name"];
                        enum State {
                           INVALID_ENUM_VALUE_State = 0;
                           State_UP = 1;
                           State_DOWN = 2;
                           State_FRRX_INUSE = 4;
                        };
                        State state = 2 [json_name = "state"];
                     }
                     repeated SplitTunnel split_tunnel = 1 [json_name = "split-tunnel"];
                  }
                  SplitTunnels split_tunnels = 3 [json_name = "split-tunnels"];
               }
               repeated OriginalTunnel original_tunnel = 1 [json_name = "original-tunnel"];
            }
            OriginalTunnels original_tunnels = 3 [json_name = "original-tunnels"];
            uint32 wtr = 4 [json_name = "wtr"];
         }
         repeated AssociateGroup associate_group = 1 [json_name = "associate-group"];
      }
      AssociateGroups associate_groups = 13 [json_name = "associate-groups"];
      message TunnelStatistic {
         uint32 ingress_tunnel = 1 [json_name = "ingress-tunnel"];
         uint32 ingress_tunnel_up = 2 [json_name = "ingress-tunnel-up"];
         uint32 ingress_cr_lsps_up = 3 [json_name = "ingress-cr-lsps-up"];
         uint32 ingress_tunnel_modified = 4 [json_name = "ingress-tunnel-modified"];
         uint32 ingress_tunnel_in_progress = 5 [json_name = "ingress-tunnel-in-progress"];
         uint32 ingress_tunnel_failed = 6 [json_name = "ingress-tunnel-failed"];
         uint32 transit_tunnel_up = 7 [json_name = "transit-tunnel-up"];
         uint32 egress_tunnel_up = 8 [json_name = "egress-tunnel-up"];
         uint32 tunnel_group_count = 9 [json_name = "tunnel-group-count"];
         uint32 p2mp_tunnel_count = 10 [json_name = "p2mp-tunnel-count"];
      }
      TunnelStatistic tunnel_statistic = 14 [json_name = "tunnel-statistic"];
      message StaticCrLsps {
         message StaticCrLsp {
            string lsp_name = 1 [json_name = "lsp-name"];
            enum LspStatus {
               LspStatus_DOWN = 0;
               LspStatus_UP = 1;
               LspStatus_NONE = 2;
            };
            LspStatus lsp_status = 2 [json_name = "lsp-status"];
            message LsrType_Ingress {
               message Ingress6 {
                  string destination = 1 [json_name = "destination"];
                  string next_hop = 2 [json_name = "next-hop"];
                  uint32 out_label = 3 [json_name = "out-label"];
                  string tunnel_interface_name = 4 [json_name = "tunnel-interface-name"];
                  string out_interface_name = 5 [json_name = "out-interface-name"];
                  uint32 bandwidth = 6 [json_name = "bandwidth"];
                  uint32 pir = 7 [json_name = "pir"];
                  uint32 enter_ring_id = 8 [json_name = "enter-ring-id"];
                  enum EnterRingDirection {
                     INVALID_ENUM_VALUE_EnterRingDirection = 0;
                     EnterRingDirection_EAST = 1;
                     EnterRingDirection_WEST = 2;
                  };
                  EnterRingDirection enter_ring_direction = 9 [json_name = "enter-ring-direction"];
                  uint32 enter_ring_sink_node_id = 10 [json_name = "enter-ring-sink-node-id"];
                  enum OutBearerType {
                     INVALID_ENUM_VALUE_OutBearerType = 0;
                     OutBearerType_INTERFACE = 1;
                     OutBearerType_RING = 2;
                     OutBearerType_TUNNEL = 3;
                  };
                  OutBearerType out_bearer_type = 11 [json_name = "out-bearer-type"];
                  uint32 bandwidth_ct0 = 12 [json_name = "bandwidth-ct0"];
               }
               Ingress6 ingress6 = 1 [json_name = "ingress"];
            }
            message LsrType_Transit {
               message Transit6 {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string in_interface_name = 2 [json_name = "in-interface-name"];
                  string out_interface_name = 3 [json_name = "out-interface-name"];
                  string next_hop = 4 [json_name = "next-hop"];
                  uint32 out_label = 5 [json_name = "out-label"];
                  string ingress_lsr_id = 6 [json_name = "ingress-lsr-id"];
                  string egress_lsr_id = 7 [json_name = "egress-lsr-id"];
                  uint32 tunnel_id = 8 [json_name = "tunnel-id"];
                  uint32 bandwidth = 9 [json_name = "bandwidth"];
                  uint32 pir = 10 [json_name = "pir"];
                  uint32 enter_ring_id = 11 [json_name = "enter-ring-id"];
                  enum EnterRingDirection {
                     INVALID_ENUM_VALUE_EnterRingDirection = 0;
                     EnterRingDirection_EAST = 1;
                     EnterRingDirection_WEST = 2;
                  };
                  EnterRingDirection enter_ring_direction = 12 [json_name = "enter-ring-direction"];
                  uint32 enter_ring_sink_node_id = 13 [json_name = "enter-ring-sink-node-id"];
                  enum OutBearerType {
                     INVALID_ENUM_VALUE_OutBearerType = 0;
                     OutBearerType_INTERFACE = 1;
                     OutBearerType_RING = 2;
                     OutBearerType_TUNNEL = 3;
                  };
                  OutBearerType out_bearer_type = 14 [json_name = "out-bearer-type"];
                  uint32 quit_ring_id = 15 [json_name = "quit-ring-id"];
                  enum QuitRingDirection {
                     INVALID_ENUM_VALUE_QuitRingDirection = 0;
                     QuitRingDirection_EAST = 1;
                     QuitRingDirection_WEST = 2;
                  };
                  QuitRingDirection quit_ring_direction = 16 [json_name = "quit-ring-direction"];
                  uint32 quit_ring_sink_node_id = 17 [json_name = "quit-ring-sink-node-id"];
                  enum InBearerType {
                     INVALID_ENUM_VALUE_InBearerType = 0;
                     InBearerType_INTERFACE = 1;
                     InBearerType_RING = 2;
                     InBearerType_TUNNEL = 3;
                  };
                  InBearerType in_bearer_type = 18 [json_name = "in-bearer-type"];
                  uint32 bandwidth_ct0 = 19 [json_name = "bandwidth-ct0"];
               }
               Transit6 transit6 = 1 [json_name = "transit"];
            }
            message LsrType_SrTeSimulateTransit {
               message SrTeSimulateTransit6 {
                  uint32 sid = 1 [json_name = "sid"];
                  string incoming_interface_name = 2 [json_name = "incoming-interface-name"];
                  string outgoing_interface_name = 3 [json_name = "outgoing-interface-name"];
                  string next_hop = 4 [json_name = "next-hop"];
               }
               SrTeSimulateTransit6 sr_te_simulate_transit = 1 [json_name = "sr-te-simulate-transit"];
            }
            message LsrType_Egress {
               message Egress6 {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string in_interface_name = 2 [json_name = "in-interface-name"];
                  string ingress_lsr_id = 3 [json_name = "ingress-lsr-id"];
                  uint32 tunnel_id = 4 [json_name = "tunnel-id"];
                  uint32 quit_ring_id = 5 [json_name = "quit-ring-id"];
                  enum QuitRingDirection {
                     INVALID_ENUM_VALUE_QuitRingDirection = 0;
                     QuitRingDirection_EAST = 1;
                     QuitRingDirection_WEST = 2;
                  };
                  QuitRingDirection quit_ring_direction = 6 [json_name = "quit-ring-direction"];
                  uint32 quit_ring_sink_node_id = 7 [json_name = "quit-ring-sink-node-id"];
                  enum InBearerType {
                     INVALID_ENUM_VALUE_InBearerType = 0;
                     InBearerType_INTERFACE = 1;
                     InBearerType_RING = 2;
                     InBearerType_TUNNEL = 3;
                  };
                  InBearerType in_bearer_type = 8 [json_name = "in-bearer-type"];
               }
               Egress6 egress6 = 1 [json_name = "egress"];
            }
            oneof LsrType {
               LsrType_Ingress lsr_type_ingress = 3 [json_name = "ingress"];
               LsrType_Transit lsr_type_transit = 4 [json_name = "transit"];
               LsrType_SrTeSimulateTransit lsr_type_sr_te_simulate_transit = 5 [json_name = "sr-te-simulate-transit"];
               LsrType_Egress lsr_type_egress = 6 [json_name = "egress"];
            }
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_STRING = 1;
               Mode_TUNNELX_INTERFACE = 2;
            };
            Mode mode = 7 [json_name = "mode"];
            string tunnel_interface_name = 8 [json_name = "tunnel-interface-name"];
         }
         repeated StaticCrLsp static_cr_lsp = 1 [json_name = "static-cr-lsp"];
      }
      StaticCrLsps static_cr_lsps_1 = 15 [json_name = "static-cr-lsps"];
      message BidirectionStaticCrLsps {
         message BidirectionStaticCrLsp {
            string lsp_name = 1 [json_name = "lsp-name"];
            string description = 2 [json_name = "description"];
            bool hard_pipe_enable = 3 [json_name = "hard-pipe-enable"];
            enum LspStatus {
               LspStatus_DOWN = 0;
               LspStatus_UP = 1;
               LspStatus_NONE = 2;
            };
            LspStatus lsp_status = 4 [json_name = "lsp-status"];
            message LsrType_Ingress {
               message Ingress6 {
                  message Forward {
                     string next_hop = 1 [json_name = "next-hop"];
                     uint32 out_label = 2 [json_name = "out-label"];
                     string out_interface_name = 3 [json_name = "out-interface-name"];
                     uint32 bandwidth_ct0 = 4 [json_name = "bandwidth-ct0"];
                     uint32 pir = 5 [json_name = "pir"];
                  }
                  Forward forward = 1 [json_name = "forward"];
                  message Backward {
                     uint32 in_label = 1 [json_name = "in-label"];
                     string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                     uint32 tunnel_id = 3 [json_name = "tunnel-id"];
                  }
                  Backward backward = 2 [json_name = "backward"];
               }
               Ingress6 ingress6 = 1 [json_name = "ingress"];
            }
            message LsrType_Transit {
               message Transit6 {
                  message Forward {
                     uint32 in_label = 1 [json_name = "in-label"];
                     uint32 out_label = 2 [json_name = "out-label"];
                     string next_hop = 3 [json_name = "next-hop"];
                     string out_interface_name = 4 [json_name = "out-interface-name"];
                     string ingress_lsr_id = 5 [json_name = "ingress-lsr-id"];
                     string egress_lsr_id = 6 [json_name = "egress-lsr-id"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     uint32 bandwidth_ct0 = 8 [json_name = "bandwidth-ct0"];
                     uint32 pir = 9 [json_name = "pir"];
                  }
                  Forward forward = 1 [json_name = "forward"];
                  message Backward {
                     uint32 in_label = 1 [json_name = "in-label"];
                     uint32 out_label = 2 [json_name = "out-label"];
                     string next_hop = 3 [json_name = "next-hop"];
                     string out_interface_name = 4 [json_name = "out-interface-name"];
                     uint32 bandwidth_ct0 = 5 [json_name = "bandwidth-ct0"];
                     uint32 pir = 6 [json_name = "pir"];
                  }
                  Backward backward = 2 [json_name = "backward"];
                  message LspLoopbackInfo {
                     enum LoopbackState {
                        LoopbackState_STOP = 0;
                        LoopbackState_START = 1;
                     };
                     LoopbackState loopback_state = 1 [json_name = "loopback-state"];
                     uint32 remain_time = 2 [json_name = "remain-time"];
                  }
                  LspLoopbackInfo lsp_loopback_info = 3 [json_name = "lsp-loopback-info"];
               }
               Transit6 transit6 = 1 [json_name = "transit"];
            }
            message LsrType_Egress {
               message Egress6 {
                  message Forward {
                     uint32 in_label = 1 [json_name = "in-label"];
                     string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
                     uint32 tunnel_id = 3 [json_name = "tunnel-id"];
                  }
                  Forward forward = 1 [json_name = "forward"];
                  message Backward {
                     string next_hop = 1 [json_name = "next-hop"];
                     uint32 out_label = 2 [json_name = "out-label"];
                     string out_interface_name = 3 [json_name = "out-interface-name"];
                     uint32 bandwidth_ct0 = 4 [json_name = "bandwidth-ct0"];
                     uint32 pir = 5 [json_name = "pir"];
                  }
                  Backward backward = 2 [json_name = "backward"];
               }
               Egress6 egress6 = 1 [json_name = "egress"];
            }
            oneof LsrType {
               LsrType_Ingress lsr_type_ingress = 5 [json_name = "ingress"];
               LsrType_Transit lsr_type_transit = 6 [json_name = "transit"];
               LsrType_Egress lsr_type_egress = 7 [json_name = "egress"];
            }
         }
         repeated BidirectionStaticCrLsp bidirection_static_cr_lsp = 1 [json_name = "bidirection-static-cr-lsp"];
      }
      BidirectionStaticCrLsps bidirection_static_cr_lsps = 16 [json_name = "bidirection-static-cr-lsps"];
      message StitchLabelStacks {
         message StitchLabelStack {
            uint32 stitch_label = 1 [json_name = "stitch-label"];
            string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 3 [json_name = "egress-lsr-id"];
            uint32 session_id = 4 [json_name = "session-id"];
            uint32 lsp_id = 5 [json_name = "lsp-id"];
            bool is_local_reserved = 6 [json_name = "is-local-reserved"];
            message CHops {
               message CHop {
                  uint32 index = 1 [json_name = "index"];
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_STRICT = 1;
                     Type_LOOSE = 2;
                  };
                  Type type = 2 [json_name = "type"];
                  uint32 label = 3 [json_name = "label"];
                  enum LabelType {
                     LabelType_LINK = 0;
                     LabelType_NODE = 1;
                     LabelType_BINDING = 2;
                  };
                  LabelType label_type = 4 [json_name = "label-type"];
                  string nai = 5 [json_name = "nai"];
               }
               repeated CHop c_hop = 1 [json_name = "c-hop"];
            }
            CHops c_hops = 7 [json_name = "c-hops"];
         }
         repeated StitchLabelStack stitch_label_stack = 1 [json_name = "stitch-label-stack"];
      }
      StitchLabelStacks stitch_label_stacks = 17 [json_name = "stitch-label-stacks"];
      message BfdSessions {
         message BfdSession {
            string fec_address = 1 [json_name = "fec-address"];
            string next_hop = 2 [json_name = "next-hop"];
            uint32 discriminator = 3 [json_name = "discriminator"];
            string outgoing_interface_name = 4 [json_name = "outgoing-interface-name"];
            string tunnel_name = 5 [json_name = "tunnel-name"];
            uint32 lsp_index = 6 [json_name = "lsp-index"];
            enum SignalProtocol {
               INVALID_ENUM_VALUE_SignalProtocol = 0;
               SignalProtocol_RSVPX_TE = 2;
               SignalProtocol_SEGMENTX_ROUTING = 6;
            };
            SignalProtocol signal_protocol = 7 [json_name = "signal-protocol"];
            uint32 tunnel_id = 8 [json_name = "tunnel-id"];
            uint32 lsp_id = 9 [json_name = "lsp-id"];
            uint32 min_tx_interval = 10 [json_name = "min-tx-interval"];
            uint32 min_rx_interval = 11 [json_name = "min-rx-interval"];
            enum BfdState {
               BfdState_ADMINX_DOWN = 0;
               BfdState_DOWN = 1;
               BfdState_INIT = 2;
               BfdState_UP = 3;
            };
            BfdState bfd_state = 12 [json_name = "bfd-state"];
            uint32 session_age = 13 [json_name = "session-age"];
         }
         repeated BfdSession bfd_session = 1 [json_name = "bfd-session"];
      }
      BfdSessions bfd_sessions = 18 [json_name = "bfd-sessions"];
      message AutoTunnels {
         message AutoTunnel {
            string name = 1 [json_name = "name"];
            string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 3 [json_name = "egress-lsr-id"];
            uint32 session_id = 4 [json_name = "session-id"];
            enum State {
               INVALID_ENUM_VALUE_State = 0;
               State_UP = 1;
               State_DOWN = 2;
               State_SETTING = 3;
               State_MBBX_WAITX_FORX_DELETING = 4;
               State_MBBX_WAITX_FORX_SWITCH = 5;
               State_ALLX_PATHX_READY = 6;
               State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
               State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
               State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
            };
            State state = 5 [json_name = "state"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_BYPASS = 1;
               Type_IPX_PREFIX = 2;
               Type_INIT = 3;
            };
            Type type = 6 [json_name = "type"];
            string ip_prefix_name = 7 [json_name = "ip-prefix-name"];
            string template_name = 8 [json_name = "template-name"];
            enum WorkingLspName {
               INVALID_ENUM_VALUE_WorkingLspName = 0;
               WorkingLspName_PRIMARY = 1;
               WorkingLspName_HOTX_STANDBY = 2;
               WorkingLspName_ORDINARY = 3;
               WorkingLspName_BESTX_EFFORT = 4;
            };
            WorkingLspName working_lsp_name = 9 [json_name = "working-lsp-name"];
            uint32 working_lsp_id = 10 [json_name = "working-lsp-id"];
            bool entropy_label = 11 [json_name = "entropy-label"];
            message Lsps {
               message Lsp {
                  string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                  string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                  uint32 session_id = 3 [json_name = "session-id"];
                  uint32 lsp_id = 4 [json_name = "lsp-id"];
                  uint32 setup_priority = 5 [json_name = "setup-priority"];
                  uint32 hold_priority = 6 [json_name = "hold-priority"];
                  enum RecordRouteType {
                     INVALID_ENUM_VALUE_RecordRouteType = 0;
                     RecordRouteType_DISABLE = 1;
                     RecordRouteType_RECORDX_ROUTEX_ONLY = 2;
                     RecordRouteType_RECORDX_LABEL = 3;
                  };
                  RecordRouteType record_route_type = 7 [json_name = "record-route-type"];
                  bool ds_te_mode = 8 [json_name = "ds-te-mode"];
                  uint32 bandwidth = 9 [json_name = "bandwidth"];
                  string hop_name = 10 [json_name = "hop-name"];
                  string include_all_affinity = 11 [json_name = "include-all-affinity"];
                  string include_any_affinity = 12 [json_name = "include-any-affinity"];
                  string exclude_any_affinity = 13 [json_name = "exclude-any-affinity"];
                  bool protect_enable = 14 [json_name = "protect-enable"];
                  enum ProtectInuse {
                     ProtectInuse_FRRX_NOTX_EXIST = 0;
                     ProtectInuse_FRRX_AVILABLE = 1;
                     ProtectInuse_FRRX_INUSED = 2;
                  };
                  ProtectInuse protect_inuse = 15 [json_name = "protect-inuse"];
                  string name = 16 [json_name = "name"];
                  bool merge_permitted = 17 [json_name = "merge-permitted"];
                  uint32 mtu = 18 [json_name = "mtu"];
                  enum OperStatus {
                     INVALID_ENUM_VALUE_OperStatus = 0;
                     OperStatus_DOWN = 1;
                     OperStatus_UP = 2;
                  };
                  OperStatus oper_status = 19 [json_name = "oper-status"];
                  uint32 xcindex = 20 [json_name = "xcindex"];
                  message ArHops {
                     message ArHop {
                        uint32 index = 1 [json_name = "index"];
                        bool incomming_type = 2 [json_name = "incomming-type"];
                        string hop_ip_address = 3 [json_name = "hop-ip-address"];
                        uint32 label = 4 [json_name = "label"];
                        bool protect_inuse = 5 [json_name = "protect-inuse"];
                        enum ProtectType {
                           ProtectType_NONE = 0;
                           ProtectType_LINK = 1;
                           ProtectType_NODE = 2;
                        };
                        ProtectType protect_type = 6 [json_name = "protect-type"];
                        bool bandwidth_protection_enable = 7 [json_name = "bandwidth-protection-enable"];
                     }
                     repeated ArHop ar_hop = 1 [json_name = "ar-hop"];
                  }
                  ArHops ar_hops = 21 [json_name = "ar-hops"];
                  message CHops {
                     message CHop {
                        uint32 path_index = 1 [json_name = "path-index"];
                        uint32 hop_index = 2 [json_name = "hop-index"];
                        bool is_include = 3 [json_name = "is-include"];
                        enum HopType {
                           INVALID_ENUM_VALUE_HopType = 0;
                           HopType_STRICT = 1;
                           HopType_LOOSE = 2;
                        };
                        HopType hop_type = 4 [json_name = "hop-type"];
                        enum AddressType {
                           INVALID_ENUM_VALUE_AddressType = 0;
                           AddressType_IPV4 = 1;
                        };
                        AddressType address_type = 5 [json_name = "address-type"];
                        string hop_ip_address = 6 [json_name = "hop-ip-address"];
                     }
                     repeated CHop c_hop = 1 [json_name = "c-hop"];
                  }
                  CHops c_hops = 22 [json_name = "c-hops"];
               }
               repeated Lsp lsp = 1 [json_name = "lsp"];
            }
            Lsps lsps = 12 [json_name = "lsps"];
         }
         repeated AutoTunnel auto_tunnel = 1 [json_name = "auto-tunnel"];
      }
      AutoTunnels auto_tunnels = 19 [json_name = "auto-tunnels"];
      message BidirStaticCrLsps {
         message BidirStaticCrLsp {
            string lsp_name = 1 [json_name = "lsp-name"];
            message LsrType_Ingress {
               message IngressForward {
                  string next_hop = 1 [json_name = "next-hop"];
                  string out_interface_name = 2 [json_name = "out-interface-name"];
                  uint32 out_label = 3 [json_name = "out-label"];
                  uint32 enter_ring_id = 4 [json_name = "enter-ring-id"];
                  enum EnterRingDirection {
                     INVALID_ENUM_VALUE_EnterRingDirection = 0;
                     EnterRingDirection_EAST = 1;
                     EnterRingDirection_WEST = 2;
                  };
                  EnterRingDirection enter_ring_direction = 5 [json_name = "enter-ring-direction"];
                  uint32 enter_ring_sink_node_id = 6 [json_name = "enter-ring-sink-node-id"];
                  enum OutBearerType {
                     INVALID_ENUM_VALUE_OutBearerType = 0;
                     OutBearerType_INTERFACE = 1;
                     OutBearerType_RING = 2;
                     OutBearerType_TUNNEL = 3;
                  };
                  OutBearerType out_bearer_type = 7 [json_name = "out-bearer-type"];
                  uint32 backup_label = 8 [json_name = "backup-label"];
                  uint32 bandwidth_ct0 = 9 [json_name = "bandwidth-ct0"];
                  uint32 pir = 10 [json_name = "pir"];
               }
               IngressForward ingress_forward = 1 [json_name = "ingress-forward"];
               message IngressBackward {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                  uint32 tunnel_id = 3 [json_name = "tunnel-id"];
               }
               IngressBackward ingress_backward = 2 [json_name = "ingress-backward"];
            }
            message LsrType_Transit {
               enum InBearerType {
                  INVALID_ENUM_VALUE_InBearerType = 0;
                  InBearerType_INTERFACE = 1;
                  InBearerType_RING = 2;
                  InBearerType_TUNNEL = 3;
               };
               InBearerType in_bearer_type = 1 [json_name = "in-bearer-type"];
               enum OutBearerType {
                  INVALID_ENUM_VALUE_OutBearerType = 0;
                  OutBearerType_INTERFACE = 1;
                  OutBearerType_RING = 2;
                  OutBearerType_TUNNEL = 3;
               };
               OutBearerType out_bearer_type = 2 [json_name = "out-bearer-type"];
               bool tunnel_loop = 3 [json_name = "tunnel-loop"];
               message TransitForward {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string next_hop = 2 [json_name = "next-hop"];
                  string out_interface_name = 3 [json_name = "out-interface-name"];
                  uint32 out_label = 4 [json_name = "out-label"];
                  uint32 enter_ring_id = 5 [json_name = "enter-ring-id"];
                  enum EnterRingDirection {
                     INVALID_ENUM_VALUE_EnterRingDirection = 0;
                     EnterRingDirection_EAST = 1;
                     EnterRingDirection_WEST = 2;
                  };
                  EnterRingDirection enter_ring_direction = 6 [json_name = "enter-ring-direction"];
                  uint32 enter_ring_sink_node_id = 7 [json_name = "enter-ring-sink-node-id"];
                  uint32 backup_label = 8 [json_name = "backup-label"];
                  string ingress_lsr_id = 9 [json_name = "ingress-lsr-id"];
                  string egress_lsr_id = 10 [json_name = "egress-lsr-id"];
                  uint32 tunnel_id = 11 [json_name = "tunnel-id"];
                  uint32 bandwidth_ct0 = 12 [json_name = "bandwidth-ct0"];
                  uint32 pir = 13 [json_name = "pir"];
               }
               TransitForward transit_forward = 4 [json_name = "transit-forward"];
               message TransitBackward {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string next_hop = 2 [json_name = "next-hop"];
                  string out_interface_name = 3 [json_name = "out-interface-name"];
                  uint32 out_label = 4 [json_name = "out-label"];
                  uint32 quit_ring_id = 5 [json_name = "quit-ring-id"];
                  enum QuitRingDirection {
                     INVALID_ENUM_VALUE_QuitRingDirection = 0;
                     QuitRingDirection_EAST = 1;
                     QuitRingDirection_WEST = 2;
                  };
                  QuitRingDirection quit_ring_direction = 6 [json_name = "quit-ring-direction"];
                  uint32 quit_ring_sink_node_id = 7 [json_name = "quit-ring-sink-node-id"];
                  uint32 backup_label = 8 [json_name = "backup-label"];
                  uint32 bandwidth_ct0 = 9 [json_name = "bandwidth-ct0"];
                  uint32 pir = 10 [json_name = "pir"];
               }
               TransitBackward transit_backward = 5 [json_name = "transit-backward"];
            }
            message LsrType_Egress {
               message EgressForward {
                  uint32 in_label = 1 [json_name = "in-label"];
                  string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
                  uint32 tunnel_id = 3 [json_name = "tunnel-id"];
               }
               EgressForward egress_forward = 1 [json_name = "egress-forward"];
               message EgressBackward {
                  string next_hop = 1 [json_name = "next-hop"];
                  string out_interface_name = 2 [json_name = "out-interface-name"];
                  uint32 out_label = 3 [json_name = "out-label"];
                  uint32 quit_ring_id = 4 [json_name = "quit-ring-id"];
                  enum QuitRingDirection {
                     INVALID_ENUM_VALUE_QuitRingDirection = 0;
                     QuitRingDirection_EAST = 1;
                     QuitRingDirection_WEST = 2;
                  };
                  QuitRingDirection quit_ring_direction = 5 [json_name = "quit-ring-direction"];
                  uint32 quit_ring_sink_node_id = 6 [json_name = "quit-ring-sink-node-id"];
                  enum InBearerType {
                     INVALID_ENUM_VALUE_InBearerType = 0;
                     InBearerType_INTERFACE = 1;
                     InBearerType_RING = 2;
                     InBearerType_TUNNEL = 3;
                  };
                  InBearerType in_bearer_type = 7 [json_name = "in-bearer-type"];
                  uint32 bandwidth_ct0 = 8 [json_name = "bandwidth-ct0"];
                  uint32 pir = 9 [json_name = "pir"];
               }
               EgressBackward egress_backward = 2 [json_name = "egress-backward"];
            }
            oneof LsrType {
               LsrType_Ingress lsr_type_ingress = 2 [json_name = "ingress"];
               LsrType_Transit lsr_type_transit = 3 [json_name = "transit"];
               LsrType_Egress lsr_type_egress = 4 [json_name = "egress"];
            }
         }
         repeated BidirStaticCrLsp bidir_static_cr_lsp = 1 [json_name = "bidir-static-cr-lsp"];
      }
      BidirStaticCrLsps bidir_static_cr_lsps = 21 [json_name = "bidir-static-cr-lsps"];
      message Rings {
         message Ring {
            uint32 id = 1 [json_name = "id"];
            string name = 2 [json_name = "name"];
            uint32 node_id = 3 [json_name = "node-id"];
            enum Node {
               Node_SHORTX_WRAPPING = 0;
               Node_WRAPPING = 1;
               Node_STEERING = 2;
            };
            Node node = 4 [json_name = "node"];
            string east_next_hop = 5 [json_name = "east-next-hop"];
            string east_out_interface = 6 [json_name = "east-out-interface"];
            string west_next_hop = 7 [json_name = "west-next-hop"];
            string west_out_interface = 8 [json_name = "west-out-interface"];
            bool aps_east_enable = 9 [json_name = "aps-east-enable"];
            bool aps_west_enable = 10 [json_name = "aps-west-enable"];
            uint32 hold_off = 11 [json_name = "hold-off"];
            uint32 wtr = 12 [json_name = "wtr"];
            uint32 cir = 13 [json_name = "cir"];
            uint32 pir = 14 [json_name = "pir"];
            uint32 cbs = 15 [json_name = "cbs"];
            uint32 pbs = 16 [json_name = "pbs"];
            uint32 mtu = 17 [json_name = "mtu"];
            enum WorkingExp {
               WorkingExp_BE = 0;
               WorkingExp_AF1 = 1;
               WorkingExp_AF2 = 2;
               WorkingExp_AF3 = 3;
               WorkingExp_AF4 = 4;
               WorkingExp_EF = 5;
               WorkingExp_CS6 = 6;
               WorkingExp_CS7 = 7;
               WorkingExp_NONE = 255;
            };
            WorkingExp working_exp = 18 [json_name = "working-exp"];
            enum ProtectionExp {
               ProtectionExp_BE = 0;
               ProtectionExp_AF1 = 1;
               ProtectionExp_AF2 = 2;
               ProtectionExp_AF3 = 3;
               ProtectionExp_AF4 = 4;
               ProtectionExp_EF = 5;
               ProtectionExp_CS6 = 6;
               ProtectionExp_CS7 = 7;
               ProtectionExp_NONE = 255;
            };
            ProtectionExp protection_exp = 19 [json_name = "protection-exp"];
            message RingSinkNodes {
               message RingSinkNode {
                  uint32 node_id = 1 [json_name = "node-id"];
                  uint32 work_west_in_label = 2 [json_name = "work-west-in-label"];
                  uint32 work_west_out_label = 3 [json_name = "work-west-out-label"];
                  uint32 work_east_in_label = 4 [json_name = "work-east-in-label"];
                  uint32 work_east_out_label = 5 [json_name = "work-east-out-label"];
                  uint32 protect_west_in_label = 6 [json_name = "protect-west-in-label"];
                  uint32 protect_west_out_label = 7 [json_name = "protect-west-out-label"];
                  uint32 protect_east_in_label = 8 [json_name = "protect-east-in-label"];
                  uint32 protect_east_out_label = 9 [json_name = "protect-east-out-label"];
               }
               repeated RingSinkNode ring_sink_node = 1 [json_name = "ring-sink-node"];
            }
            RingSinkNodes ring_sink_nodes = 20 [json_name = "ring-sink-nodes"];
         }
         repeated Ring ring = 1 [json_name = "ring"];
      }
      Rings rings = 22 [json_name = "rings"];
      message StaticBypassLabels {
         message StaticBypassLabel {
            uint32 bypass_label = 1 [json_name = "bypass-label"];
            string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
            uint32 tunnel_id = 3 [json_name = "tunnel-id"];
            string egress_lsr_id = 4 [json_name = "egress-lsr-id"];
         }
         repeated StaticBypassLabel static_bypass_label = 1 [json_name = "static-bypass-label"];
      }
      StaticBypassLabels static_bypass_labels = 23 [json_name = "static-bypass-labels"];
      message SegmentCrcErrors {
         message SegmentCrcError {
            string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
            uint32 session_id = 3 [json_name = "session-id"];
            uint32 lsp_id = 4 [json_name = "lsp-id"];
            enum LspType {
               INVALID_ENUM_VALUE_LspType = 0;
               LspType_PRIMARY = 1;
               LspType_HOTX_STANDBY = 2;
            };
            LspType lsp_type = 5 [json_name = "lsp-type"];
            string tunnel_name = 6 [json_name = "tunnel-name"];
            enum LsrRole {
               INVALID_ENUM_VALUE_LsrRole = 0;
               LsrRole_INGRESS = 1;
               LsrRole_TRANSIT = 2;
               LsrRole_EGRESS = 3;
            };
            LsrRole lsr_role = 7 [json_name = "lsr-role"];
            enum BitErrorDetectionState {
               BitErrorDetectionState_STOP = 0;
               BitErrorDetectionState_START = 1;
               BitErrorDetectionState_INVALID = 2;
            };
            BitErrorDetectionState bit_error_detection_state = 8 [json_name = "bit-error-detection-state"];
            uint32 forward_bit_error_coe_value = 9 [json_name = "forward-bit-error-coe-value"];
            uint32 forward_bit_error_pow_value = 10 [json_name = "forward-bit-error-pow-value"];
            uint32 reverse_bit_error_coe_value = 11 [json_name = "reverse-bit-error-coe-value"];
            uint32 reverse_bit_error_pow_value = 12 [json_name = "reverse-bit-error-pow-value"];
            message SegmentCrcErrRouters {
               message SegmentCrcErrRouter {
                  string lsr_id = 1 [json_name = "lsr-id"];
                  uint32 bit_error_coe_value = 2 [json_name = "bit-error-coe-value"];
                  uint32 bit_error_pow_value = 3 [json_name = "bit-error-pow-value"];
               }
               repeated SegmentCrcErrRouter segment_crc_err_router = 1 [json_name = "segment-crc-err-router"];
            }
            SegmentCrcErrRouters segment_crc_err_routers = 13 [json_name = "segment-crc-err-routers"];
         }
         repeated SegmentCrcError segment_crc_error = 1 [json_name = "segment-crc-error"];
      }
      SegmentCrcErrors segment_crc_errors = 24 [json_name = "segment-crc-errors"];
      message TeTunnels {
         message TeTunnel {
            string tunnel_name = 1 [json_name = "tunnel-name"];
            enum SignalProtocol {
               INVALID_ENUM_VALUE_SignalProtocol = 0;
               SignalProtocol_RSVPX_TE = 2;
               SignalProtocol_CRX_STATIC = 4;
               SignalProtocol_SEGMENTX_ROUTING = 6;
            };
            SignalProtocol signal_protocol = 2 [json_name = "signal-protocol"];
            string ingress_lsr_id = 3 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 4 [json_name = "egress-lsr-id"];
            string ipv6_ingress_lsr_id = 5 [json_name = "ipv6-ingress-lsr-id"];
            string ipv6_egress_lsr_id = 6 [json_name = "ipv6-egress-lsr-id"];
            uint32 session_id = 7 [json_name = "session-id"];
            string tunnel_description = 8 [json_name = "tunnel-description"];
            enum LsrRole {
               INVALID_ENUM_VALUE_LsrRole = 0;
               LsrRole_INGRESS = 1;
               LsrRole_TRANSIT = 2;
               LsrRole_EGRESS = 3;
            };
            LsrRole lsr_role = 9 [json_name = "lsr-role"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_UNIDIRECTIONAL = 1;
               Direction_BIDIRECTIONAL = 2;
            };
            Direction direction = 10 [json_name = "direction"];
            uint32 cir = 11 [json_name = "cir"];
            uint32 cbs = 12 [json_name = "cbs"];
            uint32 pir = 13 [json_name = "pir"];
            uint32 pbs = 14 [json_name = "pbs"];
            uint32 remain_bandwidth = 15 [json_name = "remain-bandwidth"];
            enum Exp {
               Exp_BE = 0;
               Exp_AF1 = 1;
               Exp_AF2 = 2;
               Exp_AF3 = 3;
               Exp_AF4 = 4;
               Exp_EF = 5;
               Exp_CS6 = 6;
               Exp_CS7 = 7;
               Exp_NONE = 8;
            };
            Exp exp = 16 [json_name = "exp"];
            enum InBearerType {
               INVALID_ENUM_VALUE_InBearerType = 0;
               InBearerType_INTERFACE = 1;
               InBearerType_RING = 2;
               InBearerType_TUNNEL = 3;
            };
            InBearerType in_bearer_type = 17 [json_name = "in-bearer-type"];
            string incoming_interface_name = 18 [json_name = "incoming-interface-name"];
            uint32 quit_ring_id = 19 [json_name = "quit-ring-id"];
            enum QuitRingDirection {
               INVALID_ENUM_VALUE_QuitRingDirection = 0;
               QuitRingDirection_EAST = 1;
               QuitRingDirection_WEST = 2;
            };
            QuitRingDirection quit_ring_direction = 20 [json_name = "quit-ring-direction"];
            uint32 quit_ring_src_node_id = 21 [json_name = "quit-ring-src-node-id"];
            enum OutBearerType {
               INVALID_ENUM_VALUE_OutBearerType = 0;
               OutBearerType_INTERFACE = 1;
               OutBearerType_RING = 2;
               OutBearerType_TUNNEL = 3;
            };
            OutBearerType out_bearer_type = 22 [json_name = "out-bearer-type"];
            string outgoing_interface_name = 23 [json_name = "outgoing-interface-name"];
            uint32 enter_ring_id = 24 [json_name = "enter-ring-id"];
            enum EnterRingDirection {
               INVALID_ENUM_VALUE_EnterRingDirection = 0;
               EnterRingDirection_EAST = 1;
               EnterRingDirection_WEST = 2;
            };
            EnterRingDirection enter_ring_direction = 25 [json_name = "enter-ring-direction"];
            uint32 enter_ring_sink_node_id = 26 [json_name = "enter-ring-sink-node-id"];
            bool reverse_for_binding = 27 [json_name = "reverse-for-binding"];
         }
         repeated TeTunnel te_tunnel = 1 [json_name = "te-tunnel"];
      }
      TeTunnels te_tunnels = 25 [json_name = "te-tunnels"];
      message TeEgressLsps {
         message TeEgressLsp {
            string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
            uint32 session_id = 3 [json_name = "session-id"];
            string tunnel_name = 4 [json_name = "tunnel-name"];
            enum SignalProtocol {
               INVALID_ENUM_VALUE_SignalProtocol = 0;
               SignalProtocol_RSVPX_TE = 2;
               SignalProtocol_CRX_STATIC = 4;
               SignalProtocol_SEGMENTX_ROUTING = 6;
            };
            SignalProtocol signal_protocol = 5 [json_name = "signal-protocol"];
            uint32 reverse_lsp_id = 6 [json_name = "reverse-lsp-id"];
            string tunnel_description = 7 [json_name = "tunnel-description"];
            enum LsrRole {
               INVALID_ENUM_VALUE_LsrRole = 0;
               LsrRole_INGRESS = 1;
               LsrRole_TRANSIT = 2;
               LsrRole_EGRESS = 3;
            };
            LsrRole lsr_role = 8 [json_name = "lsr-role"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_UNIDIRECTIONAL = 1;
               Direction_BIDIRECTIONAL = 2;
            };
            Direction direction = 9 [json_name = "direction"];
            uint32 cir = 10 [json_name = "cir"];
            uint32 cbs = 11 [json_name = "cbs"];
            uint32 pir = 12 [json_name = "pir"];
            uint32 pbs = 13 [json_name = "pbs"];
            uint32 remain_bandwidth = 14 [json_name = "remain-bandwidth"];
            enum Exp {
               Exp_BE = 0;
               Exp_AF1 = 1;
               Exp_AF2 = 2;
               Exp_AF3 = 3;
               Exp_AF4 = 4;
               Exp_EF = 5;
               Exp_CS6 = 6;
               Exp_CS7 = 7;
               Exp_NONE = 8;
            };
            Exp exp = 15 [json_name = "exp"];
            enum InBearerType {
               INVALID_ENUM_VALUE_InBearerType = 0;
               InBearerType_INTERFACE = 1;
               InBearerType_RING = 2;
               InBearerType_TUNNEL = 3;
            };
            InBearerType in_bearer_type = 16 [json_name = "in-bearer-type"];
            string incoming_interface_name = 17 [json_name = "incoming-interface-name"];
            uint32 quit_ring_id = 18 [json_name = "quit-ring-id"];
            enum QuitRingDirection {
               INVALID_ENUM_VALUE_QuitRingDirection = 0;
               QuitRingDirection_EAST = 1;
               QuitRingDirection_WEST = 2;
            };
            QuitRingDirection quit_ring_direction = 19 [json_name = "quit-ring-direction"];
            uint32 quit_ring_src_node_id = 20 [json_name = "quit-ring-src-node-id"];
            enum OutBearerType {
               INVALID_ENUM_VALUE_OutBearerType = 0;
               OutBearerType_INTERFACE = 1;
               OutBearerType_RING = 2;
               OutBearerType_TUNNEL = 3;
            };
            OutBearerType out_bearer_type = 21 [json_name = "out-bearer-type"];
            string outgoing_interface_name = 22 [json_name = "outgoing-interface-name"];
            uint32 enter_ring_id = 23 [json_name = "enter-ring-id"];
            enum EnterRingDirection {
               INVALID_ENUM_VALUE_EnterRingDirection = 0;
               EnterRingDirection_EAST = 1;
               EnterRingDirection_WEST = 2;
            };
            EnterRingDirection enter_ring_direction = 24 [json_name = "enter-ring-direction"];
            uint32 enter_ring_sink_node_id = 25 [json_name = "enter-ring-sink-node-id"];
         }
         repeated TeEgressLsp te_egress_lsp = 1 [json_name = "te-egress-lsp"];
      }
      TeEgressLsps te_egress_lsps = 26 [json_name = "te-egress-lsps"];
      message TeCrlspInfos {
         message TeCrlspInfo {
            enum LspType {
               LspType_PRIMARY = 0;
               LspType_HOTX_STANDBY = 1;
               LspType_ORDINARY = 2;
               LspType_BESTX_EFFORT = 3;
               LspType_NONE = 4;
            };
            LspType lsp_type = 1 [json_name = "lsp-type"];
            bool is_modify_lsp = 2 [json_name = "is-modify-lsp"];
            string tunnel_name = 3 [json_name = "tunnel-name"];
            enum SignalProtocol {
               INVALID_ENUM_VALUE_SignalProtocol = 0;
               SignalProtocol_RSVPX_TE = 3;
               SignalProtocol_SEGMENTX_ROUTING = 6;
            };
            SignalProtocol signal_protocol = 4 [json_name = "signal-protocol"];
            string ingress_lsr_id = 5 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 6 [json_name = "egress-lsr-id"];
            uint32 session_id = 7 [json_name = "session-id"];
            uint32 lsp_id = 8 [json_name = "lsp-id"];
            enum LspState {
               LspState_DOWN = 0;
               LspState_UP = 1;
               LspState_FRRX_INUSE = 2;
               LspState_GRACEFULX_SWITCH = 3;
               LspState_GRACEFULX_DELETE = 4;
            };
            LspState lsp_state = 9 [json_name = "lsp-state"];
            enum LspBfdState {
               LspBfdState_UNKNOWN = 0;
               LspBfdState_UP = 1;
               LspBfdState_DOWN = 2;
               LspBfdState_BFDX_CRC = 4;
            };
            LspBfdState lsp_bfd_state = 10 [json_name = "lsp-bfd-state"];
            enum LspPceFlag {
               LspPceFlag_NORMAL = 0;
               LspPceFlag_OVERLOAD = 1;
            };
            LspPceFlag lsp_pce_flag = 11 [json_name = "lsp-pce-flag"];
            enum LspPathSetupType {
               LspPathSetupType_CSPF = 0;
               LspPathSetupType_PCE = 1;
               LspPathSetupType_NETCONF = 2;
               LspPathSetupType_EXPLICIT = 3;
               LspPathSetupType_IPX_ROUTE = 4;
               LspPathSetupType_NONE = 5;
            };
            LspPathSetupType lsp_path_setup_type = 12 [json_name = "lsp-path-setup-type"];
            bool is_best_effort = 13 [json_name = "is-best-effort"];
         }
         repeated TeCrlspInfo te_crlsp_info = 1 [json_name = "te-crlsp-info"];
      }
      TeCrlspInfos te_crlsp_infos = 27 [json_name = "te-crlsp-infos"];
      message RsvpTeAutoTunnels {
         message RsvpTeAutoTunnel {
            string tunnel_name = 1 [json_name = "tunnel-name"];
            string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 3 [json_name = "egress-lsr-id"];
            uint32 session_id = 4 [json_name = "session-id"];
            enum State {
               INVALID_ENUM_VALUE_State = 0;
               State_UP = 1;
               State_DOWN = 2;
               State_SETTING = 3;
               State_MBBX_WAITX_FORX_DELETING = 4;
               State_MBBX_WAITX_FORX_SWITCH = 5;
               State_ALLX_PATHX_READY = 6;
               State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
               State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
               State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
            };
            State state = 5 [json_name = "state"];
            enum TunnelType {
               INVALID_ENUM_VALUE_TunnelType = 0;
               TunnelType_BYPASS = 1;
               TunnelType_IPX_PREFIX = 2;
               TunnelType_INIT = 3;
            };
            TunnelType tunnel_type = 6 [json_name = "tunnel-type"];
            string ip_prefix_name = 7 [json_name = "ip-prefix-name"];
            string template_name = 8 [json_name = "template-name"];
            enum WorkingLspType {
               WorkingLspType_PRIMARY = 0;
               WorkingLspType_HOTX_STANDBY = 1;
               WorkingLspType_ORDINARY = 2;
               WorkingLspType_BESTX_EFFORT = 3;
            };
            WorkingLspType working_lsp_type = 9 [json_name = "working-lsp-type"];
            uint32 working_lsp_id = 10 [json_name = "working-lsp-id"];
            bool entropy_label_enable = 11 [json_name = "entropy-label-enable"];
            message Lsps {
               message Lsp {
                  string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                  string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                  uint32 session_id = 3 [json_name = "session-id"];
                  uint32 lsp_id = 4 [json_name = "lsp-id"];
                  uint32 setup_priority = 5 [json_name = "setup-priority"];
                  uint32 hold_priority = 6 [json_name = "hold-priority"];
                  enum RecordRoute {
                     INVALID_ENUM_VALUE_RecordRoute = 0;
                     RecordRoute_DISABLE = 1;
                     RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                     RecordRoute_RECORDX_LABEL = 3;
                  };
                  RecordRoute record_route = 7 [json_name = "record-route"];
                  bool dste_mode = 8 [json_name = "dste-mode"];
                  uint32 reserved_bandwidth = 9 [json_name = "reserved-bandwidth"];
                  string explicit_path_name = 10 [json_name = "explicit-path-name"];
                  string include_all = 11 [json_name = "include-all"];
                  string include_any = 12 [json_name = "include-any"];
                  string exclude_any = 13 [json_name = "exclude-any"];
                  bool local_protect_enable = 14 [json_name = "local-protect-enable"];
                  enum LocalProtectInuse {
                     LocalProtectInuse_FRRX_NOTX_EXIST = 0;
                     LocalProtectInuse_FRRX_AVILABLE = 1;
                     LocalProtectInuse_FRRX_INUSED = 2;
                  };
                  LocalProtectInuse local_protect_inuse = 15 [json_name = "local-protect-inuse"];
                  string bypass_tunnel_name = 16 [json_name = "bypass-tunnel-name"];
                  bool permit_bandwidth_share = 17 [json_name = "permit-bandwidth-share"];
                  uint32 lsp_mtu = 18 [json_name = "lsp-mtu"];
                  enum OperStatus {
                     INVALID_ENUM_VALUE_OperStatus = 0;
                     OperStatus_DOWN = 1;
                     OperStatus_UP = 2;
                  };
                  OperStatus oper_status = 19 [json_name = "oper-status"];
                  uint32 xcindex = 20 [json_name = "xcindex"];
                  message ArHops {
                     message ArHop {
                        uint32 index = 1 [json_name = "index"];
                        bool incomming_type = 2 [json_name = "incomming-type"];
                        string ip_address = 3 [json_name = "ip-address"];
                        uint32 label = 4 [json_name = "label"];
                        bool local_protect_inuse = 5 [json_name = "local-protect-inuse"];
                        enum LocalProtectType {
                           LocalProtectType_NONE = 0;
                           LocalProtectType_LINK = 1;
                           LocalProtectType_NODE = 2;
                        };
                        LocalProtectType local_protect_type = 6 [json_name = "local-protect-type"];
                        bool bandwidth_protection = 7 [json_name = "bandwidth-protection"];
                     }
                     repeated ArHop ar_hop = 1 [json_name = "ar-hop"];
                  }
                  ArHops ar_hops = 21 [json_name = "ar-hops"];
                  message CHops {
                     message CHop {
                        uint32 path_index = 1 [json_name = "path-index"];
                        uint32 index = 2 [json_name = "index"];
                        bool include = 3 [json_name = "include"];
                        enum HopType {
                           INVALID_ENUM_VALUE_HopType = 0;
                           HopType_STRICT = 1;
                           HopType_LOOSE = 2;
                        };
                        HopType hop_type = 4 [json_name = "hop-type"];
                        enum AddressType {
                           INVALID_ENUM_VALUE_AddressType = 0;
                           AddressType_IPV4 = 1;
                        };
                        AddressType address_type = 5 [json_name = "address-type"];
                        string ip_address = 6 [json_name = "ip-address"];
                     }
                     repeated CHop c_hop = 1 [json_name = "c-hop"];
                  }
                  CHops c_hops = 22 [json_name = "c-hops"];
               }
               repeated Lsp lsp = 1 [json_name = "lsp"];
            }
            Lsps lsps = 12 [json_name = "lsps"];
         }
         repeated RsvpTeAutoTunnel rsvp_te_auto_tunnel = 1 [json_name = "rsvp-te-auto-tunnel"];
      }
      RsvpTeAutoTunnels rsvp_te_auto_tunnels = 28 [json_name = "rsvp-te-auto-tunnels"];
      message P2MpTeAutoTunnels {
         message P2MpTeAutoTunnel {
            string tunnel_name = 1 [json_name = "tunnel-name"];
            string template_name = 2 [json_name = "template-name"];
            enum State {
               INVALID_ENUM_VALUE_State = 0;
               State_UP = 1;
               State_DOWN = 2;
               State_SETTING = 3;
               State_MBBX_WAITX_FORX_DELETING = 4;
               State_MBBX_WAITX_FORX_SWITCH = 5;
               State_ALLX_PATHX_READY = 6;
               State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
               State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
               State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
            };
            State state = 3 [json_name = "state"];
            string ingress_lsr_id = 4 [json_name = "ingress-lsr-id"];
            uint32 session_id = 5 [json_name = "session-id"];
            string p2mp_id = 6 [json_name = "p2mp-id"];
            enum AdminStatus {
               INVALID_ENUM_VALUE_AdminStatus = 0;
               AdminStatus_DOWN = 1;
               AdminStatus_UP = 2;
            };
            AdminStatus admin_status = 7 [json_name = "admin-status"];
            enum OperStatus {
               INVALID_ENUM_VALUE_OperStatus = 0;
               OperStatus_DOWN = 1;
               OperStatus_UP = 2;
            };
            OperStatus oper_status = 8 [json_name = "oper-status"];
            message Lsps {
               message Lsp {
                  uint32 lsp_id = 1 [json_name = "lsp-id"];
                  bool modify_lsp = 2 [json_name = "modify-lsp"];
                  uint32 setup_priority = 3 [json_name = "setup-priority"];
                  uint32 hold_priority = 4 [json_name = "hold-priority"];
                  enum RecordRoute {
                     INVALID_ENUM_VALUE_RecordRoute = 0;
                     RecordRoute_DISABLE = 1;
                     RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                     RecordRoute_RECORDX_LABEL = 3;
                  };
                  RecordRoute record_route = 5 [json_name = "record-route"];
                  uint32 reserved_bandwidth = 6 [json_name = "reserved-bandwidth"];
                  string leaf_list_name = 7 [json_name = "leaf-list-name"];
                  string include_all = 8 [json_name = "include-all"];
                  string include_any = 9 [json_name = "include-any"];
                  string exclude_any = 10 [json_name = "exclude-any"];
                  bool local_protect_enable = 11 [json_name = "local-protect-enable"];
                  bool permit_bandwidth_share = 12 [json_name = "permit-bandwidth-share"];
                  enum OperStatus {
                     OperStatus_DOWN = 0;
                     OperStatus_UP = 1;
                     OperStatus_NONE = 2;
                  };
                  OperStatus oper_status = 13 [json_name = "oper-status"];
                  message P2MpLeafs {
                     message P2MpLeaf {
                        string leaf_address = 1 [json_name = "leaf-address"];
                        uint32 sub_group_id = 2 [json_name = "sub-group-id"];
                        enum LeafStatus {
                           INVALID_ENUM_VALUE_LeafStatus = 0;
                           LeafStatus_DOWN = 1;
                           LeafStatus_SETTING = 2;
                           LeafStatus_UP = 3;
                        };
                        LeafStatus leaf_status = 3 [json_name = "leaf-status"];
                        bool modify_lsp = 4 [json_name = "modify-lsp"];
                        string explicit_path_name = 5 [json_name = "explicit-path-name"];
                     }
                     repeated P2MpLeaf p2mp_leaf = 1 [json_name = "p2mp-leaf"];
                  }
                  P2MpLeafs p2mp_leafs = 14 [json_name = "p2mp-leafs"];
               }
               repeated Lsp lsp = 1 [json_name = "lsp"];
            }
            Lsps lsps = 9 [json_name = "lsps"];
         }
         repeated P2MpTeAutoTunnel p2mp_te_auto_tunnel = 1 [json_name = "p2mp-te-auto-tunnel"];
      }
      P2MpTeAutoTunnels p2mp_te_auto_tunnels = 29 [json_name = "p2mp-te-auto-tunnels"];
      message SrTeAutoTunnels {
         message SrTeAutoTunnel {
            string tunnel_name = 1 [json_name = "tunnel-name"];
            string ingress_lsr_id = 2 [json_name = "ingress-lsr-id"];
            string egress_lsr_id = 3 [json_name = "egress-lsr-id"];
            uint32 session_id = 4 [json_name = "session-id"];
            enum State {
               INVALID_ENUM_VALUE_State = 0;
               State_UP = 1;
               State_DOWN = 2;
               State_SETTING = 3;
               State_MBBX_WAITX_FORX_DELETING = 4;
               State_MBBX_WAITX_FORX_SWITCH = 5;
               State_ALLX_PATHX_READY = 6;
               State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
               State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
               State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
            };
            State state = 5 [json_name = "state"];
            enum TunnelType {
               INVALID_ENUM_VALUE_TunnelType = 0;
               TunnelType_BYPASS = 1;
               TunnelType_IPX_PREFIX = 2;
               TunnelType_INIT = 3;
            };
            TunnelType tunnel_type = 6 [json_name = "tunnel-type"];
            enum WorkingLspType {
               WorkingLspType_PRIMARY = 0;
               WorkingLspType_HOTX_STANDBY = 1;
               WorkingLspType_ORDINARY = 2;
               WorkingLspType_BESTX_EFFORT = 3;
            };
            WorkingLspType working_lsp_type = 7 [json_name = "working-lsp-type"];
            uint32 working_lsp_id = 8 [json_name = "working-lsp-id"];
         }
         repeated SrTeAutoTunnel sr_te_auto_tunnel = 1 [json_name = "sr-te-auto-tunnel"];
      }
      SrTeAutoTunnels sr_te_auto_tunnels = 30 [json_name = "sr-te-auto-tunnels"];
      StaticCrLsps static_cr_lsps = 31 [json_name = "static-cr-lsps"];
   }
   Te te = 2 [json_name = "te"];
   message Static {
      message Lsps {
         message LspState {
            string name = 1 [json_name = "name"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_INGRESS = 1;
               Type_TRANSIT = 2;
               Type_EGRESS = 3;
            };
            Type type = 2 [json_name = "type"];
            string fec_address = 3 [json_name = "fec-address"];
            uint32 prefix_length = 4 [json_name = "prefix-length"];
            enum Status {
               Status_DOWN = 0;
               Status_UP = 1;
            };
            Status status = 5 [json_name = "status"];
            uint32 index = 6 [json_name = "index"];
            string next_hop = 7 [json_name = "next-hop"];
            uint32 in_label = 8 [json_name = "in-label"];
            uint32 out_label = 9 [json_name = "out-label"];
            string incoming_interface = 10 [json_name = "incoming-interface"];
            string outgoing_interface = 11 [json_name = "outgoing-interface"];
            uint32 mtu = 12 [json_name = "mtu"];
            uint32 time_stamp = 13 [json_name = "time-stamp"];
         }
         repeated LspState lsp_state = 1 [json_name = "lsp-state"];
         message Lsp {
            string lsp_name = 1 [json_name = "lsp-name"];
            enum LsrType {
               INVALID_ENUM_VALUE_LsrType = 0;
               LsrType_INGRESS = 1;
               LsrType_TRANSIT = 2;
               LsrType_EGRESS = 3;
            };
            LsrType lsr_type = 2 [json_name = "lsr-type"];
            message Ingress {
               string fec_address = 1 [json_name = "fec-address"];
               uint32 prefix_length = 2 [json_name = "prefix-length"];
               string out_interface_name = 3 [json_name = "out-interface-name"];
               string next_hop = 4 [json_name = "next-hop"];
               uint32 out_label = 5 [json_name = "out-label"];
            }
            Ingress ingress = 3 [json_name = "ingress"];
            message Transit {
               string in_interface_name = 1 [json_name = "in-interface-name"];
               string out_interface_name = 2 [json_name = "out-interface-name"];
               string next_hop = 3 [json_name = "next-hop"];
               uint32 in_label = 4 [json_name = "in-label"];
               uint32 out_label = 5 [json_name = "out-label"];
            }
            Transit transit = 4 [json_name = "transit"];
            message Egress {
               string in_interface_name = 1 [json_name = "in-interface-name"];
               uint32 in_label = 2 [json_name = "in-label"];
            }
            Egress egress = 5 [json_name = "egress"];
         }
         repeated Lsp lsp = 2 [json_name = "lsp"];
      }
      Lsps lsps = 1 [json_name = "lsps"];
      message LspStatistics {
         uint32 up_lsp_number = 1 [json_name = "up-lsp-number"];
         uint32 down_lsp_number = 2 [json_name = "down-lsp-number"];
         uint32 total_lsp_number = 3 [json_name = "total-lsp-number"];
      }
      LspStatistics lsp_statistics = 2 [json_name = "lsp-statistics"];
   }
   Static static = 3 [json_name = "static"];
   message Ldp {
      bool enable = 1 [json_name = "enable"];
      enum LspTriggerMode {
         LspTriggerMode_ALL = 0;
         LspTriggerMode_HOST = 1;
         LspTriggerMode_NONE = 2;
         LspTriggerMode_IPX_PREFIX = 3;
      };
      LspTriggerMode lsp_trigger_mode = 2 [json_name = "lsp-trigger-mode"];
      string lsp_ip_prefix_name = 3 [json_name = "lsp-ip-prefix-name"];
      bool proxy_egress_lsp_disable = 4 [json_name = "proxy-egress-lsp-disable"];
      bool bgp_label = 5 [json_name = "bgp-label"];
      string bgp_ip_prefix_name = 6 [json_name = "bgp-ip-prefix-name"];
      enum SrLspTriggerMode {
         SrLspTriggerMode_NONE = 0;
         SrLspTriggerMode_HOST = 1;
      };
      SrLspTriggerMode sr_lsp_trigger_mode = 7 [json_name = "sr-lsp-trigger-mode"];
      message Global {
         enum MtuSignalingMode {
            MtuSignalingMode_NONE = 0;
            MtuSignalingMode_MTUX_SIGNALING = 1;
            MtuSignalingMode_APPLYX_TLV = 2;
         };
         MtuSignalingMode mtu_signaling_mode = 1 [json_name = "mtu-signaling-mode"];
         bool gr_enable = 2 [json_name = "gr-enable"];
         uint32 reconnect_time = 3 [json_name = "reconnect-time"];
         uint32 recovery_time = 4 [json_name = "recovery-time"];
         uint32 peer_live_time = 5 [json_name = "peer-live-time"];
         bool trap_pub_session = 6 [json_name = "trap-pub-session"];
         bool gr_no_delete_flag = 7 [json_name = "gr-no-delete-flag"];
         bool announcement_enable = 8 [json_name = "announcement-enable"];
         uint32 back_off_init_time = 9 [json_name = "back-off-init-time"];
         uint32 back_off_max_time = 10 [json_name = "back-off-max-time"];
         bool entropy_label_enable = 11 [json_name = "entropy-label-enable"];
         bool prot_packet_suppress_disable = 12 [json_name = "prot-packet-suppress-disable"];
         bool disable_unknown_tlv = 13 [json_name = "disable-unknown-tlv"];
         bool ecmp_frr_coexist_enable = 14 [json_name = "ecmp-frr-coexist-enable"];
         uint32 bit_err_detect_level = 15 [json_name = "bit-err-detect-level"];
         bool trap_session_rlfa_disable = 16 [json_name = "trap-session-rlfa-disable"];
         bool ssn_suppress_disable = 17 [json_name = "ssn-suppress-disable"];
      }
      Global global = 8 [json_name = "global"];
      message Mldp {
         message P2Mp {
            bool enable = 1 [json_name = "enable"];
            bool traffic_statistic_enable = 2 [json_name = "traffic-statistic-enable"];
            message Attributes {
               bool make_before_break_enable = 1 [json_name = "make-before-break-enable"];
               bool mbb_traffic_detect = 2 [json_name = "mbb-traffic-detect"];
               uint32 mbb_switch_delay_time = 3 [json_name = "mbb-switch-delay-time"];
               uint32 mbb_wait_ack_time = 4 [json_name = "mbb-wait-ack-time"];
               bool recursive_fec = 5 [json_name = "recursive-fec"];
               bool p2mp_link_frr_enable = 6 [json_name = "p2mp-link-frr-enable"];
               bool p2mp_best_effort = 7 [json_name = "p2mp-best-effort"];
               uint32 label_withdraw_delay_time = 8 [json_name = "label-withdraw-delay-time"];
               uint32 reoptimize_time = 9 [json_name = "reoptimize-time"];
               string p2mp_topo_name_all = 10 [json_name = "p2mp-topo-name-all"];
               bool bgp_native_ip = 11 [json_name = "bgp-native-ip"];
            }
            Attributes attributes = 3 [json_name = "attributes"];
            message LeafLsps {
               message LeafLsp {
                  string lsp_name = 1 [json_name = "lsp-name"];
                  string root_ip = 2 [json_name = "root-ip"];
                  uint32 lsp_id = 3 [json_name = "lsp-id"];
               }
               repeated LeafLsp leaf_lsp = 1 [json_name = "leaf-lsp"];
            }
            LeafLsps leaf_lsps = 4 [json_name = "leaf-lsps"];
            message Lsps {
               message Lsp {
                  string root_ip = 1 [json_name = "root-ip"];
                  uint32 lsp_id = 2 [json_name = "lsp-id"];
                  string opaque_value = 3 [json_name = "opaque-value"];
                  string lsp_name = 4 [json_name = "lsp-name"];
                  uint32 forward_id = 5 [json_name = "forward-id"];
                  enum LspType {
                     LspType_INGRESS = 0;
                     LspType_TRANSIT = 1;
                     LspType_EGRESS = 2;
                     LspType_INGRESSX_TRANSIT = 3;
                     LspType_BUD = 4;
                  };
                  LspType lsp_type = 6 [json_name = "lsp-type"];
                  enum TriggerType {
                     INVALID_ENUM_VALUE_TriggerType = 0;
                     TriggerType_VPLS = 1;
                     TriggerType_NGX_MVPN = 2;
                     TriggerType_STATIC = 3;
                     TriggerType_EVPN = 4;
                     TriggerType_NONE = 5;
                  };
                  TriggerType trigger_type = 7 [json_name = "trigger-type"];
                  uint32 insegment_number = 8 [json_name = "insegment-number"];
                  uint32 outsegment_number = 9 [json_name = "outsegment-number"];
                  message Insegments {
                     message Insegment {
                        uint32 in_label = 1 [json_name = "in-label"];
                        bool is_active = 2 [json_name = "is-active"];
                        string time_stamp = 3 [json_name = "time-stamp"];
                        bool is_mbb = 4 [json_name = "is-mbb"];
                        string upstream_peer = 5 [json_name = "upstream-peer"];
                     }
                     repeated Insegment insegment = 1 [json_name = "insegment"];
                  }
                  Insegments insegments = 10 [json_name = "insegments"];
                  message Outsegments {
                     message Outsegment {
                        uint32 index = 1 [json_name = "index"];
                        enum FrrLspType {
                           FrrLspType_NONX_FRRX_LSP = 0;
                           FrrLspType_LINKX_LFAX_FRRX_LSP = 1;
                           FrrLspType_LINKX_RLFAX_INTERATEDX_LSP = 2;
                           FrrLspType_LINKX_RLFAX_FRRX_LSP = 3;
                        };
                        FrrLspType frr_lsp_type = 2 [json_name = "frr-lsp-type"];
                        uint32 out_label = 3 [json_name = "out-label"];
                        string out_interface_name = 4 [json_name = "out-interface-name"];
                        string next_hop = 5 [json_name = "next-hop"];
                        string downstream_peer = 6 [json_name = "downstream-peer"];
                        uint32 lsp_mtu = 7 [json_name = "lsp-mtu"];
                        string time_stamp = 8 [json_name = "time-stamp"];
                        bool is_mbb = 9 [json_name = "is-mbb"];
                        string frr_dest_address = 10 [json_name = "frr-dest-address"];
                     }
                     repeated Outsegment outsegment = 1 [json_name = "outsegment"];
                  }
                  Outsegments outsegments = 11 [json_name = "outsegments"];
                  string origin_root_ip = 12 [json_name = "origin-root-ip"];
                  uint32 origin_lsp_id = 13 [json_name = "origin-lsp-id"];
                  string origin_opaque_value = 14 [json_name = "origin-opaque-value"];
                  uint32 ov_type = 15 [json_name = "ov-type"];
                  string source_address = 16 [json_name = "source-address"];
                  string group_address = 17 [json_name = "group-address"];
                  string route_distinguisher = 18 [json_name = "route-distinguisher"];
               }
               repeated Lsp lsp = 1 [json_name = "lsp"];
            }
            Lsps lsps = 5 [json_name = "lsps"];
            message LspNumber {
               uint32 ingress_lsp = 1 [json_name = "ingress-lsp"];
               uint32 egress_lsp = 2 [json_name = "egress-lsp"];
               uint32 transit_lsp = 3 [json_name = "transit-lsp"];
               uint32 bud_lsp = 4 [json_name = "bud-lsp"];
               uint32 total_lsp = 5 [json_name = "total-lsp"];
            }
            LspNumber lsp_number = 6 [json_name = "lsp-number"];
            message Tunnels {
               message Tunnel {
                  string name = 1 [json_name = "name"];
                  string root_ip = 2 [json_name = "root-ip"];
                  uint32 lsp_id = 3 [json_name = "lsp-id"];
               }
               repeated Tunnel tunnel = 1 [json_name = "tunnel"];
            }
            Tunnels tunnels = 7 [json_name = "tunnels"];
            message Flows {
               message Flow {
                  string root_ip = 1 [json_name = "root-ip"];
                  uint32 lsp_id = 2 [json_name = "lsp-id"];
                  string opaque_value = 3 [json_name = "opaque-value"];
                  uint32 forward_id = 4 [json_name = "forward-id"];
                  enum LspType {
                     LspType_INGRESS = 0;
                     LspType_TRANSIT = 1;
                     LspType_EGRESS = 2;
                     LspType_INGRESSX_TRANSIT = 3;
                     LspType_BUD = 4;
                  };
                  LspType lsp_type = 5 [json_name = "lsp-type"];
                  uint32 in_label = 6 [json_name = "in-label"];
                  uint32 outsegment_number = 7 [json_name = "outsegment-number"];
                  message Outsegments {
                     message Outsegment {
                        uint32 index = 1 [json_name = "index"];
                        uint32 out_label = 2 [json_name = "out-label"];
                        string out_interface_name = 3 [json_name = "out-interface-name"];
                        string next_hop = 4 [json_name = "next-hop"];
                        uint32 flow_period = 5 [json_name = "flow-period"];
                        uint64 last_period_byte_rate = 6 [json_name = "last-period-byte-rate"];
                        uint64 last_period_packet_rate = 7 [json_name = "last-period-packet-rate"];
                        uint32 display_interval = 8 [json_name = "display-interval"];
                        uint64 interval_byte_rate = 9 [json_name = "interval-byte-rate"];
                        uint64 interval_packet_rate = 10 [json_name = "interval-packet-rate"];
                        uint64 total_byte = 11 [json_name = "total-byte"];
                        uint64 total_packet = 12 [json_name = "total-packet"];
                     }
                     repeated Outsegment outsegment = 1 [json_name = "outsegment"];
                  }
                  Outsegments outsegments = 8 [json_name = "outsegments"];
               }
               repeated Flow flow = 1 [json_name = "flow"];
            }
            Flows flows = 8 [json_name = "flows"];
         }
         P2Mp p2mp = 1 [json_name = "p2mp"];
         message Interfaces {
            message Interface {
               string name = 1 [json_name = "name"];
               enum Status {
                  Status_ACTIVE = 0;
                  Status_INACTIVE = 1;
               };
               Status status = 2 [json_name = "status"];
               bool p2mp_capability = 3 [json_name = "p2mp-capability"];
               bool mp2mp_capability = 4 [json_name = "mp2mp-capability"];
            }
            repeated Interface interface = 1 [json_name = "interface"];
         }
         Interfaces interfaces = 2 [json_name = "interfaces"];
      }
      Mldp mldp = 9 [json_name = "mldp"];
      message Bfd {
         message P2P {
            bool enable = 1 [json_name = "enable"];
            uint32 min_tx = 2 [json_name = "min-tx"];
            uint32 min_rx = 3 [json_name = "min-rx"];
            uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
            enum Trigger {
               Trigger_NONE = 0;
               Trigger_HOST = 1;
               Trigger_FECX_LIST = 2;
            };
            Trigger trigger = 5 [json_name = "trigger"];
            string next_hop_address = 6 [json_name = "next-hop-address"];
            string out_interface_name = 7 [json_name = "out-interface-name"];
            bool trigger_opt_tlv = 8 [json_name = "trigger-opt-tlv"];
            string opt_tlv_ip_prefix_name = 9 [json_name = "opt-tlv-ip-prefix-name"];
            enum TriggerTunnel {
               TriggerTunnel_NONE = 0;
               TriggerTunnel_HOST = 1;
               TriggerTunnel_FECX_LIST = 2;
               TriggerTunnel_IPX_PREFIX = 3;
            };
            TriggerTunnel trigger_tunnel = 10 [json_name = "trigger-tunnel"];
            string tunnel_ip_prefix_name = 11 [json_name = "tunnel-ip-prefix-name"];
            uint32 tunnel_min_tx = 12 [json_name = "tunnel-min-tx"];
            uint32 tunnel_min_rx = 13 [json_name = "tunnel-min-rx"];
            uint32 tunnel_detect_multiplier = 14 [json_name = "tunnel-detect-multiplier"];
            string feclist_name = 15 [json_name = "feclist-name"];
            string tunnel_feclist_name = 16 [json_name = "tunnel-feclist-name"];
         }
         P2P p2p = 1 [json_name = "p2p"];
         message Mldp {
            bool enable = 1 [json_name = "enable"];
            uint32 p2mp_tunnel_min_tx = 2 [json_name = "p2mp-tunnel-min-tx"];
            uint32 p2mp_tunnel_dm = 3 [json_name = "p2mp-tunnel-dm"];
            enum P2MpTunnelTrigger {
               P2MpTunnelTrigger_NONE = 0;
               P2MpTunnelTrigger_ALL = 1;
            };
            P2MpTunnelTrigger p2mp_tunnel_trigger = 4 [json_name = "p2mp-tunnel-trigger"];
         }
         Mldp mldp = 2 [json_name = "mldp"];
         message FecLists {
            message FecList {
               string name = 1 [json_name = "name"];
               message FecNodes {
                  message Address {
                     string ip_address = 1 [json_name = "ip-address"];
                  }
                  repeated Address address = 1 [json_name = "address"];
                  message AddressInterface {
                     string ip_address = 1 [json_name = "ip-address"];
                     string out_interface_name = 2 [json_name = "out-interface-name"];
                  }
                  repeated AddressInterface address_interface = 2 [json_name = "address-interface"];
                  message AddressNexthop {
                     string ip_address = 1 [json_name = "ip-address"];
                     string next_hop = 2 [json_name = "next-hop"];
                  }
                  repeated AddressNexthop address_nexthop = 3 [json_name = "address-nexthop"];
                  message AddressInterfaceNexthop {
                     string ip_address = 1 [json_name = "ip-address"];
                     string out_interface_name = 2 [json_name = "out-interface-name"];
                     string next_hop = 3 [json_name = "next-hop"];
                  }
                  repeated AddressInterfaceNexthop address_interface_nexthop = 4 [json_name = "address-interface-nexthop"];
               }
               FecNodes fec_nodes = 2 [json_name = "fec-nodes"];
            }
            repeated FecList fec_list = 1 [json_name = "fec-list"];
         }
         FecLists fec_lists = 3 [json_name = "fec-lists"];
         message Sessions {
            message Session {
               string fec_address = 1 [json_name = "fec-address"];
               string out_interface_name = 2 [json_name = "out-interface-name"];
               string next_hop = 3 [json_name = "next-hop"];
               uint32 lsp_index = 4 [json_name = "lsp-index"];
               uint32 discriminator = 5 [json_name = "discriminator"];
               enum SessionState {
                  SessionState_ADMINX_DOWN = 0;
                  SessionState_DOWN = 1;
                  SessionState_INIT = 2;
                  SessionState_UP = 3;
               };
               SessionState session_state = 6 [json_name = "session-state"];
               uint32 min_tx_int = 7 [json_name = "min-tx-int"];
               uint32 min_rx_int = 8 [json_name = "min-rx-int"];
               uint32 detect_multi = 9 [json_name = "detect-multi"];
               uint32 session_age = 10 [json_name = "session-age"];
            }
            repeated Session session = 1 [json_name = "session"];
         }
         Sessions sessions = 4 [json_name = "sessions"];
         message TunnelSessions {
            message TunnelSession {
               string fec_address = 1 [json_name = "fec-address"];
               uint32 lsp_index = 2 [json_name = "lsp-index"];
               uint32 discriminator = 3 [json_name = "discriminator"];
               enum SessionState {
                  SessionState_ADMINX_DOWN = 0;
                  SessionState_DOWN = 1;
                  SessionState_INIT = 2;
                  SessionState_UP = 3;
               };
               SessionState session_state = 4 [json_name = "session-state"];
               uint32 min_tx_int = 5 [json_name = "min-tx-int"];
               uint32 min_rx_int = 6 [json_name = "min-rx-int"];
               uint32 detect_multi = 7 [json_name = "detect-multi"];
               uint32 session_age = 8 [json_name = "session-age"];
            }
            repeated TunnelSession tunnel_session = 1 [json_name = "tunnel-session"];
         }
         TunnelSessions tunnel_sessions = 5 [json_name = "tunnel-sessions"];
      }
      Bfd bfd = 10 [json_name = "bfd"];
      bool bgp_not_only_host = 11 [json_name = "bgp-not-only-host"];
      message Statistic {
         message Adjacency {
            uint32 local_number = 1 [json_name = "local-number"];
            uint32 remote_number = 2 [json_name = "remote-number"];
            uint32 total_number = 3 [json_name = "total-number"];
         }
         Adjacency adjacency = 1 [json_name = "adjacency"];
         message Peer {
            uint32 local_number = 1 [json_name = "local-number"];
            uint32 remote_number = 2 [json_name = "remote-number"];
            uint32 local_remote_number = 3 [json_name = "local-remote-number"];
            uint32 total_number = 4 [json_name = "total-number"];
         }
         Peer peer = 2 [json_name = "peer"];
         message Sessions {
            message Session {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_NONX_OPERATIONAL = 1;
                  Type_OPERATIONAL = 2;
                  Type_SESSIONX_STATISTICS = 3;
               };
               Type type = 1 [json_name = "type"];
               uint32 total_number = 2 [json_name = "total-number"];
               uint32 local_number = 3 [json_name = "local-number"];
               uint32 remote_number = 4 [json_name = "remote-number"];
               uint32 local_remote_number = 5 [json_name = "local-remote-number"];
            }
            repeated Session session = 1 [json_name = "session"];
         }
         Sessions sessions = 3 [json_name = "sessions"];
      }
      Statistic statistic = 12 [json_name = "statistic"];
   }
   Ldp ldp = 4 [json_name = "ldp"];
   message DsEnhance {
      enum EnhanceEnable {
         EnhanceEnable_DISABLE = 0;
         EnhanceEnable_ENABLE = 1;
      };
      EnhanceEnable enhance_enable = 1 [json_name = "enhance-enable"];
   }
   DsEnhance ds_enhance = 5 [json_name = "ds-enhance"];
   message P2MpFastswitch {
      enum FastswitchEnable {
         FastswitchEnable_DISABLE = 0;
         FastswitchEnable_ENABLE = 1;
      };
      FastswitchEnable fastswitch_enable = 1 [json_name = "fastswitch-enable"];
   }
   P2MpFastswitch p2mp_fastswitch = 6 [json_name = "p2mp-fastswitch"];
   message P2MpForceload {
      enum ForceloadEnable {
         ForceloadEnable_DISABLE = 0;
         ForceloadEnable_ENABLE = 1;
      };
      ForceloadEnable forceload_enable = 1 [json_name = "forceload-enable"];
   }
   P2MpForceload p2mp_forceload = 7 [json_name = "p2mp-forceload"];
   message P2MpFrrwtrtime {
      uint32 frrwtrtime_forpdt = 1 [json_name = "frrwtrtime-forpdt"];
   }
   P2MpFrrwtrtime p2mp_frrwtrtime = 8 [json_name = "p2mp-frrwtrtime"];
   message TeReversePathForwarding {
      enum TeRpfEnable {
         TeRpfEnable_DISABLE = 0;
         TeRpfEnable_ENABLE = 1;
      };
      TeRpfEnable te_rpf_enable = 1 [json_name = "te-rpf-enable"];
   }
   TeReversePathForwarding te_reverse_path_forwarding = 9 [json_name = "te-reverse-path-forwarding"];
   message BgpSeparate {
      bool bgpsepen = 1 [json_name = "bgpsepen"];
   }
   BgpSeparate bgp_separate = 10 [json_name = "bgp-separate"];
   message LdpSeparate {
      bool ldpsepen = 1 [json_name = "ldpsepen"];
   }
   LdpSeparate ldp_separate = 11 [json_name = "ldp-separate"];
   message TeMultiprot {
      bool multi_protect_enable = 1 [json_name = "multi-protect-enable"];
   }
   TeMultiprot te_multiprot = 12 [json_name = "te-multiprot"];
   message ActiveTnl {
      message Tnlactinfo {
         string interfacename = 1 [json_name = "interfacename"];
         string activepath = 2 [json_name = "activepath"];
         string tunnelid = 3 [json_name = "tunnelid"];
         string outinterface = 4 [json_name = "outinterface"];
      }
      repeated Tnlactinfo tnlactinfo = 1 [json_name = "tnlactinfo"];
   }
   ActiveTnl active_tnl = 13 [json_name = "active-tnl"];
   message DispConvergenceMode {
      bool is_enable = 1 [json_name = "is-enable"];
   }
   DispConvergenceMode disp_convergence_mode = 14 [json_name = "disp-convergence-mode"];
}


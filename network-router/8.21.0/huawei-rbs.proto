syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-01 20:16:01
// ProtoYang-version 1
// module huawei-rbs
// revision 2020-03-13
// namespace urn:huawei:yang:huawei-rbs

package huawei_rbs;

message Rbs {
   message Services {
      message Service {
         string name = 1 [json_name = "name"];
         string peer_ip = 2 [json_name = "peer-ip"];
         string source_ip = 3 [json_name = "source-ip"];
         uint32 tcp_port = 4 [json_name = "tcp-port"];
         bool shut_down = 5 [json_name = "shut-down"];
         uint32 index = 6 [json_name = "index"];
         enum TcpState {
            TcpState_INITIAL = 0;
            TcpState_LISTENING = 1;
            TcpState_CONNECTING = 2;
            TcpState_CONNECTED = 3;
         };
         TcpState tcp_state = 7 [json_name = "tcp-state"];
         string last_up_time = 8 [json_name = "last-up-time"];
         string last_down_time = 9 [json_name = "last-down-time"];
         string last_down_reason = 10 [json_name = "last-down-reason"];
         message BatchBackups {
            message BatchBackup {
               enum ServiceType {
                  INVALID_ENUM_VALUE_ServiceType = 0;
                  ServiceType_BRAS = 1;
                  ServiceType_IGMPX_SNOOPING = 2;
                  ServiceType_MULTICAST = 9;
                  ServiceType_L2TP = 10;
                  ServiceType_DHCPX_SERVER = 26;
                  ServiceType_DHCPV6X_RELAY = 34;
               };
               ServiceType service_type = 1 [json_name = "service-type"];
               string backup_time = 2 [json_name = "backup-time"];
            }
            repeated BatchBackup batch_backup = 1 [json_name = "batch-backup"];
         }
         BatchBackups batch_backups = 11 [json_name = "batch-backups"];
         message BrasRuiConfig {
            message DomainMapList {
               string name = 1 [json_name = "name"];
            }
            DomainMapList domain_map_list = 1 [json_name = "domain-map-list"];
            message Ipv4Pools {
               message Ipv4Pool {
                  string name = 1 [json_name = "name"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               repeated Ipv4Pool ipv4_pool = 1 [json_name = "ipv4-pool"];
            }
            Ipv4Pools ipv4_pools = 2 [json_name = "ipv4-pools"];
            message Ipv6Pools {
               message Ipv6Pool {
                  string name = 1 [json_name = "name"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               repeated Ipv6Pool ipv6_pool = 1 [json_name = "ipv6-pool"];
            }
            Ipv6Pools ipv6_pools = 3 [json_name = "ipv6-pools"];
            message Ipv6InterChassisBorrow {
               string dest_address = 1 [json_name = "dest-address"];
               string source_address = 2 [json_name = "source-address"];
               string vpn = 3 [json_name = "vpn"];
            }
            Ipv6InterChassisBorrow ipv6_inter_chassis_borrow = 4 [json_name = "ipv6-inter-chassis-borrow"];
            message L2TpProtectTunnelEnable {
               bool status = 1 [json_name = "status"];
            }
            L2TpProtectTunnelEnable l2tp_protect_tunnel_enable = 5 [json_name = "l2tp-protect-tunnel-enable"];
            message L2TpTunnelSources {
               message L2TpTunnelSource {
                  string interface = 1 [json_name = "interface"];
               }
               repeated L2TpTunnelSource l2tp_tunnel_source = 1 [json_name = "l2tp-tunnel-source"];
            }
            L2TpTunnelSources l2tp_tunnel_sources = 6 [json_name = "l2tp-tunnel-sources"];
            message ProtectTunnels {
               message AllInstanceLsp {
                  string peer_ip = 1 [json_name = "peer-ip"];
               }
               AllInstanceLsp all_instance_lsp = 1 [json_name = "all-instance-lsp"];
               message Policy {
                  string interface = 1 [json_name = "interface"];
                  string peer_ip = 2 [json_name = "peer-ip"];
                  string tunnel_policy = 3 [json_name = "tunnel-policy"];
               }
               Policy policy = 2 [json_name = "policy"];
               message Redirect {
                  string interface = 1 [json_name = "interface"];
                  string peer_ip = 2 [json_name = "peer-ip"];
               }
               Redirect redirect = 3 [json_name = "redirect"];
               message IpVpns {
                  message ProtectTunnelVpn {
                     string vpn = 1 [json_name = "vpn"];
                     string peer_ip = 2 [json_name = "peer-ip"];
                     string interface = 3 [json_name = "interface"];
                  }
                  repeated ProtectTunnelVpn protect_tunnel_vpn = 1 [json_name = "protect-tunnel-vpn"];
               }
               IpVpns ip_vpns = 4 [json_name = "ip-vpns"];
               message SegmentRoutingIpv6 {
                  string tunnel_policy = 1 [json_name = "tunnel-policy"];
                  string endpoint = 2 [json_name = "endpoint"];
                  uint32 color = 3 [json_name = "color"];
               }
               SegmentRoutingIpv6 segment_routing_ipv6 = 5 [json_name = "segment-routing-ipv6"];
            }
            ProtectTunnels protect_tunnels = 7 [json_name = "protect-tunnels"];
            message RadiusAuthorServer {
               message IpVpnServers {
                  message IpVpnServer {
                     string vpn = 1 [json_name = "vpn"];
                     string ip = 2 [json_name = "ip"];
                  }
                  repeated IpVpnServer ip_vpn_server = 1 [json_name = "ip-vpn-server"];
               }
               IpVpnServers ip_vpn_servers = 1 [json_name = "ip-vpn-servers"];
               message NasServer {
                  bool same_as_logic_ip = 1 [json_name = "same-as-logic-ip"];
               }
               NasServer nas_server = 2 [json_name = "nas-server"];
            }
            RadiusAuthorServer radius_author_server = 8 [json_name = "radius-author-server"];
            message StaticRoutes {
               message StaticRoute {
                  uint32 tag = 1 [json_name = "tag"];
                  uint32 cost = 2 [json_name = "cost"];
                  uint32 null_interface_index = 3 [json_name = "null-interface-index"];
                  bool slave_flag = 4 [json_name = "slave-flag"];
               }
               repeated StaticRoute static_route = 1 [json_name = "static-route"];
            }
            StaticRoutes static_routes = 9 [json_name = "static-routes"];
            message SwitchOverUplink {
               uint32 duration = 1 [json_name = "duration"];
               uint32 failure_ratio = 2 [json_name = "failure-ratio"];
            }
            SwitchOverUplink switch_over_uplink = 10 [json_name = "switch-over-uplink"];
            message Track {
               message BfdSession {
                  uint32 session_id = 1 [json_name = "session-id"];
               }
               BfdSession bfd_session = 1 [json_name = "bfd-session"];
               message Interfaces {
                  message Interface {
                     string name = 1 [json_name = "name"];
                     uint32 weight = 2 [json_name = "weight"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
               message MonitorGroups {
                  message MonitorGroup {
                     string name = 1 [json_name = "name"];
                     uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                  }
                  repeated MonitorGroup monitor_group = 1 [json_name = "monitor-group"];
               }
               MonitorGroups monitor_groups = 3 [json_name = "monitor-groups"];
               message RouteMonitorGroups {
                  message RouteMonitorGroup {
                     string name = 1 [json_name = "name"];
                     uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                  }
                  repeated RouteMonitorGroup route_monitor_group = 1 [json_name = "route-monitor-group"];
               }
               RouteMonitorGroups route_monitor_groups = 4 [json_name = "route-monitor-groups"];
            }
            Track track = 11 [json_name = "track"];
            message DynamicStatistics {
               enum UplinkState {
                  INVALID_ENUM_VALUE_UplinkState = 0;
                  UplinkState_DOWN = 1;
                  UplinkState_UP = 2;
               };
               UplinkState uplink_state = 1 [json_name = "uplink-state"];
               message ProtectTunnels {
                  message ProtectTunnel {
                     uint32 vpn_id = 1 [json_name = "vpn-id"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string protect_type = 3 [json_name = "protect-type"];
                     string peer_ip = 4 [json_name = "peer-ip"];
                     string tunnel_state = 5 [json_name = "tunnel-state"];
                  }
                  repeated ProtectTunnel protect_tunnel = 1 [json_name = "protect-tunnel"];
               }
               ProtectTunnels protect_tunnels = 2 [json_name = "protect-tunnels"];
            }
            DynamicStatistics dynamic_statistics = 12 [json_name = "dynamic-statistics"];
            message WebAuthServer {
               message Ipv4Servers {
                  message Ipv4Server {
                     string vpn = 1 [json_name = "vpn"];
                     string address = 2 [json_name = "address"];
                  }
                  repeated Ipv4Server ipv4_server = 1 [json_name = "ipv4-server"];
               }
               Ipv4Servers ipv4_servers = 1 [json_name = "ipv4-servers"];
               message Ipv6Servers {
                  message Ipv6Server {
                     string vpn = 1 [json_name = "vpn"];
                     string address = 2 [json_name = "address"];
                  }
                  repeated Ipv6Server ipv6_server = 1 [json_name = "ipv6-server"];
               }
               Ipv6Servers ipv6_servers = 2 [json_name = "ipv6-servers"];
            }
            WebAuthServer web_auth_server = 13 [json_name = "web-auth-server"];
         }
         BrasRuiConfig bras_rui_config = 12 [json_name = "bras-rui-config"];
         string ssl_policy = 13 [json_name = "ssl-policy"];
         enum SslState {
            SslState_INITIAL = 0;
            SslState_CONNECTING = 1;
            SslState_CONNECTED = 3;
         };
         SslState ssl_state = 14 [json_name = "ssl-state"];
         message ProfileLists {
            message ProfileList {
               string rbp_name = 1 [json_name = "rbp-name"];
            }
            repeated ProfileList profile_list = 1 [json_name = "profile-list"];
         }
         ProfileLists profile_lists = 15 [json_name = "profile-lists"];
         message TotalStatistic {
            message InputStatistic {
               uint32 byte_rate = 1 [json_name = "byte-rate"];
               uint32 pkts_rate = 2 [json_name = "pkts-rate"];
               uint32 max_byte_rate = 3 [json_name = "max-byte-rate"];
               uint32 max_pkts_rate = 4 [json_name = "max-pkts-rate"];
               uint32 total_byte = 5 [json_name = "total-byte"];
               uint32 total_pkts = 6 [json_name = "total-pkts"];
               uint32 request_pkts = 7 [json_name = "request-pkts"];
               uint32 data_pkts = 8 [json_name = "data-pkts"];
               uint32 over_pkts = 9 [json_name = "over-pkts"];
               uint32 real_time_pkts = 10 [json_name = "real-time-pkts"];
               uint32 hello_packets = 11 [json_name = "hello-packets"];
            }
            InputStatistic input_statistic = 1 [json_name = "input-statistic"];
            message OutputStatistic {
               uint32 byte_rate = 1 [json_name = "byte-rate"];
               uint32 pkts_rate = 2 [json_name = "pkts-rate"];
               uint32 max_byte_rate = 3 [json_name = "max-byte-rate"];
               uint32 max_pkts_rate = 4 [json_name = "max-pkts-rate"];
               uint32 total_byte = 5 [json_name = "total-byte"];
               uint32 total_pkts = 6 [json_name = "total-pkts"];
               uint32 request_pkts = 7 [json_name = "request-pkts"];
               uint32 data_pkts = 8 [json_name = "data-pkts"];
               uint32 over_pkts = 9 [json_name = "over-pkts"];
               uint32 real_time_pkts = 10 [json_name = "real-time-pkts"];
               uint32 hello_packets = 11 [json_name = "hello-packets"];
               uint32 error_pkts = 12 [json_name = "error-pkts"];
            }
            OutputStatistic output_statistic = 2 [json_name = "output-statistic"];
         }
         TotalStatistic total_statistic = 16 [json_name = "total-statistic"];
         message DetailStatistics {
            message DetailStatistic {
               enum ServiceType {
                  INVALID_ENUM_VALUE_ServiceType = 0;
                  ServiceType_BRAS = 1;
                  ServiceType_IGMPX_SNOOPING = 2;
                  ServiceType_ARP = 5;
                  ServiceType_RBP = 7;
                  ServiceType_MULTICAST = 9;
                  ServiceType_L2TP = 10;
                  ServiceType_PLSP = 11;
                  ServiceType_VERSIONX_CODE = 12;
                  ServiceType_CGN = 20;
                  ServiceType_IGMP = 21;
                  ServiceType_LACP = 24;
                  ServiceType_DHCPX_SERVER = 26;
                  ServiceType_IPSEC = 30;
                  ServiceType_ND = 32;
               };
               ServiceType service_type = 1 [json_name = "service-type"];
               uint32 recv_pkts_rate = 2 [json_name = "recv-pkts-rate"];
               uint32 recv_max_pkts_rate = 3 [json_name = "recv-max-pkts-rate"];
               uint32 recv_total_pkts = 4 [json_name = "recv-total-pkts"];
               uint32 recv_data_pkts = 5 [json_name = "recv-data-pkts"];
               uint32 recv_real_time_pkts = 6 [json_name = "recv-real-time-pkts"];
               uint32 send_pkts_rate = 7 [json_name = "send-pkts-rate"];
               uint32 send_max_pkts_rate = 8 [json_name = "send-max-pkts-rate"];
               uint32 send_total_pkts = 9 [json_name = "send-total-pkts"];
               uint32 send_data_pkts = 10 [json_name = "send-data-pkts"];
               uint32 send_real_time_pkts = 11 [json_name = "send-real-time-pkts"];
               uint32 send_over_pkts = 12 [json_name = "send-over-pkts"];
            }
            repeated DetailStatistic detail_statistic = 1 [json_name = "detail-statistic"];
         }
         DetailStatistics detail_statistics = 17 [json_name = "detail-statistics"];
         message BackupBlocks {
            message BackupBlock {
               enum Direct {
                  INVALID_ENUM_VALUE_Direct = 0;
                  Direct_SEND = 1;
                  Direct_RECEIVE = 2;
               };
               Direct direct = 1 [json_name = "direct"];
               enum ServiceType {
                  INVALID_ENUM_VALUE_ServiceType = 0;
                  ServiceType_BRAS = 1;
                  ServiceType_IGMPX_SNOOPING = 2;
                  ServiceType_MULTICAST = 9;
                  ServiceType_L2TP = 10;
               };
               ServiceType service_type = 2 [json_name = "service-type"];
            }
            repeated BackupBlock backup_block = 1 [json_name = "backup-block"];
         }
         BackupBlocks backup_blocks = 18 [json_name = "backup-blocks"];
      }
      repeated Service service = 1 [json_name = "service"];
   }
   Services services = 1 [json_name = "services"];
   message Profiles {
      message Profile {
         string name = 1 [json_name = "name"];
         string service_name = 2 [json_name = "service-name"];
         uint32 backup_id = 3 [json_name = "backup-id"];
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_HOT = 1;
            Mode_WARM = 2;
            Mode_VIRTUAL = 3;
         };
         Mode mode = 4 [json_name = "mode"];
         uint32 index = 5 [json_name = "index"];
         enum LocalState {
            LocalState_INIT = 0;
            LocalState_SLAVE = 1;
            LocalState_MASTER = 2;
         };
         LocalState local_state = 6 [json_name = "local-state"];
         enum PeerState {
            PeerState_INIT = 0;
            PeerState_SLAVE = 1;
            PeerState_MASTER = 2;
         };
         PeerState peer_state = 7 [json_name = "peer-state"];
         message ServiceTypes {
            message ServiceType {
               enum Type {
                  Type_ALL = 0;
                  Type_BRAS = 1;
                  Type_IGMPX_SNOOPING = 2;
                  Type_ARP = 5;
                  Type_MULTICAST = 9;
                  Type_L2TP = 10;
                  Type_IGMP = 21;
                  Type_LACP = 24;
                  Type_NOX_HOSTX_MULTICAST = 25;
                  Type_DHCPX_SERVER = 26;
                  Type_IPSEC = 30;
                  Type_ND = 32;
                  Type_DHCPV6X_RELAY = 34;
               };
               Type type = 1 [json_name = "type"];
            }
            repeated ServiceType service_type = 1 [json_name = "service-type"];
         }
         ServiceTypes service_types = 9 [json_name = "service-types"];
         message BrasRui {
            message FrameRoute {
               uint32 cost = 1 [json_name = "cost"];
            }
            FrameRoute frame_route = 1 [json_name = "frame-route"];
            message Ipv4Pools {
               message Ipv4Pool {
                  string name = 1 [json_name = "name"];
               }
               repeated Ipv4Pool ipv4_pool = 1 [json_name = "ipv4-pool"];
            }
            Ipv4Pools ipv4_pools = 2 [json_name = "ipv4-pools"];
            message Ipv4PoolMap {
               message GroupGroups {
                  message GroupGroup {
                     string source = 1 [json_name = "source"];
                     string target = 2 [json_name = "target"];
                     uint32 order = 3 [json_name = "order"];
                  }
                  repeated GroupGroup group_group = 1 [json_name = "group-group"];
               }
               GroupGroups group_groups = 1 [json_name = "group-groups"];
               message GroupPools {
                  message GroupPool {
                     string source = 1 [json_name = "source"];
                     string target = 2 [json_name = "target"];
                     uint32 order = 3 [json_name = "order"];
                  }
                  repeated GroupPool group_pool = 1 [json_name = "group-pool"];
               }
               GroupPools group_pools = 2 [json_name = "group-pools"];
               message PoolGroups {
                  message PoolGroup {
                     string source = 1 [json_name = "source"];
                     string target = 2 [json_name = "target"];
                     uint32 order = 3 [json_name = "order"];
                  }
                  repeated PoolGroup pool_group = 1 [json_name = "pool-group"];
               }
               PoolGroups pool_groups = 3 [json_name = "pool-groups"];
               message PoolPools {
                  message PoolPool {
                     string source = 1 [json_name = "source"];
                     string target = 2 [json_name = "target"];
                     uint32 order = 3 [json_name = "order"];
                  }
                  repeated PoolPool pool_pool = 1 [json_name = "pool-pool"];
               }
               PoolPools pool_pools = 4 [json_name = "pool-pools"];
            }
            Ipv4PoolMap ipv4_pool_map = 3 [json_name = "ipv4-pool-map"];
            message Ipv6Pools {
               message Ipv6Pool {
                  string name = 1 [json_name = "name"];
               }
               repeated Ipv6Pool ipv6_pool = 1 [json_name = "ipv6-pool"];
            }
            Ipv6Pools ipv6_pools = 4 [json_name = "ipv6-pools"];
            message Ipv6PoolMaps {
               message Ipv6PoolMap {
                  string source = 1 [json_name = "source"];
                  string target = 2 [json_name = "target"];
                  uint32 order = 3 [json_name = "order"];
               }
               repeated Ipv6PoolMap ipv6_pool_map = 1 [json_name = "ipv6-pool-map"];
            }
            Ipv6PoolMaps ipv6_pool_maps = 5 [json_name = "ipv6-pool-maps"];
            message NasLogic {
               message IpAddress {
                  string ip = 1 [json_name = "ip"];
               }
               IpAddress ip_address = 1 [json_name = "ip-address"];
               message Port {
                  string interface_name = 1 [json_name = "interface-name"];
               }
               Port port = 2 [json_name = "port"];
               message SystemName {
                  string name = 1 [json_name = "name"];
               }
               SystemName system_name = 3 [json_name = "system-name"];
               message AcctSession {
                  string name = 1 [json_name = "name"];
               }
               AcctSession acct_session = 4 [json_name = "acct-session"];
            }
            NasLogic nas_logic = 6 [json_name = "nas-logic"];
            message SlaveWithoutForwarding {
               bool enable = 1 [json_name = "enable"];
            }
            SlaveWithoutForwarding slave_without_forwarding = 7 [json_name = "slave-without-forwarding"];
            message TrafficBackup {
               uint32 interval = 1 [json_name = "interval"];
               uint32 threshold = 2 [json_name = "threshold"];
            }
            TrafficBackup traffic_backup = 8 [json_name = "traffic-backup"];
            message AccessRemarkMacs {
               message AccessRemarkMac {
                  string mac_address = 1 [json_name = "mac-address"];
                  enum MacType {
                     INVALID_ENUM_VALUE_MacType = 0;
                     MacType_EVEN = 1;
                     MacType_ODD = 2;
                  };
                  MacType mac_type = 2 [json_name = "mac-type"];
               }
               repeated AccessRemarkMac access_remark_mac = 1 [json_name = "access-remark-mac"];
            }
            AccessRemarkMacs access_remark_macs = 9 [json_name = "access-remark-macs"];
            message LoadBalanceArithmetic {
               enum HashArithmetic {
                  INVALID_ENUM_VALUE_HashArithmetic = 0;
                  HashArithmetic_ARITHMETIC1 = 1;
                  HashArithmetic_ARITHMETIC2 = 2;
               };
               HashArithmetic hash_arithmetic = 1 [json_name = "hash-arithmetic"];
               uint32 offset = 2 [json_name = "offset"];
            }
            LoadBalanceArithmetic load_balance_arithmetic = 10 [json_name = "load-balance-arithmetic"];
            message RbpInfos {
               message RbpInfo {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum ForwardingRunstate {
                     ForwardingRunstate_SLAVEX_FORWARDING = 0;
                     ForwardingRunstate_WITHOUTX_SLAVEX_FORWARDING = 1;
                  };
                  ForwardingRunstate forwarding_runstate = 2 [json_name = "forwarding-runstate"];
                  string bras_rbp_fes_tab_start_time = 3 [json_name = "bras-rbp-fes-tab-start-time"];
                  string bras_rbp_fes_tab_end_time = 4 [json_name = "bras-rbp-fes-tab-end-time"];
               }
               repeated RbpInfo rbp_info = 1 [json_name = "rbp-info"];
            }
            RbpInfos rbp_infos = 11 [json_name = "rbp-infos"];
            message SlaveRbp {
               uint32 odd_mac_vrrp_state = 1 [json_name = "odd-mac-vrrp-state"];
               uint32 odd_mac_vrrp_peerstate = 2 [json_name = "odd-mac-vrrp-peerstate"];
               uint32 even_mac_vrrp_state = 3 [json_name = "even-mac-vrrp-state"];
               uint32 even_mac_vrrp_peerstate = 4 [json_name = "even-mac-vrrp-peerstate"];
            }
            SlaveRbp slave_rbp = 12 [json_name = "slave-rbp"];
         }
         BrasRui bras_rui = 10 [json_name = "bras-rui"];
         message TrackType_ETrunk {
            uint32 etrunk_id = 1 [json_name = "etrunk-id"];
            string ethtrunk_name = 2 [json_name = "ethtrunk-name"];
         }
         message TrackType_Vrrp {
            message Vrrps {
               message Vrrp6 {
                  uint32 id = 1 [json_name = "id"];
                  string if_name = 2 [json_name = "if-name"];
                  enum MacType {
                     MacType_NONE = 0;
                     MacType_EVEN = 1;
                     MacType_ODD = 2;
                  };
                  MacType mac_type = 3 [json_name = "mac-type"];
                  enum LocalState {
                     LocalState_INIT = 0;
                     LocalState_SLAVE = 1;
                     LocalState_MASTER = 2;
                  };
                  LocalState local_state = 4 [json_name = "local-state"];
                  enum PeerState {
                     PeerState_INIT = 0;
                     PeerState_SLAVE = 1;
                     PeerState_MASTER = 2;
                  };
                  PeerState peer_state = 5 [json_name = "peer-state"];
               }
               repeated Vrrp6 vrrp6 = 1 [json_name = "vrrp"];
            }
            Vrrps vrrps = 1 [json_name = "vrrps"];
         }
         message TrackType_Vrrp6 {
            message RbpVrrp6S {
               message RbpVrrp6 {
                  uint32 id = 1 [json_name = "id"];
                  string ifname = 2 [json_name = "ifname"];
               }
               repeated RbpVrrp6 rbp_vrrp6 = 1 [json_name = "rbp-vrrp6"];
            }
            RbpVrrp6S rbp_vrrp6s = 1 [json_name = "rbp-vrrp6s"];
         }
         message TrackType_VirtualAccess {
            bool rbp_virtual_accss = 1 [json_name = "rbp-virtual-accss"];
         }
         oneof TrackType {
            TrackType_ETrunk track_type_e_trunk = 11 [json_name = "e-trunk"];
            TrackType_Vrrp track_type_vrrp = 12 [json_name = "vrrp"];
            TrackType_Vrrp6 track_type_vrrp6 = 13 [json_name = "vrrp6"];
            TrackType_VirtualAccess track_type_virtual_access = 14 [json_name = "virtual-access"];
         }
         enum LocalRbpState {
            LocalRbpState_INIT = 0;
            LocalRbpState_SLAVE = 1;
            LocalRbpState_MASTER = 2;
         };
         LocalRbpState local_rbp_state = 15 [json_name = "local-rbp-state"];
         enum PeerRbpState {
            PeerRbpState_INIT = 0;
            PeerRbpState_SLAVE = 1;
            PeerRbpState_MASTER = 2;
         };
         PeerRbpState peer_rbp_state = 16 [json_name = "peer-rbp-state"];
         enum RbpMode {
            INVALID_ENUM_VALUE_RbpMode = 0;
            RbpMode_HOT = 1;
            RbpMode_WARM = 2;
            RbpMode_VIRTUAL = 3;
         };
         RbpMode rbp_mode = 17 [json_name = "rbp-mode"];
      }
      repeated Profile profile = 1 [json_name = "profile"];
   }
   Profiles profiles = 2 [json_name = "profiles"];
   message Rbs4SessionCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir = 2 [json_name = "cir"];
      uint32 cbs = 3 [json_name = "cbs"];
      uint32 pir = 4 [json_name = "pir"];
      uint32 pbs = 5 [json_name = "pbs"];
   }
   Rbs4SessionCar rbs4_session_car = 3 [json_name = "rbs4-session-car"];
   message Rbs6SessionCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir = 2 [json_name = "cir"];
      uint32 cbs = 3 [json_name = "cbs"];
      uint32 pir = 4 [json_name = "pir"];
      uint32 pbs = 5 [json_name = "pbs"];
   }
   Rbs6SessionCar rbs6_session_car = 4 [json_name = "rbs6-session-car"];
}


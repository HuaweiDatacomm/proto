syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-pm
// revision 2019-12-16
// namespace urn:huawei:yang:huawei-pm

package huawei_pm;

message Pm {
   message CsesEvents {
      message CsesEvent {
         int32 board = 1;
         int32 chassis = 2;
         uint32 continuanceTime = 3;
         string indicatorName = 4;
         string instanceName = 5;
         string instanceTypeName = 6;
         int32 port = 7;
         string startTime = 8;
         int32 subcard = 9;
      }
      repeated CsesEvent csesEvent = 1;
   }
   CsesEvents csesEvents = 1;
   message CurrentDatas {
      message CurrentData {
         int32 board = 1;
         int32 chassis = 2;
         enum DataValidFlag {
            DataValidFlag_INIT = 0;
            DataValidFlag_INVALID = 1;
            DataValidFlag_VALID = 2;
         };
         DataValidFlag dataValidFlag = 3;
         string dataValue = 4;
         string indicatorName = 5;
         string instanceName = 6;
         string instanceTypeName = 7;
         int32 port = 8;
         string startTime = 9;
         int32 subcard = 10;
         string taskName = 11;
      }
      repeated CurrentData currentData = 1;
   }
   CurrentDatas currentDatas = 2;
   message FileLists {
      message FileList {
         string endTime = 1;
         int32 fileIndex = 2;
         string fileName = 3;
         string startTime = 4;
         string taskName = 5;
      }
      repeated FileList fileList = 1;
   }
   FileLists fileLists = 3;
   message Global {
      bool reportEventSwitch = 1;
      int32 statisticsCurrentTasks = 2;
      bool statistics_enable = 3 [json_name = "statistics-enable"];
      int32 statisticsMaxFilesPerTask = 4;
      int32 statistics_max_tasks = 5 [json_name = "statistics-max-tasks"];
      int32 max_statistics_files_per_task = 6 [json_name = "max-statistics-files-per-task"];
      int32 current_statistics_task_number = 7 [json_name = "current-statistics-task-number"];
   }
   Global global = 4 [json_name = "global"];
   message HistoryDatas {
      message HistoryData {
         int32 board = 1;
         int32 chassis = 2;
         enum DataValidFlag {
            DataValidFlag_INIT = 0;
            DataValidFlag_INVALID = 1;
            DataValidFlag_VALID = 2;
         };
         DataValidFlag dataValidFlag = 3;
         string dataValue = 4;
         string indicatorName = 5;
         string instanceName = 6;
         string instanceTypeName = 7;
         int32 port = 8;
         string startTime = 9;
         int32 subcard = 10;
         string taskName = 11;
      }
      repeated HistoryData historyData = 1;
   }
   HistoryDatas historyDatas = 5;
   message Indicators {
      message Indicator {
         enum IndicatorCounterType {
            INVALID_ENUM_VALUE_IndicatorCounterType = 0;
            IndicatorCounterType_COUNTER8 = 1;
            IndicatorCounterType_COUNTER16 = 2;
            IndicatorCounterType_COUNTER32 = 3;
            IndicatorCounterType_COUNTER64 = 4;
         };
         IndicatorCounterType indicator_counter_type = 1 [json_name = "indicator-counter-type"];
         uint64 indicator_max_value = 2 [json_name = "indicator-max-value"];
         int64 indicator_min_value = 3 [json_name = "indicator-min-value"];
         string indicator_name = 4 [json_name = "indicator-name"];
         enum IndicatorType {
            IndicatorType_CUR = 0;
            IndicatorType_AVG = 1;
            IndicatorType_MAX = 2;
            IndicatorType_MIN = 3;
            IndicatorType_RATE = 4;
            IndicatorType_INCREASE = 5;
            IndicatorType_EXPRESS = 6;
            IndicatorType_SUM = 7;
            IndicatorType_SDHX_ES = 8;
            IndicatorType_SDHX_SES = 9;
            IndicatorType_SDHX_UAT = 10;
            IndicatorType_SDHX_CSES = 11;
            IndicatorType_SDHX_BBE = 12;
            IndicatorType_SDHX_OFS = 13;
            IndicatorType_SDHX_FEES = 14;
            IndicatorType_SDHX_FESES = 15;
            IndicatorType_SDHX_FEBBE = 16;
            IndicatorType_SDHX_FECSES = 17;
            IndicatorType_SDHX_FEUAS = 18;
            IndicatorType_THRSEC = 20;
         };
         IndicatorType indicator_type = 5 [json_name = "indicator-type"];
         string instance_type_name = 6 [json_name = "instance-type-name"];
      }
      repeated Indicator indicator = 1 [json_name = "indicator"];
   }
   Indicators indicators = 6 [json_name = "indicators"];
   message InstanceInfos {
      message InstanceInfo {
         int32 board = 1;
         int32 chassis = 2;
         enum DetectMode {
            DetectMode_CLEAR = 0;
            DetectMode_NONE = 1;
            DetectMode_TRIGGER = 2;
            DetectMode_TRIGGERORCLEAR = 3;
         };
         DetectMode detectMode = 3;
         uint64 highClearValue = 4;
         uint64 highTrValue = 5;
         string indicatorName = 6;
         enum InstanceInfoType {
            InstanceInfoType_MONITORSTATE = 0;
            InstanceInfoType_TRIGERVALUE = 1;
         };
         InstanceInfoType instanceInfoType = 7;
         string instanceName = 8;
         string instanceTypeName = 9;
         enum MonitorState {
            MonitorState_DISABLE = 0;
            MonitorState_ENABLE = 1;
         };
         MonitorState monitorState = 10;
         uint32 period = 11;
         int32 port = 12;
         int32 subcard = 13;
         string taskName = 14;
      }
      repeated InstanceInfo instanceInfo = 1;
   }
   InstanceInfos instanceInfos = 7;
   message InstanceTypes {
      message InstanceType {
         string instance_type_name = 1 [json_name = "instance-type-name"];
      }
      repeated InstanceType instance_type = 1 [json_name = "instance-type"];
   }
   InstanceTypes instance_types = 8 [json_name = "instance-types"];
   message Servers {
      message Server {
         string dest_path = 1 [json_name = "dest-path"];
         string hostAddr = 2;
         string password = 3 [json_name = "password"];
         int32 port = 4 [json_name = "port"];
         uint32 retry_times = 5 [json_name = "retry-times"];
         string serverName = 6;
         enum TransferPro {
            TransferPro_FTP = 0;
            TransferPro_SFTP = 1;
         };
         TransferPro transferPro = 7;
         string user_name = 8 [json_name = "user-name"];
         string vpn_name = 9 [json_name = "vpn-name"];
         enum VpnType {
            VpnType_NONE = 0;
            VpnType_MANAGEX_VPN = 1;
            VpnType_VPNX_INSTANCE = 2;
         };
         VpnType vpn_type = 10 [json_name = "vpn-type"];
         string name = 11 [json_name = "name"];
         enum TransferProtocol {
            INVALID_ENUM_VALUE_TransferProtocol = 0;
            TransferProtocol_FTP = 1;
            TransferProtocol_SFTP = 3;
         };
         TransferProtocol transfer_protocol = 12 [json_name = "transfer-protocol"];
         string host_address = 13 [json_name = "host-address"];
      }
      repeated Server server = 1 [json_name = "server"];
   }
   Servers servers = 9 [json_name = "servers"];
   message StatisticsTasks {
      message StatisticsTask {
         int32 dataMaxCaches = 1;
         enum ElaborateSample {
            ElaborateSample_DEFAULT = 0;
            ElaborateSample_SECOND = 1;
            ElaborateSample_MILLISECOND = 2;
         };
         ElaborateSample elaborate_sample = 2 [json_name = "elaborate-sample"];
         string endDate = 3;
         string endTime = 4;
         enum EndType {
            EndType_ENDAT = 0;
            EndType_NO = 1;
         };
         EndType endType = 5;
         bool isDefault = 6;
         enum RecordFileEnable {
            INVALID_ENUM_VALUE_RecordFileEnable = 0;
            RecordFileEnable_ENABLE = 1;
            RecordFileEnable_DISABLE = 2;
         };
         RecordFileEnable record_file_enable = 7 [json_name = "record-file-enable"];
         enum SampleInterval {
            SampleInterval_NOTX_SUPPORT = 0;
            SampleInterval_X_1X_MINUTE = 1;
            SampleInterval_X_2X_MINUTES = 2;
            SampleInterval_X_3X_MINUTES = 3;
            SampleInterval_X_5X_MINUTES = 5;
            SampleInterval_X_10X_MINUTES = 10;
            SampleInterval_X_15X_MINUTES = 15;
            SampleInterval_X_30X_MINUTES = 30;
            SampleInterval_X_60X_MINUTES = 60;
         };
         SampleInterval sample_interval = 8 [json_name = "sample-interval"];
         string startDate = 9;
         string startTime = 10;
         enum StartType {
            StartType_STARTAT = 0;
            StartType_STARTNOW = 1;
            StartType_STOP = 2;
         };
         StartType startType = 11;
         enum StatisticCycle {
            StatisticCycle_NOTX_SUPPORT = 0;
            StatisticCycle_X_1X_MINUTE = 1;
            StatisticCycle_X_5X_MINUTES = 5;
            StatisticCycle_X_10X_MINUTES = 10;
            StatisticCycle_X_15X_MINUTES = 15;
            StatisticCycle_X_30X_MINUTES = 30;
            StatisticCycle_X_60X_MINUTES = 60;
            StatisticCycle_X_1440X_MINUTES = 1440;
         };
         StatisticCycle statistic_cycle = 12 [json_name = "statistic-cycle"];
         message TaskCustomizeInstances {
            message TaskCustomizeInstance {
               int32 board = 1;
               int32 chassis = 2;
               enum DetectMode {
                  DetectMode_CLEAR = 0;
                  DetectMode_NONE = 1;
                  DetectMode_TRIGGER = 2;
                  DetectMode_TRIGGERORCLEAR = 3;
               };
               DetectMode detectMode = 3;
               uint64 highClearValue = 4;
               uint64 highTrValue = 5;
               string indicatorName = 6;
               string instanceName = 7;
               string instanceTypeName = 8;
               enum MonitorState {
                  MonitorState_DISABLE = 0;
                  MonitorState_ENABLE = 1;
               };
               MonitorState monitorState = 9;
               int32 port = 10;
               int32 subcard = 11;
            }
            repeated TaskCustomizeInstance taskCustomizeInstance = 1;
         }
         TaskCustomizeInstances taskCustomizeInstances = 13;
         enum TaskFileFormat {
            INVALID_ENUM_VALUE_TaskFileFormat = 0;
            TaskFileFormat_PMX_TXTX_FILEX_TYPE = 1;
            TaskFileFormat_PMX_XMLX_FILEX_TYPE = 3;
         };
         TaskFileFormat task_file_format = 14 [json_name = "task-file-format"];
         message TaskInstances {
            message TaskInstance {
               string instance_name = 1 [json_name = "instance-name"];
               string instance_type_name = 2 [json_name = "instance-type-name"];
               enum MeasureDefaultState {
                  MeasureDefaultState_DISABLE = 0;
                  MeasureDefaultState_ENABLE = 1;
               };
               MeasureDefaultState measureDefaultState = 3;
            }
            repeated TaskInstance task_instance = 1 [json_name = "task-instance"];
         }
         TaskInstances task_instances = 15 [json_name = "task-instances"];
         message TaskMeasures {
            message TaskMeasure {
               string indicatorName = 1;
               string instanceTypeName = 2;
            }
            repeated TaskMeasure taskMeasure = 1;
         }
         TaskMeasures taskMeasures = 16;
         string task_name = 17 [json_name = "task-name"];
         uint32 taskPeriod = 18;
         enum TaskState {
            INVALID_ENUM_VALUE_TaskState = 0;
            TaskState_READY = 1;
            TaskState_RUNNING = 2;
            TaskState_STOP = 3;
            TaskState_TERMINAL = 4;
         };
         TaskState task_state = 19 [json_name = "task-state"];
         message TaskThresholdRules {
            message TaskThresholdRule {
               uint64 highClearValue = 1;
               uint64 highTrValue = 2;
               string indicatorName = 3;
               string instanceTypeName = 4;
            }
            repeated TaskThresholdRule taskThresholdRule = 1;
         }
         TaskThresholdRules taskThresholdRules = 20;
         enum TaskType {
            INVALID_ENUM_VALUE_TaskType = 0;
            TaskType_PMX_STATISTICS = 3;
            TaskType_SDH = 6;
            TaskType_RMONX_HISTORY = 7;
            TaskType_RMONX_STATISTICS = 8;
            TaskType_SDHX_SHORT = 10;
         };
         TaskType task_type = 21 [json_name = "task-type"];
         enum ThresholdEnable {
            INVALID_ENUM_VALUE_ThresholdEnable = 0;
            ThresholdEnable_ENABLE = 1;
            ThresholdEnable_DISABLE = 2;
         };
         ThresholdEnable threshold_enable = 22 [json_name = "threshold-enable"];
         enum TransferMode {
            INVALID_ENUM_VALUE_TransferMode = 0;
            TransferMode_ACTIVE = 1;
            TransferMode_PASSIVE = 2;
         };
         TransferMode transfer_mode = 23 [json_name = "transfer-mode"];
         string upload_request_name = 24 [json_name = "upload-request-name"];
         uint32 record_interval = 25 [json_name = "record-interval"];
         string request_name = 26 [json_name = "request-name"];
      }
      repeated StatisticsTask statistics_task = 1 [json_name = "statistics-task"];
   }
   StatisticsTasks statistics_tasks = 10 [json_name = "statistics-tasks"];
   message ThresholdRuleDics {
      message ThresholdRuleDic {
         string alarmName = 1;
         uint32 bandWidth = 2;
         uint64 highClearValue = 3;
         uint64 highTrValue = 4;
         enum IfType {
            IfType_ALL = 0;
            IfType_ETH = 1;
            IfType_ETHTRUNK = 2;
            IfType_FLEXETH = 3;
         };
         IfType ifType = 5;
         string indicatorName = 6;
         string instanceTypeName = 7;
         uint32 period = 8;
         uint64 thresholdMaxValue = 9;
         uint64 thresholdMinValue = 10;
      }
      repeated ThresholdRuleDic thresholdRuleDic = 1;
   }
   ThresholdRuleDics thresholdRuleDics = 11;
   message UatEvents {
      message UatEvent {
         int32 board = 1;
         int32 chassis = 2;
         string endTime = 3;
         string indicatorName = 4;
         string instanceName = 5;
         string instanceTypeName = 6;
         int32 port = 7;
         string startTime = 8;
         int32 subcard = 9;
      }
      repeated UatEvent uatEvent = 1;
   }
   UatEvents uatEvents = 12;
   message UploadConfigs {
      message UploadConfig {
         string configServerName = 1;
         string requestName = 2;
      }
      repeated UploadConfig uploadConfig = 1;
   }
   UploadConfigs uploadConfigs = 13;
   message Uploads {
      message Upload {
         string request_name = 1 [json_name = "request-name"];
         string server_name = 2 [json_name = "server-name"];
      }
      repeated Upload upload = 1 [json_name = "upload"];
   }
   Uploads uploads = 14 [json_name = "uploads"];
}


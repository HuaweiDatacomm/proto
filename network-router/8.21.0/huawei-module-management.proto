syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-module-management
// revision 2021-03-24
// revision 2021-03-15
// revision 2021-02-24
// revision 2021-01-20
// revision 2020-06-24
// revision 2020-01-16
// revision 2019-12-03
// namespace urn:huawei:yang:huawei-module-management

package huawei_module_management;

message ModuleManagement {
   message ModuleInfos {
      message ModuleInfo {
         string package_name = 1 [json_name = "package-name"];
         string version = 2 [json_name = "version"];
         string module_name = 3 [json_name = "module-name"];
         enum State {
            State_NOTX_EXIST = 0;
            State_RUNNING = 3;
         };
         State state = 4 [json_name = "state"];
         string runtime = 5 [json_name = "runtime"];
         string path = 6 [json_name = "path"];
      }
      repeated ModuleInfo module_info = 1 [json_name = "module-info"];
   }
   ModuleInfos module_infos = 1 [json_name = "module-infos"];
   message NextStartupModules {
      message NextStartupModule {
         string name = 1 [json_name = "name"];
         string path = 2 [json_name = "path"];
         string version = 3 [json_name = "version"];
         string module_name = 4 [json_name = "module-name"];
         enum MatchStatus {
            MatchStatus_VERSIONX_MATCH = 0;
            MatchStatus_VERSIONX_NOTX_MATCH = 1;
         };
         MatchStatus match_status = 5 [json_name = "match-status"];
      }
      repeated NextStartupModule next_startup_module = 1 [json_name = "next-startup-module"];
   }
   NextStartupModules next_startup_modules = 2 [json_name = "next-startup-modules"];
   message OperationSchedules {
      message OperationSchedule {
         enum Phase {
            Phase_INSTALLX_MODULE = 0;
            Phase_UNINSTALLX_MODULE = 1;
            Phase_STARTUPX_MODULE = 2;
            Phase_RESETX_STARTUPX_MODULE = 3;
         };
         Phase phase = 1 [json_name = "phase"];
         string name = 2 [json_name = "name"];
         enum Status {
            Status_NOTX_STARTED = 0;
            Status_OPERATING = 1;
            Status_SUCCESSFUL = 2;
            Status_FAILED = 3;
         };
         Status status = 3 [json_name = "status"];
         uint32 schedule = 4 [json_name = "schedule"];
         enum FailReason {
            FailReason_FILEX_NOTX_EXIST = 0;
            FailReason_FILENAMEX_CHECKX_FAILED = 1;
            FailReason_INTEGRITYX_CHECKX_FAILED = 2;
            FailReason_FILEX_CHECKX_FAILED = 3;
            FailReason_FILEX_NOTX_MATCH = 4;
            FailReason_SYSTEMX_BUSY = 5;
            FailReason_INSUFFICIENTX_STORAGEX_SPACE = 6;
            FailReason_OPERATIONX_FAILED = 7;
         };
         FailReason fail_reason = 5 [json_name = "fail-reason"];
      }
      repeated OperationSchedule operation_schedule = 1 [json_name = "operation-schedule"];
   }
   OperationSchedules operation_schedules = 3 [json_name = "operation-schedules"];
   message DownloadPackageSchedule {
      string name = 1 [json_name = "name"];
      enum Status {
         Status_NOTX_STARTED = 0;
         Status_OPERATING = 1;
         Status_SUCCESSFUL = 2;
         Status_FAILED = 3;
      };
      Status status = 2 [json_name = "status"];
      uint32 schedule = 3 [json_name = "schedule"];
      uint32 transfer_index = 4 [json_name = "transfer-index"];
      enum QueryType {
         QueryType_DEFAULT = 0;
         QueryType_HFTP = 1;
      };
      QueryType query_type = 5 [json_name = "query-type"];
   }
   DownloadPackageSchedule download_package_schedule = 4 [json_name = "download-package-schedule"];
   message DownloadPackageLoadPath {
      enum FileType {
         INVALID_ENUM_VALUE_FileType = 0;
         FileType_MODULE = 3;
      };
      FileType file_type = 1 [json_name = "file-type"];
      enum ServiceType {
         INVALID_ENUM_VALUE_ServiceType = 0;
         ServiceType_MODULE = 7;
      };
      ServiceType service_type = 2 [json_name = "service-type"];
      string file_path = 3 [json_name = "file-path"];
   }
   DownloadPackageLoadPath download_package_load_path = 5 [json_name = "download-package-load-path"];
   message ModulePackages {
      message ModulePackage {
         string file_name = 1 [json_name = "file-name"];
         string module_name = 2 [json_name = "module-name"];
         string version = 3 [json_name = "version"];
      }
      repeated ModulePackage module_package = 1 [json_name = "module-package"];
   }
   ModulePackages module_packages = 6 [json_name = "module-packages"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-02 18:55:48
// ProtoYang-version 1
// module huawei-bras-basic-access
// revision 2020-03-12
// revision 2019-03-26
// namespace urn:huawei:yang:huawei-bras-basic-access

package huawei_bras_basic_access;

message BrasBasicAccess {
   message UserGroups {
      message UserGroup {
         string name = 1 [json_name = "name"];
         message TrafficPolicyStatistics {
            message TrafficPolicyStatistic {
               string policy_name = 1 [json_name = "policy-name"];
               uint32 up_group = 2 [json_name = "up-group"];
               enum UserGroupType {
                  INVALID_ENUM_VALUE_UserGroupType = 0;
                  UserGroupType_LOCAL = 1;
                  UserGroupType_REMOTE = 2;
                  UserGroupType_DYNAMIC = 3;
                  UserGroupType_COMBINED = 4;
               };
               UserGroupType user_group_type = 3 [json_name = "user-group-type"];
               bool is_mib_locked = 4 [json_name = "is-mib-locked"];
               bool is_nat_instance_valid = 5 [json_name = "is-nat-instance-valid"];
               uint32 instance = 6 [json_name = "instance"];
               enum InstanceType {
                  InstanceType_NAT = 0;
                  InstanceType_DSX_LITE = 1;
               };
               InstanceType instance_type = 7 [json_name = "instance-type"];
               uint32 bind_domain_number = 8 [json_name = "bind-domain-number"];
               uint32 bind_daa_number = 9 [json_name = "bind-daa-number"];
               uint32 used_user_number = 10 [json_name = "used-user-number"];
               uint32 reference_cb_count = 11 [json_name = "reference-cb-count"];
               bool is_wait_delete = 12 [json_name = "is-wait-delete"];
               uint32 aging_time = 13 [json_name = "aging-time"];
            }
            repeated TrafficPolicyStatistic traffic_policy_statistic = 1 [json_name = "traffic-policy-statistic"];
         }
         TrafficPolicyStatistics traffic_policy_statistics = 2 [json_name = "traffic-policy-statistics"];
         enum CuModeEnable {
            INVALID_ENUM_VALUE_CuModeEnable = 0;
            CuModeEnable_TRUE = 1;
         };
         CuModeEnable cu_mode_enable = 3 [json_name = "cu-mode-enable"];
      }
      repeated UserGroup user_group = 1 [json_name = "user-group"];
   }
   UserGroups user_groups = 1 [json_name = "user-groups"];
   message DhcpMultipleSessions {
      bool enable = 1 [json_name = "enable"];
   }
   DhcpMultipleSessions dhcp_multiple_sessions = 2 [json_name = "dhcp-multiple-sessions"];
   message UserGroupLists {
      message UserGroupList {
         string name = 1 [json_name = "name"];
         message UserGroups {
            message UserGroup {
               string name = 1 [json_name = "name"];
               uint32 weight = 2 [json_name = "weight"];
            }
            repeated UserGroup user_group = 1 [json_name = "user-group"];
         }
         UserGroups user_groups = 2 [json_name = "user-groups"];
      }
      repeated UserGroupList user_group_list = 1 [json_name = "user-group-list"];
   }
   UserGroupLists user_group_lists = 3 [json_name = "user-group-lists"];
   message UserGroupOutBound {
      bool enable = 1 [json_name = "enable"];
   }
   UserGroupOutBound user_group_out_bound = 4 [json_name = "user-group-out-bound"];
   message UserGroupCaseSensitive {
      bool enable = 1 [json_name = "enable"];
   }
   UserGroupCaseSensitive user_group_case_sensitive = 5 [json_name = "user-group-case-sensitive"];
   message FrameIpConflictRecycle {
      bool enable = 1 [json_name = "enable"];
   }
   FrameIpConflictRecycle frame_ip_conflict_recycle = 6 [json_name = "frame-ip-conflict-recycle"];
   message AccessDelayAll {
      uint32 step = 1 [json_name = "step"];
      uint32 minimum = 2 [json_name = "minimum"];
      uint32 maximum = 3 [json_name = "maximum"];
   }
   AccessDelayAll access_delay_all = 7 [json_name = "access-delay-all"];
   message AccessDelaySlots {
      message AccessDelaySlot {
         string slot = 1 [json_name = "slot"];
         uint32 step = 2 [json_name = "step"];
         uint32 minimum = 3 [json_name = "minimum"];
         uint32 maximum = 4 [json_name = "maximum"];
      }
      repeated AccessDelaySlot access_delay_slot = 1 [json_name = "access-delay-slot"];
   }
   AccessDelaySlots access_delay_slots = 8 [json_name = "access-delay-slots"];
   message PppuserOfflineStandardize {
      bool enable = 1 [json_name = "enable"];
   }
   PppuserOfflineStandardize pppuser_offline_standardize = 9 [json_name = "pppuser-offline-standardize"];
   message NasPortIdFormat {
      message Format_Standard {
         enum Standard4 {
            Standard4_STANDARD = 0;
            Standard4_STANDARDX_IGNORE = 1;
            Standard4_TRUSTX_OUTERX_VLAN = 2;
            Standard4_TRUSTX_OUTERX_VLANX_IGNORE = 3;
            Standard4_TRUSTX_INNERX_VLAN = 4;
            Standard4_TRUSTX_INNERX_VLANX_IGNORE = 5;
         };
         Standard4 standard4 = 1 [json_name = "standard"];
      }
      message Format_Turkey {
         bool turkey4 = 1 [json_name = "turkey"];
      }
      message Format_Version10 {
         bool version104 = 1 [json_name = "version10"];
      }
      message Format_Version20 {
         bool version204 = 1 [json_name = "version20"];
      }
      oneof Format {
         Format_Standard format_standard = 1 [json_name = "standard"];
         Format_Turkey format_turkey = 2 [json_name = "turkey"];
         Format_Version10 format_version10 = 3 [json_name = "version10"];
         Format_Version20 format_version20 = 4 [json_name = "version20"];
      }
   }
   NasPortIdFormat nas_port_id_format = 10 [json_name = "nas-port-id-format"];
   message PacketStrictCheck {
      bool nd = 1 [json_name = "nd"];
      bool dhcpv6 = 2 [json_name = "dhcpv6"];
      bool dhcp = 3 [json_name = "dhcp"];
      bool ppp = 4 [json_name = "ppp"];
      bool l2tp = 5 [json_name = "l2tp"];
      bool dot1x = 6 [json_name = "dot1x"];
   }
   PacketStrictCheck packet_strict_check = 11 [json_name = "packet-strict-check"];
   message ProtocolStatistics {
      bool enable = 1 [json_name = "enable"];
   }
   ProtocolStatistics protocol_statistics = 12 [json_name = "protocol-statistics"];
   message UiMode {
      enum Type {
         INVALID_ENUM_VALUE_Type = 0;
         Type_TYPE1 = 1;
         Type_TYPE2 = 2;
      };
      Type type = 1 [json_name = "type"];
   }
   UiMode ui_mode = 13 [json_name = "ui-mode"];
   message UserFlowStatistics {
      bool enable = 1 [json_name = "enable"];
   }
   UserFlowStatistics user_flow_statistics = 14 [json_name = "user-flow-statistics"];
   message LoadBalanceEnhanceAlgorithm {
      bool enable = 1 [json_name = "enable"];
      uint32 update_frequency = 2 [json_name = "update-frequency"];
   }
   LoadBalanceEnhanceAlgorithm load_balance_enhance_algorithm = 15 [json_name = "load-balance-enhance-algorithm"];
   message LoadBalanceGroups {
      message LoadBalanceGroup {
         string name = 1 [json_name = "name"];
         uint32 delay_time = 2 [json_name = "delay-time"];
         uint32 member_count = 3 [json_name = "member-count"];
         uint32 active_count = 4 [json_name = "active-count"];
         message MemberInfos {
            message MemberInfo {
               string interface_name = 1 [json_name = "interface-name"];
               uint32 number6 = 2 [json_name = "number"];
               uint32 delay_time = 3 [json_name = "delay-time"];
               uint32 up_down_times = 4 [json_name = "up-down-times"];
               bool is_chasten = 5 [json_name = "is-chasten"];
               string first_up_down_time = 6 [json_name = "first-up-down-time"];
            }
            repeated MemberInfo member_info = 1 [json_name = "member-info"];
         }
         MemberInfos member_infos = 5 [json_name = "member-infos"];
      }
      repeated LoadBalanceGroup load_balance_group = 1 [json_name = "load-balance-group"];
   }
   LoadBalanceGroups load_balance_groups = 16 [json_name = "load-balance-groups"];
}


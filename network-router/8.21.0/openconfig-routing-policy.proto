syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module openconfig-routing-policy
// revision 2018-11-21
// revision 2018-06-05
// revision 2017-07-14
// revision 2016-05-12
// namespace http://openconfig.net/yang/routing-policy

package openconfig_routing_policy;

message RoutingPolicy {
   message DefinedSets {
      message NeighborSets {
         message NeighborSet {
            message Config {
               repeated string address = 1 [json_name = "address"];
               string name = 2 [json_name = "name"];
            }
            Config config = 1 [json_name = "config"];
            string name = 2 [json_name = "name"];
            message State {
               repeated string address = 1 [json_name = "address"];
               string name = 2 [json_name = "name"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated NeighborSet neighbor_set = 1 [json_name = "neighbor-set"];
      }
      NeighborSets neighbor_sets = 1 [json_name = "neighbor-sets"];
      message PrefixSets {
         message PrefixSet {
            message Config {
               enum Mode {
                  Mode_IPV4 = 0;
                  Mode_IPV6 = 1;
                  Mode_MIXED = 2;
               };
               Mode mode = 1 [json_name = "mode"];
               string name = 2 [json_name = "name"];
            }
            Config config = 1 [json_name = "config"];
            string name = 2 [json_name = "name"];
            message Prefixes {
               message Prefix {
                  message Config {
                     string ip_prefix = 1 [json_name = "ip-prefix"];
                     string masklength_range = 2 [json_name = "masklength-range"];
                  }
                  Config config = 1 [json_name = "config"];
                  string ip_prefix = 2 [json_name = "ip-prefix"];
                  string masklength_range = 3 [json_name = "masklength-range"];
                  message State {
                     string ip_prefix = 1 [json_name = "ip-prefix"];
                     string masklength_range = 2 [json_name = "masklength-range"];
                  }
                  State state = 4 [json_name = "state"];
               }
               repeated Prefix prefix = 1 [json_name = "prefix"];
            }
            Prefixes prefixes = 3 [json_name = "prefixes"];
            message State {
               enum Mode {
                  Mode_IPV4 = 0;
                  Mode_IPV6 = 1;
                  Mode_MIXED = 2;
               };
               Mode mode = 1 [json_name = "mode"];
               string name = 2 [json_name = "name"];
            }
            State state = 4 [json_name = "state"];
         }
         repeated PrefixSet prefix_set = 1 [json_name = "prefix-set"];
      }
      PrefixSets prefix_sets = 2 [json_name = "prefix-sets"];
      message TagSets {
         message TagSet {
            message Config {
               string name = 1 [json_name = "name"];
               repeated string tag_value = 2 [json_name = "tag-value"];
            }
            Config config = 1 [json_name = "config"];
            string name = 2 [json_name = "name"];
            message State {
               string name = 1 [json_name = "name"];
               repeated string tag_value = 2 [json_name = "tag-value"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated TagSet tag_set = 1 [json_name = "tag-set"];
      }
      TagSets tag_sets = 3 [json_name = "tag-sets"];
      message BgpDefinedSets {
         message CommunitySets {
            message CommunitySet {
               string community_set_name = 1 [json_name = "community-set-name"];
               message Config {
                  string community_set_name = 1 [json_name = "community-set-name"];
                  repeated string community_member = 2 [json_name = "community-member"];
                  enum MatchSetOptions {
                     MatchSetOptions_ANY = 0;
                     MatchSetOptions_ALL = 1;
                     MatchSetOptions_INVERT = 2;
                  };
                  MatchSetOptions match_set_options = 3 [json_name = "match-set-options"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string community_set_name = 1 [json_name = "community-set-name"];
                  repeated string community_member = 2 [json_name = "community-member"];
                  enum MatchSetOptions {
                     MatchSetOptions_ANY = 0;
                     MatchSetOptions_ALL = 1;
                     MatchSetOptions_INVERT = 2;
                  };
                  MatchSetOptions match_set_options = 3 [json_name = "match-set-options"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated CommunitySet community_set = 1 [json_name = "community-set"];
         }
         CommunitySets community_sets = 1 [json_name = "community-sets"];
         message ExtCommunitySets {
            message ExtCommunitySet {
               string ext_community_set_name = 1 [json_name = "ext-community-set-name"];
               message Config {
                  string ext_community_set_name = 1 [json_name = "ext-community-set-name"];
                  repeated string ext_community_member = 2 [json_name = "ext-community-member"];
                  enum MatchSetOptions {
                     MatchSetOptions_ANY = 0;
                     MatchSetOptions_ALL = 1;
                     MatchSetOptions_INVERT = 2;
                  };
                  MatchSetOptions match_set_options = 3 [json_name = "match-set-options"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string ext_community_set_name = 1 [json_name = "ext-community-set-name"];
                  repeated string ext_community_member = 2 [json_name = "ext-community-member"];
                  enum MatchSetOptions {
                     MatchSetOptions_ANY = 0;
                     MatchSetOptions_ALL = 1;
                     MatchSetOptions_INVERT = 2;
                  };
                  MatchSetOptions match_set_options = 3 [json_name = "match-set-options"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated ExtCommunitySet ext_community_set = 1 [json_name = "ext-community-set"];
         }
         ExtCommunitySets ext_community_sets = 2 [json_name = "ext-community-sets"];
         message AsPathSets {
            message AsPathSet {
               string as_path_set_name = 1 [json_name = "as-path-set-name"];
               message Config {
                  string as_path_set_name = 1 [json_name = "as-path-set-name"];
                  repeated string as_path_set_member = 2 [json_name = "as-path-set-member"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string as_path_set_name = 1 [json_name = "as-path-set-name"];
                  repeated string as_path_set_member = 2 [json_name = "as-path-set-member"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated AsPathSet as_path_set = 1 [json_name = "as-path-set"];
         }
         AsPathSets as_path_sets = 3 [json_name = "as-path-sets"];
      }
      BgpDefinedSets bgp_defined_sets = 4 [json_name = "bgp-defined-sets"];
   }
   DefinedSets defined_sets = 1 [json_name = "defined-sets"];
   message PolicyDefinitions {
      message PolicyDefinition {
         message Config {
            string name = 1 [json_name = "name"];
         }
         Config config = 1 [json_name = "config"];
         string name = 2 [json_name = "name"];
         message State {
            string name = 1 [json_name = "name"];
         }
         State state = 3 [json_name = "state"];
         message Statements {
            message Statement {
               message Actions {
                  message Config {
                     enum PolicyResult {
                        PolicyResult_ACCEPT_ROUTE = 0;
                        PolicyResult_REJECT_ROUTE = 1;
                     };
                     PolicyResult policy_result = 1 [json_name = "policy-result"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum PolicyResult {
                        PolicyResult_ACCEPT_ROUTE = 0;
                        PolicyResult_REJECT_ROUTE = 1;
                     };
                     PolicyResult policy_result = 1 [json_name = "policy-result"];
                  }
                  State state = 2 [json_name = "state"];
                  message BgpActions {
                     message Config {
                        enum SetRouteOrigin {
                           SetRouteOrigin_IGP = 0;
                           SetRouteOrigin_EGP = 1;
                           SetRouteOrigin_INCOMPLETE = 2;
                        };
                        SetRouteOrigin set_route_origin = 1 [json_name = "set-route-origin"];
                        uint32 set_local_pref = 2 [json_name = "set-local-pref"];
                        string set_next_hop = 3 [json_name = "set-next-hop"];
                        string set_med = 4 [json_name = "set-med"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        enum SetRouteOrigin {
                           SetRouteOrigin_IGP = 0;
                           SetRouteOrigin_EGP = 1;
                           SetRouteOrigin_INCOMPLETE = 2;
                        };
                        SetRouteOrigin set_route_origin = 1 [json_name = "set-route-origin"];
                        uint32 set_local_pref = 2 [json_name = "set-local-pref"];
                        string set_next_hop = 3 [json_name = "set-next-hop"];
                        string set_med = 4 [json_name = "set-med"];
                     }
                     State state = 2 [json_name = "state"];
                     message SetAsPathPrepend {
                        message Config {
                           uint32 repeat_n = 1 [json_name = "repeat-n"];
                           uint32 asn = 2 [json_name = "asn"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 repeat_n = 1 [json_name = "repeat-n"];
                           uint32 asn = 2 [json_name = "asn"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     SetAsPathPrepend set_as_path_prepend = 3 [json_name = "set-as-path-prepend"];
                     message SetCommunity {
                        message Config {
                           enum Method {
                              Method_INLINE = 0;
                              Method_REFERENCE = 1;
                           };
                           Method method = 1 [json_name = "method"];
                           enum Options {
                              Options_ADD = 0;
                              Options_REMOVE = 1;
                              Options_REPLACE = 2;
                           };
                           Options options = 2 [json_name = "options"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           enum Method {
                              Method_INLINE = 0;
                              Method_REFERENCE = 1;
                           };
                           Method method = 1 [json_name = "method"];
                           enum Options {
                              Options_ADD = 0;
                              Options_REMOVE = 1;
                              Options_REPLACE = 2;
                           };
                           Options options = 2 [json_name = "options"];
                        }
                        State state = 2 [json_name = "state"];
                        message Inline {
                           message Config {
                              repeated string communities = 1 [json_name = "communities"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              repeated string communities = 1 [json_name = "communities"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Inline inline = 3 [json_name = "inline"];
                        message Reference {
                           message Config {
                              string community_set_ref = 1 [json_name = "community-set-ref"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string community_set_ref = 1 [json_name = "community-set-ref"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Reference reference = 4 [json_name = "reference"];
                     }
                     SetCommunity set_community = 4 [json_name = "set-community"];
                     message SetExtCommunity {
                        message Config {
                           enum Method {
                              Method_INLINE = 0;
                              Method_REFERENCE = 1;
                           };
                           Method method = 1 [json_name = "method"];
                           enum Options {
                              Options_ADD = 0;
                              Options_REMOVE = 1;
                              Options_REPLACE = 2;
                           };
                           Options options = 2 [json_name = "options"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           enum Method {
                              Method_INLINE = 0;
                              Method_REFERENCE = 1;
                           };
                           Method method = 1 [json_name = "method"];
                           enum Options {
                              Options_ADD = 0;
                              Options_REMOVE = 1;
                              Options_REPLACE = 2;
                           };
                           Options options = 2 [json_name = "options"];
                        }
                        State state = 2 [json_name = "state"];
                        message Inline {
                           message Config {
                              repeated string communities = 1 [json_name = "communities"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              repeated string communities = 1 [json_name = "communities"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Inline inline = 3 [json_name = "inline"];
                        message Reference {
                           message Config {
                              string ext_community_set_ref = 1 [json_name = "ext-community-set-ref"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string ext_community_set_ref = 1 [json_name = "ext-community-set-ref"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Reference reference = 4 [json_name = "reference"];
                     }
                     SetExtCommunity set_ext_community = 5 [json_name = "set-ext-community"];
                  }
                  BgpActions bgp_actions = 3 [json_name = "bgp-actions"];
               }
               Actions actions = 1 [json_name = "actions"];
               message Conditions {
                  message Config {
                     string call_policy = 1 [json_name = "call-policy"];
                     string install_protocol_eq = 2 [json_name = "install-protocol-eq"];
                  }
                  Config config = 1 [json_name = "config"];
                  message MatchInterface {
                     message Config {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  MatchInterface match_interface = 2 [json_name = "match-interface"];
                  message MatchNeighborSet {
                     message Config {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string neighbor_set = 2 [json_name = "neighbor-set"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string neighbor_set = 2 [json_name = "neighbor-set"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  MatchNeighborSet match_neighbor_set = 3 [json_name = "match-neighbor-set"];
                  message MatchPrefixSet {
                     message Config {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string prefix_set = 2 [json_name = "prefix-set"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string prefix_set = 2 [json_name = "prefix-set"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  MatchPrefixSet match_prefix_set = 4 [json_name = "match-prefix-set"];
                  message MatchTagSet {
                     message Config {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string tag_set = 2 [json_name = "tag-set"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        enum MatchSetOptions {
                           MatchSetOptions_ANY = 0;
                           MatchSetOptions_INVERT = 1;
                        };
                        MatchSetOptions match_set_options = 1 [json_name = "match-set-options"];
                        string tag_set = 2 [json_name = "tag-set"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  MatchTagSet match_tag_set = 5 [json_name = "match-tag-set"];
                  message State {
                     string call_policy = 1 [json_name = "call-policy"];
                     string install_protocol_eq = 2 [json_name = "install-protocol-eq"];
                  }
                  State state = 6 [json_name = "state"];
                  message BgpConditions {
                     message Config {
                        uint32 med_eq = 1 [json_name = "med-eq"];
                        enum OriginEq {
                           OriginEq_IGP = 0;
                           OriginEq_EGP = 1;
                           OriginEq_INCOMPLETE = 2;
                        };
                        OriginEq origin_eq = 2 [json_name = "origin-eq"];
                        repeated string next_hop_in = 3 [json_name = "next-hop-in"];
                        repeated string afi_safi_in = 4 [json_name = "afi-safi-in"];
                        uint32 local_pref_eq = 5 [json_name = "local-pref-eq"];
                        enum RouteType {
                           RouteType_INTERNAL = 0;
                           RouteType_EXTERNAL = 1;
                        };
                        RouteType route_type = 6 [json_name = "route-type"];
                        string community_set = 7 [json_name = "community-set"];
                        string ext_community_set = 8 [json_name = "ext-community-set"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 med_eq = 1 [json_name = "med-eq"];
                        enum OriginEq {
                           OriginEq_IGP = 0;
                           OriginEq_EGP = 1;
                           OriginEq_INCOMPLETE = 2;
                        };
                        OriginEq origin_eq = 2 [json_name = "origin-eq"];
                        repeated string next_hop_in = 3 [json_name = "next-hop-in"];
                        repeated string afi_safi_in = 4 [json_name = "afi-safi-in"];
                        uint32 local_pref_eq = 5 [json_name = "local-pref-eq"];
                        enum RouteType {
                           RouteType_INTERNAL = 0;
                           RouteType_EXTERNAL = 1;
                        };
                        RouteType route_type = 6 [json_name = "route-type"];
                        string community_set = 7 [json_name = "community-set"];
                        string ext_community_set = 8 [json_name = "ext-community-set"];
                     }
                     State state = 2 [json_name = "state"];
                     message CommunityCount {
                        message Config {
                           string operator = 1 [json_name = "operator"];
                           uint32 value = 2 [json_name = "value"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string operator = 1 [json_name = "operator"];
                           uint32 value = 2 [json_name = "value"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     CommunityCount community_count = 3 [json_name = "community-count"];
                     message AsPathLength {
                        message Config {
                           string operator = 1 [json_name = "operator"];
                           uint32 value = 2 [json_name = "value"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string operator = 1 [json_name = "operator"];
                           uint32 value = 2 [json_name = "value"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     AsPathLength as_path_length = 4 [json_name = "as-path-length"];
                     message MatchAsPathSet {
                        message Config {
                           string as_path_set = 1 [json_name = "as-path-set"];
                           enum MatchSetOptions {
                              MatchSetOptions_ANY = 0;
                              MatchSetOptions_ALL = 1;
                              MatchSetOptions_INVERT = 2;
                           };
                           MatchSetOptions match_set_options = 2 [json_name = "match-set-options"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string as_path_set = 1 [json_name = "as-path-set"];
                           enum MatchSetOptions {
                              MatchSetOptions_ANY = 0;
                              MatchSetOptions_ALL = 1;
                              MatchSetOptions_INVERT = 2;
                           };
                           MatchSetOptions match_set_options = 2 [json_name = "match-set-options"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     MatchAsPathSet match_as_path_set = 5 [json_name = "match-as-path-set"];
                  }
                  BgpConditions bgp_conditions = 7 [json_name = "bgp-conditions"];
                  message MatchProtocolInstance {
                     message Config {
                        string protocol_identifier = 1 [json_name = "protocol-identifier"];
                        string protocol_name = 2 [json_name = "protocol-name"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string protocol_identifier = 1 [json_name = "protocol-identifier"];
                        string protocol_name = 2 [json_name = "protocol-name"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  MatchProtocolInstance match_protocol_instance = 8 [json_name = "match-protocol-instance"];
               }
               Conditions conditions = 2 [json_name = "conditions"];
               message Config {
                  string name = 1 [json_name = "name"];
               }
               Config config = 3 [json_name = "config"];
               string name = 4 [json_name = "name"];
               message State {
                  string name = 1 [json_name = "name"];
               }
               State state = 5 [json_name = "state"];
            }
            repeated Statement statement = 1 [json_name = "statement"];
         }
         Statements statements = 4 [json_name = "statements"];
      }
      repeated PolicyDefinition policy_definition = 1 [json_name = "policy-definition"];
   }
   PolicyDefinitions policy_definitions = 2 [json_name = "policy-definitions"];
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


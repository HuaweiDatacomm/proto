syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-10 10:10:00
// ProtoYang-version 1
// module huawei-aaa
// revision 2021-09-09
// revision 2021-07-15
// revision 2021-06-23
// revision 2021-03-17
// revision 2021-01-28
// revision 2021-01-20
// revision 2020-07-01
// revision 2020-06-17
// revision 2020-03-02
// namespace urn:huawei:yang:huawei-aaa

package huawei_aaa;

message Aaa {
   message Tasks {
      message Task {
         string name = 1 [json_name = "name"];
      }
      repeated Task task = 1 [json_name = "task"];
   }
   Tasks tasks = 1 [json_name = "tasks"];
   message TaskGroups {
      message TaskGroup {
         string name = 1 [json_name = "name"];
         message TaskGroupIncludeMaps {
            message TaskGroupIncludeMap {
               string include_task_group_name = 1 [json_name = "include-task-group-name"];
            }
            repeated TaskGroupIncludeMap task_group_include_map = 1 [json_name = "task-group-include-map"];
         }
         TaskGroupIncludeMaps task_group_include_maps = 2 [json_name = "task-group-include-maps"];
         message TaskGroupTaskMaps {
            message TaskGroupTaskMap {
               string task_name = 1 [json_name = "task-name"];
               enum Read {
                  Read_DISABLE = 0;
                  Read_ENABLE = 1;
               };
               Read read = 2 [json_name = "read"];
               enum Write {
                  Write_DISABLE = 0;
                  Write_ENABLE = 1;
               };
               Write write = 3 [json_name = "write"];
               enum Execute {
                  Execute_DISABLE = 0;
                  Execute_ENABLE = 1;
               };
               Execute execute = 4 [json_name = "execute"];
               enum Debug {
                  Debug_DISABLE = 0;
                  Debug_ENABLE = 1;
               };
               Debug debug = 5 [json_name = "debug"];
            }
            repeated TaskGroupTaskMap task_group_task_map = 1 [json_name = "task-group-task-map"];
         }
         TaskGroupTaskMaps task_group_task_maps = 3 [json_name = "task-group-task-maps"];
      }
      repeated TaskGroup task_group = 1 [json_name = "task-group"];
   }
   TaskGroups task_groups = 2 [json_name = "task-groups"];
   message UserGroups {
      message UserGroup {
         string name = 1 [json_name = "name"];
         message UserGroupTaskGroupMaps {
            message UserGroupTaskGroupMap {
               string task_group_name = 1 [json_name = "task-group-name"];
               enum Read {
                  Read_DISABLE = 0;
                  Read_ENABLE = 1;
               };
               Read read = 2 [json_name = "read"];
               enum Write {
                  Write_DISABLE = 0;
                  Write_ENABLE = 1;
               };
               Write write = 3 [json_name = "write"];
               enum Execute {
                  Execute_DISABLE = 0;
                  Execute_ENABLE = 1;
               };
               Execute execute = 4 [json_name = "execute"];
               enum Debug {
                  Debug_DISABLE = 0;
                  Debug_ENABLE = 1;
               };
               Debug debug = 5 [json_name = "debug"];
            }
            repeated UserGroupTaskGroupMap user_group_task_group_map = 1 [json_name = "user-group-task-group-map"];
         }
         UserGroupTaskGroupMaps user_group_task_group_maps = 2 [json_name = "user-group-task-group-maps"];
         message UserGroupIncludeMaps {
            message UserGroupIncludeMap {
               string include_user_group_name = 1 [json_name = "include-user-group-name"];
            }
            repeated UserGroupIncludeMap user_group_include_map = 1 [json_name = "user-group-include-map"];
         }
         UserGroupIncludeMaps user_group_include_maps = 3 [json_name = "user-group-include-maps"];
      }
      repeated UserGroup user_group = 1 [json_name = "user-group"];
   }
   UserGroups user_groups = 3 [json_name = "user-groups"];
   message AuthenticationSchemes {
      message AuthenticationScheme {
         string authen_scheme_name = 1 [json_name = "authen-scheme-name"];
         enum FirstAuthenMode {
            FirstAuthenMode_INVALID = 0;
            FirstAuthenMode_LOCAL = 1;
            FirstAuthenMode_HWTACACS = 2;
            FirstAuthenMode_RADIUS = 3;
            FirstAuthenMode_NONE = 4;
            FirstAuthenMode_RADIUSX_PROXY = 5;
         };
         FirstAuthenMode first_authen_mode = 2 [json_name = "first-authen-mode"];
         enum SecondAuthenMode {
            SecondAuthenMode_INVALID = 0;
            SecondAuthenMode_LOCAL = 1;
            SecondAuthenMode_HWTACACS = 2;
            SecondAuthenMode_RADIUS = 3;
            SecondAuthenMode_NONE = 4;
            SecondAuthenMode_RADIUSX_PROXY = 5;
         };
         SecondAuthenMode second_authen_mode = 3 [json_name = "second-authen-mode"];
         enum ThirdAuthenMode {
            ThirdAuthenMode_INVALID = 0;
            ThirdAuthenMode_LOCAL = 1;
            ThirdAuthenMode_HWTACACS = 2;
            ThirdAuthenMode_RADIUS = 3;
            ThirdAuthenMode_NONE = 4;
            ThirdAuthenMode_RADIUSX_PROXY = 5;
         };
         ThirdAuthenMode third_authen_mode = 4 [json_name = "third-authen-mode"];
         enum FourthAuthenMode {
            FourthAuthenMode_INVALID = 0;
            FourthAuthenMode_LOCAL = 1;
            FourthAuthenMode_HWTACACS = 2;
            FourthAuthenMode_RADIUS = 3;
            FourthAuthenMode_NONE = 4;
            FourthAuthenMode_RADIUSX_PROXY = 5;
         };
         FourthAuthenMode fourth_authen_mode = 5 [json_name = "fourth-authen-mode"];
         message BrasUserManage {
            message AuthenticationFailPolicy {
               enum UserAuthenFailPolicy {
                  UserAuthenFailPolicy_OFFLINE = 0;
                  UserAuthenFailPolicy_ONLINE = 1;
               };
               UserAuthenFailPolicy user_authen_fail_policy = 1 [json_name = "user-authen-fail-policy"];
               string authen_fail_remain_domain = 2 [json_name = "authen-fail-remain-domain"];
            }
            AuthenticationFailPolicy authentication_fail_policy = 1 [json_name = "authentication-fail-policy"];
            message AuthenticationRedirectDomainPolicy {
               bool quota_out_redirect_enable = 1 [json_name = "quota-out-redirect-enable"];
               string redirect_domain = 2 [json_name = "redirect-domain"];
               enum RadiusNoResponsePolicy {
                  INVALID_ENUM_VALUE_RadiusNoResponsePolicy = 0;
                  RadiusNoResponsePolicy_ONLINE = 1;
                  RadiusNoResponsePolicy_OFFLINE = 2;
               };
               RadiusNoResponsePolicy radius_no_response_policy = 3 [json_name = "radius-no-response-policy"];
               string radius_no_response_domain = 4 [json_name = "radius-no-response-domain"];
            }
            AuthenticationRedirectDomainPolicy authentication_redirect_domain_policy = 2 [json_name = "authentication-redirect-domain-policy"];
         }
         BrasUserManage bras_user_manage = 6 [json_name = "bras-user-manage"];
         message AuthenModeType_OrderedStrictly {
            enum FirstAuthenMode {
               FirstAuthenMode_INVALID = 0;
               FirstAuthenMode_LOCAL = 1;
               FirstAuthenMode_HWTACACS = 2;
               FirstAuthenMode_RADIUS = 3;
               FirstAuthenMode_NONE = 4;
               FirstAuthenMode_RADIUSX_PROXY = 5;
               FirstAuthenMode_HACA = 6;
               FirstAuthenMode_LDAP = 7;
               FirstAuthenMode_AD = 8;
               FirstAuthenMode_SUPER = 9;
            };
            FirstAuthenMode first_authen_mode = 1 [json_name = "first-authen-mode"];
            enum SecondAuthenMode {
               SecondAuthenMode_INVALID = 0;
               SecondAuthenMode_LOCAL = 1;
               SecondAuthenMode_HWTACACS = 2;
               SecondAuthenMode_RADIUS = 3;
               SecondAuthenMode_NONE = 4;
               SecondAuthenMode_RADIUSX_PROXY = 5;
               SecondAuthenMode_HACA = 6;
               SecondAuthenMode_LDAP = 7;
               SecondAuthenMode_AD = 8;
               SecondAuthenMode_SUPER = 9;
            };
            SecondAuthenMode second_authen_mode = 2 [json_name = "second-authen-mode"];
            enum ThirdAuthenMode {
               ThirdAuthenMode_INVALID = 0;
               ThirdAuthenMode_LOCAL = 1;
               ThirdAuthenMode_HWTACACS = 2;
               ThirdAuthenMode_RADIUS = 3;
               ThirdAuthenMode_NONE = 4;
               ThirdAuthenMode_RADIUSX_PROXY = 5;
               ThirdAuthenMode_HACA = 6;
               ThirdAuthenMode_LDAP = 7;
               ThirdAuthenMode_AD = 8;
               ThirdAuthenMode_SUPER = 9;
            };
            ThirdAuthenMode third_authen_mode = 3 [json_name = "third-authen-mode"];
            enum FourthAuthenMode {
               FourthAuthenMode_INVALID = 0;
               FourthAuthenMode_LOCAL = 1;
               FourthAuthenMode_HWTACACS = 2;
               FourthAuthenMode_RADIUS = 3;
               FourthAuthenMode_NONE = 4;
               FourthAuthenMode_RADIUSX_PROXY = 5;
               FourthAuthenMode_HACA = 6;
               FourthAuthenMode_LDAP = 7;
               FourthAuthenMode_AD = 8;
               FourthAuthenMode_SUPER = 9;
            };
            FourthAuthenMode fourth_authen_mode = 4 [json_name = "fourth-authen-mode"];
         }
         message AuthenModeType_OrderedByUser {
            enum AuthenMode {
               AuthenMode_INVALID = 0;
               AuthenMode_LOCAL = 1;
               AuthenMode_HWTACACS = 2;
               AuthenMode_RADIUS = 3;
               AuthenMode_NONE = 4;
               AuthenMode_RADIUSX_PROXY = 5;
               AuthenMode_HACA = 6;
               AuthenMode_LDAP = 7;
               AuthenMode_AD = 8;
               AuthenMode_SUPER = 9;
            };
            repeated AuthenMode authen_mode = 1 [json_name = "authen-mode"];
         }
         oneof AuthenModeType {
            AuthenModeType_OrderedStrictly authen_mode_type_ordered_strictly = 7 [json_name = "ordered-strictly"];
            AuthenModeType_OrderedByUser authen_mode_type_ordered_by_user = 10 [json_name = "ordered-by-user"];
         }
         bool isauto_change = 9 [json_name = "isauto-change"];
         enum AuthenticationSuperMode {
            AuthenticationSuperMode_INVALID = 0;
            AuthenticationSuperMode_LOCAL = 1;
            AuthenticationSuperMode_HWTACACS = 2;
            AuthenticationSuperMode_RADIUS = 3;
            AuthenticationSuperMode_NONE = 4;
            AuthenticationSuperMode_RADIUSX_PROXY = 5;
            AuthenticationSuperMode_HACA = 6;
            AuthenticationSuperMode_LDAP = 7;
            AuthenticationSuperMode_AD = 8;
            AuthenticationSuperMode_SUPER = 9;
         };
         repeated AuthenticationSuperMode authentication_super_mode = 11 [json_name = "authentication-super-mode"];
         bool no_response_accounting = 12 [json_name = "no-response-accounting"];
         bool no_response_authorization = 13 [json_name = "no-response-authorization"];
         message RadiusChap {
            enum AccessType {
               AccessType_FTP = 0;
               AccessType_SSH = 1;
               AccessType_TELNET = 2;
               AccessType_TERMINAL = 3;
               AccessType_HTTP = 4;
            };
            repeated AccessType access_type = 1 [json_name = "access-type"];
         }
         RadiusChap radius_chap = 14 [json_name = "radius-chap"];
         enum AuthenticationChange {
            AuthenticationChange_NONE = 0;
            AuthenticationChange_HWTACACSX_LOCAL = 1;
         };
         AuthenticationChange authentication_change = 15 [json_name = "authentication-change"];
      }
      repeated AuthenticationScheme authentication_scheme = 1 [json_name = "authentication-scheme"];
   }
   AuthenticationSchemes authentication_schemes = 4 [json_name = "authentication-schemes"];
   message AuthorizationSchemes {
      message AuthorizationScheme {
         string author_scheme_name = 1 [json_name = "author-scheme-name"];
         enum FirstAuthorMode {
            FirstAuthorMode_INVALID = 0;
            FirstAuthorMode_LOCAL = 1;
            FirstAuthorMode_HWTACACS = 2;
            FirstAuthorMode_IFX_AUTHENTICATED = 3;
            FirstAuthorMode_NONE = 4;
         };
         FirstAuthorMode first_author_mode = 2 [json_name = "first-author-mode"];
         enum SecondAuthorMode {
            SecondAuthorMode_INVALID = 0;
            SecondAuthorMode_LOCAL = 1;
            SecondAuthorMode_HWTACACS = 2;
            SecondAuthorMode_IFX_AUTHENTICATED = 3;
            SecondAuthorMode_NONE = 4;
         };
         SecondAuthorMode second_author_mode = 3 [json_name = "second-author-mode"];
         enum ThirdAuthorMode {
            ThirdAuthorMode_INVALID = 0;
            ThirdAuthorMode_LOCAL = 1;
            ThirdAuthorMode_HWTACACS = 2;
            ThirdAuthorMode_IFX_AUTHENTICATED = 3;
            ThirdAuthorMode_NONE = 4;
         };
         ThirdAuthorMode third_author_mode = 4 [json_name = "third-author-mode"];
         enum FourthAuthorMode {
            FourthAuthorMode_INVALID = 0;
            FourthAuthorMode_LOCAL = 1;
            FourthAuthorMode_HWTACACS = 2;
            FourthAuthorMode_IFX_AUTHENTICATED = 3;
            FourthAuthorMode_NONE = 4;
         };
         FourthAuthorMode fourth_author_mode = 5 [json_name = "fourth-author-mode"];
         enum NoLvlFirstCmdAuthor {
            NoLvlFirstCmdAuthor_INVALID = 0;
            NoLvlFirstCmdAuthor_LOCAL = 1;
            NoLvlFirstCmdAuthor_HWTACACS = 2;
         };
         NoLvlFirstCmdAuthor no_lvl_first_cmd_author = 6 [json_name = "no-lvl-first-cmd-author"];
         enum NoLvlSecondCmdAuthor {
            NoLvlSecondCmdAuthor_INVALID = 0;
            NoLvlSecondCmdAuthor_LOCAL = 1;
            NoLvlSecondCmdAuthor_HWTACACS = 2;
         };
         NoLvlSecondCmdAuthor no_lvl_second_cmd_author = 7 [json_name = "no-lvl-second-cmd-author"];
         enum NoResponsePolicy {
            INVALID_ENUM_VALUE_NoResponsePolicy = 0;
            NoResponsePolicy_OFFLINE = 1;
            NoResponsePolicy_ONLINE = 2;
         };
         NoResponsePolicy no_response_policy = 8 [json_name = "no-response-policy"];
         uint32 no_response_times = 9 [json_name = "no-response-times"];
         message AuthorizationCmds {
            message AuthorizationCmd {
               uint32 level = 1 [json_name = "level"];
               enum FirstCmdAuthor {
                  FirstCmdAuthor_INVALID = 0;
                  FirstCmdAuthor_LOCAL = 1;
                  FirstCmdAuthor_HWTACACS = 2;
               };
               FirstCmdAuthor first_cmd_author = 2 [json_name = "first-cmd-author"];
               enum SecondCmdAuthor {
                  SecondCmdAuthor_INVALID = 0;
                  SecondCmdAuthor_LOCAL = 1;
                  SecondCmdAuthor_HWTACACS = 2;
               };
               SecondCmdAuthor second_cmd_author = 3 [json_name = "second-cmd-author"];
               message CmdAuthorModeType_OrderedStrictly {
                  enum FirstCmdAuthor {
                     FirstCmdAuthor_INVALID = 0;
                     FirstCmdAuthor_LOCAL = 1;
                     FirstCmdAuthor_HWTACACS = 2;
                  };
                  FirstCmdAuthor first_cmd_author = 1 [json_name = "first-cmd-author"];
                  enum SecondCmdAuthor {
                     SecondCmdAuthor_INVALID = 0;
                     SecondCmdAuthor_LOCAL = 1;
                     SecondCmdAuthor_HWTACACS = 2;
                  };
                  SecondCmdAuthor second_cmd_author = 2 [json_name = "second-cmd-author"];
               }
               message CmdAuthorModeType_OrderedByUser {
                  enum AuthorMode {
                     AuthorMode_INVALID = 0;
                     AuthorMode_LOCAL = 1;
                     AuthorMode_HWTACACS = 2;
                  };
                  repeated AuthorMode author_mode = 1 [json_name = "author-mode"];
               }
               oneof CmdAuthorModeType {
                  CmdAuthorModeType_OrderedStrictly cmd_author_mode_type_ordered_strictly = 4 [json_name = "ordered-strictly"];
                  CmdAuthorModeType_OrderedByUser cmd_author_mode_type_ordered_by_user = 5 [json_name = "ordered-by-user"];
               }
            }
            repeated AuthorizationCmd authorization_cmd = 1 [json_name = "authorization-cmd"];
         }
         AuthorizationCmds authorization_cmds = 10 [json_name = "authorization-cmds"];
         message AuthorModeType_OrderedStrictly {
            enum FirstAuthorMode {
               FirstAuthorMode_INVALID = 0;
               FirstAuthorMode_LOCAL = 1;
               FirstAuthorMode_HWTACACS = 2;
               FirstAuthorMode_IFX_AUTHENTICATED = 3;
               FirstAuthorMode_NONE = 4;
            };
            FirstAuthorMode first_author_mode = 1 [json_name = "first-author-mode"];
            enum SecondAuthorMode {
               SecondAuthorMode_INVALID = 0;
               SecondAuthorMode_LOCAL = 1;
               SecondAuthorMode_HWTACACS = 2;
               SecondAuthorMode_IFX_AUTHENTICATED = 3;
               SecondAuthorMode_NONE = 4;
            };
            SecondAuthorMode second_author_mode = 2 [json_name = "second-author-mode"];
            enum ThirdAuthorMode {
               ThirdAuthorMode_INVALID = 0;
               ThirdAuthorMode_LOCAL = 1;
               ThirdAuthorMode_HWTACACS = 2;
               ThirdAuthorMode_IFX_AUTHENTICATED = 3;
               ThirdAuthorMode_NONE = 4;
            };
            ThirdAuthorMode third_author_mode = 3 [json_name = "third-author-mode"];
            enum FourthAuthorMode {
               FourthAuthorMode_INVALID = 0;
               FourthAuthorMode_LOCAL = 1;
               FourthAuthorMode_HWTACACS = 2;
               FourthAuthorMode_IFX_AUTHENTICATED = 3;
               FourthAuthorMode_NONE = 4;
            };
            FourthAuthorMode fourth_author_mode = 4 [json_name = "fourth-author-mode"];
         }
         message AuthorModeType_OrderedByUser {
            enum AuthorMode {
               AuthorMode_INVALID = 0;
               AuthorMode_LOCAL = 1;
               AuthorMode_HWTACACS = 2;
               AuthorMode_IFX_AUTHENTICATED = 3;
               AuthorMode_NONE = 4;
            };
            repeated AuthorMode author_mode = 1 [json_name = "author-mode"];
         }
         oneof AuthorModeType {
            AuthorModeType_OrderedStrictly author_mode_type_ordered_strictly = 11 [json_name = "ordered-strictly"];
            AuthorModeType_OrderedByUser author_mode_type_ordered_by_user = 12 [json_name = "ordered-by-user"];
         }
      }
      repeated AuthorizationScheme authorization_scheme = 1 [json_name = "authorization-scheme"];
   }
   AuthorizationSchemes authorization_schemes = 5 [json_name = "authorization-schemes"];
   message AccountingSchemes {
      message AccountingScheme {
         string acct_scheme_name = 1 [json_name = "acct-scheme-name"];
         enum AccountingMode {
            AccountingMode_INVALID = 0;
            AccountingMode_RADIUS = 1;
            AccountingMode_HWTACACS = 2;
            AccountingMode_NONE = 3;
            AccountingMode_HACA = 4;
         };
         AccountingMode accounting_mode = 2 [json_name = "accounting-mode"];
         message BrasUserManage {
            message RealTimeAccountingPolicy {
               uint32 accounting_interval = 1 [json_name = "accounting-interval"];
               enum AccountingUnit {
                  AccountingUnit_MINUTE = 0;
                  AccountingUnit_SECOND = 1;
               };
               AccountingUnit accounting_unit = 2 [json_name = "accounting-unit"];
               bool traffic = 3 [json_name = "traffic"];
               bool hash = 4 [json_name = "hash"];
               bool accounting_send_update = 5 [json_name = "accounting-send-update"];
            }
            RealTimeAccountingPolicy real_time_accounting_policy = 1 [json_name = "real-time-accounting-policy"];
            message AccountingFailPolicy {
               uint32 max_times = 1 [json_name = "max-times"];
               enum InterimFailPolicy {
                  INVALID_ENUM_VALUE_InterimFailPolicy = 0;
                  InterimFailPolicy_ONLINE = 1;
                  InterimFailPolicy_OFFLINE = 2;
               };
               InterimFailPolicy interim_fail_policy = 2 [json_name = "interim-fail-policy"];
               enum StartFailPolicy {
                  INVALID_ENUM_VALUE_StartFailPolicy = 0;
                  StartFailPolicy_ONLINE = 1;
                  StartFailPolicy_OFFLINE = 2;
               };
               StartFailPolicy start_fail_policy = 3 [json_name = "start-fail-policy"];
               bool keep_accounting = 4 [json_name = "keep-accounting"];
            }
            AccountingFailPolicy accounting_fail_policy = 2 [json_name = "accounting-fail-policy"];
         }
         BrasUserManage bras_user_manage = 3 [json_name = "bras-user-manage"];
         message StartAccountingFail {
            enum FailPolicy {
               FailPolicy_OFFLINE = 0;
               FailPolicy_ONLINE = 1;
            };
            FailPolicy fail_policy = 1 [json_name = "fail-policy"];
         }
         StartAccountingFail start_accounting_fail = 4 [json_name = "start-accounting-fail"];
         message RealtimeAccounting {
            uint32 realtime_interval = 1 [json_name = "realtime-interval"];
            message RealtimeFail {
               enum FailPolicy {
                  FailPolicy_OFFLINE = 0;
                  FailPolicy_ONLINE = 1;
               };
               FailPolicy fail_policy = 1 [json_name = "fail-policy"];
               uint32 fail_max_times = 2 [json_name = "fail-max-times"];
            }
            RealtimeFail realtime_fail = 2 [json_name = "realtime-fail"];
         }
         RealtimeAccounting realtime_accounting = 5 [json_name = "realtime-accounting"];
      }
      repeated AccountingScheme accounting_scheme = 1 [json_name = "accounting-scheme"];
   }
   AccountingSchemes accounting_schemes = 6 [json_name = "accounting-schemes"];
   message Domains {
      message Domain {
         string name = 1 [json_name = "name"];
         uint32 admin_level = 2 [json_name = "admin-level"];
         string authen_scheme_name = 3 [json_name = "authen-scheme-name"];
         string author_scheme_name = 4 [json_name = "author-scheme-name"];
         string acct_scheme_name = 5 [json_name = "acct-scheme-name"];
         int32 access_limit = 6 [json_name = "access-limit"];
         string radius_server_template = 7 [json_name = "radius-server-template"];
         string hwtacacs_server_template = 8 [json_name = "hwtacacs-server-template"];
         enum State {
            State_BLOCK = 0;
            State_ACTIVE = 1;
         };
         State state = 9 [json_name = "state"];
         bool service_terminal = 10 [json_name = "service-terminal"];
         bool service_telnet = 11 [json_name = "service-telnet"];
         bool service_ftp = 12 [json_name = "service-ftp"];
         bool service_ppp = 13 [json_name = "service-ppp"];
         bool service_ssh = 14 [json_name = "service-ssh"];
         bool service_qx = 15 [json_name = "service-qx"];
         bool service_snmp = 16 [json_name = "service-snmp"];
         bool service_mml = 17 [json_name = "service-mml"];
         bool service_http = 18 [json_name = "service-http"];
         bool time_range_enable = 19 [json_name = "time-range-enable"];
         int32 online_num = 20 [json_name = "online-num"];
         message Bas {
            message Ipv4BasicAccess {
               message MaxUserReauthTime {
                  uint32 time = 1 [json_name = "time"];
               }
               MaxUserReauthTime max_user_reauth_time = 1 [json_name = "max-user-reauth-time"];
               message IpPools {
                  message IpPool {
                     string name = 1 [json_name = "name"];
                  }
                  repeated IpPool ip_pool = 1 [json_name = "ip-pool"];
               }
               IpPools ip_pools = 2 [json_name = "ip-pools"];
               message AccountingCopyRadius {
                  string name = 1 [json_name = "name"];
                  bool realtime_accounting_copy = 2 [json_name = "realtime-accounting-copy"];
               }
               AccountingCopyRadius accounting_copy_radius = 3 [json_name = "accounting-copy-radius"];
               message DnsServer {
                  string primary_ip = 1 [json_name = "primary-ip"];
                  string secondary_ip = 2 [json_name = "secondary-ip"];
               }
               DnsServer dns_server = 4 [json_name = "dns-server"];
               message NbnsServer {
                  string primary_ip = 1 [json_name = "primary-ip"];
                  string secondary_ip = 2 [json_name = "secondary-ip"];
               }
               NbnsServer nbns_server = 5 [json_name = "nbns-server"];
               message UserGroup {
                  string name = 1 [json_name = "name"];
               }
               UserGroup user_group = 6 [json_name = "user-group"];
               message PolicyRoute {
                  string ipv4_address = 1 [json_name = "ipv4-address"];
                  string ipv6_address = 2 [json_name = "ipv6-address"];
               }
               PolicyRoute policy_route = 7 [json_name = "policy-route"];
               message UserMaxSession {
                  uint32 number7 = 1 [json_name = "number"];
                  bool local_user_name_case_insensitive = 2 [json_name = "local-user-name-case-insensitive"];
               }
               UserMaxSession user_max_session = 8 [json_name = "user-max-session"];
               message IpUnrRouteTag {
                  uint32 value = 1 [json_name = "value"];
               }
               IpUnrRouteTag ip_unr_route_tag = 9 [json_name = "ip-unr-route-tag"];
               message UserDetect {
                  uint32 retransmit_time = 1 [json_name = "retransmit-time"];
                  uint32 interval = 2 [json_name = "interval"];
               }
               UserDetect user_detect = 10 [json_name = "user-detect"];
               message UserBasicServiceIpType {
                  bool ipv4 = 1 [json_name = "ipv4"];
                  bool ipv6 = 2 [json_name = "ipv6"];
                  bool ipv6_pd = 3 [json_name = "ipv6-pd"];
               }
               UserBasicServiceIpType user_basic_service_ip_type = 11 [json_name = "user-basic-service-ip-type"];
               message Cui {
                  bool enable = 1 [json_name = "enable"];
               }
               Cui cui = 12 [json_name = "cui"];
               message IpPoolMode {
                  enum Layer2UserPriority {
                     INVALID_ENUM_VALUE_Layer2UserPriority = 0;
                     Layer2UserPriority_LOCAL = 1;
                     Layer2UserPriority_REMOTE = 2;
                  };
                  Layer2UserPriority layer2_user_priority = 1 [json_name = "layer2-user-priority"];
                  enum Layer3UserPriority {
                     Layer3UserPriority_BASEDX_ONX_GATEWAYX_ADDRESS = 0;
                     Layer3UserPriority_LOCAL = 1;
                     Layer3UserPriority_REMOTE = 2;
                  };
                  Layer3UserPriority layer3_user_priority = 2 [json_name = "layer3-user-priority"];
                  enum UserType {
                     INVALID_ENUM_VALUE_UserType = 0;
                     UserType_IPOE = 1;
                     UserType_PPPOE = 2;
                  };
                  UserType user_type = 3 [json_name = "user-type"];
               }
               IpPoolMode ip_pool_mode = 13 [json_name = "ip-pool-mode"];
               message AccountingExcludeVlan {
                  bool ipoe = 1 [json_name = "ipoe"];
                  bool pppoe = 2 [json_name = "pppoe"];
               }
               AccountingExcludeVlan accounting_exclude_vlan = 14 [json_name = "accounting-exclude-vlan"];
               message Annex {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_LEFT = 1;
                     Direction_RIGHT = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string string_1 = 2 [json_name = "string"];
               }
               Annex annex = 15 [json_name = "annex"];
               message MacAuthentication {
                  bool enable = 1 [json_name = "enable"];
               }
               MacAuthentication mac_authentication = 16 [json_name = "mac-authentication"];
               message IpPoolGroups {
                  message IpPoolGroup {
                     string name = 1 [json_name = "name"];
                  }
                  repeated IpPoolGroup ip_pool_group = 1 [json_name = "ip-pool-group"];
               }
               IpPoolGroups ip_pool_groups = 17 [json_name = "ip-pool-groups"];
               message FramedIpUrpf {
                  bool enable = 1 [json_name = "enable"];
               }
               FramedIpUrpf framed_ip_urpf = 18 [json_name = "framed-ip-urpf"];
               message MapPriority {
                  bool map_t_priority = 1 [json_name = "map-t-priority"];
               }
               MapPriority map_priority = 19 [json_name = "map-priority"];
               message IdleUserControlPolicy {
                  uint32 cut_time = 1 [json_name = "cut-time"];
                  enum CutFlowDirection {
                     INVALID_ENUM_VALUE_CutFlowDirection = 0;
                     CutFlowDirection_INBOUND = 1;
                     CutFlowDirection_OUTBOUND = 2;
                  };
                  CutFlowDirection cut_flow_direction = 2 [json_name = "cut-flow-direction"];
                  message CutRate_Rate {
                     uint32 rate8 = 1 [json_name = "rate"];
                  }
                  message CutRate_ZeroRate {
                     bool zero_rate = 1 [json_name = "zero-rate"];
                  }
                  oneof CutRate {
                     CutRate_Rate cut_rate_rate = 3 [json_name = "rate"];
                     CutRate_ZeroRate cut_rate_zero_rate = 4 [json_name = "zero-rate"];
                  }
               }
               IdleUserControlPolicy idle_user_control_policy = 20 [json_name = "idle-user-control-policy"];
               message QuotaOut {
                  message Policy_Offline {
                     bool offline8 = 1 [json_name = "offline"];
                  }
                  message Policy_Online {
                     bool online8 = 1 [json_name = "online"];
                  }
                  message Policy_Redirect {
                     string url = 1 [json_name = "url"];
                     bool stop_accounting = 2 [json_name = "stop-accounting"];
                  }
                  message Policy_RealtimeAccounting {
                     bool enable = 1 [json_name = "enable"];
                  }
                  oneof Policy {
                     Policy_Offline policy_offline = 1 [json_name = "offline"];
                     Policy_Online policy_online = 2 [json_name = "online"];
                     Policy_Redirect policy_redirect = 3 [json_name = "redirect"];
                     Policy_RealtimeAccounting policy_realtime_accounting = 4 [json_name = "realtime-accounting"];
                  }
               }
               QuotaOut quota_out = 21 [json_name = "quota-out"];
               message AnyAddressRelease {
                  bool offline = 1 [json_name = "offline"];
               }
               AnyAddressRelease any_address_release = 22 [json_name = "any-address-release"];
               message PublicIpAddressPoolUsageThreshold {
                  uint32 lower = 1 [json_name = "lower"];
                  uint32 upper = 2 [json_name = "upper"];
                  bool both_cgn = 3 [json_name = "both-cgn"];
               }
               PublicIpAddressPoolUsageThreshold public_ip_address_pool_usage_threshold = 23 [json_name = "public-ip-address-pool-usage-threshold"];
               message UserVolumeQuato {
                  enum Direction {
                     Direction_BOTH = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               UserVolumeQuato user_volume_quato = 24 [json_name = "user-volume-quato"];
               message AccountingStartDelay {
                  bool ipv4_immediately = 1 [json_name = "ipv4-immediately"];
                  message DelayPolicy {
                     uint32 time = 1 [json_name = "time"];
                     enum Method {
                        INVALID_ENUM_VALUE_Method = 0;
                        Method_ONLINE = 1;
                        Method_OFFLINE = 2;
                     };
                     Method method = 2 [json_name = "method"];
                     message UserType_All {
                        bool all9 = 1 [json_name = "all"];
                     }
                     message UserType_Spec {
                        bool ppp = 1 [json_name = "ppp"];
                        bool ipoe = 2 [json_name = "ipoe"];
                        bool l2tp = 3 [json_name = "l2tp"];
                        bool static = 4 [json_name = "static"];
                     }
                     oneof UserType {
                        UserType_All user_type_all = 3 [json_name = "all"];
                        UserType_Spec user_type_spec = 4 [json_name = "spec"];
                     }
                  }
                  DelayPolicy delay_policy = 2 [json_name = "delay-policy"];
                  message Traffic {
                     bool forward_before_start_accounting = 1 [json_name = "forward-before-start-accounting"];
                     bool statistics_before_start_accounting = 2 [json_name = "statistics-before-start-accounting"];
                  }
                  Traffic traffic = 3 [json_name = "traffic"];
               }
               AccountingStartDelay accounting_start_delay = 25 [json_name = "accounting-start-delay"];
               message RadiusNoResponse {
                  uint32 lease_time = 1 [json_name = "lease-time"];
               }
               RadiusNoResponse radius_no_response = 26 [json_name = "radius-no-response"];
               message IpUsageThreshold {
                  uint32 lower = 1 [json_name = "lower"];
                  uint32 upper = 2 [json_name = "upper"];
               }
               IpUsageThreshold ip_usage_threshold = 27 [json_name = "ip-usage-threshold"];
               message NasLogic {
                  string system_name = 1 [json_name = "system-name"];
               }
               NasLogic nas_logic = 28 [json_name = "nas-logic"];
               message LlidFirstAuthenticationRadiusServerGroup {
                  string name = 1 [json_name = "name"];
               }
               LlidFirstAuthenticationRadiusServerGroup llid_first_authentication_radius_server_group = 29 [json_name = "llid-first-authentication-radius-server-group"];
               message NonAccoutingTimeRange {
                  string name = 1 [json_name = "name"];
               }
               NonAccoutingTimeRange non_accouting_time_range = 30 [json_name = "non-accouting-time-range"];
               message UserGroupList {
                  string name = 1 [json_name = "name"];
               }
               UserGroupList user_group_list = 31 [json_name = "user-group-list"];
               message PreAuthRadiusServerGroups {
                  message PreAuthRadiusServerGroup {
                     string radius_server_group_name = 1 [json_name = "radius-server-group-name"];
                     uint32 priority = 2 [json_name = "priority"];
                  }
                  repeated PreAuthRadiusServerGroup pre_auth_radius_server_group = 1 [json_name = "pre-auth-radius-server-group"];
               }
               PreAuthRadiusServerGroups pre_auth_radius_server_groups = 32 [json_name = "pre-auth-radius-server-groups"];
            }
            Ipv4BasicAccess ipv4_basic_access = 1 [json_name = "ipv4-basic-access"];
            message Vas {
               message ServiceRateLimitMode {
                  enum Inbound {
                     Inbound_USERX_QUEUE = 0;
                     Inbound_CAR = 1;
                  };
                  Inbound inbound = 1 [json_name = "inbound"];
                  enum Outbound {
                     Outbound_USERX_QUEUE = 0;
                     Outbound_CAR = 1;
                  };
                  Outbound outbound = 2 [json_name = "outbound"];
               }
               ServiceRateLimitMode service_rate_limit_mode = 1 [json_name = "service-rate-limit-mode"];
               message EdsgTrafficMode {
                  enum RateLimitAndTrafficStatic {
                     RateLimitAndTrafficStatic_DEFAULTX_MODE = 0;
                     RateLimitAndTrafficStatic_SEPARATE = 1;
                     RateLimitAndTrafficStatic_TOGETHER = 2;
                  };
                  RateLimitAndTrafficStatic rate_limit_and_traffic_static = 1 [json_name = "rate-limit-and-traffic-static"];
               }
               EdsgTrafficMode edsg_traffic_mode = 2 [json_name = "edsg-traffic-mode"];
               message BillingServerType {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_DYNAMIC = 1;
                     Type_NORMAL = 2;
                  };
                  Type type = 1 [json_name = "type"];
               }
               BillingServerType billing_server_type = 3 [json_name = "billing-server-type"];
               message DaaCoexistQosProfile {
                  bool enable = 1 [json_name = "enable"];
               }
               DaaCoexistQosProfile daa_coexist_qos_profile = 4 [json_name = "daa-coexist-qos-profile"];
               message DaaMatchDirection {
                  bool inbound = 1 [json_name = "inbound"];
                  bool outbound = 2 [json_name = "outbound"];
               }
               DaaMatchDirection daa_match_direction = 5 [json_name = "daa-match-direction"];
               message FamilySchedule {
                  bool inbound = 1 [json_name = "inbound"];
                  bool outbound = 2 [json_name = "outbound"];
               }
               FamilySchedule family_schedule = 6 [json_name = "family-schedule"];
               message TrafficMatchUserGroup {
                  enum Direction {
                     Direction_BOTH = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               TrafficMatchUserGroup traffic_match_user_group = 7 [json_name = "traffic-match-user-group"];
               message AccountType {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_DEFAULT = 1;
                     Type_NONE = 2;
                     Type_RADIUS = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  string radius_server_group_name = 2 [json_name = "radius-server-group-name"];
               }
               AccountType account_type = 8 [json_name = "account-type"];
               message VasPolicy {
                  string name = 1 [json_name = "name"];
               }
               VasPolicy vas_policy = 9 [json_name = "vas-policy"];
               message ServicePolicy {
                  string name = 1 [json_name = "name"];
               }
               ServicePolicy service_policy = 10 [json_name = "service-policy"];
               message EdsgAccountingCopyServer {
                  string radius_server_group_name = 1 [json_name = "radius-server-group-name"];
               }
               EdsgAccountingCopyServer edsg_accounting_copy_server = 11 [json_name = "edsg-accounting-copy-server"];
               message ServicePolicyGroup {
                  string name = 1 [json_name = "name"];
               }
               ServicePolicyGroup service_policy_group = 12 [json_name = "service-policy-group"];
               message DaaAccountingMerge {
                  bool start_packet = 1 [json_name = "start-packet"];
                  bool stop_packet = 2 [json_name = "stop-packet"];
                  uint32 interim_packet_interval = 3 [json_name = "interim-packet-interval"];
                  bool interim_packet_hash = 4 [json_name = "interim-packet-hash"];
               }
               DaaAccountingMerge daa_accounting_merge = 13 [json_name = "daa-accounting-merge"];
               message EdsgAccountingMerge {
                  message StopPacket {
                     bool enable = 1 [json_name = "enable"];
                     enum ReportDropFlowqueueDirect {
                        INVALID_ENUM_VALUE_ReportDropFlowqueueDirect = 0;
                        ReportDropFlowqueueDirect_INBOUND = 1;
                        ReportDropFlowqueueDirect_OUTBOUND = 2;
                        ReportDropFlowqueueDirect_BOTH = 3;
                     };
                     ReportDropFlowqueueDirect report_drop_flowqueue_direct = 2 [json_name = "report-drop-flowqueue-direct"];
                  }
                  StopPacket stop_packet = 1 [json_name = "stop-packet"];
                  message InterimPacket {
                     uint32 interval = 1 [json_name = "interval"];
                     bool hash_packet = 2 [json_name = "hash-packet"];
                     enum ReportDropFlowqueueDirect {
                        INVALID_ENUM_VALUE_ReportDropFlowqueueDirect = 0;
                        ReportDropFlowqueueDirect_INBOUND = 1;
                        ReportDropFlowqueueDirect_OUTBOUND = 2;
                        ReportDropFlowqueueDirect_BOTH = 3;
                     };
                     ReportDropFlowqueueDirect report_drop_flowqueue_direct = 3 [json_name = "report-drop-flowqueue-direct"];
                  }
                  InterimPacket interim_packet = 2 [json_name = "interim-packet"];
               }
               EdsgAccountingMerge edsg_accounting_merge = 14 [json_name = "edsg-accounting-merge"];
            }
            Vas vas = 2 [json_name = "vas"];
            message BrasAutoSave {
               message DhcpAutoSave {
                  bool enable = 1 [json_name = "enable"];
               }
               DhcpAutoSave dhcp_auto_save = 1 [json_name = "dhcp-auto-save"];
            }
            BrasAutoSave bras_auto_save = 3 [json_name = "bras-auto-save"];
            message BrasCgn {
               message PublicAddress {
                  bool nat_enable = 1 [json_name = "nat-enable"];
                  bool assign_first = 2 [json_name = "assign-first"];
                  bool nat_instance_down = 3 [json_name = "nat-instance-down"];
               }
               PublicAddress public_address = 1 [json_name = "public-address"];
               message Ipv6PoolDomain {
                  string aftr_name = 1 [json_name = "aftr-name"];
               }
               Ipv6PoolDomain ipv6_pool_domain = 2 [json_name = "ipv6-pool-domain"];
               message DsLiteIpv4Portal {
                  bool enable = 1 [json_name = "enable"];
               }
               DsLiteIpv4Portal ds_lite_ipv4_portal = 3 [json_name = "ds-lite-ipv4-portal"];
               message UserGroupBindNats {
                  message UserGroupBindNat {
                     string user_group_name = 1 [json_name = "user-group-name"];
                     string instance_name = 2 [json_name = "instance-name"];
                     string ip_pool_name = 3 [json_name = "ip-pool-name"];
                  }
                  repeated UserGroupBindNat user_group_bind_nat = 1 [json_name = "user-group-bind-nat"];
               }
               UserGroupBindNats user_group_bind_nats = 4 [json_name = "user-group-bind-nats"];
               message UserGroupBindDsLites {
                  message UserGroupBindDsLite {
                     string user_group_name = 1 [json_name = "user-group-name"];
                     string instance_name = 2 [json_name = "instance-name"];
                  }
                  repeated UserGroupBindDsLite user_group_bind_ds_lite = 1 [json_name = "user-group-bind-ds-lite"];
               }
               UserGroupBindDsLites user_group_bind_ds_lites = 5 [json_name = "user-group-bind-ds-lites"];
            }
            BrasCgn bras_cgn = 4 [json_name = "bras-cgn"];
            message DhcpAccess {
               message ServerAck {
                  bool enable = 1 [json_name = "enable"];
               }
               ServerAck server_ack = 1 [json_name = "server-ack"];
               message ParseQosProfile {
                  bool parse = 1 [json_name = "parse"];
                  string separator = 2 [json_name = "separator"];
                  uint32 segment = 3 [json_name = "segment"];
               }
               ParseQosProfile parse_qos_profile = 2 [json_name = "parse-qos-profile"];
               message Option121Routes {
                  message Option121Route {
                     string destination_ip = 1 [json_name = "destination-ip"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string gateway = 3 [json_name = "gateway"];
                  }
                  repeated Option121Route option121_route = 1 [json_name = "option121-route"];
               }
               Option121Routes option121_routes = 3 [json_name = "option121-routes"];
               message ThroughPacket {
                  bool enable = 1 [json_name = "enable"];
               }
               ThroughPacket through_packet = 4 [json_name = "through-packet"];
               message CoaZeroLeaseDualCut {
                  bool enable = 1 [json_name = "enable"];
               }
               CoaZeroLeaseDualCut coa_zero_lease_dual_cut = 5 [json_name = "coa-zero-lease-dual-cut"];
               message UserOfflineBySendPacket {
                  bool discover = 1 [json_name = "discover"];
                  bool reboot_request = 2 [json_name = "reboot-request"];
               }
               UserOfflineBySendPacket user_offline_by_send_packet = 6 [json_name = "user-offline-by-send-packet"];
            }
            DhcpAccess dhcp_access = 5 [json_name = "dhcp-access"];
            message Dhcpv6Access {
               message PacketPolicy {
                  bool nd_ra_link_prefix = 1 [json_name = "nd-ra-link-prefix"];
                  bool circuit_id = 2 [json_name = "circuit-id"];
                  bool remote_id = 3 [json_name = "remote-id"];
               }
               PacketPolicy packet_policy = 1 [json_name = "packet-policy"];
               message ZeroLeaseV6Enhance {
                  bool enable = 1 [json_name = "enable"];
               }
               ZeroLeaseV6Enhance zero_lease_v6enhance = 2 [json_name = "zero-lease-v6enhance"];
               message LeaseProxy {
                  uint32 prefer_time = 1 [json_name = "prefer-time"];
                  uint32 valid_time = 2 [json_name = "valid-time"];
                  bool user_detect = 3 [json_name = "user-detect"];
               }
               LeaseProxy lease_proxy = 3 [json_name = "lease-proxy"];
            }
            Dhcpv6Access dhcpv6_access = 6 [json_name = "dhcpv6-access"];
            message WebAuthen {
               message ReallocateIpAddress {
                  bool enable = 1 [json_name = "enable"];
               }
               ReallocateIpAddress reallocate_ip_address = 1 [json_name = "reallocate-ip-address"];
            }
            WebAuthen web_authen = 7 [json_name = "web-authen"];
            message HttpRedirect {
               message PortalRedirectAge {
                  uint32 time = 1 [json_name = "time"];
               }
               PortalRedirectAge portal_redirect_age = 1 [json_name = "portal-redirect-age"];
               message PortalRedirectPppoeUrl {
                  string authenticate = 1 [json_name = "authenticate"];
               }
               PortalRedirectPppoeUrl portal_redirect_pppoe_url = 2 [json_name = "portal-redirect-pppoe-url"];
               message PortalRedirectIdenticalUrl {
                  bool enable = 1 [json_name = "enable"];
               }
               PortalRedirectIdenticalUrl portal_redirect_identical_url = 3 [json_name = "portal-redirect-identical-url"];
               message PortalServer {
                  bool url_parameter = 1 [json_name = "url-parameter"];
                  enum CipherKeyType {
                     INVALID_ENUM_VALUE_CipherKeyType = 0;
                     CipherKeyType_CIPHERX_WITHOUTX_KEY = 1;
                  };
                  CipherKeyType cipher_key_type = 2 [json_name = "cipher-key-type"];
                  string shared_key_cipher = 3 [json_name = "shared-key-cipher"];
                  string ip_address = 4 [json_name = "ip-address"];
                  string ipv6_address = 5 [json_name = "ipv6-address"];
                  uint32 redirect_limit = 6 [json_name = "redirect-limit"];
                  string url = 7 [json_name = "url"];
               }
               PortalServer portal_server = 4 [json_name = "portal-server"];
               message WebServerUrl {
                  string url_name = 1 [json_name = "url-name"];
                  string auth_ip_address = 2 [json_name = "auth-ip-address"];
                  string vpn_name = 3 [json_name = "vpn-name"];
               }
               WebServerUrl web_server_url = 5 [json_name = "web-server-url"];
               message WebServerUrlSlave {
                  string url_name = 1 [json_name = "url-name"];
                  string auth_ip_address = 2 [json_name = "auth-ip-address"];
                  string vpn_name = 3 [json_name = "vpn-name"];
               }
               WebServerUrlSlave web_server_url_slave = 6 [json_name = "web-server-url-slave"];
               message WebServerAddress {
                  string ip_address = 1 [json_name = "ip-address"];
                  string ipv6_address = 2 [json_name = "ipv6-address"];
                  string auth_ip_address = 3 [json_name = "auth-ip-address"];
                  string vpn_instance = 4 [json_name = "vpn-instance"];
               }
               WebServerAddress web_server_address = 7 [json_name = "web-server-address"];
               message WebServerAddressSlave {
                  string ip_address = 1 [json_name = "ip-address"];
                  string ipv6_address = 2 [json_name = "ipv6-address"];
                  string auth_ip_address = 3 [json_name = "auth-ip-address"];
                  string vpn_instance = 4 [json_name = "vpn-instance"];
               }
               WebServerAddressSlave web_server_address_slave = 8 [json_name = "web-server-address-slave"];
               message WebRedirect {
                  enum WorkMode {
                     INVALID_ENUM_VALUE_WorkMode = 0;
                     WorkMode_GET = 1;
                     WorkMode_POST = 2;
                  };
                  WorkMode work_mode = 1 [json_name = "work-mode"];
               }
               WebRedirect web_redirect = 9 [json_name = "web-redirect"];
               message WebRedirectIdentical {
                  bool url = 1 [json_name = "url"];
               }
               WebRedirectIdentical web_redirect_identical = 10 [json_name = "web-redirect-identical"];
               message RedirectUsersToUrls {
                  message RedirectUsersToUrl {
                     uint32 index = 1 [json_name = "index"];
                     string value = 2 [json_name = "value"];
                  }
                  repeated RedirectUsersToUrl redirect_users_to_url = 1 [json_name = "redirect-users-to-url"];
               }
               RedirectUsersToUrls redirect_users_to_urls = 11 [json_name = "redirect-users-to-urls"];
               message WebFirstUrl {
                  string key_string = 1 [json_name = "key-string"];
                  bool default_name = 2 [json_name = "default-name"];
               }
               WebFirstUrl web_first_url = 12 [json_name = "web-first-url"];
               message WebIndividualization {
                  string user_ipaddress_keyword = 1 [json_name = "user-ipaddress-keyword"];
                  string ipaddress_of_router_keyword = 2 [json_name = "ipaddress-of-router-keyword"];
                  string bras_name_for_users_login_keyword = 3 [json_name = "bras-name-for-users-login-keyword"];
                  string logical_host_name = 4 [json_name = "logical-host-name"];
                  string user_defined_ssid_keyword = 5 [json_name = "user-defined-ssid-keyword"];
                  string physical_location_keyword = 6 [json_name = "physical-location-keyword"];
                  string agent_remoteid_keyword = 7 [json_name = "agent-remoteid-keyword"];
                  string subscription_id_keyword = 8 [json_name = "subscription-id-keyword"];
                  string user_mac_keyword = 9 [json_name = "user-mac-keyword"];
                  bool user_mac_simple_text_keyword = 10 [json_name = "user-mac-simple-text-keyword"];
                  bool user_mac_display_format = 11 [json_name = "user-mac-display-format"];
                  bool user_mac_aes128_cipher_text = 12 [json_name = "user-mac-aes128-cipher-text"];
                  bool user_mac_encrypt_in_cbc = 13 [json_name = "user-mac-encrypt-in-cbc"];
                  bool user_mac_encrypt_in_gcm = 14 [json_name = "user-mac-encrypt-in-gcm"];
                  bool user_mac_encrypt_in_des = 15 [json_name = "user-mac-encrypt-in-des"];
                  string ap_mac_keyword = 16 [json_name = "ap-mac-keyword"];
                  bool ap_mac_simple_text_keyword = 17 [json_name = "ap-mac-simple-text-keyword"];
                  bool ap_mac_display_format = 18 [json_name = "ap-mac-display-format"];
                  bool ap_mac_aes128_cipher_text = 19 [json_name = "ap-mac-aes128-cipher-text"];
                  bool ap_mac_encrypted_in_cbc = 20 [json_name = "ap-mac-encrypted-in-cbc"];
                  bool ap_mac_encrypted_in_gcm = 21 [json_name = "ap-mac-encrypted-in-gcm"];
                  bool ap_mac_encrypted_in_des = 22 [json_name = "ap-mac-encrypted-in-des"];
               }
               WebIndividualization web_individualization = 13 [json_name = "web-individualization"];
               message WebShareKey {
                  bool carried_in_url_of_web_page = 1 [json_name = "carried-in-url-of-web-page"];
                  enum CipherKeyType {
                     INVALID_ENUM_VALUE_CipherKeyType = 0;
                     CipherKeyType_CIPHERX_WITHOUTX_KEY = 1;
                  };
                  CipherKeyType cipher_key_type = 2 [json_name = "cipher-key-type"];
                  string shared_key_cipher = 3 [json_name = "shared-key-cipher"];
               }
               WebShareKey web_share_key = 14 [json_name = "web-share-key"];
               message PortalIndividualization {
                  string user_macaddress = 1 [json_name = "user-macaddress"];
                  bool user_macaddress_in_simple_mode = 2 [json_name = "user-macaddress-in-simple-mode"];
                  bool delimiter_of_user_macaddress = 3 [json_name = "delimiter-of-user-macaddress"];
                  bool user_macaddress_in_aes128_cbc = 4 [json_name = "user-macaddress-in-aes128-cbc"];
                  bool user_macaddress_in_aes128_gcm = 5 [json_name = "user-macaddress-in-aes128-gcm"];
                  bool user_macaddress_in_des = 6 [json_name = "user-macaddress-in-des"];
                  string first_page_url_keyword = 7 [json_name = "first-page-url-keyword"];
                  bool first_page_url_default_keyword = 8 [json_name = "first-page-url-default-keyword"];
               }
               PortalIndividualization portal_individualization = 15 [json_name = "portal-individualization"];
               message DnsRedirect {
                  string server_ip = 1 [json_name = "server-ip"];
               }
               DnsRedirect dns_redirect = 16 [json_name = "dns-redirect"];
               message PostDomain {
                  message AutoLoginType_Web {
                     string ip_address = 1 [json_name = "ip-address"];
                     string vpn_instance = 2 [json_name = "vpn-instance"];
                  }
                  message AutoLoginType_Coa {
                     bool enable = 1 [json_name = "enable"];
                  }
                  oneof AutoLoginType {
                     AutoLoginType_Web auto_login_type_web = 1 [json_name = "web"];
                     AutoLoginType_Coa auto_login_type_coa = 2 [json_name = "coa"];
                  }
               }
               PostDomain post_domain = 17 [json_name = "post-domain"];
            }
            HttpRedirect http_redirect = 8 [json_name = "http-redirect"];
            message Ipv6BasicAccess {
               message DualStackAccounting {
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_SEPARATE = 1;
                     Mode_IDENTICAL = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               DualStackAccounting dual_stack_accounting = 1 [json_name = "dual-stack-accounting"];
               message Ipv6Pools {
                  message Ipv6Pool {
                     string name = 1 [json_name = "name"];
                  }
                  repeated Ipv6Pool ipv6_pool = 1 [json_name = "ipv6-pool"];
               }
               Ipv6Pools ipv6_pools = 2 [json_name = "ipv6-pools"];
               message PrefixAssignMode {
                  bool unshared = 1 [json_name = "unshared"];
               }
               PrefixAssignMode prefix_assign_mode = 3 [json_name = "prefix-assign-mode"];
               message NdRaAssignMode {
                  enum Mode {
                     Mode_DHCPV6 = 0;
                     Mode_NDX_RA = 1;
                     Mode_DHCPV6X_ENHANCE = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               NdRaAssignMode nd_ra_assign_mode = 4 [json_name = "nd-ra-assign-mode"];
               message PppoxAssignMode {
                  enum Mode {
                     Mode_DHCPV6X_WITHOUTX_INTERFACEX_ID = 0;
                     Mode_DHCPV6X_WITHX_INTERFACEX_ID = 1;
                     Mode_NDX_RAX_WITHOUTX_INTERFACEX_ID = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               PppoxAssignMode pppox_assign_mode = 5 [json_name = "pppox-assign-mode"];
               message Ipv6NdRaHalt {
                  bool enable = 1 [json_name = "enable"];
               }
               Ipv6NdRaHalt ipv6_nd_ra_halt = 6 [json_name = "ipv6-nd-ra-halt"];
               message Ipv6NdRaUnicast {
                  bool enable = 1 [json_name = "enable"];
               }
               Ipv6NdRaUnicast ipv6_nd_ra_unicast = 7 [json_name = "ipv6-nd-ra-unicast"];
               message Ipv6UsageThreshold {
                  uint32 lower = 1 [json_name = "lower"];
                  uint32 upper = 2 [json_name = "upper"];
               }
               Ipv6UsageThreshold ipv6_usage_threshold = 8 [json_name = "ipv6-usage-threshold"];
               message IpoePdAddressRelease {
                  bool separate = 1 [json_name = "separate"];
               }
               IpoePdAddressRelease ipoe_pd_address_release = 9 [json_name = "ipoe-pd-address-release"];
               message Ipv6AddressAuthorization {
                  bool enable = 1 [json_name = "enable"];
               }
               Ipv6AddressAuthorization ipv6_address_authorization = 10 [json_name = "ipv6-address-authorization"];
               message DnsServer {
                  string primary_ipv6_address = 1 [json_name = "primary-ipv6-address"];
                  string secondary_ipv6_address = 2 [json_name = "secondary-ipv6-address"];
               }
               DnsServer dns_server = 11 [json_name = "dns-server"];
            }
            Ipv6BasicAccess ipv6_basic_access = 9 [json_name = "ipv6-basic-access"];
            message L2Tp {
               message DomainRadiusForceEnable {
                  bool radius_force_enable = 1 [json_name = "radius-force-enable"];
               }
               DomainRadiusForceEnable domain_radius_force_enable = 1 [json_name = "domain-radius-force-enable"];
               message Authorization {
                  string password = 1 [json_name = "password"];
               }
               Authorization authorization = 2 [json_name = "authorization"];
               message Groups {
                  repeated string name = 1 [json_name = "name"];
               }
               Groups groups = 3 [json_name = "groups"];
               message QosProfile {
                  string inbound_profile_name = 1 [json_name = "inbound-profile-name"];
                  string outbound_profile_name = 2 [json_name = "outbound-profile-name"];
               }
               QosProfile qos_profile = 4 [json_name = "qos-profile"];
               message DslamConnectSpeed {
                  bool connect_speed_enable = 1 [json_name = "connect-speed-enable"];
               }
               DslamConnectSpeed dslam_connect_speed = 5 [json_name = "dslam-connect-speed"];
               message TunnelAccountRfc2867 {
                  bool account_enable = 1 [json_name = "account-enable"];
               }
               TunnelAccountRfc2867 tunnel_account_rfc_2867 = 6 [json_name = "tunnel-account-rfc-2867"];
               message PriorityCarOfTcpAckNoPayload {
                  bool lns_priority_car = 1 [json_name = "lns-priority-car"];
                  bool lns_edsg_ipv4 = 2 [json_name = "lns-edsg-ipv4"];
                  bool lns_edsg_ipv4_and_ipv6 = 3 [json_name = "lns-edsg-ipv4-and-ipv6"];
               }
               PriorityCarOfTcpAckNoPayload priority_car_of_tcp_ack_no_payload = 7 [json_name = "priority-car-of-tcp-ack-no-payload"];
            }
            L2Tp l2tp = 10 [json_name = "l2tp"];
            message LocalBackup {
               message LocalUserBackup {
                  bool enable = 1 [json_name = "enable"];
               }
               LocalUserBackup local_user_backup = 1 [json_name = "local-user-backup"];
            }
            LocalBackup local_backup = 11 [json_name = "local-backup"];
            message Multicast {
               message IgmpEnable {
                  bool enable = 1 [json_name = "enable"];
               }
               IgmpEnable igmp_enable = 1 [json_name = "igmp-enable"];
               message WithoutForward {
                  bool enable = 1 [json_name = "enable"];
               }
               WithoutForward without_forward = 2 [json_name = "without-forward"];
               message MaxList {
                  uint32 number7 = 1 [json_name = "number"];
               }
               MaxList max_list = 3 [json_name = "max-list"];
               message Ipv4Profile {
                  string name = 1 [json_name = "name"];
               }
               Ipv4Profile ipv4_profile = 4 [json_name = "ipv4-profile"];
               message Ipv6Profile {
                  string name = 1 [json_name = "name"];
               }
               Ipv6Profile ipv6_profile = 5 [json_name = "ipv6-profile"];
               message VirtualSchedulingVpn {
                  string name = 1 [json_name = "name"];
               }
               VirtualSchedulingVpn virtual_scheduling_vpn = 6 [json_name = "virtual-scheduling-vpn"];
               message UnicastReservedBandwidth {
                  uint32 cir = 1 [json_name = "cir"];
                  uint32 pir = 2 [json_name = "pir"];
                  bool coexist_with_copy_by_session = 3 [json_name = "coexist-with-copy-by-session"];
               }
               UnicastReservedBandwidth unicast_reserved_bandwidth = 7 [json_name = "unicast-reserved-bandwidth"];
               message BandwidthLimitPolicy {
                  string name = 1 [json_name = "name"];
                  uint32 total = 2 [json_name = "total"];
                  uint32 level1 = 3 [json_name = "level1"];
               }
               BandwidthLimitPolicy bandwidth_limit_policy = 8 [json_name = "bandwidth-limit-policy"];
            }
            Multicast multicast = 12 [json_name = "multicast"];
            message BrasPppox {
               message AddressReleaseSeparate {
                  bool enable = 1 [json_name = "enable"];
               }
               AddressReleaseSeparate address_release_separate = 1 [json_name = "address-release-separate"];
               message ForceAuthenType {
                  enum ForceAuthenticationType {
                     ForceAuthenticationType_CHAP = 0;
                     ForceAuthenticationType_PAP = 1;
                     ForceAuthenticationType_MSCHAPX_V1 = 2;
                     ForceAuthenticationType_MSCHAPX_V2 = 3;
                     ForceAuthenticationType_NONE = 4;
                  };
                  ForceAuthenticationType force_authentication_type = 1 [json_name = "force-authentication-type"];
               }
               ForceAuthenType force_authen_type = 2 [json_name = "force-authen-type"];
               message ForceAssignInterfaceId {
                  bool assign_interface_id = 1 [json_name = "assign-interface-id"];
               }
               ForceAssignInterfaceId force_assign_interface_id = 3 [json_name = "force-assign-interface-id"];
               message Dhcpv6WaitDelay {
                  message WaitTimeSetType_Limited {
                     uint32 wait_dhcpv6_time = 1 [json_name = "wait-dhcpv6-time"];
                  }
                  message WaitTimeSetType_Infinity {
                     bool infinity8 = 1 [json_name = "infinity"];
                  }
                  oneof WaitTimeSetType {
                     WaitTimeSetType_Limited wait_time_set_type_limited = 1 [json_name = "limited"];
                     WaitTimeSetType_Infinity wait_time_set_type_infinity = 2 [json_name = "infinity"];
                  }
               }
               Dhcpv6WaitDelay dhcpv6_wait_delay = 4 [json_name = "dhcpv6-wait-delay"];
            }
            BrasPppox bras_pppox = 13 [json_name = "bras-pppox"];
            message BrasQos {
               message TimeRangeQosEnable {
                  bool enable = 1 [json_name = "enable"];
               }
               TimeRangeQosEnable time_range_qos_enable = 1 [json_name = "time-range-qos-enable"];
               message TimeRangeQosProfiles {
                  message TimeRangeQosProfile {
                     string range_name = 1 [json_name = "range-name"];
                     string qos_profile_name = 2 [json_name = "qos-profile-name"];
                  }
                  repeated TimeRangeQosProfile time_range_qos_profile = 1 [json_name = "time-range-qos-profile"];
               }
               TimeRangeQosProfiles time_range_qos_profiles = 2 [json_name = "time-range-qos-profiles"];
               message Trusts {
                  message Trust {
                     enum UpStreamFlag {
                        INVALID_ENUM_VALUE_UpStreamFlag = 0;
                        UpStreamFlag_UPX_STREAM = 1;
                     };
                     UpStreamFlag up_stream_flag = 1 [json_name = "up-stream-flag"];
                     string diffserv_domain_name = 2 [json_name = "diffserv-domain-name"];
                  }
                  repeated Trust trust = 1 [json_name = "trust"];
               }
               Trusts trusts = 3 [json_name = "trusts"];
               message PerHopBehaviors {
                  message PerHopBehavior {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_INNERX_8021P = 1;
                        Type_OUTERX_8021P = 2;
                        Type_DSCP = 3;
                        Type_MPLSX_EXP = 4;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  repeated PerHopBehavior per_hop_behavior = 1 [json_name = "per-hop-behavior"];
               }
               PerHopBehaviors per_hop_behaviors = 4 [json_name = "per-hop-behaviors"];
               message UserPrioritys {
                  message UserPriority {
                     enum Direction {
                        INVALID_ENUM_VALUE_Direction = 0;
                        Direction_UPX_STREAM = 1;
                        Direction_DOWNX_STREAM = 2;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     message Type_Trust {
                        enum TrustType {
                           INVALID_ENUM_VALUE_TrustType = 0;
                           TrustType_TRUSTX_DSCPX_OUTER = 8;
                           TrustType_TRUSTX_8021PX_INNER = 9;
                           TrustType_TRUSTX_8021PX_OUTER = 10;
                           TrustType_TRUSTX_EXPX_INNER = 11;
                           TrustType_TRUSTX_EXPX_OUTER = 12;
                           TrustType_TRUSTX_DSCPX_INNER = 13;
                           TrustType_UNCHANGEABLE = 15;
                        };
                        TrustType trust_type = 1 [json_name = "trust-type"];
                     }
                     message Type_Priority {
                        uint32 priority_value = 1 [json_name = "priority-value"];
                     }
                     oneof Type {
                        Type_Trust type_trust = 2 [json_name = "trust"];
                        Type_Priority type_priority = 3 [json_name = "priority"];
                     }
                  }
                  repeated UserPriority user_priority = 1 [json_name = "user-priority"];
               }
               UserPrioritys user_prioritys = 5 [json_name = "user-prioritys"];
               message ProfileApplys {
                  message ProfileApply {
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string profile_name = 2 [json_name = "profile-name"];
                  }
                  repeated ProfileApply profile_apply = 1 [json_name = "profile-apply"];
               }
               ProfileApplys profile_applys = 6 [json_name = "profile-applys"];
               message RedirectDiffservDomain {
                  string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
               }
               RedirectDiffservDomain redirect_diffserv_domain = 7 [json_name = "redirect-diffserv-domain"];
               message SessionGroupExcludes {
                  message SessionGroupExclude {
                     enum Type {
                        Type_ALL = 0;
                        Type_USERX_QUEUE = 1;
                        Type_CAR = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     Direction direction = 2 [json_name = "direction"];
                  }
                  repeated SessionGroupExclude session_group_exclude = 1 [json_name = "session-group-exclude"];
               }
               SessionGroupExcludes session_group_excludes = 8 [json_name = "session-group-excludes"];
               message L2UserPriority {
                  enum TrustType {
                     INVALID_ENUM_VALUE_TrustType = 0;
                     TrustType_TRUSTX_DSCPX_OUTER = 8;
                     TrustType_TRUSTX_8021PX_INNER = 9;
                     TrustType_TRUSTX_8021PX_OUTER = 10;
                  };
                  TrustType trust_type = 1 [json_name = "trust-type"];
               }
               L2UserPriority l2_user_priority = 9 [json_name = "l2-user-priority"];
               message RateLimits {
                  message RateLimit {
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     enum Mode {
                        Mode_CAR = 0;
                        Mode_USERX_QUEUE = 1;
                     };
                     Mode mode = 2 [json_name = "mode"];
                  }
                  repeated RateLimit rate_limit = 1 [json_name = "rate-limit"];
               }
               RateLimits rate_limits = 10 [json_name = "rate-limits"];
               message DscpUserPriority {
                  uint32 value = 1 [json_name = "value"];
               }
               DscpUserPriority dscp_user_priority = 11 [json_name = "dscp-user-priority"];
               message LinkAdjustment {
                  enum Enable {
                     INVALID_ENUM_VALUE_Enable = 0;
                     Enable_ENABLE = 1;
                  };
                  Enable enable = 1 [json_name = "enable"];
                  int32 adjust_value = 2 [json_name = "adjust-value"];
                  enum ShapingMode {
                     INVALID_ENUM_VALUE_ShapingMode = 0;
                     ShapingMode_CELL = 1;
                  };
                  ShapingMode shaping_mode = 3 [json_name = "shaping-mode"];
               }
               LinkAdjustment link_adjustment = 12 [json_name = "link-adjustment"];
               message UserQueueGranularitys {
                  message UserQueueGranularity {
                     enum GranularityValue {
                        INVALID_ENUM_VALUE_GranularityValue = 0;
                        GranularityValue_X_1 = 1;
                        GranularityValue_X_16 = 16;
                        GranularityValue_X_32 = 32;
                        GranularityValue_X_64 = 64;
                        GranularityValue_X_128 = 128;
                        GranularityValue_X_256 = 256;
                        GranularityValue_X_512 = 512;
                        GranularityValue_X_1024 = 1024;
                     };
                     GranularityValue granularity_value = 1 [json_name = "granularity-value"];
                  }
                  UserQueueGranularity user_queue_granularity = 1 [json_name = "user-queue-granularity"];
               }
               UserQueueGranularitys user_queue_granularitys = 13 [json_name = "user-queue-granularitys"];
            }
            BrasQos bras_qos = 14 [json_name = "bras-qos"];
            message BrasUserManage {
               message FlowStatistic {
                  bool user_up_flow_statistics = 1 [json_name = "user-up-flow-statistics"];
                  bool user_down_flow_statistics = 2 [json_name = "user-down-flow-statistics"];
               }
               FlowStatistic flow_statistic = 1 [json_name = "flow-statistic"];
               message FlowBill {
                  bool enable = 1 [json_name = "enable"];
               }
               FlowBill flow_bill = 2 [json_name = "flow-bill"];
               message AccessTriggerLoose {
                  bool infinite_lease = 1 [json_name = "infinite-lease"];
                  uint32 loose_time = 2 [json_name = "loose-time"];
                  bool all_time = 3 [json_name = "all-time"];
               }
               AccessTriggerLoose access_trigger_loose = 3 [json_name = "access-trigger-loose"];
               message CpeIp {
                  string ip_address = 1 [json_name = "ip-address"];
               }
               CpeIp cpe_ip = 4 [json_name = "cpe-ip"];
               message TrunkDownstreamLoadBalance {
                  bool enable = 1 [json_name = "enable"];
               }
               TrunkDownstreamLoadBalance trunk_downstream_load_balance = 5 [json_name = "trunk-downstream-load-balance"];
               message AccountingCopyGroup {
                  string name = 1 [json_name = "name"];
               }
               AccountingCopyGroup accounting_copy_group = 6 [json_name = "accounting-copy-group"];
               message AuthenFailDomain {
                  string name = 1 [json_name = "name"];
               }
               AuthenFailDomain authen_fail_domain = 7 [json_name = "authen-fail-domain"];
            }
            BrasUserManage bras_user_manage = 15 [json_name = "bras-user-manage"];
            message Vpn {
               message VpnInstance {
                  string name = 1 [json_name = "name"];
               }
               VpnInstance vpn_instance = 1 [json_name = "vpn-instance"];
               message BoundVrf {
                  string name = 1 [json_name = "name"];
               }
               BoundVrf bound_vrf = 2 [json_name = "bound-vrf"];
               message TrustEnable {
                  bool trust_access_interface_enable = 1 [json_name = "trust-access-interface-enable"];
                  bool trust_frame_pool_enable = 2 [json_name = "trust-frame-pool-enable"];
                  bool trust_frame_ipv6_pool_enable = 3 [json_name = "trust-frame-ipv6-pool-enable"];
               }
               TrustEnable trust_enable = 3 [json_name = "trust-enable"];
            }
            Vpn vpn = 16 [json_name = "vpn"];
            message BindDiameterServerGroup {
               string name = 1 [json_name = "name"];
            }
            BindDiameterServerGroup bind_diameter_server_group = 17 [json_name = "bind-diameter-server-group"];
            message BindDot1XTemplate {
               uint32 index = 1 [json_name = "index"];
            }
            BindDot1XTemplate bind_dot1x_template = 18 [json_name = "bind-dot1x-template"];
         }
         Bas bas = 21 [json_name = "bas"];
         message BrasRui {
            bool peer_backup_enable = 1 [json_name = "peer-backup-enable"];
         }
         BrasRui bras_rui = 22 [json_name = "bras-rui"];
         repeated string time_range = 23 [json_name = "time-range"];
         bool statistics_enable = 24 [json_name = "statistics-enable"];
         bool band_width = 25 [json_name = "band-width"];
         message ForcePushFunction {
            message UrlSource_Template {
               string url_template = 1 [json_name = "url-template"];
            }
            message UrlSource_Url {
               string url_address = 1 [json_name = "url-address"];
            }
            oneof UrlSource {
               UrlSource_Template url_source_template = 1 [json_name = "template"];
               UrlSource_Url url_source_url = 2 [json_name = "url"];
            }
         }
         ForcePushFunction force_push_function = 26 [json_name = "force-push-function"];
         message ServiceScheme {
            string name = 1 [json_name = "name"];
         }
         ServiceScheme service_scheme = 27 [json_name = "service-scheme"];
         message Daas {
            message Daa {
               uint32 traffic_level = 1 [json_name = "traffic-level"];
               bool accounting_on = 2 [json_name = "accounting-on"];
               string qos_profile = 3 [json_name = "qos-profile"];
            }
            repeated Daa daa = 1 [json_name = "daa"];
         }
         Daas daas = 28 [json_name = "daas"];
         message Ad {
            string ad_server = 1 [json_name = "ad-server"];
         }
         Ad ad = 29 [json_name = "ad"];
         message Haca {
            string haca_server = 1 [json_name = "haca-server"];
         }
         Haca haca = 30 [json_name = "haca"];
         message Ldap {
            string ldap_server = 1 [json_name = "ldap-server"];
         }
         Ldap ldap = 31 [json_name = "ldap"];
      }
      repeated Domain domain = 1 [json_name = "domain"];
   }
   Domains domains = 7 [json_name = "domains"];
   message LoginAlarmThreshold {
      uint32 report_times = 1 [json_name = "report-times"];
      uint32 resume_times = 2 [json_name = "resume-times"];
      uint32 period = 3 [json_name = "period"];
   }
   LoginAlarmThreshold login_alarm_threshold = 8 [json_name = "login-alarm-threshold"];
   message AliveUserQrys {
      message AliveUserQry {
         uint32 user_id = 1 [json_name = "user-id"];
         string user_name = 2 [json_name = "user-name"];
         uint32 level = 3 [json_name = "level"];
         string user_group_name = 4 [json_name = "user-group-name"];
         string name = 5 [json_name = "name"];
         enum AccessType {
            AccessType_INVALID = 0;
            AccessType_TERMINAL = 1;
            AccessType_TELNET = 2;
            AccessType_FTP = 3;
            AccessType_PPP = 4;
            AccessType_SSH = 5;
            AccessType_QX = 6;
            AccessType_SNMP = 7;
            AccessType_HTTP = 8;
            AccessType_MML = 9;
            AccessType_DOT1X = 10;
            AccessType_BIND = 11;
            AccessType_WEB = 12;
            AccessType_X25PAD = 13;
            AccessType_L2TP = 14;
            AccessType_API = 15;
            AccessType_NONE = 16;
            AccessType_PPPOVPN = 17;
            AccessType_PPPOEOA = 18;
            AccessType_PPPOA = 19;
            AccessType_PPPOE = 20;
            AccessType_PPPOEVPDN = 21;
            AccessType_PPPOLNS = 22;
            AccessType_MAC = 23;
            AccessType_WLAN = 24;
            AccessType_VM = 25;
            AccessType_SSLVPN = 26;
            AccessType_IKE = 27;
            AccessType_STATIC = 28;
            AccessType_IPOE = 29;
         };
         AccessType access_type = 6 [json_name = "access-type"];
         enum AuthenType {
            INVALID_ENUM_VALUE_AuthenType = 0;
            AuthenType_ADMIN = 1;
         };
         AuthenType authen_type = 7 [json_name = "authen-type"];
         enum AuthenMethod {
            AuthenMethod_INVALID = 0;
            AuthenMethod_LOCAL = 1;
            AuthenMethod_HWTACACS = 2;
            AuthenMethod_RADIUS = 3;
            AuthenMethod_NONE = 4;
            AuthenMethod_RADIUSX_PROXY = 5;
            AuthenMethod_HACA = 6;
            AuthenMethod_LDAP = 7;
            AuthenMethod_AD = 8;
            AuthenMethod_SUPER = 9;
         };
         AuthenMethod authen_method = 8 [json_name = "authen-method"];
         enum AuthenState {
            AuthenState_IDLE = 0;
            AuthenState_AUTHENTICATING = 1;
            AuthenState_SUCCESS = 2;
            AuthenState_FAILED = 3;
         };
         AuthenState authen_state = 9 [json_name = "authen-state"];
         enum AuthorMethod {
            AuthorMethod_INVALID = 0;
            AuthorMethod_LOCAL = 1;
            AuthorMethod_HWTACACS = 2;
            AuthorMethod_IFX_AUTHENTICATED = 3;
            AuthorMethod_NONE = 4;
         };
         AuthorMethod author_method = 10 [json_name = "author-method"];
         enum AuthorState {
            AuthorState_IDLE = 0;
            AuthorState_AUTHORING = 1;
            AuthorState_SUCCESS = 2;
            AuthorState_FAILED = 3;
         };
         AuthorState author_state = 11 [json_name = "author-state"];
         enum AcctMethod {
            AcctMethod_INVALID = 0;
            AcctMethod_RADIUS = 1;
            AcctMethod_HWTACACS = 2;
            AcctMethod_NONE = 3;
            AcctMethod_HACA = 4;
         };
         AcctMethod acct_method = 12 [json_name = "acct-method"];
         enum AcctState {
            AcctState_STARTIDLE = 0;
            AcctState_STARTWAIT = 1;
            AcctState_ACCOUNTING = 2;
            AcctState_STARTFAILED = 3;
            AcctState_STOPIDLE = 4;
            AcctState_STOPWAIT = 5;
            AcctState_FINISHED = 6;
            AcctState_FAILED = 7;
         };
         AcctState acct_state = 13 [json_name = "acct-state"];
         string access_interface = 14 [json_name = "access-interface"];
         string user_vlan = 15 [json_name = "user-vlan"];
         string mac = 16 [json_name = "mac"];
         string ip = 17 [json_name = "ip"];
         string access_time = 18 [json_name = "access-time"];
         string accounting_session_id = 19 [json_name = "accounting-session-id"];
         enum TerminalType {
            TerminalType_DATA = 0;
            TerminalType_VOICE = 1;
         };
         TerminalType terminal_type = 20 [json_name = "terminal-type"];
         uint64 in_octets = 21 [json_name = "in-octets"];
         uint64 in_packets = 22 [json_name = "in-packets"];
         uint64 out_octets = 23 [json_name = "out-octets"];
         uint64 out_packets = 24 [json_name = "out-packets"];
      }
      repeated AliveUserQry alive_user_qry = 1 [json_name = "alive-user-qry"];
   }
   AliveUserQrys alive_user_qrys = 9 [json_name = "alive-user-qrys"];
   message GlobalPolicy {
      enum DomainLocation {
         DomainLocation_AFTERX_DELIMITER = 0;
         DomainLocation_BEFOREX_DELIMITER = 1;
      };
      DomainLocation domain_location = 1 [json_name = "domain-location"];
      enum DomainParseDirection {
         DomainParseDirection_LEFTX_TOX_RIGHT = 0;
         DomainParseDirection_RIGHTX_TOX_LEFT = 1;
      };
      DomainParseDirection domain_parse_direction = 2 [json_name = "domain-parse-direction"];
      string default_admin_domain = 3 [json_name = "default-admin-domain"];
      string default_access_domain = 4 [json_name = "default-access-domain"];
      enum ParsePriority {
         INVALID_ENUM_VALUE_ParsePriority = 0;
         ParsePriority_DOMAINX_FIRST = 1;
         ParsePriority_REALMX_FIRST = 2;
      };
      ParsePriority parse_priority = 5 [json_name = "parse-priority"];
      enum RealmLocation {
         RealmLocation_AFTERX_DELIMITER = 0;
         RealmLocation_BEFOREX_DELIMITER = 1;
      };
      RealmLocation realm_location = 6 [json_name = "realm-location"];
      string real_name_delimiter = 7 [json_name = "real-name-delimiter"];
      enum RealNameParseDirection {
         RealNameParseDirection_LEFTX_TOX_RIGHT = 0;
         RealNameParseDirection_RIGHTX_TOX_LEFT = 1;
      };
      RealNameParseDirection real_name_parse_direction = 8 [json_name = "real-name-parse-direction"];
      string roam_character = 9 [json_name = "roam-character"];
      string domain_delimiter = 10 [json_name = "domain-delimiter"];
      bool security_name_delimiter_enable = 11 [json_name = "security-name-delimiter-enable"];
      string security_name_delimiter = 12 [json_name = "security-name-delimiter"];
   }
   GlobalPolicy global_policy = 10 [json_name = "global-policy"];
   message Recording {
      message Schemes {
         message Scheme {
            string name = 1 [json_name = "name"];
            string tacacs_group = 2 [json_name = "tacacs-group"];
         }
         repeated Scheme scheme = 1 [json_name = "scheme"];
      }
      Schemes schemes = 1 [json_name = "schemes"];
      message Function {
         string cmd_record_scheme = 1 [json_name = "cmd-record-scheme"];
         string system_record_scheme = 2 [json_name = "system-record-scheme"];
         string outbound_record_scheme = 3 [json_name = "outbound-record-scheme"];
      }
      Function function = 2 [json_name = "function"];
   }
   Recording recording = 11 [json_name = "recording"];
   message OnlineOfflineRecSwitch {
      enum LoginFailRecSwitch {
         LoginFailRecSwitch_DISABLE = 0;
         LoginFailRecSwitch_ENABLE = 1;
      };
      LoginFailRecSwitch login_fail_rec_switch = 1 [json_name = "login-fail-rec-switch"];
      enum LogoutRecSwitch {
         LogoutRecSwitch_DISABLE = 0;
         LogoutRecSwitch_ENABLE = 1;
      };
      LogoutRecSwitch logout_rec_switch = 2 [json_name = "logout-rec-switch"];
      enum AbnormalLogoutRecSwitch {
         AbnormalLogoutRecSwitch_DISABLE = 0;
         AbnormalLogoutRecSwitch_ENABLE = 1;
      };
      AbnormalLogoutRecSwitch abnormal_logout_rec_switch = 3 [json_name = "abnormal-logout-rec-switch"];
      enum NormalLogoutRecSwitch {
         NormalLogoutRecSwitch_DISABLE = 0;
         NormalLogoutRecSwitch_ENABLE = 1;
      };
      NormalLogoutRecSwitch normal_logout_rec_switch = 4 [json_name = "normal-logout-rec-switch"];
   }
   OnlineOfflineRecSwitch online_offline_rec_switch = 12 [json_name = "online-offline-rec-switch"];
   message AbnormalOfflineHidens {
      message AbnormalOfflineHiden {
         uint32 hidden_id = 1 [json_name = "hidden-id"];
      }
      repeated AbnormalOfflineHiden abnormal_offline_hiden = 1 [json_name = "abnormal-offline-hiden"];
   }
   AbnormalOfflineHidens abnormal_offline_hidens = 13 [json_name = "abnormal-offline-hidens"];
   message Lam {
      message LoginFailedLimit {
         uint32 failed_times = 1 [json_name = "failed-times"];
         uint32 period = 2 [json_name = "period"];
         uint32 reactive_time = 3 [json_name = "reactive-time"];
         bool enable = 4 [json_name = "enable"];
      }
      LoginFailedLimit login_failed_limit = 1 [json_name = "login-failed-limit"];
      message UserSecurityPolicy {
         bool security_policy = 1 [json_name = "security-policy"];
         uint32 user_aging_period = 2 [json_name = "user-aging-period"];
         uint32 user_name_min_len = 3 [json_name = "user-name-min-len"];
      }
      UserSecurityPolicy user_security_policy = 2 [json_name = "user-security-policy"];
      message PasswordPolicy {
         uint32 expire_days = 1 [json_name = "expire-days"];
         uint32 prompt_days = 2 [json_name = "prompt-days"];
         bool change_check = 3 [json_name = "change-check"];
         bool complexity_check = 4 [json_name = "complexity-check"];
         uint32 pwd_min_length = 5 [json_name = "pwd-min-length"];
         uint32 expired_pwd_reuse_num = 6 [json_name = "expired-pwd-reuse-num"];
         uint32 history_pwd_num = 7 [json_name = "history-pwd-num"];
         uint32 pwd_expire_days = 8 [json_name = "pwd-expire-days"];
         bool enable = 9 [json_name = "enable"];
         uint32 history_record_number = 10 [json_name = "history-record-number"];
         bool complexity_check_three = 11 [json_name = "complexity-check-three"];
         bool pwd_force_change = 12 [json_name = "pwd-force-change"];
      }
      PasswordPolicy password_policy = 3 [json_name = "password-policy"];
      message ForbiddenWordRules {
         message ForbiddenWordRule {
            string forbidden_word = 1 [json_name = "forbidden-word"];
         }
         repeated ForbiddenWordRule forbidden_word_rule = 1 [json_name = "forbidden-word-rule"];
      }
      ForbiddenWordRules forbidden_word_rules = 4 [json_name = "forbidden-word-rules"];
      message Users {
         message User {
            string name = 1 [json_name = "name"];
            string end_life_date = 2 [json_name = "end-life-date"];
            bool is_login_anytime = 3 [json_name = "is-login-anytime"];
            enum BeginLoginDay {
               BeginLoginDay_SUN = 0;
               BeginLoginDay_MON = 1;
               BeginLoginDay_TUE = 2;
               BeginLoginDay_WED = 3;
               BeginLoginDay_THU = 4;
               BeginLoginDay_FRI = 5;
               BeginLoginDay_SAT = 6;
            };
            BeginLoginDay begin_login_day = 4 [json_name = "begin-login-day"];
            enum EndLoginDay {
               EndLoginDay_SUN = 0;
               EndLoginDay_MON = 1;
               EndLoginDay_TUE = 2;
               EndLoginDay_WED = 3;
               EndLoginDay_THU = 4;
               EndLoginDay_FRI = 5;
               EndLoginDay_SAT = 6;
            };
            EndLoginDay end_login_day = 5 [json_name = "end-login-day"];
            string begin_login_time = 6 [json_name = "begin-login-time"];
            string end_login_time = 7 [json_name = "end-login-time"];
            uint32 aging_in_days = 8 [json_name = "aging-in-days"];
            uint32 password_expire_in_days = 9 [json_name = "password-expire-in-days"];
            string group_name = 10 [json_name = "group-name"];
            enum State {
               State_BLOCK = 0;
               State_ACTIVE = 1;
            };
            State state = 11 [json_name = "state"];
            uint32 failed_times = 12 [json_name = "failed-times"];
            uint32 interval = 13 [json_name = "interval"];
            enum PasswordType {
               INVALID_ENUM_VALUE_PasswordType = 0;
               PasswordType_CIPHER = 1;
               PasswordType_IRREVERSIBLEX_CIPHER = 2;
            };
            PasswordType password_type = 14 [json_name = "password-type"];
            string password = 15 [json_name = "password"];
            uint32 level = 16 [json_name = "level"];
            string ftp_dir = 17 [json_name = "ftp-dir"];
            bool service_terminal = 18 [json_name = "service-terminal"];
            bool service_telnet = 19 [json_name = "service-telnet"];
            bool service_ftp = 20 [json_name = "service-ftp"];
            bool service_ppp = 21 [json_name = "service-ppp"];
            bool service_ssh = 22 [json_name = "service-ssh"];
            bool service_qx = 23 [json_name = "service-qx"];
            bool service_snmp = 24 [json_name = "service-snmp"];
            bool service_mml = 25 [json_name = "service-mml"];
            bool service_http = 26 [json_name = "service-http"];
            uint32 max_access_num = 27 [json_name = "max-access-num"];
            bool idle_cut_enable = 28 [json_name = "idle-cut-enable"];
            string begin_life_date = 29 [json_name = "begin-life-date"];
            string last_login_time = 30 [json_name = "last-login-time"];
            enum IsAged {
               IsAged_NOCONFIG = 0;
               IsAged_NO = 1;
               IsAged_YES = 2;
            };
            IsAged is_aged = 31 [json_name = "is-aged"];
            enum IsLocked {
               IsLocked_NOCONFIG = 0;
               IsLocked_NO = 1;
               IsLocked_YES = 2;
            };
            IsLocked is_locked = 32 [json_name = "is-locked"];
            uint32 left_lock_time = 33 [json_name = "left-lock-time"];
            enum IsTerminalLocked {
               IsTerminalLocked_NOCONFIG = 0;
               IsTerminalLocked_NO = 1;
               IsTerminalLocked_YES = 2;
            };
            IsTerminalLocked is_terminal_locked = 34 [json_name = "is-terminal-locked"];
            uint32 terminal_left_lock_time = 35 [json_name = "terminal-left-lock-time"];
            string pass_modify_time = 36 [json_name = "pass-modify-time"];
            enum IsPassExpired {
               IsPassExpired_NOCONFIG = 0;
               IsPassExpired_UNEXPIRED = 1;
               IsPassExpired_EXPIRED = 2;
            };
            IsPassExpired is_pass_expired = 37 [json_name = "is-pass-expired"];
            bool is_pass_changed = 38 [json_name = "is-pass-changed"];
            int32 alive_num = 39 [json_name = "alive-num"];
            string time_range = 40 [json_name = "time-range"];
            string http_dir = 41 [json_name = "http-dir"];
            bool service_none = 42 [json_name = "service-none"];
            bool service_mdcli = 43 [json_name = "service-mdcli"];
            bool service_bind = 44 [json_name = "service-bind"];
            bool service_sslvpn = 45 [json_name = "service-sslvpn"];
            bool service_web = 46 [json_name = "service-web"];
            bool service_x25_pad = 47 [json_name = "service-x25-pad"];
            bool service_api = 48 [json_name = "service-api"];
            int32 idle_time = 49 [json_name = "idle-time"];
            bool user_type = 50 [json_name = "user-type"];
            string acl = 51 [json_name = "acl"];
            bool password_force_change = 52 [json_name = "password-force-change"];
            repeated string device_type = 53 [json_name = "device-type"];
         }
         repeated User user = 1 [json_name = "user"];
      }
      Users users = 5 [json_name = "users"];
      message UserPasswordPolicy {
         bool enable = 1 [json_name = "enable"];
         uint32 history_record_number = 2 [json_name = "history-record-number"];
         uint32 expire_days = 3 [json_name = "expire-days"];
      }
      UserPasswordPolicy user_password_policy = 6 [json_name = "user-password-policy"];
      message AccessUsers {
         message AccessUser {
            string name = 1 [json_name = "name"];
            enum State {
               State_BLOCK = 0;
               State_ACTIVE = 1;
            };
            State state = 2 [json_name = "state"];
            bool service_none = 3 [json_name = "service-none"];
            bool service_portal = 4 [json_name = "service-portal"];
            bool service_dot1x = 5 [json_name = "service-dot1x"];
            uint32 access_limit = 6 [json_name = "access-limit"];
            string end_life_date = 7 [json_name = "end-life-date"];
            string time_range = 8 [json_name = "time-range"];
            enum PasswordType {
               INVALID_ENUM_VALUE_PasswordType = 0;
               PasswordType_CIPHER = 1;
               PasswordType_IRREVERSIBLEX_CIPHER = 2;
            };
            PasswordType password_type = 9 [json_name = "password-type"];
            string password = 10 [json_name = "password"];
            repeated string ucl_group = 11 [json_name = "ucl-group"];
            bool service_sslvpn = 12 [json_name = "service-sslvpn"];
            message ServiceScheme {
               string name = 1 [json_name = "name"];
            }
            ServiceScheme service_scheme = 13 [json_name = "service-scheme"];
         }
         repeated AccessUser access_user = 1 [json_name = "access-user"];
      }
      AccessUsers access_users = 7 [json_name = "access-users"];
   }
   Lam lam = 14 [json_name = "lam"];
   message LocalServer {
      message LoginFailedLimit {
         uint32 failed_times = 1 [json_name = "failed-times"];
         uint32 period = 2 [json_name = "period"];
         uint32 reactive_time = 3 [json_name = "reactive-time"];
      }
      LoginFailedLimit login_failed_limit = 1 [json_name = "login-failed-limit"];
      message UserSecurityPolicy {
         uint32 user_aging_period = 1 [json_name = "user-aging-period"];
         uint32 user_name_min_len = 2 [json_name = "user-name-min-len"];
      }
      UserSecurityPolicy user_security_policy = 2 [json_name = "user-security-policy"];
      message PasswordPolicy {
         uint32 expire_days = 1 [json_name = "expire-days"];
         uint32 prompt_days = 2 [json_name = "prompt-days"];
         bool change_check = 3 [json_name = "change-check"];
         bool complexity_check = 4 [json_name = "complexity-check"];
         uint32 pwd_min_length = 5 [json_name = "pwd-min-length"];
      }
      PasswordPolicy password_policy = 3 [json_name = "password-policy"];
   }
   LocalServer local_server = 15 [json_name = "local-server"];
   message ManagementUserQrys {
      message ManagementUserQry {
         string name = 1 [json_name = "name"];
         message UserInfos {
            message UserInfo {
               uint32 user_id = 1 [json_name = "user-id"];
               enum AccessType {
                  AccessType_INVALID = 0;
                  AccessType_TERMINAL = 1;
                  AccessType_TELNET = 2;
                  AccessType_FTP = 3;
                  AccessType_PPP = 4;
                  AccessType_SSH = 5;
                  AccessType_QX = 6;
                  AccessType_SNMP = 7;
                  AccessType_HTTP = 8;
                  AccessType_MML = 9;
                  AccessType_DOT1X = 10;
                  AccessType_BIND = 11;
                  AccessType_WEB = 12;
                  AccessType_X25PAD = 13;
                  AccessType_L2TP = 14;
                  AccessType_API = 15;
                  AccessType_NONE = 16;
                  AccessType_PPPOVPN = 17;
                  AccessType_PPPOEOA = 18;
                  AccessType_PPPOA = 19;
                  AccessType_PPPOE = 20;
                  AccessType_PPPOEVPDN = 21;
                  AccessType_PPPOLNS = 22;
                  AccessType_MAC = 23;
                  AccessType_WLAN = 24;
                  AccessType_VM = 25;
                  AccessType_SSLVPN = 26;
                  AccessType_IKE = 27;
                  AccessType_STATIC = 28;
                  AccessType_IPOE = 29;
               };
               AccessType access_type = 2 [json_name = "access-type"];
               string ip = 3 [json_name = "ip"];
            }
            repeated UserInfo user_info = 1 [json_name = "user-info"];
         }
         UserInfos user_infos = 2 [json_name = "user-infos"];
         message LastLoginInfos {
            message LastLoginInfo {
               string last_login_ip = 1 [json_name = "last-login-ip"];
               bool last_login_success = 2 [json_name = "last-login-success"];
               string last_login_time = 3 [json_name = "last-login-time"];
            }
            repeated LastLoginInfo last_login_info = 1 [json_name = "last-login-info"];
         }
         LastLoginInfos last_login_infos = 3 [json_name = "last-login-infos"];
      }
      repeated ManagementUserQry management_user_qry = 1 [json_name = "management-user-qry"];
   }
   ManagementUserQrys management_user_qrys = 16 [json_name = "management-user-qrys"];
   message InvalidSessionTimeout {
      bool enable = 1 [json_name = "enable"];
   }
   InvalidSessionTimeout invalid_session_timeout = 17 [json_name = "invalid-session-timeout"];
   message AuthorizationModify {
      enum Mode {
         Mode_MODIFY = 0;
         Mode_OVERLAY = 1;
      };
      Mode mode = 1 [json_name = "mode"];
   }
   AuthorizationModify authorization_modify = 18 [json_name = "authorization-modify"];
   message RemoteUserPolicy {
      bool enable = 1 [json_name = "enable"];
      int32 retry_interval = 2 [json_name = "retry-interval"];
      int32 retry_times = 3 [json_name = "retry-times"];
      int32 block_time = 4 [json_name = "block-time"];
   }
   RemoteUserPolicy remote_user_policy = 19 [json_name = "remote-user-policy"];
   message Ipv6Statistics {
      bool enable = 1 [json_name = "enable"];
   }
   Ipv6Statistics ipv6_statistics = 20 [json_name = "ipv6-statistics"];
   message UserQueue {
      bool enable = 1 [json_name = "enable"];
   }
   UserQueue user_queue = 21 [json_name = "user-queue"];
   message Bypass {
      message Authentication {
         bool bypass_enable = 1 [json_name = "bypass-enable"];
         uint32 bypass_time = 2 [json_name = "bypass-time"];
      }
      Authentication authentication = 1 [json_name = "authentication"];
      message Authorization {
         bool bypass_enable = 1 [json_name = "bypass-enable"];
         uint32 bypass_time = 2 [json_name = "bypass-time"];
      }
      Authorization authorization = 2 [json_name = "authorization"];
      message AuthorizationCmd {
         bool bypass_enable = 1 [json_name = "bypass-enable"];
         uint32 bypass_time = 2 [json_name = "bypass-time"];
      }
      AuthorizationCmd authorization_cmd = 3 [json_name = "authorization-cmd"];
   }
   Bypass bypass = 22 [json_name = "bypass"];
   message AuthorizationInfoCheck {
      enum FailPolicy {
         FailPolicy_OFFLINE = 0;
         FailPolicy_ONLINE = 1;
      };
      FailPolicy fail_policy = 1 [json_name = "fail-policy"];
   }
   AuthorizationInfoCheck authorization_info_check = 23 [json_name = "authorization-info-check"];
   message GlobalDomain {
      string default_domain = 1 [json_name = "default-domain"];
      string default_admin_domain = 2 [json_name = "default-admin-domain"];
   }
   GlobalDomain global_domain = 24 [json_name = "global-domain"];
   message TrafficGroups {
      message TrafficGroup {
         string name = 1 [json_name = "name"];
         bool enable = 2 [json_name = "enable"];
         message AclTariffLevels {
            message AclTariffLevel {
               string acl_id = 1 [json_name = "acl-id"];
               uint32 traffic_level = 2 [json_name = "traffic-level"];
            }
            repeated AclTariffLevel acl_tariff_level = 1 [json_name = "acl-tariff-level"];
         }
         AclTariffLevels acl_tariff_levels = 3 [json_name = "acl-tariff-levels"];
         message AclTariffLevelIpv6S {
            message AclTariffLevelIpv6 {
               string acl_id = 1 [json_name = "acl-id"];
               uint32 traffic_level = 2 [json_name = "traffic-level"];
            }
            repeated AclTariffLevelIpv6 acl_tariff_level_ipv6 = 1 [json_name = "acl-tariff-level-ipv6"];
         }
         AclTariffLevelIpv6S acl_tariff_level_ipv6s = 4 [json_name = "acl-tariff-level-ipv6s"];
      }
      repeated TrafficGroup traffic_group = 1 [json_name = "traffic-group"];
   }
   TrafficGroups traffic_groups = 25 [json_name = "traffic-groups"];
   message AccessUserQrys {
      message AccessUserQry {
         uint32 user_id = 1 [json_name = "user-id"];
         string user_name = 2 [json_name = "user-name"];
         enum AccessType {
            AccessType_INVALID = 0;
            AccessType_TERMINAL = 1;
            AccessType_TELNET = 2;
            AccessType_FTP = 3;
            AccessType_PPP = 4;
            AccessType_SSH = 5;
            AccessType_QX = 6;
            AccessType_SNMP = 7;
            AccessType_HTTP = 8;
            AccessType_MML = 9;
            AccessType_DOT1X = 10;
            AccessType_BIND = 11;
            AccessType_WEB = 12;
            AccessType_X25PAD = 13;
            AccessType_L2TP = 14;
            AccessType_API = 15;
            AccessType_NONE = 16;
            AccessType_PPPOVPN = 17;
            AccessType_PPPOEOA = 18;
            AccessType_PPPOA = 19;
            AccessType_PPPOE = 20;
            AccessType_PPPOEVPDN = 21;
            AccessType_PPPOLNS = 22;
            AccessType_MAC = 23;
            AccessType_WLAN = 24;
            AccessType_VM = 25;
            AccessType_SSLVPN = 26;
            AccessType_IKE = 27;
            AccessType_STATIC = 28;
            AccessType_IPOE = 29;
         };
         AccessType access_type = 3 [json_name = "access-type"];
         enum AuthType {
            INVALID_ENUM_VALUE_AuthType = 0;
            AuthType_UNAUTHEN = 1;
            AuthType_MACX_AUTHEN = 2;
            AuthType_DOT1XX_AUTHEN = 3;
            AuthType_PORTALX_AUTHEN = 4;
            AuthType_IPSECX_AUTHEN = 5;
            AuthType_PPPX_AUTHEN = 6;
            AuthType_SSLVPNX_AUTHEN = 7;
            AuthType_PPPOEX_AUTHEN = 8;
         };
         AuthType auth_type = 4 [json_name = "auth-type"];
         string access_interface = 5 [json_name = "access-interface"];
         string user_vlan = 6 [json_name = "user-vlan"];
         string mac = 7 [json_name = "mac"];
         string ip = 8 [json_name = "ip"];
         string access_time = 9 [json_name = "access-time"];
         enum UserStatus {
            INVALID_ENUM_VALUE_UserStatus = 0;
            UserStatus_SUCCESS = 1;
            UserStatus_PREX_AUTHEN = 2;
            UserStatus_CLIENTX_NOX_RESP = 3;
            UserStatus_FAILX_AUTHORIZED = 4;
            UserStatus_WEBX_SERVERX_DOWN = 5;
            UserStatus_AAAX_SERVERX_DOWN = 6;
            UserStatus_OPEN = 7;
            UserStatus_RUNNING = 8;
         };
         UserStatus user_status = 10 [json_name = "user-status"];
         uint64 online_time_length = 11 [json_name = "online-time-length"];
      }
      repeated AccessUserQry access_user_qry = 1 [json_name = "access-user-qry"];
   }
   AccessUserQrys access_user_qrys = 26 [json_name = "access-user-qrys"];
   message AccessUserRecords {
      message AccessUserRecord {
         uint32 user_id = 1 [json_name = "user-id"];
         string user_name = 2 [json_name = "user-name"];
         string user_vlan = 3 [json_name = "user-vlan"];
         string mac = 4 [json_name = "mac"];
         string ip = 5 [json_name = "ip"];
         enum AccessType {
            AccessType_INVALID = 0;
            AccessType_TERMINAL = 1;
            AccessType_TELNET = 2;
            AccessType_FTP = 3;
            AccessType_PPP = 4;
            AccessType_SSH = 5;
            AccessType_QX = 6;
            AccessType_SNMP = 7;
            AccessType_HTTP = 8;
            AccessType_MML = 9;
            AccessType_DOT1X = 10;
            AccessType_BIND = 11;
            AccessType_WEB = 12;
            AccessType_X25PAD = 13;
            AccessType_L2TP = 14;
            AccessType_API = 15;
            AccessType_NONE = 16;
            AccessType_PPPOVPN = 17;
            AccessType_PPPOEOA = 18;
            AccessType_PPPOA = 19;
            AccessType_PPPOE = 20;
            AccessType_PPPOEVPDN = 21;
            AccessType_PPPOLNS = 22;
            AccessType_MAC = 23;
            AccessType_WLAN = 24;
            AccessType_VM = 25;
            AccessType_SSLVPN = 26;
            AccessType_IKE = 27;
            AccessType_STATIC = 28;
            AccessType_IPOE = 29;
         };
         AccessType access_type = 6 [json_name = "access-type"];
         enum TerminalOperation {
            TerminalOperation_ONLINEX_FAILED = 0;
            TerminalOperation_OFFLINEX_SUCCESS = 1;
            TerminalOperation_OFFLINEX_FAILED = 2;
            TerminalOperation_ONLINEX_SUCCESS = 3;
         };
         TerminalOperation terminal_operation = 7 [json_name = "terminal-operation"];
         string login_time = 8 [json_name = "login-time"];
         string offline_time = 9 [json_name = "offline-time"];
         string fail_reason = 10 [json_name = "fail-reason"];
      }
      repeated AccessUserRecord access_user_record = 1 [json_name = "access-user-record"];
   }
   AccessUserRecords access_user_records = 27 [json_name = "access-user-records"];
   message AliveUserStatistics {
      uint32 total_user_number = 1 [json_name = "total-user-number"];
   }
   AliveUserStatistics alive_user_statistics = 28 [json_name = "alive-user-statistics"];
}


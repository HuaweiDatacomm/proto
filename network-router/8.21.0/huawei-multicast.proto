syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-01 20:16:01
// ProtoYang-version 1
// module huawei-multicast
// revision 2021-07-31
// revision 2020-02-14
// revision 2020-02-11
// revision 2019-10-17
// revision 2019-03-30
// namespace urn:huawei:yang:huawei-multicast

package huawei_multicast;

message Multicast {
   message Global {
      message Ipv4 {
         bool vlanif_extranet_enable = 1 [json_name = "vlanif-extranet-enable"];
         bool qinq_extranet_enable = 2 [json_name = "qinq-extranet-enable"];
         bool bas_igmp_extranet_enable = 3 [json_name = "bas-igmp-extranet-enable"];
         bool vbdif_extranet_enable = 4 [json_name = "vbdif-extranet-enable"];
      }
      Ipv4 ipv4 = 1 [json_name = "ipv4"];
   }
   Global global = 1 [json_name = "global"];
   message InvalidPacketMaxCount {
      message Ipv4 {
         uint32 igmp_packets = 1 [json_name = "igmp-packets"];
         uint32 mvpn_packets = 2 [json_name = "mvpn-packets"];
         uint32 msdp_packets = 3 [json_name = "msdp-packets"];
         uint32 pim_packets = 4 [json_name = "pim-packets"];
         uint32 igmp_snooping_packets = 5 [json_name = "igmp-snooping-packets"];
      }
      Ipv4 ipv4 = 1 [json_name = "ipv4"];
      message Ipv6 {
         uint32 mld_packets = 1 [json_name = "mld-packets"];
         uint32 pim_packets = 2 [json_name = "pim-packets"];
         uint32 mld_snooping_packets = 3 [json_name = "mld-snooping-packets"];
      }
      Ipv6 ipv6 = 2 [json_name = "ipv6"];
   }
   InvalidPacketMaxCount invalid_packet_max_count = 2 [json_name = "invalid-packet-max-count"];
   message SsmMappingPolicys {
      message SsmMappingPolicy {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         string policy_name = 2 [json_name = "policy-name"];
         message Groups {
            message Group {
               string group_address = 1 [json_name = "group-address"];
               uint32 mask_length = 2 [json_name = "mask-length"];
               string source_address = 3 [json_name = "source-address"];
            }
            repeated Group group = 1 [json_name = "group"];
         }
         Groups groups = 3 [json_name = "groups"];
      }
      repeated SsmMappingPolicy ssm_mapping_policy = 1 [json_name = "ssm-mapping-policy"];
   }
   SsmMappingPolicys ssm_mapping_policys = 3 [json_name = "ssm-mapping-policys"];
   message IgmpSnooping {
      message GlobalEnable {
         bool send_query = 1 [json_name = "send-query"];
         string send_query_source_address = 2 [json_name = "send-query-source-address"];
      }
      GlobalEnable global_enable = 1 [json_name = "global-enable"];
      message GlobalChannel {
         bool unspecified_channel_deny = 1 [json_name = "unspecified-channel-deny"];
         message Channels {
            message Channel {
               string channel_name = 1 [json_name = "channel-name"];
               enum ChannelMode {
                  ChannelMode_ASM = 0;
                  ChannelMode_SSM = 1;
               };
               ChannelMode channel_mode = 2 [json_name = "channel-mode"];
               message Groups {
                  message Group {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                     uint32 source_mask_length = 4 [json_name = "source-mask-length"];
                     uint32 per_bandwidth = 5 [json_name = "per-bandwidth"];
                  }
                  repeated Group group = 1 [json_name = "group"];
               }
               Groups groups = 3 [json_name = "groups"];
            }
            repeated Channel channel = 1 [json_name = "channel"];
         }
         Channels channels = 2 [json_name = "channels"];
      }
      GlobalChannel global_channel = 2 [json_name = "global-channel"];
      message Instances {
         message Instance {
            uint32 id = 1 [json_name = "id"];
            message MulticastInstanceType_Vlan {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
            }
            message MulticastInstanceType_Vsi {
               string vsi_name = 1 [json_name = "vsi-name"];
            }
            oneof MulticastInstanceType {
               MulticastInstanceType_Vlan multicast_instance_type_vlan = 2 [json_name = "vlan"];
               MulticastInstanceType_Vsi multicast_instance_type_vsi = 3 [json_name = "vsi"];
            }
            message UserInstanceVsis {
               message UserInstanceVsi {
                  string vsi_name = 1 [json_name = "vsi-name"];
               }
               repeated UserInstanceVsi user_instance_vsi = 1 [json_name = "user-instance-vsi"];
            }
            UserInstanceVsis user_instance_vsis = 4 [json_name = "user-instance-vsis"];
            message UserInstanceVlan {
               string vlans = 1 [json_name = "vlans"];
            }
            UserInstanceVlan user_instance_vlan = 5 [json_name = "user-instance-vlan"];
         }
         repeated Instance instance = 1 [json_name = "instance"];
      }
      Instances instances = 3 [json_name = "instances"];
      message VlanLimits {
         message VlanLimit {
            uint32 limit_max_entry = 1 [json_name = "limit-max-entry"];
            uint32 vlan_id_begin = 2 [json_name = "vlan-id-begin"];
            uint32 vlan_id_end = 3 [json_name = "vlan-id-end"];
            string except_acl = 4 [json_name = "except-acl"];
         }
         repeated VlanLimit vlan_limit = 1 [json_name = "vlan-limit"];
      }
      VlanLimits vlan_limits = 4 [json_name = "vlan-limits"];
      message AllVsiAlarmThresholds {
         message AllVsiAlarmThreshold {
            enum LimitType {
               LimitType_GLOBALX_ENTRY = 0;
               LimitType_LISTENEDX_USERX_PERX_SLOT = 1;
               LimitType_LISTENEDX_USERX_PERX_GROUP = 2;
            };
            LimitType limit_type = 1 [json_name = "limit-type"];
            uint32 upper_threshold = 2 [json_name = "upper-threshold"];
            uint32 lower_threshold = 3 [json_name = "lower-threshold"];
         }
         repeated AllVsiAlarmThreshold all_vsi_alarm_threshold = 1 [json_name = "all-vsi-alarm-threshold"];
      }
      AllVsiAlarmThresholds all_vsi_alarm_thresholds = 5 [json_name = "all-vsi-alarm-thresholds"];
      message AllListenedUserCounts {
         uint32 statistic_start_time = 1 [json_name = "statistic-start-time"];
         uint32 limit_count = 2 [json_name = "limit-count"];
         uint32 current_count = 3 [json_name = "current-count"];
         uint32 last_5min_max_count = 4 [json_name = "last-5min-max-count"];
         uint32 last_5min_min_count = 5 [json_name = "last-5min-min-count"];
         uint32 last_5min_average_count = 6 [json_name = "last-5min-average-count"];
         uint32 last_15min_max_count = 7 [json_name = "last-15min-max-count"];
         uint32 last_15min_min_count = 8 [json_name = "last-15min-min-count"];
         uint32 last_15min_average_count = 9 [json_name = "last-15min-average-count"];
         uint32 last_24h_max_count = 10 [json_name = "last-24h-max-count"];
         uint32 last_24h_min_count = 11 [json_name = "last-24h-min-count"];
         uint32 last_24h_average_count = 12 [json_name = "last-24h-average-count"];
      }
      AllListenedUserCounts all_listened_user_counts = 6 [json_name = "all-listened-user-counts"];
      message SlotListenedUserCounts {
         message SlotListenedUserCount {
            string slot_name = 1 [json_name = "slot-name"];
            uint32 statistic_start_time = 2 [json_name = "statistic-start-time"];
            uint32 limit_count = 3 [json_name = "limit-count"];
            uint32 current_count = 4 [json_name = "current-count"];
            uint32 last_5min_max_count = 5 [json_name = "last-5min-max-count"];
            uint32 last_5min_min_count = 6 [json_name = "last-5min-min-count"];
            uint32 last_5min_average_count = 7 [json_name = "last-5min-average-count"];
            uint32 last_15min_max_count = 8 [json_name = "last-15min-max-count"];
            uint32 last_15min_min_count = 9 [json_name = "last-15min-min-count"];
            uint32 last_15min_average_count = 10 [json_name = "last-15min-average-count"];
            uint32 last_24h_max_count = 11 [json_name = "last-24h-max-count"];
            uint32 last_24h_min_count = 12 [json_name = "last-24h-min-count"];
            uint32 last_24h_average_count = 13 [json_name = "last-24h-average-count"];
         }
         repeated SlotListenedUserCount slot_listened_user_count = 1 [json_name = "slot-listened-user-count"];
      }
      SlotListenedUserCounts slot_listened_user_counts = 7 [json_name = "slot-listened-user-counts"];
      message InvalidPackets {
         message InvalidPacket {
            uint32 packet_index = 1 [json_name = "packet-index"];
            enum InstanceType {
               InstanceType_VSI = 0;
               InstanceType_VLAN = 1;
               InstanceType_BD = 2;
               InstanceType_ALL = 3;
            };
            InstanceType instance_type = 2 [json_name = "instance-type"];
            string instance_id_or_name = 3 [json_name = "instance-id-or-name"];
            string time = 4 [json_name = "time"];
            uint32 message_length = 5 [json_name = "message-length"];
            string invalid_type = 6 [json_name = "invalid-type"];
            string packet_content = 7 [json_name = "packet-content"];
         }
         repeated InvalidPacket invalid_packet = 1 [json_name = "invalid-packet"];
      }
      InvalidPackets invalid_packets = 8 [json_name = "invalid-packets"];
   }
   IgmpSnooping igmp_snooping = 4 [json_name = "igmp-snooping"];
   message MldSnooping {
      message GlobalEnable {
         bool send_query = 1 [json_name = "send-query"];
         string send_query_source_address = 2 [json_name = "send-query-source-address"];
      }
      GlobalEnable global_enable = 1 [json_name = "global-enable"];
   }
   MldSnooping mld_snooping = 5 [json_name = "mld-snooping"];
   message TrapParameter {
      message PimNotificationInterval {
         uint32 interface_election_dr = 1 [json_name = "interface-election-dr"];
         uint32 invalid_join_prune = 2 [json_name = "invalid-join-prune"];
         uint32 invalid_register = 3 [json_name = "invalid-register"];
         uint32 neighbor_loss = 4 [json_name = "neighbor-loss"];
         uint32 new_neighbor = 5 [json_name = "new-neighbor"];
         uint32 rp_mapping_change = 6 [json_name = "rp-mapping-change"];
      }
      PimNotificationInterval pim_notification_interval = 1 [json_name = "pim-notification-interval"];
   }
   TrapParameter trap_parameter = 6 [json_name = "trap-parameter"];
   message GlobalOutgoingInterfaceLimitCounts {
      message GlobalOutgoingInterfaceLimitCount {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         enum LimitType {
            LimitType_PIMX_SM = 0;
         };
         LimitType limit_type = 2 [json_name = "limit-type"];
         uint32 limit_value = 3 [json_name = "limit-value"];
         uint32 upper_threshold_value = 4 [json_name = "upper-threshold-value"];
         uint32 lower_threshold_value = 5 [json_name = "lower-threshold-value"];
         uint32 total_outgoing_interface_count = 6 [json_name = "total-outgoing-interface-count"];
         uint32 star_group_outgoing_interface_count = 7 [json_name = "star-group-outgoing-interface-count"];
         uint32 source_group_outgoing_interface_count = 8 [json_name = "source-group-outgoing-interface-count"];
      }
      repeated GlobalOutgoingInterfaceLimitCount global_outgoing_interface_limit_count = 1 [json_name = "global-outgoing-interface-limit-count"];
   }
   GlobalOutgoingInterfaceLimitCounts global_outgoing_interface_limit_counts = 7 [json_name = "global-outgoing-interface-limit-counts"];
   message DefaultParameter {
      string load_splitting_rule = 1 [json_name = "load-splitting-rule"];
      string route_selection_rule = 2 [json_name = "route-selection-rule"];
      string multi_topology = 3 [json_name = "multi-topology"];
   }
   DefaultParameter default_parameter = 8 [json_name = "default-parameter"];
   message InterfaceDefaultParameter {
      uint32 minimum_ttl = 1 [json_name = "minimum-ttl"];
   }
   InterfaceDefaultParameter interface_default_parameter = 9 [json_name = "interface-default-parameter"];
   message GlobalLimitCounts {
      message GlobalLimitCount {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         enum LimitType {
            LimitType_PIMX_SMX_STARX_GROUP = 0;
            LimitType_PIMX_SMX_SOURCEX_GROUP = 1;
            LimitType_PIMX_DMX_STARX_GROUP = 2;
            LimitType_PIMX_DMX_SOURCEX_GROUP = 3;
            LimitType_BIDIRX_PIMX_STARX_GROUP = 4;
         };
         LimitType limit_type = 2 [json_name = "limit-type"];
         uint32 limit_value = 3 [json_name = "limit-value"];
         uint32 upper_threshold = 4 [json_name = "upper-threshold"];
         uint32 lower_threshold = 5 [json_name = "lower-threshold"];
         uint32 current_entry_count = 6 [json_name = "current-entry-count"];
      }
      repeated GlobalLimitCount global_limit_count = 1 [json_name = "global-limit-count"];
   }
   GlobalLimitCounts global_limit_counts = 10 [json_name = "global-limit-counts"];
   message SessionCar {
      message Pim {
         bool enable = 1 [json_name = "enable"];
         uint32 cir_interval = 2 [json_name = "cir-interval"];
         uint32 cbs_interval = 3 [json_name = "cbs-interval"];
         uint32 pir_interval = 4 [json_name = "pir-interval"];
         uint32 pbs_interval = 5 [json_name = "pbs-interval"];
      }
      Pim pim = 1 [json_name = "pim"];
      message PimIpv6 {
         bool enable = 1 [json_name = "enable"];
         uint32 cir_interval = 2 [json_name = "cir-interval"];
         uint32 cbs_interval = 3 [json_name = "cbs-interval"];
         uint32 pir_interval = 4 [json_name = "pir-interval"];
         uint32 pbs_interval = 5 [json_name = "pbs-interval"];
      }
      PimIpv6 pim_ipv6 = 2 [json_name = "pim-ipv6"];
   }
   SessionCar session_car = 11 [json_name = "session-car"];
   message Igmp {
      message DisableDhcpStbPacketCopys {
         message DisableDhcpStbPacketCopy {
            string rbp_name = 1 [json_name = "rbp-name"];
         }
         repeated DisableDhcpStbPacketCopy disable_dhcp_stb_packet_copy = 1 [json_name = "disable-dhcp-stb-packet-copy"];
      }
      DisableDhcpStbPacketCopys disable_dhcp_stb_packet_copys = 1 [json_name = "disable-dhcp-stb-packet-copys"];
      message InvalidPackets {
         message InvalidPacket {
            uint32 packet_index = 1 [json_name = "packet-index"];
            string interface = 2 [json_name = "interface"];
            string time = 3 [json_name = "time"];
            uint32 message_length = 4 [json_name = "message-length"];
            string invalid_type = 5 [json_name = "invalid-type"];
            string packet_content = 6 [json_name = "packet-content"];
         }
         repeated InvalidPacket invalid_packet = 1 [json_name = "invalid-packet"];
      }
      InvalidPackets invalid_packets = 2 [json_name = "invalid-packets"];
   }
   Igmp igmp = 12 [json_name = "igmp"];
   message Mld {
      message InvalidPackets {
         message InvalidPacket {
            uint32 packet_index = 1 [json_name = "packet-index"];
            string interface = 2 [json_name = "interface"];
            string time = 3 [json_name = "time"];
            uint32 message_length = 4 [json_name = "message-length"];
            string invalid_type = 5 [json_name = "invalid-type"];
            string packet_content = 6 [json_name = "packet-content"];
         }
         repeated InvalidPacket invalid_packet = 1 [json_name = "invalid-packet"];
      }
      InvalidPackets invalid_packets = 1 [json_name = "invalid-packets"];
   }
   Mld mld = 13 [json_name = "mld"];
   message Msdp {
      message InvalidPackets {
         message InvalidPacket {
            uint32 packet_index = 1 [json_name = "packet-index"];
            string interface = 2 [json_name = "interface"];
            string time = 3 [json_name = "time"];
            uint32 message_length = 4 [json_name = "message-length"];
            string invalid_reason = 5 [json_name = "invalid-reason"];
            string packet_content = 6 [json_name = "packet-content"];
         }
         repeated InvalidPacket invalid_packet = 1 [json_name = "invalid-packet"];
      }
      InvalidPackets invalid_packets = 1 [json_name = "invalid-packets"];
   }
   Msdp msdp = 14 [json_name = "msdp"];
   message RpfVectorPaths {
      message RpfVectorPath {
         string path_name = 1 [json_name = "path-name"];
         enum PathType {
            PathType_STRICT = 0;
            PathType_LOOSE = 1;
         };
         PathType path_type = 2 [json_name = "path-type"];
         message Hops {
            message Hop {
               uint32 index = 1 [json_name = "index"];
               string ip_addr = 2 [json_name = "ip-addr"];
            }
            repeated Hop hop = 1 [json_name = "hop"];
         }
         Hops hops = 3 [json_name = "hops"];
      }
      repeated RpfVectorPath rpf_vector_path = 1 [json_name = "rpf-vector-path"];
   }
   RpfVectorPaths rpf_vector_paths = 15 [json_name = "rpf-vector-paths"];
}


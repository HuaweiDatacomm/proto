syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-cusp-controller
// revision 2019-11-19
// namespace urn:huawei:yang:huawei-cusp-controller

package huawei_cusp_controller;

message CuspController {
   message Controller {
      message GlobalAttribute {
         string listen_ip = 1 [json_name = "listen-ip"];
         string vpn_name = 2 [json_name = "vpn-name"];
         string keychain_name = 3 [json_name = "keychain-name"];
         uint32 echo_interval = 4 [json_name = "echo-interval"];
         string ssl_policy_name = 5 [json_name = "ssl-policy-name"];
         uint32 timeout_count = 6 [json_name = "timeout-count"];
         uint32 congest_duration = 7 [json_name = "congest-duration"];
         uint32 tcp_mss = 8 [json_name = "tcp-mss"];
      }
      GlobalAttribute global_attribute = 1 [json_name = "global-attribute"];
      message Connections {
         message Connection {
            string agent_name = 1 [json_name = "agent-name"];
            string agent_address = 2 [json_name = "agent-address"];
            string keychain_name = 3 [json_name = "keychain-name"];
            uint32 echo_interval = 4 [json_name = "echo-interval"];
            string ssl_policy_name = 5 [json_name = "ssl-policy-name"];
            uint32 timeout_count = 6 [json_name = "timeout-count"];
            uint32 congest_duration = 7 [json_name = "congest-duration"];
            message Bfd {
               uint32 multiplier = 1 [json_name = "multiplier"];
               uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
               uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
               uint32 tos_exp = 4 [json_name = "tos-exp"];
            }
            Bfd bfd = 8 [json_name = "bfd"];
            message Session {
               uint32 up_time = 1 [json_name = "up-time"];
               enum State {
                  State_INIT = 0;
                  State_TOX_LISTEN = 1;
                  State_LISTEN = 2;
                  State_INX_COMING = 3;
                  State_CONNECTED = 4;
                  State_TOX_REGISTER = 5;
                  State_REGISTERED = 6;
                  State_TOX_CREATE = 7;
               };
               State state = 2 [json_name = "state"];
            }
            Session session = 9 [json_name = "session"];
            message MessageStatistics {
               message MessageStatistic {
                  enum MessageType {
                     MessageType_HELLO = 0;
                     MessageType_EHCOX_REQUEST = 1;
                     MessageType_EHCOX_REPLY = 2;
                     MessageType_EXPERIMENTER = 3;
                     MessageType_FEATURESX_REQUEST = 4;
                     MessageType_FEATURESX_REPLY = 5;
                     MessageType_PORTX_STATUS = 6;
                     MessageType_FLOWX_MOD = 7;
                     MessageType_MULTIPARTX_REQUEST = 8;
                     MessageType_MULTIPARTX_REPLY = 9;
                     MessageType_ROLEX_REQUEST = 10;
                     MessageType_ROLEX_REPLY = 11;
                     MessageType_PACKETX_IN = 12;
                     MessageType_PACKETX_OUT = 13;
                     MessageType_UNKNOW = 14;
                  };
                  MessageType message_type = 1 [json_name = "message-type"];
                  uint32 received_count = 2 [json_name = "received-count"];
                  uint32 sent_count = 3 [json_name = "sent-count"];
                  uint32 invalid_count = 4 [json_name = "invalid-count"];
                  uint32 send_failed_count = 5 [json_name = "send-failed-count"];
               }
               repeated MessageStatistic message_statistic = 1 [json_name = "message-statistic"];
            }
            MessageStatistics message_statistics = 10 [json_name = "message-statistics"];
         }
         repeated Connection connection = 1 [json_name = "connection"];
      }
      Connections connections = 2 [json_name = "connections"];
   }
   Controller controller = 1 [json_name = "controller"];
   message SessionCar {
      bool session_car_enable = 1 [json_name = "session-car-enable"];
      uint32 cir = 2 [json_name = "cir"];
      uint32 cbs = 3 [json_name = "cbs"];
      uint32 pir = 4 [json_name = "pir"];
      uint32 pbs = 5 [json_name = "pbs"];
   }
   SessionCar session_car = 2 [json_name = "session-car"];
}


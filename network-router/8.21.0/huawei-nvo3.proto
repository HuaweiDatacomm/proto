syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-20 16:14:18
// ProtoYang-version 1
// module huawei-nvo3
// revision 2020-03-06
// revision 2019-03-01
// namespace urn:huawei:yang:huawei-nvo3

package huawei_nvo3;

message Nvo3 {
   message GlobalAttribute {
      bool exact_sub_enable = 1 [json_name = "exact-sub-enable"];
      bool tunnelMacEnable = 2;
   }
   GlobalAttribute global_attribute = 1 [json_name = "global-attribute"];
   message Nvo3CuVniStatistics {
      message Nvo3CuVniStatistic {
         message Nvo3VniStatData {
            uint64 dropBroadcastPackets = 1;
            uint64 dropMulticastPackets = 2;
            uint64 dropUnicastPackets = 3;
            uint64 rxBitsPerSec = 4;
            uint64 rxBroadcastPackets = 5;
            uint64 rxBytes = 6;
            uint64 rxMulticastPackets = 7;
            uint64 rxPakcets = 8;
            uint64 rxPktsPerSec = 9;
            uint64 rxUnicastPackets = 10;
            uint64 txBitsPerSec = 11;
            uint64 txBroadcastPackets = 12;
            uint64 txBytes = 13;
            uint64 txMulticastPackets = 14;
            uint64 txPakcets = 15;
            uint64 txPktsPerSec = 16;
            uint64 txUnicastPackets = 17;
         }
         Nvo3VniStatData nvo3VniStatData = 1;
         uint32 vniId = 2;
      }
      repeated Nvo3CuVniStatistic nvo3CuVniStatistic = 1;
   }
   Nvo3CuVniStatistics nvo3CuVniStatistics = 2;
   message Nvo3DspCuPeers {
      message Nvo3DspCuPeer {
         string destination = 1;
         uint32 outVniId = 2;
         string source = 3;
         enum Type {
            Type_DYNAMIC = 0;
            Type_STATIC = 1;
         };
         Type type = 4;
         uint32 vniId = 5;
      }
      repeated Nvo3DspCuPeer nvo3DspCuPeer = 1;
   }
   Nvo3DspCuPeers nvo3DspCuPeers = 3;
   message Nvo3DspEvpls {
      message Nvo3DspEvpl {
         string bypassPeerAddr = 1;
         uint32 bypassVniId = 2;
         uint32 evplId = 3;
         uint32 locVniId = 4;
         string priPeerAddr = 5;
         uint32 priVniId = 6;
         string srcAddr = 7;
         string staPeerAddr = 8;
         uint32 staVniId = 9;
         message UnselectPeerVnis {
            message UnselectPeerVni {
               string unselectPeerAddr = 1;
               uint32 vniId = 2;
            }
            repeated UnselectPeerVni unselectPeerVni = 1;
         }
         UnselectPeerVnis unselectPeerVnis = 10;
         string vrfName = 11;
      }
      repeated Nvo3DspEvpl nvo3DspEvpl = 1;
   }
   Nvo3DspEvpls nvo3DspEvpls = 4;
   message Nvo3DspFvteps {
      message Nvo3DspFvtep {
         string destination = 1;
         string source = 2;
         enum Status {
            Status_BACKUP = 0;
            Status_PRIMARY = 1;
         };
         Status status = 3;
         enum Type {
            Type_DYNAMIC = 0;
            Type_STATIC = 1;
         };
         Type type = 4;
         uint32 vniId = 5;
      }
      repeated Nvo3DspFvtep nvo3DspFvtep = 1;
   }
   Nvo3DspFvteps nvo3DspFvteps = 5;
   message Nvo3DspPeers {
      message Nvo3DspPeer {
         string destination = 1;
         uint32 outVniId = 2;
         string source = 3;
         enum Type {
            Type_DYNAMIC = 0;
            Type_STATIC = 1;
         };
         Type type = 4;
         uint32 vniId = 5;
      }
      repeated Nvo3DspPeer nvo3DspPeer = 1;
   }
   Nvo3DspPeers nvo3DspPeers = 6;
   message Nvo3DspVnis {
      message Nvo3DspVni {
         uint32 bdId = 1;
         enum Status {
            Status_DOWN = 0;
            Status_UP = 1;
         };
         Status status = 2;
         uint32 vniId = 3;
      }
      repeated Nvo3DspVni nvo3DspVni = 1;
   }
   Nvo3DspVnis nvo3DspVnis = 7;
   message Nvo3Evpls {
      message Nvo3Evpl {
         uint32 evplId = 1;
         string srcAddr = 2;
         string srcIpv6Addr = 3;
         uint32 vniId = 4;
         string vrfName = 5;
      }
      repeated Nvo3Evpl nvo3Evpl = 1;
   }
   Nvo3Evpls nvo3Evpls = 8;
   message Nvo3Interfaces {
      message Nvo3Interface {
         bool anycastEnable = 1;
         string ifName = 2;
      }
      repeated Nvo3Interface nvo3Interface = 1;
   }
   Nvo3Interfaces nvo3Interfaces = 9;
   message Nvo3NveMacs {
      message Nvo3NveMac {
         string ifName = 1;
         string macAddr = 2;
      }
      repeated Nvo3NveMac nvo3NveMac = 1;
   }
   Nvo3NveMacs nvo3NveMacs = 10;
   message Nvo3Nves {
      message Nvo3Nve {
         string anycastMac = 1;
         string bypassSrcAddr = 2;
         string ifName = 3;
         enum NveType {
            NveType_MODEX_L2 = 0;
            NveType_MODEX_L3 = 1;
         };
         NveType nveType = 4;
         message Nvo3L3TnlStatCfgIpv6S {
            message Nvo3L3TnlStatCfgIpv6 {
               string destIpv6Addr = 1;
               string srcIpv6Addr = 2;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 3;
               uint32 vniId = 4;
            }
            repeated Nvo3L3TnlStatCfgIpv6 nvo3L3TnlStatCfgIpv6 = 1;
         }
         Nvo3L3TnlStatCfgIpv6S nvo3L3TnlStatCfgIpv6s = 5;
         message Nvo3L3TnlStatInfoIpv6S {
            message Nvo3L3TnlStatInfoIpv6 {
               string destIpv6Addr = 1;
               uint64 rxBitsPerSec = 2;
               uint64 rxBroadcastPackets = 3;
               uint64 rxBytes = 4;
               uint64 rxMulticastPackets = 5;
               uint64 rxPakcets = 6;
               uint64 rxPktsPerSec = 7;
               uint64 rxUnicastPackets = 8;
               string srcIpv6Addr = 9;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 10;
               uint64 txBitsPerSec = 11;
               uint64 txBroadcastPackets = 12;
               uint64 txBytes = 13;
               uint64 txMulticastPackets = 14;
               uint64 txPakcets = 15;
               uint64 txPktsPerSec = 16;
               uint64 txUnicastPackets = 17;
               uint32 vniId = 18;
            }
            repeated Nvo3L3TnlStatInfoIpv6 nvo3L3TnlStatInfoIpv6 = 1;
         }
         Nvo3L3TnlStatInfoIpv6S nvo3L3TnlStatInfoIpv6s = 6;
         message Nvo3L3TnlStatisticsCfgs {
            message Nvo3L3TnlStatisticsCfg {
               string destAddr = 1;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 2;
               uint32 vniId = 3;
            }
            repeated Nvo3L3TnlStatisticsCfg nvo3L3TnlStatisticsCfg = 1;
         }
         Nvo3L3TnlStatisticsCfgs nvo3L3TnlStatisticsCfgs = 7;
         message Nvo3L3TnlStatisticsInfos {
            message Nvo3L3TnlStatisticsInfo {
               string destAddr = 1;
               uint64 rxBitsPerSec = 2;
               uint64 rxBroadcastPackets = 3;
               uint64 rxBytes = 4;
               uint64 rxMulticastPackets = 5;
               uint64 rxPakcets = 6;
               uint64 rxPktsPerSec = 7;
               uint64 rxUnicastPackets = 8;
               string srcAddr = 9;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 10;
               uint64 txBitsPerSec = 11;
               uint64 txBroadcastPackets = 12;
               uint64 txBytes = 13;
               uint64 txMulticastPackets = 14;
               uint64 txPakcets = 15;
               uint64 txPktsPerSec = 16;
               uint64 txUnicastPackets = 17;
               uint32 vniId = 18;
            }
            repeated Nvo3L3TnlStatisticsInfo nvo3L3TnlStatisticsInfo = 1;
         }
         Nvo3L3TnlStatisticsInfos nvo3L3TnlStatisticsInfos = 8;
         message Nvo3TnlStatCfgIpv6S {
            message Nvo3TnlStatCfgIpv6 {
               string destIpv6Addr = 1;
               string srcIpv6Addr = 2;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 3;
               uint32 vniId = 4;
            }
            repeated Nvo3TnlStatCfgIpv6 nvo3TnlStatCfgIpv6 = 1;
         }
         Nvo3TnlStatCfgIpv6S nvo3TnlStatCfgIpv6s = 9;
         message Nvo3TnlStatInfoIpv6S {
            message Nvo3TnlStatInfoIpv6 {
               string destIpv6Addr = 1;
               uint64 rxBitsPerSec = 2;
               uint64 rxBroadcastPackets = 3;
               uint64 rxBytes = 4;
               uint64 rxMulticastPackets = 5;
               uint64 rxPakcets = 6;
               uint64 rxPktsPerSec = 7;
               uint64 rxUnicastPackets = 8;
               string srcIpv6Addr = 9;
               enum TunlBoundType {
                  TunlBoundType_INBOUND = 0;
                  TunlBoundType_OUTBOUND = 1;
               };
               TunlBoundType tunlBoundType = 10;
               uint64 txBitsPerSec = 11;
               uint64 txBroadcastPackets = 12;
               uint64 txBytes = 13;
               uint64 txMulticastPackets = 14;
               uint64 txPakcets = 15;
               uint64 txPktsPerSec = 16;
               uint64 txUnicastPackets = 17;
               uint32 vniId = 18;
            }
            repeated Nvo3TnlStatInfoIpv6 nvo3TnlStatInfoIpv6 = 1;
         }
         Nvo3TnlStatInfoIpv6S nvo3TnlStatInfoIpv6s = 10;
         message Nvo3TnlStatisticsCfgs {
            message Nvo3TnlStatisticsCfg {
               string destAddr = 1;
               enum TunlBoundType {
                  TunlBoundType_BIDIRECTION = 0;
                  TunlBoundType_INBOUND = 1;
                  TunlBoundType_OUTBOUND = 2;
               };
               TunlBoundType tunlBoundType = 2;
               uint32 vniId = 3;
            }
            repeated Nvo3TnlStatisticsCfg nvo3TnlStatisticsCfg = 1;
         }
         Nvo3TnlStatisticsCfgs nvo3TnlStatisticsCfgs = 11;
         message Nvo3TnlStatisticsInfos {
            message Nvo3TnlStatisticsInfo {
               string destAddr = 1;
               uint64 dropBroadcastPackets = 2;
               uint64 dropMulticastPackets = 3;
               uint64 dropUnicastPackets = 4;
               uint64 rxBitsPerSec = 5;
               uint64 rxBroadcastPackets = 6;
               uint64 rxBytes = 7;
               uint64 rxMulticastPackets = 8;
               uint64 rxPakcets = 9;
               uint64 rxPktsPerSec = 10;
               uint64 rxUnicastPackets = 11;
               string srcAddr = 12;
               enum TunlBoundType {
                  TunlBoundType_BIDIRECTION = 0;
                  TunlBoundType_INBOUND = 1;
                  TunlBoundType_OUTBOUND = 2;
               };
               TunlBoundType tunlBoundType = 13;
               uint64 txBitsPerSec = 14;
               uint64 txBroadcastPackets = 15;
               uint64 txBytes = 16;
               uint64 txMulticastPackets = 17;
               uint64 txPakcets = 18;
               uint64 txPktsPerSec = 19;
               uint64 txUnicastPackets = 20;
               uint32 vniId = 21;
            }
            repeated Nvo3TnlStatisticsInfo nvo3TnlStatisticsInfo = 1;
         }
         Nvo3TnlStatisticsInfos nvo3TnlStatisticsInfos = 12;
         message Nvo3VniStatistics {
            message Nvo3VniStatistic {
               message Nvo3VniStatData {
                  uint64 dropBroadcastPackets = 1;
                  uint64 dropMulticastPackets = 2;
                  uint64 dropUnicastPackets = 3;
                  uint64 rxBitsPerSec = 4;
                  uint64 rxBroadcastPackets = 5;
                  uint64 rxBytes = 6;
                  uint64 rxMulticastPackets = 7;
                  uint64 rxPakcets = 8;
                  uint64 rxPktsPerSec = 9;
                  uint64 rxUnicastPackets = 10;
                  uint64 txBitsPerSec = 11;
                  uint64 txBroadcastPackets = 12;
                  uint64 txBytes = 13;
                  uint64 txMulticastPackets = 14;
                  uint64 txPakcets = 15;
                  uint64 txPktsPerSec = 16;
                  uint64 txUnicastPackets = 17;
               }
               Nvo3VniStatData nvo3VniStatData = 1;
               uint32 vniId = 2;
            }
            repeated Nvo3VniStatistic nvo3VniStatistic = 1;
         }
         Nvo3VniStatistics nvo3VniStatistics = 13;
         string srcAddr = 14;
         string srcIpv6Addr = 15;
         enum TrackProtocol {
            TrackProtocol_BFD = 0;
            TrackProtocol_NULL = 1;
         };
         TrackProtocol trackProtocol = 16;
         message VniMembers {
            message VniMember {
               enum EvplProtocol {
                  EvplProtocol_BGP = 0;
                  EvplProtocol_NULL = 1;
               };
               EvplProtocol evplProtocol = 1;
               message Nvo3EvplIpv6Peers {
                  message Nvo3EvplIpv6Peer {
                     enum Bypass {
                        Bypass_BYPASSENABLE = 0;
                        Bypass_NULL = 1;
                     };
                     Bypass bypass = 1;
                     uint32 outVniId = 2;
                     string peerIpv6Addr = 3;
                     uint32 precedenceValue = 4;
                  }
                  repeated Nvo3EvplIpv6Peer nvo3EvplIpv6Peer = 1;
               }
               Nvo3EvplIpv6Peers nvo3EvplIpv6Peers = 2;
               message Nvo3EvplPeers {
                  message Nvo3EvplPeer {
                     string peerAddr = 1;
                     enum Preference {
                        Preference_BYPASS = 0;
                        Preference_SECONDARY = 1;
                     };
                     Preference preference = 2;
                     string vrfName = 3;
                  }
                  repeated Nvo3EvplPeer nvo3EvplPeer = 1;
               }
               Nvo3EvplPeers nvo3EvplPeers = 3;
               message Nvo3FloodVteps {
                  message Nvo3FloodVtep {
                     string floodVtep = 1;
                  }
                  repeated Nvo3FloodVtep nvo3FloodVtep = 1;
               }
               Nvo3FloodVteps nvo3FloodVteps = 4;
               message Nvo3McastGroups {
                  message Nvo3McastGroup {
                     string mcastAddr = 1;
                  }
                  repeated Nvo3McastGroup nvo3McastGroup = 1;
               }
               Nvo3McastGroups nvo3McastGroups = 5;
               message Nvo3VniIpv6Peers {
                  message Nvo3VniIpv6Peer {
                     string peerIpv6Addr = 1;
                  }
                  repeated Nvo3VniIpv6Peer nvo3VniIpv6Peer = 1;
               }
               Nvo3VniIpv6Peers nvo3VniIpv6Peers = 6;
               message Nvo3VniPeers {
                  message Nvo3VniPeer {
                     uint32 outVniId = 1;
                     string peerAddr = 2;
                     string splitGroupName = 3;
                     uint32 splitHorizonGroupId = 4;
                  }
                  repeated Nvo3VniPeer nvo3VniPeer = 1;
               }
               Nvo3VniPeers nvo3VniPeers = 7;
               enum Protocol {
                  Protocol_BGP = 0;
                  Protocol_NULL = 1;
               };
               Protocol protocol = 8;
               uint32 vniId = 9;
            }
            repeated VniMember vniMember = 1;
         }
         VniMembers vniMembers = 17;
      }
      repeated Nvo3Nve nvo3Nve = 1;
   }
   Nvo3Nves nvo3Nves = 11;
   message Nvo3Tnls {
      message Nvo3Tnl {
         string dstAddr = 1;
         string ifName = 2;
         message Nvo3IfVnis {
            message Nvo3IfVni {
               string subIfName = 1;
               uint32 vniId = 2;
            }
            repeated Nvo3IfVni nvo3IfVni = 1;
         }
         Nvo3IfVnis nvo3IfVnis = 3;
         string srcAddr = 4;
      }
      repeated Nvo3Tnl nvo3Tnl = 1;
   }
   Nvo3Tnls nvo3Tnls = 12;
   message Nvo3TunnelInfos {
      message Nvo3TunnelInfo {
         string destinationIp = 1;
         enum Mode {
            Mode_CUX_MODE = 0;
            Mode_DEFAULTX_MODE = 1;
         };
         Mode mode = 2;
         string sourceIp = 3;
         enum Status {
            Status_DOWN = 0;
            Status_UP = 1;
         };
         Status status = 4;
         uint32 tunnelId = 5;
         enum Type {
            Type_DYNAMIC = 0;
            Type_INVALID = 1;
            Type_STATIC = 2;
         };
         Type type = 6;
         string upTime = 7;
         string vrfName = 8;
      }
      repeated Nvo3TunnelInfo nvo3TunnelInfo = 1;
   }
   Nvo3TunnelInfos nvo3TunnelInfos = 13;
   message Nvo3Vni2Bds {
      message Nvo3Vni2Bd {
         uint32 bdId = 1;
         string splitGroupName = 2;
         enum SplitHorizonMode {
            SplitHorizonMode_NULL = 0;
            SplitHorizonMode_SPOKEX_MODE = 1;
         };
         SplitHorizonMode splitHorizonMode = 3;
         uint32 vniId = 4;
      }
      repeated Nvo3Vni2Bd nvo3Vni2Bd = 1;
   }
   Nvo3Vni2Bds nvo3Vni2Bds = 14;
   message Nvo3Vni2Vrfs {
      message Nvo3Vni2Vrf {
         string srcIpv6Addr = 1;
         uint32 vniId = 2;
         string vrfName = 3;
      }
      repeated Nvo3Vni2Vrf nvo3Vni2Vrf = 1;
   }
   Nvo3Vni2Vrfs nvo3Vni2Vrfs = 15;
   message Nvo3VniInfos {
      message Nvo3VniInfo {
         enum StatisticsEnable {
            StatisticsEnable_DISABLE = 0;
            StatisticsEnable_ENABLE = 1;
         };
         StatisticsEnable statisticsEnable = 1;
         enum Status {
            Status_DOWN = 0;
            Status_UP = 1;
         };
         Status status = 2;
         uint32 vniId = 3;
         message VniPeers {
            message VniPeer {
               string description = 1;
               string peerIp = 2;
            }
            repeated VniPeer vniPeer = 1;
         }
         VniPeers vniPeers = 4;
      }
      repeated Nvo3VniInfo nvo3VniInfo = 1;
   }
   Nvo3VniInfos nvo3VniInfos = 16;
   message VniInstances {
      message VniInstance {
         uint32 vni = 1 [json_name = "vni"];
         string source_nve = 2 [json_name = "source-nve"];
         enum State {
            State_DOWN = 0;
            State_UP = 1;
         };
         State state = 3 [json_name = "state"];
         enum ProtocolBgp {
            INVALID_ENUM_VALUE_ProtocolBgp = 0;
            ProtocolBgp_PEER = 1;
         };
         ProtocolBgp protocol_bgp = 4 [json_name = "protocol-bgp"];
         message StaticPeers {
            message StaticPeer {
               string address = 1 [json_name = "address"];
            }
            repeated StaticPeer static_peer = 1 [json_name = "static-peer"];
         }
         StaticPeers static_peers = 5 [json_name = "static-peers"];
         message StaticEvplPeers {
            message StaticEvplPeer {
               string address = 1 [json_name = "address"];
               enum Preference {
                  INVALID_ENUM_VALUE_Preference = 0;
                  Preference_PRIMARY = 1;
                  Preference_SECONDARY = 2;
                  Preference_BYPASS = 4;
               };
               Preference preference = 2 [json_name = "preference"];
            }
            repeated StaticEvplPeer static_evpl_peer = 1 [json_name = "static-evpl-peer"];
         }
         StaticEvplPeers static_evpl_peers = 6 [json_name = "static-evpl-peers"];
         message StaticIpv6Peers {
            message StaticIpv6Peer {
               string address = 1 [json_name = "address"];
            }
            repeated StaticIpv6Peer static_ipv6_peer = 1 [json_name = "static-ipv6-peer"];
         }
         StaticIpv6Peers static_ipv6_peers = 7 [json_name = "static-ipv6-peers"];
         message StaticEvplIpv6Peers {
            message StaticEvplIpv6Peer {
               string address = 1 [json_name = "address"];
               enum Preference {
                  INVALID_ENUM_VALUE_Preference = 0;
                  Preference_PRIMARY = 1;
                  Preference_SECONDARY = 2;
               };
               Preference preference = 2 [json_name = "preference"];
            }
            repeated StaticEvplIpv6Peer static_evpl_ipv6_peer = 1 [json_name = "static-evpl-ipv6-peer"];
         }
         StaticEvplIpv6Peers static_evpl_ipv6_peers = 8 [json_name = "static-evpl-ipv6-peers"];
         message McastGroups {
            message McastGroup {
               string address = 1 [json_name = "address"];
            }
            repeated McastGroup mcast_group = 1 [json_name = "mcast-group"];
         }
         McastGroups mcast_groups = 9 [json_name = "mcast-groups"];
      }
      repeated VniInstance vni_instance = 1 [json_name = "vni-instance"];
   }
   VniInstances vni_instances = 17 [json_name = "vni-instances"];
   message VniLabels {
      message VniLabel {
         uint32 vni = 1 [json_name = "vni"];
         message Statistics {
            bool enable = 1 [json_name = "enable"];
            message Collections {
               uint64 send_bits_rate = 1 [json_name = "send-bits-rate"];
               uint64 send_pkts_rate = 2 [json_name = "send-pkts-rate"];
               uint64 send_unicast_pkts = 3 [json_name = "send-unicast-pkts"];
               uint64 send_multicast_pkts = 4 [json_name = "send-multicast-pkts"];
               uint64 send_broadcast_pkts = 5 [json_name = "send-broadcast-pkts"];
               uint64 send_total_bytes = 6 [json_name = "send-total-bytes"];
               uint64 send_total_pkts = 7 [json_name = "send-total-pkts"];
               uint64 receive_bits_rate = 8 [json_name = "receive-bits-rate"];
               uint64 receive_pkts_rate = 9 [json_name = "receive-pkts-rate"];
               uint64 receive_unicast_pkts = 10 [json_name = "receive-unicast-pkts"];
               uint64 receive_multicast_pkts = 11 [json_name = "receive-multicast-pkts"];
               uint64 receive_broadcast_pkts = 12 [json_name = "receive-broadcast-pkts"];
               uint64 receive_total_bytes = 13 [json_name = "receive-total-bytes"];
               uint64 receive_total_pkts = 14 [json_name = "receive-total-pkts"];
               uint64 drop_unicast_pkts = 15 [json_name = "drop-unicast-pkts"];
               uint64 drop_multicast_pkts = 16 [json_name = "drop-multicast-pkts"];
               uint64 drop_broadcast_pkts = 17 [json_name = "drop-broadcast-pkts"];
            }
            Collections collections = 2 [json_name = "collections"];
         }
         Statistics statistics = 2 [json_name = "statistics"];
         message QosProfileApplys {
            message QosProfileApply {
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 1 [json_name = "direction"];
               string name = 2 [json_name = "name"];
            }
            repeated QosProfileApply qos_profile_apply = 1 [json_name = "qos-profile-apply"];
         }
         QosProfileApplys qos_profile_applys = 3 [json_name = "qos-profile-applys"];
      }
      repeated VniLabel vni_label = 1 [json_name = "vni-label"];
   }
   VniLabels vni_labels = 18 [json_name = "vni-labels"];
   message Vteps {
      message Peers {
         message Peer {
            uint32 vni = 1 [json_name = "vni"];
            string source = 2 [json_name = "source"];
            string destination = 3 [json_name = "destination"];
            enum Type {
               Type_DYNAMIC = 0;
               Type_STATIC = 1;
            };
            Type type = 4 [json_name = "type"];
            uint32 out_vni = 5 [json_name = "out-vni"];
         }
         repeated Peer peer = 1 [json_name = "peer"];
      }
      Peers peers = 1 [json_name = "peers"];
      message CuPeers {
         message CuPeer {
            uint32 vni = 1 [json_name = "vni"];
            string source = 2 [json_name = "source"];
            string destination = 3 [json_name = "destination"];
            enum Type {
               Type_DYNAMIC = 0;
               Type_STATIC = 1;
            };
            Type type = 4 [json_name = "type"];
            uint32 out_vni = 5 [json_name = "out-vni"];
            enum NqaState {
               NqaState_UNKNOWN = 0;
               NqaState_DOWN = 1;
               NqaState_UP = 2;
            };
            NqaState nqa_state = 6 [json_name = "nqa-state"];
            uint32 packet_loss_ratio = 7 [json_name = "packet-loss-ratio"];
         }
         repeated CuPeer cu_peer = 1 [json_name = "cu-peer"];
      }
      CuPeers cu_peers = 2 [json_name = "cu-peers"];
      message EvplPeers {
         message EvplPeer {
            uint32 id = 1 [json_name = "id"];
            uint32 vni = 2 [json_name = "vni"];
            string source = 3 [json_name = "source"];
            string peer = 4 [json_name = "peer"];
            uint32 out_vni = 5 [json_name = "out-vni"];
            string backup_peer = 6 [json_name = "backup-peer"];
            uint32 backup_out_vni = 7 [json_name = "backup-out-vni"];
            string bypass_peer = 8 [json_name = "bypass-peer"];
            uint32 bypass_out_vni = 9 [json_name = "bypass-out-vni"];
            string ipv6_source = 10 [json_name = "ipv6-source"];
         }
         repeated EvplPeer evpl_peer = 1 [json_name = "evpl-peer"];
      }
      EvplPeers evpl_peers = 3 [json_name = "evpl-peers"];
   }
   Vteps vteps = 19 [json_name = "vteps"];
   message Tunnels {
      message Tunnel {
         uint32 id = 1 [json_name = "id"];
         string source = 2 [json_name = "source"];
         string destination = 3 [json_name = "destination"];
         enum Mode {
            Mode_DEFAULTX_MODE = 0;
            Mode_CUX_MODE = 1;
         };
         Mode mode = 4 [json_name = "mode"];
         enum State {
            State_DOWN = 0;
            State_UP = 1;
         };
         State state = 5 [json_name = "state"];
         enum Type {
            Type_DYNAMIC = 0;
            Type_STATIC = 1;
         };
         Type type = 6 [json_name = "type"];
         string up_time = 7 [json_name = "up-time"];
         string vpn_name = 8 [json_name = "vpn-name"];
      }
      repeated Tunnel tunnel = 1 [json_name = "tunnel"];
   }
   Tunnels tunnels = 20 [json_name = "tunnels"];
}
message HwNvo3VxlanIPv6TnlDown {
   string DstIpv6Addr = 1;
   string SrcIpv6Addr = 2;
   string Tnl6Status = 3;
}
message HwNvo3VxlanIPv6TnlUp {
   string DstIpv6Addr = 1;
   string SrcIpv6Addr = 2;
   string Tnl6Status = 3;
}
message HwNvo3VxlanTnlDown {
   string DstIpAddr = 1;
   string SrcIpAddr = 2;
   string TnlStatus = 3;
}
message HwNvo3VxlanTnlUp {
   string DstIpAddr = 1;
   string SrcIpAddr = 2;
   string TnlStatus = 3;
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-mplstpoam
// revision 2021-01-13
// revision 2020-03-14
// revision 2019-12-27
// revision 2019-04-18
// namespace urn:huawei:yang:huawei-mplstpoam

package huawei_mplstpoam;

message Mplstpoam {
   message Global {
      bool ais_enable = 1 [json_name = "ais-enable"];
      enum ChannelType {
         ChannelType_X_0X7FFA = 0;
         ChannelType_X_0X8902 = 1;
      };
      ChannelType channel_type = 2 [json_name = "channel-type"];
      bool csf_enable = 3 [json_name = "csf-enable"];
      enum GalMode {
         INVALID_ENUM_VALUE_GalMode = 0;
         GalMode_LABELX_13 = 1;
         GalMode_LABELX_14 = 2;
         GalMode_DISABLE = 3;
         GalMode_ROUTEX_MODE = 4;
         GalMode_PTNX_MODE = 5;
      };
      GalMode gal_mode = 4 [json_name = "gal-mode"];
      string icc_string = 5 [json_name = "icc-string"];
      enum MplsTpMode {
         MplsTpMode_STANDARD = 0;
         MplsTpMode_PRIVATE = 1;
      };
      MplsTpMode mpls_tp_mode = 6 [json_name = "mpls-tp-mode"];
      uint32 oam_num = 7 [json_name = "oam-num"];
      enum OamStandard {
         OamStandard_Y1711 = 0;
         OamStandard_Y1731 = 1;
      };
      OamStandard oam_standard = 8 [json_name = "oam-standard"];
      enum ProtocolState {
         ProtocolState_NOX_CONFIG = 0;
         ProtocolState_Y1711 = 1;
         ProtocolState_Y1711X_Y1731 = 2;
         ProtocolState_Y1731 = 3;
      };
      ProtocolState protocolState = 9;
      enum ProtocolStatus {
         ProtocolStatus_NOX_CONFIG = 0;
         ProtocolStatus_Y1711 = 1;
         ProtocolStatus_Y1731 = 2;
         ProtocolStatus_Y1711X_Y1731 = 3;
      };
      ProtocolStatus protocol_status = 10 [json_name = "protocol-status"];
   }
   Global global = 1 [json_name = "global"];
   message LbResults {
      message LbResult {
         uint32 delayAvg = 1;
         uint32 delayMax = 2;
         uint32 delayMin = 3;
         enum ErrorType {
            ErrorType_OK = 0;
         };
         ErrorType errorType = 4;
         message LbDatas {
            message LbData {
               uint32 bytes = 1;
               uint32 index = 2;
               bool isDelete = 3;
               enum ResultType {
                  ResultType_FAILED = 0;
                  ResultType_SUCCESS = 1;
                  ResultType_TIMEOUT = 2;
               };
               ResultType resultType = 4;
               enum ReturnCode {
                  ReturnCode_OK = 0;
                  ReturnCode_TIMEOUT = 1;
               };
               ReturnCode returnCode = 5;
               uint32 rtt = 6;
               uint32 subCode = 7;
               uint32 ttl = 8;
            }
            repeated LbData lbData = 1;
         }
         LbDatas lbDatas = 5;
         string megName = 6;
         string packetLossRatio = 7;
         uint32 recvPktNum = 8;
         uint32 sendPktNum = 9;
         enum Status {
            Status_FINISHED = 0;
            Status_STOPPED = 1;
            Status_TESTING = 2;
         };
         Status status = 10;
      }
      repeated LbResult lbResult = 1;
   }
   LbResults lbResults = 2;
   message LteResults {
      message LteResult {
         uint32 delayAvg = 1;
         uint32 delayMax = 2;
         uint32 delayMin = 3;
         enum ErrorType {
            ErrorType_OK = 0;
         };
         ErrorType errorType = 4;
         message LteDatas {
            message LteData {
               uint32 bytes = 1;
               string destIp = 2;
               uint32 index = 3;
               bool isDelete = 4;
               uint32 l2IfIndex = 5;
               string l3VpnName = 6;
               uint32 mepId = 7;
               string replyLsrId = 8;
               enum ResultType {
                  ResultType_FAILED = 0;
                  ResultType_SUCCESS = 1;
                  ResultType_TIMEOUT = 2;
               };
               ResultType resultType = 9;
               enum ReturnCode {
                  ReturnCode_EGRESS = 0;
                  ReturnCode_TRANSIT = 1;
               };
               ReturnCode returnCode = 10;
               uint32 rtt = 11;
               uint32 serviceIndex = 12;
               enum ServiceType {
                  ServiceType_L2VPN = 0;
                  ServiceType_L3VPN = 1;
               };
               ServiceType serviceType = 13;
               uint32 subCode = 14;
               uint32 ttl = 15;
            }
            repeated LteData lteData = 1;
         }
         LteDatas lteDatas = 5;
         string megName = 6;
         string packetLossRatio = 7;
         uint32 recvPktNum = 8;
         uint32 sendPktNum = 9;
         enum Status {
            Status_FINISHED = 0;
            Status_STOPPED = 1;
            Status_TESTING = 2;
         };
         Status status = 10;
      }
      repeated LteResult lteResult = 1;
   }
   LteResults lteResults = 3;
   message LteltResults {
      message LteltResult {
         enum ErrorType {
            ErrorType_OK = 0;
         };
         ErrorType errorType = 1;
         message LteltDatas {
            message LteltData {
               string destIp = 1;
               enum DestType {
                  DestType_EGRESS = 0;
                  DestType_TRANSIT = 1;
               };
               DestType destType = 2;
               uint32 index = 3;
               bool isDelete = 4;
               uint32 l2IfIndex = 5;
               string l3VpnName = 6;
               uint32 mepId = 7;
               string replyLsrId = 8;
               enum ResultType {
                  ResultType_FAILED = 0;
                  ResultType_SUCCESS = 1;
                  ResultType_TIMEOUT = 2;
               };
               ResultType resultType = 9;
               enum ReturnCode {
                  ReturnCode_EGRESS = 0;
                  ReturnCode_TRANSIT = 1;
               };
               ReturnCode returnCode = 10;
               uint32 rtt = 11;
               uint32 serviceIndex = 12;
               enum ServiceType {
                  ServiceType_L2VPN = 0;
                  ServiceType_L3VPN = 1;
               };
               ServiceType serviceType = 13;
               uint32 ttl = 14;
            }
            repeated LteltData lteltData = 1;
         }
         LteltDatas lteltDatas = 2;
         string megName = 3;
         enum Status {
            Status_FINISHED = 0;
            Status_STOPPED = 1;
            Status_TESTING = 2;
         };
         Status status = 4;
      }
      repeated LteltResult lteltResult = 1;
   }
   LteltResults lteltResults = 4;
   message Megs {
      message Meg {
         message Ais {
            bool aisEnable = 1;
            uint32 aisExp = 2;
            enum AisInterval {
               AisInterval_INTERVAL1000MS = 0;
               AisInterval_INTERVAL60000MS = 1;
            };
            AisInterval aisInterval = 3;
         }
         Ais ais = 1;
         message Cc {
            uint32 ccExp = 1;
            enum CcInterval {
               CcInterval_INTERVAL10000MS = 0;
               CcInterval_INTERVAL1000MS = 1;
               CcInterval_INTERVAL100MS = 2;
               CcInterval_INTERVAL10MS = 3;
               CcInterval_INTERVAL3X_3MS = 4;
               CcInterval_INTERVAL600000MS = 5;
               CcInterval_INTERVAL60000MS = 6;
            };
            CcInterval ccInterval = 2;
            bool ccReceiveEnable = 3;
            bool ccSendEnable = 4;
            enum DetectMode {
               DetectMode_MANU = 0;
               DetectMode_AUTO = 1;
            };
            DetectMode detect_mode = 5 [json_name = "detect-mode"];
            uint32 exp = 6 [json_name = "exp"];
            enum Interval {
               INVALID_ENUM_VALUE_Interval = 0;
               Interval_X_3X_3MS = 1;
               Interval_X_10MS = 2;
               Interval_X_100MS = 3;
               Interval_X_1000MS = 4;
               Interval_X_10000MS = 5;
               Interval_X_60000MS = 6;
               Interval_X_600000MS = 7;
            };
            Interval interval = 7 [json_name = "interval"];
            bool send_enable = 8 [json_name = "send-enable"];
            bool receive_enable = 9 [json_name = "receive-enable"];
         }
         Cc cc = 2 [json_name = "cc"];
         message Csf {
            bool csfEnable = 1;
            uint32 csfExp = 2;
            enum CsfInterval {
               CsfInterval_INTERVAL1000MS = 0;
               CsfInterval_INTERVAL60000MS = 1;
            };
            CsfInterval csfInterval = 3;
         }
         Csf csf = 3;
         message Ip {
            string ifName = 1;
            uint32 mepId = 2;
            string netgatemac = 3;
            string sourceIp = 4;
            enum Type {
               Type_L2UNI = 0;
               Type_L3UNI = 1;
            };
            Type type = 5;
            uint32 vlanId = 6;
            string vpnInstance = 7;
         }
         Ip ip = 4;
         message Lock {
            bool lockEnable = 1;
            uint32 lockExp = 2;
            enum LockInterval {
               LockInterval_INTERVAL1000MS = 0;
               LockInterval_INTERVAL60000MS = 1;
            };
            LockInterval lockInterval = 3;
         }
         Lock lock = 5;
         enum MeType {
            MeType_ASSOCIATE = 0;
            MeType_COX_ROUTE = 1;
            MeType_EGRESS = 2;
            MeType_INGRESS = 3;
            MeType_IP = 4;
            MeType_NONE = 5;
            MeType_RING = 6;
            MeType_SECTION = 7;
            MeType_TEMIP = 8;
            MeType_VLL = 9;
            MeType_VLLMIP = 10;
            MeType_VPLS = 11;
         };
         MeType meType = 6;
         string megId = 7;
         uint32 megLevel = 8;
         enum MegMode {
            MegMode_CUSTOM = 0;
            MegMode_ICC = 1;
            MegMode_IPBASE = 2;
         };
         MegMode megMode = 9;
         string megName = 10;
         enum OamActiveState {
            OamActiveState_ACTIVE = 0;
            OamActiveState_DEACTIVE = 1;
         };
         OamActiveState oamActiveState = 11;
         message OamLm {
            uint32 oamLmSd = 1;
            uint32 oamLmSf = 2;
            uint32 sd = 3 [json_name = "sd"];
            uint32 sf = 4 [json_name = "sf"];
         }
         OamLm oam_lm = 12 [json_name = "oam-lm"];
         message Pw {
            string alarmIndicate = 1;
            bool galEnable = 2;
            enum GalMode {
               GalMode_DISABLE = 0;
               GalMode_PTNX_MODE = 1;
               GalMode_ROUTEX_MODE = 2;
               GalMode_X_13 = 3;
               GalMode_X_14 = 4;
            };
            GalMode galMode = 3;
            string hardwareError = 4;
            string hardwareResc = 5;
            enum LmMode {
               LmMode_HUAWEI = 0;
               LmMode_STANDARD = 1;
            };
            LmMode lmMode = 6;
            string localDefectLocation = 7;
            enum LocalDefectStatus {
               LocalDefectStatus_INIT = 0;
               LocalDefectStatus_LOCALDEFECTINVALID = 1;
               LocalDefectStatus_LOCALDEFECTVALID = 2;
               LocalDefectStatus_LOCALINVALID = 3;
               LocalDefectStatus_LOCALVALID = 4;
               LocalDefectStatus_REMOTEDEFECTINVALID = 5;
               LocalDefectStatus_REMOTEDEFECTVALID = 6;
               LocalDefectStatus_REMOTEINVALID = 7;
               LocalDefectStatus_REMOTEVALID = 8;
            };
            LocalDefectStatus localDefectStatus = 8;
            enum LocalDefectType {
               LocalDefectType_DEXCESS = 0;
               LocalDefectType_DLOCV = 1;
               LocalDefectType_DPEERME = 2;
               LocalDefectType_DSERVER = 3;
               LocalDefectType_DTTSI_MISMATCH = 4;
               LocalDefectType_DTTSI_MISMERGE = 5;
               LocalDefectType_DUNEXPMEG = 6;
               LocalDefectType_DUNEXPMEP = 7;
               LocalDefectType_DUNEXPPER = 8;
               LocalDefectType_DUNKNOWN = 9;
            };
            LocalDefectType localDefectType = 9;
            uint32 localInvalidTime = 10;
            enum LocalState {
               LocalState_ERRORX_STATE = 0;
               LocalState_FARX_ENDX_AVAILABLE = 1;
               LocalState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               LocalState_NEARX_ENDX_AVAILABLE = 3;
               LocalState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            LocalState localState = 11;
            enum MeDirection {
               MeDirection_DUAL = 0;
               MeDirection_EGRESS = 1;
               MeDirection_INGRESS = 2;
               MeDirection_NONE = 3;
            };
            MeDirection meDirection = 12;
            uint32 meIndex = 13;
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 14;
            uint32 mepId = 15;
            string peerIp = 16;
            bool rdiEnable = 17;
            string remoteDefectLocation = 18;
            enum RemoteDefectStatus {
               RemoteDefectStatus_INIT = 0;
               RemoteDefectStatus_LOCALDEFECTINVALID = 1;
               RemoteDefectStatus_LOCALDEFECTVALID = 2;
               RemoteDefectStatus_LOCALINVALID = 3;
               RemoteDefectStatus_LOCALVALID = 4;
               RemoteDefectStatus_REMOTEDEFECTINVALID = 5;
               RemoteDefectStatus_REMOTEDEFECTVALID = 6;
               RemoteDefectStatus_REMOTEINVALID = 7;
               RemoteDefectStatus_REMOTEVALID = 8;
            };
            RemoteDefectStatus remoteDefectStatus = 19;
            enum RemoteDefectType {
               RemoteDefectType_DEXCESS = 0;
               RemoteDefectType_DLOCV = 1;
               RemoteDefectType_DPEERME = 2;
               RemoteDefectType_DSERVER = 3;
               RemoteDefectType_DTTSI_MISMATCH = 4;
               RemoteDefectType_DTTSI_MISMERGE = 5;
               RemoteDefectType_DUNEXPMEG = 6;
               RemoteDefectType_DUNEXPMEP = 7;
               RemoteDefectType_DUNEXPPER = 8;
               RemoteDefectType_DUNKNOWN = 9;
            };
            RemoteDefectType remoteDefectType = 20;
            uint32 remoteInvalidTime = 21;
            uint32 remoteMepId = 22;
            string remotePeerIp = 23;
            enum RemoteState {
               RemoteState_ERRORX_STATE = 0;
               RemoteState_FARX_ENDX_AVAILABLE = 1;
               RemoteState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               RemoteState_NEARX_ENDX_AVAILABLE = 3;
               RemoteState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            RemoteState remoteState = 24;
            uint32 remoteVcId = 25;
            enum RemoteVcType {
               RemoteVcType_ATMX_1TO1X_VCC = 0;
               RemoteVcType_ATMX_1TO1X_VPC = 1;
               RemoteVcType_ATMX_AAL5X_PDU = 2;
               RemoteVcType_ATMX_AAL5X_SDU = 3;
               RemoteVcType_ATMX_NTO1X_VCC = 4;
               RemoteVcType_ATMX_NTO1X_VPC = 5;
               RemoteVcType_ATMX_TRANSX_CELL = 6;
               RemoteVcType_CEP = 7;
               RemoteVcType_CESOPSNX_BASIC = 8;
               RemoteVcType_ETHERNET = 9;
               RemoteVcType_FR = 10;
               RemoteVcType_HDLC = 11;
               RemoteVcType_IPX_INTERWORKING = 12;
               RemoteVcType_IPX_LAYER2 = 13;
               RemoteVcType_PPP = 14;
               RemoteVcType_SATOPX_E1 = 15;
               RemoteVcType_SATOPX_E3 = 16;
               RemoteVcType_SATOPX_T1 = 17;
               RemoteVcType_VLAN = 18;
            };
            RemoteVcType remoteVcType = 26;
            enum SlmMode {
               SlmMode_PRIVATE = 0;
               SlmMode_STANDARD = 1;
            };
            SlmMode slmMode = 27;
            string statusBoard = 28;
            uint32 vcId = 29;
            enum VcType {
               VcType_ATMX_1TO1X_VCC = 0;
               VcType_ATMX_1TO1X_VPC = 1;
               VcType_ATMX_AAL5X_PDU = 2;
               VcType_ATMX_AAL5X_SDU = 3;
               VcType_ATMX_NTO1X_VCC = 4;
               VcType_ATMX_NTO1X_VPC = 5;
               VcType_ATMX_TRANSX_CELL = 6;
               VcType_CEP = 7;
               VcType_CESOPSNX_BASIC = 8;
               VcType_ETHERNET = 9;
               VcType_FR = 10;
               VcType_HDLC = 11;
               VcType_IPX_INTERWORKING = 12;
               VcType_IPX_LAYER2 = 13;
               VcType_PPP = 14;
               VcType_SATOPX_E1 = 15;
               VcType_SATOPX_E3 = 16;
               VcType_SATOPX_T1 = 17;
               VcType_VLAN = 18;
            };
            VcType vcType = 30;
            uint32 vllttl = 31;
            message PwVll {
               string l2vpn_name = 1 [json_name = "l2vpn-name"];
               enum L2VpnType {
                  INVALID_ENUM_VALUE_L2VpnType = 0;
                  L2VpnType_VPWSX_LOCALX_CCC = 1;
                  L2VpnType_VPWSX_REMOTEX_CCC = 2;
                  L2VpnType_VPWSX_SVC = 3;
                  L2VpnType_VPWSX_LDP = 4;
                  L2VpnType_VPWSX_SWITCH = 5;
                  L2VpnType_VPLS = 6;
                  L2VpnType_VPWSX_BGP = 8;
                  L2VpnType_VPWSX_SINGLEX_CCC = 9;
               };
               L2VpnType l2vpn_type = 2 [json_name = "l2vpn-type"];
               enum L2VpnRole {
                  INVALID_ENUM_VALUE_L2VpnRole = 0;
                  L2VpnRole_PRIMARY = 1;
                  L2VpnRole_BACKUP = 2;
                  L2VpnRole_BYPASS = 3;
                  L2VpnRole_LEFTX_PRIMARY = 4;
                  L2VpnRole_RIGHTX_PRIMARY = 5;
                  L2VpnRole_RIGHTX_BACKUP = 6;
                  L2VpnRole_ACX_BYPASS = 7;
                  L2VpnRole_PWX_BYPASS = 8;
               };
               L2VpnRole l2vpn_role = 3 [json_name = "l2vpn-role"];
               string remote_peer_ip = 4 [json_name = "remote-peer-ip"];
               uint32 remote_vc_id = 5 [json_name = "remote-vc-id"];
               enum RemoteVcType {
                  INVALID_ENUM_VALUE_RemoteVcType = 0;
                  RemoteVcType_FR = 1;
                  RemoteVcType_ATMX_AAL5X_SDU = 2;
                  RemoteVcType_ATMX_TRANSX_CELL = 3;
                  RemoteVcType_VLAN = 4;
                  RemoteVcType_ETHERNET = 5;
                  RemoteVcType_HDLC = 6;
                  RemoteVcType_PPP = 7;
                  RemoteVcType_CEM = 8;
                  RemoteVcType_ATMX_NTO1X_VCC = 9;
                  RemoteVcType_ATMX_NTO1X_VPC = 10;
                  RemoteVcType_IPX_LAYER2 = 11;
                  RemoteVcType_ATMX_1TO1X_VCC = 12;
                  RemoteVcType_ATMX_1TO1X_VPC = 13;
                  RemoteVcType_ATMX_AAL5X_PDU = 14;
                  RemoteVcType_FRX_PORTX_MODE = 15;
                  RemoteVcType_CEP = 16;
                  RemoteVcType_SATOPX_E1 = 17;
                  RemoteVcType_SATOPX_T1 = 18;
                  RemoteVcType_SATOPX_E3 = 19;
                  RemoteVcType_SATOPX_T3 = 20;
                  RemoteVcType_CESOPSNX_BASIC = 21;
                  RemoteVcType_TDMOIPX_AAL1 = 22;
                  RemoteVcType_CESOPSNX_TDM = 23;
                  RemoteVcType_TDMOIPX_AAL2 = 24;
                  RemoteVcType_FRX_DLCI = 25;
                  RemoteVcType_IPX_INTERWORKING = 64;
                  RemoteVcType_UNSUPPORT = 255;
               };
               RemoteVcType remote_vc_type = 6 [json_name = "remote-vc-type"];
               uint32 mep_id = 7 [json_name = "mep-id"];
               uint32 remote_mep_id = 8 [json_name = "remote-mep-id"];
               uint32 ttl = 9 [json_name = "ttl"];
               enum GalMode {
                  INVALID_ENUM_VALUE_GalMode = 0;
                  GalMode_LABELX_13 = 1;
                  GalMode_LABELX_14 = 2;
                  GalMode_DISABLE = 3;
                  GalMode_ROUTEX_MODE = 4;
                  GalMode_PTNX_MODE = 5;
               };
               GalMode gal_mode = 10 [json_name = "gal-mode"];
               enum LmMode {
                  LmMode_STANDARD = 0;
                  LmMode_PRIVATE = 1;
               };
               LmMode lm_mode = 11 [json_name = "lm-mode"];
               bool rdi_enable = 12 [json_name = "rdi-enable"];
               enum SlmMode {
                  SlmMode_STANDARD = 0;
                  SlmMode_PRIVATE = 1;
               };
               SlmMode slm_mode = 13 [json_name = "slm-mode"];
               uint32 me_index = 14 [json_name = "me-index"];
               enum MeDirection {
                  MeDirection_NONE = 0;
                  MeDirection_INGRESS = 1;
                  MeDirection_EGRESS = 2;
                  MeDirection_DUAL = 3;
               };
               MeDirection me_direction = 15 [json_name = "me-direction"];
               string select_board_slot = 16 [json_name = "select-board-slot"];
               enum MeStatus {
                  MeStatus_INIT = 0;
                  MeStatus_UP = 1;
                  MeStatus_DOWN = 2;
               };
               MeStatus me_status = 17 [json_name = "me-status"];
               enum LocalStatus {
                  LocalStatus_NEARX_ENDX_AVAILABLE = 0;
                  LocalStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
                  LocalStatus_FARX_ENDX_AVAILABLE = 2;
                  LocalStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
                  LocalStatus_ERRORX_STATE = 4;
               };
               LocalStatus local_status = 18 [json_name = "local-status"];
               enum RemoteStatus {
                  RemoteStatus_NEARX_ENDX_AVAILABLE = 0;
                  RemoteStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
                  RemoteStatus_FARX_ENDX_AVAILABLE = 2;
                  RemoteStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
                  RemoteStatus_ERRORX_STATE = 4;
               };
               RemoteStatus remote_status = 19 [json_name = "remote-status"];
               string alarm_indicate = 20 [json_name = "alarm-indicate"];
               string hardware_resource = 21 [json_name = "hardware-resource"];
               string hardware_error = 22 [json_name = "hardware-error"];
               bool gal_enable = 23 [json_name = "gal-enable"];
               enum LocalDefectStatus {
                  LocalDefectStatus_INIT = 0;
                  LocalDefectStatus_LOCALX_VALID = 1;
                  LocalDefectStatus_LOCALX_DEFECTX_VALID = 2;
                  LocalDefectStatus_LOCALX_DEFECTX_INVALID = 3;
                  LocalDefectStatus_LOCALX_INVALID = 4;
                  LocalDefectStatus_REMOTEX_VALID = 5;
                  LocalDefectStatus_REMOTEX_DEFECTX_VALID = 6;
                  LocalDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
                  LocalDefectStatus_REMOTEX_INVALID = 8;
               };
               LocalDefectStatus local_defect_status = 24 [json_name = "local-defect-status"];
               uint32 local_invalid_time = 25 [json_name = "local-invalid-time"];
               string local_defect_location = 26 [json_name = "local-defect-location"];
               enum LocalDefectType {
                  INVALID_ENUM_VALUE_LocalDefectType = 0;
                  LocalDefectType_SERVER = 1;
                  LocalDefectType_PEERX_ME = 2;
                  LocalDefectType_LOCV = 3;
                  LocalDefectType_TTSIX_MISMATCH = 4;
                  LocalDefectType_TTSIX_MISMERGE = 5;
                  LocalDefectType_EXCESS = 6;
                  LocalDefectType_UNKNOWN = 7;
                  LocalDefectType_UNX_EXPX_MEG = 8;
                  LocalDefectType_UNX_EXPX_PER = 9;
                  LocalDefectType_UNX_EXPX_MEP = 10;
               };
               LocalDefectType local_defect_type = 27 [json_name = "local-defect-type"];
               enum RemoteDefectStatus {
                  RemoteDefectStatus_INIT = 0;
                  RemoteDefectStatus_LOCALX_VALID = 1;
                  RemoteDefectStatus_LOCALX_DEFECTX_VALID = 2;
                  RemoteDefectStatus_LOCALX_DEFECTX_INVALID = 3;
                  RemoteDefectStatus_LOCALX_INVALID = 4;
                  RemoteDefectStatus_REMOTEX_VALID = 5;
                  RemoteDefectStatus_REMOTEX_DEFECTX_VALID = 6;
                  RemoteDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
                  RemoteDefectStatus_REMOTEX_INVALID = 8;
               };
               RemoteDefectStatus remote_defect_status = 28 [json_name = "remote-defect-status"];
               uint32 remote_invalid_time = 29 [json_name = "remote-invalid-time"];
               string remote_defect_location = 30 [json_name = "remote-defect-location"];
               enum RemoteDefectType {
                  INVALID_ENUM_VALUE_RemoteDefectType = 0;
                  RemoteDefectType_SERVER = 1;
                  RemoteDefectType_PEERX_ME = 2;
                  RemoteDefectType_LOCV = 3;
                  RemoteDefectType_TTSIX_MISMATCH = 4;
                  RemoteDefectType_TTSIX_MISMERGE = 5;
                  RemoteDefectType_EXCESS = 6;
                  RemoteDefectType_UNKNOWN = 7;
                  RemoteDefectType_UNX_EXPX_MEG = 8;
                  RemoteDefectType_UNX_EXPX_PER = 9;
                  RemoteDefectType_UNX_EXPX_MEP = 10;
               };
               RemoteDefectType remote_defect_type = 31 [json_name = "remote-defect-type"];
            }
            PwVll pw_vll = 32 [json_name = "pw-vll"];
            message PwVpls {
               string vpls_peer_ip = 1 [json_name = "vpls-peer-ip"];
               uint32 vpls_vc_id = 2 [json_name = "vpls-vc-id"];
               enum VplsVcType {
                  INVALID_ENUM_VALUE_VplsVcType = 0;
                  VplsVcType_VLAN = 4;
                  VplsVcType_ETHERNET = 5;
                  VplsVcType_UNSUPPORT = 255;
               };
               VplsVcType vpls_vc_type = 3 [json_name = "vpls-vc-type"];
               string remote_peer_ip = 4 [json_name = "remote-peer-ip"];
               uint32 remote_vc_id = 5 [json_name = "remote-vc-id"];
               enum RemoteVcType {
                  INVALID_ENUM_VALUE_RemoteVcType = 0;
                  RemoteVcType_FR = 1;
                  RemoteVcType_ATMX_AAL5X_SDU = 2;
                  RemoteVcType_ATMX_TRANSX_CELL = 3;
                  RemoteVcType_VLAN = 4;
                  RemoteVcType_ETHERNET = 5;
                  RemoteVcType_HDLC = 6;
                  RemoteVcType_PPP = 7;
                  RemoteVcType_CEM = 8;
                  RemoteVcType_ATMX_NTO1X_VCC = 9;
                  RemoteVcType_ATMX_NTO1X_VPC = 10;
                  RemoteVcType_IPX_LAYER2 = 11;
                  RemoteVcType_ATMX_1TO1X_VCC = 12;
                  RemoteVcType_ATMX_1TO1X_VPC = 13;
                  RemoteVcType_ATMX_AAL5X_PDU = 14;
                  RemoteVcType_FRX_PORTX_MODE = 15;
                  RemoteVcType_CEP = 16;
                  RemoteVcType_SATOPX_E1 = 17;
                  RemoteVcType_SATOPX_T1 = 18;
                  RemoteVcType_SATOPX_E3 = 19;
                  RemoteVcType_SATOPX_T3 = 20;
                  RemoteVcType_CESOPSNX_BASIC = 21;
                  RemoteVcType_TDMOIPX_AAL1 = 22;
                  RemoteVcType_CESOPSNX_TDM = 23;
                  RemoteVcType_TDMOIPX_AAL2 = 24;
                  RemoteVcType_FRX_DLCI = 25;
                  RemoteVcType_IPX_INTERWORKING = 64;
                  RemoteVcType_UNSUPPORT = 255;
               };
               RemoteVcType remote_vc_type = 6 [json_name = "remote-vc-type"];
               uint32 mep_id = 7 [json_name = "mep-id"];
               uint32 remote_mep_id = 8 [json_name = "remote-mep-id"];
               uint32 ttl = 9 [json_name = "ttl"];
               enum GalMode {
                  INVALID_ENUM_VALUE_GalMode = 0;
                  GalMode_LABELX_13 = 1;
                  GalMode_LABELX_14 = 2;
                  GalMode_DISABLE = 3;
                  GalMode_ROUTEX_MODE = 4;
                  GalMode_PTNX_MODE = 5;
               };
               GalMode gal_mode = 10 [json_name = "gal-mode"];
               enum LmMode {
                  LmMode_STANDARD = 0;
                  LmMode_PRIVATE = 1;
               };
               LmMode lm_mode = 11 [json_name = "lm-mode"];
               bool rdi_enable = 12 [json_name = "rdi-enable"];
               enum SlmMode {
                  SlmMode_STANDARD = 0;
                  SlmMode_PRIVATE = 1;
               };
               SlmMode slm_mode = 13 [json_name = "slm-mode"];
               uint32 me_index = 14 [json_name = "me-index"];
               enum MeDirection {
                  MeDirection_NONE = 0;
                  MeDirection_INGRESS = 1;
                  MeDirection_EGRESS = 2;
                  MeDirection_DUAL = 3;
               };
               MeDirection me_direction = 15 [json_name = "me-direction"];
               string select_board_slot = 16 [json_name = "select-board-slot"];
               enum MeStatus {
                  MeStatus_INIT = 0;
                  MeStatus_UP = 1;
                  MeStatus_DOWN = 2;
               };
               MeStatus me_status = 17 [json_name = "me-status"];
               enum LocalStatus {
                  LocalStatus_NEARX_ENDX_AVAILABLE = 0;
                  LocalStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
                  LocalStatus_FARX_ENDX_AVAILABLE = 2;
                  LocalStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
                  LocalStatus_ERRORX_STATE = 4;
               };
               LocalStatus local_status = 18 [json_name = "local-status"];
               enum RemoteStatus {
                  RemoteStatus_NEARX_ENDX_AVAILABLE = 0;
                  RemoteStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
                  RemoteStatus_FARX_ENDX_AVAILABLE = 2;
                  RemoteStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
                  RemoteStatus_ERRORX_STATE = 4;
               };
               RemoteStatus remote_status = 19 [json_name = "remote-status"];
               string alarm_indicate = 20 [json_name = "alarm-indicate"];
               string hardware_resource = 21 [json_name = "hardware-resource"];
               string hardware_error = 22 [json_name = "hardware-error"];
               bool gal_enable = 23 [json_name = "gal-enable"];
               enum LocalDefectStatus {
                  LocalDefectStatus_INIT = 0;
                  LocalDefectStatus_LOCALX_VALID = 1;
                  LocalDefectStatus_LOCALX_DEFECTX_VALID = 2;
                  LocalDefectStatus_LOCALX_DEFECTX_INVALID = 3;
                  LocalDefectStatus_LOCALX_INVALID = 4;
                  LocalDefectStatus_REMOTEX_VALID = 5;
                  LocalDefectStatus_REMOTEX_DEFECTX_VALID = 6;
                  LocalDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
                  LocalDefectStatus_REMOTEX_INVALID = 8;
               };
               LocalDefectStatus local_defect_status = 24 [json_name = "local-defect-status"];
               uint32 local_invalid_time = 25 [json_name = "local-invalid-time"];
               string local_defect_location = 26 [json_name = "local-defect-location"];
               enum LocalDefectType {
                  INVALID_ENUM_VALUE_LocalDefectType = 0;
                  LocalDefectType_SERVER = 1;
                  LocalDefectType_PEERX_ME = 2;
                  LocalDefectType_LOCV = 3;
                  LocalDefectType_TTSIX_MISMATCH = 4;
                  LocalDefectType_TTSIX_MISMERGE = 5;
                  LocalDefectType_EXCESS = 6;
                  LocalDefectType_UNKNOWN = 7;
                  LocalDefectType_UNX_EXPX_MEG = 8;
                  LocalDefectType_UNX_EXPX_PER = 9;
                  LocalDefectType_UNX_EXPX_MEP = 10;
               };
               LocalDefectType local_defect_type = 27 [json_name = "local-defect-type"];
               enum RemoteDefectStatus {
                  RemoteDefectStatus_INIT = 0;
                  RemoteDefectStatus_LOCALX_VALID = 1;
                  RemoteDefectStatus_LOCALX_DEFECTX_VALID = 2;
                  RemoteDefectStatus_LOCALX_DEFECTX_INVALID = 3;
                  RemoteDefectStatus_LOCALX_INVALID = 4;
                  RemoteDefectStatus_REMOTEX_VALID = 5;
                  RemoteDefectStatus_REMOTEX_DEFECTX_VALID = 6;
                  RemoteDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
                  RemoteDefectStatus_REMOTEX_INVALID = 8;
               };
               RemoteDefectStatus remote_defect_status = 28 [json_name = "remote-defect-status"];
               uint32 remote_invalid_time = 29 [json_name = "remote-invalid-time"];
               string remote_defect_location = 30 [json_name = "remote-defect-location"];
               enum RemoteDefectType {
                  INVALID_ENUM_VALUE_RemoteDefectType = 0;
                  RemoteDefectType_SERVER = 1;
                  RemoteDefectType_PEERX_ME = 2;
                  RemoteDefectType_LOCV = 3;
                  RemoteDefectType_TTSIX_MISMATCH = 4;
                  RemoteDefectType_TTSIX_MISMERGE = 5;
                  RemoteDefectType_EXCESS = 6;
                  RemoteDefectType_UNKNOWN = 7;
                  RemoteDefectType_UNX_EXPX_MEG = 8;
                  RemoteDefectType_UNX_EXPX_PER = 9;
                  RemoteDefectType_UNX_EXPX_MEP = 10;
               };
               RemoteDefectType remote_defect_type = 31 [json_name = "remote-defect-type"];
            }
            PwVpls pw_vpls = 33 [json_name = "pw-vpls"];
         }
         Pw pw = 13 [json_name = "pw"];
         message Ring {
            string alarmIndicate = 1;
            string hardwareError = 2;
            string hardwareResc = 3;
            string localDefectLocation = 4;
            enum LocalDefectStatus {
               LocalDefectStatus_INIT = 0;
               LocalDefectStatus_LOCALDEFECTINVALID = 1;
               LocalDefectStatus_LOCALDEFECTVALID = 2;
               LocalDefectStatus_LOCALINVALID = 3;
               LocalDefectStatus_LOCALVALID = 4;
               LocalDefectStatus_REMOTEDEFECTINVALID = 5;
               LocalDefectStatus_REMOTEDEFECTVALID = 6;
               LocalDefectStatus_REMOTEINVALID = 7;
               LocalDefectStatus_REMOTEVALID = 8;
            };
            LocalDefectStatus localDefectStatus = 5;
            enum LocalDefectType {
               LocalDefectType_DEXCESS = 0;
               LocalDefectType_DLOCV = 1;
               LocalDefectType_DPEERME = 2;
               LocalDefectType_DSERVER = 3;
               LocalDefectType_DTTSI_MISMATCH = 4;
               LocalDefectType_DTTSI_MISMERGE = 5;
               LocalDefectType_DUNEXPMEG = 6;
               LocalDefectType_DUNEXPMEP = 7;
               LocalDefectType_DUNEXPPER = 8;
               LocalDefectType_DUNKNOWN = 9;
            };
            LocalDefectType localDefectType = 6;
            uint32 localInvalidTime = 7;
            enum LocalState {
               LocalState_ERRORX_STATE = 0;
               LocalState_FARX_ENDX_AVAILABLE = 1;
               LocalState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               LocalState_NEARX_ENDX_AVAILABLE = 3;
               LocalState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            LocalState localState = 8;
            enum MeDirection {
               MeDirection_DUAL = 0;
               MeDirection_EGRESS = 1;
               MeDirection_INGRESS = 2;
               MeDirection_NONE = 3;
            };
            MeDirection meDirection = 9;
            uint32 meIndex = 10;
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 11;
            bool rdiEnable = 12;
            string remoteDefectLocation = 13;
            enum RemoteDefectStatus {
               RemoteDefectStatus_INIT = 0;
               RemoteDefectStatus_LOCALDEFECTINVALID = 1;
               RemoteDefectStatus_LOCALDEFECTVALID = 2;
               RemoteDefectStatus_LOCALINVALID = 3;
               RemoteDefectStatus_LOCALVALID = 4;
               RemoteDefectStatus_REMOTEDEFECTINVALID = 5;
               RemoteDefectStatus_REMOTEDEFECTVALID = 6;
               RemoteDefectStatus_REMOTEINVALID = 7;
               RemoteDefectStatus_REMOTEVALID = 8;
            };
            RemoteDefectStatus remoteDefectStatus = 14;
            enum RemoteDefectType {
               RemoteDefectType_DEXCESS = 0;
               RemoteDefectType_DLOCV = 1;
               RemoteDefectType_DPEERME = 2;
               RemoteDefectType_DSERVER = 3;
               RemoteDefectType_DTTSI_MISMATCH = 4;
               RemoteDefectType_DTTSI_MISMERGE = 5;
               RemoteDefectType_DUNEXPMEG = 6;
               RemoteDefectType_DUNEXPMEP = 7;
               RemoteDefectType_DUNEXPPER = 8;
               RemoteDefectType_DUNKNOWN = 9;
            };
            RemoteDefectType remoteDefectType = 15;
            uint32 remoteInvalidTime = 16;
            enum RemoteState {
               RemoteState_ERRORX_STATE = 0;
               RemoteState_FARX_ENDX_AVAILABLE = 1;
               RemoteState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               RemoteState_NEARX_ENDX_AVAILABLE = 3;
               RemoteState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            RemoteState remoteState = 17;
            enum RingDirection {
               RingDirection_EAST = 0;
               RingDirection_WEST = 1;
            };
            RingDirection ringDirection = 18;
            uint32 ringId = 19;
            string statusBoard = 20;
         }
         Ring ring = 14;
         message Section {
            string alarm_indicate = 1 [json_name = "alarm-indicate"];
            string hardware_error = 2 [json_name = "hardware-error"];
            string hardwareResc = 3;
            string if_name = 4 [json_name = "if-name"];
            enum LmMode {
               LmMode_STANDARD = 0;
               LmMode_PRIVATE = 1;
            };
            LmMode lm_mode = 5 [json_name = "lm-mode"];
            string local_defect_location = 6 [json_name = "local-defect-location"];
            enum LocalDefectStatus {
               LocalDefectStatus_INIT = 0;
               LocalDefectStatus_LOCALX_VALID = 1;
               LocalDefectStatus_LOCALX_DEFECTX_VALID = 2;
               LocalDefectStatus_LOCALX_DEFECTX_INVALID = 3;
               LocalDefectStatus_LOCALX_INVALID = 4;
               LocalDefectStatus_REMOTEX_VALID = 5;
               LocalDefectStatus_REMOTEX_DEFECTX_VALID = 6;
               LocalDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
               LocalDefectStatus_REMOTEX_INVALID = 8;
            };
            LocalDefectStatus local_defect_status = 7 [json_name = "local-defect-status"];
            enum LocalDefectType {
               INVALID_ENUM_VALUE_LocalDefectType = 0;
               LocalDefectType_SERVER = 1;
               LocalDefectType_PEERX_ME = 2;
               LocalDefectType_LOCV = 3;
               LocalDefectType_TTSIX_MISMATCH = 4;
               LocalDefectType_TTSIX_MISMERGE = 5;
               LocalDefectType_EXCESS = 6;
               LocalDefectType_UNKNOWN = 7;
               LocalDefectType_UNX_EXPX_MEG = 8;
               LocalDefectType_UNX_EXPX_PER = 9;
               LocalDefectType_UNX_EXPX_MEP = 10;
            };
            LocalDefectType local_defect_type = 8 [json_name = "local-defect-type"];
            uint32 local_invalid_time = 9 [json_name = "local-invalid-time"];
            enum LocalState {
               LocalState_ERRORX_STATE = 0;
               LocalState_FARX_ENDX_AVAILABLE = 1;
               LocalState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               LocalState_NEARX_ENDX_AVAILABLE = 3;
               LocalState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            LocalState localState = 10;
            enum MeDirection {
               MeDirection_NONE = 0;
               MeDirection_INGRESS = 1;
               MeDirection_EGRESS = 2;
               MeDirection_DUAL = 3;
            };
            MeDirection me_direction = 11 [json_name = "me-direction"];
            uint32 me_index = 12 [json_name = "me-index"];
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 13;
            uint32 mep_id = 14 [json_name = "mep-id"];
            string peer_ip = 15 [json_name = "peer-ip"];
            string peer_lsr_id = 16 [json_name = "peer-lsr-id"];
            bool rdi_enable = 17 [json_name = "rdi-enable"];
            string remote_defect_location = 18 [json_name = "remote-defect-location"];
            enum RemoteDefectStatus {
               RemoteDefectStatus_INIT = 0;
               RemoteDefectStatus_LOCALX_VALID = 1;
               RemoteDefectStatus_LOCALX_DEFECTX_VALID = 2;
               RemoteDefectStatus_LOCALX_DEFECTX_INVALID = 3;
               RemoteDefectStatus_LOCALX_INVALID = 4;
               RemoteDefectStatus_REMOTEX_VALID = 5;
               RemoteDefectStatus_REMOTEX_DEFECTX_VALID = 6;
               RemoteDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
               RemoteDefectStatus_REMOTEX_INVALID = 8;
            };
            RemoteDefectStatus remote_defect_status = 19 [json_name = "remote-defect-status"];
            enum RemoteDefectType {
               INVALID_ENUM_VALUE_RemoteDefectType = 0;
               RemoteDefectType_SERVER = 1;
               RemoteDefectType_PEERX_ME = 2;
               RemoteDefectType_LOCV = 3;
               RemoteDefectType_TTSIX_MISMATCH = 4;
               RemoteDefectType_TTSIX_MISMERGE = 5;
               RemoteDefectType_EXCESS = 6;
               RemoteDefectType_UNKNOWN = 7;
               RemoteDefectType_UNX_EXPX_MEG = 8;
               RemoteDefectType_UNX_EXPX_PER = 9;
               RemoteDefectType_UNX_EXPX_MEP = 10;
            };
            RemoteDefectType remote_defect_type = 20 [json_name = "remote-defect-type"];
            uint32 remote_invalid_time = 21 [json_name = "remote-invalid-time"];
            uint32 remote_mep_id = 22 [json_name = "remote-mep-id"];
            enum RemoteState {
               RemoteState_ERRORX_STATE = 0;
               RemoteState_FARX_ENDX_AVAILABLE = 1;
               RemoteState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               RemoteState_NEARX_ENDX_AVAILABLE = 3;
               RemoteState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            RemoteState remoteState = 23;
            uint32 sectionId = 24;
            string statusBoard = 25;
            uint32 id = 26 [json_name = "id"];
            string select_board_slot = 27 [json_name = "select-board-slot"];
            enum MeStatus {
               MeStatus_INIT = 0;
               MeStatus_UP = 1;
               MeStatus_DOWN = 2;
            };
            MeStatus me_status = 28 [json_name = "me-status"];
            enum LocalStatus {
               LocalStatus_NEARX_ENDX_AVAILABLE = 0;
               LocalStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
               LocalStatus_FARX_ENDX_AVAILABLE = 2;
               LocalStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
               LocalStatus_ERRORX_STATE = 4;
            };
            LocalStatus local_status = 29 [json_name = "local-status"];
            enum RemoteStatus {
               RemoteStatus_NEARX_ENDX_AVAILABLE = 0;
               RemoteStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
               RemoteStatus_FARX_ENDX_AVAILABLE = 2;
               RemoteStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
               RemoteStatus_ERRORX_STATE = 4;
            };
            RemoteStatus remote_status = 30 [json_name = "remote-status"];
            string hardware_resource = 31 [json_name = "hardware-resource"];
         }
         Section section = 15 [json_name = "section"];
         message Te {
            string alarmEgress = 1;
            string alarmIndicate = 2;
            enum GalMode {
               GalMode_PTNX_MODE = 0;
               GalMode_ROUTEX_MODE = 1;
            };
            GalMode galMode = 3;
            enum HardwareErrEgress {
               HardwareErrEgress_BOARDNOTREADY = 0;
               HardwareErrEgress_INTERFACENOTSUPPORT = 1;
               HardwareErrEgress_IOBOARDNOTSUPPORT = 2;
               HardwareErrEgress_MEDOWN = 3;
               HardwareErrEgress_MEREACHUPLIMIT = 4;
               HardwareErrEgress_PROCESSERROR = 5;
               HardwareErrEgress_SERVICETYPENOTSUPPORT = 6;
               HardwareErrEgress_UNKNOWERROR = 7;
            };
            HardwareErrEgress hardwareErrEgress = 4;
            string hardwareError = 5;
            string hardwareResc = 6;
            enum HardwareRescEgress {
               HardwareRescEgress_RESOURCENOTENOUGH = 0;
            };
            HardwareRescEgress hardwareRescEgress = 7;
            string ingressLsrId = 8;
            enum LmMode {
               LmMode_HUAWEI = 0;
               LmMode_STANDARD = 1;
            };
            LmMode lmMode = 9;
            string localDefectLocation = 10;
            enum LocalDefectStatus {
               LocalDefectStatus_INIT = 0;
               LocalDefectStatus_LOCALDEFECTINVALID = 1;
               LocalDefectStatus_LOCALDEFECTVALID = 2;
               LocalDefectStatus_LOCALINVALID = 3;
               LocalDefectStatus_LOCALVALID = 4;
               LocalDefectStatus_REMOTEDEFECTINVALID = 5;
               LocalDefectStatus_REMOTEDEFECTVALID = 6;
               LocalDefectStatus_REMOTEINVALID = 7;
               LocalDefectStatus_REMOTEVALID = 8;
            };
            LocalDefectStatus localDefectStatus = 11;
            enum LocalDefectType {
               LocalDefectType_DEXCESS = 0;
               LocalDefectType_DLOCV = 1;
               LocalDefectType_DPEERME = 2;
               LocalDefectType_DSERVER = 3;
               LocalDefectType_DTTSI_MISMATCH = 4;
               LocalDefectType_DTTSI_MISMERGE = 5;
               LocalDefectType_DUNEXPMEG = 6;
               LocalDefectType_DUNEXPMEP = 7;
               LocalDefectType_DUNEXPPER = 8;
               LocalDefectType_DUNKNOWN = 9;
            };
            LocalDefectType localDefectType = 12;
            uint32 localInvalidTime = 13;
            enum LocalState {
               LocalState_ERRORX_STATE = 0;
               LocalState_FARX_ENDX_AVAILABLE = 1;
               LocalState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               LocalState_NEARX_ENDX_AVAILABLE = 3;
               LocalState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            LocalState localState = 14;
            enum MeDirectEgress {
               MeDirectEgress_DUAL = 0;
               MeDirectEgress_EGRESS = 1;
               MeDirectEgress_INGRESS = 2;
               MeDirectEgress_NONE = 3;
            };
            MeDirectEgress meDirectEgress = 15;
            enum MeDirection {
               MeDirection_DUAL = 0;
               MeDirection_EGRESS = 1;
               MeDirection_INGRESS = 2;
               MeDirection_NONE = 3;
            };
            MeDirection meDirection = 16;
            uint32 meIndex = 17;
            uint32 meIndexEgress = 18;
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 19;
            uint32 mepId = 20;
            bool rdiEnable = 21;
            string remoteDefectLocation = 22;
            enum RemoteDefectStatus {
               RemoteDefectStatus_INIT = 0;
               RemoteDefectStatus_LOCALDEFECTINVALID = 1;
               RemoteDefectStatus_LOCALDEFECTVALID = 2;
               RemoteDefectStatus_LOCALINVALID = 3;
               RemoteDefectStatus_LOCALVALID = 4;
               RemoteDefectStatus_REMOTEDEFECTINVALID = 5;
               RemoteDefectStatus_REMOTEDEFECTVALID = 6;
               RemoteDefectStatus_REMOTEINVALID = 7;
               RemoteDefectStatus_REMOTEVALID = 8;
            };
            RemoteDefectStatus remoteDefectStatus = 23;
            enum RemoteDefectType {
               RemoteDefectType_DEXCESS = 0;
               RemoteDefectType_DLOCV = 1;
               RemoteDefectType_DPEERME = 2;
               RemoteDefectType_DSERVER = 3;
               RemoteDefectType_DTTSI_MISMATCH = 4;
               RemoteDefectType_DTTSI_MISMERGE = 5;
               RemoteDefectType_DUNEXPMEG = 6;
               RemoteDefectType_DUNEXPMEP = 7;
               RemoteDefectType_DUNEXPPER = 8;
               RemoteDefectType_DUNKNOWN = 9;
            };
            RemoteDefectType remoteDefectType = 24;
            uint32 remoteInvalidTime = 25;
            uint32 remoteMepId = 26;
            enum RemoteState {
               RemoteState_ERRORX_STATE = 0;
               RemoteState_FARX_ENDX_AVAILABLE = 1;
               RemoteState_FARX_ENDX_DEFECTX_UNAVAILABLE = 2;
               RemoteState_NEARX_ENDX_AVAILABLE = 3;
               RemoteState_NEARX_ENDX_DEFECTX_UNAVAILABLE = 4;
            };
            RemoteState remoteState = 27;
            string reverseIngrLsrId = 28;
            uint32 reverseTunnelId = 29;
            string reverseTunnelName = 30;
            enum SlmMode {
               SlmMode_PRIVATE = 0;
               SlmMode_STANDARD = 1;
            };
            SlmMode slmMode = 31;
            enum StateEgress {
               StateEgress_DOWN = 0;
               StateEgress_INIT = 1;
               StateEgress_UP = 2;
            };
            StateEgress stateEgress = 32;
            string statusBoard = 33;
            string statusBoardEgress = 34;
            string tunnelDescription = 35;
            enum TunnelDirection {
               TunnelDirection_BIDIRECTIONAL = 0;
               TunnelDirection_UNIDRECTIONAL = 1;
            };
            TunnelDirection tunnelDirection = 36;
            uint32 tunnelId = 37;
            string tunnelName = 38;
            enum TunnelType {
               TunnelType_BIDIRECTIONAL = 0;
               TunnelType_EGRESS = 1;
               TunnelType_INGRESS = 2;
            };
            TunnelType tunnelType = 39;
         }
         Te te = 16;
         message TeMip {
            string lsp_name = 1 [json_name = "lsp-name"];
            enum MeDirection {
               MeDirection_NONE = 0;
               MeDirection_INGRESS = 1;
               MeDirection_EGRESS = 2;
               MeDirection_DUAL = 3;
            };
            MeDirection me_direction = 2 [json_name = "me-direction"];
            uint32 me_index = 3 [json_name = "me-index"];
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 4;
            uint32 mip_id = 5 [json_name = "mip-id"];
            string statusBoard = 6;
            string select_board_slot = 7 [json_name = "select-board-slot"];
            enum MeStatus {
               MeStatus_INIT = 0;
               MeStatus_UP = 1;
               MeStatus_DOWN = 2;
            };
            MeStatus me_status = 8 [json_name = "me-status"];
         }
         TeMip te_mip = 17 [json_name = "te-mip"];
         message VllMip {
            string instanceName = 1;
            enum MeDirection {
               MeDirection_NONE = 0;
               MeDirection_INGRESS = 1;
               MeDirection_EGRESS = 2;
               MeDirection_DUAL = 3;
            };
            MeDirection me_direction = 2 [json_name = "me-direction"];
            uint32 me_index = 3 [json_name = "me-index"];
            enum MeState {
               MeState_DOWN = 0;
               MeState_INIT = 1;
               MeState_UP = 2;
            };
            MeState meState = 4;
            uint32 mip_id = 5 [json_name = "mip-id"];
            string peerIp = 6;
            string statusBoard = 7;
            string switchPeerIp = 8;
            uint32 switchVcId = 9;
            uint32 vcId = 10;
            enum VcType {
               VcType_ATMX_1TO1X_VCC = 0;
               VcType_ATMX_1TO1X_VPC = 1;
               VcType_ATMX_AAL5X_PDU = 2;
               VcType_ATMX_AAL5X_SDU = 3;
               VcType_ATMX_NTO1X_VCC = 4;
               VcType_ATMX_NTO1X_VPC = 5;
               VcType_ATMX_TRANSX_CELL = 6;
               VcType_CEP = 7;
               VcType_CESOPSNX_BASIC = 8;
               VcType_ETHERNET = 9;
               VcType_FR = 10;
               VcType_HDLC = 11;
               VcType_IPX_INTERWORKING = 12;
               VcType_IPX_LAYER2 = 13;
               VcType_PPP = 14;
               VcType_SATOPX_E1 = 15;
               VcType_SATOPX_E3 = 16;
               VcType_SATOPX_T1 = 17;
               VcType_VLAN = 18;
            };
            VcType vcType = 11;
            string l2vpn_name = 12 [json_name = "l2vpn-name"];
            string select_board_slot = 13 [json_name = "select-board-slot"];
            enum MeStatus {
               MeStatus_INIT = 0;
               MeStatus_UP = 1;
               MeStatus_DOWN = 2;
            };
            MeStatus me_status = 14 [json_name = "me-status"];
         }
         VllMip vll_mip = 18 [json_name = "vll-mip"];
         string name = 19 [json_name = "name"];
         string id = 20 [json_name = "id"];
         message CoRouteTunnel {
            string tunnel_name = 1 [json_name = "tunnel-name"];
            uint32 mep_id = 2 [json_name = "mep-id"];
            uint32 remote_mep_id = 3 [json_name = "remote-mep-id"];
            enum LmMode {
               LmMode_STANDARD = 0;
               LmMode_PRIVATE = 1;
            };
            LmMode lm_mode = 4 [json_name = "lm-mode"];
            bool rdi_enable = 5 [json_name = "rdi-enable"];
            enum SlmMode {
               SlmMode_STANDARD = 0;
               SlmMode_PRIVATE = 1;
            };
            SlmMode slm_mode = 6 [json_name = "slm-mode"];
            string tunnel_description = 7 [json_name = "tunnel-description"];
            enum TunnelType {
               TunnelType_INGRESS = 0;
               TunnelType_EGRESS = 1;
               TunnelType_BIDIRECTIONAL = 2;
            };
            TunnelType tunnel_type = 8 [json_name = "tunnel-type"];
            enum TunnelDirection {
               TunnelDirection_UNDIRECTIONAL = 0;
               TunnelDirection_BIDIRECTIONAL = 1;
            };
            TunnelDirection tunnel_direction = 9 [json_name = "tunnel-direction"];
            uint32 me_index = 10 [json_name = "me-index"];
            enum MeDirection {
               MeDirection_NONE = 0;
               MeDirection_INGRESS = 1;
               MeDirection_EGRESS = 2;
               MeDirection_DUAL = 3;
            };
            MeDirection me_direction = 11 [json_name = "me-direction"];
            string select_board_slot = 12 [json_name = "select-board-slot"];
            enum MeStatus {
               MeStatus_INIT = 0;
               MeStatus_UP = 1;
               MeStatus_DOWN = 2;
            };
            MeStatus me_status = 13 [json_name = "me-status"];
            enum LocalStatus {
               LocalStatus_NEARX_ENDX_AVAILABLE = 0;
               LocalStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
               LocalStatus_FARX_ENDX_AVAILABLE = 2;
               LocalStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
               LocalStatus_ERRORX_STATE = 4;
            };
            LocalStatus local_status = 14 [json_name = "local-status"];
            enum RemoteStatus {
               RemoteStatus_NEARX_ENDX_AVAILABLE = 0;
               RemoteStatus_NEARX_ENDX_DEFECTX_UNAVAILABLE = 1;
               RemoteStatus_FARX_ENDX_AVAILABLE = 2;
               RemoteStatus_FARX_ENDX_DEFECTX_UNAVAILABLE = 3;
               RemoteStatus_ERRORX_STATE = 4;
            };
            RemoteStatus remote_status = 15 [json_name = "remote-status"];
            string alarm_indicate = 16 [json_name = "alarm-indicate"];
            string hardware_resource = 17 [json_name = "hardware-resource"];
            string hardware_error = 18 [json_name = "hardware-error"];
            enum LocalDefectStatus {
               LocalDefectStatus_INIT = 0;
               LocalDefectStatus_LOCALX_VALID = 1;
               LocalDefectStatus_LOCALX_DEFECTX_VALID = 2;
               LocalDefectStatus_LOCALX_DEFECTX_INVALID = 3;
               LocalDefectStatus_LOCALX_INVALID = 4;
               LocalDefectStatus_REMOTEX_VALID = 5;
               LocalDefectStatus_REMOTEX_DEFECTX_VALID = 6;
               LocalDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
               LocalDefectStatus_REMOTEX_INVALID = 8;
            };
            LocalDefectStatus local_defect_status = 19 [json_name = "local-defect-status"];
            uint32 local_invalid_time = 20 [json_name = "local-invalid-time"];
            string local_defect_location = 21 [json_name = "local-defect-location"];
            enum LocalDefectType {
               INVALID_ENUM_VALUE_LocalDefectType = 0;
               LocalDefectType_SERVER = 1;
               LocalDefectType_PEERX_ME = 2;
               LocalDefectType_LOCV = 3;
               LocalDefectType_TTSIX_MISMATCH = 4;
               LocalDefectType_TTSIX_MISMERGE = 5;
               LocalDefectType_EXCESS = 6;
               LocalDefectType_UNKNOWN = 7;
               LocalDefectType_UNX_EXPX_MEG = 8;
               LocalDefectType_UNX_EXPX_PER = 9;
               LocalDefectType_UNX_EXPX_MEP = 10;
            };
            LocalDefectType local_defect_type = 22 [json_name = "local-defect-type"];
            enum RemoteDefectStatus {
               RemoteDefectStatus_INIT = 0;
               RemoteDefectStatus_LOCALX_VALID = 1;
               RemoteDefectStatus_LOCALX_DEFECTX_VALID = 2;
               RemoteDefectStatus_LOCALX_DEFECTX_INVALID = 3;
               RemoteDefectStatus_LOCALX_INVALID = 4;
               RemoteDefectStatus_REMOTEX_VALID = 5;
               RemoteDefectStatus_REMOTEX_DEFECTX_VALID = 6;
               RemoteDefectStatus_REMOTEX_DEFECTX_INVALID = 7;
               RemoteDefectStatus_REMOTEX_INVALID = 8;
            };
            RemoteDefectStatus remote_defect_status = 23 [json_name = "remote-defect-status"];
            uint32 remote_invalid_time = 24 [json_name = "remote-invalid-time"];
            string remote_defect_location = 25 [json_name = "remote-defect-location"];
            enum RemoteDefectType {
               INVALID_ENUM_VALUE_RemoteDefectType = 0;
               RemoteDefectType_SERVER = 1;
               RemoteDefectType_PEERX_ME = 2;
               RemoteDefectType_LOCV = 3;
               RemoteDefectType_TTSIX_MISMATCH = 4;
               RemoteDefectType_TTSIX_MISMERGE = 5;
               RemoteDefectType_EXCESS = 6;
               RemoteDefectType_UNKNOWN = 7;
               RemoteDefectType_UNX_EXPX_MEG = 8;
               RemoteDefectType_UNX_EXPX_PER = 9;
               RemoteDefectType_UNX_EXPX_MEP = 10;
            };
            RemoteDefectType remote_defect_type = 26 [json_name = "remote-defect-type"];
         }
         CoRouteTunnel co_route_tunnel = 21 [json_name = "co-route-tunnel"];
         message TestInstance {
            message OneWayDmSend {
               enum OneDmInterval {
                  INVALID_ENUM_VALUE_OneDmInterval = 0;
                  OneDmInterval_X_1000MS = 4;
                  OneDmInterval_X_10000MS = 5;
               };
               OneDmInterval one_dm_interval = 1 [json_name = "one-dm-interval"];
               uint32 one_dm_exp = 2 [json_name = "one-dm-exp"];
               int32 one_dm_packet_size = 3 [json_name = "one-dm-packet-size"];
               uint32 one_dm_pad_value = 4 [json_name = "one-dm-pad-value"];
            }
            OneWayDmSend one_way_dm_send = 1 [json_name = "one-way-dm-send"];
            message OneWayDmRcv {
               bool one_dm_rcv_enable = 1 [json_name = "one-dm-rcv-enable"];
            }
            OneWayDmRcv one_way_dm_rcv = 2 [json_name = "one-way-dm-rcv"];
            message TwoWayDmSend {
               enum TwoDmInterval {
                  INVALID_ENUM_VALUE_TwoDmInterval = 0;
                  TwoDmInterval_X_1000MS = 4;
                  TwoDmInterval_X_10000MS = 5;
               };
               TwoDmInterval two_dm_interval = 1 [json_name = "two-dm-interval"];
               uint32 two_dm_exp = 2 [json_name = "two-dm-exp"];
               bool two_dm_timestamp = 3 [json_name = "two-dm-timestamp"];
               uint32 two_dm_packet_size = 4 [json_name = "two-dm-packet-size"];
               uint32 two_dm_pad_value = 5 [json_name = "two-dm-pad-value"];
            }
            TwoWayDmSend two_way_dm_send = 3 [json_name = "two-way-dm-send"];
            message SingleLmSend {
               enum SlmInterval {
                  INVALID_ENUM_VALUE_SlmInterval = 0;
                  SlmInterval_X_1000MS = 4;
                  SlmInterval_X_10000MS = 5;
               };
               SlmInterval slm_interval = 1 [json_name = "slm-interval"];
               uint32 slm_exp = 2 [json_name = "slm-exp"];
            }
            SingleLmSend single_lm_send = 4 [json_name = "single-lm-send"];
            message SingleLmRcv {
               bool slm_rcv_enable = 1 [json_name = "slm-rcv-enable"];
            }
            SingleLmRcv single_lm_rcv = 5 [json_name = "single-lm-rcv"];
            message DualLm {
               bool dlm_enable = 1 [json_name = "dlm-enable"];
            }
            DualLm dual_lm = 6 [json_name = "dual-lm"];
            message OneWayDmResult {
               uint32 send_pkt_num = 1 [json_name = "send-pkt-num"];
               uint32 recv_pkt_num = 2 [json_name = "recv-pkt-num"];
               uint32 delay_min = 3 [json_name = "delay-min"];
               uint32 delay_max = 4 [json_name = "delay-max"];
               uint32 delay_avg = 5 [json_name = "delay-avg"];
               uint32 jitter_min = 6 [json_name = "jitter-min"];
               uint32 jitter_max = 7 [json_name = "jitter-max"];
               uint32 jitter_avg = 8 [json_name = "jitter-avg"];
               message OneWayDmDatas {
                  message OneWayDmData {
                     uint32 index = 1 [json_name = "index"];
                     uint32 one_delay = 2 [json_name = "one-delay"];
                     uint32 one_delay_var = 3 [json_name = "one-delay-var"];
                     enum ErrorInfo {
                        ErrorInfo_VALID = 0;
                        ErrorInfo_INVALIDX_LOSS = 1;
                        ErrorInfo_INVALIDX_DELAY = 2;
                     };
                     ErrorInfo error_info = 4 [json_name = "error-info"];
                  }
                  repeated OneWayDmData one_way_dm_data = 1 [json_name = "one-way-dm-data"];
               }
               OneWayDmDatas one_way_dm_datas = 9 [json_name = "one-way-dm-datas"];
            }
            OneWayDmResult one_way_dm_result = 7 [json_name = "one-way-dm-result"];
            message OneWaySendResult {
               enum MeasureMode {
                  MeasureMode_ONX_DEMAND = 0;
                  MeasureMode_PROACTIVE = 1;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_FINISHED = 1;
                  Status_WORKING = 2;
               };
               Status status = 2 [json_name = "status"];
            }
            OneWaySendResult one_way_send_result = 8 [json_name = "one-way-send-result"];
            message TwoWayDmResult {
               enum MeasureMode {
                  MeasureMode_ONX_DEMAND = 0;
                  MeasureMode_PROACTIVE = 1;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_FINISHED = 1;
                  Status_WORKING = 2;
               };
               Status status = 2 [json_name = "status"];
               uint32 send_pkt_num = 3 [json_name = "send-pkt-num"];
               uint32 recv_pkt_num = 4 [json_name = "recv-pkt-num"];
               uint32 delay_min = 5 [json_name = "delay-min"];
               uint32 delay_max = 6 [json_name = "delay-max"];
               uint32 delay_avg = 7 [json_name = "delay-avg"];
               uint32 jitter_min = 8 [json_name = "jitter-min"];
               uint32 jitter_max = 9 [json_name = "jitter-max"];
               uint32 jitter_avg = 10 [json_name = "jitter-avg"];
               message TwoWayDmDatas {
                  message TwoWayDmData {
                     uint32 index = 1 [json_name = "index"];
                     uint32 two_delay = 2 [json_name = "two-delay"];
                     uint32 two_delay_var = 3 [json_name = "two-delay-var"];
                     enum ErrorCode {
                        ErrorCode_VALID = 0;
                        ErrorCode_INVALIDX_LOSS = 1;
                        ErrorCode_INVALIDX_DELAY = 2;
                     };
                     ErrorCode error_code = 4 [json_name = "error-code"];
                  }
                  repeated TwoWayDmData two_way_dm_data = 1 [json_name = "two-way-dm-data"];
               }
               TwoWayDmDatas two_way_dm_datas = 11 [json_name = "two-way-dm-datas"];
            }
            TwoWayDmResult two_way_dm_result = 9 [json_name = "two-way-dm-result"];
            message SingleLmResult {
               enum MeasureMode {
                  MeasureMode_ONX_DEMAND = 0;
                  MeasureMode_PROACTIVE = 1;
               };
               MeasureMode measure_mode = 1 [json_name = "measure-mode"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_FINISHED = 1;
                  Status_WORKING = 2;
               };
               Status status = 2 [json_name = "status"];
               uint32 send_pkt_num = 3 [json_name = "send-pkt-num"];
               uint32 recv_pkt_num = 4 [json_name = "recv-pkt-num"];
               uint32 remote_loss_ratio_min = 5 [json_name = "remote-loss-ratio-min"];
               uint32 remote_loss_ratio_max = 6 [json_name = "remote-loss-ratio-max"];
               uint32 remote_loss_ratio_avg = 7 [json_name = "remote-loss-ratio-avg"];
               uint32 remote_loss_count_min = 8 [json_name = "remote-loss-count-min"];
               uint32 remote_loss_count_max = 9 [json_name = "remote-loss-count-max"];
               uint32 remote_loss_count_avg = 10 [json_name = "remote-loss-count-avg"];
               uint32 local_loss_ratio_min = 11 [json_name = "local-loss-ratio-min"];
               uint32 local_loss_ratio_max = 12 [json_name = "local-loss-ratio-max"];
               uint32 local_loss_ratio_avg = 13 [json_name = "local-loss-ratio-avg"];
               uint32 local_loss_count_min = 14 [json_name = "local-loss-count-min"];
               uint32 local_loss_count_max = 15 [json_name = "local-loss-count-max"];
               uint32 local_loss_count_avg = 16 [json_name = "local-loss-count-avg"];
               message SingleEndedLossDatas {
                  message SingleEndedLossData {
                     uint32 index = 1 [json_name = "index"];
                     uint32 loss_local_num = 2 [json_name = "loss-local-num"];
                     string loss_local_ratio = 3 [json_name = "loss-local-ratio"];
                     uint32 loss_remote_num = 4 [json_name = "loss-remote-num"];
                     string loss_remote_ratio = 5 [json_name = "loss-remote-ratio"];
                     enum ErrorCode {
                        ErrorCode_VALID = 0;
                        ErrorCode_INVALIDX_LOSS = 1;
                        ErrorCode_INVALIDX_DELAY = 2;
                     };
                     ErrorCode error_code = 6 [json_name = "error-code"];
                  }
                  repeated SingleEndedLossData single_ended_loss_data = 1 [json_name = "single-ended-loss-data"];
               }
               SingleEndedLossDatas single_ended_loss_datas = 17 [json_name = "single-ended-loss-datas"];
            }
            SingleLmResult single_lm_result = 10 [json_name = "single-lm-result"];
            message DualLmDatas {
               message DualLmData {
                  uint64 index = 1 [json_name = "index"];
                  uint32 dlm_loss_local = 2 [json_name = "dlm-loss-local"];
                  string dlm_loss_local_rat = 3 [json_name = "dlm-loss-local-rat"];
                  uint32 dlm_loss_remote = 4 [json_name = "dlm-loss-remote"];
                  string dlm_loss_remote_rat = 5 [json_name = "dlm-loss-remote-rat"];
                  enum ErrorInfo {
                     ErrorInfo_VALID = 0;
                     ErrorInfo_INVALIDX_LOSS = 1;
                     ErrorInfo_INVALIDX_DELAY = 2;
                  };
                  ErrorInfo error_info = 6 [json_name = "error-info"];
               }
               repeated DualLmData dual_lm_data = 1 [json_name = "dual-lm-data"];
            }
            DualLmDatas dual_lm_datas = 11 [json_name = "dual-lm-datas"];
         }
         TestInstance test_instance = 22 [json_name = "test-instance"];
         message LbResult {
            uint32 send_pkt_num = 1 [json_name = "send-pkt-num"];
            uint32 recv_pkt_num = 2 [json_name = "recv-pkt-num"];
            string packet_loss_ratio = 3 [json_name = "packet-loss-ratio"];
            uint32 delay_min = 4 [json_name = "delay-min"];
            uint32 delay_max = 5 [json_name = "delay-max"];
            uint32 delay_avg = 6 [json_name = "delay-avg"];
            enum Status {
               Status_TESTING = 0;
               Status_FINISHED = 1;
               Status_STOPPED = 2;
            };
            Status status = 7 [json_name = "status"];
            enum ErrorType {
               ErrorType_OK = 0;
            };
            ErrorType error_type = 8 [json_name = "error-type"];
            message LbDatas {
               message LbData {
                  uint32 index = 1 [json_name = "index"];
                  uint32 bytes = 2 [json_name = "bytes"];
                  uint32 rtt = 3 [json_name = "rtt"];
                  uint32 ttl = 4 [json_name = "ttl"];
                  uint32 sub_code = 5 [json_name = "sub-code"];
                  enum ReturnCode {
                     ReturnCode_OK = 0;
                     ReturnCode_TIMEOUT = 1;
                  };
                  ReturnCode return_code = 6 [json_name = "return-code"];
                  bool is_delete = 7 [json_name = "is-delete"];
                  enum ResultType {
                     ResultType_SUCCESS = 0;
                     ResultType_TIMEOUT = 1;
                     ResultType_FAILED = 2;
                  };
                  ResultType result_type = 8 [json_name = "result-type"];
               }
               repeated LbData lb_data = 1 [json_name = "lb-data"];
            }
            LbDatas lb_datas = 9 [json_name = "lb-datas"];
         }
         LbResult lb_result = 23 [json_name = "lb-result"];
         enum Mode {
            Mode_IPBASE = 0;
            Mode_CUSTOM = 1;
            Mode_ICC = 2;
         };
         Mode mode = 24 [json_name = "mode"];
         uint32 level = 25 [json_name = "level"];
      }
      repeated Meg meg = 1 [json_name = "meg"];
   }
   Megs megs = 5 [json_name = "megs"];
   message TestInstances {
      message TestInstance {
         message DualLm {
            bool dlmEnable = 1;
         }
         DualLm dualLm = 1;
         message DualLmDatas {
            message DualLmData {
               uint32 dlmLossLcl = 1;
               string dlmLossLclRat = 2;
               uint32 dlmLossRmt = 3;
               string dlmLossRmtRat = 4;
               enum ErrorInfo {
                  ErrorInfo_INVALIDX_DELAY = 0;
                  ErrorInfo_INVALIDX_LOSS = 1;
                  ErrorInfo_VALID = 2;
               };
               ErrorInfo errorInfo = 5;
               uint64 index = 6;
            }
            repeated DualLmData dualLmData = 1;
         }
         DualLmDatas dualLmDatas = 2;
         message DualLmThreshold {
            uint32 dlmThreshold1 = 1;
            uint32 dlmThreshold2 = 2;
         }
         DualLmThreshold dualLmThreshold = 3;
         string megName = 4;
         message OneWayDmRcv {
            bool oneDmRcvEnable = 1;
            enum OneDmRcvEnableType {
               OneDmRcvEnableType_ONX_DEMAND = 0;
               OneDmRcvEnableType_PROACTIVE = 1;
            };
            OneDmRcvEnableType oneDmRcvEnableType = 2;
         }
         OneWayDmRcv oneWayDmRcv = 5;
         message OneWayDmResult {
            uint32 delayAvg = 1;
            uint32 delayMax = 2;
            uint32 delayMin = 3;
            uint32 jitterAvg = 4;
            uint32 jitterMax = 5;
            uint32 jitterMin = 6;
            message OneWayDmDatas {
               message OneWayDmData {
                  enum ErrorInfo {
                     ErrorInfo_INVALIDX_DELAY = 0;
                     ErrorInfo_INVALIDX_LOSS = 1;
                     ErrorInfo_VALID = 2;
                  };
                  ErrorInfo errorInfo = 1;
                  uint32 index = 2;
                  uint32 oneDelay = 3;
                  uint32 oneDelayVar = 4;
               }
               repeated OneWayDmData oneWayDmData = 1;
            }
            OneWayDmDatas oneWayDmDatas = 7;
            uint32 recvPktNum = 8;
            uint32 sendPktNum = 9;
         }
         OneWayDmResult oneWayDmResult = 6;
         message OneWayDmSend {
            uint32 oneDmExp = 1;
            enum OneDmInterval {
               OneDmInterval_INTERVAL10000MS = 0;
               OneDmInterval_INTERVAL1000MS = 1;
            };
            OneDmInterval oneDmInterval = 2;
            int32 oneDmPacketSize = 3;
            enum OneDmPadValue {
               OneDmPadValue_PADDINGVALUE0 = 0;
               OneDmPadValue_PADDINGVALUE1 = 1;
            };
            OneDmPadValue oneDmPadValue = 4;
            bool oneDmSendEnable = 5;
         }
         OneWayDmSend oneWayDmSend = 7;
         message OneWaySendResult {
            enum MeasureMode {
               MeasureMode_ONX_DEMAND = 0;
               MeasureMode_PROACTIVE = 1;
            };
            MeasureMode measureMode = 1;
            enum Status {
               Status_FINISHED = 0;
               Status_WORKING = 1;
            };
            Status status = 2;
         }
         OneWaySendResult oneWaySendResult = 8;
         message SingleLmRcv {
            bool slmRcvEnable = 1;
         }
         SingleLmRcv singleLmRcv = 9;
         message SingleLmResult {
            uint32 lclLossCountAvg = 1;
            uint32 lclLossCountMax = 2;
            uint32 lclLossCountMin = 3;
            uint32 lclLossRatioAvg = 4;
            uint32 lclLossRatioMax = 5;
            uint32 lclLossRatioMin = 6;
            enum MeasureMode {
               MeasureMode_ONX_DEMAND = 0;
               MeasureMode_PROACTIVE = 1;
            };
            MeasureMode measureMode = 7;
            uint32 recvPktNum = 8;
            uint32 rmtLossCountAvg = 9;
            uint32 rmtLossCountMax = 10;
            uint32 rmtLossCountMin = 11;
            uint32 rmtLossRatioAvg = 12;
            uint32 rmtLossRatioMax = 13;
            uint32 rmtLossRatioMin = 14;
            uint32 sendPktNum = 15;
            message SingleLmDatas {
               message SingleLmData {
                  enum ErrorInfo {
                     ErrorInfo_INVALIDX_DELAY = 0;
                     ErrorInfo_INVALIDX_LOSS = 1;
                     ErrorInfo_VALID = 2;
                  };
                  ErrorInfo errorInfo = 1;
                  uint32 index = 2;
                  uint32 slmLossLcl = 3;
                  string slmLossLclRat = 4;
                  uint32 slmLossRmt = 5;
                  string slmLossRmtRat = 6;
               }
               repeated SingleLmData singleLmData = 1;
            }
            SingleLmDatas singleLmDatas = 16;
            enum Status {
               Status_FINISHED = 0;
               Status_WORKING = 1;
            };
            Status status = 17;
         }
         SingleLmResult singleLmResult = 10;
         message SingleLmSend {
            uint32 slmExp = 1;
            enum SlmInterval {
               SlmInterval_INTERVAL10000MS = 0;
               SlmInterval_INTERVAL1000MS = 1;
            };
            SlmInterval slmInterval = 2;
            bool slmSendEnable = 3;
         }
         SingleLmSend singleLmSend = 11;
         message SingleLmThreshold {
            uint32 slmThreshold1 = 1;
            uint32 slmThreshold2 = 2;
         }
         SingleLmThreshold singleLmThreshold = 12;
         message TestDatas {
            message TestData {
               enum ErrorInfo {
                  ErrorInfo_INVALIDX_DELAY = 0;
                  ErrorInfo_INVALIDX_LOSS = 1;
                  ErrorInfo_VALID = 2;
               };
               ErrorInfo errorInfo = 1;
               uint64 misCodeNum = 2;
               uint64 misCrcNum = 3;
               uint64 misOrderNum = 4;
               uint64 rcvPktNum = 5;
               uint64 sendPktNum = 6;
            }
            repeated TestData testData = 1;
         }
         TestDatas testDatas = 13;
         message TestRcv {
            bool testRcvEnable = 1;
         }
         TestRcv testRcv = 14;
         message TwoWayDmRcv {
            bool twoDmRcvEnable = 1;
         }
         TwoWayDmRcv twoWayDmRcv = 15;
         message TwoWayDmResult {
            uint32 delayAvg = 1;
            uint32 delayMax = 2;
            uint32 delayMin = 3;
            uint32 jitterAvg = 4;
            uint32 jitterMax = 5;
            uint32 jitterMin = 6;
            enum MeasureMode {
               MeasureMode_ONX_DEMAND = 0;
               MeasureMode_PROACTIVE = 1;
            };
            MeasureMode measureMode = 7;
            uint32 recvPktNum = 8;
            uint32 sendPktNum = 9;
            enum Status {
               Status_FINISHED = 0;
               Status_WORKING = 1;
            };
            Status status = 10;
            message TwoWayDmDatas {
               message TwoWayDmData {
                  enum ErrorInfo {
                     ErrorInfo_INVALIDX_DELAY = 0;
                     ErrorInfo_INVALIDX_LOSS = 1;
                     ErrorInfo_VALID = 2;
                  };
                  ErrorInfo errorInfo = 1;
                  uint32 index = 2;
                  uint32 twoDelay = 3;
                  uint32 twoDelayVar = 4;
               }
               repeated TwoWayDmData twoWayDmData = 1;
            }
            TwoWayDmDatas twoWayDmDatas = 11;
         }
         TwoWayDmResult twoWayDmResult = 16;
         message TwoWayDmSend {
            uint32 twoDmExp = 1;
            enum TwoDmInterval {
               TwoDmInterval_INTERVAL10000MS = 0;
               TwoDmInterval_INTERVAL1000MS = 1;
            };
            TwoDmInterval twoDmInterval = 2;
            uint32 twoDmPacketSize = 3;
            enum TwoDmPadValue {
               TwoDmPadValue_PADDINGVALUE0 = 0;
               TwoDmPadValue_PADDINGVALUE1 = 1;
            };
            TwoDmPadValue twoDmPadValue = 4;
            bool twoDmSendEnable = 5;
            bool twoDmTimestamp = 6;
         }
         TwoWayDmSend twoWayDmSend = 17;
      }
      repeated TestInstance testInstance = 1;
   }
   TestInstances testInstances = 6;
}


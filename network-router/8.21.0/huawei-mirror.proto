syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-mirror
// revision 2021-06-22
// revision 2020-07-29
// revision 2020-07-23
// revision 2020-07-11
// revision 2020-06-15
// revision 2020-05-22
// revision 2020-03-30
// revision 2020-03-18
// revision 2020-03-12
// revision 2020-02-25
// revision 2020-01-19
// revision 2020-01-14
// revision 2019-12-24
// revision 2019-12-13
// revision 2019-11-21
// revision 2019-10-24
// revision 2019-05-04
// namespace urn:huawei:yang:huawei-mirror

package huawei_mirror;

message Mirror {
   message StatisticEnable {
   }
   StatisticEnable statistic_enable = 1 [json_name = "statistic-enable"];
   message Instances {
      message Instance {
         string instance_name = 1 [json_name = "instance-name"];
         message InstanceSlice {
            uint32 slice_size = 1 [json_name = "slice-size"];
         }
         InstanceSlice instance_slice = 2 [json_name = "instance-slice"];
         message InstanceCar {
            uint32 cir = 1 [json_name = "cir"];
            uint32 pir = 2 [json_name = "pir"];
            uint32 cbs = 3 [json_name = "cbs"];
            uint32 pbs = 4 [json_name = "pbs"];
         }
         InstanceCar instance_car = 3 [json_name = "instance-car"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 2 [json_name = "instances"];
   message ObserveUserDefineAcls {
      message ObserveUserDefineAcl {
         uint32 filter_id = 1 [json_name = "filter-id"];
         message Offsets {
            message Offset {
               uint32 config_index = 1 [json_name = "config-index"];
               uint32 offset_value = 2 [json_name = "offset-value"];
               string payload_value = 3 [json_name = "payload-value"];
               string payload_mask = 4 [json_name = "payload-mask"];
            }
            repeated Offset offset = 1 [json_name = "offset"];
         }
         Offsets offsets = 2 [json_name = "offsets"];
      }
      repeated ObserveUserDefineAcl observe_user_define_acl = 1 [json_name = "observe-user-define-acl"];
   }
   ObserveUserDefineAcls observe_user_define_acls = 3 [json_name = "observe-user-define-acls"];
   message QueryPorts {
      message QueryPort {
         string if_name = 1 [json_name = "if-name"];
         enum Type {
            Type_PORT = 0;
            Type_POLICY = 1;
            Type_VLAN = 2;
            Type_TRAFFIC = 4;
         };
         Type type = 2 [json_name = "type"];
         enum Direction {
            Direction_IN = 0;
            Direction_OUT = 1;
            Direction_INX_OUT = 2;
            Direction_CPU = 3;
            Direction_INX_CPU = 4;
            Direction_OUTX_CPU = 5;
            Direction_INX_OUTX_CPU = 6;
         };
         Direction direction = 3 [json_name = "direction"];
         uint64 in_packets = 4 [json_name = "in-packets"];
         uint64 out_packets = 5 [json_name = "out-packets"];
         uint64 in_drop_packets = 6 [json_name = "in-drop-packets"];
         uint64 out_drop_packets = 7 [json_name = "out-drop-packets"];
         uint64 in_bytes = 8 [json_name = "in-bytes"];
         uint64 out_bytes = 9 [json_name = "out-bytes"];
         uint64 in_drop_bytes = 10 [json_name = "in-drop-bytes"];
         uint64 out_drop_bytes = 11 [json_name = "out-drop-bytes"];
         uint64 in_pps = 12 [json_name = "in-pps"];
         uint64 out_pps = 13 [json_name = "out-pps"];
         uint64 in_drop_pps = 14 [json_name = "in-drop-pps"];
         uint64 out_drop_pps = 15 [json_name = "out-drop-pps"];
         uint64 in_bps = 16 [json_name = "in-bps"];
         uint64 out_bps = 17 [json_name = "out-bps"];
         uint64 in_drop_bps = 18 [json_name = "in-drop-bps"];
         uint64 out_drop_bps = 19 [json_name = "out-drop-bps"];
         uint32 in_car_speed = 20 [json_name = "in-car-speed"];
         uint32 out_car_speed = 21 [json_name = "out-car-speed"];
      }
      repeated QueryPort query_port = 1 [json_name = "query-port"];
   }
   QueryPorts query_ports = 4 [json_name = "query-ports"];
   message QueryTrafficPolicyPorts {
      message QueryTrafficPolicyPort {
         string if_name = 1 [json_name = "if-name"];
         string traffic_policy_name = 2 [json_name = "traffic-policy-name"];
         enum Type {
            Type_PORT = 0;
            Type_POLICY = 1;
            Type_VLAN = 2;
            Type_TRAFFIC = 4;
         };
         Type type = 3 [json_name = "type"];
         enum Direction {
            Direction_IN = 0;
            Direction_OUT = 1;
            Direction_INX_OUT = 2;
            Direction_CPU = 3;
            Direction_INX_CPU = 4;
            Direction_OUTX_CPU = 5;
            Direction_INX_OUTX_CPU = 6;
         };
         Direction direction = 4 [json_name = "direction"];
         uint64 in_packets = 5 [json_name = "in-packets"];
         uint64 out_packets = 6 [json_name = "out-packets"];
         uint64 in_drop_packets = 7 [json_name = "in-drop-packets"];
         uint64 out_drop_packets = 8 [json_name = "out-drop-packets"];
         uint64 in_bytes = 9 [json_name = "in-bytes"];
         uint64 out_bytes = 10 [json_name = "out-bytes"];
         uint64 in_drop_bytes = 11 [json_name = "in-drop-bytes"];
         uint64 out_drop_bytes = 12 [json_name = "out-drop-bytes"];
         uint64 in_pps = 13 [json_name = "in-pps"];
         uint64 out_pps = 14 [json_name = "out-pps"];
         uint64 in_drop_pps = 15 [json_name = "in-drop-pps"];
         uint64 out_drop_pps = 16 [json_name = "out-drop-pps"];
         uint64 in_bps = 17 [json_name = "in-bps"];
         uint64 out_bps = 18 [json_name = "out-bps"];
         uint64 in_drop_bps = 19 [json_name = "in-drop-bps"];
         uint64 out_drop_bps = 20 [json_name = "out-drop-bps"];
         uint32 in_car_speed = 21 [json_name = "in-car-speed"];
         uint32 out_car_speed = 22 [json_name = "out-car-speed"];
      }
      repeated QueryTrafficPolicyPort query_traffic_policy_port = 1 [json_name = "query-traffic-policy-port"];
   }
   QueryTrafficPolicyPorts query_traffic_policy_ports = 5 [json_name = "query-traffic-policy-ports"];
   message GlobalObserveGroups {
      message GlobalObserveGroup {
         uint32 group_id = 1 [json_name = "group-id"];
         repeated string interface_name = 2 [json_name = "interface-name"];
      }
      repeated GlobalObserveGroup global_observe_group = 1 [json_name = "global-observe-group"];
   }
   GlobalObserveGroups global_observe_groups = 7 [json_name = "global-observe-groups"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-sshc
// revision 2020-07-02
// namespace urn:huawei:yang:huawei-sshc

package huawei_sshc;

message Sshc {
   message Rekey {
      uint32 max_packet = 1 [json_name = "max-packet"];
      int32 time = 2 [json_name = "time"];
      int32 max_data = 3 [json_name = "max-data"];
   }
   Rekey rekey = 1 [json_name = "rekey"];
   message SshCCipherAlg {
      bool aes128cbc = 1;
      bool aes128ctr = 2;
      bool aes128gcm = 3;
      bool aes192cbc = 4;
      bool aes192ctr = 5;
      bool aes256cbc = 6;
      bool aes256ctr = 7;
      bool aes256gcm = 8;
      bool arcfour128 = 9;
      bool arcfour256 = 10;
      bool des3cbc = 11;
      bool descbc = 12;
   }
   SshCCipherAlg sshCCipherAlg = 2;
   message SshCHMacAlg {
      bool md5 = 1;
      bool md596 = 2;
      bool sha1 = 3;
      bool sha196 = 4;
      bool sha2256 = 5;
      bool sha225696 = 6;
      bool sha2512 = 7;
   }
   SshCHMacAlg sshCHMacAlg = 3;
   message SshCPubKeyAlg {
      bool dsa = 1;
      bool ecc = 2;
      bool rsa = 3;
   }
   SshCPubKeyAlg sshCPubKeyAlg = 4;
   message SshCliKeyCfgs {
      message SshCliKeyCfg {
         string keyName = 1;
         enum PubKeyType {
            PubKeyType_DSA = 0;
            PubKeyType_ECC = 1;
            PubKeyType_RSA = 2;
         };
         PubKeyType pubKeyType = 2;
         string serverName = 3;
         enum State {
            State_CONFIGURE = 0;
            State_DYNAMIC = 1;
         };
         State state = 4;
      }
      repeated SshCliKeyCfg sshCliKeyCfg = 1;
   }
   SshCliKeyCfgs sshCliKeyCfgs = 5;
   message SshClient {
      string SrcInterface = 1;
      string SrcIpv4Addr = 2;
      enum FirstTimeEnable {
         FirstTimeEnable_DISABLE = 0;
         FirstTimeEnable_ENABLE = 1;
      };
      FirstTimeEnable firstTimeEnable = 3;
      int32 keepAliveCount = 4;
      int32 keepAliveTime = 5;
      uint32 packetDscp = 6;
      string scpSrcInterface = 7;
      string scpSrcIpv4Addr = 8;
      string scpVpnInstanceName = 9;
      string vpnInstanceName = 10;
   }
   SshClient sshClient = 6;
   message SshcKexAlg {
      bool dhGroup14Sha1 = 1;
      bool dhGroup1Sha1 = 2;
      bool dhGroupExchangeSha1 = 3;
      bool dhGroupExchangeSha256 = 4;
      bool ecdhSha2Nistp256 = 5;
      bool ecdhSha2Nistp384 = 6;
      bool ecdhSha2Nistp521 = 7;
      bool sm2Kep = 8;
   }
   SshcKexAlg sshcKexAlg = 7;
   message SshcLocalKeys {
      message SshcLocalKey {
         string hostKeyCode = 1;
         string hostKeyName = 2;
         string hostKeyOpenSSH = 3;
         string hostKeyPEM = 4;
         string hostKeySSH1 = 5;
         uint32 keySize = 6;
         string passphrase = 7;
      }
      SshcLocalKey sshcLocalKey = 1;
   }
   SshcLocalKeys sshcLocalKeys = 8;
   message Client {
      int32 keep_alive_time = 1 [json_name = "keep-alive-time"];
      int32 keep_alive_count = 2 [json_name = "keep-alive-count"];
      enum FirstTimeEnable {
         INVALID_ENUM_VALUE_FirstTimeEnable = 0;
         FirstTimeEnable_ENABLE = 1;
         FirstTimeEnable_DISABLE = 2;
      };
      FirstTimeEnable first_time_enable = 3 [json_name = "first-time-enable"];
      string src_interface = 4 [json_name = "src-interface"];
      string src_ipv4_addr = 5 [json_name = "src-ipv4-addr"];
      string vpn_instance_name = 6 [json_name = "vpn-instance-name"];
      string scp_src_interface = 7 [json_name = "scp-src-interface"];
      string scp_src_ipv4_addr = 8 [json_name = "scp-src-ipv4-addr"];
      string scp_vpn_instance_name = 9 [json_name = "scp-vpn-instance-name"];
      string sftp_src_ipv6_addr = 10 [json_name = "sftp-src-ipv6-addr"];
      string sftp_ipv6_vpn_instance_name = 11 [json_name = "sftp-ipv6-vpn-instance-name"];
      uint32 packet_dscp = 12 [json_name = "packet-dscp"];
      string sm2_host_key = 13 [json_name = "sm2-host-key"];
      string scp_src_ipv6_addr = 14 [json_name = "scp-src-ipv6-addr"];
      string scp_ipv6_vpn_instance_name = 15 [json_name = "scp-ipv6-vpn-instance-name"];
      string pki_domain = 16 [json_name = "pki-domain"];
   }
   Client client = 9 [json_name = "client"];
   message ServerAuthentications {
      message ServerAuthentication {
         string server_name = 1 [json_name = "server-name"];
         enum PubkeyType {
            INVALID_ENUM_VALUE_PubkeyType = 0;
            PubkeyType_RSA = 1;
            PubkeyType_DSA = 2;
            PubkeyType_ECC = 3;
            PubkeyType_SM2 = 5;
         };
         PubkeyType pubkey_type = 2 [json_name = "pubkey-type"];
         string key_name = 3 [json_name = "key-name"];
      }
      repeated ServerAuthentication server_authentication = 1 [json_name = "server-authentication"];
   }
   ServerAuthentications server_authentications = 10 [json_name = "server-authentications"];
   message CipherAlg {
      enum Descbc {
         Descbc_FALSE = 0;
         Descbc_TRUE = 1;
      };
      Descbc descbc = 1 [json_name = "descbc"];
      enum Des3Cbc {
         Des3Cbc_FALSE = 0;
         Des3Cbc_TRUE = 1;
      };
      Des3Cbc des3cbc = 2 [json_name = "des3cbc"];
      enum Aes128Cbc {
         Aes128Cbc_FALSE = 0;
         Aes128Cbc_TRUE = 1;
      };
      Aes128Cbc aes128cbc = 3 [json_name = "aes128cbc"];
      enum Aes192Cbc {
         Aes192Cbc_FALSE = 0;
         Aes192Cbc_TRUE = 1;
      };
      Aes192Cbc aes192cbc = 4 [json_name = "aes192cbc"];
      enum Aes256Cbc {
         Aes256Cbc_FALSE = 0;
         Aes256Cbc_TRUE = 1;
      };
      Aes256Cbc aes256cbc = 5 [json_name = "aes256cbc"];
      enum Aes128Ctr {
         Aes128Ctr_FALSE = 0;
         Aes128Ctr_TRUE = 1;
      };
      Aes128Ctr aes128ctr = 6 [json_name = "aes128ctr"];
      enum Aes192Ctr {
         Aes192Ctr_FALSE = 0;
         Aes192Ctr_TRUE = 1;
      };
      Aes192Ctr aes192ctr = 7 [json_name = "aes192ctr"];
      enum Aes256Ctr {
         Aes256Ctr_FALSE = 0;
         Aes256Ctr_TRUE = 1;
      };
      Aes256Ctr aes256ctr = 8 [json_name = "aes256ctr"];
      enum Arcfour128 {
         Arcfour128_FALSE = 0;
         Arcfour128_TRUE = 1;
      };
      Arcfour128 arcfour128 = 9 [json_name = "arcfour128"];
      enum Arcfour256 {
         Arcfour256_FALSE = 0;
         Arcfour256_TRUE = 1;
      };
      Arcfour256 arcfour256 = 10 [json_name = "arcfour256"];
      enum Aes128Gcm {
         Aes128Gcm_FALSE = 0;
         Aes128Gcm_TRUE = 1;
      };
      Aes128Gcm aes128gcm = 11 [json_name = "aes128gcm"];
      enum Aes256Gcm {
         Aes256Gcm_FALSE = 0;
         Aes256Gcm_TRUE = 1;
      };
      Aes256Gcm aes256gcm = 12 [json_name = "aes256gcm"];
   }
   CipherAlg cipher_alg = 11 [json_name = "cipher-alg"];
   message HmacAlg {
      enum Md5 {
         Md5_FALSE = 0;
         Md5_TRUE = 1;
      };
      Md5 md5 = 1 [json_name = "md5"];
      enum Md596 {
         Md596_FALSE = 0;
         Md596_TRUE = 1;
      };
      Md596 md596 = 2 [json_name = "md596"];
      enum Sha1 {
         Sha1_FALSE = 0;
         Sha1_TRUE = 1;
      };
      Sha1 sha1 = 3 [json_name = "sha1"];
      enum Sha196 {
         Sha196_FALSE = 0;
         Sha196_TRUE = 1;
      };
      Sha196 sha196 = 4 [json_name = "sha196"];
      enum Sha2256 {
         Sha2256_FALSE = 0;
         Sha2256_TRUE = 1;
      };
      Sha2256 sha2256 = 5 [json_name = "sha2256"];
      enum Sha225696 {
         Sha225696_FALSE = 0;
         Sha225696_TRUE = 1;
      };
      Sha225696 sha225696 = 6 [json_name = "sha225696"];
      enum Sha2512 {
         Sha2512_FALSE = 0;
         Sha2512_TRUE = 1;
      };
      Sha2512 sha2512 = 7 [json_name = "sha2512"];
   }
   HmacAlg hmac_alg = 12 [json_name = "hmac-alg"];
   message KexAlg {
      enum DhGroup14Sha1 {
         DhGroup14Sha1_FALSE = 0;
         DhGroup14Sha1_TRUE = 1;
      };
      DhGroup14Sha1 dh_group14_sha1 = 1 [json_name = "dh-group14-sha1"];
      enum DhGroup1Sha1 {
         DhGroup1Sha1_FALSE = 0;
         DhGroup1Sha1_TRUE = 1;
      };
      DhGroup1Sha1 dh_group1_sha1 = 2 [json_name = "dh-group1-sha1"];
      enum EcdhSha2Nistp521 {
         EcdhSha2Nistp521_FALSE = 0;
         EcdhSha2Nistp521_TRUE = 1;
      };
      EcdhSha2Nistp521 ecdh_sha2_nistp_521 = 3 [json_name = "ecdh-sha2-nistp-521"];
      enum EcdhSha2Nistp384 {
         EcdhSha2Nistp384_FALSE = 0;
         EcdhSha2Nistp384_TRUE = 1;
      };
      EcdhSha2Nistp384 ecdh_sha2_nistp_384 = 4 [json_name = "ecdh-sha2-nistp-384"];
      enum EcdhSha2Nistp256 {
         EcdhSha2Nistp256_FALSE = 0;
         EcdhSha2Nistp256_TRUE = 1;
      };
      EcdhSha2Nistp256 ecdh_sha2_nistp_256 = 5 [json_name = "ecdh-sha2-nistp-256"];
      enum DhGroupExchangeSha256 {
         DhGroupExchangeSha256_FALSE = 0;
         DhGroupExchangeSha256_TRUE = 1;
      };
      DhGroupExchangeSha256 dh_group_exchange_sha_256 = 6 [json_name = "dh-group-exchange-sha-256"];
      enum DhGroupExchangeSha1 {
         DhGroupExchangeSha1_FALSE = 0;
         DhGroupExchangeSha1_TRUE = 1;
      };
      DhGroupExchangeSha1 dh_group_exchange_sha1 = 7 [json_name = "dh-group-exchange-sha1"];
      enum Sm2Kep {
         Sm2Kep_FALSE = 0;
         Sm2Kep_TRUE = 1;
      };
      Sm2Kep sm2_kep = 8 [json_name = "sm2-kep"];
      enum DhGroup16Sha512 {
         DhGroup16Sha512_FALSE = 0;
         DhGroup16Sha512_TRUE = 1;
      };
      DhGroup16Sha512 dh_group16_sha512 = 9 [json_name = "dh-group16-sha512"];
      enum DhGroup18Sha512 {
         DhGroup18Sha512_FALSE = 0;
         DhGroup18Sha512_TRUE = 1;
      };
      DhGroup18Sha512 dh_group18_sha512 = 10 [json_name = "dh-group18-sha512"];
      enum Curve25519Sha256 {
         Curve25519Sha256_FALSE = 0;
         Curve25519Sha256_TRUE = 1;
      };
      Curve25519Sha256 curve25519_sha256 = 11 [json_name = "curve25519-sha256"];
   }
   KexAlg kex_alg = 13 [json_name = "kex-alg"];
   message PubkeyAlg {
      bool dsa = 1 [json_name = "dsa"];
      bool ecc = 2 [json_name = "ecc"];
      bool rsa = 3 [json_name = "rsa"];
      bool sm2 = 4 [json_name = "sm2"];
      bool rsa_sha2_256 = 5 [json_name = "rsa-sha2-256"];
      bool rsa_sha2_512 = 6 [json_name = "rsa-sha2-512"];
      bool x509v3_ssh_rsa = 7 [json_name = "x509v3-ssh-rsa"];
   }
   PubkeyAlg pubkey_alg = 14 [json_name = "pubkey-alg"];
   message TransferResults {
      message TransferResult {
         enum CommandType {
            INVALID_ENUM_VALUE_CommandType = 0;
            CommandType_GET = 2;
            CommandType_PUT = 3;
         };
         CommandType command_type = 1 [json_name = "command-type"];
         string host_addr = 2 [json_name = "host-addr"];
         uint32 server_port = 3 [json_name = "server-port"];
         string vpn_name = 4 [json_name = "vpn-name"];
         string local_file_name = 5 [json_name = "local-file-name"];
         string remote_file_name = 6 [json_name = "remote-file-name"];
         string status = 7 [json_name = "status"];
         uint32 percentage = 8 [json_name = "percentage"];
         string error_tag = 9 [json_name = "error-tag"];
      }
      repeated TransferResult transfer_result = 1 [json_name = "transfer-result"];
   }
   TransferResults transfer_results = 15 [json_name = "transfer-results"];
   message SessionCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir_interval = 2 [json_name = "cir-interval"];
      uint32 cbs_interval = 3 [json_name = "cbs-interval"];
      uint32 pir_interval = 4 [json_name = "pir-interval"];
      uint32 pbs_interval = 5 [json_name = "pbs-interval"];
   }
   SessionCar session_car = 16 [json_name = "session-car"];
}


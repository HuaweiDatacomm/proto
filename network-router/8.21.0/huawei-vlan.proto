syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-16 20:54:11
// ProtoYang-version 1
// module huawei-vlan
// revision 2021-08-12
// revision 2020-02-07
// revision 2019-12-20
// revision 2019-12-02
// revision 2019-04-29
// namespace urn:huawei:yang:huawei-vlan

package huawei_vlan;

message Vlan {
   message Vlans {
      message Vlan3 {
         uint32 id = 1 [json_name = "id"];
         string name = 2 [json_name = "name"];
         string description = 3 [json_name = "description"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_COMMON = 1;
            Type_SUPER = 2;
            Type_SUB = 3;
         };
         Type type = 4 [json_name = "type"];
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_UP = 1;
         };
         AdminStatus admin_status = 5 [json_name = "admin-status"];
         enum BroadcastDiscard {
            BroadcastDiscard_DISABLE = 0;
            BroadcastDiscard_ENABLE = 1;
         };
         BroadcastDiscard broadcast_discard = 6 [json_name = "broadcast-discard"];
         enum UnknownMulticastDiscard {
            UnknownMulticastDiscard_DISABLE = 0;
            UnknownMulticastDiscard_ENABLE = 1;
         };
         UnknownMulticastDiscard unknown_multicast_discard = 7 [json_name = "unknown-multicast-discard"];
         enum MacLearning {
            MacLearning_DISABLE = 0;
            MacLearning_ENABLE = 1;
         };
         MacLearning mac_learning = 8 [json_name = "mac-learning"];
         enum StatisticEnable {
            StatisticEnable_DISABLE = 0;
            StatisticEnable_ENABLE = 1;
         };
         StatisticEnable statistic_enable = 9 [json_name = "statistic-enable"];
         enum StatisticDiscard {
            StatisticDiscard_DISABLE = 0;
            StatisticDiscard_ENABLE = 1;
         };
         StatisticDiscard statistic_discard = 10 [json_name = "statistic-discard"];
         uint32 mac_aging_time = 11 [json_name = "mac-aging-time"];
         uint32 super_vlan = 12 [json_name = "super-vlan"];
         message UnkownUnicastDiscard {
            enum Discard {
               Discard_DISABLE = 0;
               Discard_ENABLE = 1;
            };
            Discard discard = 1 [json_name = "discard"];
            enum MacLearningEnable {
               MacLearningEnable_DISABLE = 0;
               MacLearningEnable_ENABLE = 1;
            };
            MacLearningEnable mac_learning_enable = 2 [json_name = "mac-learning-enable"];
         }
         UnkownUnicastDiscard unkown_unicast_discard = 13 [json_name = "unkown-unicast-discard"];
         message Suppression {
            enum Inbound {
               Inbound_DISABLE = 0;
               Inbound_ENABLE = 1;
            };
            Inbound inbound = 1 [json_name = "inbound"];
            enum Outbound {
               Outbound_DISABLE = 0;
               Outbound_ENABLE = 1;
            };
            Outbound outbound = 2 [json_name = "outbound"];
         }
         Suppression suppression = 14 [json_name = "suppression"];
         message MemberPorts {
            message MemberPort {
               string interface_name = 1 [json_name = "interface-name"];
               enum AccessType {
                  INVALID_ENUM_VALUE_AccessType = 0;
                  AccessType_ACCESS = 1;
                  AccessType_TRUNK = 2;
                  AccessType_HYBRID = 3;
                  AccessType_DOT1QTUNNEL = 4;
               };
               AccessType access_type = 2 [json_name = "access-type"];
               enum State {
                  State_DOWN = 0;
                  State_UP = 1;
               };
               State state = 3 [json_name = "state"];
               enum TagMode {
                  TagMode_UNTAG = 0;
                  TagMode_TAG = 1;
               };
               TagMode tag_mode = 4 [json_name = "tag-mode"];
            }
            repeated MemberPort member_port = 1 [json_name = "member-port"];
         }
         MemberPorts member_ports = 15 [json_name = "member-ports"];
         message DhcpVlan {
            message InterfaceOption82Formats {
               message InterfaceOption82Format {
                  string if_name = 1 [json_name = "if-name"];
                  enum Option82Format {
                     INVALID_ENUM_VALUE_Option82Format = 0;
                     Option82Format_COMMON = 1;
                     Option82Format_EXTEND = 2;
                     Option82Format_USERX_DEFINED = 3;
                     Option82Format_DEFAULT = 4;
                     Option82Format_TYPE1 = 5;
                     Option82Format_TYPE2 = 6;
                     Option82Format_SELFX_DEFINE = 7;
                     Option82Format_DEFAULTX_EXTRA = 8;
                     Option82Format_CNX_TELECOM = 9;
                     Option82Format_SELFX_DEFINEX_EXTRA = 10;
                     Option82Format_INTRACOMX_VXLAN = 11;
                     Option82Format_CNX_TELECOMX_INHERIT = 12;
                  };
                  Option82Format option82_format = 2 [json_name = "option82-format"];
                  string user_define_text = 3 [json_name = "user-define-text"];
               }
               repeated InterfaceOption82Format interface_option82_format = 1 [json_name = "interface-option82-format"];
            }
            InterfaceOption82Formats interface_option82_formats = 1 [json_name = "interface-option82-formats"];
            message InterfaceOption82InsertSettings {
               message InterfaceOption82InsertSetting {
                  string if_name = 1 [json_name = "if-name"];
                  message Option82InsertFormat_InsertFormat {
                     bool insert = 1 [json_name = "insert"];
                  }
                  message Option82InsertFormat_RebuildFormat {
                     bool rebuild = 1 [json_name = "rebuild"];
                  }
                  oneof Option82InsertFormat {
                     Option82InsertFormat_InsertFormat option82_insert_format_insert_format = 2 [json_name = "insert-format"];
                     Option82InsertFormat_RebuildFormat option82_insert_format_rebuild_format = 3 [json_name = "rebuild-format"];
                  }
                  string to_if_name = 4 [json_name = "to-if-name"];
               }
               repeated InterfaceOption82InsertSetting interface_option82_insert_setting = 1 [json_name = "interface-option82-insert-setting"];
            }
            InterfaceOption82InsertSettings interface_option82_insert_settings = 2 [json_name = "interface-option82-insert-settings"];
            message Option82InsertSetting {
               message Option82InsertFormat_InsertFormat {
                  bool insert = 1 [json_name = "insert"];
               }
               message Option82InsertFormat_RebuildFormat {
                  bool rebuild = 1 [json_name = "rebuild"];
               }
               oneof Option82InsertFormat {
                  Option82InsertFormat_InsertFormat option82_insert_format_insert_format = 1 [json_name = "insert-format"];
                  Option82InsertFormat_RebuildFormat option82_insert_format_rebuild_format = 2 [json_name = "rebuild-format"];
               }
            }
            Option82InsertSetting option82_insert_setting = 3 [json_name = "option82-insert-setting"];
            message AppendVendorSpecific {
               bool enble = 1 [json_name = "enble"];
            }
            AppendVendorSpecific append_vendor_specific = 4 [json_name = "append-vendor-specific"];
            message Encapsulation {
               enum Suboption {
                  Suboption_CIRCUITX_ID = 0;
                  Suboption_REMOTEX_ID = 1;
                  Suboption_SUBSCRIBERX_ID = 2;
                  Suboption_VENDORX_SPECIFICX_ID = 3;
               };
               repeated Suboption suboption = 1 [json_name = "suboption"];
            }
            Encapsulation encapsulation = 5 [json_name = "encapsulation"];
            message AntiAttackCheck {
               bool magic_cookie = 1 [json_name = "magic-cookie"];
               bool udp_checksum = 2 [json_name = "udp-checksum"];
            }
            AntiAttackCheck anti_attack_check = 6 [json_name = "anti-attack-check"];
         }
         DhcpVlan dhcp_vlan = 16 [json_name = "dhcp-vlan"];
         message DhcpSnoopingVlan {
            message BasicAttribute {
               bool enable = 1 [json_name = "enable"];
               bool trust_enable = 2 [json_name = "trust-enable"];
               bool check_arp_enable = 3 [json_name = "check-arp-enable"];
               bool alarm_arp_enable = 4 [json_name = "alarm-arp-enable"];
               uint32 alarm_arp_threshold = 5 [json_name = "alarm-arp-threshold"];
               bool check_ip_enable = 6 [json_name = "check-ip-enable"];
               bool alarm_ip_enable = 7 [json_name = "alarm-ip-enable"];
               uint32 alarm_ip_threshold = 8 [json_name = "alarm-ip-threshold"];
               bool alarm_reply_enable = 9 [json_name = "alarm-reply-enable"];
               uint32 alarm_reply_threshold = 10 [json_name = "alarm-reply-threshold"];
               bool check_mac_enable = 11 [json_name = "check-mac-enable"];
               bool alarm_mac_enable = 12 [json_name = "alarm-mac-enable"];
               uint32 alarm_mac_threshold = 13 [json_name = "alarm-mac-threshold"];
               bool check_user_bind_enable = 14 [json_name = "check-user-bind-enable"];
               bool alarm_user_bind_enable = 15 [json_name = "alarm-user-bind-enable"];
               uint32 alarm_user_bind_threshold = 16 [json_name = "alarm-user-bind-threshold"];
               uint32 max_user_number = 17 [json_name = "max-user-number"];
               bool alarm_user_limit_enable = 18 [json_name = "alarm-user-limit-enable"];
               uint32 alarm_user_limit_threshold = 19 [json_name = "alarm-user-limit-threshold"];
               bool check_rate_enable = 20 [json_name = "check-rate-enable"];
               uint32 vlan_rate = 21 [json_name = "vlan-rate"];
            }
            BasicAttribute basic_attribute = 1 [json_name = "basic-attribute"];
            message VlanInterfaces {
               message VlanInterface {
                  string if_name = 1 [json_name = "if-name"];
                  bool enable = 2 [json_name = "enable"];
                  bool trust_flag = 3 [json_name = "trust-flag"];
                  bool check_arp_enable = 4 [json_name = "check-arp-enable"];
                  bool alarm_arp_enable = 5 [json_name = "alarm-arp-enable"];
                  uint32 alarm_arp_threshold = 6 [json_name = "alarm-arp-threshold"];
                  bool check_ip_enable = 7 [json_name = "check-ip-enable"];
                  bool alarm_ip_enable = 8 [json_name = "alarm-ip-enable"];
                  uint32 alarm_ip_threshold = 9 [json_name = "alarm-ip-threshold"];
                  bool alarm_reply_enable = 10 [json_name = "alarm-reply-enable"];
                  uint32 alarm_reply_threshold = 11 [json_name = "alarm-reply-threshold"];
                  bool check_mac_address_enable = 12 [json_name = "check-mac-address-enable"];
                  bool alarm_mac_address_enable = 13 [json_name = "alarm-mac-address-enable"];
                  uint32 alarm_mac_address_threshold = 14 [json_name = "alarm-mac-address-threshold"];
                  bool check_request_enable = 15 [json_name = "check-request-enable"];
                  bool alarm_request_enable = 16 [json_name = "alarm-request-enable"];
                  uint32 alarm_request_threshold = 17 [json_name = "alarm-request-threshold"];
                  uint32 max_user_number = 18 [json_name = "max-user-number"];
                  bool alarm_user_limit_enable = 19 [json_name = "alarm-user-limit-enable"];
                  uint32 alarm_user_limit_threshold = 20 [json_name = "alarm-user-limit-threshold"];
                  message PacketsDiscardedStatistics {
                     uint32 drop_arp_packets_count = 1 [json_name = "drop-arp-packets-count"];
                     uint32 drop_ip_packets_count = 2 [json_name = "drop-ip-packets-count"];
                     uint32 drop_dhcp_request_conut_by_bind = 3 [json_name = "drop-dhcp-request-conut-by-bind"];
                     uint32 drop_dhcp_request_conut_by_mac_check = 4 [json_name = "drop-dhcp-request-conut-by-mac-check"];
                     uint32 drop_dhcp_reply_count = 5 [json_name = "drop-dhcp-reply-count"];
                  }
                  PacketsDiscardedStatistics packets_discarded_statistics = 21 [json_name = "packets-discarded-statistics"];
               }
               repeated VlanInterface vlan_interface = 1 [json_name = "vlan-interface"];
            }
            VlanInterfaces vlan_interfaces = 2 [json_name = "vlan-interfaces"];
            message VlanTrusts {
               message VlanTrust {
                  string if_name = 1 [json_name = "if-name"];
               }
               repeated VlanTrust vlan_trust = 1 [json_name = "vlan-trust"];
            }
            VlanTrusts vlan_trusts = 3 [json_name = "vlan-trusts"];
            message StaticBinds {
               message StaticBind {
                  string ip_address = 1 [json_name = "ip-address"];
                  uint32 cevlan_id = 2 [json_name = "cevlan-id"];
                  string mac_address = 3 [json_name = "mac-address"];
                  string if_name = 4 [json_name = "if-name"];
               }
               repeated StaticBind static_bind = 1 [json_name = "static-bind"];
            }
            StaticBinds static_binds = 4 [json_name = "static-binds"];
            message PacketDiscardedStatistics {
               uint32 drop_arp_packets_count = 1 [json_name = "drop-arp-packets-count"];
               uint32 drop_ip_packets_count = 2 [json_name = "drop-ip-packets-count"];
               uint32 drop_dhcp_request_count_by_bind = 3 [json_name = "drop-dhcp-request-count-by-bind"];
               uint32 drop_dhcp_request_count_by_mac_check = 4 [json_name = "drop-dhcp-request-count-by-mac-check"];
               uint32 drop_dhcp_reply_count = 5 [json_name = "drop-dhcp-reply-count"];
            }
            PacketDiscardedStatistics packet_discarded_statistics = 5 [json_name = "packet-discarded-statistics"];
         }
         DhcpSnoopingVlan dhcp_snooping_vlan = 17 [json_name = "dhcp-snooping-vlan"];
         message IgmpSnooping {
            message Global {
               string ssm_acl = 1 [json_name = "ssm-acl"];
               uint32 version = 2 [json_name = "version"];
               bool ssm_mapping_enable = 3 [json_name = "ssm-mapping-enable"];
               string ssm_mapping_policy = 4 [json_name = "ssm-mapping-policy"];
               bool report_suppress = 5 [json_name = "report-suppress"];
               bool static_group_suppress_dynamic_join = 6 [json_name = "static-group-suppress-dynamic-join"];
               bool enable = 7 [json_name = "enable"];
               string group_policy_acl = 8 [json_name = "group-policy-acl"];
               uint32 group_policy_version = 9 [json_name = "group-policy-version"];
               uint32 max_response_time = 10 [json_name = "max-response-time"];
               bool immediately_leave = 11 [json_name = "immediately-leave"];
               string immediately_leave_acl = 12 [json_name = "immediately-leave-acl"];
               bool proxy_enable = 13 [json_name = "proxy-enable"];
               enum MulticastGroupModel {
                  INVALID_ENUM_VALUE_MulticastGroupModel = 0;
                  MulticastGroupModel_ASMX_SSM = 1;
                  MulticastGroupModel_ASMX_ONLY = 2;
                  MulticastGroupModel_SSMX_ONLY = 3;
               };
               MulticastGroupModel multicast_group_model = 14 [json_name = "multicast-group-model"];
               string ip_policy_acl = 15 [json_name = "ip-policy-acl"];
               string query_ip_policy_acl = 16 [json_name = "query-ip-policy-acl"];
               bool querier_election = 17 [json_name = "querier-election"];
               bool proxy_router_protocol_pass = 18 [json_name = "proxy-router-protocol-pass"];
               bool querier_enable = 19 [json_name = "querier-enable"];
               uint32 query_interval = 20 [json_name = "query-interval"];
               bool require_router_alert = 21 [json_name = "require-router-alert"];
               bool send_router_alert = 22 [json_name = "send-router-alert"];
               uint32 robustness = 23 [json_name = "robustness"];
               uint32 last_member_query_interval = 24 [json_name = "last-member-query-interval"];
               uint32 router_aging_time = 25 [json_name = "router-aging-time"];
               bool router_port_learning = 26 [json_name = "router-port-learning"];
               uint32 source_life_time = 27 [json_name = "source-life-time"];
               bool pim_forward_to_router_port_only = 28 [json_name = "pim-forward-to-router-port-only"];
               message SsmMappingGroups {
                  message SsmMappingGroup {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
               }
               SsmMappingGroups ssm_mapping_groups = 29 [json_name = "ssm-mapping-groups"];
               message MulticastVlan {
                  string user_vlans = 1 [json_name = "user-vlans"];
                  string querier_election_user_vlans = 2 [json_name = "querier-election-user-vlans"];
                  message UserVlanStates {
                     message UserVlanState {
                        uint32 user_vlan = 1 [json_name = "user-vlan"];
                        bool snooping_state = 2 [json_name = "snooping-state"];
                        bool querier_elected = 3 [json_name = "querier-elected"];
                        string querier_address = 4 [json_name = "querier-address"];
                     }
                     repeated UserVlanState user_vlan_state = 1 [json_name = "user-vlan-state"];
                  }
                  UserVlanStates user_vlan_states = 3 [json_name = "user-vlan-states"];
               }
               MulticastVlan multicast_vlan = 30 [json_name = "multicast-vlan"];
               message IfMulticastVlans {
                  message IfMulticastVlan {
                     string interface = 1 [json_name = "interface"];
                     string user_vlans = 2 [json_name = "user-vlans"];
                  }
                  repeated IfMulticastVlan if_multicast_vlan = 1 [json_name = "if-multicast-vlan"];
               }
               IfMulticastVlans if_multicast_vlans = 31 [json_name = "if-multicast-vlans"];
               message Status {
                  uint32 current_entry_count = 1 [json_name = "current-entry-count"];
               }
               Status status = 32 [json_name = "status"];
               message Querier {
                  bool querier_state = 1 [json_name = "querier-state"];
                  string querier_address = 2 [json_name = "querier-address"];
               }
               Querier querier = 33 [json_name = "querier"];
               string send_query_source_address = 34 [json_name = "send-query-source-address"];
            }
            Global global = 1 [json_name = "global"];
            message GroupPorts {
               message GroupPort {
                  string group_address = 1 [json_name = "group-address"];
                  string source_address = 2 [json_name = "source-address"];
                  uint32 up_time = 3 [json_name = "up-time"];
                  enum EntryFlag {
                     EntryFlag_NONE = 0;
                     EntryFlag_PROTOCOL = 1;
                     EntryFlag_ACTIVE = 2;
                     EntryFlag_PROTOCOLX_ACTIVE = 3;
                     EntryFlag_FASTCHANNEL = 4;
                     EntryFlag_PROTOCOLX_FASTCHANNEL = 5;
                     EntryFlag_ACTIVEX_FASTCHANNEL = 6;
                     EntryFlag_PROTOCOLX_ACTIVEX_FASTCHANNEL = 7;
                  };
                  EntryFlag entry_flag = 4 [json_name = "entry-flag"];
                  enum SourceFlag {
                     SourceFlag_UNKNOWN = 0;
                     SourceFlag_IGMP = 1;
                     SourceFlag_ACTIVE = 2;
                     SourceFlag_IGMPX_ACTIVE = 3;
                     SourceFlag_FASTCHANNEL = 4;
                     SourceFlag_IGMPX_FASTCHANNEL = 5;
                     SourceFlag_ACTIVEX_FASTCHANNEL = 6;
                     SourceFlag_IGMPX_ACTIVEX_FASTCHANNEL = 7;
                     SourceFlag_MLD = 9;
                     SourceFlag_ACTIVE6 = 10;
                     SourceFlag_MLDX_ACTIVE6 = 11;
                     SourceFlag_FASTCHANNEL6 = 12;
                     SourceFlag_MLDX_FASTCHANNEL6 = 13;
                     SourceFlag_ACTIVE6X_FASTCHANNEL6 = 14;
                     SourceFlag_MLDX_ACTIVE6X_FASTCHANNEL6 = 15;
                     SourceFlag_TRILL = 16;
                     SourceFlag_IGMPX_TRILL = 17;
                     SourceFlag_ACTIVEX_TRILL = 18;
                     SourceFlag_IGMPX_ACTIVEX_TRILL = 19;
                  };
                  SourceFlag source_flag = 5 [json_name = "source-flag"];
                  message Ports {
                     message Port {
                        string interface = 1 [json_name = "interface"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        string port_flag = 4 [json_name = "port-flag"];
                     }
                     repeated Port port = 1 [json_name = "port"];
                  }
                  Ports ports = 6 [json_name = "ports"];
               }
               repeated GroupPort group_port = 1 [json_name = "group-port"];
            }
            GroupPorts group_ports = 2 [json_name = "group-ports"];
            message FastChannels {
               message FastChannel {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                  string source_address = 3 [json_name = "source-address"];
                  uint32 source_mask_length = 4 [json_name = "source-mask-length"];
               }
               repeated FastChannel fast_channel = 1 [json_name = "fast-channel"];
            }
            FastChannels fast_channels = 3 [json_name = "fast-channels"];
            message RouterPorts {
               message RouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 up_time = 2 [json_name = "up-time"];
                  uint32 expire_time = 3 [json_name = "expire-time"];
                  uint32 port_number = 4 [json_name = "port-number"];
                  enum Flag {
                     Flag_STATIC = 0;
                     Flag_DYNAMIC = 1;
                     Flag_MAPPING = 2;
                     Flag_STATICX_DYNAMIC = 3;
                     Flag_STATICX_MAPPING = 4;
                     Flag_DYNAMICX_MAPPING = 5;
                     Flag_STATICX_DYNAMICX_MAPPING = 6;
                  };
                  Flag flag = 5 [json_name = "flag"];
               }
               repeated RouterPort router_port = 1 [json_name = "router-port"];
            }
            RouterPorts router_ports = 4 [json_name = "router-ports"];
            message InterfaceGroups {
               message InterfaceGroup {
                  string interface = 1 [json_name = "interface"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum GroupTimer {
                           GroupTimer_NOTX_EXIST = 0;
                           GroupTimer_EXIST = 1;
                        };
                        GroupTimer group_timer = 4 [json_name = "group-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                        enum FilterMode {
                           FilterMode_EXCLUDE = 0;
                           FilterMode_INCLUDE = 1;
                           FilterMode_INVALID = 2;
                        };
                        FilterMode filter_mode = 7 [json_name = "filter-mode"];
                        enum CompatMode {
                           INVALID_ENUM_VALUE_CompatMode = 0;
                           CompatMode_V1 = 1;
                           CompatMode_V2 = 2;
                           CompatMode_V3 = 3;
                           CompatMode_INVALID = 255;
                        };
                        CompatMode compat_mode = 8 [json_name = "compat-mode"];
                        enum V1HostTimer {
                           V1HostTimer_NOTX_EXIST = 0;
                           V1HostTimer_EXIST = 1;
                        };
                        V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                        enum V2HostTimer {
                           V2HostTimer_NOTX_EXIST = 0;
                           V2HostTimer_EXIST = 1;
                        };
                        V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                        bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                        enum LastMemberQueryTimer {
                           LastMemberQueryTimer_NOTX_EXIST = 0;
                           LastMemberQueryTimer_EXIST = 1;
                        };
                        LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                        message Sources {
                           message Source {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 up_time = 2 [json_name = "up-time"];
                              uint32 expire_time = 3 [json_name = "expire-time"];
                              enum SourceTimer {
                                 SourceTimer_NOTX_EXIST = 0;
                                 SourceTimer_EXIST = 1;
                              };
                              SourceTimer source_timer = 4 [json_name = "source-timer"];
                              uint32 retran_count = 5 [json_name = "retran-count"];
                              bool last_member_query = 6 [json_name = "last-member-query"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 13 [json_name = "sources"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 2 [json_name = "groups"];
               }
               repeated InterfaceGroup interface_group = 1 [json_name = "interface-group"];
            }
            InterfaceGroups interface_groups = 5 [json_name = "interface-groups"];
            message Statistics {
               uint32 send_source_group_query_count = 1 [json_name = "send-source-group-query-count"];
               uint32 v1_report_count = 2 [json_name = "v1-report-count"];
               uint32 v2_report_count = 3 [json_name = "v2-report-count"];
               uint32 v3_report_count = 4 [json_name = "v3-report-count"];
               uint32 v1_query_count = 5 [json_name = "v1-query-count"];
               uint32 v2_query_count = 6 [json_name = "v2-query-count"];
               uint32 v3_query_cnt = 7 [json_name = "v3-query-cnt"];
               uint32 leave_count = 8 [json_name = "leave-count"];
               uint32 hello_count = 9 [json_name = "hello-count"];
               uint32 s_flag_query_count = 10 [json_name = "s-flag-query-count"];
               uint32 no_s_flag_query_count = 11 [json_name = "no-s-flag-query-count"];
               uint32 send_general_query_count = 12 [json_name = "send-general-query-count"];
               uint32 send_group_query_count = 13 [json_name = "send-group-query-count"];
            }
            Statistics statistics = 6 [json_name = "statistics"];
            message InvalidPacket {
               message GeneralCount {
                  uint32 fault_length = 1 [json_name = "fault-length"];
                  uint32 invalid_type_count = 2 [json_name = "invalid-type-count"];
                  uint32 bad_checksum = 3 [json_name = "bad-checksum"];
                  uint32 fault_router_alert = 4 [json_name = "fault-router-alert"];
               }
               GeneralCount general_count = 1 [json_name = "general-count"];
               message InvalidQueryCount {
                  uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                  uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
               }
               InvalidQueryCount invalid_query_count = 2 [json_name = "invalid-query-count"];
               message InvalidReportCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
                  uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
               }
               InvalidReportCount invalid_report_count = 3 [json_name = "invalid-report-count"];
               message InvalicLeaveCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
               }
               InvalicLeaveCount invalic_leave_count = 4 [json_name = "invalic-leave-count"];
               message InvalidHelloCount {
                  uint32 invalid_pim_version = 1 [json_name = "invalid-pim-version"];
                  uint32 fault_length = 2 [json_name = "fault-length"];
                  uint32 bad_holdtime_length = 3 [json_name = "bad-holdtime-length"];
                  uint32 bad_dr_priority_length = 4 [json_name = "bad-dr-priority-length"];
                  uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                  uint32 bad_generation_id_length = 6 [json_name = "bad-generation-id-length"];
                  uint32 bad_lan_prune_delay_length = 7 [json_name = "bad-lan-prune-delay-length"];
               }
               InvalidHelloCount invalid_hello_count = 5 [json_name = "invalid-hello-count"];
            }
            InvalidPacket invalid_packet = 7 [json_name = "invalid-packet"];
            message MulticastVlan {
               string user_vlans = 1 [json_name = "user-vlans"];
               string querier_election_user_vlans = 2 [json_name = "querier-election-user-vlans"];
               message UserVlanStates {
                  message UserVlanState {
                     uint32 user_vlan = 1 [json_name = "user-vlan"];
                     bool snooping_state = 2 [json_name = "snooping-state"];
                     bool querier_elected = 3 [json_name = "querier-elected"];
                     string querier_address = 4 [json_name = "querier-address"];
                  }
                  repeated UserVlanState user_vlan_state = 1 [json_name = "user-vlan-state"];
               }
               UserVlanStates user_vlan_states = 3 [json_name = "user-vlan-states"];
               bool send_query_prune_source_port = 4 [json_name = "send-query-prune-source-port"];
            }
            MulticastVlan multicast_vlan = 8 [json_name = "multicast-vlan"];
            message SsmMappingGroups {
               message SsmMappingGroup {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 mask_length = 2 [json_name = "mask-length"];
                  string source_address = 3 [json_name = "source-address"];
               }
               repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
            }
            SsmMappingGroups ssm_mapping_groups = 9 [json_name = "ssm-mapping-groups"];
         }
         IgmpSnooping igmp_snooping = 18 [json_name = "igmp-snooping"];
         message MacFlapping {
            message LoopDetect {
               uint32 loop_times = 1 [json_name = "loop-times"];
               uint32 detect_cycle = 2 [json_name = "detect-cycle"];
               uint32 cycles = 3 [json_name = "cycles"];
               enum Action {
                  INVALID_ENUM_VALUE_Action = 0;
                  Action_BLOCK = 1;
                  Action_ALARM = 2;
               };
               Action action = 4 [json_name = "action"];
               uint32 retry_times = 5 [json_name = "retry-times"];
               uint32 block_time = 6 [json_name = "block-time"];
            }
            LoopDetect loop_detect = 1 [json_name = "loop-detect"];
            message PreciseBlock {
            }
            PreciseBlock precise_block = 2 [json_name = "precise-block"];
         }
         MacFlapping mac_flapping = 19 [json_name = "mac-flapping"];
         message MacAddresss {
            message MacAddress {
               string address = 1 [json_name = "address"];
               message MacType_BlackHole {
                  bool black_hole = 1 [json_name = "black-hole"];
               }
               message MacType_Static {
                  string out_interface_name = 1 [json_name = "out-interface-name"];
                  bool ce_default = 2 [json_name = "ce-default"];
                  uint32 ce_vlan_id = 3 [json_name = "ce-vlan-id"];
               }
               oneof MacType {
                  MacType_BlackHole mac_type_black_hole = 2 [json_name = "black-hole"];
                  MacType_Static mac_type_static = 3 [json_name = "static"];
               }
            }
            repeated MacAddress mac_address = 1 [json_name = "mac-address"];
         }
         MacAddresss mac_addresss = 20 [json_name = "mac-addresss"];
         message MacLimit {
            uint32 maximum = 1 [json_name = "maximum"];
            uint32 rate = 2 [json_name = "rate"];
            enum Action {
               Action_DISCARD = 0;
               Action_FORWARD = 1;
            };
            Action action = 3 [json_name = "action"];
            enum Alarm {
               Alarm_DISABLE = 0;
               Alarm_ENABLE = 1;
            };
            Alarm alarm = 4 [json_name = "alarm"];
            uint32 up_threshold = 5 [json_name = "up-threshold"];
            uint32 down_threshold = 6 [json_name = "down-threshold"];
         }
         MacLimit mac_limit = 21 [json_name = "mac-limit"];
         message MulticastForward {
            message PortIsolateState {
               bool enable = 1 [json_name = "enable"];
            }
            PortIsolateState port_isolate_state = 1 [json_name = "port-isolate-state"];
            message TrunkLoadBalanceEnable {
               bool enable = 1 [json_name = "enable"];
            }
            TrunkLoadBalanceEnable trunk_load_balance_enable = 2 [json_name = "trunk-load-balance-enable"];
         }
         MulticastForward multicast_forward = 22 [json_name = "multicast-forward"];
         message MacHops {
            message MacHop {
               string mac_address = 1 [json_name = "mac-address"];
               string interface_name = 2 [json_name = "interface-name"];
               string detect_time = 3 [json_name = "detect-time"];
            }
            repeated MacHop mac_hop = 1 [json_name = "mac-hop"];
         }
         MacHops mac_hops = 23 [json_name = "mac-hops"];
         message LoopDetectSuppression {
            string interface_name = 1 [json_name = "interface-name"];
            uint32 cir = 2 [json_name = "cir"];
            string time = 3 [json_name = "time"];
            string state = 4 [json_name = "state"];
            string slot = 5 [json_name = "slot"];
         }
         LoopDetectSuppression loop_detect_suppression = 24 [json_name = "loop-detect-suppression"];
         message UnknownUnicastDiscard {
            enum Discard {
               Discard_DISABLE = 0;
               Discard_ENABLE = 1;
            };
            Discard discard = 1 [json_name = "discard"];
            enum MacLearningEnable {
               MacLearningEnable_DISABLE = 0;
               MacLearningEnable_ENABLE = 1;
            };
            MacLearningEnable mac_learning_enable = 2 [json_name = "mac-learning-enable"];
         }
         UnknownUnicastDiscard unknown_unicast_discard = 25 [json_name = "unknown-unicast-discard"];
         message IpSubnetVlans {
            message IpSubnetVlan {
               uint32 index = 1 [json_name = "index"];
               string ip_prefix = 2 [json_name = "ip-prefix"];
               uint32 priority = 3 [json_name = "priority"];
            }
            repeated IpSubnetVlan ip_subnet_vlan = 1 [json_name = "ip-subnet-vlan"];
         }
         IpSubnetVlans ip_subnet_vlans = 26 [json_name = "ip-subnet-vlans"];
         message Statistics {
            uint64 inbound_packets = 1 [json_name = "inbound-packets"];
            uint64 inbound_bytes = 2 [json_name = "inbound-bytes"];
            uint64 outbound_packets = 3 [json_name = "outbound-packets"];
            uint64 outbound_bytes = 4 [json_name = "outbound-bytes"];
            uint64 inbound_unicasts = 5 [json_name = "inbound-unicasts"];
            uint64 inbound_multicasts = 6 [json_name = "inbound-multicasts"];
            uint64 inbound_broadcasts = 7 [json_name = "inbound-broadcasts"];
            uint64 inbound_unknown_unicast_drops = 8 [json_name = "inbound-unknown-unicast-drops"];
            uint64 inbound_unknown_multicast_drops = 9 [json_name = "inbound-unknown-multicast-drops"];
            uint64 inbound_broadcast_drops = 10 [json_name = "inbound-broadcast-drops"];
            uint64 outbound_unicasts = 11 [json_name = "outbound-unicasts"];
            uint64 outbound_multicasts = 12 [json_name = "outbound-multicasts"];
            uint64 outbound_broadcasts = 13 [json_name = "outbound-broadcasts"];
         }
         Statistics statistics = 27 [json_name = "statistics"];
         message TrafficPolicyApplys {
            message TrafficPolicyApply {
               string policy_name = 1 [json_name = "policy-name"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 2 [json_name = "direction"];
            }
            repeated TrafficPolicyApply traffic_policy_apply = 1 [json_name = "traffic-policy-apply"];
         }
         TrafficPolicyApplys traffic_policy_applys = 28 [json_name = "traffic-policy-applys"];
         message ArpIpPool {
            string ip_begin = 1 [json_name = "ip-begin"];
            string ip_end = 2 [json_name = "ip-end"];
         }
         ArpIpPool arp_ip_pool = 29 [json_name = "arp-ip-pool"];
         message ArpSecurity {
            bool dynamic_enable = 1 [json_name = "dynamic-enable"];
            bool l2proxy_enable = 2 [json_name = "l2proxy-enable"];
            uint32 l2proxy_expire_time = 3 [json_name = "l2proxy-expire-time"];
            bool l2proxy_dyn_learn = 4 [json_name = "l2proxy-dyn-learn"];
            uint32 l2proxy_max_num = 5 [json_name = "l2proxy-max-num"];
            bool dhcpsnoop_enable = 6 [json_name = "dhcpsnoop-enable"];
            bool snooping_enable = 7 [json_name = "snooping-enable"];
            message CheckItems {
               bool interface = 1 [json_name = "interface"];
               bool ip_check = 2 [json_name = "ip-check"];
               bool mac_check = 3 [json_name = "mac-check"];
            }
            CheckItems check_items = 8 [json_name = "check-items"];
         }
         ArpSecurity arp_security = 30 [json_name = "arp-security"];
         message ArpRateLimit {
            enum SuppressType {
               INVALID_ENUM_VALUE_SuppressType = 0;
               SuppressType_ARP = 1;
               SuppressType_ARPX_MISS = 2;
            };
            SuppressType suppress_type = 1 [json_name = "suppress-type"];
            uint32 suppress_value = 2 [json_name = "suppress-value"];
         }
         ArpRateLimit arp_rate_limit = 31 [json_name = "arp-rate-limit"];
         message ArpMff {
            bool mff_enable = 1 [json_name = "mff-enable"];
            bool gateway_detect_enable = 2 [json_name = "gateway-detect-enable"];
            bool dynlearn_enable = 3 [json_name = "dynlearn-enable"];
            uint32 max_user_num = 4 [json_name = "max-user-num"];
            string static_gateway_ipaddr = 5 [json_name = "static-gateway-ipaddr"];
            bool trans_req_enable = 6 [json_name = "trans-req-enable"];
            message ServerIps {
               message ServerIp {
                  string ip_addr = 1 [json_name = "ip-addr"];
               }
               repeated ServerIp server_ip = 1 [json_name = "server-ip"];
            }
            ServerIps server_ips = 7 [json_name = "server-ips"];
         }
         ArpMff arp_mff = 32 [json_name = "arp-mff"];
         message ArpL2Proxys {
            message ArpL2Proxy {
               string ip_addr = 1 [json_name = "ip-addr"];
               string if_name = 2 [json_name = "if-name"];
               string mac_addr = 3 [json_name = "mac-addr"];
               uint32 aging_time = 4 [json_name = "aging-time"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_STATIC = 1;
                  Status_DYNAMIC = 2;
                  Status_CONFLICT = 3;
               };
               Status status = 5 [json_name = "status"];
            }
            repeated ArpL2Proxy arp_l2proxy = 1 [json_name = "arp-l2proxy"];
         }
         ArpL2Proxys arp_l2proxys = 33 [json_name = "arp-l2proxys"];
         message ArpStatisticss {
            message ArpStatistics {
               string gateway_ip = 1 [json_name = "gateway-ip"];
               string gateway_mac = 2 [json_name = "gateway-mac"];
               message UserEntries {
                  message UserEntry {
                     string ip_addr = 1 [json_name = "ip-addr"];
                     string mac_addr = 2 [json_name = "mac-addr"];
                     string if_name = 3 [json_name = "if-name"];
                     enum UserType {
                        INVALID_ENUM_VALUE_UserType = 0;
                        UserType_STATIC = 1;
                        UserType_DYNAMIC = 2;
                     };
                     UserType user_type = 4 [json_name = "user-type"];
                  }
                  repeated UserEntry user_entry = 1 [json_name = "user-entry"];
               }
               UserEntries user_entries = 3 [json_name = "user-entries"];
            }
            repeated ArpStatistics arp_statistics = 1 [json_name = "arp-statistics"];
         }
         ArpStatisticss arp_statisticss = 34 [json_name = "arp-statisticss"];
         message Dhcpv6RelayVlan {
            message Option18 {
               bool insert_enable = 1 [json_name = "insert-enable"];
               bool rebuild_enable = 2 [json_name = "rebuild-enable"];
               string user_defined = 3 [json_name = "user-defined"];
            }
            Option18 option18 = 1 [json_name = "option18"];
            message Option37 {
               bool insert_enable = 1 [json_name = "insert-enable"];
               bool rebuild_enable = 2 [json_name = "rebuild-enable"];
               string user_defined = 3 [json_name = "user-defined"];
            }
            Option37 option37 = 2 [json_name = "option37"];
         }
         Dhcpv6RelayVlan dhcpv6_relay_vlan = 35 [json_name = "dhcpv6-relay-vlan"];
         message MldSnooping {
            message Global {
               string ssm_acl = 1 [json_name = "ssm-acl"];
               uint32 version = 2 [json_name = "version"];
               bool ssm_mapping_enable = 3 [json_name = "ssm-mapping-enable"];
               string ssm_mapping_policy = 4 [json_name = "ssm-mapping-policy"];
               enum ForwardMode {
                  ForwardMode_IP = 0;
                  ForwardMode_MAC = 1;
               };
               ForwardMode forward_mode = 5 [json_name = "forward-mode"];
               bool report_suppress = 6 [json_name = "report-suppress"];
               bool static_group_suppress_dynamic_join = 7 [json_name = "static-group-suppress-dynamic-join"];
               bool enable = 8 [json_name = "enable"];
               string group_policy_acl = 9 [json_name = "group-policy-acl"];
               uint32 group_policy_version = 10 [json_name = "group-policy-version"];
               uint32 max_response_time = 11 [json_name = "max-response-time"];
               bool immediately_leave = 12 [json_name = "immediately-leave"];
               string immediately_leave_acl = 13 [json_name = "immediately-leave-acl"];
               bool proxy_enable = 14 [json_name = "proxy-enable"];
               enum MulticastGroupModel {
                  INVALID_ENUM_VALUE_MulticastGroupModel = 0;
                  MulticastGroupModel_ASMX_SSM = 1;
                  MulticastGroupModel_ASMX_ONLY = 2;
                  MulticastGroupModel_SSMX_ONLY = 3;
               };
               MulticastGroupModel multicast_group_model = 15 [json_name = "multicast-group-model"];
               string ip_policy_acl = 16 [json_name = "ip-policy-acl"];
               string query_ip_policy_acl = 17 [json_name = "query-ip-policy-acl"];
               bool querier_election = 18 [json_name = "querier-election"];
               bool proxy_router_protocol_pass = 19 [json_name = "proxy-router-protocol-pass"];
               bool querier_enable = 20 [json_name = "querier-enable"];
               uint32 query_interval = 21 [json_name = "query-interval"];
               bool require_router_alert = 22 [json_name = "require-router-alert"];
               bool send_router_alert = 23 [json_name = "send-router-alert"];
               uint32 robustness = 24 [json_name = "robustness"];
               uint32 last_member_query_interval = 25 [json_name = "last-member-query-interval"];
               uint32 router_aging_time = 26 [json_name = "router-aging-time"];
               bool router_port_learning = 27 [json_name = "router-port-learning"];
               uint32 source_life_time = 28 [json_name = "source-life-time"];
               bool pim_forward_to_router_port_only = 29 [json_name = "pim-forward-to-router-port-only"];
               message SsmMappingGroups {
                  message SsmMappingGroup {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
               }
               SsmMappingGroups ssm_mapping_groups = 30 [json_name = "ssm-mapping-groups"];
               message Status {
                  uint32 current_entry_count = 1 [json_name = "current-entry-count"];
               }
               Status status = 31 [json_name = "status"];
               message Querier {
                  bool querier_state = 1 [json_name = "querier-state"];
                  string querier_address = 2 [json_name = "querier-address"];
               }
               Querier querier = 32 [json_name = "querier"];
            }
            Global global = 1 [json_name = "global"];
            message FastChannels {
               message FastChannel {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                  string source_address = 3 [json_name = "source-address"];
                  uint32 source_mask_length = 4 [json_name = "source-mask-length"];
               }
               repeated FastChannel fast_channel = 1 [json_name = "fast-channel"];
            }
            FastChannels fast_channels = 2 [json_name = "fast-channels"];
            message RouterPorts {
               message RouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 up_time = 2 [json_name = "up-time"];
                  uint32 expire_time = 3 [json_name = "expire-time"];
                  uint32 port_number = 4 [json_name = "port-number"];
                  enum Flag {
                     Flag_STATIC = 0;
                     Flag_DYNAMIC = 1;
                     Flag_MAPPING = 2;
                     Flag_STATICX_DYNAMIC = 3;
                     Flag_STATICX_MAPPING = 4;
                     Flag_DYNAMICX_MAPPING = 5;
                     Flag_STATICX_DYNAMICX_MAPPING = 6;
                  };
                  Flag flag = 5 [json_name = "flag"];
               }
               repeated RouterPort router_port = 1 [json_name = "router-port"];
            }
            RouterPorts router_ports = 3 [json_name = "router-ports"];
            message InterfaceGroups {
               message InterfaceGroup {
                  string interface = 1 [json_name = "interface"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum GroupTimer {
                           GroupTimer_NOTX_EXIST = 0;
                           GroupTimer_EXIST = 1;
                        };
                        GroupTimer group_timer = 4 [json_name = "group-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                        enum FilterMode {
                           FilterMode_EXCLUDE = 0;
                           FilterMode_INCLUDE = 1;
                           FilterMode_INVALID = 2;
                        };
                        FilterMode filter_mode = 7 [json_name = "filter-mode"];
                        enum CompatMode {
                           INVALID_ENUM_VALUE_CompatMode = 0;
                           CompatMode_V1 = 1;
                           CompatMode_V2 = 2;
                           CompatMode_V3 = 3;
                           CompatMode_INVALID = 255;
                        };
                        CompatMode compat_mode = 8 [json_name = "compat-mode"];
                        enum V1HostTimer {
                           V1HostTimer_NOTX_EXIST = 0;
                           V1HostTimer_EXIST = 1;
                        };
                        V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                        enum V2HostTimer {
                           V2HostTimer_NOTX_EXIST = 0;
                           V2HostTimer_EXIST = 1;
                        };
                        V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                        bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                        enum LastMemberQueryTimer {
                           LastMemberQueryTimer_NOTX_EXIST = 0;
                           LastMemberQueryTimer_EXIST = 1;
                        };
                        LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                        message Sources {
                           message Source {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 up_time = 2 [json_name = "up-time"];
                              uint32 expire_time = 3 [json_name = "expire-time"];
                              enum SourceTimer {
                                 SourceTimer_NOTX_EXIST = 0;
                                 SourceTimer_EXIST = 1;
                              };
                              SourceTimer source_timer = 4 [json_name = "source-timer"];
                              uint32 retran_count = 5 [json_name = "retran-count"];
                              bool last_member_query = 6 [json_name = "last-member-query"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 13 [json_name = "sources"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 2 [json_name = "groups"];
               }
               repeated InterfaceGroup interface_group = 1 [json_name = "interface-group"];
            }
            InterfaceGroups interface_groups = 4 [json_name = "interface-groups"];
            message GroupPorts {
               message GroupPort {
                  string group_address = 1 [json_name = "group-address"];
                  string source_address = 2 [json_name = "source-address"];
                  uint32 up_time = 3 [json_name = "up-time"];
                  enum EntryFlag {
                     EntryFlag_NONE = 0;
                     EntryFlag_PROTOCOL = 1;
                     EntryFlag_ACTIVE = 2;
                     EntryFlag_PROTOCOLX_ACTIVE = 3;
                     EntryFlag_FASTCHANNEL = 4;
                     EntryFlag_PROTOCOLX_FASTCHANNEL = 5;
                     EntryFlag_ACTIVEX_FASTCHANNEL = 6;
                     EntryFlag_PROTOCOLX_ACTIVEX_FASTCHANNEL = 7;
                  };
                  EntryFlag entry_flag = 4 [json_name = "entry-flag"];
                  enum SourceFlag {
                     SourceFlag_UNKNOWN = 0;
                     SourceFlag_IGMP = 1;
                     SourceFlag_ACTIVE = 2;
                     SourceFlag_IGMPX_ACTIVE = 3;
                     SourceFlag_FASTCHANNEL = 4;
                     SourceFlag_IGMPX_FASTCHANNEL = 5;
                     SourceFlag_ACTIVEX_FASTCHANNEL = 6;
                     SourceFlag_IGMPX_ACTIVEX_FASTCHANNEL = 7;
                     SourceFlag_MLD = 9;
                     SourceFlag_ACTIVE6 = 10;
                     SourceFlag_MLDX_ACTIVE6 = 11;
                     SourceFlag_FASTCHANNEL6 = 12;
                     SourceFlag_MLDX_FASTCHANNEL6 = 13;
                     SourceFlag_ACTIVE6X_FASTCHANNEL6 = 14;
                     SourceFlag_MLDX_ACTIVE6X_FASTCHANNEL6 = 15;
                     SourceFlag_TRILL = 16;
                     SourceFlag_IGMPX_TRILL = 17;
                     SourceFlag_ACTIVEX_TRILL = 18;
                     SourceFlag_IGMPX_ACTIVEX_TRILL = 19;
                  };
                  SourceFlag source_flag = 5 [json_name = "source-flag"];
                  message Ports {
                     message Port {
                        string interface = 1 [json_name = "interface"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        string port_flag = 4 [json_name = "port-flag"];
                     }
                     repeated Port port = 1 [json_name = "port"];
                  }
                  Ports ports = 6 [json_name = "ports"];
               }
               repeated GroupPort group_port = 1 [json_name = "group-port"];
            }
            GroupPorts group_ports = 5 [json_name = "group-ports"];
            message Statistics {
               uint32 send_source_group_query_count = 1 [json_name = "send-source-group-query-count"];
               uint32 v1_report_count = 2 [json_name = "v1-report-count"];
               uint32 v2_report_count = 3 [json_name = "v2-report-count"];
               uint32 v3_report_count = 4 [json_name = "v3-report-count"];
               uint32 v1_query_count = 5 [json_name = "v1-query-count"];
               uint32 v2_query_count = 6 [json_name = "v2-query-count"];
               uint32 v3_query_cnt = 7 [json_name = "v3-query-cnt"];
               uint32 leave_count = 8 [json_name = "leave-count"];
               uint32 hello_count = 9 [json_name = "hello-count"];
               uint32 s_flag_query_count = 10 [json_name = "s-flag-query-count"];
               uint32 no_s_flag_query_count = 11 [json_name = "no-s-flag-query-count"];
               uint32 send_general_query_count = 12 [json_name = "send-general-query-count"];
               uint32 send_group_query_count = 13 [json_name = "send-group-query-count"];
            }
            Statistics statistics = 6 [json_name = "statistics"];
            message InvalidPacket {
               message GeneralCount {
                  uint32 fault_length = 1 [json_name = "fault-length"];
                  uint32 invalid_type_count = 2 [json_name = "invalid-type-count"];
                  uint32 bad_checksum = 3 [json_name = "bad-checksum"];
                  uint32 fault_router_alert = 4 [json_name = "fault-router-alert"];
               }
               GeneralCount general_count = 1 [json_name = "general-count"];
               message InvalidQueryCount {
                  uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                  uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
               }
               InvalidQueryCount invalid_query_count = 2 [json_name = "invalid-query-count"];
               message InvalidReportCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
                  uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
               }
               InvalidReportCount invalid_report_count = 3 [json_name = "invalid-report-count"];
               message InvalicLeaveCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
               }
               InvalicLeaveCount invalic_leave_count = 4 [json_name = "invalic-leave-count"];
               message InvalidHelloCount {
                  uint32 invalid_pim_version = 1 [json_name = "invalid-pim-version"];
                  uint32 fault_length = 2 [json_name = "fault-length"];
                  uint32 bad_holdtime_length = 3 [json_name = "bad-holdtime-length"];
                  uint32 bad_dr_priority_length = 4 [json_name = "bad-dr-priority-length"];
                  uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                  uint32 bad_generation_id_length = 6 [json_name = "bad-generation-id-length"];
                  uint32 bad_lan_prune_delay_length = 7 [json_name = "bad-lan-prune-delay-length"];
               }
               InvalidHelloCount invalid_hello_count = 5 [json_name = "invalid-hello-count"];
            }
            InvalidPacket invalid_packet = 7 [json_name = "invalid-packet"];
            message SsmMappingGroups {
               message SsmMappingGroup {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 mask_length = 2 [json_name = "mask-length"];
                  string source_address = 3 [json_name = "source-address"];
               }
               repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
            }
            SsmMappingGroups ssm_mapping_groups = 8 [json_name = "ssm-mapping-groups"];
         }
         MldSnooping mld_snooping = 36 [json_name = "mld-snooping"];
         message MulticastForwardTlbStatistics {
            message MulticastForwardTlbStatistic {
               string source_address = 1 [json_name = "source-address"];
               string group_address = 2 [json_name = "group-address"];
               enum ForwardingMode {
                  INVALID_ENUM_VALUE_ForwardingMode = 0;
                  ForwardingMode_IP = 1;
                  ForwardingMode_MAC = 2;
               };
               ForwardingMode forwarding_mode = 3 [json_name = "forwarding-mode"];
               enum Sg {
                  INVALID_ENUM_VALUE_Sg = 0;
                  Sg_SG = 1;
                  Sg_SOURCEX_WILDCARD = 2;
                  Sg_RTX_PORT = 3;
               };
               Sg sg = 4 [json_name = "sg"];
               uint32 port_cnt = 5 [json_name = "port-cnt"];
            }
            repeated MulticastForwardTlbStatistic multicast_forward_tlb_statistic = 1 [json_name = "multicast-forward-tlb-statistic"];
         }
         MulticastForwardTlbStatistics multicast_forward_tlb_statistics = 37 [json_name = "multicast-forward-tlb-statistics"];
         message MLag {
            enum PeerlinkVlanMode {
               PeerlinkVlanMode_NORMALVLAN = 0;
               PeerlinkVlanMode_PEERLINKVLAN = 1;
            };
            PeerlinkVlanMode peerlink_vlan_mode = 1 [json_name = "peerlink-vlan-mode"];
         }
         MLag m_lag = 38 [json_name = "m-lag"];
         message Mirror {
            message ObservePorts {
               message ObservePort {
                  uint32 observe_index = 1 [json_name = "observe-index"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated ObservePort observe_port = 1 [json_name = "observe-port"];
            }
            ObservePorts observe_ports = 1 [json_name = "observe-ports"];
            message ObserveGroups {
               message ObserveGroup {
                  uint32 group_id = 1 [json_name = "group-id"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated ObserveGroup observe_group = 1 [json_name = "observe-group"];
            }
            ObserveGroups observe_groups = 2 [json_name = "observe-groups"];
         }
         Mirror mirror = 39 [json_name = "mirror"];
         message VlanHubMode {
         }
         VlanHubMode vlan_hub_mode = 40 [json_name = "vlan-hub-mode"];
         message ArpSnooping {
            bool enable = 1 [json_name = "enable"];
         }
         ArpSnooping arp_snooping = 41 [json_name = "arp-snooping"];
         message Dai {
            bool enable = 1 [json_name = "enable"];
            message CheckItems {
               bool interface_check = 1 [json_name = "interface-check"];
               bool ip_check = 2 [json_name = "ip-check"];
               bool mac_check = 3 [json_name = "mac-check"];
            }
            CheckItems check_items = 2 [json_name = "check-items"];
            bool alarm_enable = 3 [json_name = "alarm-enable"];
            uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
         }
         Dai dai = 42 [json_name = "dai"];
         message Ipsg {
            bool ipv4_check_enable = 1 [json_name = "ipv4-check-enable"];
            bool ipv6_check_enable = 2 [json_name = "ipv6-check-enable"];
            bool alarm_enable = 3 [json_name = "alarm-enable"];
            uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
            message CheckItems {
               bool interface_check = 1 [json_name = "interface-check"];
               bool ip_check = 2 [json_name = "ip-check"];
               bool mac_check = 3 [json_name = "mac-check"];
            }
            CheckItems check_items = 5 [json_name = "check-items"];
         }
         Ipsg ipsg = 43 [json_name = "ipsg"];
         message VlanStatistic {
            uint64 inbound_packets = 1 [json_name = "inbound-packets"];
            uint64 outbound_packets = 2 [json_name = "outbound-packets"];
            uint64 inbound_bytes = 3 [json_name = "inbound-bytes"];
            uint64 outbound_bytes = 4 [json_name = "outbound-bytes"];
            uint64 inbound_unicasts = 5 [json_name = "inbound-unicasts"];
            uint64 inbound_broadcasts = 6 [json_name = "inbound-broadcasts"];
            uint64 inbound_multicasts = 7 [json_name = "inbound-multicasts"];
            uint64 inbound_unkunicast_drops = 8 [json_name = "inbound-unkunicast-drops"];
            uint64 inbound_unkmulticast_drops = 9 [json_name = "inbound-unkmulticast-drops"];
            uint64 inbound_brdcast_drops = 10 [json_name = "inbound-brdcast-drops"];
            uint64 outbound_unicasts = 11 [json_name = "outbound-unicasts"];
            uint64 outbound_broadcasts = 12 [json_name = "outbound-broadcasts"];
            uint64 outbound_multicasts = 13 [json_name = "outbound-multicasts"];
         }
         VlanStatistic vlan_statistic = 44 [json_name = "vlan-statistic"];
      }
      repeated Vlan3 vlan3 = 1 [json_name = "vlan"];
   }
   Vlans vlans = 1 [json_name = "vlans"];
   message Instances {
      message Instance {
         uint32 id = 1 [json_name = "id"];
         string vlan_list = 2 [json_name = "vlan-list"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 2 [json_name = "instances"];
   message DefaultInstance2 {
      string vlan_list = 1 [json_name = "vlan-list"];
   }
   DefaultInstance2 default_instance2 = 3 [json_name = "default-instance"];
   message DynamicVlans {
      message DynamicVlan {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         enum Status {
            Status_DOWN = 0;
            Status_UP = 1;
         };
         Status status = 3 [json_name = "status"];
         message ActivePorts {
            message ActivePort {
               string interface_name = 1 [json_name = "interface-name"];
               enum AccessType {
                  INVALID_ENUM_VALUE_AccessType = 0;
                  AccessType_ACCESS = 1;
                  AccessType_TRUNK = 2;
                  AccessType_HYBRID = 3;
                  AccessType_DOT1QTUNNEL = 4;
               };
               AccessType access_type = 2 [json_name = "access-type"];
               enum TagMode {
                  TagMode_UNTAG = 0;
                  TagMode_TAG = 1;
               };
               TagMode tag_mode = 3 [json_name = "tag-mode"];
            }
            repeated ActivePort active_port = 1 [json_name = "active-port"];
         }
         ActivePorts active_ports = 4 [json_name = "active-ports"];
      }
      repeated DynamicVlan dynamic_vlan = 1 [json_name = "dynamic-vlan"];
   }
   DynamicVlans dynamic_vlans = 4 [json_name = "dynamic-vlans"];
}


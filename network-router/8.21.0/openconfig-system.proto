syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module openconfig-system
// revision 2018-01-21
// revision 2017-12-15
// revision 2017-09-18
// revision 2017-07-06
// revision 2017-01-29
// namespace http://openconfig.net/yang/system

package openconfig_system;

message System {
   message Aaa {
      message Accounting {
         message Config {
            repeated string accounting_method = 1 [json_name = "accounting-method"];
         }
         Config config = 1 [json_name = "config"];
         message Events {
            message Event {
               message Config {
                  string event_type = 1 [json_name = "event-type"];
                  enum Record {
                     Record_START_STOP = 0;
                     Record_STOP = 1;
                  };
                  Record record = 2 [json_name = "record"];
               }
               Config config = 1 [json_name = "config"];
               string event_type = 2 [json_name = "event-type"];
               message State {
                  string event_type = 1 [json_name = "event-type"];
                  enum Record {
                     Record_START_STOP = 0;
                     Record_STOP = 1;
                  };
                  Record record = 2 [json_name = "record"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Event event = 1 [json_name = "event"];
         }
         Events events = 2 [json_name = "events"];
         message State {
            repeated string accounting_method = 1 [json_name = "accounting-method"];
         }
         State state = 3 [json_name = "state"];
      }
      Accounting accounting = 1 [json_name = "accounting"];
      message Authentication {
         message AdminUser {
            message Config {
               string admin_password = 1 [json_name = "admin-password"];
               string admin_password_hashed = 2 [json_name = "admin-password-hashed"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string admin_password = 1 [json_name = "admin-password"];
               string admin_password_hashed = 2 [json_name = "admin-password-hashed"];
               string admin_username = 3 [json_name = "admin-username"];
            }
            State state = 2 [json_name = "state"];
         }
         AdminUser admin_user = 1 [json_name = "admin-user"];
         message Config {
            repeated string authentication_method = 1 [json_name = "authentication-method"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            repeated string authentication_method = 1 [json_name = "authentication-method"];
         }
         State state = 3 [json_name = "state"];
         message Users {
            message User {
               message Config {
                  string password = 1 [json_name = "password"];
                  string password_hashed = 2 [json_name = "password-hashed"];
                  string role = 3 [json_name = "role"];
                  string ssh_key = 4 [json_name = "ssh-key"];
                  string username = 5 [json_name = "username"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  string password = 1 [json_name = "password"];
                  string password_hashed = 2 [json_name = "password-hashed"];
                  string role = 3 [json_name = "role"];
                  string ssh_key = 4 [json_name = "ssh-key"];
                  string username = 5 [json_name = "username"];
               }
               State state = 2 [json_name = "state"];
               string username = 3 [json_name = "username"];
            }
            repeated User user = 1 [json_name = "user"];
         }
         Users users = 4 [json_name = "users"];
      }
      Authentication authentication = 2 [json_name = "authentication"];
      message Authorization {
         message Config {
            repeated string authorization_method = 1 [json_name = "authorization-method"];
         }
         Config config = 1 [json_name = "config"];
         message Events {
            message Event {
               message Config {
                  string event_type = 1 [json_name = "event-type"];
               }
               Config config = 1 [json_name = "config"];
               string event_type = 2 [json_name = "event-type"];
               message State {
                  string event_type = 1 [json_name = "event-type"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Event event = 1 [json_name = "event"];
         }
         Events events = 2 [json_name = "events"];
         message State {
            repeated string authorization_method = 1 [json_name = "authorization-method"];
         }
         State state = 3 [json_name = "state"];
      }
      Authorization authorization = 3 [json_name = "authorization"];
      message Config {
      }
      Config config = 4 [json_name = "config"];
      message ServerGroups {
         message ServerGroup {
            message Config {
               string name = 1 [json_name = "name"];
               string type = 2 [json_name = "type"];
            }
            Config config = 1 [json_name = "config"];
            string name = 2 [json_name = "name"];
            message Servers {
               message Server {
                  string address = 1 [json_name = "address"];
                  message Config {
                     string address = 1 [json_name = "address"];
                     string name = 2 [json_name = "name"];
                     uint32 timeout = 3 [json_name = "timeout"];
                  }
                  Config config = 2 [json_name = "config"];
                  message Radius {
                     message Config {
                        uint32 acct_port = 1 [json_name = "acct-port"];
                        uint32 auth_port = 2 [json_name = "auth-port"];
                        uint32 retransmit_attempts = 3 [json_name = "retransmit-attempts"];
                        string secret_key = 4 [json_name = "secret-key"];
                        string source_address = 5 [json_name = "source-address"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 acct_port = 1 [json_name = "acct-port"];
                        uint32 auth_port = 2 [json_name = "auth-port"];
                        message Counters {
                           uint64 access_accepts = 1 [json_name = "access-accepts"];
                           uint64 access_rejects = 2 [json_name = "access-rejects"];
                           uint64 retried_access_requests = 3 [json_name = "retried-access-requests"];
                           uint64 timeout_access_requests = 4 [json_name = "timeout-access-requests"];
                        }
                        Counters counters = 3 [json_name = "counters"];
                        uint32 retransmit_attempts = 4 [json_name = "retransmit-attempts"];
                        string secret_key = 5 [json_name = "secret-key"];
                        string source_address = 6 [json_name = "source-address"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Radius radius = 3 [json_name = "radius"];
                  message State {
                     string address = 1 [json_name = "address"];
                     uint64 connection_aborts = 2 [json_name = "connection-aborts"];
                     uint64 connection_closes = 3 [json_name = "connection-closes"];
                     uint64 connection_failures = 4 [json_name = "connection-failures"];
                     uint64 connection_opens = 5 [json_name = "connection-opens"];
                     uint64 connection_timeouts = 6 [json_name = "connection-timeouts"];
                     uint64 errors_received = 7 [json_name = "errors-received"];
                     uint64 messages_received = 8 [json_name = "messages-received"];
                     uint64 messages_sent = 9 [json_name = "messages-sent"];
                     string name = 10 [json_name = "name"];
                     uint32 timeout = 11 [json_name = "timeout"];
                  }
                  State state = 4 [json_name = "state"];
                  message Tacacs {
                     message Config {
                        uint32 port = 1 [json_name = "port"];
                        string secret_key = 2 [json_name = "secret-key"];
                        string source_address = 3 [json_name = "source-address"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 port = 1 [json_name = "port"];
                        string secret_key = 2 [json_name = "secret-key"];
                        string source_address = 3 [json_name = "source-address"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Tacacs tacacs = 5 [json_name = "tacacs"];
               }
               repeated Server server = 1 [json_name = "server"];
            }
            Servers servers = 3 [json_name = "servers"];
            message State {
               string name = 1 [json_name = "name"];
               string type = 2 [json_name = "type"];
            }
            State state = 4 [json_name = "state"];
         }
         repeated ServerGroup server_group = 1 [json_name = "server-group"];
      }
      ServerGroups server_groups = 5 [json_name = "server-groups"];
      message State {
      }
      State state = 6 [json_name = "state"];
   }
   Aaa aaa = 1 [json_name = "aaa"];
   message Alarms {
      message Alarm {
         message Config {
         }
         Config config = 1 [json_name = "config"];
         string id = 2 [json_name = "id"];
         message State {
            string id = 1 [json_name = "id"];
            string resource = 2 [json_name = "resource"];
            string severity = 3 [json_name = "severity"];
            string text = 4 [json_name = "text"];
            uint64 time_created = 5 [json_name = "time-created"];
            string type_id = 6 [json_name = "type-id"];
         }
         State state = 3 [json_name = "state"];
      }
      repeated Alarm alarm = 1 [json_name = "alarm"];
   }
   Alarms alarms = 2 [json_name = "alarms"];
   message Clock {
      message Config {
         string timezone_name = 1 [json_name = "timezone-name"];
      }
      Config config = 1 [json_name = "config"];
      message State {
         string timezone_name = 1 [json_name = "timezone-name"];
      }
      State state = 2 [json_name = "state"];
   }
   Clock clock = 3 [json_name = "clock"];
   message Config {
      string domain_name = 1 [json_name = "domain-name"];
      string hostname = 2 [json_name = "hostname"];
      string login_banner = 3 [json_name = "login-banner"];
      string motd_banner = 4 [json_name = "motd-banner"];
   }
   Config config = 4 [json_name = "config"];
   message Cpus {
      message Cpu {
         string index = 1 [json_name = "index"];
         message State {
            message HardwareInterrupt {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            HardwareInterrupt hardware_interrupt = 1 [json_name = "hardware-interrupt"];
            message Idle {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            Idle idle = 2 [json_name = "idle"];
            string index = 3 [json_name = "index"];
            message Kernel {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            Kernel kernel = 4 [json_name = "kernel"];
            message Nice {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            Nice nice = 5 [json_name = "nice"];
            message SoftwareInterrupt {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            SoftwareInterrupt software_interrupt = 6 [json_name = "software-interrupt"];
            message Total {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            Total total = 7 [json_name = "total"];
            message User {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            User user = 8 [json_name = "user"];
            message Wait {
               uint32 avg = 1 [json_name = "avg"];
               uint32 instant = 2 [json_name = "instant"];
               uint64 interval = 3 [json_name = "interval"];
               uint32 max = 4 [json_name = "max"];
               uint32 min = 5 [json_name = "min"];
               uint64 min_time = 6 [json_name = "min-time"];
               uint64 max_time = 7 [json_name = "max-time"];
            }
            Wait wait = 9 [json_name = "wait"];
         }
         State state = 2 [json_name = "state"];
      }
      repeated Cpu cpu = 1 [json_name = "cpu"];
   }
   Cpus cpus = 5 [json_name = "cpus"];
   message Dns {
      message Config {
         repeated string search = 1 [json_name = "search"];
      }
      Config config = 1 [json_name = "config"];
      message HostEntries {
         message HostEntry {
            message Config {
               repeated string alias = 1 [json_name = "alias"];
               string hostname = 2 [json_name = "hostname"];
               repeated string ipv4_address = 3 [json_name = "ipv4-address"];
               repeated string ipv6_address = 4 [json_name = "ipv6-address"];
            }
            Config config = 1 [json_name = "config"];
            string hostname = 2 [json_name = "hostname"];
            message State {
               repeated string alias = 1 [json_name = "alias"];
               string hostname = 2 [json_name = "hostname"];
               repeated string ipv4_address = 3 [json_name = "ipv4-address"];
               repeated string ipv6_address = 4 [json_name = "ipv6-address"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated HostEntry host_entry = 1 [json_name = "host-entry"];
      }
      HostEntries host_entries = 2 [json_name = "host-entries"];
      message Servers {
         message Server {
            string address = 1 [json_name = "address"];
            message Config {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated Server server = 1 [json_name = "server"];
      }
      Servers servers = 3 [json_name = "servers"];
      message State {
         repeated string search = 1 [json_name = "search"];
      }
      State state = 4 [json_name = "state"];
   }
   Dns dns = 6 [json_name = "dns"];
   message Logging {
      message Console {
         message Config {
         }
         Config config = 1 [json_name = "config"];
         message Selectors {
            message Selector {
               message Config {
                  string facility = 1 [json_name = "facility"];
                  enum Severity {
                     Severity_ALERT = 0;
                     Severity_CRITICAL = 1;
                     Severity_DEBUG = 2;
                     Severity_EMERGENCY = 3;
                     Severity_ERROR = 4;
                     Severity_INFORMATIONAL = 5;
                     Severity_NOTICE = 6;
                     Severity_WARNING = 7;
                  };
                  Severity severity = 2 [json_name = "severity"];
               }
               Config config = 1 [json_name = "config"];
               string facility = 2 [json_name = "facility"];
               enum Severity {
                  Severity_ALERT = 0;
                  Severity_CRITICAL = 1;
                  Severity_DEBUG = 2;
                  Severity_EMERGENCY = 3;
                  Severity_ERROR = 4;
                  Severity_INFORMATIONAL = 5;
                  Severity_NOTICE = 6;
                  Severity_WARNING = 7;
               };
               Severity severity = 3 [json_name = "severity"];
               message State {
                  string facility = 1 [json_name = "facility"];
                  enum Severity {
                     Severity_ALERT = 0;
                     Severity_CRITICAL = 1;
                     Severity_DEBUG = 2;
                     Severity_EMERGENCY = 3;
                     Severity_ERROR = 4;
                     Severity_INFORMATIONAL = 5;
                     Severity_NOTICE = 6;
                     Severity_WARNING = 7;
                  };
                  Severity severity = 2 [json_name = "severity"];
               }
               State state = 4 [json_name = "state"];
            }
            repeated Selector selector = 1 [json_name = "selector"];
         }
         Selectors selectors = 2 [json_name = "selectors"];
         message State {
         }
         State state = 3 [json_name = "state"];
      }
      Console console = 1 [json_name = "console"];
      message RemoteServers {
         message RemoteServer {
            message Config {
               string host = 1 [json_name = "host"];
               uint32 remote_port = 2 [json_name = "remote-port"];
               string source_address = 3 [json_name = "source-address"];
            }
            Config config = 1 [json_name = "config"];
            string host = 2 [json_name = "host"];
            message Selectors {
               message Selector {
                  message Config {
                     string facility = 1 [json_name = "facility"];
                     enum Severity {
                        Severity_ALERT = 0;
                        Severity_CRITICAL = 1;
                        Severity_DEBUG = 2;
                        Severity_EMERGENCY = 3;
                        Severity_ERROR = 4;
                        Severity_INFORMATIONAL = 5;
                        Severity_NOTICE = 6;
                        Severity_WARNING = 7;
                     };
                     Severity severity = 2 [json_name = "severity"];
                  }
                  Config config = 1 [json_name = "config"];
                  string facility = 2 [json_name = "facility"];
                  enum Severity {
                     Severity_ALERT = 0;
                     Severity_CRITICAL = 1;
                     Severity_DEBUG = 2;
                     Severity_EMERGENCY = 3;
                     Severity_ERROR = 4;
                     Severity_INFORMATIONAL = 5;
                     Severity_NOTICE = 6;
                     Severity_WARNING = 7;
                  };
                  Severity severity = 3 [json_name = "severity"];
                  message State {
                     string facility = 1 [json_name = "facility"];
                     enum Severity {
                        Severity_ALERT = 0;
                        Severity_CRITICAL = 1;
                        Severity_DEBUG = 2;
                        Severity_EMERGENCY = 3;
                        Severity_ERROR = 4;
                        Severity_INFORMATIONAL = 5;
                        Severity_NOTICE = 6;
                        Severity_WARNING = 7;
                     };
                     Severity severity = 2 [json_name = "severity"];
                  }
                  State state = 4 [json_name = "state"];
               }
               repeated Selector selector = 1 [json_name = "selector"];
            }
            Selectors selectors = 3 [json_name = "selectors"];
            message State {
               string host = 1 [json_name = "host"];
               uint32 remote_port = 2 [json_name = "remote-port"];
               string source_address = 3 [json_name = "source-address"];
            }
            State state = 4 [json_name = "state"];
         }
         repeated RemoteServer remote_server = 1 [json_name = "remote-server"];
      }
      RemoteServers remote_servers = 2 [json_name = "remote-servers"];
   }
   Logging logging = 7 [json_name = "logging"];
   message Memory {
      message Config {
      }
      Config config = 1 [json_name = "config"];
      message State {
         uint64 physical = 1 [json_name = "physical"];
         uint64 reserved = 2 [json_name = "reserved"];
      }
      State state = 2 [json_name = "state"];
   }
   Memory memory = 8 [json_name = "memory"];
   message Ntp {
      message Config {
         bool enable_ntp_auth = 1 [json_name = "enable-ntp-auth"];
         bool enabled = 2 [json_name = "enabled"];
         string ntp_source_address = 3 [json_name = "ntp-source-address"];
      }
      Config config = 1 [json_name = "config"];
      message NtpKeys {
         message NtpKey {
            message Config {
               uint32 key_id = 1 [json_name = "key-id"];
               string key_type = 2 [json_name = "key-type"];
               string key_value = 3 [json_name = "key-value"];
            }
            Config config = 1 [json_name = "config"];
            uint32 key_id = 2 [json_name = "key-id"];
            message State {
               uint32 key_id = 1 [json_name = "key-id"];
               string key_type = 2 [json_name = "key-type"];
               string key_value = 3 [json_name = "key-value"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated NtpKey ntp_key = 1 [json_name = "ntp-key"];
      }
      NtpKeys ntp_keys = 2 [json_name = "ntp-keys"];
      message Servers {
         message Server {
            string address = 1 [json_name = "address"];
            message Config {
               string address = 1 [json_name = "address"];
               enum AssociationType {
                  AssociationType_PEER = 0;
                  AssociationType_POOL = 1;
                  AssociationType_SERVER = 2;
               };
               AssociationType association_type = 2 [json_name = "association-type"];
               bool iburst = 3 [json_name = "iburst"];
               uint32 port = 4 [json_name = "port"];
               bool prefer = 5 [json_name = "prefer"];
               uint32 version = 6 [json_name = "version"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string address = 1 [json_name = "address"];
               enum AssociationType {
                  AssociationType_PEER = 0;
                  AssociationType_POOL = 1;
                  AssociationType_SERVER = 2;
               };
               AssociationType association_type = 2 [json_name = "association-type"];
               bool iburst = 3 [json_name = "iburst"];
               uint64 offset = 4 [json_name = "offset"];
               uint32 poll_interval = 5 [json_name = "poll-interval"];
               uint32 port = 6 [json_name = "port"];
               bool prefer = 7 [json_name = "prefer"];
               uint32 root_delay = 8 [json_name = "root-delay"];
               uint64 root_dispersion = 9 [json_name = "root-dispersion"];
               uint32 stratum = 10 [json_name = "stratum"];
               uint32 version = 11 [json_name = "version"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated Server server = 1 [json_name = "server"];
      }
      Servers servers = 3 [json_name = "servers"];
      message State {
         uint64 auth_mismatch = 1 [json_name = "auth-mismatch"];
         bool enable_ntp_auth = 2 [json_name = "enable-ntp-auth"];
         bool enabled = 3 [json_name = "enabled"];
         string ntp_source_address = 4 [json_name = "ntp-source-address"];
      }
      State state = 4 [json_name = "state"];
   }
   Ntp ntp = 9 [json_name = "ntp"];
   message Processes {
      message Process {
         uint64 pid = 1 [json_name = "pid"];
         message State {
            repeated string args = 1 [json_name = "args"];
            uint64 cpu_usage_system = 2 [json_name = "cpu-usage-system"];
            uint64 cpu_usage_user = 3 [json_name = "cpu-usage-user"];
            uint32 cpu_utilization = 4 [json_name = "cpu-utilization"];
            uint64 memory_usage = 5 [json_name = "memory-usage"];
            uint32 memory_utilization = 6 [json_name = "memory-utilization"];
            string name = 7 [json_name = "name"];
            uint64 pid = 8 [json_name = "pid"];
            uint64 start_time = 9 [json_name = "start-time"];
            uint64 uptime = 10 [json_name = "uptime"];
         }
         State state = 2 [json_name = "state"];
      }
      repeated Process process = 1 [json_name = "process"];
   }
   Processes processes = 10 [json_name = "processes"];
   message SshServer {
      message Config {
         bool enable = 1 [json_name = "enable"];
         enum ProtocolVersion {
            ProtocolVersion_V1 = 0;
            ProtocolVersion_V1_V2 = 1;
            ProtocolVersion_V2 = 2;
         };
         ProtocolVersion protocol_version = 2 [json_name = "protocol-version"];
         uint32 rate_limit = 3 [json_name = "rate-limit"];
         uint32 session_limit = 4 [json_name = "session-limit"];
         uint32 timeout = 5 [json_name = "timeout"];
      }
      Config config = 1 [json_name = "config"];
      message State {
         bool enable = 1 [json_name = "enable"];
         enum ProtocolVersion {
            ProtocolVersion_V1 = 0;
            ProtocolVersion_V1_V2 = 1;
            ProtocolVersion_V2 = 2;
         };
         ProtocolVersion protocol_version = 2 [json_name = "protocol-version"];
         uint32 rate_limit = 3 [json_name = "rate-limit"];
         uint32 session_limit = 4 [json_name = "session-limit"];
         uint32 timeout = 5 [json_name = "timeout"];
      }
      State state = 2 [json_name = "state"];
   }
   SshServer ssh_server = 11 [json_name = "ssh-server"];
   message State {
      uint64 boot_time = 1 [json_name = "boot-time"];
      string current_datetime = 2 [json_name = "current-datetime"];
      string domain_name = 3 [json_name = "domain-name"];
      string hostname = 4 [json_name = "hostname"];
      string login_banner = 5 [json_name = "login-banner"];
      string motd_banner = 6 [json_name = "motd-banner"];
   }
   State state = 12 [json_name = "state"];
   message TelnetServer {
      message Config {
         bool enable = 1 [json_name = "enable"];
         uint32 rate_limit = 2 [json_name = "rate-limit"];
         uint32 session_limit = 3 [json_name = "session-limit"];
         uint32 timeout = 4 [json_name = "timeout"];
      }
      Config config = 1 [json_name = "config"];
      message State {
         bool enable = 1 [json_name = "enable"];
         uint32 rate_limit = 2 [json_name = "rate-limit"];
         uint32 session_limit = 3 [json_name = "session-limit"];
         uint32 timeout = 4 [json_name = "timeout"];
      }
      State state = 2 [json_name = "state"];
   }
   TelnetServer telnet_server = 13 [json_name = "telnet-server"];
}


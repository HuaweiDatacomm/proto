syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-pp6
// revision 2020-03-16
// revision 2019-12-30
// namespace urn:huawei:yang:huawei-pp6

package huawei_pp6;

message Pp6 {
   message Icmp6Stats_1 {
      message Icmp6Stat_1 {
         uint32 badCodeRcv = 1;
         uint32 badLenRcv = 2;
         uint32 chksumErrRcv = 3;
         uint32 echoRcv = 4;
         uint32 echoReplyRcv = 5;
         uint32 echoReplySnt = 6;
         uint32 echoSnt = 7;
         uint32 formatErrRcv = 8;
         uint32 hopExcRcv = 9;
         uint32 hopExcSnt = 10;
         uint32 naRcv = 11;
         uint32 naSnt = 12;
         uint32 nsRcv = 13;
         uint32 nsSnt = 14;
         uint32 paraProRcv = 15;
         uint32 paraProSnt = 16;
         uint32 prohibitRcv = 17;
         uint32 prohibitSnt = 18;
         uint32 raRcv = 19;
         uint32 raSnt = 20;
         uint32 rateLimitRcv = 21;
         uint32 rateLimitSnt = 22;
         uint32 redirectRcv = 23;
         uint32 redirectSnt = 24;
         uint32 rsRcv = 25;
         uint32 rsSnt = 26;
         uint32 tooBigRcv = 27;
         uint32 tooBigSnt = 28;
         uint32 tooShortRcv = 29;
         uint32 totalRcv = 30;
         uint32 totalSnt = 31;
         uint32 unkwErrRcv = 32;
         uint32 unkwInfoRcv = 33;
         uint32 unreachRcv = 34;
         uint32 unreachSnt = 35;
      }
      repeated Icmp6Stat_1 Icmp6Stat = 1;
   }
   Icmp6Stats_1 Icmp6Stats = 1;
   message Ipv6GlobalCfg_1 {
      bool blacklistFlag = 1;
      uint32 bucketSize = 2;
      bool echoReply = 3;
      bool hostUnreach = 4;
      uint32 interval = 5;
      bool portUnreach = 6;
      uint32 timeout = 7;
      bool toobigLimitFlag = 8;
   }
   Ipv6GlobalCfg_1 Ipv6GlobalCfg = 2;
   message Ipv6PathMtuNcfs_1 {
      message Ipv6PathMtuNcf_1 {
         enum FragmentFlag {
            FragmentFlag_NO = 0;
            FragmentFlag_YES = 1;
         };
         FragmentFlag fragmentFlag = 1;
         string ipv6DstAddr = 2;
         enum MtuType {
            MtuType_FALSE = 0;
            MtuType_TRUE = 1;
         };
         MtuType mtuType = 3;
         uint32 pathMtu = 4;
         uint32 timeout = 5;
         string vrfName = 6;
      }
      repeated Ipv6PathMtuNcf_1 Ipv6PathMtuNcf = 1;
   }
   Ipv6PathMtuNcfs_1 Ipv6PathMtuNcfs = 3;
   message Ipv6PathMtus_1 {
      message Ipv6PathMtu_1 {
         string ipv6DstAddr = 1;
         uint32 pathMtu = 2;
         string vrfName = 3;
      }
      repeated Ipv6PathMtu_1 Ipv6PathMtu = 1;
   }
   Ipv6PathMtus_1 Ipv6PathMtus = 4;
   message Ipv6Stats_1 {
      message Ipv6Stat_1 {
         uint32 HopexceedRcv = 1;
         uint32 addrerrRcv = 2;
         uint32 authOption = 3;
         uint32 destOption = 4;
         uint32 discardSnd = 5;
         uint32 encapOption = 6;
         uint32 forwdSnd = 7;
         uint32 fragmentFail = 8;
         uint32 fragmentOption = 9;
         uint32 fragmentSnd = 10;
         uint32 fragmented = 11;
         uint32 fragsRcv = 12;
         uint32 headerrRcv = 13;
         uint32 hopByHopOption = 14;
         uint32 localRcv = 15;
         uint32 localSnd = 16;
         uint32 mobilityOption = 17;
         uint32 multiRcv = 18;
         uint32 multiSnd = 19;
         uint32 noHeader = 20;
         uint32 optLengthError = 21;
         uint32 optUnknown = 22;
         uint32 opterrRcv = 23;
         uint32 protoerrRcv = 24;
         uint32 rawpktSnd = 25;
         uint32 reassedRcv = 26;
         uint32 reasstimeoutRcv = 27;
         uint32 routfailRcv = 28;
         uint32 routingOption = 29;
         uint32 tlvLengthError = 30;
         uint32 tooBigRcv = 31;
         uint32 totalRcv = 32;
         uint32 totalSnd = 33;
         uint32 truncatedRcv = 34;
         uint32 typeUnknown = 35;
      }
      repeated Ipv6Stat_1 Ipv6Stat = 1;
   }
   Ipv6Stats_1 Ipv6Stats = 5;
   message Icmp6Securitys {
      message Icmp6Security {
         enum Action {
            Action_RECEIVE = 0;
            Action_SEND = 1;
         };
         Action action = 1;
         enum AllFlag {
            AllFlag_NO = 0;
            AllFlag_YES = 1;
         };
         AllFlag allFlag = 2;
         uint32 icmpCode = 3;
         uint32 icmpType = 4;
         enum SwitchOp {
            SwitchOp_DISABLE = 0;
            SwitchOp_ENABLE = 1;
         };
         SwitchOp switchOp = 5;
      }
      repeated Icmp6Security icmp6Security = 1;
   }
   Icmp6Securitys icmp6Securitys = 6;
   message Icmp6SourceAddrs {
      message Icmp6SourceAddr {
         string ifName = 1;
         enum PktType {
            PktType_HOPLIMITEXCEEDED = 0;
            PktType_PORTUNREACHABLE = 1;
         };
         PktType pktType = 2;
      }
      repeated Icmp6SourceAddr icmp6SourceAddr = 1;
   }
   Icmp6SourceAddrs icmp6SourceAddrs = 7;
   message IfIcmp6Securitys {
      message IfIcmp6Security {
         enum Action {
            Action_RECEIVE = 0;
            Action_SEND = 1;
         };
         Action action = 1;
         uint32 icmpCode = 2;
         uint32 icmpType = 3;
         string ifName = 4;
         enum SwitchOp {
            SwitchOp_DISABLE = 0;
            SwitchOp_ENABLE = 1;
         };
         SwitchOp switchOp = 5;
      }
      repeated IfIcmp6Security ifIcmp6Security = 1;
   }
   IfIcmp6Securitys ifIcmp6Securitys = 8;
   message Ipv6Global {
      uint32 bucket_size = 1 [json_name = "bucket-size"];
      uint32 interval = 2 [json_name = "interval"];
      bool echo_reply = 3 [json_name = "echo-reply"];
      bool host_unreach = 4 [json_name = "host-unreach"];
      bool port_unreach = 5 [json_name = "port-unreach"];
      uint32 timeout = 6 [json_name = "timeout"];
      bool black_list_flag = 7 [json_name = "black-list-flag"];
      bool too_big_limit_flag = 8 [json_name = "too-big-limit-flag"];
      bool permit_incomplete_fragment = 9 [json_name = "permit-incomplete-fragment"];
      uint32 reas_timeout = 10 [json_name = "reas-timeout"];
      uint32 reassemble_timeout = 11 [json_name = "reassemble-timeout"];
      enum MulticastEchoReceive {
         MulticastEchoReceive_ALLOW = 0;
         MulticastEchoReceive_DENY = 1;
      };
      MulticastEchoReceive multicast_echo_receive = 12 [json_name = "multicast-echo-receive"];
      bool source_ingress_interface = 13 [json_name = "source-ingress-interface"];
   }
   Ipv6Global ipv6_global = 9 [json_name = "ipv6-global"];
   message Ipv6Stat {
      uint32 total_snd = 1 [json_name = "total-snd"];
      uint32 local_snd = 2 [json_name = "local-snd"];
      uint32 forwd_snd = 3 [json_name = "forwd-snd"];
      uint32 rawpkt_snd = 4 [json_name = "rawpkt-snd"];
      uint32 discard_snd = 5 [json_name = "discard-snd"];
      uint32 fragmented = 6 [json_name = "fragmented"];
      uint32 fragment_snd = 7 [json_name = "fragment-snd"];
      uint32 fragment_fail = 8 [json_name = "fragment-fail"];
      uint32 multi_snd = 9 [json_name = "multi-snd"];
      uint32 total_rcv = 10 [json_name = "total-rcv"];
      uint32 local_rcv = 11 [json_name = "local-rcv"];
      uint32 hop_exceed_rcv = 12 [json_name = "hop-exceed-rcv"];
      uint32 head_err_rcv = 13 [json_name = "head-err-rcv"];
      uint32 too_big_rcv = 14 [json_name = "too-big-rcv"];
      uint32 routfail_rcv = 15 [json_name = "routfail-rcv"];
      uint32 addrerr_rcv = 16 [json_name = "addrerr-rcv"];
      uint32 protoerr_rcv = 17 [json_name = "protoerr-rcv"];
      uint32 truncated_rcv = 18 [json_name = "truncated-rcv"];
      uint32 opterr_rcv = 19 [json_name = "opterr-rcv"];
      uint32 frags_rcv = 20 [json_name = "frags-rcv"];
      uint32 reassed_rcv = 21 [json_name = "reassed-rcv"];
      uint32 reass_timeout_rcv = 22 [json_name = "reass-timeout-rcv"];
      uint32 multi_rcv = 23 [json_name = "multi-rcv"];
      uint32 hop_by_hop_option = 24 [json_name = "hop-by-hop-option"];
      uint32 mobility_option = 25 [json_name = "mobility-option"];
      uint32 dest_option = 26 [json_name = "dest-option"];
      uint32 routing_option = 27 [json_name = "routing-option"];
      uint32 fragment_option = 28 [json_name = "fragment-option"];
      uint32 auth_option = 29 [json_name = "auth-option"];
      uint32 encap_option = 30 [json_name = "encap-option"];
      uint32 no_header = 31 [json_name = "no-header"];
      uint32 tlv_length_error = 32 [json_name = "tlv-length-error"];
      uint32 opt_length_error = 33 [json_name = "opt-length-error"];
      uint32 opt_unknown = 34 [json_name = "opt-unknown"];
      uint32 type_unknown = 35 [json_name = "type-unknown"];
      uint32 hbh_option_filter = 36 [json_name = "hbh-option-filter"];
      uint32 dest_option_filter = 37 [json_name = "dest-option-filter"];
      uint32 rout_option_filter = 38 [json_name = "rout-option-filter"];
      uint32 frag_option_filter = 39 [json_name = "frag-option-filter"];
      uint32 ah_option_filter = 40 [json_name = "ah-option-filter"];
      uint32 esp_option_filter = 41 [json_name = "esp-option-filter"];
   }
   Ipv6Stat ipv6_stat = 10 [json_name = "ipv6-stat"];
   message Icmp6SendSwitch {
      message FamousIcmp6Pkt {
         bool main_switch = 1 [json_name = "main-switch"];
         message PktDeny {
            uint32 icmp_type = 1 [json_name = "icmp-type"];
            uint32 icmp_code = 2 [json_name = "icmp-code"];
         }
         repeated PktDeny pkt_deny = 2 [json_name = "pkt-deny"];
         message PktPermit {
            uint32 icmp_type = 1 [json_name = "icmp-type"];
            uint32 icmp_code = 2 [json_name = "icmp-code"];
         }
         repeated PktPermit pkt_permit = 3 [json_name = "pkt-permit"];
      }
      FamousIcmp6Pkt famous_icmp6pkt = 1 [json_name = "famous-icmp6pkt"];
      message NoFamousIcmp6Pkt {
         uint32 icmp_type = 1 [json_name = "icmp-type"];
         uint32 icmp_code = 2 [json_name = "icmp-code"];
      }
      repeated NoFamousIcmp6Pkt no_famous_icmp6pkt = 2 [json_name = "no-famous-icmp6pkt"];
   }
   Icmp6SendSwitch icmp6_send_switch = 11 [json_name = "icmp6-send-switch"];
   message Icmp6RcvSwitch {
      message FamousIcmp6Pkt {
         bool main_switch = 1 [json_name = "main-switch"];
         message PktDeny {
            uint32 icmp_type = 1 [json_name = "icmp-type"];
            uint32 icmp_code = 2 [json_name = "icmp-code"];
         }
         repeated PktDeny pkt_deny = 2 [json_name = "pkt-deny"];
         message PktPermit {
            uint32 icmp_type = 1 [json_name = "icmp-type"];
            uint32 icmp_code = 2 [json_name = "icmp-code"];
         }
         repeated PktPermit pkt_permit = 3 [json_name = "pkt-permit"];
      }
      FamousIcmp6Pkt famous_icmp6pkt = 1 [json_name = "famous-icmp6pkt"];
      message NoFamousIcmp6Pkt {
         uint32 icmp_type = 1 [json_name = "icmp-type"];
         uint32 icmp_code = 2 [json_name = "icmp-code"];
      }
      repeated NoFamousIcmp6Pkt no_famous_icmp6pkt = 2 [json_name = "no-famous-icmp6pkt"];
   }
   Icmp6RcvSwitch icmp6_rcv_switch = 12 [json_name = "icmp6-rcv-switch"];
   message Icmp6Stat {
      uint32 total_sent = 1 [json_name = "total-sent"];
      uint32 unreach_sent = 2 [json_name = "unreach-sent"];
      uint32 prohibit_sent = 3 [json_name = "prohibit-sent"];
      uint32 hoplimit_sent = 4 [json_name = "hoplimit-sent"];
      uint32 para_pro_sent = 5 [json_name = "para-pro-sent"];
      uint32 too_big_sent = 6 [json_name = "too-big-sent"];
      uint32 echo_sent = 7 [json_name = "echo-sent"];
      uint32 echo_reply_sent = 8 [json_name = "echo-reply-sent"];
      uint32 rs_sent = 9 [json_name = "rs-sent"];
      uint32 ra_sent = 10 [json_name = "ra-sent"];
      uint32 ns_sent = 11 [json_name = "ns-sent"];
      uint32 na_sent = 12 [json_name = "na-sent"];
      uint32 redirect_sent = 13 [json_name = "redirect-sent"];
      uint32 rate_limit_sent = 14 [json_name = "rate-limit-sent"];
      uint32 total_rcv = 15 [json_name = "total-rcv"];
      uint32 format_err_rcv = 16 [json_name = "format-err-rcv"];
      uint32 checksum_err_rcv = 17 [json_name = "checksum-err-rcv"];
      uint32 tooshort_rcv = 18 [json_name = "tooshort-rcv"];
      uint32 bad_code_rcv = 19 [json_name = "bad-code-rcv"];
      uint32 bad_length_rcv = 20 [json_name = "bad-length-rcv"];
      uint32 unknown_info_rcv = 21 [json_name = "unknown-info-rcv"];
      uint32 unknown_err_rcv = 22 [json_name = "unknown-err-rcv"];
      uint32 unreachable_rcv = 23 [json_name = "unreachable-rcv"];
      uint32 prohibit_rcv = 24 [json_name = "prohibit-rcv"];
      uint32 hop_exceed_rcv = 25 [json_name = "hop-exceed-rcv"];
      uint32 para_pro_rcv = 26 [json_name = "para-pro-rcv"];
      uint32 too_big_rcv = 27 [json_name = "too-big-rcv"];
      uint32 echo_rcv = 28 [json_name = "echo-rcv"];
      uint32 echo_reply_rcv = 29 [json_name = "echo-reply-rcv"];
      uint32 rs_rcv = 30 [json_name = "rs-rcv"];
      uint32 ra_rcv = 31 [json_name = "ra-rcv"];
      uint32 ns_rcv = 32 [json_name = "ns-rcv"];
      uint32 na_rcv = 33 [json_name = "na-rcv"];
      uint32 redirect_rcv = 34 [json_name = "redirect-rcv"];
      uint32 rate_limit_rcv = 35 [json_name = "rate-limit-rcv"];
      uint32 echo_reject = 36 [json_name = "echo-reject"];
      uint32 echoreply_reject = 37 [json_name = "echoreply-reject"];
      uint32 hop_exceed_reject = 38 [json_name = "hop-exceed-reject"];
      uint32 port_unreach_reject = 39 [json_name = "port-unreach-reject"];
      uint32 too_big_reject = 40 [json_name = "too-big-reject"];
      uint32 ns_reject = 41 [json_name = "ns-reject"];
      uint32 na_reject = 42 [json_name = "na-reject"];
      uint32 rs_reject = 43 [json_name = "rs-reject"];
      uint32 ra_reject = 44 [json_name = "ra-reject"];
      uint32 redirect_reject = 45 [json_name = "redirect-reject"];
      uint32 host_unreachable_reject = 46 [json_name = "host-unreachable-reject"];
      uint32 net_unreachable_reject = 47 [json_name = "net-unreachable-reject"];
      uint32 fragment_timeout_reject = 48 [json_name = "fragment-timeout-reject"];
      uint32 error_head_reject = 49 [json_name = "error-head-reject"];
      uint32 hostadmin_prohibit_reject = 50 [json_name = "hostadmin-prohibit-reject"];
      uint32 unkonwn_ipv6opt_reject = 51 [json_name = "unkonwn-ipv6opt-reject"];
      uint32 unknown_nexthead_reject = 52 [json_name = "unknown-nexthead-reject"];
      uint32 other_reject = 53 [json_name = "other-reject"];
      uint32 multicast_echo_reject = 54 [json_name = "multicast-echo-reject"];
   }
   Icmp6Stat icmp6_stat = 13 [json_name = "icmp6-stat"];
   message Icmp6SourceAddresss {
      message Icmp6SourceAddress {
         string if_name = 1 [json_name = "if-name"];
         enum PktType {
            INVALID_ENUM_VALUE_PktType = 0;
            PktType_PORTX_UNREACHABLE = 1;
            PktType_HOPLIMITX_EXCEEDED = 2;
         };
         PktType pkt_type = 2 [json_name = "pkt-type"];
      }
      repeated Icmp6SourceAddress icmp6_source_address = 1 [json_name = "icmp6-source-address"];
   }
   Icmp6SourceAddresss icmp6_source_addresss = 14 [json_name = "icmp6-source-addresss"];
   message Icmp6PktSwitch {
      enum AllFamousSendSwitch {
         AllFamousSendSwitch_ALLOW = 0;
         AllFamousSendSwitch_DENY = 1;
      };
      AllFamousSendSwitch all_famous_send_switch = 1 [json_name = "all-famous-send-switch"];
      enum AllFamousReceiveSwitch {
         AllFamousReceiveSwitch_ALLOW = 0;
         AllFamousReceiveSwitch_DENY = 1;
      };
      AllFamousReceiveSwitch all_famous_receive_switch = 2 [json_name = "all-famous-receive-switch"];
      message EachTypeSwitchs {
         message EachTypeSwitch {
            uint32 type = 1 [json_name = "type"];
            uint32 code = 2 [json_name = "code"];
            enum SendOrReceive {
               SendOrReceive_SEND = 0;
               SendOrReceive_RECEIVE = 1;
            };
            SendOrReceive send_or_receive = 3 [json_name = "send-or-receive"];
            enum Switch {
               Switch_ALLOW = 0;
               Switch_DENY = 1;
            };
            Switch switch = 4 [json_name = "switch"];
            enum Name {
               INVALID_ENUM_VALUE_Name = 0;
               Name_NETWORKX_UNREACHABLE = 1;
               Name_HOSTX_UNREACHABLE = 2;
               Name_PORTX_UNREACHABLE = 3;
               Name_PACKETX_TOOX_BIG = 4;
               Name_HOPX_LIMITX_EXCEEDED = 5;
               Name_ECHO = 6;
               Name_ECHOX_REPLY = 7;
               Name_ROUTERX_SOLICITATION = 8;
               Name_ROUTERX_ADVERTISEMENT = 9;
               Name_NEIGHBORX_SOLICITATION = 10;
               Name_NEIGHBORX_ADVERTISEMENT = 11;
               Name_REDIRECT = 12;
               Name_MULTICASTX_LISTENERX_QUERY = 13;
               Name_MULTICASTX_LISTENERX_REPORT = 14;
               Name_MULTICASTX_LISTENERX_DONE = 15;
               Name_MULTICASTX_LISTENERX_REPORTX_V2 = 16;
               Name_UNX_FAMOUS = 17;
            };
            Name name = 5 [json_name = "name"];
         }
         repeated EachTypeSwitch each_type_switch = 1 [json_name = "each-type-switch"];
      }
      EachTypeSwitchs each_type_switchs = 3 [json_name = "each-type-switchs"];
   }
   Icmp6PktSwitch icmp6_pkt_switch = 15 [json_name = "icmp6-pkt-switch"];
   message ExtensionHeaderFilterGlobals {
      message HopByHopSwitch {
         enum AllOptions {
            AllOptions_DENY = 0;
            AllOptions_PERMIT = 1;
         };
         AllOptions all_options = 1 [json_name = "all-options"];
         message Options {
            message Option {
               uint32 option_code = 1 [json_name = "option-code"];
               enum FilterRule {
                  FilterRule_DENY = 0;
                  FilterRule_PERMIT = 1;
               };
               FilterRule filter_rule = 2 [json_name = "filter-rule"];
            }
            repeated Option option = 1 [json_name = "option"];
         }
         Options options = 2 [json_name = "options"];
      }
      HopByHopSwitch hop_by_hop_switch = 1 [json_name = "hop-by-hop-switch"];
      message RoutingSwitch {
         enum AllOptions {
            AllOptions_DENY = 0;
            AllOptions_PERMIT = 1;
         };
         AllOptions all_options = 1 [json_name = "all-options"];
         message Options {
            message Option {
               uint32 option_code = 1 [json_name = "option-code"];
               enum FilterRule {
                  FilterRule_DENY = 0;
                  FilterRule_PERMIT = 1;
               };
               FilterRule filter_rule = 2 [json_name = "filter-rule"];
            }
            repeated Option option = 1 [json_name = "option"];
         }
         Options options = 2 [json_name = "options"];
      }
      RoutingSwitch routing_switch = 2 [json_name = "routing-switch"];
      message DestinationSwitch {
         enum AllOptions {
            AllOptions_DENY = 0;
            AllOptions_PERMIT = 1;
         };
         AllOptions all_options = 1 [json_name = "all-options"];
         message Options {
            message Option {
               uint32 option_code = 1 [json_name = "option-code"];
               enum FilterRule {
                  FilterRule_DENY = 0;
                  FilterRule_PERMIT = 1;
               };
               FilterRule filter_rule = 2 [json_name = "filter-rule"];
            }
            repeated Option option = 1 [json_name = "option"];
         }
         Options options = 2 [json_name = "options"];
      }
      DestinationSwitch destination_switch = 3 [json_name = "destination-switch"];
      message NoOptionExhSwitchs {
         message NoOptionExhSwitch {
            enum ExhType {
               INVALID_ENUM_VALUE_ExhType = 0;
               ExhType_FRAGMENT = 44;
               ExhType_ESP = 50;
               ExhType_AH = 51;
            };
            ExhType exh_type = 1 [json_name = "exh-type"];
            enum FilterRule {
               FilterRule_DENY = 0;
               FilterRule_PERMIT = 1;
            };
            FilterRule filter_rule = 2 [json_name = "filter-rule"];
         }
         repeated NoOptionExhSwitch no_option_exh_switch = 1 [json_name = "no-option-exh-switch"];
      }
      NoOptionExhSwitchs no_option_exh_switchs = 4 [json_name = "no-option-exh-switchs"];
   }
   ExtensionHeaderFilterGlobals extension_header_filter_globals = 16 [json_name = "extension-header-filter-globals"];
   message Ipv6Pmtus {
      message Ipv6PmtuStatics {
         message Ipv6PmtuStatic {
            string destination_address = 1 [json_name = "destination-address"];
            string vrf_name = 2 [json_name = "vrf-name"];
            uint32 mtu = 3 [json_name = "mtu"];
         }
         repeated Ipv6PmtuStatic ipv6_pmtu_static = 1 [json_name = "ipv6-pmtu-static"];
      }
      Ipv6PmtuStatics ipv6_pmtu_statics = 1 [json_name = "ipv6-pmtu-statics"];
      message Ipv6PmtuStates {
         message Ipv6PmtuState {
            string destination_address = 1 [json_name = "destination-address"];
            string vrf_name = 2 [json_name = "vrf-name"];
            uint32 mtu = 3 [json_name = "mtu"];
            uint32 life_time = 4 [json_name = "life-time"];
            enum MtuType {
               MtuType_STATIC = 0;
               MtuType_DYNAMIC = 1;
            };
            MtuType mtu_type = 5 [json_name = "mtu-type"];
            enum FragmentFlag {
               FragmentFlag_NO = 0;
               FragmentFlag_YES = 1;
            };
            FragmentFlag fragment_flag = 6 [json_name = "fragment-flag"];
         }
         repeated Ipv6PmtuState ipv6_pmtu_state = 1 [json_name = "ipv6-pmtu-state"];
      }
      Ipv6PmtuStates ipv6_pmtu_states = 2 [json_name = "ipv6-pmtu-states"];
   }
   Ipv6Pmtus ipv6_pmtus = 17 [json_name = "ipv6-pmtus"];
}


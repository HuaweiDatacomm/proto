syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-12 21:40:27
// ProtoYang-version 1
// module huawei-ntp
// revision 2021-06-02
// revision 2020-08-01
// revision 2019-04-19
// namespace urn:huawei:yang:huawei-ntp

package huawei_ntp;

message Ntp {
   message NtpAccessCfgs {
      message NtpAccessCfg {
         enum AccessLevel {
            AccessLevel_LIMITED = 0;
            AccessLevel_PEER = 1;
            AccessLevel_QUERY = 2;
            AccessLevel_SERVER = 3;
            AccessLevel_SYNCHRONIZATION = 4;
         };
         AccessLevel accessLevel = 1;
         string acl6NumOrName = 2;
         string aclNumOrName = 3;
         enum AddrFamily {
            AddrFamily_IPV4 = 0;
            AddrFamily_IPV4X_ANDX_IPV6 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 4;
      }
      repeated NtpAccessCfg ntpAccessCfg = 1;
   }
   NtpAccessCfgs ntpAccessCfgs = 1;
   message NtpAuthKeyCfgs {
      message NtpAuthKeyCfg {
         bool isReliable = 1;
         uint32 keyId = 2;
         string keyVal = 3;
         enum Mode {
            Mode_HMACX_SHA256 = 0;
            Mode_MD5 = 1;
         };
         Mode mode = 4;
      }
      repeated NtpAuthKeyCfg ntpAuthKeyCfg = 1;
   }
   NtpAuthKeyCfgs ntpAuthKeyCfgs = 2;
   message NtpBCastCfgs {
      message NtpBCastCfg {
         string ifName = 1;
         uint32 keyId = 2;
         uint32 portNumber = 3;
         enum Type {
            Type_CLIENT = 0;
            Type_SERVER = 1;
         };
         Type type = 4;
         uint32 version = 5;
      }
      repeated NtpBCastCfg ntpBCastCfg = 1;
   }
   NtpBCastCfgs ntpBCastCfgs = 3;
   message NtpBdStatuss {
      message NtpBdStatus {
         string clockPrecision = 1;
         enum ClockStatus {
            ClockStatus_SYNCHRONIZED = 0;
            ClockStatus_UNSYNCHRONIZED = 1;
         };
         ClockStatus clockStatus = 2;
         string curTime = 3;
         enum IsNTPSerConf {
            IsNTPSerConf_NO = 0;
            IsNTPSerConf_YES = 1;
         };
         IsNTPSerConf isNTPSerConf = 4;
         string offset = 5;
         string poll = 6;
         string refTime = 7;
         string selfNdName = 8;
         string synNdName = 9;
      }
      repeated NtpBdStatus ntpBdStatus = 1;
   }
   NtpBdStatuss ntpBdStatuss = 4;
   message NtpDisableIfs {
      message NtpDisableIf {
         enum AddrFamily {
            AddrFamily_DCN = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 1;
         string ifName = 2;
      }
      repeated NtpDisableIf ntpDisableIf = 1;
   }
   NtpDisableIfs ntpDisableIfs = 5;
   message NtpDisableSs {
      message NtpDisableS {
         enum AddrFamily {
            AddrFamily_IPV4 = 0;
            AddrFamily_IPV6 = 1;
         };
         AddrFamily addrFamily = 1;
      }
      repeated NtpDisableS ntpDisableS = 1;
   }
   NtpDisableSs ntpDisableSs = 6;
   message NtpMCastCfgs {
      message NtpMCastCfg {
         enum AddrFamily {
            AddrFamily_DCN = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 1;
         string ifName = 2;
         string ipv4Addr = 3;
         string ipv6Addr = 4;
         uint32 keyId = 5;
         uint32 portNumber = 6;
         uint32 ttlValue = 7;
         enum Type {
            Type_CLIENT = 0;
            Type_SERVER = 1;
         };
         Type type = 8;
         uint32 version = 9;
      }
      repeated NtpMCastCfg ntpMCastCfg = 1;
   }
   NtpMCastCfgs ntpMCastCfgs = 7;
   message NtpManycastCfgs {
      message NtpManycastCfg {
         enum AddrFamily {
            AddrFamily_DCN = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 1;
         uint32 authKeyId = 2;
         string ifName = 3;
         string ipv4Addr = 4;
         string ipv6Addr = 5;
         uint32 portNumber = 6;
         uint32 ttlValue = 7;
         enum Type {
            Type_CLIENT = 0;
            Type_SERVER = 1;
         };
         Type type = 8;
      }
      repeated NtpManycastCfg ntpManycastCfg = 1;
   }
   NtpManycastCfgs ntpManycastCfgs = 8;
   message NtpMastClkCfgs {
      message NtpMastClkCfg {
         string ipv4Addr = 1;
         uint32 stratum = 2;
      }
      repeated NtpMastClkCfg ntpMastClkCfg = 1;
   }
   NtpMastClkCfgs ntpMastClkCfgs = 9;
   message NtpSourceIfCfgs {
      message NtpSourceIfCfg {
         enum AddrFamily {
            AddrFamily_DCN = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 1;
         string ifName = 2;
         string vpnName = 3;
      }
      repeated NtpSourceIfCfg ntpSourceIfCfg = 1;
   }
   NtpSourceIfCfgs ntpSourceIfCfgs = 10;
   message NtpSrvrDsblCfgs {
      message NtpSrvrDsblCfg {
         enum AddrFamily {
            AddrFamily_IPV4 = 0;
            AddrFamily_IPV6 = 1;
         };
         AddrFamily addrFamily = 1;
      }
      repeated NtpSrvrDsblCfg ntpSrvrDsblCfg = 1;
   }
   NtpSrvrDsblCfgs ntpSrvrDsblCfgs = 11;
   message NtpSsnFullInfos {
      message NtpSsnFullInfo {
         string clockSrc = 1;
         string clockStatus = 2;
         uint32 clockStratum = 3;
         string delay = 4;
         string dispersion = 5;
         string filterDelay = 6;
         string filterDisp = 7;
         string filterOffset = 8;
         string flags = 9;
         string interfaceId = 10;
         string localMode = 11;
         string localPoll = 12;
         string offset = 13;
         string orgTime = 14;
         string peerMode = 15;
         string peerPoll = 16;
         string poll = 17;
         string precision = 18;
         uint32 reacheability = 19;
         string recvTime = 20;
         string refClkStatus = 21;
         string refClockId = 22;
         string refTime = 23;
         string rootDelay = 24;
         string rootDispersion = 25;
         string syncDist = 26;
         enum SyncState {
            SyncState_CLOCKX_ISX_NOTX_SET = 0;
            SyncState_CLOCKX_ISX_SYNCHRONIZED = 1;
            SyncState_FREQUENCYX_ISX_SET = 2;
            SyncState_MODEX_ISX_FREQUENCY = 3;
            SyncState_SPIKEX_ISX_DETECTEDX_ = 4;
            SyncState_TIMEX_ISX_SET = 5;
         };
         SyncState syncState = 27;
         uint32 version = 28;
         string vpnName = 29;
         string when = 30;
         string xmitTime = 31;
      }
      repeated NtpSsnFullInfo ntpSsnFullInfo = 1;
   }
   NtpSsnFullInfos ntpSsnFullInfos = 12;
   message NtpStatus {
      string actualFreq = 1;
      string clockPrecision = 2;
      string clockSrc = 3;
      string clockStatus = 4;
      int32 clockStratum = 5;
      string nominamFreq = 6;
      string offset = 7;
      string peerDispersion = 8;
      string refTime = 9;
      string rootDelay = 10;
      string rootDispersion = 11;
      string syncState = 12;
      string vpnName = 13;
   }
   NtpStatus ntpStatus = 13;
   message NtpSystemCfg {
      int32 avgDiscardIntvl = 1;
      bool isAuthEnable = 2;
      bool isKodEnable = 3;
      uint32 localPort = 4;
      uint32 maxDistance = 5;
      uint32 maxOffset = 6;
      uint32 maxSessCount = 7;
      int32 minDiscardIntvl = 8;
      uint32 syncInterval = 9;
   }
   NtpSystemCfg ntpSystemCfg = 14;
   message NtpTraces {
      message NtpTrace {
         uint32 clockStratum = 1;
         string offset = 2;
         string refClkAddr = 3;
         string serverAddr = 4;
         string syncDist = 5;
      }
      repeated NtpTrace ntpTrace = 1;
   }
   NtpTraces ntpTraces = 15;
   message NtpUCastCfgs {
      message NtpUCastCfg {
         enum AddrFamily {
            AddrFamily_DCN = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addrFamily = 1;
         string ifName = 2;
         string ipv4Addr = 3;
         string ipv6Addr = 4;
         bool isBurst = 5;
         bool isIburst = 6;
         bool isPreempt = 7;
         bool isPreferred = 8;
         uint32 keyId = 9;
         uint32 maxpollInterval = 10;
         uint32 minpollInterval = 11;
         string neid = 12;
         uint32 portNumber = 13;
         enum Type {
            Type_PEER = 0;
            Type_SERVER = 1;
         };
         Type type = 14;
         uint32 version = 15;
         string vpnName = 16;
      }
      repeated NtpUCastCfg ntpUCastCfg = 1;
   }
   NtpUCastCfgs ntpUCastCfgs = 16;
   message NtpUnsyncCfgs {
      message NtpUnsyncCfg {
         uint32 poll = 1;
         uint32 step = 2;
      }
      repeated NtpUnsyncCfg ntpUnsyncCfg = 1;
   }
   NtpUnsyncCfgs ntpUnsyncCfgs = 17;
   message Disables {
      message Disable {
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addr_family = 1 [json_name = "addr-family"];
      }
      repeated Disable disable = 1 [json_name = "disable"];
   }
   Disables disables = 18 [json_name = "disables"];
   message Unicasts {
      message Unicast {
         string ip_address = 1 [json_name = "ip-address"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_PEER = 1;
            Type_SERVER = 2;
         };
         Type type = 2 [json_name = "type"];
         string vpn_name = 3 [json_name = "vpn-name"];
         uint32 version = 4 [json_name = "version"];
         bool is_preferred = 5 [json_name = "is-preferred"];
         string ifname = 6 [json_name = "ifname"];
         uint32 key_id = 7 [json_name = "key-id"];
         uint32 max_poll_interval = 8 [json_name = "max-poll-interval"];
         uint32 min_poll_interval = 9 [json_name = "min-poll-interval"];
         bool is_preempt = 10 [json_name = "is-preempt"];
         bool is_burst = 11 [json_name = "is-burst"];
         bool is_iburst = 12 [json_name = "is-iburst"];
         uint32 port_number = 13 [json_name = "port-number"];
      }
      repeated Unicast unicast = 1 [json_name = "unicast"];
   }
   Unicasts unicasts = 19 [json_name = "unicasts"];
   message Broadcasts {
      message Broadcast {
         string ifname = 1 [json_name = "ifname"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_CLIENT = 1;
            Type_SERVER = 2;
         };
         Type type = 2 [json_name = "type"];
         uint32 version = 3 [json_name = "version"];
         uint32 key_id = 4 [json_name = "key-id"];
         uint32 port_number = 5 [json_name = "port-number"];
      }
      repeated Broadcast broadcast = 1 [json_name = "broadcast"];
   }
   Broadcasts broadcasts = 20 [json_name = "broadcasts"];
   message Multicasts {
      message Multicast {
         string ifname = 1 [json_name = "ifname"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_CLIENT = 1;
            Type_SERVER = 2;
         };
         Type type = 2 [json_name = "type"];
         string ip_address = 3 [json_name = "ip-address"];
         uint32 ttl_value = 4 [json_name = "ttl-value"];
         uint32 version = 5 [json_name = "version"];
         uint32 key_id = 6 [json_name = "key-id"];
         uint32 port_number = 7 [json_name = "port-number"];
      }
      repeated Multicast multicast = 1 [json_name = "multicast"];
   }
   Multicasts multicasts = 21 [json_name = "multicasts"];
   message Manycasts {
      message Manycast {
         string ifname = 1 [json_name = "ifname"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_CLIENT = 1;
            Type_SERVER = 2;
         };
         Type type = 2 [json_name = "type"];
         string ip_address = 3 [json_name = "ip-address"];
         uint32 ttl_value = 4 [json_name = "ttl-value"];
         uint32 key_id = 5 [json_name = "key-id"];
         uint32 port_number = 6 [json_name = "port-number"];
      }
      repeated Manycast manycast = 1 [json_name = "manycast"];
   }
   Manycasts manycasts = 22 [json_name = "manycasts"];
   message Authentications {
      message Authentication {
         uint32 key_id = 1 [json_name = "key-id"];
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_MD5 = 1;
            Mode_HMACX_SHA256 = 2;
         };
         Mode mode = 2 [json_name = "mode"];
         string key_value = 3 [json_name = "key-value"];
         bool is_reliable = 4 [json_name = "is-reliable"];
      }
      repeated Authentication authentication = 1 [json_name = "authentication"];
   }
   Authentications authentications = 23 [json_name = "authentications"];
   message SystemConfig {
      bool is_auth_enable = 1 [json_name = "is-auth-enable"];
      bool is_auth_password_check = 2 [json_name = "is-auth-password-check"];
      uint32 max_sess_count = 3 [json_name = "max-sess-count"];
      bool is_kod_enable = 4 [json_name = "is-kod-enable"];
      uint32 sync_interval = 5 [json_name = "sync-interval"];
      int32 min_discard_intval = 6 [json_name = "min-discard-intval"];
      int32 avg_discard_intval = 7 [json_name = "avg-discard-intval"];
      uint32 local_port = 8 [json_name = "local-port"];
      uint32 max_distance = 9 [json_name = "max-distance"];
      uint32 max_offset = 10 [json_name = "max-offset"];
   }
   SystemConfig system_config = 24 [json_name = "system-config"];
   message AccessControls {
      message AccessControl {
         enum AccessLevel {
            INVALID_ENUM_VALUE_AccessLevel = 0;
            AccessLevel_PEER = 1;
            AccessLevel_QUERY = 2;
            AccessLevel_SERVER = 3;
            AccessLevel_SYNCHRONIZATION = 4;
            AccessLevel_LIMITED = 5;
         };
         AccessLevel access_level = 1 [json_name = "access-level"];
         string acl4_identity = 2 [json_name = "acl4-identity"];
         string acl6_identity = 3 [json_name = "acl6-identity"];
      }
      repeated AccessControl access_control = 1 [json_name = "access-control"];
   }
   AccessControls access_controls = 25 [json_name = "access-controls"];
   message Clocks {
      message Clock {
         string local_addr = 1 [json_name = "local-addr"];
         uint32 stratum = 2 [json_name = "stratum"];
      }
      repeated Clock clock = 1 [json_name = "clock"];
   }
   Clocks clocks = 26 [json_name = "clocks"];
   message InInterfaceDisables {
      message InInterfaceDisable {
         string ifname = 1 [json_name = "ifname"];
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addr_family = 2 [json_name = "addr-family"];
      }
      repeated InInterfaceDisable in_interface_disable = 1 [json_name = "in-interface-disable"];
   }
   InInterfaceDisables in_interface_disables = 27 [json_name = "in-interface-disables"];
   message SourceInterfaces {
      message SourceInterface {
         string vpn_name = 1 [json_name = "vpn-name"];
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addr_family = 2 [json_name = "addr-family"];
         string ifname = 3 [json_name = "ifname"];
      }
      repeated SourceInterface source_interface = 1 [json_name = "source-interface"];
   }
   SourceInterfaces source_interfaces = 28 [json_name = "source-interfaces"];
   message ServerSourceInterfaces {
      message ServerSourceInterface {
         string ifname = 1 [json_name = "ifname"];
      }
      repeated ServerSourceInterface server_source_interface = 1 [json_name = "server-source-interface"];
   }
   ServerSourceInterfaces server_source_interfaces = 29 [json_name = "server-source-interfaces"];
   message ServerIsolateSourceInterfaces {
      message ServerIsolateSourceInterface {
         string ifname = 1 [json_name = "ifname"];
         string ipv4_addr = 2 [json_name = "ipv4-addr"];
      }
      repeated ServerIsolateSourceInterface server_isolate_source_interface = 1 [json_name = "server-isolate-source-interface"];
   }
   ServerIsolateSourceInterfaces server_isolate_source_interfaces = 30 [json_name = "server-isolate-source-interfaces"];
   message ServerSourceIpv6Addresses {
      message ServerSourceIpv6Address {
         string ipv6_addr = 1 [json_name = "ipv6-addr"];
         string vpn_name = 2 [json_name = "vpn-name"];
      }
      repeated ServerSourceIpv6Address server_source_ipv6_address = 1 [json_name = "server-source-ipv6-address"];
   }
   ServerSourceIpv6Addresses server_source_ipv6_addresses = 31 [json_name = "server-source-ipv6-addresses"];
   message ServerIsolateSourceIpv6Interfaces {
      message ServerIsolateSourceIpv6Interface {
         string ifname = 1 [json_name = "ifname"];
         string ipv6_addr = 2 [json_name = "ipv6-addr"];
      }
      repeated ServerIsolateSourceIpv6Interface server_isolate_source_ipv6_interface = 1 [json_name = "server-isolate-source-ipv6-interface"];
   }
   ServerIsolateSourceIpv6Interfaces server_isolate_source_ipv6_interfaces = 32 [json_name = "server-isolate-source-ipv6-interfaces"];
   message ServerSourceAllInterfaces {
      message ServerSourceAllInterface {
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addr_family = 1 [json_name = "addr-family"];
      }
      repeated ServerSourceAllInterface server_source_all_interface = 1 [json_name = "server-source-all-interface"];
   }
   ServerSourceAllInterfaces server_source_all_interfaces = 33 [json_name = "server-source-all-interfaces"];
   message ServerEnables {
      message ServerEnable {
         enum AddrFamily {
            INVALID_ENUM_VALUE_AddrFamily = 0;
            AddrFamily_IPV4 = 1;
            AddrFamily_IPV6 = 2;
         };
         AddrFamily addr_family = 1 [json_name = "addr-family"];
      }
      repeated ServerEnable server_enable = 1 [json_name = "server-enable"];
   }
   ServerEnables server_enables = 34 [json_name = "server-enables"];
   message Status {
      enum ClockStatus {
         ClockStatus_UNSYNCHRONIZED = 0;
         ClockStatus_SYNCHRONIZED = 1;
      };
      ClockStatus clock_status = 1 [json_name = "clock-status"];
      int32 stratum = 2 [json_name = "stratum"];
      string source = 3 [json_name = "source"];
      string precision = 4 [json_name = "precision"];
      string offset = 5 [json_name = "offset"];
      string nominal_frequence = 6 [json_name = "nominal-frequence"];
      string actual_frequence = 7 [json_name = "actual-frequence"];
      string root_delay = 8 [json_name = "root-delay"];
      string root_dispersion = 9 [json_name = "root-dispersion"];
      string peer_dispersion = 10 [json_name = "peer-dispersion"];
      string reference_time = 11 [json_name = "reference-time"];
      string vpn_name = 12 [json_name = "vpn-name"];
      enum SyncState {
         SyncState_CLOCKX_ISX_NOTX_SET = 0;
         SyncState_FREQUENCYX_ISX_SET = 1;
         SyncState_TIMEX_ISX_SET = 2;
         SyncState_MODEX_ISX_FREQUENCY = 3;
         SyncState_CLOCKX_ISX_SYNCHRONIZED = 4;
         SyncState_SPIKEX_ISX_DETECTEDX_ = 5;
      };
      SyncState sync_state = 13 [json_name = "sync-state"];
   }
   Status status = 35 [json_name = "status"];
   message BoardStatuses {
      message BoardStatus {
         string board_id = 1 [json_name = "board-id"];
         string source = 2 [json_name = "source"];
         enum Configured {
            Configured_NO = 0;
            Configured_YES = 1;
         };
         Configured configured = 3 [json_name = "configured"];
         enum Status {
            Status_UNSYNCHRONIZED = 0;
            Status_SYNCHRONIZED = 1;
         };
         Status status = 4 [json_name = "status"];
         string offset = 5 [json_name = "offset"];
         string precision = 6 [json_name = "precision"];
         string poll = 7 [json_name = "poll"];
         string reference_time = 8 [json_name = "reference-time"];
         string current_time = 9 [json_name = "current-time"];
      }
      repeated BoardStatus board_status = 1 [json_name = "board-status"];
   }
   BoardStatuses board_statuses = 36 [json_name = "board-statuses"];
   message FullSessions {
      message FullSession {
         string source = 1 [json_name = "source"];
         string local_mode = 2 [json_name = "local-mode"];
         string vpn_name = 3 [json_name = "vpn-name"];
         string ifname = 4 [json_name = "ifname"];
         uint32 stratum = 5 [json_name = "stratum"];
         string clock_status = 6 [json_name = "clock-status"];
         string reference_source = 7 [json_name = "reference-source"];
         string local_poll = 8 [json_name = "local-poll"];
         string current_poll = 9 [json_name = "current-poll"];
         string peer_mode = 10 [json_name = "peer-mode"];
         string peer_poll = 11 [json_name = "peer-poll"];
         string offset = 12 [json_name = "offset"];
         string delay = 13 [json_name = "delay"];
         string dispersion = 14 [json_name = "dispersion"];
         string root_delay = 15 [json_name = "root-delay"];
         string root_dispersion = 16 [json_name = "root-dispersion"];
         uint32 reachable = 17 [json_name = "reachable"];
         string distance = 18 [json_name = "distance"];
         enum SyncState {
            SyncState_CLOCKX_ISX_NOTX_SET = 0;
            SyncState_FREQUENCYX_ISX_SET = 1;
            SyncState_TIMEX_ISX_SET = 2;
            SyncState_MODEX_ISX_FREQUENCY = 3;
            SyncState_CLOCKX_ISX_SYNCHRONIZED = 4;
            SyncState_SPIKEX_ISX_DETECTEDX_ = 5;
         };
         SyncState sync_state = 19 [json_name = "sync-state"];
         string precision = 20 [json_name = "precision"];
         uint32 version = 21 [json_name = "version"];
         string reference_time = 22 [json_name = "reference-time"];
         string origin_time = 23 [json_name = "origin-time"];
         string receive_time = 24 [json_name = "receive-time"];
         string xmit_time = 25 [json_name = "xmit-time"];
         string filter_delay = 26 [json_name = "filter-delay"];
         string filter_offset = 27 [json_name = "filter-offset"];
         string filter_dispersion = 28 [json_name = "filter-dispersion"];
         string reference_status = 29 [json_name = "reference-status"];
         string flags = 30 [json_name = "flags"];
         string when = 31 [json_name = "when"];
      }
      repeated FullSession full_session = 1 [json_name = "full-session"];
   }
   FullSessions full_sessions = 37 [json_name = "full-sessions"];
   message Traces {
      message Trace {
         int32 stratum = 1 [json_name = "stratum"];
         string server_address = 2 [json_name = "server-address"];
         string reference_source = 3 [json_name = "reference-source"];
         string offset = 4 [json_name = "offset"];
         string distance = 5 [json_name = "distance"];
      }
      repeated Trace trace = 1 [json_name = "trace"];
   }
   Traces traces = 38 [json_name = "traces"];
}


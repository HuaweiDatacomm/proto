syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-ecc
// revision 2019-05-02
// namespace urn:huawei:yang:huawei-ecc

package huawei_ecc;

message Ecc {
   message EccGlobalCfg {
      int32 maxKeyPair = 1;
   }
   EccGlobalCfg eccGlobalCfg = 1;
   message EccKeyPairCfgs {
      message EccKeyPairCfg {
         string hostKeyCode = 1;
         string keyPairLabel = 2;
         enum KeySize {
            KeySize_X_256 = 0;
            KeySize_X_384 = 1;
            KeySize_X_521 = 2;
         };
         KeySize keySize = 3;
      }
      repeated EccKeyPairCfg eccKeyPairCfg = 1;
   }
   EccKeyPairCfgs eccKeyPairCfgs = 2;
   message EccLocalKeys {
      message EccLocalKey {
         string hostKeyCode = 1;
         string hostKeyName = 2;
         string hostKeyPEM = 3;
         enum KeySize {
            KeySize_X_256 = 0;
            KeySize_X_384 = 1;
            KeySize_X_521 = 2;
         };
         KeySize keySize = 4;
      }
      EccLocalKey eccLocalKey = 1;
   }
   EccLocalKeys eccLocalKeys = 3;
   message EccPeerKeys {
      message EccPeerKey {
         string keyCode = 1;
         string keyName = 2;
      }
      repeated EccPeerKey eccPeerKey = 1;
   }
   EccPeerKeys eccPeerKeys = 4;
   message Sm2GlobalCfg {
      int32 maxKeyPair = 1;
   }
   Sm2GlobalCfg sm2GlobalCfg = 5;
   message Sm2KeyPairCfgs {
      message Sm2KeyPairCfg {
         string hostKeyCode = 1;
         string keyPairLabel = 2;
         enum KeySize {
            KeySize_X_256 = 0;
         };
         KeySize keySize = 3;
      }
      repeated Sm2KeyPairCfg sm2KeyPairCfg = 1;
   }
   Sm2KeyPairCfgs sm2KeyPairCfgs = 6;
   message Sm2PeerKeys {
      message Sm2PeerKey {
         string keyCode = 1;
         string keyName = 2;
      }
      repeated Sm2PeerKey sm2PeerKey = 1;
   }
   Sm2PeerKeys sm2PeerKeys = 7;
   message LocalKeys {
      message LocalKey {
         enum KeySize {
            INVALID_ENUM_VALUE_KeySize = 0;
            KeySize_X_256 = 256;
            KeySize_X_384 = 384;
            KeySize_X_521 = 521;
         };
         KeySize key_size = 1 [json_name = "key-size"];
         string host_key_name = 2 [json_name = "host-key-name"];
         string host_key_code = 3 [json_name = "host-key-code"];
         string host_key_pem = 4 [json_name = "host-key-pem"];
      }
      LocalKey local_key = 1 [json_name = "local-key"];
   }
   LocalKeys local_keys = 8 [json_name = "local-keys"];
   message PeerKeys {
      message PeerKey {
         string key_name = 1 [json_name = "key-name"];
         string key_code = 2 [json_name = "key-code"];
         enum EncodingType {
            EncodingType_DER = 0;
            EncodingType_PEM = 1;
            EncodingType_OPENSSH = 2;
         };
         EncodingType encoding_type = 3 [json_name = "encoding-type"];
      }
      repeated PeerKey peer_key = 1 [json_name = "peer-key"];
   }
   PeerKeys peer_keys = 9 [json_name = "peer-keys"];
   message KeyPairs {
      message KeyPair {
         string key_pair_label = 1 [json_name = "key-pair-label"];
         enum KeySize {
            INVALID_ENUM_VALUE_KeySize = 0;
            KeySize_X_256 = 256;
            KeySize_X_384 = 384;
            KeySize_X_521 = 521;
         };
         KeySize key_size = 2 [json_name = "key-size"];
         string host_key_code = 3 [json_name = "host-key-code"];
      }
      repeated KeyPair key_pair = 1 [json_name = "key-pair"];
   }
   KeyPairs key_pairs = 10 [json_name = "key-pairs"];
   message EccGlobal {
      int32 max_key_pair = 1 [json_name = "max-key-pair"];
   }
   EccGlobal ecc_global = 11 [json_name = "ecc-global"];
}


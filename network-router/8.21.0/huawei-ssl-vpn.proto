syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-ssl-vpn
// revision 2021-05-27
// namespace urn:huawei:yang:huawei-ssl-vpn

package huawei_ssl_vpn;

message SslVpn {
   message VirtualGateways {
      message VirtualGateway {
         string name = 1 [json_name = "name"];
         string domain = 2 [json_name = "domain"];
         message ServiceAddresses {
            message Addresses {
               message Address {
                  uint32 port = 1 [json_name = "port"];
                  message IpAddresses {
                     message IpAddress {
                        string ip = 1 [json_name = "ip"];
                        bool public = 2 [json_name = "public"];
                     }
                     repeated IpAddress ip_address = 1 [json_name = "ip-address"];
                  }
                  IpAddresses ip_addresses = 2 [json_name = "ip-addresses"];
                  message Interfaces {
                     message Interface {
                        string if_name = 1 [json_name = "if-name"];
                        bool public = 2 [json_name = "public"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 3 [json_name = "interfaces"];
               }
               repeated Address address = 1 [json_name = "address"];
            }
            Addresses addresses = 1 [json_name = "addresses"];
            bool link_backup = 2 [json_name = "link-backup"];
         }
         ServiceAddresses service_addresses = 3 [json_name = "service-addresses"];
         message ServerCertificate {
            message EncryptionType_Rsa {
               string certificate = 1 [json_name = "certificate"];
            }
            message EncryptionType_Sm2 {
               string encryption_certificate = 1 [json_name = "encryption-certificate"];
               string signature_certificate = 2 [json_name = "signature-certificate"];
            }
            oneof EncryptionType {
               EncryptionType_Rsa encryption_type_rsa = 1 [json_name = "rsa"];
               EncryptionType_Sm2 encryption_type_sm2 = 2 [json_name = "sm2"];
            }
         }
         ServerCertificate server_certificate = 4 [json_name = "server-certificate"];
         message DnsServers {
            repeated string ip = 1 [json_name = "ip"];
         }
         DnsServers dns_servers = 5 [json_name = "dns-servers"];
         uint32 max_online_user = 6 [json_name = "max-online-user"];
         message TunnelLifecycle {
            uint32 idle_timeout = 1 [json_name = "idle-timeout"];
            uint32 max_lifecycle = 2 [json_name = "max-lifecycle"];
         }
         TunnelLifecycle tunnel_lifecycle = 7 [json_name = "tunnel-lifecycle"];
         message Security {
            enum AuthenticationMode {
               AuthenticationMode_USERX_PASSWORD = 0;
               AuthenticationMode_USERX_PASSWORDX_CERT = 1;
               AuthenticationMode_CERTX_CHALLENGE = 2;
               AuthenticationMode_CERTX_ANONYMOUS = 3;
            };
            AuthenticationMode authentication_mode = 1 [json_name = "authentication-mode"];
            string authentication_domain = 2 [json_name = "authentication-domain"];
            message ClientCertificate {
               repeated string client_ca_certificate = 1 [json_name = "client-ca-certificate"];
               message ValidityFilter {
                  string start_time = 1 [json_name = "start-time"];
                  string end_time = 2 [json_name = "end-time"];
                  repeated string issuer = 3 [json_name = "issuer"];
                  bool digital_signature = 4 [json_name = "digital-signature"];
               }
               ValidityFilter validity_filter = 2 [json_name = "validity-filter"];
               message CertUserFilter {
                  message UserFilter {
                     enum FirstField {
                        FirstField_ISSUER = 0;
                        FirstField_SUBJECT = 1;
                     };
                     FirstField first_field = 1 [json_name = "first-field"];
                     enum SecondField {
                        SecondField_COMMONX_NAME = 0;
                        SecondField_ORGANIZATIONX_UNIT = 1;
                        SecondField_ORGANIZATION = 2;
                        SecondField_LOCALITY = 3;
                        SecondField_STATE = 4;
                        SecondField_COUNTRY = 5;
                        SecondField_EMAIL = 6;
                     };
                     SecondField second_field = 2 [json_name = "second-field"];
                  }
                  UserFilter user_filter = 1 [json_name = "user-filter"];
                  message GroupFilter {
                     enum FirstField {
                        FirstField_ISSUER = 0;
                        FirstField_SUBJECT = 1;
                     };
                     FirstField first_field = 1 [json_name = "first-field"];
                     enum SecondField {
                        SecondField_COMMONX_NAME = 0;
                        SecondField_ORGANIZATIONX_UNIT = 1;
                        SecondField_ORGANIZATION = 2;
                        SecondField_LOCALITY = 3;
                        SecondField_STATE = 4;
                        SecondField_COUNTRY = 5;
                        SecondField_EMAIL = 6;
                     };
                     SecondField second_field = 2 [json_name = "second-field"];
                  }
                  GroupFilter group_filter = 2 [json_name = "group-filter"];
               }
               CertUserFilter cert_user_filter = 3 [json_name = "cert-user-filter"];
            }
            ClientCertificate client_certificate = 3 [json_name = "client-certificate"];
         }
         Security security = 8 [json_name = "security"];
         message Roles {
            message Role {
               string name = 1 [json_name = "name"];
               repeated string users = 2 [json_name = "users"];
               repeated string user_groups = 3 [json_name = "user-groups"];
               repeated string resource = 4 [json_name = "resource"];
            }
            repeated Role role = 1 [json_name = "role"];
         }
         Roles roles = 9 [json_name = "roles"];
         message Service {
            message NetworkExtension {
               string ip_pool = 1 [json_name = "ip-pool"];
               enum RouteMode {
                  RouteMode_FULL = 0;
                  RouteMode_SPLIT = 1;
                  RouteMode_ADAPT = 2;
               };
               RouteMode route_mode = 2 [json_name = "route-mode"];
               message Resources {
                  message Resource {
                     string name = 1 [json_name = "name"];
                     string description = 2 [json_name = "description"];
                     message Subnet {
                        string ip = 1 [json_name = "ip"];
                        string mask = 2 [json_name = "mask"];
                     }
                     Subnet subnet = 3 [json_name = "subnet"];
                  }
                  repeated Resource resource = 1 [json_name = "resource"];
               }
               Resources resources = 3 [json_name = "resources"];
               message ExcludeRoute {
                  message ExcludeIpv4Routes {
                     message ExcludeIpv4Route {
                        string ip = 1 [json_name = "ip"];
                        string netmask = 2 [json_name = "netmask"];
                     }
                     repeated ExcludeIpv4Route exclude_ipv4_route = 1 [json_name = "exclude-ipv4-route"];
                  }
                  ExcludeIpv4Routes exclude_ipv4_routes = 1 [json_name = "exclude-ipv4-routes"];
               }
               ExcludeRoute exclude_route = 4 [json_name = "exclude-route"];
               message KeepAlive {
                  bool enable = 1 [json_name = "enable"];
                  uint32 interval = 2 [json_name = "interval"];
               }
               KeepAlive keep_alive = 5 [json_name = "keep-alive"];
               bool proxy_auto_configuration = 6 [json_name = "proxy-auto-configuration"];
               bool point_to_point = 7 [json_name = "point-to-point"];
            }
            NetworkExtension network_extension = 1 [json_name = "network-extension"];
         }
         Service service = 10 [json_name = "service"];
      }
      repeated VirtualGateway virtual_gateway = 1 [json_name = "virtual-gateway"];
   }
   VirtualGateways virtual_gateways = 1 [json_name = "virtual-gateways"];
   message Specifications {
      uint32 max_online_user = 1 [json_name = "max-online-user"];
   }
   Specifications specifications = 2 [json_name = "specifications"];
}


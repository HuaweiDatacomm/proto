syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-ssl
// revision 2020-07-02
// namespace urn:huawei:yang:huawei-ssl

package huawei_ssl;

message Ssl {
   message SslPolicys {
      message SslPolicy {
         enum BasicConstEnable {
            INVALID_ENUM_VALUE_BasicConstEnable = 0;
            BasicConstEnable_ENABLE = 1;
            BasicConstEnable_DISABLE = 2;
         };
         BasicConstEnable basic_const_enable = 1 [json_name = "basic-const-enable"];
         enum CertVer3Enable {
            INVALID_ENUM_VALUE_CertVer3Enable = 0;
            CertVer3Enable_ENABLE = 1;
            CertVer3Enable_DISABLE = 2;
         };
         CertVer3Enable cert_ver3_enable = 2 [json_name = "cert-ver3-enable"];
         enum CrlVer2Enable {
            INVALID_ENUM_VALUE_CrlVer2Enable = 0;
            CrlVer2Enable_ENABLE = 1;
            CrlVer2Enable_DISABLE = 2;
         };
         CrlVer2Enable crl_ver2_enable = 3 [json_name = "crl-ver2-enable"];
         enum KeyUsagEnable {
            KeyUsagEnable_DISABLE = 0;
            KeyUsagEnable_ENABLE = 1;
         };
         KeyUsagEnable keyUsagEnable = 4;
         uint32 mini_path_len = 5 [json_name = "mini-path-len"];
         string policy_name = 6 [json_name = "policy-name"];
         message SslCertLoads {
            message SslCertLoad {
               string authCodeCrt = 1;
               string authCodeMac = 2;
               string certFile = 3;
               enum CertType {
                  CertType_ASN1_CERT = 0;
                  CertType_PEM_CERT = 1;
                  CertType_PEM_CHAIN = 2;
                  CertType_PFX_CERT = 3;
               };
               CertType certType = 4;
               enum IsCertFileEncrypted {
                  IsCertFileEncrypted_ISENCRYPTED = 0;
                  IsCertFileEncrypted_NOTENCRYPTED = 1;
               };
               IsCertFileEncrypted isCertFileEncrypted = 5;
               uint32 isMac = 6;
               string issuerName = 7;
               string keyFile = 8;
               enum KeyType {
                  KeyType_DSA = 0;
                  KeyType_RSA = 1;
               };
               KeyType keyType = 9;
               string validnotafter = 10;
               string validnotbefore = 11;
            }
            repeated SslCertLoad sslCertLoad = 1;
         }
         SslCertLoads sslCertLoads = 7;
         message SslCrlLoads {
            message SslCrlLoad {
               string crlFile = 1;
               enum CrlType {
                  CrlType_ASN1_CRL = 0;
                  CrlType_PEM_CRL = 1;
               };
               CrlType crlType = 2;
            }
            repeated SslCrlLoad sslCrlLoad = 1;
         }
         SslCrlLoads sslCrlLoads = 8;
         enum SslMinimumVersion {
            SslMinimumVersion_TLS1X_0 = 0;
            SslMinimumVersion_TLS1X_1 = 1;
            SslMinimumVersion_TLS1X_2 = 2;
         };
         SslMinimumVersion sslMinimumVersion = 9;
         message SslTrustCALoads {
            message SslTrustCALoad {
               string authCodeCa = 1;
               string caFile = 2;
               enum CaType {
                  CaType_ASN1_CA = 0;
                  CaType_PEM_CA = 1;
                  CaType_PFX_CA = 2;
               };
               CaType caType = 3;
            }
            repeated SslTrustCALoad sslTrustCALoad = 1;
         }
         SslTrustCALoads sslTrustCALoads = 10;
         enum MiniVersion {
            INVALID_ENUM_VALUE_MiniVersion = 0;
            MiniVersion_TLS1X_0 = 2;
            MiniVersion_TLS1X_1 = 3;
            MiniVersion_TLS1X_2 = 4;
            MiniVersion_TLS1X_3 = 5;
         };
         MiniVersion mini_version = 11 [json_name = "mini-version"];
         enum KeyUsageEnable {
            INVALID_ENUM_VALUE_KeyUsageEnable = 0;
            KeyUsageEnable_ENABLE = 1;
            KeyUsageEnable_DISABLE = 2;
         };
         KeyUsageEnable key_usage_enable = 12 [json_name = "key-usage-enable"];
         uint32 diffie_hellman_modulus = 13 [json_name = "diffie-hellman-modulus"];
         message SignatureAlg {
            bool ecdsa_secp256r1_sha256 = 1 [json_name = "ecdsa-secp256r1-sha256"];
            bool ecdsa_secp384r1_sha384 = 2 [json_name = "ecdsa-secp384r1-sha384"];
            bool ecdsa_secp521r1_sha512 = 3 [json_name = "ecdsa-secp521r1-sha512"];
            bool ed25519 = 4 [json_name = "ed25519"];
            bool ed448 = 5 [json_name = "ed448"];
            bool rsa_pss_pss_sha256 = 6 [json_name = "rsa-pss-pss-sha256"];
            bool rsa_pss_pss_sha384 = 7 [json_name = "rsa-pss-pss-sha384"];
            bool rsa_pss_pss_sha512 = 8 [json_name = "rsa-pss-pss-sha512"];
            bool rsa_pss_rsae_sha256 = 9 [json_name = "rsa-pss-rsae-sha256"];
            bool rsa_pss_rsae_sha384 = 10 [json_name = "rsa-pss-rsae-sha384"];
            bool rsa_pss_rsae_sha512 = 11 [json_name = "rsa-pss-rsae-sha512"];
            bool rsa_pkcs1_sha256 = 12 [json_name = "rsa-pkcs1-sha256"];
            bool rsa_pkcs1_sha384 = 13 [json_name = "rsa-pkcs1-sha384"];
            bool rsa_pkcs1_sha512 = 14 [json_name = "rsa-pkcs1-sha512"];
            bool ecdsa_sha1 = 15 [json_name = "ecdsa-sha1"];
            bool ecdsa_sha224 = 16 [json_name = "ecdsa-sha224"];
            bool rsa_sha1 = 17 [json_name = "rsa-sha1"];
            bool rsa_sha224 = 18 [json_name = "rsa-sha224"];
            bool dsa_sha1 = 19 [json_name = "dsa-sha1"];
            bool dsa_sha224 = 20 [json_name = "dsa-sha224"];
            bool dsa_sha256 = 21 [json_name = "dsa-sha256"];
            bool dsa_sha384 = 22 [json_name = "dsa-sha384"];
            bool dsa_sha512 = 23 [json_name = "dsa-sha512"];
         }
         SignatureAlg signature_alg = 14 [json_name = "signature-alg"];
         message CertLoads {
            message CertLoad {
               string cert_file = 1 [json_name = "cert-file"];
               enum CertType {
                  INVALID_ENUM_VALUE_CertType = 0;
                  CertType_ASN1X_CERT = 1;
                  CertType_PEMX_CERT = 2;
                  CertType_PFXX_CERT = 3;
                  CertType_PEMX_CHAIN = 4;
               };
               CertType cert_type = 2 [json_name = "cert-type"];
               string auth_code_crt = 3 [json_name = "auth-code-crt"];
               uint32 is_mac = 4 [json_name = "is-mac"];
               enum KeyType {
                  INVALID_ENUM_VALUE_KeyType = 0;
                  KeyType_RSA = 1;
                  KeyType_DSA = 2;
               };
               KeyType key_type = 5 [json_name = "key-type"];
               string auth_code_mac = 6 [json_name = "auth-code-mac"];
               string key_file = 7 [json_name = "key-file"];
               string issuer_name = 8 [json_name = "issuer-name"];
               string valid_not_before = 9 [json_name = "valid-not-before"];
               string valid_not_after = 10 [json_name = "valid-not-after"];
               enum IsCertFileEncrypted {
                  IsCertFileEncrypted_ISENCRYPTED = 0;
                  IsCertFileEncrypted_NOTENCRYPTED = 1;
               };
               IsCertFileEncrypted is_cert_file_encrypted = 11 [json_name = "is-cert-file-encrypted"];
            }
            repeated CertLoad cert_load = 1 [json_name = "cert-load"];
         }
         CertLoads cert_loads = 15 [json_name = "cert-loads"];
         message CrlLoads {
            message CrlLoad {
               string crl_file = 1 [json_name = "crl-file"];
               enum CrlType {
                  INVALID_ENUM_VALUE_CrlType = 0;
                  CrlType_ASN1X_CRL = 1;
                  CrlType_PEMX_CRL = 2;
               };
               CrlType crl_type = 2 [json_name = "crl-type"];
            }
            repeated CrlLoad crl_load = 1 [json_name = "crl-load"];
         }
         CrlLoads crl_loads = 16 [json_name = "crl-loads"];
         message TrustCaLoads {
            message TrustCaLoad {
               string ca_file = 1 [json_name = "ca-file"];
               enum CaType {
                  INVALID_ENUM_VALUE_CaType = 0;
                  CaType_ASN1X_CA = 1;
                  CaType_PEMX_CA = 2;
                  CaType_PFXX_CA = 3;
               };
               CaType ca_type = 2 [json_name = "ca-type"];
               string auth_code = 3 [json_name = "auth-code"];
            }
            repeated TrustCaLoad trust_ca_load = 1 [json_name = "trust-ca-load"];
         }
         TrustCaLoads trust_ca_loads = 17 [json_name = "trust-ca-loads"];
         string cipher_suite_name = 18 [json_name = "cipher-suite-name"];
         enum ExcludeRsaKex {
            INVALID_ENUM_VALUE_ExcludeRsaKex = 0;
            ExcludeRsaKex_ENABLE = 1;
            ExcludeRsaKex_DISABLE = 2;
         };
         ExcludeRsaKex exclude_rsa_kex = 19 [json_name = "exclude-rsa-kex"];
         enum ExcludeHmacSha1 {
            INVALID_ENUM_VALUE_ExcludeHmacSha1 = 0;
            ExcludeHmacSha1_ENABLE = 1;
            ExcludeHmacSha1_DISABLE = 2;
         };
         ExcludeHmacSha1 exclude_hmac_sha1 = 20 [json_name = "exclude-hmac-sha1"];
         enum ExcludeCiphermodeCbc {
            INVALID_ENUM_VALUE_ExcludeCiphermodeCbc = 0;
            ExcludeCiphermodeCbc_ENABLE = 1;
            ExcludeCiphermodeCbc_DISABLE = 2;
         };
         ExcludeCiphermodeCbc exclude_ciphermode_cbc = 21 [json_name = "exclude-ciphermode-cbc"];
         message EcdhGroup {
            bool nist = 1 [json_name = "nist"];
            bool curve = 2 [json_name = "curve"];
            bool brainpool = 3 [json_name = "brainpool"];
         }
         EcdhGroup ecdh_group = 22 [json_name = "ecdh-group"];
         string pki_realm = 23 [json_name = "pki-realm"];
      }
      repeated SslPolicy ssl_policy = 1 [json_name = "ssl-policy"];
   }
   SslPolicys ssl_policys = 1 [json_name = "ssl-policys"];
   message SslCipherSuites {
      message SslCipherSuite {
         string cipher_suite_name = 1 [json_name = "cipher-suite-name"];
         enum SslCiphers {
            INVALID_ENUM_VALUE_SslCiphers = 0;
            SslCiphers_RSAX_WITHX_AESX_256X_SHA = 1;
            SslCiphers_RSAX_WITHX_AESX_128X_SHA = 2;
            SslCiphers_DHEX_RSAX_WITHX_AESX_256X_SHA = 3;
            SslCiphers_DHEX_DSSX_WITHX_AESX_256X_SHA = 4;
            SslCiphers_DHEX_RSAX_WITHX_AESX_128X_SHA = 5;
            SslCiphers_DHEX_DSSX_WITHX_AESX_128X_SHA = 6;
            SslCiphers_RSAX_AESX_128X_CBCX_SHA = 7;
            SslCiphers_RSAX_AESX_256X_CBCX_SHA = 8;
            SslCiphers_RSAX_AESX_128X_CBCX_SHA256 = 9;
            SslCiphers_RSAX_AESX_256X_CBCX_SHA256 = 10;
            SslCiphers_DHEX_DSSX_AESX_128X_CBCX_SHA = 11;
            SslCiphers_DHEX_RSAX_AESX_128X_CBCX_SHA = 12;
            SslCiphers_DHEX_DSSX_AESX_256X_CBCX_SHA = 13;
            SslCiphers_DHEX_RSAX_AESX_256X_CBCX_SHA = 14;
            SslCiphers_DHEX_DSSX_AESX_128X_CBCX_SHA256 = 15;
            SslCiphers_DHEX_RSAX_AESX_128X_CBCX_SHA256 = 16;
            SslCiphers_DHEX_DSSX_AESX_256X_CBCX_SHA256 = 17;
            SslCiphers_DHEX_RSAX_AESX_256X_CBCX_SHA256 = 18;
            SslCiphers_RSAX_WITHX_AESX_128X_GCMX_SHA256 = 19;
            SslCiphers_RSAX_WITHX_AESX_256X_GCMX_SHA384 = 20;
            SslCiphers_DHEX_RSAX_WITHX_AESX_128X_GCMX_SHA256 = 21;
            SslCiphers_DHEX_RSAX_WITHX_AESX_256X_GCMX_SHA384 = 22;
            SslCiphers_DHEX_DSSX_WITHX_AESX_128X_GCMX_SHA256 = 23;
            SslCiphers_DHEX_DSSX_WITHX_AESX_256X_GCMX_SHA384 = 24;
            SslCiphers_ECDHEX_RSAX_WITHX_AESX_128X_GCMX_SHA256 = 25;
            SslCiphers_ECDHEX_RSAX_WITHX_AESX_256X_GCMX_SHA384 = 26;
            SslCiphers_AESX_128X_GCMX_SHA256 = 27;
            SslCiphers_AESX_256X_GCMX_SHA384 = 28;
            SslCiphers_CHACHA20X_POLY1305X_SHA256 = 29;
            SslCiphers_AESX_128X_CCMX_SHA256 = 30;
         };
         repeated SslCiphers ssl_ciphers = 2 [json_name = "ssl-ciphers"];
      }
      repeated SslCipherSuite ssl_cipher_suite = 1 [json_name = "ssl-cipher-suite"];
   }
   SslCipherSuites ssl_cipher_suites = 2 [json_name = "ssl-cipher-suites"];
   message DtlsPolicys {
      message DtlsPolicy {
         string policy_name = 1 [json_name = "policy-name"];
         string pki_domain_name = 2 [json_name = "pki-domain-name"];
         enum BasicConstEnable {
            INVALID_ENUM_VALUE_BasicConstEnable = 0;
            BasicConstEnable_ENABLE = 1;
            BasicConstEnable_DISABLE = 2;
         };
         BasicConstEnable basic_const_enable = 3 [json_name = "basic-const-enable"];
         uint32 mini_path_len = 4 [json_name = "mini-path-len"];
         enum KeyUsageEnable {
            INVALID_ENUM_VALUE_KeyUsageEnable = 0;
            KeyUsageEnable_ENABLE = 1;
            KeyUsageEnable_DISABLE = 2;
         };
         KeyUsageEnable key_usage_enable = 5 [json_name = "key-usage-enable"];
      }
      repeated DtlsPolicy dtls_policy = 1 [json_name = "dtls-policy"];
   }
   DtlsPolicys dtls_policys = 3 [json_name = "dtls-policys"];
   message CertificateAlarm {
      uint32 early_warning_time = 1 [json_name = "early-warning-time"];
      uint32 interval = 2 [json_name = "interval"];
   }
   CertificateAlarm certificate_alarm = 4 [json_name = "certificate-alarm"];
}


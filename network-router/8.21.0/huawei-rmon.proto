syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-rmon
// revision 2019-09-23
// namespace urn:huawei:yang:huawei-rmon

package huawei_rmon;

message Rmon {
   message Alarms {
      message Alarm {
         int32 index = 1 [json_name = "index"];
         string alarm_oid = 2 [json_name = "alarm-oid"];
         int32 interval = 3 [json_name = "interval"];
         enum ValueType {
            INVALID_ENUM_VALUE_ValueType = 0;
            ValueType_ABSOLUTE = 1;
            ValueType_CHANGERATIO = 2;
            ValueType_DELTA = 3;
         };
         ValueType value_type = 4 [json_name = "value-type"];
         int32 rising_threshold = 5 [json_name = "rising-threshold"];
         int32 rising_threshold_index = 6 [json_name = "rising-threshold-index"];
         int32 falling_threshold = 7 [json_name = "falling-threshold"];
         int32 falling_threshold_index = 8 [json_name = "falling-threshold-index"];
         string owner = 9 [json_name = "owner"];
         enum AlarmSendType {
            INVALID_ENUM_VALUE_AlarmSendType = 0;
            AlarmSendType_FALLING = 1;
            AlarmSendType_RISING = 2;
            AlarmSendType_RISINGX_ORX_FALLING = 3;
         };
         AlarmSendType alarm_send_type = 10 [json_name = "alarm-send-type"];
         int32 alarm_value = 11 [json_name = "alarm-value"];
         enum Status {
            INVALID_ENUM_VALUE_Status = 0;
            Status_VALID = 1;
            Status_CREATEX_REQUEST = 2;
            Status_UNDERX_CREATION = 3;
            Status_INVALID = 4;
         };
         Status status = 12 [json_name = "status"];
      }
      repeated Alarm alarm = 1 [json_name = "alarm"];
   }
   Alarms alarms = 1 [json_name = "alarms"];
   message Events {
      message Event {
         int32 index = 1 [json_name = "index"];
         enum Type {
            INVALID_ENUM_VALUE_Type = 0;
            Type_NONE = 1;
            Type_LOG = 2;
            Type_TRAP = 3;
            Type_LOGX_TRAP = 4;
         };
         Type type = 2 [json_name = "type"];
         string trap_community = 3 [json_name = "trap-community"];
         string description = 4 [json_name = "description"];
         string owner = 5 [json_name = "owner"];
         enum Status {
            INVALID_ENUM_VALUE_Status = 0;
            Status_VALID = 1;
            Status_CREATEX_REQUEST = 2;
            Status_UNDERX_CREATION = 3;
            Status_INVALID = 4;
         };
         Status status = 6 [json_name = "status"];
         string last_trig_time = 7 [json_name = "last-trig-time"];
         message EventLogs {
            message EventLog {
               int32 index = 1 [json_name = "index"];
               string description = 2 [json_name = "description"];
               string log_time = 3 [json_name = "log-time"];
               enum Status {
                  INVALID_ENUM_VALUE_Status = 0;
                  Status_VALID = 1;
                  Status_CREATEX_REQUEST = 2;
                  Status_UNDERX_CREATION = 3;
                  Status_INVALID = 4;
               };
               Status status = 4 [json_name = "status"];
            }
            repeated EventLog event_log = 1 [json_name = "event-log"];
         }
         EventLogs event_logs = 8 [json_name = "event-logs"];
      }
      repeated Event event = 1 [json_name = "event"];
   }
   Events events = 2 [json_name = "events"];
   message Statistics {
      message Statistic {
         int32 entry_index = 1 [json_name = "entry-index"];
         string interface_name = 2 [json_name = "interface-name"];
         string owner = 3 [json_name = "owner"];
         message State {
            enum Status {
               INVALID_ENUM_VALUE_Status = 0;
               Status_VALID = 1;
               Status_CREATEX_REQUEST = 2;
               Status_UNDERX_CREATION = 3;
               Status_INVALID = 4;
            };
            Status status = 1 [json_name = "status"];
            uint32 drop_packets = 2 [json_name = "drop-packets"];
            uint32 rcv_octets = 3 [json_name = "rcv-octets"];
            uint32 rcv_packets = 4 [json_name = "rcv-packets"];
            uint32 broadcast_packets = 5 [json_name = "broadcast-packets"];
            uint32 multicast_packets = 6 [json_name = "multicast-packets"];
            uint32 crc_align_errors = 7 [json_name = "crc-align-errors"];
            uint32 under_size_packets = 8 [json_name = "under-size-packets"];
            uint32 over_size_packets = 9 [json_name = "over-size-packets"];
            uint32 fragment_packets = 10 [json_name = "fragment-packets"];
            uint32 jabber_packets = 11 [json_name = "jabber-packets"];
            uint32 collision_packets = 12 [json_name = "collision-packets"];
            uint32 pkts_64_octets = 13 [json_name = "pkts-64-octets"];
            uint32 pkts_65_to_127 = 14 [json_name = "pkts-65-to-127"];
            uint32 pkts_128_to_255 = 15 [json_name = "pkts-128-to-255"];
            uint32 pkts_256_to_511 = 16 [json_name = "pkts-256-to-511"];
            uint32 pkts_512_to_1023 = 17 [json_name = "pkts-512-to-1023"];
            uint32 pkts_1024_to_1518 = 18 [json_name = "pkts-1024-to-1518"];
         }
         State state = 4 [json_name = "state"];
      }
      repeated Statistic statistic = 1 [json_name = "statistic"];
   }
   Statistics statistics = 3 [json_name = "statistics"];
   message Historys {
      message History {
         int32 entry_index = 1 [json_name = "entry-index"];
         string interface_name = 2 [json_name = "interface-name"];
         int32 buckets_number = 3 [json_name = "buckets-number"];
         int32 interval = 4 [json_name = "interval"];
         string owner = 5 [json_name = "owner"];
         message State {
            enum Status {
               INVALID_ENUM_VALUE_Status = 0;
               Status_VALID = 1;
               Status_CREATEX_REQUEST = 2;
               Status_UNDERX_CREATION = 3;
               Status_INVALID = 4;
            };
            Status status = 1 [json_name = "status"];
            string sample_index = 2 [json_name = "sample-index"];
            uint32 drop_packets = 3 [json_name = "drop-packets"];
            uint32 rcv_octets = 4 [json_name = "rcv-octets"];
            uint32 rcv_packets = 5 [json_name = "rcv-packets"];
            uint32 broadcast_packets = 6 [json_name = "broadcast-packets"];
            uint32 multicast_packets = 7 [json_name = "multicast-packets"];
            uint32 crc_align_errors = 8 [json_name = "crc-align-errors"];
            uint32 under_size_packets = 9 [json_name = "under-size-packets"];
            uint32 over_size_packets = 10 [json_name = "over-size-packets"];
            uint32 fragment_packets = 11 [json_name = "fragment-packets"];
            uint32 jabber_packets = 12 [json_name = "jabber-packets"];
            uint32 collision_packets = 13 [json_name = "collision-packets"];
            uint32 utilization = 14 [json_name = "utilization"];
            string last_sample_time = 15 [json_name = "last-sample-time"];
         }
         State state = 6 [json_name = "state"];
      }
      repeated History history = 1 [json_name = "history"];
   }
   Historys historys = 4 [json_name = "historys"];
}


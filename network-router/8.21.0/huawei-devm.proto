syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-17 14:52:48
// ProtoYang-version 1
// module huawei-devm
// revision 2021-01-06
// revision 2020-11-27
// revision 2020-08-07
// revision 2020-06-04
// revision 2020-05-07
// revision 2020-04-10
// revision 2020-03-17
// revision 2020-03-11
// revision 2020-02-29
// revision 2020-02-14
// revision 2019-09-09
// revision 2019-04-05
// namespace urn:huawei:yang:huawei-devm

package huawei_devm;

message Devm {
   message PhysicalEntitys {
      message PhysicalEntity {
         enum Class {
            Class_OTHER = 0;
            Class_CHASSIS = 1;
            Class_MPUMODULE = 4;
            Class_LPUMODULE = 5;
            Class_SFUMODULE = 6;
            Class_CLOCKMODULE = 7;
            Class_CARDMODULE = 9;
            Class_PORT = 10;
            Class_FAN = 16;
            Class_POWERSUPPLY = 17;
            Class_CONTAINER = 18;
            Class_PPMODULE = 4108;
            Class_SWFMODULE = 4109;
            Class_ECUMODULE = 4110;
            Class_ICUMODULE = 4111;
            Class_LFE = 4162;
            Class_CFMODULE = 4170;
            Class_LCD = 4181;
            Class_PEM = 5006;
            Class_CMUMODULE = 5010;
            Class_PIC = 5011;
            Class_TSU = 5012;
            Class_PMU = 5031;
            Class_PM = 5032;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
         string serial_number = 3 [json_name = "serial-number"];
         uint32 index = 4 [json_name = "index"];
         uint32 chassis_index = 5 [json_name = "chassis-index"];
         uint32 board_index = 6 [json_name = "board-index"];
         string name = 7 [json_name = "name"];
         string entity_description = 8 [json_name = "entity-description"];
         string alias = 9 [json_name = "alias"];
         string vendor_type = 10 [json_name = "vendor-type"];
         uint32 contained_index = 11 [json_name = "contained-index"];
         uint32 parent_relative_position = 12 [json_name = "parent-relative-position"];
         string hardware_version = 13 [json_name = "hardware-version"];
         string firmware_version = 14 [json_name = "firmware-version"];
         string software_version = 15 [json_name = "software-version"];
         string module_name = 16 [json_name = "module-name"];
         bool is_fru = 17 [json_name = "is-fru"];
         enum AdminState {
            AdminState_INACTIVE = 0;
            AdminState_ACTIVE = 1;
            AdminState_NOTSUPPORTED = 2;
         };
         AdminState admin_state = 18 [json_name = "admin-state"];
         enum RunningState {
            RunningState_UNKNOWN = 0;
            RunningState_NORMAL = 1;
            RunningState_FAULT = 2;
            RunningState_OFFLINE = 3;
            RunningState_NOTSUPPORTED = 4;
            RunningState_OPTICALNOTEQUIPPED = 5;
            RunningState_NOTINSTALL = 6;
            RunningState_WRONGTYPE = 7;
            RunningState_REGISTERED = 8;
            RunningState_UNREGISTERED = 9;
            RunningState_POWEROFF = 10;
            RunningState_PORTX_PHYSICALX_DOWN = 11;
            RunningState_ONLINE = 12;
         };
         RunningState running_state = 19 [json_name = "running-state"];
         enum StandbyState {
            StandbyState_MASTER = 0;
            StandbyState_SLAVE = 1;
            StandbyState_NOTSUPPORTED = 2;
            StandbyState_SYSTEMMASTER = 3;
            StandbyState_SYSTEMSLAVE = 4;
         };
         StandbyState standby_state = 20 [json_name = "standby-state"];
         string system_oid = 21 [json_name = "system-oid"];
         string ls_name = 22 [json_name = "ls-name"];
         string esn = 23 [json_name = "esn"];
      }
      repeated PhysicalEntity physical_entity = 1 [json_name = "physical-entity"];
   }
   PhysicalEntitys physical_entitys = 1 [json_name = "physical-entitys"];
   message LogicEntitys {
      message LogicEntity {
         enum Class {
            Class_OTHER = 0;
            Class_CHASSIS = 1;
            Class_MPUMODULE = 4;
            Class_LPUMODULE = 5;
            Class_SFUMODULE = 6;
            Class_CLOCKMODULE = 7;
            Class_CARDMODULE = 9;
            Class_PORT = 10;
            Class_FAN = 16;
            Class_POWERSUPPLY = 17;
            Class_CONTAINER = 18;
            Class_PPMODULE = 4108;
            Class_SWFMODULE = 4109;
            Class_ECUMODULE = 4110;
            Class_ICUMODULE = 4111;
            Class_LFE = 4162;
            Class_CFMODULE = 4170;
            Class_LCD = 4181;
            Class_PEM = 5006;
            Class_CMUMODULE = 5010;
            Class_PIC = 5011;
            Class_TSU = 5012;
            Class_PMU = 5031;
            Class_PM = 5032;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
         string serial_number = 3 [json_name = "serial-number"];
         string vendor_type = 4 [json_name = "vendor-type"];
         string name = 5 [json_name = "name"];
         string entity_description = 6 [json_name = "entity-description"];
         uint32 index = 7 [json_name = "index"];
         enum OperState {
            OperState_UNKNOWN = 0;
            OperState_NORMAL = 1;
            OperState_FAULT = 2;
            OperState_OFFLINE = 3;
            OperState_NOTSUPPORTED = 4;
            OperState_OPTICALNOTEQUIPPED = 5;
            OperState_NOTINSTALL = 6;
            OperState_WRONGTYPE = 7;
            OperState_REGISTERED = 8;
            OperState_UNREGISTERED = 9;
            OperState_POWEROFF = 10;
            OperState_PORTX_PHYSICALX_DOWN = 11;
            OperState_ONLINE = 12;
         };
         OperState oper_state = 8 [json_name = "oper-state"];
         uint32 parent_index = 9 [json_name = "parent-index"];
         uint32 parent_relative_position = 10 [json_name = "parent-relative-position"];
         string memo = 11 [json_name = "memo"];
      }
      repeated LogicEntity logic_entity = 1 [json_name = "logic-entity"];
   }
   LogicEntitys logic_entitys = 2 [json_name = "logic-entitys"];
   message Chassiss {
      message Chassis {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string type = 3 [json_name = "type"];
         string service_type = 4 [json_name = "service-type"];
         uint32 slot_num = 5 [json_name = "slot-num"];
         uint32 board_num = 6 [json_name = "board-num"];
         uint32 fan_num = 7 [json_name = "fan-num"];
         uint32 power_num = 8 [json_name = "power-num"];
         uint32 up_time = 9 [json_name = "up-time"];
         uint32 status_last_change = 10 [json_name = "status-last-change"];
         uint32 entity_last_change = 11 [json_name = "entity-last-change"];
         uint32 current_id = 12 [json_name = "current-id"];
         uint32 next_id = 13 [json_name = "next-id"];
         enum CurrentRunMode {
            CurrentRunMode_UNKNOWN = 0;
            CurrentRunMode_SINGLE = 1;
            CurrentRunMode_CCCX_0 = 2;
            CurrentRunMode_CCCX_1 = 3;
            CurrentRunMode_CCCX_2 = 4;
         };
         CurrentRunMode current_run_mode = 14 [json_name = "current-run-mode"];
         enum NextRunMode {
            NextRunMode_UNKNOWN = 0;
            NextRunMode_SINGLE = 1;
            NextRunMode_CCCX_0 = 2;
            NextRunMode_CCCX_1 = 3;
            NextRunMode_CCCX_2 = 4;
         };
         NextRunMode next_run_mode = 15 [json_name = "next-run-mode"];
         uint32 dust_clean_cycle = 16 [json_name = "dust-clean-cycle"];
         string last_clean_date = 17 [json_name = "last-clean-date"];
         uint32 up_to_last_clean = 18 [json_name = "up-to-last-clean"];
         uint32 alarm_exist_days = 19 [json_name = "alarm-exist-days"];
         message MonitorBoardChanges {
            message MonitorBoardChange {
               uint32 board_index = 1 [json_name = "board-index"];
               uint32 status_last_change = 2 [json_name = "status-last-change"];
               uint32 entity_last_change = 3 [json_name = "entity-last-change"];
            }
            repeated MonitorBoardChange monitor_board_change = 1 [json_name = "monitor-board-change"];
         }
         MonitorBoardChanges monitor_board_changes = 20 [json_name = "monitor-board-changes"];
         message FanAttribute {
            enum Workmode {
               INVALID_ENUM_VALUE_Workmode = 0;
               Workmode_AUTO = 1;
               Workmode_MANUAL = 2;
               Workmode_SILENT = 4;
               Workmode_FULL = 5;
               Workmode_MINIMUMX_PERCENT = 9;
               Workmode_DENOISE = 11;
            };
            Workmode workmode = 1 [json_name = "workmode"];
            uint32 speed = 2 [json_name = "speed"];
         }
         FanAttribute fan_attribute = 21 [json_name = "fan-attribute"];
         message PowerSupplyAttribute {
            uint32 pm_output_limit = 1 [json_name = "pm-output-limit"];
            enum PmInputVoltage110 {
               PmInputVoltage110_NO = 0;
               PmInputVoltage110_YES = 1;
            };
            PmInputVoltage110 pm_input_voltage_110 = 2 [json_name = "pm-input-voltage-110"];
            enum PowerSupplyMode {
               INVALID_ENUM_VALUE_PowerSupplyMode = 0;
               PowerSupplyMode_STANDARD = 1;
               PowerSupplyMode_ASSIGN = 2;
            };
            PowerSupplyMode power_supply_mode = 3 [json_name = "power-supply-mode"];
            uint32 power_supply_input = 4 [json_name = "power-supply-input"];
            enum PowerSupplyTemp {
               INVALID_ENUM_VALUE_PowerSupplyTemp = 0;
               PowerSupplyTemp_TEMPLOW = 40;
               PowerSupplyTemp_TEMPMIDDLE = 50;
               PowerSupplyTemp_TEMPHIGH = 55;
            };
            PowerSupplyTemp power_supply_temp = 5 [json_name = "power-supply-temp"];
            uint32 power_supply_limit = 6 [json_name = "power-supply-limit"];
            uint32 power_supply_alarm_limit = 7 [json_name = "power-supply-alarm-limit"];
            uint32 power_supply_assigned = 8 [json_name = "power-supply-assigned"];
            string power_supply_assigned_utility = 9 [json_name = "power-supply-assigned-utility"];
            int32 power_supply_left = 10 [json_name = "power-supply-left"];
            uint32 power_supply_real = 11 [json_name = "power-supply-real"];
            string power_supply_real_utility = 12 [json_name = "power-supply-real-utility"];
            string current_power_consumption = 13 [json_name = "current-power-consumption"];
            string average_power_consumption = 14 [json_name = "average-power-consumption"];
         }
         PowerSupplyAttribute power_supply_attribute = 22 [json_name = "power-supply-attribute"];
         message DustproofAttribute {
            enum Dustproofcheck {
               Dustproofcheck_ENABLE = 0;
               Dustproofcheck_DISABLE = 1;
            };
            Dustproofcheck dustproofcheck = 1 [json_name = "dustproofcheck"];
            uint32 dustproof_delay_time = 2 [json_name = "dustproof-delay-time"];
         }
         DustproofAttribute dustproof_attribute = 23 [json_name = "dustproof-attribute"];
         message ChassisId {
            uint32 current_id = 1 [json_name = "current-id"];
            uint32 next_id = 2 [json_name = "next-id"];
         }
         ChassisId chassis_id = 24 [json_name = "chassis-id"];
         message ChassisRunMode {
            enum CurrentRunMode {
               INVALID_ENUM_VALUE_CurrentRunMode = 0;
               CurrentRunMode_SINGLE = 1;
               CurrentRunMode_CCCX_0 = 2;
               CurrentRunMode_CCCX_1 = 3;
               CurrentRunMode_CCCX_2 = 4;
               CurrentRunMode_VIRTUALX_CLUSTERX_CHASSIS = 6;
            };
            CurrentRunMode current_run_mode = 1 [json_name = "current-run-mode"];
            enum NextRunMode {
               INVALID_ENUM_VALUE_NextRunMode = 0;
               NextRunMode_SINGLE = 1;
               NextRunMode_CCCX_0 = 2;
               NextRunMode_CCCX_1 = 3;
               NextRunMode_CCCX_2 = 4;
               NextRunMode_VIRTUALX_CLUSTERX_CHASSIS = 6;
            };
            NextRunMode next_run_mode = 2 [json_name = "next-run-mode"];
         }
         ChassisRunMode chassis_run_mode = 25 [json_name = "chassis-run-mode"];
         message PmInputAttribute {
            enum PmInputMode {
               PmInputMode_DEFAULT = 0;
               PmInputMode_UNKNOWN = 1;
               PmInputMode_STANDARD = 85;
               PmInputMode_LOWX_RELIABILITY = 170;
            };
            PmInputMode pm_input_mode = 1 [json_name = "pm-input-mode"];
         }
         PmInputAttribute pm_input_attribute = 26 [json_name = "pm-input-attribute"];
         message ChassisSfuMode {
            enum CurrentSfuMode {
               INVALID_ENUM_VALUE_CurrentSfuMode = 0;
               CurrentSfuMode_FOURX_SFU = 1;
               CurrentSfuMode_SIXX_SFU = 2;
            };
            CurrentSfuMode current_sfu_mode = 1 [json_name = "current-sfu-mode"];
            enum NextSfuMode {
               INVALID_ENUM_VALUE_NextSfuMode = 0;
               NextSfuMode_FOURX_SFU = 1;
               NextSfuMode_SIXX_SFU = 2;
            };
            NextSfuMode next_sfu_mode = 2 [json_name = "next-sfu-mode"];
         }
         ChassisSfuMode chassis_sfu_mode = 27 [json_name = "chassis-sfu-mode"];
      }
      repeated Chassis chassis = 1 [json_name = "chassis"];
   }
   Chassiss chassiss = 3 [json_name = "chassiss"];
   message LogicContainers {
      message LogicContainer {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         enum ContainerType {
            ContainerType_UNKNOWN = 0;
            ContainerType_BOARDSLOT = 1;
            ContainerType_MPUSLOT = 2;
            ContainerType_LPUSLOT = 3;
            ContainerType_SFUSLOT = 4;
            ContainerType_ICUSLOT = 5;
            ContainerType_ECUSLOT = 6;
            ContainerType_CLKSLOT = 7;
            ContainerType_CMUSLOT = 8;
            ContainerType_FANSLOT = 9;
            ContainerType_POWERSLOT = 10;
            ContainerType_LCDSLOT = 11;
            ContainerType_PICSLOT = 12;
            ContainerType_OFCSLOT = 13;
            ContainerType_CFCARDSLOT = 14;
            ContainerType_VIRTUALSLOT = 15;
            ContainerType_VIRTUALSUBSLOT = 16;
         };
         ContainerType container_type = 3 [json_name = "container-type"];
         enum EquipedEntityType {
            EquipedEntityType_UNKNOWN = 0;
         };
         EquipedEntityType equiped_entity_type = 4 [json_name = "equiped-entity-type"];
         message SupportedEntityTypes {
            message SupportedEntityType {
               enum EntityType {
                  EntityType_UNKNOWN = 0;
               };
               EntityType entity_type = 1 [json_name = "entity-type"];
            }
            repeated SupportedEntityType supported_entity_type = 1 [json_name = "supported-entity-type"];
         }
         SupportedEntityTypes supported_entity_types = 5 [json_name = "supported-entity-types"];
      }
      repeated LogicContainer logic_container = 1 [json_name = "logic-container"];
   }
   LogicContainers logic_containers = 4 [json_name = "logic-containers"];
   message Containers {
      message Container {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string type = 3 [json_name = "type"];
         string equiped_entity_type = 4 [json_name = "equiped-entity-type"];
         message SupportedEntityTypes {
            message SupportedEntityType {
               string entity_type = 1 [json_name = "entity-type"];
            }
            repeated SupportedEntityType supported_entity_type = 1 [json_name = "supported-entity-type"];
         }
         SupportedEntityTypes supported_entity_types = 5 [json_name = "supported-entity-types"];
         enum Present {
            Present_ABSENT = 0;
            Present_PRESENT = 1;
         };
         Present present = 6 [json_name = "present"];
      }
      repeated Container container = 1 [json_name = "container"];
   }
   Containers containers = 5 [json_name = "containers"];
   message MpuBoards {
      message MpuBoard {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string board_type = 3 [json_name = "board-type"];
         uint32 up_time = 4 [json_name = "up-time"];
         uint32 sdram_size = 5 [json_name = "sdram-size"];
         uint32 nvram_size = 6 [json_name = "nvram-size"];
         uint32 flash_size = 7 [json_name = "flash-size"];
         enum LsRole {
            LsRole_UNKNOWN = 0;
            LsRole_MMB = 1;
            LsRole_PLMB = 2;
            LsRole_ACMB = 3;
            LsRole_MB = 4;
            LsRole_LC = 5;
            LsRole_SYSMMB = 6;
            LsRole_SYSMB = 7;
         };
         LsRole ls_role = 8 [json_name = "ls-role"];
         string last_reset_time = 9 [json_name = "last-reset-time"];
         string last_reset_reason = 10 [json_name = "last-reset-reason"];
         string register_time = 11 [json_name = "register-time"];
         bool is_register = 12 [json_name = "is-register"];
         uint32 cfcard_size = 13 [json_name = "cfcard-size"];
         uint32 cfcard2_size = 14 [json_name = "cfcard2-size"];
         message Bras {
            message FlowStatisticFrequency {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_FAST = 1;
                  Type_NORMAL = 2;
                  Type_SLOW = 3;
                  Type_DEFAULT = 4;
               };
               Type type = 1 [json_name = "type"];
            }
            FlowStatisticFrequency flow_statistic_frequency = 1 [json_name = "flow-statistic-frequency"];
            message Vas {
               message StatisticFrequency {
                  uint32 flow_read_speed = 1 [json_name = "flow-read-speed"];
               }
               StatisticFrequency statistic_frequency = 1 [json_name = "statistic-frequency"];
            }
            Vas vas = 2 [json_name = "vas"];
            message Multicast {
               message BasPolicyCac {
                  bool enable = 1 [json_name = "enable"];
               }
               BasPolicyCac bas_policy_cac = 1 [json_name = "bas-policy-cac"];
            }
            Multicast multicast = 3 [json_name = "multicast"];
         }
         Bras bras = 15 [json_name = "bras"];
         message L2Tp {
            message IcrqLimit {
               uint32 set_value = 1 [json_name = "set-value"];
            }
            IcrqLimit icrq_limit = 1 [json_name = "icrq-limit"];
            message ForwardMode {
               enum ModeValue {
                  ModeValue_LOOPBACK = 0;
                  ModeValue_THROUGH = 1;
               };
               ModeValue mode_value = 1 [json_name = "mode-value"];
            }
            ForwardMode forward_mode = 2 [json_name = "forward-mode"];
         }
         L2Tp l2tp = 16 [json_name = "l2tp"];
         message BrasPppox {
            message SlotAccessLimit {
               uint32 access_user_limit = 1 [json_name = "access-user-limit"];
            }
            SlotAccessLimit slot_access_limit = 1 [json_name = "slot-access-limit"];
            message AccessIp {
               uint32 access_ip_number = 1 [json_name = "access-ip-number"];
            }
            AccessIp access_ip = 2 [json_name = "access-ip"];
            message AccessIpLimit {
               uint32 fail_number = 1 [json_name = "fail-number"];
            }
            AccessIpLimit access_ip_limit = 3 [json_name = "access-ip-limit"];
            message LoadBalanceIdentifyPppoe {
               bool load_balance_enable = 1 [json_name = "load-balance-enable"];
            }
            LoadBalanceIdentifyPppoe load_balance_identify_pppoe = 4 [json_name = "load-balance-identify-pppoe"];
            message MaxSessions {
               uint32 max_session_number = 1 [json_name = "max-session-number"];
            }
            MaxSessions max_sessions = 5 [json_name = "max-sessions"];
            message PppoeSlotStatistic {
               uint32 active_sessions = 1 [json_name = "active-sessions"];
               uint32 total_sessions = 2 [json_name = "total-sessions"];
               uint32 receive_padi_packets = 3 [json_name = "receive-padi-packets"];
               uint32 discard_padi_packets = 4 [json_name = "discard-padi-packets"];
               uint32 send_pado_packets = 5 [json_name = "send-pado-packets"];
               uint32 receive_padr_packets = 6 [json_name = "receive-padr-packets"];
               uint32 discard_padr_packets = 7 [json_name = "discard-padr-packets"];
               uint32 send_pads_packets = 8 [json_name = "send-pads-packets"];
               uint32 discard_padr_same_mac = 9 [json_name = "discard-padr-same-mac"];
               uint32 receive_padt_packets = 10 [json_name = "receive-padt-packets"];
               uint32 discard_padt_packets = 11 [json_name = "discard-padt-packets"];
               uint32 send_padt_packets = 12 [json_name = "send-padt-packets"];
               uint32 send_padm_packets = 13 [json_name = "send-padm-packets"];
               uint32 send_padm_url_packets = 14 [json_name = "send-padm-url-packets"];
               uint32 send_padm_motm_packets = 15 [json_name = "send-padm-motm-packets"];
               uint32 send_padn_packets = 16 [json_name = "send-padn-packets"];
               uint32 receive_session_packets = 17 [json_name = "receive-session-packets"];
               uint32 discard_session_packets = 18 [json_name = "discard-session-packets"];
               uint32 send_session_packets = 19 [json_name = "send-session-packets"];
               uint32 receive_packets = 20 [json_name = "receive-packets"];
               uint32 discard_packets = 21 [json_name = "discard-packets"];
               uint32 invalid_version = 22 [json_name = "invalid-version"];
               uint32 invalid_pad_code = 23 [json_name = "invalid-pad-code"];
               uint32 invalid_pad_tags = 24 [json_name = "invalid-pad-tags"];
               uint32 invalid_pad_tag_length = 25 [json_name = "invalid-pad-tag-length"];
               uint32 invalid_pad_type = 26 [json_name = "invalid-pad-type"];
               uint32 invalid_padi_sessions = 27 [json_name = "invalid-padi-sessions"];
               uint32 invalid_padr_sessions = 28 [json_name = "invalid-padr-sessions"];
               uint32 invalid_pad_packet_length = 29 [json_name = "invalid-pad-packet-length"];
               uint32 other_invalid_pad_packets = 30 [json_name = "other-invalid-pad-packets"];
               uint32 total_invalid_pad_packets = 31 [json_name = "total-invalid-pad-packets"];
               uint32 send_null_pads_packets = 32 [json_name = "send-null-pads-packets"];
            }
            PppoeSlotStatistic pppoe_slot_statistic = 6 [json_name = "pppoe-slot-statistic"];
            message PppSlotStatistic {
               uint32 send_echo_request = 1 [json_name = "send-echo-request"];
               uint32 send_echo_reply = 2 [json_name = "send-echo-reply"];
               uint32 send_echo_failed = 3 [json_name = "send-echo-failed"];
               uint32 receive_echo_reply = 4 [json_name = "receive-echo-reply"];
               uint32 receive_echo_request = 5 [json_name = "receive-echo-request"];
               uint32 send_lcp_connection_request = 6 [json_name = "send-lcp-connection-request"];
               uint32 send_lcp_connection_nak = 7 [json_name = "send-lcp-connection-nak"];
               uint32 send_lcp_connection_rejection = 8 [json_name = "send-lcp-connection-rejection"];
               uint32 send_lcp_connection_ack = 9 [json_name = "send-lcp-connection-ack"];
               uint32 send_lcp_code_rejection = 10 [json_name = "send-lcp-code-rejection"];
               uint32 send_lcp_protocol_rejection = 11 [json_name = "send-lcp-protocol-rejection"];
               uint32 send_lcp_termination_request = 12 [json_name = "send-lcp-termination-request"];
               uint32 send_lcp_termination_ack = 13 [json_name = "send-lcp-termination-ack"];
               uint32 receive_lcp_connection_request = 14 [json_name = "receive-lcp-connection-request"];
               uint32 receive_lcp_connection_nak = 15 [json_name = "receive-lcp-connection-nak"];
               uint32 receive_lcp_connection_rejection = 16 [json_name = "receive-lcp-connection-rejection"];
               uint32 receive_lcp_connection_ack = 17 [json_name = "receive-lcp-connection-ack"];
               uint32 receive_lcp_code_rejection = 18 [json_name = "receive-lcp-code-rejection"];
               uint32 receive_lcp_protocol_rejection = 19 [json_name = "receive-lcp-protocol-rejection"];
               uint32 receive_lcp_termination_request = 20 [json_name = "receive-lcp-termination-request"];
               uint32 receive_lcp_termination_ack = 21 [json_name = "receive-lcp-termination-ack"];
               uint32 send_ipcp_connection_request = 22 [json_name = "send-ipcp-connection-request"];
               uint32 send_ipcp_connection_nak = 23 [json_name = "send-ipcp-connection-nak"];
               uint32 send_ipcp_connection_rejection = 24 [json_name = "send-ipcp-connection-rejection"];
               uint32 send_ipcp_connection_ack = 25 [json_name = "send-ipcp-connection-ack"];
               uint32 send_ipcp_code_rejection = 26 [json_name = "send-ipcp-code-rejection"];
               uint32 send_ipcp_protocol_rejection = 27 [json_name = "send-ipcp-protocol-rejection"];
               uint32 send_ipcp_termination_request = 28 [json_name = "send-ipcp-termination-request"];
               uint32 send_ipccp_termination_ack = 29 [json_name = "send-ipccp-termination-ack"];
               uint32 receive_ipcp_connection_request = 30 [json_name = "receive-ipcp-connection-request"];
               uint32 receive_ipcp_connection_nak = 31 [json_name = "receive-ipcp-connection-nak"];
               uint32 receive_ipcp_connection_rejection = 32 [json_name = "receive-ipcp-connection-rejection"];
               uint32 receive_ipcp_connection_ack = 33 [json_name = "receive-ipcp-connection-ack"];
               uint32 receive_ipcp_code_rejection = 34 [json_name = "receive-ipcp-code-rejection"];
               uint32 receive_ipcp_protocol_rejection = 35 [json_name = "receive-ipcp-protocol-rejection"];
               uint32 receive_ipcp_termination_request = 36 [json_name = "receive-ipcp-termination-request"];
               uint32 receive_ipcp_termination_ack = 37 [json_name = "receive-ipcp-termination-ack"];
               uint32 send_ip6cp_connection_request = 38 [json_name = "send-ip6cp-connection-request"];
               uint32 send_ip6cp_connection_nak = 39 [json_name = "send-ip6cp-connection-nak"];
               uint32 send_ip6cp_connection_rejection = 40 [json_name = "send-ip6cp-connection-rejection"];
               uint32 send_ip6cp_connection_ack = 41 [json_name = "send-ip6cp-connection-ack"];
               uint32 send_ip6cp_code_rejection = 42 [json_name = "send-ip6cp-code-rejection"];
               uint32 send_ip6cp_protocol_rejection = 43 [json_name = "send-ip6cp-protocol-rejection"];
               uint32 send_ip6cp_termination_request = 44 [json_name = "send-ip6cp-termination-request"];
               uint32 send_ip6cp_termination_ack = 45 [json_name = "send-ip6cp-termination-ack"];
               uint32 receive_ip6cp_connection_request = 46 [json_name = "receive-ip6cp-connection-request"];
               uint32 receive_ip6cp_connection_nak = 47 [json_name = "receive-ip6cp-connection-nak"];
               uint32 receive_ip6cp_connection_reject = 48 [json_name = "receive-ip6cp-connection-reject"];
               uint32 receive_ip6cp_connection_ack = 49 [json_name = "receive-ip6cp-connection-ack"];
               uint32 receive_ip6cp_code_rejection = 50 [json_name = "receive-ip6cp-code-rejection"];
               uint32 receive_ip6cp_protocol_rejection = 51 [json_name = "receive-ip6cp-protocol-rejection"];
               uint32 receive_ip6cp_termination_request = 52 [json_name = "receive-ip6cp-termination-request"];
               uint32 receive_ip6cp_termination_ack = 53 [json_name = "receive-ip6cp-termination-ack"];
               uint32 send_pap_authentication_ack = 54 [json_name = "send-pap-authentication-ack"];
               uint32 send_pap_authentication_nak = 55 [json_name = "send-pap-authentication-nak"];
               uint32 send_chap_challenge = 56 [json_name = "send-chap-challenge"];
               uint32 send_chap_authentication_ack = 57 [json_name = "send-chap-authentication-ack"];
               uint32 send_chap_authentication_fail = 58 [json_name = "send-chap-authentication-fail"];
               uint32 discard_dail_fast = 59 [json_name = "discard-dail-fast"];
               uint32 discard_chasten = 60 [json_name = "discard-chasten"];
               uint32 receive_pap_authentication_request = 61 [json_name = "receive-pap-authentication-request"];
               uint32 receive_chap_response = 62 [json_name = "receive-chap-response"];
            }
            PppSlotStatistic ppp_slot_statistic = 7 [json_name = "ppp-slot-statistic"];
            message UrpfDiscardStatistics {
               message UrpfIpv4DiscardStatistic {
                  uint32 ppp_ipv4_packet_high_bits = 1 [json_name = "ppp-ipv4-packet-high-bits"];
                  uint32 ppp_ipv4_packet_low_bits = 2 [json_name = "ppp-ipv4-packet-low-bits"];
               }
               UrpfIpv4DiscardStatistic urpf_ipv4_discard_statistic = 1 [json_name = "urpf-ipv4-discard-statistic"];
               message UrpfIpv6DiscardStatistic {
                  uint32 ppp_ipv6_packet_high_bits = 1 [json_name = "ppp-ipv6-packet-high-bits"];
                  uint32 ppp_ipv6_packet_low_bits = 2 [json_name = "ppp-ipv6-packet-low-bits"];
               }
               UrpfIpv6DiscardStatistic urpf_ipv6_discard_statistic = 2 [json_name = "urpf-ipv6-discard-statistic"];
            }
            UrpfDiscardStatistics urpf_discard_statistics = 8 [json_name = "urpf-discard-statistics"];
            message PppEchoDeployMode {
               bool separate_mode = 1 [json_name = "separate-mode"];
            }
            PppEchoDeployMode ppp_echo_deploy_mode = 9 [json_name = "ppp-echo-deploy-mode"];
         }
         BrasPppox bras_pppox = 17 [json_name = "bras-pppox"];
         message Cpudefend {
            uint32 policy_id = 1 [json_name = "policy-id"];
         }
         Cpudefend cpudefend = 18 [json_name = "cpudefend"];
         message CpudefendDevm {
            message IgnoreHostcarAcl {
               string ipv4_acl = 1 [json_name = "ipv4-acl"];
               string ipv6_acl = 2 [json_name = "ipv6-acl"];
               message Ipv4AclType_ByIdentity {
                  string ipv4_acl = 1 [json_name = "ipv4-acl"];
               }
               message Ipv4AclType_ByNumber {
                  uint32 ipv4_acl_number = 1 [json_name = "ipv4-acl-number"];
               }
               oneof Ipv4AclType {
                  Ipv4AclType_ByIdentity ipv4_acl_type_by_identity = 3 [json_name = "by-identity"];
                  Ipv4AclType_ByNumber ipv4_acl_type_by_number = 4 [json_name = "by-number"];
               }
            }
            IgnoreHostcarAcl ignore_hostcar_acl = 1 [json_name = "ignore-hostcar-acl"];
            message BrasHostCars {
               message BrasHostCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_HOSTX_CAR = 1;
                     Type_HTTPX_HOSTX_CAR = 2;
                     Type_VLANX_HOSTX_CAR = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  message RateLimit {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                     uint32 pir = 3 [json_name = "pir"];
                     uint32 pbs = 4 [json_name = "pbs"];
                     bool auto_adjust_enable = 5 [json_name = "auto-adjust-enable"];
                  }
                  RateLimit rate_limit = 2 [json_name = "rate-limit"];
                  message Logging {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 discard_threshold = 2 [json_name = "discard-threshold"];
                  }
                  Logging logging = 3 [json_name = "logging"];
                  message AttackDetect {
                     uint32 drop_rate_threshold = 1 [json_name = "drop-rate-threshold"];
                  }
                  AttackDetect attack_detect = 4 [json_name = "attack-detect"];
               }
               repeated BrasHostCar bras_host_car = 1 [json_name = "bras-host-car"];
            }
            BrasHostCars bras_host_cars = 2 [json_name = "bras-host-cars"];
            message SpuCars {
               message SpuCar {
                  enum CarType {
                     INVALID_ENUM_VALUE_CarType = 0;
                     CarType_ICMP = 1;
                     CarType_TCP = 2;
                     CarType_UDP = 3;
                     CarType_GRE = 4;
                     CarType_BGP = 5;
                     CarType_DEFAULT = 6;
                     CarType_TOTAL = 7;
                     CarType_IKEX_TOTALX_CAR = 8;
                     CarType_IKEX_TUNNELX_CAR = 9;
                     CarType_PLAINX_SAX_MISS = 10;
                     CarType_CIPHERX_SAX_MISS = 11;
                     CarType_IPSECX_REKEY = 12;
                     CarType_IKEX_DPD = 13;
                     CarType_FASTX_CHANNEL = 14;
                     CarType_BFDX_DOWN = 15;
                     CarType_PST = 16;
                     CarType_DSLITEX_PRIVATEX_IPV4 = 17;
                     CarType_IPX_OPTION = 18;
                     CarType_MTUX_EXCEED = 19;
                     CarType_CGNX_ICMP = 20;
                     CarType_CGNX_ICMPV6 = 21;
                     CarType_CGNX_IPV4X_OTHER = 22;
                     CarType_CGNX_IPV6X_OTHER = 23;
                     CarType_CGNX_IPV6X_RAW = 24;
                     CarType_CGNX_TOTAL = 25;
                  };
                  CarType car_type = 1 [json_name = "car-type"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
               }
               repeated SpuCar spu_car = 1 [json_name = "spu-car"];
            }
            SpuCars spu_cars = 3 [json_name = "spu-cars"];
            message ArpVlanCar {
               bool alarm_drop_rate = 1 [json_name = "alarm-drop-rate"];
               message Level2Car {
                  uint32 rate_limit_percent = 1 [json_name = "rate-limit-percent"];
               }
               Level2Car level_2_car = 2 [json_name = "level-2-car"];
            }
            ArpVlanCar arp_vlan_car = 4 [json_name = "arp-vlan-car"];
            message NdVlanCar {
               message NdAttackAlarms {
                  message NdAttackAlarm {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     bool alarm_enable = 2 [json_name = "alarm-enable"];
                  }
                  repeated NdAttackAlarm nd_attack_alarm = 1 [json_name = "nd-attack-alarm"];
               }
               NdAttackAlarms nd_attack_alarms = 1 [json_name = "nd-attack-alarms"];
               message Level2Cars {
                  message Level2Car {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 rate_limit_percent = 2 [json_name = "rate-limit-percent"];
                  }
                  repeated Level2Car level_2_car = 1 [json_name = "level-2-car"];
               }
               Level2Cars level_2_cars = 2 [json_name = "level-2-cars"];
            }
            NdVlanCar nd_vlan_car = 5 [json_name = "nd-vlan-car"];
         }
         CpudefendDevm cpudefend_devm = 19 [json_name = "cpudefend-devm"];
         message CmacPadding {
            enum Padding {
               Padding_DISABLE = 0;
               Padding_ENABLE = 1;
            };
            Padding padding = 1 [json_name = "padding"];
         }
         CmacPadding cmac_padding = 20 [json_name = "cmac-padding"];
         message Fim {
            enum ForwardMode {
               ForwardMode_LOOPBACK = 0;
               ForwardMode_THROUGH = 1;
            };
            ForwardMode forward_mode = 1 [json_name = "forward-mode"];
            enum VlanMissEnable {
               VlanMissEnable_DISABLE = 0;
               VlanMissEnable_ENABLE = 1;
            };
            VlanMissEnable vlan_miss_enable = 2 [json_name = "vlan-miss-enable"];
            uint32 scan_period = 3 [json_name = "scan-period"];
            uint32 cpu_threshold = 4 [json_name = "cpu-threshold"];
            uint32 cpu_detect = 5 [json_name = "cpu-detect"];
            uint32 cpu_restore = 6 [json_name = "cpu-restore"];
            uint32 statistics = 7 [json_name = "statistics"];
            uint32 precision = 8 [json_name = "precision"];
         }
         Fim fim = 21 [json_name = "fim"];
         message MacmtuDiscardStatistics {
            uint64 mtu_ipv4 = 1 [json_name = "mtu-ipv4"];
            uint64 mtu_ipv6 = 2 [json_name = "mtu-ipv6"];
            uint64 mac_ipv4 = 3 [json_name = "mac-ipv4"];
            uint64 mac_ipv6 = 4 [json_name = "mac-ipv6"];
         }
         MacmtuDiscardStatistics macmtu_discard_statistics = 22 [json_name = "macmtu-discard-statistics"];
         message VeMacAddress {
            string l2_ve_mac = 1 [json_name = "l2-ve-mac"];
            string access_ve_mac = 2 [json_name = "access-ve-mac"];
         }
         VeMacAddress ve_mac_address = 23 [json_name = "ve-mac-address"];
         message ManagementPlaneDefendSlot {
            uint32 slot_policy_id = 1 [json_name = "slot-policy-id"];
         }
         ManagementPlaneDefendSlot management_plane_defend_slot = 24 [json_name = "management-plane-defend-slot"];
         message LinkProtocolTransport {
            enum Lldp {
               Lldp_DISABLE = 0;
               Lldp_ENABLE = 1;
            };
            Lldp lldp = 1 [json_name = "lldp"];
            enum Lacp {
               Lacp_DISABLE = 0;
               Lacp_ENABLE = 1;
            };
            Lacp lacp = 2 [json_name = "lacp"];
            enum Oam {
               Oam_DISABLE = 0;
               Oam_ENABLE = 1;
            };
            Oam oam = 3 [json_name = "oam"];
            enum Esmc {
               Esmc_DISABLE = 0;
               Esmc_ENABLE = 1;
            };
            Esmc esmc = 4 [json_name = "esmc"];
         }
         LinkProtocolTransport link_protocol_transport = 25 [json_name = "link-protocol-transport"];
         message Loadbalance {
            message DynamicAdjust {
               bool enable = 1 [json_name = "enable"];
            }
            DynamicAdjust dynamic_adjust = 1 [json_name = "dynamic-adjust"];
            message HashArithmetic {
               enum Arithmetic {
                  INVALID_ENUM_VALUE_Arithmetic = 0;
                  Arithmetic_ARITHMETIC1 = 1;
                  Arithmetic_ARITHMETIC2 = 2;
                  Arithmetic_ARITHMETIC3 = 3;
                  Arithmetic_ARITHMETIC4 = 4;
                  Arithmetic_ARITHMETIC5 = 5;
                  Arithmetic_RANDOM = 6;
               };
               Arithmetic arithmetic = 1 [json_name = "arithmetic"];
               bool second_hash_flag = 2 [json_name = "second-hash-flag"];
            }
            HashArithmetic hash_arithmetic = 2 [json_name = "hash-arithmetic"];
            message HashFields {
               message HashField {
                  enum TrunkEcmp {
                     INVALID_ENUM_VALUE_TrunkEcmp = 0;
                     TrunkEcmp_IP = 5;
                     TrunkEcmp_MAC = 6;
                     TrunkEcmp_VLL = 7;
                     TrunkEcmp_TUNNELX_INFO = 8;
                     TrunkEcmp_TUNNELX_INNERX_IP = 9;
                     TrunkEcmp_GTP = 10;
                     TrunkEcmp_FEC = 11;
                     TrunkEcmp_GTPX_INNERX_IP = 12;
                  };
                  TrunkEcmp trunk_ecmp = 1 [json_name = "trunk-ecmp"];
                  enum Material {
                     INVALID_ENUM_VALUE_Material = 0;
                     Material_L2 = 1;
                     Material_L3 = 2;
                     Material_L4 = 3;
                     Material_UNDOX_DISABLE = 4;
                     Material_DISABLE = 5;
                     Material_LABELX_IP = 6;
                     Material_LABEL = 7;
                  };
                  Material material = 2 [json_name = "material"];
               }
               repeated HashField hash_field = 1 [json_name = "hash-field"];
            }
            HashFields hash_fields = 3 [json_name = "hash-fields"];
            message HashSeed {
               bool random_flag = 1 [json_name = "random-flag"];
               string custom_seed = 2 [json_name = "custom-seed"];
            }
            HashSeed hash_seed = 4 [json_name = "hash-seed"];
            message HashMultipe {
               enum MultipeFlag {
                  MultipeFlag_ENABLE = 0;
                  MultipeFlag_DISABLE = 255;
               };
               MultipeFlag multipe_flag = 1 [json_name = "multipe-flag"];
            }
            HashMultipe hash_multipe = 5 [json_name = "hash-multipe"];
         }
         Loadbalance loadbalance = 26 [json_name = "loadbalance"];
         message Mirror {
            message SlotObserve {
               uint32 observe_index = 1 [json_name = "observe-index"];
            }
            SlotObserve slot_observe = 1 [json_name = "slot-observe"];
            message ObserveFilters {
               message ObserveFilter {
                  uint32 filter_id = 1 [json_name = "filter-id"];
                  string src_ipaddr = 2 [json_name = "src-ipaddr"];
                  string src_ipaddr_mask = 3 [json_name = "src-ipaddr-mask"];
                  string dst_ipaddr = 4 [json_name = "dst-ipaddr"];
                  string dst_ipaddr_mask = 5 [json_name = "dst-ipaddr-mask"];
                  uint32 src_port = 6 [json_name = "src-port"];
                  uint32 dst_port = 7 [json_name = "dst-port"];
                  string src_macaddr = 8 [json_name = "src-macaddr"];
                  uint32 pppoe_session_id = 9 [json_name = "pppoe-session-id"];
                  string dst_macaddr = 10 [json_name = "dst-macaddr"];
                  uint32 vlan = 11 [json_name = "vlan"];
                  string eth_type = 12 [json_name = "eth-type"];
                  message ProtocolType_Ppp {
                     string ppp_protocol = 1 [json_name = "ppp-protocol"];
                  }
                  message ProtocolType_Ip {
                     uint32 ip_protocol = 1 [json_name = "ip-protocol"];
                  }
                  oneof ProtocolType {
                     ProtocolType_Ppp protocol_type_ppp = 13 [json_name = "ppp"];
                     ProtocolType_Ip protocol_type_ip = 14 [json_name = "ip"];
                  }
               }
               repeated ObserveFilter observe_filter = 1 [json_name = "observe-filter"];
            }
            ObserveFilters observe_filters = 2 [json_name = "observe-filters"];
         }
         Mirror mirror = 27 [json_name = "mirror"];
         message MplsForward {
            message MplsHashMode {
               enum Hashcfg {
                  INVALID_ENUM_VALUE_Hashcfg = 0;
                  Hashcfg_PAYLOADX_HEADER = 64;
                  Hashcfg_IP = 160;
                  Hashcfg_LABEL = 192;
                  Hashcfg_IPX_TOS = 193;
                  Hashcfg_MAC = 196;
               };
               Hashcfg hashcfg = 1 [json_name = "hashcfg"];
            }
            MplsHashMode mpls_hash_mode = 1 [json_name = "mpls-hash-mode"];
            message Mplsfrags {
               enum MplsfragEnable {
                  MplsfragEnable_DISABLE = 0;
                  MplsfragEnable_ENABLE = 1;
               };
               MplsfragEnable mplsfrag_enable = 1 [json_name = "mplsfrag-enable"];
            }
            Mplsfrags mplsfrags = 2 [json_name = "mplsfrags"];
            message MplsLoadCtrwords {
               enum MplsloadCtrwordDisable {
                  MplsloadCtrwordDisable_DISABLE = 0;
                  MplsloadCtrwordDisable_ENABLE = 1;
               };
               MplsloadCtrwordDisable mplsload_ctrword_disable = 1 [json_name = "mplsload-ctrword-disable"];
            }
            MplsLoadCtrwords mpls_load_ctrwords = 3 [json_name = "mpls-load-ctrwords"];
         }
         MplsForward mpls_forward = 28 [json_name = "mpls-forward"];
         message Netstream {
            message SamplerModes {
               message SamplerMode {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum SamplerMode7 {
                     SamplerMode7_SELF = 0;
                     SamplerMode7_MAIN = 1;
                     SamplerMode7_BAK = 2;
                  };
                  SamplerMode7 sampler_mode = 2 [json_name = "sampler-mode"];
               }
               repeated SamplerMode sampler_mode = 1 [json_name = "sampler-mode"];
            }
            SamplerModes sampler_modes = 1 [json_name = "sampler-modes"];
            message SequenceMode {
               enum Mode {
                  INVALID_ENUM_VALUE_Mode = 0;
                  Mode_FLOW = 1;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            SequenceMode sequence_mode = 2 [json_name = "sequence-mode"];
            message ExportHosts {
               message ExportHost {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum AddressType {
                     AddressType_IPV4 = 0;
                     AddressType_IPV6 = 1;
                  };
                  AddressType address_type = 2 [json_name = "address-type"];
                  string ip_address = 3 [json_name = "ip-address"];
                  uint32 destination_port = 4 [json_name = "destination-port"];
                  string vpn_name = 5 [json_name = "vpn-name"];
                  uint32 dscp = 6 [json_name = "dscp"];
               }
               repeated ExportHost export_host = 1 [json_name = "export-host"];
            }
            ExportHosts export_hosts = 3 [json_name = "export-hosts"];
         }
         Netstream netstream = 29 [json_name = "netstream"];
         message Pbr {
            message RoutingFilters {
               message RoutingFilter {
                  enum Type {
                     Type_IPV4 = 0;
                     Type_IPV6 = 1;
                     Type_IPV4IPV6 = 2;
                  };
                  Type type = 1 [json_name = "type"];
                  enum RoutingType {
                     INVALID_ENUM_VALUE_RoutingType = 0;
                     RoutingType_DEFAULT = 1;
                     RoutingType_BLACKHOLE = 2;
                     RoutingType_DEFAULTX_BLACKHOLE = 3;
                  };
                  RoutingType routing_type = 2 [json_name = "routing-type"];
               }
               repeated RoutingFilter routing_filter = 1 [json_name = "routing-filter"];
            }
            RoutingFilters routing_filters = 1 [json_name = "routing-filters"];
         }
         Pbr pbr = 30 [json_name = "pbr"];
         message Qos {
            message TrafficPolicyMatchs {
               message TrafficPolicyMatch {
                  enum Type {
                     Type_IPX_LAYERX_PUSH = 0;
                     Type_IPV6X_ADDRESSX_RULEX_MASK = 1;
                     Type_PROTOCOLX_MCX_RESERVED = 2;
                     Type_MPLSX_LAYERX_PUSH = 3;
                     Type_MPLSX_LAYERX_L2X_INBOUND = 4;
                     Type_RULEX_PACKET = 5;
                     Type_MPLSX_LAYERX_POP = 6;
                     Type_IPX_LAYERX_POP = 7;
                  };
                  Type type = 1 [json_name = "type"];
               }
               repeated TrafficPolicyMatch traffic_policy_match = 1 [json_name = "traffic-policy-match"];
            }
            TrafficPolicyMatchs traffic_policy_matchs = 1 [json_name = "traffic-policy-matchs"];
            message PqSchedulePrioritys {
               message PqSchedulePriority {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum Mode {
                     Mode_HIGH = 0;
                     Mode_LOW = 1;
                  };
                  Mode mode = 2 [json_name = "mode"];
               }
               repeated PqSchedulePriority pq_schedule_priority = 1 [json_name = "pq-schedule-priority"];
            }
            PqSchedulePrioritys pq_schedule_prioritys = 2 [json_name = "pq-schedule-prioritys"];
            message PqSchedulePriorityOnCards {
               message PqSchedulePriorityOnCard {
                  string card_id = 1 [json_name = "card-id"];
                  enum Mode {
                     Mode_HIGH = 0;
                     Mode_LOW = 1;
                  };
                  Mode mode = 2 [json_name = "mode"];
               }
               repeated PqSchedulePriorityOnCard pq_schedule_priority_on_card = 1 [json_name = "pq-schedule-priority-on-card"];
            }
            PqSchedulePriorityOnCards pq_schedule_priority_on_cards = 3 [json_name = "pq-schedule-priority-on-cards"];
            message MulticastPortQueues {
               message MulticastPortQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                  };
                  QueueScheduleMode queue_schedule_mode = 2 [json_name = "queue-schedule-mode"];
                  uint32 weight = 3 [json_name = "weight"];
                  string port_wred_name = 4 [json_name = "port-wred-name"];
                  message ShapingParameters_Shaping {
                     uint32 shaping_value = 1 [json_name = "shaping-value"];
                  }
                  message ShapingParameters_ShapingPercent {
                     uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                  }
                  oneof ShapingParameters {
                     ShapingParameters_Shaping shaping_parameters_shaping = 5 [json_name = "shaping"];
                     ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 6 [json_name = "shaping-percent"];
                  }
               }
               repeated MulticastPortQueue multicast_port_queue = 1 [json_name = "multicast-port-queue"];
            }
            MulticastPortQueues multicast_port_queues = 4 [json_name = "multicast-port-queues"];
            message MulticastPortShaping {
               message ShapingParameters_ShapingTypeMode {
                  enum ShapingType {
                     ShapingType_X_256K = 0;
                     ShapingType_X_512K = 1;
                  };
                  ShapingType shaping_type = 1 [json_name = "shaping-type"];
               }
               message ShapingParameters_ShapingValueMode {
                  uint32 shaping_value = 1 [json_name = "shaping-value"];
               }
               oneof ShapingParameters {
                  ShapingParameters_ShapingTypeMode shaping_parameters_shaping_type_mode = 1 [json_name = "shaping-type-mode"];
                  ShapingParameters_ShapingValueMode shaping_parameters_shaping_value_mode = 2 [json_name = "shaping-value-mode"];
               }
            }
            MulticastPortShaping multicast_port_shaping = 5 [json_name = "multicast-port-shaping"];
            message UserQueuePirPrecision {
               uint32 precision = 1 [json_name = "precision"];
            }
            UserQueuePirPrecision user_queue_pir_precision = 6 [json_name = "user-queue-pir-precision"];
            message ExpPhbDisable {
               enum ForwardType {
                  INVALID_ENUM_VALUE_ForwardType = 0;
                  ForwardType_VLL = 1;
               };
               ForwardType forward_type = 1 [json_name = "forward-type"];
            }
            ExpPhbDisable exp_phb_disable = 7 [json_name = "exp-phb-disable"];
            message PacketBlockThresholds {
               message PacketBlockThreshold {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 size = 2 [json_name = "size"];
               }
               repeated PacketBlockThreshold packet_block_threshold = 1 [json_name = "packet-block-threshold"];
            }
            PacketBlockThresholds packet_block_thresholds = 8 [json_name = "packet-block-thresholds"];
            message PacketBlockThresholdAll {
               uint32 size = 1 [json_name = "size"];
            }
            PacketBlockThresholdAll packet_block_threshold_all = 9 [json_name = "packet-block-threshold-all"];
            message ChannelAlarms {
               message ChannelAlarm {
                  enum AlarmType {
                     AlarmType_QUANTITY = 0;
                     AlarmType_BANDWIDTH = 1;
                  };
                  AlarmType alarm_type = 1 [json_name = "alarm-type"];
                  enum Pool {
                     INVALID_ENUM_VALUE_Pool = 0;
                     Pool_POOLX_0 = 1;
                     Pool_POOLX_1 = 2;
                  };
                  Pool pool = 2 [json_name = "pool"];
                  uint32 threshold = 3 [json_name = "threshold"];
               }
               repeated ChannelAlarm channel_alarm = 1 [json_name = "channel-alarm"];
            }
            ChannelAlarms channel_alarms = 10 [json_name = "channel-alarms"];
            message ChannelProfilePrecision {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_UP = 1;
                  Type_DOWN = 2;
               };
               Type type = 1 [json_name = "type"];
            }
            ChannelProfilePrecision channel_profile_precision = 11 [json_name = "channel-profile-precision"];
            message ChannelProfileApply {
               string name = 1 [json_name = "name"];
            }
            ChannelProfileApply channel_profile_apply = 12 [json_name = "channel-profile-apply"];
            message MulticastShaping {
               uint32 shaping_value = 1 [json_name = "shaping-value"];
            }
            MulticastShaping multicast_shaping = 13 [json_name = "multicast-shaping"];
            message PortQueueAlarms {
               message PortQueueAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarm port_queue_alarm = 1 [json_name = "port-queue-alarm"];
            }
            PortQueueAlarms port_queue_alarms = 14 [json_name = "port-queue-alarms"];
            message UserQueueRecoveryDisable {
            }
            UserQueueRecoveryDisable user_queue_recovery_disable = 15 [json_name = "user-queue-recovery-disable"];
            message AccessUserBoardScheduleEnable {
            }
            AccessUserBoardScheduleEnable access_user_board_schedule_enable = 16 [json_name = "access-user-board-schedule-enable"];
            message ConvergentPrecedenceHighs {
               message ConvergentPrecedenceHigh {
                  uint32 service_class_value = 1 [json_name = "service-class-value"];
               }
               repeated ConvergentPrecedenceHigh convergent_precedence_high = 1 [json_name = "convergent-precedence-high"];
            }
            ConvergentPrecedenceHighs convergent_precedence_highs = 17 [json_name = "convergent-precedence-highs"];
            message QueueDiscardAlarms {
               message QueueDiscardAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 interval_time = 2 [json_name = "interval-time"];
                  message DiscardType_Bytes {
                     uint32 bytes8 = 1 [json_name = "bytes"];
                  }
                  message DiscardType_Packets {
                     uint32 packets8 = 1 [json_name = "packets"];
                  }
                  message DiscardType_PacketRatio {
                     uint32 packet_coefficient = 1 [json_name = "packet-coefficient"];
                     uint32 packet_exponent = 2 [json_name = "packet-exponent"];
                  }
                  oneof DiscardType {
                     DiscardType_Bytes discard_type_bytes = 3 [json_name = "bytes"];
                     DiscardType_Packets discard_type_packets = 4 [json_name = "packets"];
                     DiscardType_PacketRatio discard_type_packet_ratio = 5 [json_name = "packet-ratio"];
                  }
               }
               repeated QueueDiscardAlarm queue_discard_alarm = 1 [json_name = "queue-discard-alarm"];
            }
            QueueDiscardAlarms queue_discard_alarms = 18 [json_name = "queue-discard-alarms"];
            message UserQueueBurst {
               uint32 minimum_burst_size = 1 [json_name = "minimum-burst-size"];
               uint32 time = 2 [json_name = "time"];
            }
            UserQueueBurst user_queue_burst = 19 [json_name = "user-queue-burst"];
            message BurstSizes {
               message BurstSize {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 value = 2 [json_name = "value"];
               }
               repeated BurstSize burst_size = 1 [json_name = "burst-size"];
            }
            BurstSizes burst_sizes = 20 [json_name = "burst-sizes"];
            message GlobalBufferShareThresholds {
               message GlobalBufferShareThreshold {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 threshold = 2 [json_name = "threshold"];
               }
               repeated GlobalBufferShareThreshold global_buffer_share_threshold = 1 [json_name = "global-buffer-share-threshold"];
            }
            GlobalBufferShareThresholds global_buffer_share_thresholds = 21 [json_name = "global-buffer-share-thresholds"];
            message GlobalBufferShareQueues {
               message GlobalBufferShareQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated GlobalBufferShareQueue global_buffer_share_queue = 1 [json_name = "global-buffer-share-queue"];
            }
            GlobalBufferShareQueues global_buffer_share_queues = 22 [json_name = "global-buffer-share-queues"];
            message FlowQueueBackpressureOff {
            }
            FlowQueueBackpressureOff flow_queue_backpressure_off = 23 [json_name = "flow-queue-backpressure-off"];
            message TrafficPolicyMatchType {
               message DestinationUser {
               }
               DestinationUser destination_user = 1 [json_name = "destination-user"];
               message InterfaceAcl {
               }
               InterfaceAcl interface_acl = 2 [json_name = "interface-acl"];
            }
            TrafficPolicyMatchType traffic_policy_match_type = 24 [json_name = "traffic-policy-match-type"];
            message UserQueueResource4Cos {
               uint32 cos_value = 1 [json_name = "cos-value"];
            }
            UserQueueResource4Cos user_queue_resource_4cos = 25 [json_name = "user-queue-resource-4cos"];
            message UserQueueResource8CosEnhances {
               message UserQueueResource8CosEnhance {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cos_value = 2 [json_name = "cos-value"];
               }
               repeated UserQueueResource8CosEnhance user_queue_resource_8cos_enhance = 1 [json_name = "user-queue-resource-8cos-enhance"];
            }
            UserQueueResource8CosEnhances user_queue_resource_8cos_enhances = 26 [json_name = "user-queue-resource-8cos-enhances"];
         }
         Qos qos = 31 [json_name = "qos"];
         message Soc {
            message L2LoopDetect {
               message SlotL2Loopdet {
                  bool enable = 1 [json_name = "enable"];
                  uint32 packets_drop_threshold = 2 [json_name = "packets-drop-threshold"];
               }
               SlotL2Loopdet slot_l2loopdet = 1 [json_name = "slot-l2loopdet"];
               message Action {
                  message Shutdown {
                     uint32 up_times = 1 [json_name = "up-times"];
                     uint32 up_interval = 2 [json_name = "up-interval"];
                  }
                  Shutdown shutdown = 1 [json_name = "shutdown"];
                  message Trap {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Trap trap = 2 [json_name = "trap"];
               }
               Action action = 2 [json_name = "action"];
               message LoopLevelThresholds {
                  message LoopLevelThreshold {
                     enum InterfaceType {
                        InterfaceType_MAINX_INTERFACE = 0;
                        InterfaceType_SUBX_INTERFACE = 1;
                     };
                     InterfaceType interface_type = 1 [json_name = "interface-type"];
                     uint32 determined = 2 [json_name = "determined"];
                     uint32 suspect = 3 [json_name = "suspect"];
                     uint32 notification = 4 [json_name = "notification"];
                  }
                  repeated LoopLevelThreshold loop_level_threshold = 1 [json_name = "loop-level-threshold"];
               }
               LoopLevelThresholds loop_level_thresholds = 3 [json_name = "loop-level-thresholds"];
            }
            L2LoopDetect l2_loop_detect = 1 [json_name = "l2-loop-detect"];
         }
         Soc soc = 32 [json_name = "soc"];
         message UnicastForward {
            message Ipv4Uc {
               bool force_frag = 1 [json_name = "force-frag"];
               bool icmp_reply_fast = 2 [json_name = "icmp-reply-fast"];
            }
            Ipv4Uc ipv4_uc = 1 [json_name = "ipv4-uc"];
            message ArpFastReply {
               bool enable = 1 [json_name = "enable"];
            }
            ArpFastReply arp_fast_reply = 2 [json_name = "arp-fast-reply"];
            message GreTtlMode {
               enum TtlMode {
                  TtlMode_PIPE = 0;
                  TtlMode_UNIFORM = 1;
               };
               TtlMode ttl_mode = 1 [json_name = "ttl-mode"];
            }
            GreTtlMode gre_ttl_mode = 3 [json_name = "gre-ttl-mode"];
            message NdFastReply {
               bool enable = 1 [json_name = "enable"];
            }
            NdFastReply nd_fast_reply = 4 [json_name = "nd-fast-reply"];
         }
         UnicastForward unicast_forward = 33 [json_name = "unicast-forward"];
         message CfmMacLevelEnableMpu {
            bool mac_level_enable = 1 [json_name = "mac-level-enable"];
         }
         CfmMacLevelEnableMpu cfm_mac_level_enable_mpu = 34 [json_name = "cfm-mac-level-enable-mpu"];
         message Dhcpv6Access {
            uint32 lease_proxy_rate = 1 [json_name = "lease-proxy-rate"];
         }
         Dhcpv6Access dhcpv6_access = 35 [json_name = "dhcpv6-access"];
         message HttpsRedirect {
            message ChastenFlow {
               uint32 flow_number = 1 [json_name = "flow-number"];
               uint32 flow_period = 2 [json_name = "flow-period"];
               uint32 flow_block_period = 3 [json_name = "flow-block-period"];
               uint32 flow_block_rate = 4 [json_name = "flow-block-rate"];
            }
            ChastenFlow chasten_flow = 1 [json_name = "chasten-flow"];
            message ChastenRedirect {
               uint32 redirect_number = 1 [json_name = "redirect-number"];
               uint32 redirect_period = 2 [json_name = "redirect-period"];
               uint32 redirect_block_period = 3 [json_name = "redirect-block-period"];
               uint32 redirect_block_rate = 4 [json_name = "redirect-block-rate"];
            }
            ChastenRedirect chasten_redirect = 2 [json_name = "chasten-redirect"];
         }
         HttpsRedirect https_redirect = 36 [json_name = "https-redirect"];
         message FramePaddingFix {
         }
         FramePaddingFix frame_padding_fix = 37 [json_name = "frame-padding-fix"];
         message PppNet {
            message LoadBalanceIdentifyPppoe {
               bool load_balance_enable = 1 [json_name = "load-balance-enable"];
            }
            LoadBalanceIdentifyPppoe load_balance_identify_pppoe = 1 [json_name = "load-balance-identify-pppoe"];
         }
         PppNet ppp_net = 38 [json_name = "ppp-net"];
         message Sflow {
            message SlotSampling {
               bool enable = 1 [json_name = "enable"];
            }
            SlotSampling slot_sampling = 1 [json_name = "slot-sampling"];
         }
         Sflow sflow = 39 [json_name = "sflow"];
         message Dcb {
            message HeadroomPool {
               uint32 pool = 1 [json_name = "pool"];
            }
            HeadroomPool headroom_pool = 1 [json_name = "headroom-pool"];
            message DeadlockRecoveryBehavior {
               enum Behavior {
                  Behavior_FORWARDING = 0;
                  Behavior_DISCARD = 1;
               };
               Behavior behavior = 1 [json_name = "behavior"];
            }
            DeadlockRecoveryBehavior deadlock_recovery_behavior = 2 [json_name = "deadlock-recovery-behavior"];
            message PfcMappingType {
               enum Type {
                  Type_X_8021P = 0;
                  Type_DSCP = 1;
               };
               Type type = 1 [json_name = "type"];
            }
            PfcMappingType pfc_mapping_type = 3 [json_name = "pfc-mapping-type"];
         }
         Dcb dcb = 40 [json_name = "dcb"];
      }
      repeated MpuBoard mpu_board = 1 [json_name = "mpu-board"];
   }
   MpuBoards mpu_boards = 6 [json_name = "mpu-boards"];
   message LpuBoards {
      message LpuBoard {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string board_type = 3 [json_name = "board-type"];
         uint32 sdram_size = 4 [json_name = "sdram-size"];
         uint32 flash_size = 5 [json_name = "flash-size"];
         uint32 up_time = 6 [json_name = "up-time"];
         uint32 np_rdram_size = 7 [json_name = "np-rdram-size"];
         uint32 np_sram_size = 8 [json_name = "np-sram-size"];
         enum ServiceType {
            ServiceType_LPU = 0;
            ServiceType_RNR = 1;
            ServiceType_TSU = 2;
            ServiceType_NS = 3;
            ServiceType_GRE = 4;
            ServiceType_VSU = 5;
         };
         ServiceType service_type = 9 [json_name = "service-type"];
         enum NextServiceType {
            NextServiceType_LPU = 0;
            NextServiceType_RNR = 1;
            NextServiceType_TSU = 2;
            NextServiceType_NS = 3;
            NextServiceType_GRE = 4;
            NextServiceType_VSU = 5;
         };
         NextServiceType next_service_type = 10 [json_name = "next-service-type"];
         uint32 pic_num = 11 [json_name = "pic-num"];
         uint32 sub_slot_num = 12 [json_name = "sub-slot-num"];
         string clock_8k_port = 13 [json_name = "clock-8k-port"];
         uint32 current_l3_clk = 14 [json_name = "current-l3-clk"];
         string register_time = 15 [json_name = "register-time"];
         bool is_register = 16 [json_name = "is-register"];
         message Bras {
            message FlowStatisticFrequency {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_FAST = 1;
                  Type_NORMAL = 2;
                  Type_SLOW = 3;
                  Type_DEFAULT = 4;
               };
               Type type = 1 [json_name = "type"];
            }
            FlowStatisticFrequency flow_statistic_frequency = 1 [json_name = "flow-statistic-frequency"];
            message Vas {
               message StatisticFrequency {
                  uint32 flow_read_speed = 1 [json_name = "flow-read-speed"];
               }
               StatisticFrequency statistic_frequency = 1 [json_name = "statistic-frequency"];
            }
            Vas vas = 2 [json_name = "vas"];
            message Multicast {
               message BasPolicyCac {
                  bool enable = 1 [json_name = "enable"];
               }
               BasPolicyCac bas_policy_cac = 1 [json_name = "bas-policy-cac"];
            }
            Multicast multicast = 3 [json_name = "multicast"];
            message IpUnrHostRoute {
               uint32 tag = 1 [json_name = "tag"];
            }
            IpUnrHostRoute ip_unr_host_route = 4 [json_name = "ip-unr-host-route"];
            message Block {
               bool enable = 1 [json_name = "enable"];
            }
            Block block = 5 [json_name = "block"];
         }
         Bras bras = 17 [json_name = "bras"];
         message HttpsRedirect {
            message ChastenFlow {
               uint32 flow_number = 1 [json_name = "flow-number"];
               uint32 flow_period = 2 [json_name = "flow-period"];
               uint32 flow_block_period = 3 [json_name = "flow-block-period"];
               uint32 flow_block_rate = 4 [json_name = "flow-block-rate"];
            }
            ChastenFlow chasten_flow = 1 [json_name = "chasten-flow"];
            message ChastenRedirect {
               uint32 redirect_number = 1 [json_name = "redirect-number"];
               uint32 redirect_period = 2 [json_name = "redirect-period"];
               uint32 redirect_block_period = 3 [json_name = "redirect-block-period"];
               uint32 redirect_block_rate = 4 [json_name = "redirect-block-rate"];
            }
            ChastenRedirect chasten_redirect = 2 [json_name = "chasten-redirect"];
         }
         HttpsRedirect https_redirect = 18 [json_name = "https-redirect"];
         message L2Tp {
            message IcrqLimit {
               uint32 set_value = 1 [json_name = "set-value"];
            }
            IcrqLimit icrq_limit = 1 [json_name = "icrq-limit"];
            message ForwardMode {
               enum ModeValue {
                  ModeValue_LOOPBACK = 0;
                  ModeValue_THROUGH = 1;
               };
               ModeValue mode_value = 1 [json_name = "mode-value"];
            }
            ForwardMode forward_mode = 2 [json_name = "forward-mode"];
         }
         L2Tp l2tp = 19 [json_name = "l2tp"];
         message BrasPppox {
            message SlotAccessLimit {
               uint32 access_user_limit = 1 [json_name = "access-user-limit"];
            }
            SlotAccessLimit slot_access_limit = 1 [json_name = "slot-access-limit"];
            message AccessIp {
               uint32 access_ip_number = 1 [json_name = "access-ip-number"];
            }
            AccessIp access_ip = 2 [json_name = "access-ip"];
            message AccessIpLimit {
               uint32 fail_number = 1 [json_name = "fail-number"];
            }
            AccessIpLimit access_ip_limit = 3 [json_name = "access-ip-limit"];
            message LoadBalanceIdentifyPppoe {
               bool load_balance_enable = 1 [json_name = "load-balance-enable"];
            }
            LoadBalanceIdentifyPppoe load_balance_identify_pppoe = 4 [json_name = "load-balance-identify-pppoe"];
            message MaxSessions {
               uint32 max_session_number = 1 [json_name = "max-session-number"];
            }
            MaxSessions max_sessions = 5 [json_name = "max-sessions"];
            message PppoeSlotStatistic {
               uint32 active_sessions = 1 [json_name = "active-sessions"];
               uint32 total_sessions = 2 [json_name = "total-sessions"];
               uint32 receive_padi_packets = 3 [json_name = "receive-padi-packets"];
               uint32 discard_padi_packets = 4 [json_name = "discard-padi-packets"];
               uint32 send_pado_packets = 5 [json_name = "send-pado-packets"];
               uint32 receive_padr_packets = 6 [json_name = "receive-padr-packets"];
               uint32 discard_padr_packets = 7 [json_name = "discard-padr-packets"];
               uint32 send_pads_packets = 8 [json_name = "send-pads-packets"];
               uint32 discard_padr_same_mac = 9 [json_name = "discard-padr-same-mac"];
               uint32 receive_padt_packets = 10 [json_name = "receive-padt-packets"];
               uint32 discard_padt_packets = 11 [json_name = "discard-padt-packets"];
               uint32 send_padt_packets = 12 [json_name = "send-padt-packets"];
               uint32 send_padm_packets = 13 [json_name = "send-padm-packets"];
               uint32 send_padm_url_packets = 14 [json_name = "send-padm-url-packets"];
               uint32 send_padm_motm_packets = 15 [json_name = "send-padm-motm-packets"];
               uint32 send_padn_packets = 16 [json_name = "send-padn-packets"];
               uint32 receive_session_packets = 17 [json_name = "receive-session-packets"];
               uint32 discard_session_packets = 18 [json_name = "discard-session-packets"];
               uint32 send_session_packets = 19 [json_name = "send-session-packets"];
               uint32 receive_packets = 20 [json_name = "receive-packets"];
               uint32 discard_packets = 21 [json_name = "discard-packets"];
               uint32 invalid_version = 22 [json_name = "invalid-version"];
               uint32 invalid_pad_code = 23 [json_name = "invalid-pad-code"];
               uint32 invalid_pad_tags = 24 [json_name = "invalid-pad-tags"];
               uint32 invalid_pad_tag_length = 25 [json_name = "invalid-pad-tag-length"];
               uint32 invalid_pad_type = 26 [json_name = "invalid-pad-type"];
               uint32 invalid_padi_sessions = 27 [json_name = "invalid-padi-sessions"];
               uint32 invalid_padr_sessions = 28 [json_name = "invalid-padr-sessions"];
               uint32 invalid_pad_packet_length = 29 [json_name = "invalid-pad-packet-length"];
               uint32 other_invalid_pad_packets = 30 [json_name = "other-invalid-pad-packets"];
               uint32 total_invalid_pad_packets = 31 [json_name = "total-invalid-pad-packets"];
               uint32 send_null_pads_packets = 32 [json_name = "send-null-pads-packets"];
            }
            PppoeSlotStatistic pppoe_slot_statistic = 6 [json_name = "pppoe-slot-statistic"];
            message PppSlotStatistic {
               uint32 send_echo_request = 1 [json_name = "send-echo-request"];
               uint32 send_echo_reply = 2 [json_name = "send-echo-reply"];
               uint32 send_echo_failed = 3 [json_name = "send-echo-failed"];
               uint32 receive_echo_reply = 4 [json_name = "receive-echo-reply"];
               uint32 receive_echo_request = 5 [json_name = "receive-echo-request"];
               uint32 send_lcp_connection_request = 6 [json_name = "send-lcp-connection-request"];
               uint32 send_lcp_connection_nak = 7 [json_name = "send-lcp-connection-nak"];
               uint32 send_lcp_connection_rejection = 8 [json_name = "send-lcp-connection-rejection"];
               uint32 send_lcp_connection_ack = 9 [json_name = "send-lcp-connection-ack"];
               uint32 send_lcp_code_rejection = 10 [json_name = "send-lcp-code-rejection"];
               uint32 send_lcp_protocol_rejection = 11 [json_name = "send-lcp-protocol-rejection"];
               uint32 send_lcp_termination_request = 12 [json_name = "send-lcp-termination-request"];
               uint32 send_lcp_termination_ack = 13 [json_name = "send-lcp-termination-ack"];
               uint32 receive_lcp_connection_request = 14 [json_name = "receive-lcp-connection-request"];
               uint32 receive_lcp_connection_nak = 15 [json_name = "receive-lcp-connection-nak"];
               uint32 receive_lcp_connection_rejection = 16 [json_name = "receive-lcp-connection-rejection"];
               uint32 receive_lcp_connection_ack = 17 [json_name = "receive-lcp-connection-ack"];
               uint32 receive_lcp_code_rejection = 18 [json_name = "receive-lcp-code-rejection"];
               uint32 receive_lcp_protocol_rejection = 19 [json_name = "receive-lcp-protocol-rejection"];
               uint32 receive_lcp_termination_request = 20 [json_name = "receive-lcp-termination-request"];
               uint32 receive_lcp_termination_ack = 21 [json_name = "receive-lcp-termination-ack"];
               uint32 send_ipcp_connection_request = 22 [json_name = "send-ipcp-connection-request"];
               uint32 send_ipcp_connection_nak = 23 [json_name = "send-ipcp-connection-nak"];
               uint32 send_ipcp_connection_rejection = 24 [json_name = "send-ipcp-connection-rejection"];
               uint32 send_ipcp_connection_ack = 25 [json_name = "send-ipcp-connection-ack"];
               uint32 send_ipcp_code_rejection = 26 [json_name = "send-ipcp-code-rejection"];
               uint32 send_ipcp_protocol_rejection = 27 [json_name = "send-ipcp-protocol-rejection"];
               uint32 send_ipcp_termination_request = 28 [json_name = "send-ipcp-termination-request"];
               uint32 send_ipccp_termination_ack = 29 [json_name = "send-ipccp-termination-ack"];
               uint32 receive_ipcp_connection_request = 30 [json_name = "receive-ipcp-connection-request"];
               uint32 receive_ipcp_connection_nak = 31 [json_name = "receive-ipcp-connection-nak"];
               uint32 receive_ipcp_connection_rejection = 32 [json_name = "receive-ipcp-connection-rejection"];
               uint32 receive_ipcp_connection_ack = 33 [json_name = "receive-ipcp-connection-ack"];
               uint32 receive_ipcp_code_rejection = 34 [json_name = "receive-ipcp-code-rejection"];
               uint32 receive_ipcp_protocol_rejection = 35 [json_name = "receive-ipcp-protocol-rejection"];
               uint32 receive_ipcp_termination_request = 36 [json_name = "receive-ipcp-termination-request"];
               uint32 receive_ipcp_termination_ack = 37 [json_name = "receive-ipcp-termination-ack"];
               uint32 send_ip6cp_connection_request = 38 [json_name = "send-ip6cp-connection-request"];
               uint32 send_ip6cp_connection_nak = 39 [json_name = "send-ip6cp-connection-nak"];
               uint32 send_ip6cp_connection_rejection = 40 [json_name = "send-ip6cp-connection-rejection"];
               uint32 send_ip6cp_connection_ack = 41 [json_name = "send-ip6cp-connection-ack"];
               uint32 send_ip6cp_code_rejection = 42 [json_name = "send-ip6cp-code-rejection"];
               uint32 send_ip6cp_protocol_rejection = 43 [json_name = "send-ip6cp-protocol-rejection"];
               uint32 send_ip6cp_termination_request = 44 [json_name = "send-ip6cp-termination-request"];
               uint32 send_ip6cp_termination_ack = 45 [json_name = "send-ip6cp-termination-ack"];
               uint32 receive_ip6cp_connection_request = 46 [json_name = "receive-ip6cp-connection-request"];
               uint32 receive_ip6cp_connection_nak = 47 [json_name = "receive-ip6cp-connection-nak"];
               uint32 receive_ip6cp_connection_reject = 48 [json_name = "receive-ip6cp-connection-reject"];
               uint32 receive_ip6cp_connection_ack = 49 [json_name = "receive-ip6cp-connection-ack"];
               uint32 receive_ip6cp_code_rejection = 50 [json_name = "receive-ip6cp-code-rejection"];
               uint32 receive_ip6cp_protocol_rejection = 51 [json_name = "receive-ip6cp-protocol-rejection"];
               uint32 receive_ip6cp_termination_request = 52 [json_name = "receive-ip6cp-termination-request"];
               uint32 receive_ip6cp_termination_ack = 53 [json_name = "receive-ip6cp-termination-ack"];
               uint32 send_pap_authentication_ack = 54 [json_name = "send-pap-authentication-ack"];
               uint32 send_pap_authentication_nak = 55 [json_name = "send-pap-authentication-nak"];
               uint32 send_chap_challenge = 56 [json_name = "send-chap-challenge"];
               uint32 send_chap_authentication_ack = 57 [json_name = "send-chap-authentication-ack"];
               uint32 send_chap_authentication_fail = 58 [json_name = "send-chap-authentication-fail"];
               uint32 discard_dail_fast = 59 [json_name = "discard-dail-fast"];
               uint32 discard_chasten = 60 [json_name = "discard-chasten"];
               uint32 receive_pap_authentication_request = 61 [json_name = "receive-pap-authentication-request"];
               uint32 receive_chap_response = 62 [json_name = "receive-chap-response"];
            }
            PppSlotStatistic ppp_slot_statistic = 7 [json_name = "ppp-slot-statistic"];
            message UrpfDiscardStatistics {
               message UrpfIpv4DiscardStatistic {
                  uint32 ppp_ipv4_packet_high_bits = 1 [json_name = "ppp-ipv4-packet-high-bits"];
                  uint32 ppp_ipv4_packet_low_bits = 2 [json_name = "ppp-ipv4-packet-low-bits"];
               }
               UrpfIpv4DiscardStatistic urpf_ipv4_discard_statistic = 1 [json_name = "urpf-ipv4-discard-statistic"];
               message UrpfIpv6DiscardStatistic {
                  uint32 ppp_ipv6_packet_high_bits = 1 [json_name = "ppp-ipv6-packet-high-bits"];
                  uint32 ppp_ipv6_packet_low_bits = 2 [json_name = "ppp-ipv6-packet-low-bits"];
               }
               UrpfIpv6DiscardStatistic urpf_ipv6_discard_statistic = 2 [json_name = "urpf-ipv6-discard-statistic"];
            }
            UrpfDiscardStatistics urpf_discard_statistics = 8 [json_name = "urpf-discard-statistics"];
            message PppEchoDeployMode {
               bool separate_mode = 1 [json_name = "separate-mode"];
            }
            PppEchoDeployMode ppp_echo_deploy_mode = 9 [json_name = "ppp-echo-deploy-mode"];
         }
         BrasPppox bras_pppox = 20 [json_name = "bras-pppox"];
         message Cpudefend {
            uint32 policy_id = 1 [json_name = "policy-id"];
         }
         Cpudefend cpudefend = 21 [json_name = "cpudefend"];
         message CpudefendDevm {
            message IgnoreHostcarAcl {
               string ipv4_acl = 1 [json_name = "ipv4-acl"];
               string ipv6_acl = 2 [json_name = "ipv6-acl"];
               message Ipv4AclType_ByIdentity {
                  string ipv4_acl = 1 [json_name = "ipv4-acl"];
               }
               message Ipv4AclType_ByNumber {
                  uint32 ipv4_acl_number = 1 [json_name = "ipv4-acl-number"];
               }
               oneof Ipv4AclType {
                  Ipv4AclType_ByIdentity ipv4_acl_type_by_identity = 3 [json_name = "by-identity"];
                  Ipv4AclType_ByNumber ipv4_acl_type_by_number = 4 [json_name = "by-number"];
               }
            }
            IgnoreHostcarAcl ignore_hostcar_acl = 1 [json_name = "ignore-hostcar-acl"];
            message BrasHostCars {
               message BrasHostCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_HOSTX_CAR = 1;
                     Type_HTTPX_HOSTX_CAR = 2;
                     Type_VLANX_HOSTX_CAR = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  message RateLimit {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                     uint32 pir = 3 [json_name = "pir"];
                     uint32 pbs = 4 [json_name = "pbs"];
                     bool auto_adjust_enable = 5 [json_name = "auto-adjust-enable"];
                  }
                  RateLimit rate_limit = 2 [json_name = "rate-limit"];
                  message Logging {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 discard_threshold = 2 [json_name = "discard-threshold"];
                  }
                  Logging logging = 3 [json_name = "logging"];
                  message AttackDetect {
                     uint32 drop_rate_threshold = 1 [json_name = "drop-rate-threshold"];
                  }
                  AttackDetect attack_detect = 4 [json_name = "attack-detect"];
               }
               repeated BrasHostCar bras_host_car = 1 [json_name = "bras-host-car"];
            }
            BrasHostCars bras_host_cars = 2 [json_name = "bras-host-cars"];
            message SpuCars {
               message SpuCar {
                  enum CarType {
                     INVALID_ENUM_VALUE_CarType = 0;
                     CarType_ICMP = 1;
                     CarType_TCP = 2;
                     CarType_UDP = 3;
                     CarType_GRE = 4;
                     CarType_BGP = 5;
                     CarType_DEFAULT = 6;
                     CarType_TOTAL = 7;
                     CarType_IKEX_TOTALX_CAR = 8;
                     CarType_IKEX_TUNNELX_CAR = 9;
                     CarType_PLAINX_SAX_MISS = 10;
                     CarType_CIPHERX_SAX_MISS = 11;
                     CarType_IPSECX_REKEY = 12;
                     CarType_IKEX_DPD = 13;
                     CarType_FASTX_CHANNEL = 14;
                     CarType_BFDX_DOWN = 15;
                     CarType_PST = 16;
                     CarType_DSLITEX_PRIVATEX_IPV4 = 17;
                     CarType_IPX_OPTION = 18;
                     CarType_MTUX_EXCEED = 19;
                     CarType_CGNX_ICMP = 20;
                     CarType_CGNX_ICMPV6 = 21;
                     CarType_CGNX_IPV4X_OTHER = 22;
                     CarType_CGNX_IPV6X_OTHER = 23;
                     CarType_CGNX_IPV6X_RAW = 24;
                     CarType_CGNX_TOTAL = 25;
                  };
                  CarType car_type = 1 [json_name = "car-type"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
               }
               repeated SpuCar spu_car = 1 [json_name = "spu-car"];
            }
            SpuCars spu_cars = 3 [json_name = "spu-cars"];
            message ArpVlanCar {
               bool alarm_drop_rate = 1 [json_name = "alarm-drop-rate"];
               message Level2Car {
                  uint32 rate_limit_percent = 1 [json_name = "rate-limit-percent"];
               }
               Level2Car level_2_car = 2 [json_name = "level-2-car"];
            }
            ArpVlanCar arp_vlan_car = 4 [json_name = "arp-vlan-car"];
            message NdVlanCar {
               message NdAttackAlarms {
                  message NdAttackAlarm {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     bool alarm_enable = 2 [json_name = "alarm-enable"];
                  }
                  repeated NdAttackAlarm nd_attack_alarm = 1 [json_name = "nd-attack-alarm"];
               }
               NdAttackAlarms nd_attack_alarms = 1 [json_name = "nd-attack-alarms"];
               message Level2Cars {
                  message Level2Car {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_NA = 1;
                        Type_NSX_UNICAST = 2;
                        Type_NSX_MULTICAST = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 rate_limit_percent = 2 [json_name = "rate-limit-percent"];
                  }
                  repeated Level2Car level_2_car = 1 [json_name = "level-2-car"];
               }
               Level2Cars level_2_cars = 2 [json_name = "level-2-cars"];
            }
            NdVlanCar nd_vlan_car = 5 [json_name = "nd-vlan-car"];
         }
         CpudefendDevm cpudefend_devm = 22 [json_name = "cpudefend-devm"];
         message Driver {
            message L3Clocks {
               message L3Clock {
                  string clock_id = 1 [json_name = "clock-id"];
                  enum L3ClockState {
                     L3ClockState_ABNORMAL = 0;
                     L3ClockState_NORMAL = 1;
                  };
                  L3ClockState l3_clock_state = 2 [json_name = "l3-clock-state"];
               }
               repeated L3Clock l3_clock = 1 [json_name = "l3-clock"];
            }
            L3Clocks l3_clocks = 1 [json_name = "l3-clocks"];
         }
         Driver driver = 23 [json_name = "driver"];
         message CmacPadding {
            enum Padding {
               Padding_DISABLE = 0;
               Padding_ENABLE = 1;
            };
            Padding padding = 1 [json_name = "padding"];
         }
         CmacPadding cmac_padding = 24 [json_name = "cmac-padding"];
         message Fim {
            enum ForwardMode {
               ForwardMode_LOOPBACK = 0;
               ForwardMode_THROUGH = 1;
            };
            ForwardMode forward_mode = 1 [json_name = "forward-mode"];
            enum VlanMissEnable {
               VlanMissEnable_DISABLE = 0;
               VlanMissEnable_ENABLE = 1;
            };
            VlanMissEnable vlan_miss_enable = 2 [json_name = "vlan-miss-enable"];
            uint32 scan_period = 3 [json_name = "scan-period"];
            uint32 cpu_threshold = 4 [json_name = "cpu-threshold"];
            uint32 cpu_detect = 5 [json_name = "cpu-detect"];
            uint32 cpu_restore = 6 [json_name = "cpu-restore"];
            uint32 statistics = 7 [json_name = "statistics"];
            uint32 precision = 8 [json_name = "precision"];
         }
         Fim fim = 25 [json_name = "fim"];
         message MacmtuDiscardStatistics {
            uint64 mtu_ipv4 = 1 [json_name = "mtu-ipv4"];
            uint64 mtu_ipv6 = 2 [json_name = "mtu-ipv6"];
            uint64 mac_ipv4 = 3 [json_name = "mac-ipv4"];
            uint64 mac_ipv6 = 4 [json_name = "mac-ipv6"];
         }
         MacmtuDiscardStatistics macmtu_discard_statistics = 26 [json_name = "macmtu-discard-statistics"];
         message VeMacAddress {
            string l2_ve_mac = 1 [json_name = "l2-ve-mac"];
            string access_ve_mac = 2 [json_name = "access-ve-mac"];
         }
         VeMacAddress ve_mac_address = 27 [json_name = "ve-mac-address"];
         message FlowspecForward {
            message Ipv6FlowspecEnable {
            }
            Ipv6FlowspecEnable ipv6_flowspec_enable = 1 [json_name = "ipv6-flowspec-enable"];
         }
         FlowspecForward flowspec_forward = 28 [json_name = "flowspec-forward"];
         message ManagementPlaneDefendSlot {
            uint32 slot_policy_id = 1 [json_name = "slot-policy-id"];
         }
         ManagementPlaneDefendSlot management_plane_defend_slot = 29 [json_name = "management-plane-defend-slot"];
         message LinkProtocolTransport {
            enum Lldp {
               Lldp_DISABLE = 0;
               Lldp_ENABLE = 1;
            };
            Lldp lldp = 1 [json_name = "lldp"];
            enum Lacp {
               Lacp_DISABLE = 0;
               Lacp_ENABLE = 1;
            };
            Lacp lacp = 2 [json_name = "lacp"];
            enum Oam {
               Oam_DISABLE = 0;
               Oam_ENABLE = 1;
            };
            Oam oam = 3 [json_name = "oam"];
            enum Esmc {
               Esmc_DISABLE = 0;
               Esmc_ENABLE = 1;
            };
            Esmc esmc = 4 [json_name = "esmc"];
         }
         LinkProtocolTransport link_protocol_transport = 30 [json_name = "link-protocol-transport"];
         message Loadbalance {
            message DynamicAdjust {
               bool enable = 1 [json_name = "enable"];
            }
            DynamicAdjust dynamic_adjust = 1 [json_name = "dynamic-adjust"];
            message HashArithmetic {
               enum Arithmetic {
                  INVALID_ENUM_VALUE_Arithmetic = 0;
                  Arithmetic_ARITHMETIC1 = 1;
                  Arithmetic_ARITHMETIC2 = 2;
                  Arithmetic_ARITHMETIC3 = 3;
                  Arithmetic_ARITHMETIC4 = 4;
                  Arithmetic_ARITHMETIC5 = 5;
                  Arithmetic_RANDOM = 6;
               };
               Arithmetic arithmetic = 1 [json_name = "arithmetic"];
               bool second_hash_flag = 2 [json_name = "second-hash-flag"];
            }
            HashArithmetic hash_arithmetic = 2 [json_name = "hash-arithmetic"];
            message HashFields {
               message HashField {
                  enum TrunkEcmp {
                     INVALID_ENUM_VALUE_TrunkEcmp = 0;
                     TrunkEcmp_IP = 5;
                     TrunkEcmp_MAC = 6;
                     TrunkEcmp_VLL = 7;
                     TrunkEcmp_TUNNELX_INFO = 8;
                     TrunkEcmp_TUNNELX_INNERX_IP = 9;
                     TrunkEcmp_GTP = 10;
                     TrunkEcmp_FEC = 11;
                     TrunkEcmp_GTPX_INNERX_IP = 12;
                  };
                  TrunkEcmp trunk_ecmp = 1 [json_name = "trunk-ecmp"];
                  enum Material {
                     INVALID_ENUM_VALUE_Material = 0;
                     Material_L2 = 1;
                     Material_L3 = 2;
                     Material_L4 = 3;
                     Material_UNDOX_DISABLE = 4;
                     Material_DISABLE = 5;
                     Material_LABELX_IP = 6;
                     Material_LABEL = 7;
                  };
                  Material material = 2 [json_name = "material"];
               }
               repeated HashField hash_field = 1 [json_name = "hash-field"];
            }
            HashFields hash_fields = 3 [json_name = "hash-fields"];
            message HashSeed {
               bool random_flag = 1 [json_name = "random-flag"];
               string custom_seed = 2 [json_name = "custom-seed"];
            }
            HashSeed hash_seed = 4 [json_name = "hash-seed"];
            message HashMultipe {
               enum MultipeFlag {
                  MultipeFlag_ENABLE = 0;
                  MultipeFlag_DISABLE = 255;
               };
               MultipeFlag multipe_flag = 1 [json_name = "multipe-flag"];
            }
            HashMultipe hash_multipe = 5 [json_name = "hash-multipe"];
            message Hashs {
               message Hash {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_BOX = 1;
                     Type_SEED = 2;
                     Type_ARITHMETIC = 3;
                     Type_FIELDS = 4;
                  };
                  Type type = 1 [json_name = "type"];
                  enum TrunkEcmp {
                     TrunkEcmp_INVALID = 0;
                     TrunkEcmp_ECMP1 = 1;
                     TrunkEcmp_ECMP2 = 2;
                     TrunkEcmp_TRUNK = 3;
                     TrunkEcmp_ECMP = 4;
                     TrunkEcmp_IP = 5;
                     TrunkEcmp_MAC = 6;
                     TrunkEcmp_VLL = 7;
                  };
                  TrunkEcmp trunk_ecmp = 2 [json_name = "trunk-ecmp"];
                  enum Arithmetic {
                     INVALID_ENUM_VALUE_Arithmetic = 0;
                     Arithmetic_ARITHMETIC1 = 1;
                     Arithmetic_ARITHMETIC2 = 2;
                     Arithmetic_ARITHMETIC3 = 3;
                  };
                  Arithmetic arithmetic = 3 [json_name = "arithmetic"];
                  string box1 = 4 [json_name = "box1"];
                  string box2 = 5 [json_name = "box2"];
                  enum Material {
                     Material_INVALID = 0;
                     Material_L2 = 1;
                     Material_L3 = 2;
                     Material_L4 = 3;
                  };
                  Material material = 6 [json_name = "material"];
                  bool random_flag = 7 [json_name = "random-flag"];
                  string custom_seed = 8 [json_name = "custom-seed"];
               }
               repeated Hash hash = 1 [json_name = "hash"];
            }
            Hashs hashs = 6 [json_name = "hashs"];
         }
         Loadbalance loadbalance = 31 [json_name = "loadbalance"];
         message MacSync {
            bool enable = 1 [json_name = "enable"];
         }
         MacSync mac_sync = 32 [json_name = "mac-sync"];
         message Mirror {
            message SlotObserve {
               uint32 observe_index = 1 [json_name = "observe-index"];
            }
            SlotObserve slot_observe = 1 [json_name = "slot-observe"];
            message RateLimitPercent {
               uint32 rate_value = 1 [json_name = "rate-value"];
            }
            RateLimitPercent rate_limit_percent = 2 [json_name = "rate-limit-percent"];
            message ObserveFilters {
               message ObserveFilter {
                  uint32 filter_id = 1 [json_name = "filter-id"];
                  string src_ipaddr = 2 [json_name = "src-ipaddr"];
                  string src_ipaddr_mask = 3 [json_name = "src-ipaddr-mask"];
                  string dst_ipaddr = 4 [json_name = "dst-ipaddr"];
                  string dst_ipaddr_mask = 5 [json_name = "dst-ipaddr-mask"];
                  uint32 src_port = 6 [json_name = "src-port"];
                  uint32 dst_port = 7 [json_name = "dst-port"];
                  string src_macaddr = 8 [json_name = "src-macaddr"];
                  uint32 pppoe_session_id = 9 [json_name = "pppoe-session-id"];
                  string dst_macaddr = 10 [json_name = "dst-macaddr"];
                  uint32 vlan = 11 [json_name = "vlan"];
                  string eth_type = 12 [json_name = "eth-type"];
                  message ProtocolType_Ppp {
                     string ppp_protocol = 1 [json_name = "ppp-protocol"];
                  }
                  message ProtocolType_Ip {
                     uint32 ip_protocol = 1 [json_name = "ip-protocol"];
                  }
                  oneof ProtocolType {
                     ProtocolType_Ppp protocol_type_ppp = 13 [json_name = "ppp"];
                     ProtocolType_Ip protocol_type_ip = 14 [json_name = "ip"];
                  }
               }
               repeated ObserveFilter observe_filter = 1 [json_name = "observe-filter"];
            }
            ObserveFilters observe_filters = 3 [json_name = "observe-filters"];
         }
         Mirror mirror = 33 [json_name = "mirror"];
         message MplsForward {
            message MplsHashMode {
               enum Hashcfg {
                  INVALID_ENUM_VALUE_Hashcfg = 0;
                  Hashcfg_PAYLOADX_HEADER = 64;
                  Hashcfg_IP = 160;
                  Hashcfg_LABEL = 192;
                  Hashcfg_IPX_TOS = 193;
                  Hashcfg_MAC = 196;
               };
               Hashcfg hashcfg = 1 [json_name = "hashcfg"];
            }
            MplsHashMode mpls_hash_mode = 1 [json_name = "mpls-hash-mode"];
            message Mplsfrags {
               enum MplsfragEnable {
                  MplsfragEnable_DISABLE = 0;
                  MplsfragEnable_ENABLE = 1;
               };
               MplsfragEnable mplsfrag_enable = 1 [json_name = "mplsfrag-enable"];
            }
            Mplsfrags mplsfrags = 2 [json_name = "mplsfrags"];
            message MplsLoadCtrwords {
               enum MplsloadCtrwordDisable {
                  MplsloadCtrwordDisable_DISABLE = 0;
                  MplsloadCtrwordDisable_ENABLE = 1;
               };
               MplsloadCtrwordDisable mplsload_ctrword_disable = 1 [json_name = "mplsload-ctrword-disable"];
            }
            MplsLoadCtrwords mpls_load_ctrwords = 3 [json_name = "mpls-load-ctrwords"];
         }
         MplsForward mpls_forward = 34 [json_name = "mpls-forward"];
         message Netstream {
            message SamplerModes {
               message SamplerMode {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  string dest_slot = 3 [json_name = "dest-slot"];
                  enum SamplerMode7 {
                     SamplerMode7_SELF = 0;
                     SamplerMode7_MAIN = 1;
                     SamplerMode7_BAK = 2;
                  };
                  SamplerMode7 sampler_mode = 4 [json_name = "sampler-mode"];
               }
               repeated SamplerMode sampler_mode = 1 [json_name = "sampler-mode"];
            }
            SamplerModes sampler_modes = 1 [json_name = "sampler-modes"];
            message SequenceMode {
               enum Mode {
                  INVALID_ENUM_VALUE_Mode = 0;
                  Mode_FLOW = 1;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            SequenceMode sequence_mode = 2 [json_name = "sequence-mode"];
            message ExportHosts {
               message ExportHost {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum AddressType {
                     AddressType_IPV4 = 0;
                     AddressType_IPV6 = 1;
                  };
                  AddressType address_type = 2 [json_name = "address-type"];
                  string ip_address = 3 [json_name = "ip-address"];
                  uint32 destination_port = 4 [json_name = "destination-port"];
                  string vpn_name = 5 [json_name = "vpn-name"];
                  uint32 dscp = 6 [json_name = "dscp"];
               }
               repeated ExportHost export_host = 1 [json_name = "export-host"];
            }
            ExportHosts export_hosts = 3 [json_name = "export-hosts"];
         }
         Netstream netstream = 35 [json_name = "netstream"];
         message Pbr {
            message RoutingFilters {
               message RoutingFilter {
                  enum Type {
                     Type_IPV4 = 0;
                     Type_IPV6 = 1;
                     Type_IPV4IPV6 = 2;
                  };
                  Type type = 1 [json_name = "type"];
                  enum RoutingType {
                     INVALID_ENUM_VALUE_RoutingType = 0;
                     RoutingType_DEFAULT = 1;
                     RoutingType_BLACKHOLE = 2;
                     RoutingType_DEFAULTX_BLACKHOLE = 3;
                  };
                  RoutingType routing_type = 2 [json_name = "routing-type"];
               }
               repeated RoutingFilter routing_filter = 1 [json_name = "routing-filter"];
            }
            RoutingFilters routing_filters = 1 [json_name = "routing-filters"];
         }
         Pbr pbr = 36 [json_name = "pbr"];
         message Qos {
            message TrafficPolicyMatchs {
               message TrafficPolicyMatch {
                  enum Type {
                     Type_IPX_LAYERX_PUSH = 0;
                     Type_IPV6X_ADDRESSX_RULEX_MASK = 1;
                     Type_PROTOCOLX_MCX_RESERVED = 2;
                     Type_MPLSX_LAYERX_PUSH = 3;
                     Type_MPLSX_LAYERX_L2X_INBOUND = 4;
                     Type_RULEX_PACKET = 5;
                     Type_MPLSX_LAYERX_POP = 6;
                     Type_IPX_LAYERX_POP = 7;
                  };
                  Type type = 1 [json_name = "type"];
               }
               repeated TrafficPolicyMatch traffic_policy_match = 1 [json_name = "traffic-policy-match"];
            }
            TrafficPolicyMatchs traffic_policy_matchs = 1 [json_name = "traffic-policy-matchs"];
            message PqSchedulePrioritys {
               message PqSchedulePriority {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum Mode {
                     Mode_HIGH = 0;
                     Mode_LOW = 1;
                  };
                  Mode mode = 2 [json_name = "mode"];
               }
               repeated PqSchedulePriority pq_schedule_priority = 1 [json_name = "pq-schedule-priority"];
            }
            PqSchedulePrioritys pq_schedule_prioritys = 2 [json_name = "pq-schedule-prioritys"];
            message PqSchedulePriorityOnCards {
               message PqSchedulePriorityOnCard {
                  string card_id = 1 [json_name = "card-id"];
                  enum Mode {
                     Mode_HIGH = 0;
                     Mode_LOW = 1;
                  };
                  Mode mode = 2 [json_name = "mode"];
               }
               repeated PqSchedulePriorityOnCard pq_schedule_priority_on_card = 1 [json_name = "pq-schedule-priority-on-card"];
            }
            PqSchedulePriorityOnCards pq_schedule_priority_on_cards = 3 [json_name = "pq-schedule-priority-on-cards"];
            message MulticastPortQueues {
               message MulticastPortQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                  };
                  QueueScheduleMode queue_schedule_mode = 2 [json_name = "queue-schedule-mode"];
                  uint32 weight = 3 [json_name = "weight"];
                  string port_wred_name = 4 [json_name = "port-wred-name"];
                  message ShapingParameters_Shaping {
                     uint32 shaping_value = 1 [json_name = "shaping-value"];
                  }
                  message ShapingParameters_ShapingPercent {
                     uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                  }
                  oneof ShapingParameters {
                     ShapingParameters_Shaping shaping_parameters_shaping = 5 [json_name = "shaping"];
                     ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 6 [json_name = "shaping-percent"];
                  }
               }
               repeated MulticastPortQueue multicast_port_queue = 1 [json_name = "multicast-port-queue"];
            }
            MulticastPortQueues multicast_port_queues = 4 [json_name = "multicast-port-queues"];
            message MulticastPortShaping {
               message ShapingParameters_ShapingTypeMode {
                  enum ShapingType {
                     ShapingType_X_256K = 0;
                     ShapingType_X_512K = 1;
                  };
                  ShapingType shaping_type = 1 [json_name = "shaping-type"];
               }
               message ShapingParameters_ShapingValueMode {
                  uint32 shaping_value = 1 [json_name = "shaping-value"];
               }
               oneof ShapingParameters {
                  ShapingParameters_ShapingTypeMode shaping_parameters_shaping_type_mode = 1 [json_name = "shaping-type-mode"];
                  ShapingParameters_ShapingValueMode shaping_parameters_shaping_value_mode = 2 [json_name = "shaping-value-mode"];
               }
            }
            MulticastPortShaping multicast_port_shaping = 5 [json_name = "multicast-port-shaping"];
            message UserQueuePirPrecision {
               uint32 precision = 1 [json_name = "precision"];
            }
            UserQueuePirPrecision user_queue_pir_precision = 6 [json_name = "user-queue-pir-precision"];
            message ExpPhbDisable {
               enum ForwardType {
                  INVALID_ENUM_VALUE_ForwardType = 0;
                  ForwardType_VLL = 1;
               };
               ForwardType forward_type = 1 [json_name = "forward-type"];
            }
            ExpPhbDisable exp_phb_disable = 7 [json_name = "exp-phb-disable"];
            message PacketBlockThresholds {
               message PacketBlockThreshold {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 size = 2 [json_name = "size"];
               }
               repeated PacketBlockThreshold packet_block_threshold = 1 [json_name = "packet-block-threshold"];
            }
            PacketBlockThresholds packet_block_thresholds = 8 [json_name = "packet-block-thresholds"];
            message PacketBlockThresholdAll {
               uint32 size = 1 [json_name = "size"];
            }
            PacketBlockThresholdAll packet_block_threshold_all = 9 [json_name = "packet-block-threshold-all"];
            message ChannelAlarms {
               message ChannelAlarm {
                  enum AlarmType {
                     AlarmType_QUANTITY = 0;
                     AlarmType_BANDWIDTH = 1;
                  };
                  AlarmType alarm_type = 1 [json_name = "alarm-type"];
                  enum Pool {
                     INVALID_ENUM_VALUE_Pool = 0;
                     Pool_POOLX_0 = 1;
                     Pool_POOLX_1 = 2;
                  };
                  Pool pool = 2 [json_name = "pool"];
                  uint32 threshold = 3 [json_name = "threshold"];
               }
               repeated ChannelAlarm channel_alarm = 1 [json_name = "channel-alarm"];
            }
            ChannelAlarms channel_alarms = 10 [json_name = "channel-alarms"];
            message ChannelProfilePrecision {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_UP = 1;
                  Type_DOWN = 2;
               };
               Type type = 1 [json_name = "type"];
            }
            ChannelProfilePrecision channel_profile_precision = 11 [json_name = "channel-profile-precision"];
            message ChannelProfileApply {
               string name = 1 [json_name = "name"];
            }
            ChannelProfileApply channel_profile_apply = 12 [json_name = "channel-profile-apply"];
            message FabricQueueStatisticEnable {
               bool enable = 1 [json_name = "enable"];
            }
            FabricQueueStatisticEnable fabric_queue_statistic_enable = 13 [json_name = "fabric-queue-statistic-enable"];
            message OverRideAdjustNumber {
               uint32 adjust_number = 1 [json_name = "adjust-number"];
            }
            OverRideAdjustNumber over_ride_adjust_number = 14 [json_name = "over-ride-adjust-number"];
            message OverRideDegradeCycle {
               uint32 degrade_cycle = 1 [json_name = "degrade-cycle"];
            }
            OverRideDegradeCycle over_ride_degrade_cycle = 15 [json_name = "over-ride-degrade-cycle"];
            message OverRideUpgradeCycle {
               uint32 upgrade_cycle = 1 [json_name = "upgrade-cycle"];
            }
            OverRideUpgradeCycle over_ride_upgrade_cycle = 16 [json_name = "over-ride-upgrade-cycle"];
            message OverRideSwitch {
               uint32 disable_percent = 1 [json_name = "disable-percent"];
               uint32 enable_percent = 2 [json_name = "enable-percent"];
            }
            OverRideSwitch over_ride_switch = 17 [json_name = "over-ride-switch"];
            message OverRideInboundThresholdAdjust {
               uint32 upgrade_threshold = 1 [json_name = "upgrade-threshold"];
               uint32 degrade_threshold = 2 [json_name = "degrade-threshold"];
            }
            OverRideInboundThresholdAdjust over_ride_inbound_threshold_adjust = 18 [json_name = "over-ride-inbound-threshold-adjust"];
            message OverRideOutboundThresholdAdjust {
               uint32 upgrade_threshold = 1 [json_name = "upgrade-threshold"];
               uint32 degrade_threshold = 2 [json_name = "degrade-threshold"];
            }
            OverRideOutboundThresholdAdjust over_ride_outbound_threshold_adjust = 19 [json_name = "over-ride-outbound-threshold-adjust"];
            message OverRideMonitorNumber {
               uint32 monitor_number = 1 [json_name = "monitor-number"];
            }
            OverRideMonitorNumber over_ride_monitor_number = 20 [json_name = "over-ride-monitor-number"];
            message OverRideEnableSwitch {
               bool outbound = 1 [json_name = "outbound"];
            }
            OverRideEnableSwitch over_ride_enable_switch = 21 [json_name = "over-ride-enable-switch"];
            message MulticastShaping {
               uint32 shaping_value = 1 [json_name = "shaping-value"];
            }
            MulticastShaping multicast_shaping = 22 [json_name = "multicast-shaping"];
            message MulticastShapingServiceTemplate {
               message AllServiceClass {
                  string service_template_name = 1 [json_name = "service-template-name"];
               }
               AllServiceClass all_service_class = 1 [json_name = "all-service-class"];
               message SpecificServiceClasss {
                  message SpecificServiceClass {
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 1 [json_name = "service-class"];
                     string service_template_name = 2 [json_name = "service-template-name"];
                  }
                  repeated SpecificServiceClass specific_service_class = 1 [json_name = "specific-service-class"];
               }
               SpecificServiceClasss specific_service_classs = 2 [json_name = "specific-service-classs"];
            }
            MulticastShapingServiceTemplate multicast_shaping_service_template = 23 [json_name = "multicast-shaping-service-template"];
            message PortQueueAlarms {
               message PortQueueAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarm port_queue_alarm = 1 [json_name = "port-queue-alarm"];
            }
            PortQueueAlarms port_queue_alarms = 24 [json_name = "port-queue-alarms"];
            message UserQueueRecoveryDisable {
            }
            UserQueueRecoveryDisable user_queue_recovery_disable = 25 [json_name = "user-queue-recovery-disable"];
            message MulticastShapers {
               message MulticastShaper {
                  enum Priority {
                     Priority_LOW = 0;
                     Priority_HIGH = 1;
                     Priority_BOTH = 2;
                  };
                  Priority priority = 1 [json_name = "priority"];
                  uint32 shaping_value = 2 [json_name = "shaping-value"];
               }
               repeated MulticastShaper multicast_shaper = 1 [json_name = "multicast-shaper"];
            }
            MulticastShapers multicast_shapers = 26 [json_name = "multicast-shapers"];
            message AccessUserBoardScheduleEnable {
            }
            AccessUserBoardScheduleEnable access_user_board_schedule_enable = 27 [json_name = "access-user-board-schedule-enable"];
            message ConvergentPrecedenceHighs {
               message ConvergentPrecedenceHigh {
                  uint32 service_class_value = 1 [json_name = "service-class-value"];
               }
               repeated ConvergentPrecedenceHigh convergent_precedence_high = 1 [json_name = "convergent-precedence-high"];
            }
            ConvergentPrecedenceHighs convergent_precedence_highs = 28 [json_name = "convergent-precedence-highs"];
            message QueueDiscardAlarms {
               message QueueDiscardAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 interval_time = 2 [json_name = "interval-time"];
                  message DiscardType_Bytes {
                     uint32 bytes8 = 1 [json_name = "bytes"];
                  }
                  message DiscardType_Packets {
                     uint32 packets8 = 1 [json_name = "packets"];
                  }
                  message DiscardType_PacketRatio {
                     uint32 packet_coefficient = 1 [json_name = "packet-coefficient"];
                     uint32 packet_exponent = 2 [json_name = "packet-exponent"];
                  }
                  oneof DiscardType {
                     DiscardType_Bytes discard_type_bytes = 3 [json_name = "bytes"];
                     DiscardType_Packets discard_type_packets = 4 [json_name = "packets"];
                     DiscardType_PacketRatio discard_type_packet_ratio = 5 [json_name = "packet-ratio"];
                  }
               }
               repeated QueueDiscardAlarm queue_discard_alarm = 1 [json_name = "queue-discard-alarm"];
            }
            QueueDiscardAlarms queue_discard_alarms = 29 [json_name = "queue-discard-alarms"];
            message UserQueueBurst {
               uint32 minimum_burst_size = 1 [json_name = "minimum-burst-size"];
               uint32 time = 2 [json_name = "time"];
            }
            UserQueueBurst user_queue_burst = 30 [json_name = "user-queue-burst"];
            message BurstSizes {
               message BurstSize {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 value = 2 [json_name = "value"];
               }
               repeated BurstSize burst_size = 1 [json_name = "burst-size"];
            }
            BurstSizes burst_sizes = 31 [json_name = "burst-sizes"];
            message GlobalBufferShareThresholds {
               message GlobalBufferShareThreshold {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 threshold = 2 [json_name = "threshold"];
               }
               repeated GlobalBufferShareThreshold global_buffer_share_threshold = 1 [json_name = "global-buffer-share-threshold"];
            }
            GlobalBufferShareThresholds global_buffer_share_thresholds = 32 [json_name = "global-buffer-share-thresholds"];
            message GlobalBufferShareQueues {
               message GlobalBufferShareQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated GlobalBufferShareQueue global_buffer_share_queue = 1 [json_name = "global-buffer-share-queue"];
            }
            GlobalBufferShareQueues global_buffer_share_queues = 33 [json_name = "global-buffer-share-queues"];
            message FlowQueueBackpressureOff {
            }
            FlowQueueBackpressureOff flow_queue_backpressure_off = 34 [json_name = "flow-queue-backpressure-off"];
            message TrafficPolicyMatchType {
               message DestinationUser {
               }
               DestinationUser destination_user = 1 [json_name = "destination-user"];
               message InterfaceAcl {
               }
               InterfaceAcl interface_acl = 2 [json_name = "interface-acl"];
            }
            TrafficPolicyMatchType traffic_policy_match_type = 35 [json_name = "traffic-policy-match-type"];
            message UserQueueResource4Cos {
               uint32 cos_value = 1 [json_name = "cos-value"];
            }
            UserQueueResource4Cos user_queue_resource_4cos = 36 [json_name = "user-queue-resource-4cos"];
            message UserQueueResource8CosEnhances {
               message UserQueueResource8CosEnhance {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cos_value = 2 [json_name = "cos-value"];
               }
               repeated UserQueueResource8CosEnhance user_queue_resource_8cos_enhance = 1 [json_name = "user-queue-resource-8cos-enhance"];
            }
            UserQueueResource8CosEnhances user_queue_resource_8cos_enhances = 37 [json_name = "user-queue-resource-8cos-enhances"];
            message ChannelAutoAdjustSwitch {
               enum AutoAdjustQuantity {
                  AutoAdjustQuantity_ENABLE = 0;
                  AutoAdjustQuantity_DISABLE = 1;
               };
               AutoAdjustQuantity auto_adjust_quantity = 1 [json_name = "auto-adjust-quantity"];
            }
            ChannelAutoAdjustSwitch channel_auto_adjust_switch = 38 [json_name = "channel-auto-adjust-switch"];
            message OverRideEnableInboundSwitch {
               bool inbound = 1 [json_name = "inbound"];
            }
            OverRideEnableInboundSwitch over_ride_enable_inbound_switch = 39 [json_name = "over-ride-enable-inbound-switch"];
            message OverRideInitialGrade {
               uint32 grade_id = 1 [json_name = "grade-id"];
            }
            OverRideInitialGrade over_ride_initial_grade = 40 [json_name = "over-ride-initial-grade"];
         }
         Qos qos = 37 [json_name = "qos"];
         message Soc {
            message L2LoopDetect {
               message SlotL2Loopdet {
                  bool enable = 1 [json_name = "enable"];
                  uint32 packets_drop_threshold = 2 [json_name = "packets-drop-threshold"];
               }
               SlotL2Loopdet slot_l2loopdet = 1 [json_name = "slot-l2loopdet"];
               message Action {
                  message Shutdown {
                     uint32 up_times = 1 [json_name = "up-times"];
                     uint32 up_interval = 2 [json_name = "up-interval"];
                  }
                  Shutdown shutdown = 1 [json_name = "shutdown"];
                  message Trap {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Trap trap = 2 [json_name = "trap"];
               }
               Action action = 2 [json_name = "action"];
               message LoopLevelThresholds {
                  message LoopLevelThreshold {
                     enum InterfaceType {
                        InterfaceType_MAINX_INTERFACE = 0;
                        InterfaceType_SUBX_INTERFACE = 1;
                     };
                     InterfaceType interface_type = 1 [json_name = "interface-type"];
                     uint32 determined = 2 [json_name = "determined"];
                     uint32 suspect = 3 [json_name = "suspect"];
                     uint32 notification = 4 [json_name = "notification"];
                  }
                  repeated LoopLevelThreshold loop_level_threshold = 1 [json_name = "loop-level-threshold"];
               }
               LoopLevelThresholds loop_level_thresholds = 3 [json_name = "loop-level-thresholds"];
            }
            L2LoopDetect l2_loop_detect = 1 [json_name = "l2-loop-detect"];
         }
         Soc soc = 38 [json_name = "soc"];
         message UnicastForward {
            message Ipv4Uc {
               bool force_frag = 1 [json_name = "force-frag"];
               bool icmp_reply_fast = 2 [json_name = "icmp-reply-fast"];
            }
            Ipv4Uc ipv4_uc = 1 [json_name = "ipv4-uc"];
            message ArpFastReply {
               bool enable = 1 [json_name = "enable"];
            }
            ArpFastReply arp_fast_reply = 2 [json_name = "arp-fast-reply"];
            message GreTtlMode {
               enum TtlMode {
                  TtlMode_PIPE = 0;
                  TtlMode_UNIFORM = 1;
               };
               TtlMode ttl_mode = 1 [json_name = "ttl-mode"];
            }
            GreTtlMode gre_ttl_mode = 3 [json_name = "gre-ttl-mode"];
            message L3LcsCapacitys {
               message SlotL3LcsCapacity {
                  enum ServiceType {
                     ServiceType_FIB = 0;
                     ServiceType_L3VPN = 1;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
                  bool capacity_enable = 2 [json_name = "capacity-enable"];
               }
               repeated SlotL3LcsCapacity slot_l3_lcs_capacity = 1 [json_name = "slot-l3-lcs-capacity"];
            }
            L3LcsCapacitys l3_lcs_capacitys = 4 [json_name = "l3-lcs-capacitys"];
            message NdFastReply {
               bool enable = 1 [json_name = "enable"];
            }
            NdFastReply nd_fast_reply = 5 [json_name = "nd-fast-reply"];
            message VxlanRdrTrunks {
               message VxlanRdrTrunk {
                  enum RedirectType {
                     INVALID_ENUM_VALUE_RedirectType = 0;
                     RedirectType_VXLAN = 1;
                     RedirectType_BDIF = 2;
                     RedirectType_VXLANBDIF = 3;
                  };
                  RedirectType redirect_type = 1 [json_name = "redirect-type"];
                  string dest_slot_id1 = 2 [json_name = "dest-slot-id1"];
                  string dest_slot_id2 = 3 [json_name = "dest-slot-id2"];
               }
               repeated VxlanRdrTrunk vxlan_rdr_trunk = 1 [json_name = "vxlan-rdr-trunk"];
            }
            VxlanRdrTrunks vxlan_rdr_trunks = 6 [json_name = "vxlan-rdr-trunks"];
         }
         UnicastForward unicast_forward = 39 [json_name = "unicast-forward"];
         message CfmMacLevelEnableLpu {
            bool mac_level_enable = 1 [json_name = "mac-level-enable"];
         }
         CfmMacLevelEnableLpu cfm_mac_level_enable_lpu = 40 [json_name = "cfm-mac-level-enable-lpu"];
         message Dhcpv6Access {
            uint32 lease_proxy_rate = 1 [json_name = "lease-proxy-rate"];
         }
         Dhcpv6Access dhcpv6_access = 41 [json_name = "dhcpv6-access"];
         message FramePaddingFix {
         }
         FramePaddingFix frame_padding_fix = 42 [json_name = "frame-padding-fix"];
         message PppNet {
            message PppMinPacketLength {
               uint32 packet_length = 1 [json_name = "packet-length"];
            }
            PppMinPacketLength ppp_min_packet_length = 1 [json_name = "ppp-min-packet-length"];
            message LoadBalanceIdentifyPppoe {
               bool load_balance_enable = 1 [json_name = "load-balance-enable"];
            }
            LoadBalanceIdentifyPppoe load_balance_identify_pppoe = 2 [json_name = "load-balance-identify-pppoe"];
         }
         PppNet ppp_net = 43 [json_name = "ppp-net"];
         message Sflow {
            message SlotSampling {
               bool enable = 1 [json_name = "enable"];
            }
            SlotSampling slot_sampling = 1 [json_name = "slot-sampling"];
         }
         Sflow sflow = 44 [json_name = "sflow"];
         message Dcb {
            message HeadroomPool {
               uint32 pool = 1 [json_name = "pool"];
            }
            HeadroomPool headroom_pool = 1 [json_name = "headroom-pool"];
            message DeadlockRecoveryBehavior {
               enum Behavior {
                  Behavior_FORWARDING = 0;
                  Behavior_DISCARD = 1;
               };
               Behavior behavior = 1 [json_name = "behavior"];
            }
            DeadlockRecoveryBehavior deadlock_recovery_behavior = 2 [json_name = "deadlock-recovery-behavior"];
            message PfcMappingType {
               enum Type {
                  Type_X_8021P = 0;
                  Type_DSCP = 1;
               };
               Type type = 1 [json_name = "type"];
            }
            PfcMappingType pfc_mapping_type = 3 [json_name = "pfc-mapping-type"];
         }
         Dcb dcb = 45 [json_name = "dcb"];
         message MulticastLeafCfcChecks {
            message MulticastLeafCfcCheck {
               string slot = 1 [json_name = "slot"];
            }
            repeated MulticastLeafCfcCheck multicast_leaf_cfc_check = 1 [json_name = "multicast-leaf-cfc-check"];
         }
         MulticastLeafCfcChecks multicast_leaf_cfc_checks = 46 [json_name = "multicast-leaf-cfc-checks"];
      }
      repeated LpuBoard lpu_board = 1 [json_name = "lpu-board"];
   }
   LpuBoards lpu_boards = 7 [json_name = "lpu-boards"];
   message SfuBoards {
      message SfuBoard {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string board_type = 3 [json_name = "board-type"];
         uint32 sdram_size = 4 [json_name = "sdram-size"];
         uint32 flash_size = 5 [json_name = "flash-size"];
         uint32 up_time = 6 [json_name = "up-time"];
         string register_time = 7 [json_name = "register-time"];
         bool is_register = 8 [json_name = "is-register"];
      }
      repeated SfuBoard sfu_board = 1 [json_name = "sfu-board"];
   }
   SfuBoards sfu_boards = 8 [json_name = "sfu-boards"];
   message Cards {
      message Card {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         string type = 3 [json_name = "type"];
         string hard_type = 4 [json_name = "hard-type"];
         uint32 port_num = 5 [json_name = "port-num"];
         enum InitStatus {
            InitStatus_FAIL = 0;
            InitStatus_SUCCESS = 1;
            InitStatus_UNKNOWN = 2;
         };
         InitStatus init_status = 6 [json_name = "init-status"];
         enum RegisterStatus {
            RegisterStatus_UNREGISTERED = 0;
            RegisterStatus_REGISTERED = 1;
            RegisterStatus_UNKNOWN = 2;
         };
         RegisterStatus register_status = 7 [json_name = "register-status"];
         message Pic {
            enum LogicStatus {
               LogicStatus_FAIL = 0;
               LogicStatus_SUCCESS = 1;
               LogicStatus_UNKNOWN = 2;
            };
            LogicStatus logic_status = 1 [json_name = "logic-status"];
            string up_time = 2 [json_name = "up-time"];
         }
         Pic pic = 8 [json_name = "pic"];
         message CardTdmParam {
            string idle_code = 1 [json_name = "idle-code"];
            string idle_code_e1 = 2 [json_name = "idle-code-e1"];
            enum Impedance {
               INVALID_ENUM_VALUE_Impedance = 0;
               Impedance_X_75OHMS = 75;
               Impedance_X_120OHMS = 120;
            };
            Impedance impedance = 3 [json_name = "impedance"];
         }
         CardTdmParam card_tdm_param = 9 [json_name = "card-tdm-param"];
         message ServiceMode {
            enum Portrate {
               Portrate_X_155M = 0;
               Portrate_X_622M = 1;
            };
            Portrate portrate = 1 [json_name = "portrate"];
            enum BandwidthMode {
               INVALID_ENUM_VALUE_BandwidthMode = 0;
               BandwidthMode_ETHX_28X10GF = 1;
               BandwidthMode_ETHX_26X10GFX_18XGF = 2;
               BandwidthMode_ETHX_20X10GFX_24XGF = 3;
               BandwidthMode_ETHX_2X100GEX_30X10GFX_10XGF = 4;
               BandwidthMode_ETHX_2X100GEX_26X10GFX_14XGF = 5;
               BandwidthMode_ETHX_2X100GE = 6;
               BandwidthMode_ETHX_1X100GEX_4X10GF = 7;
               BandwidthMode_POSX_8X622M = 12;
               BandwidthMode_POSX_4X2X_5G = 13;
               BandwidthMode_POSX_1X10G = 14;
               BandwidthMode_POSX_8X155M = 15;
            };
            BandwidthMode bandwidth_mode = 2 [json_name = "bandwidth-mode"];
         }
         ServiceMode service_mode = 10 [json_name = "service-mode"];
         message PortGroupModes {
            message PortGroupMode {
               uint32 port_groupid = 1 [json_name = "port-groupid"];
               string port_list = 2 [json_name = "port-list"];
               enum ModeType {
                  INVALID_ENUM_VALUE_ModeType = 0;
                  ModeType_X_25GEX_10GE = 1;
                  ModeType_X_10GEX_1GE = 2;
                  ModeType_X_25GE = 3;
                  ModeType_X_10GE = 4;
               };
               ModeType mode_type = 3 [json_name = "mode-type"];
            }
            repeated PortGroupMode port_group_mode = 1 [json_name = "port-group-mode"];
         }
         PortGroupModes port_group_modes = 11 [json_name = "port-group-modes"];
         message QueuePriority {
            enum QueuePriEnable {
               QueuePriEnable_DISABLE = 0;
               QueuePriEnable_ENABLE = 1;
            };
            QueuePriEnable queue_pri_enable = 1 [json_name = "queue-pri-enable"];
         }
         QueuePriority queue_priority = 12 [json_name = "queue-priority"];
         message FrameFormat {
            enum FrameFormat5 {
               FrameFormat5_SDH = 0;
               FrameFormat5_SONET = 1;
            };
            FrameFormat5 frame_format = 1 [json_name = "frame-format"];
         }
         FrameFormat frame_format = 13 [json_name = "frame-format"];
         message ProcessMode {
            enum ShieldMode {
               ShieldMode_DISABLED = 0;
               ShieldMode_ENABLED = 1;
            };
            ShieldMode shield_mode = 2 [json_name = "shield-mode"];
            enum FaultProcessModeStatus {
               FaultProcessModeStatus_RESET = 0;
               FaultProcessModeStatus_ISOLATE = 1;
            };
            FaultProcessModeStatus fault_process_mode_status = 3 [json_name = "fault-process-mode-status"];
            enum ProcessMode5 {
               ProcessMode5_RESET = 0;
               ProcessMode5_ISOLATE = 1;
            };
            ProcessMode5 process_mode = 4 [json_name = "process-mode"];
         }
         ProcessMode process_mode = 14 [json_name = "process-mode"];
         message EmSet {
            enum SingleMode {
               SingleMode_BELLX_1 = 0;
               SingleMode_BELLX_2 = 1;
               SingleMode_BELLX_3 = 2;
               SingleMode_BELLX_4 = 3;
               SingleMode_BELLX_5 = 4;
            };
            SingleMode single_mode = 1 [json_name = "single-mode"];
            enum UserlineMode {
               UserlineMode_X_2WIRE = 0;
               UserlineMode_X_4WIRE = 1;
            };
            UserlineMode userline_mode = 2 [json_name = "userline-mode"];
         }
         EmSet em_set = 15 [json_name = "em-set"];
         message ServiceSwitch {
            enum ServiceSwitchMode {
               ServiceSwitchMode_P2MP = 0;
               ServiceSwitchMode_TIMEX_DELAY = 1;
               ServiceSwitchMode_CAS = 2;
            };
            ServiceSwitchMode service_switch_mode = 1 [json_name = "service-switch-mode"];
         }
         ServiceSwitch service_switch = 16 [json_name = "service-switch"];
         message PanelSlots {
            string slot = 1 [json_name = "slot"];
         }
         PanelSlots panel_slots = 17 [json_name = "panel-slots"];
         message InvalidPorts {
            message Port {
               string position = 1 [json_name = "position"];
               string slotid = 2 [json_name = "slotid"];
            }
            repeated Port port = 1 [json_name = "port"];
         }
         InvalidPorts invalid_ports = 18 [json_name = "invalid-ports"];
      }
      repeated Card card = 1 [json_name = "card"];
   }
   Cards cards = 9 [json_name = "cards"];
   message CfCards {
      message CfCard {
         string position = 1 [json_name = "position"];
         string serial_number = 2 [json_name = "serial-number"];
         uint32 index = 3 [json_name = "index"];
         string card_type = 4 [json_name = "card-type"];
         uint32 memory_size = 5 [json_name = "memory-size"];
         uint32 memory_used = 6 [json_name = "memory-used"];
         uint32 memory_free = 7 [json_name = "memory-free"];
      }
      repeated CfCard cf_card = 1 [json_name = "cf-card"];
   }
   CfCards cf_cards = 10 [json_name = "cf-cards"];
   message Ports {
      message Port {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         enum AdminState {
            AdminState_INACTIVE = 0;
            AdminState_ACTIVE = 1;
            AdminState_NOTSUPPORTED = 2;
         };
         AdminState admin_state = 3 [json_name = "admin-state"];
         enum Type {
            Type_UNKNOWN = 0;
            Type_ETH = 1;
            Type_POS = 2;
            Type_CPOS = 3;
            Type_E1 = 4;
            Type_GE = 5;
            Type_X_10GE = 6;
            Type_GF = 7;
            Type_X_10GF = 8;
            Type_X_40GF = 9;
            Type_X_10GFCOM = 10;
            Type_X_40GFSPLIT = 11;
            Type_OTN = 12;
            Type_X_100GF = 13;
            Type_X_400GF = 14;
            Type_X_25GF = 15;
            Type_X_50GF = 16;
            Type_X_200GF = 17;
            Type_CELLULAR = 18;
            Type_FE = 19;
            Type_FLEXE = 20;
            Type_VSR = 21;
         };
         Type type = 4 [json_name = "type"];
         enum HardType {
            HardType_UNKNOWN = 0;
            HardType_ETHX_MGEX_PORT = 1;
            HardType_ETHX_10GFX_PORT = 2;
            HardType_ETHX_25GFX_PORT = 3;
            HardType_ETHX_40GFX_PORT = 4;
            HardType_ETHX_50GFX_PORT = 5;
            HardType_ETHX_100GFX_PORT = 6;
            HardType_ETHX_200GFX_PORT = 7;
            HardType_ETHX_400GFX_PORT = 8;
            HardType_ETHX_GEX_PORT = 9;
            HardType_ETHX_GFX_PORT = 10;
            HardType_CELLULARX_PORT = 11;
         };
         HardType hard_type = 5 [json_name = "hard-type"];
         enum LoopbackMode {
            LoopbackMode_NOLOOPBACK = 0;
            LoopbackMode_LOCALLOOPBACK = 1;
            LoopbackMode_REMOTELOOPBACK = 2;
            LoopbackMode_MACLOOPBACK = 3;
         };
         LoopbackMode loopback_mode = 6 [json_name = "loopback-mode"];
         uint32 enable_transmission_delay = 7 [json_name = "enable-transmission-delay"];
         string last_up_time = 8 [json_name = "last-up-time"];
         string last_down_time = 9 [json_name = "last-down-time"];
         enum MediumType {
            MediumType_NOTSUPPORTED = 0;
            MediumType_COPPER = 1;
            MediumType_FIBER = 2;
         };
         MediumType medium_type = 10 [json_name = "medium-type"];
         bool optical_equipped = 11 [json_name = "optical-equipped"];
         uint64 physical_bandwidth = 12 [json_name = "physical-bandwidth"];
         message Ethernet {
            enum Speed {
               Speed_X_10M = 0;
               Speed_X_100M = 1;
               Speed_X_1000M = 2;
               Speed_X_2500M = 5;
               Speed_X_10G = 6;
               Speed_X_40G = 7;
               Speed_X_100G = 8;
               Speed_AUTO = 9;
               Speed_X_1G = 10;
               Speed_X_2G = 11;
               Speed_X_3G = 12;
               Speed_X_4G = 13;
               Speed_X_1X_25G = 14;
               Speed_X_2X_5G = 15;
               Speed_X_3X_75G = 16;
               Speed_X_5G = 17;
               Speed_X_15G = 18;
               Speed_X_20G = 19;
               Speed_X_25G = 20;
               Speed_X_30G = 21;
               Speed_X_35G = 22;
               Speed_X_45G = 24;
               Speed_X_50G = 25;
               Speed_X_55G = 26;
               Speed_X_60G = 27;
               Speed_X_65G = 28;
               Speed_X_70G = 29;
               Speed_X_75G = 30;
               Speed_X_80G = 31;
               Speed_X_85G = 32;
               Speed_X_90G = 33;
               Speed_X_95G = 34;
               Speed_X_0G = 35;
               Speed_X_400G = 36;
               Speed_X_200G = 37;
            };
            Speed speed = 1 [json_name = "speed"];
            enum Duplex {
               Duplex_AUTO = 0;
               Duplex_HALF = 1;
               Duplex_FULL = 2;
            };
            Duplex duplex = 2 [json_name = "duplex"];
            enum Negotiation {
               Negotiation_DISABLED = 0;
               Negotiation_ENABLED = 1;
            };
            Negotiation negotiation = 3 [json_name = "negotiation"];
            enum NegotiationMode {
               NegotiationMode_SLAVE = 0;
               NegotiationMode_NA = 1;
               NegotiationMode_AUTO = 2;
               NegotiationMode_MASTER = 3;
            };
            NegotiationMode negotiation_mode = 4 [json_name = "negotiation-mode"];
            uint32 down_hold_time = 5 [json_name = "down-hold-time"];
            uint32 up_hold_time = 6 [json_name = "up-hold-time"];
            enum TransMode {
               TransMode_LANX_MODE = 0;
               TransMode_WANX_MODE = 1;
               TransMode_OTNX_MODE = 2;
            };
            TransMode trans_mode = 7 [json_name = "trans-mode"];
            enum SpeedSwitchMode {
               SpeedSwitchMode_MANUAL = 0;
               SpeedSwitchMode_AUTO = 1;
            };
            SpeedSwitchMode speed_switch_mode = 8 [json_name = "speed-switch-mode"];
            enum BitError {
               BitError_CRC = 0;
               BitError_PREFEC = 1;
            };
            BitError bit_error = 9 [json_name = "bit-error"];
            uint32 trigger_time = 10 [json_name = "trigger-time"];
            enum TriggerTimeType {
               TriggerTimeType_SECOND = 0;
               TriggerTimeType_X_200MS = 1;
            };
            TriggerTimeType trigger_time_type = 11 [json_name = "trigger-time-type"];
            enum TxPowerCfgType {
               TxPowerCfgType_TXX_POWERX_TARGET = 0;
               TxPowerCfgType_ATTENUATION = 1;
            };
            TxPowerCfgType tx_power_cfg_type = 12 [json_name = "tx-power-cfg-type"];
            int32 tx_power_target_value = 13 [json_name = "tx-power-target-value"];
            enum FecMode {
               FecMode_NONE = 0;
               FecMode_STANDARD = 1;
               FecMode_ENHANCED = 2;
               FecMode_ENHANCEDX_IX_7 = 3;
               FecMode_ENHANCEDX_IX_4 = 4;
               FecMode_LHAULX_SD = 5;
               FecMode_ENHANCEDX_PID = 8;
               FecMode_LHAULX_SDX_PID = 9;
            };
            FecMode fec_mode = 14 [json_name = "fec-mode"];
            enum EthFecMode {
               EthFecMode_DISABLE = 0;
               EthFecMode_STANDARD = 1;
               EthFecMode_NONE = 2;
            };
            EthFecMode eth_fec_mode = 15 [json_name = "eth-fec-mode"];
            uint32 fec_pre_alm_thrc = 16 [json_name = "fec-pre-alm-thrc"];
            uint32 fec_pre_alm_thrp = 17 [json_name = "fec-pre-alm-thrp"];
            uint32 fec_pre_rsum_thrc = 18 [json_name = "fec-pre-rsum-thrc"];
            uint32 fec_pre_rsum_thrp = 19 [json_name = "fec-pre-rsum-thrp"];
            uint32 jumbo_frame = 20 [json_name = "jumbo-frame"];
            enum Flowctl {
               Flowctl_ALLX_DISABLED = 0;
               Flowctl_RECEIVEX_ENABLED = 1;
               Flowctl_SENDX_ENABLED = 2;
               Flowctl_ALLX_ENABLED = 3;
               Flowctl_DEFAULTX_CONFIG = 9;
            };
            Flowctl flowctl = 21 [json_name = "flowctl"];
            enum GfMediaType {
               GfMediaType_AUTO = 0;
               GfMediaType_FIBER1000 = 1;
               GfMediaType_FIBER100 = 2;
               GfMediaType_COPPER = 3;
            };
            GfMediaType gf_media_type = 22 [json_name = "gf-media-type"];
            enum HoldUp {
               HoldUp_DISABLED = 0;
               HoldUp_ENABLED = 1;
            };
            HoldUp hold_up = 23 [json_name = "hold-up"];
            enum Txipg {
               Txipg_SHRINK = 0;
               Txipg_NONX_SHRINK = 1;
            };
            Txipg txipg = 24 [json_name = "txipg"];
            enum SwitchSpeed {
               SwitchSpeed_UNDO = 0;
               SwitchSpeed_X_1G = 1;
               SwitchSpeed_X_10G = 10;
               SwitchSpeed_X_25G = 25;
            };
            SwitchSpeed switch_speed = 25 [json_name = "switch-speed"];
            enum PromiscuousMode {
               PromiscuousMode_OFF = 0;
               PromiscuousMode_ON = 1;
            };
            PromiscuousMode promiscuous_mode = 26 [json_name = "promiscuous-mode"];
            enum FlexphySpeed {
               INVALID_ENUM_VALUE_FlexphySpeed = 0;
               FlexphySpeed_X_50GE = 50;
               FlexphySpeed_X_100GE = 100;
            };
            FlexphySpeed flexphy_speed = 27 [json_name = "flexphy-speed"];
            uint32 mru = 28 [json_name = "mru"];
            uint32 inter_packet_gap = 29 [json_name = "inter-packet-gap"];
            enum MacItfMode {
               MacItfMode_SGMII = 0;
               MacItfMode_X_1000BASEX_XX_AUTOX_NEGOTIATION = 1;
               MacItfMode_X_1000BASEX_XX_NOTX_AUTOX_NEGOTIATION = 2;
            };
            MacItfMode mac_itf_mode = 30 [json_name = "mac-itf-mode"];
            uint32 attenuation = 31 [json_name = "attenuation"];
            enum RemoteFault {
               RemoteFault_DISABLE = 0;
               RemoteFault_ENABLE = 1;
            };
            RemoteFault remote_fault = 32 [json_name = "remote-fault"];
            enum LosTrapDownHold {
               LosTrapDownHold_ENABLE = 0;
               LosTrapDownHold_DISABLE = 1;
            };
            LosTrapDownHold los_trap_down_hold = 33 [json_name = "los-trap-down-hold"];
            enum DownFilter {
               DownFilter_DISABLE = 0;
               DownFilter_ENABLE = 1;
            };
            DownFilter down_filter = 34 [json_name = "down-filter"];
            enum LocalFaultStatus {
               LocalFaultStatus_NORMAL = 0;
               LocalFaultStatus_FAULT = 1;
            };
            LocalFaultStatus local_fault_status = 35 [json_name = "local-fault-status"];
            enum RomoteFaultStatus {
               RomoteFaultStatus_NORMAL = 0;
               RomoteFaultStatus_FAULT = 1;
            };
            RomoteFaultStatus romote_fault_status = 36 [json_name = "romote-fault-status"];
            message EthWanAttr {
               enum FrameFormat {
                  FrameFormat_SDH = 0;
                  FrameFormat_SONET = 1;
               };
               FrameFormat frame_format = 1 [json_name = "frame-format"];
               enum J0Mode {
                  INVALID_ENUM_VALUE_J0Mode = 0;
                  J0Mode_X_1BYTE = 1;
                  J0Mode_X_16BYTE = 16;
                  J0Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               };
               J0Mode j0_mode = 2 [json_name = "j0-mode"];
               uint32 j0_value = 3 [json_name = "j0-value"];
               string j0_trace = 4 [json_name = "j0-trace"];
               enum J1Mode {
                  INVALID_ENUM_VALUE_J1Mode = 0;
                  J1Mode_X_1BYTE = 1;
                  J1Mode_X_16BYTE = 16;
                  J1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               };
               J1Mode j1_mode = 5 [json_name = "j1-mode"];
               uint32 j1_value = 6 [json_name = "j1-value"];
               string j1_trace = 7 [json_name = "j1-trace"];
               uint32 c2 = 8 [json_name = "c2"];
               enum Clock {
                  Clock_MASTER = 0;
                  Clock_SLAVE = 1;
               };
               Clock clock = 9 [json_name = "clock"];
               enum Scramble {
                  Scramble_DISABLED = 0;
                  Scramble_ENABLED = 3;
               };
               Scramble scramble = 10 [json_name = "scramble"];
               uint32 rx_j0_value = 11 [json_name = "rx-j0-value"];
               string rx_j0_trace = 12 [json_name = "rx-j0-trace"];
               uint32 rx_j1_value = 13 [json_name = "rx-j1-value"];
               string rx_j1_trace = 14 [json_name = "rx-j1-trace"];
               uint32 rx_c2 = 15 [json_name = "rx-c2"];
               enum RxJ0Mode {
                  INVALID_ENUM_VALUE_RxJ0Mode = 0;
                  RxJ0Mode_X_1BYTE = 1;
                  RxJ0Mode_X_16BYTE = 16;
                  RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
                  RxJ0Mode_PEER = 128;
               };
               RxJ0Mode rx_j0_mode = 16 [json_name = "rx-j0-mode"];
               enum RxJ1Mode {
                  INVALID_ENUM_VALUE_RxJ1Mode = 0;
                  RxJ1Mode_X_1BYTE = 1;
                  RxJ1Mode_X_16BYTE = 16;
                  RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
                  RxJ1Mode_PEER = 128;
               };
               RxJ1Mode rx_j1_mode = 17 [json_name = "rx-j1-mode"];
               string b1tca = 18 [json_name = "b1tca"];
               string b2tca = 19 [json_name = "b2tca"];
               string b3tca = 20 [json_name = "b3tca"];
            }
            EthWanAttr eth_wan_attr = 37 [json_name = "eth-wan-attr"];
            message FecErrorStatistics {
               uint64 bit0_error_count = 1 [json_name = "bit0-error-count"];
               uint64 bit1_error_count = 2 [json_name = "bit1-error-count"];
               uint64 bit0_and_bit1_error_count = 3 [json_name = "bit0-and-bit1-error-count"];
               uint64 symbol_error_count = 4 [json_name = "symbol-error-count"];
               uint64 uncorrectable_error_count = 5 [json_name = "uncorrectable-error-count"];
               string pre_fec = 6 [json_name = "pre-fec"];
            }
            FecErrorStatistics fec_error_statistics = 38 [json_name = "fec-error-statistics"];
            enum DuplexAuto {
               DuplexAuto_AUTO = 0;
               DuplexAuto_HALF = 1;
               DuplexAuto_FULL = 2;
            };
            DuplexAuto duplex_auto = 39 [json_name = "duplex-auto"];
            message NegotiationCompatibleMode {
               enum NegotiationCompatibleMode6 {
                  NegotiationCompatibleMode6_ENABLE = 0;
                  NegotiationCompatibleMode6_DISABLE = 1;
               };
               NegotiationCompatibleMode6 negotiation_compatible_mode = 1 [json_name = "negotiation-compatible-mode"];
               int32 precursor = 2 [json_name = "precursor"];
               int32 postcursor = 3 [json_name = "postcursor"];
            }
            NegotiationCompatibleMode negotiation_compatible_mode = 40 [json_name = "negotiation-compatible-mode"];
            enum ComboMode {
               INVALID_ENUM_VALUE_ComboMode = 0;
               ComboMode_AUTO = 1;
               ComboMode_COPPER = 2;
               ComboMode_FIBER = 3;
            };
            ComboMode combo_mode = 41 [json_name = "combo-mode"];
            string peer_identity = 42 [json_name = "peer-identity"];
            enum FaultDetect {
               FaultDetect_ENABLE = 0;
               FaultDetect_DISABLE = 1;
            };
            FaultDetect fault_detect = 43 [json_name = "fault-detect"];
            uint32 inter_frame_gap = 44 [json_name = "inter-frame-gap"];
            enum StatisticsIncludeInterframe {
               StatisticsIncludeInterframe_ENABLE = 0;
               StatisticsIncludeInterframe_DISABLE = 1;
            };
            StatisticsIncludeInterframe statistics_include_interframe = 45 [json_name = "statistics-include-interframe"];
            enum LinkFlapProtection {
               LinkFlapProtection_ENABLE = 0;
               LinkFlapProtection_DISABLE = 1;
            };
            LinkFlapProtection link_flap_protection = 46 [json_name = "link-flap-protection"];
            uint32 link_flap_interval = 47 [json_name = "link-flap-interval"];
            uint32 link_flap_threshold = 48 [json_name = "link-flap-threshold"];
            uint32 link_flap_second_interval = 49 [json_name = "link-flap-second-interval"];
            uint32 link_flap_second_threshold = 50 [json_name = "link-flap-second-threshold"];
            uint32 up_delay = 51 [json_name = "up-delay"];
            uint32 flow_change_alarm_interval = 52 [json_name = "flow-change-alarm-interval"];
            uint32 flow_change_alarm_rx_threshold = 53 [json_name = "flow-change-alarm-rx-threshold"];
            uint32 flow_change_alarm_tx_threshold = 54 [json_name = "flow-change-alarm-tx-threshold"];
            uint32 flow_change_alarm_start_bandwidth = 55 [json_name = "flow-change-alarm-start-bandwidth"];
            enum SpeedAutos {
               SpeedAutos_DEFAULT = 0;
               SpeedAutos_X_1000M = 4;
               SpeedAutos_X_100M = 18;
               SpeedAutos_X_10M = 8193;
            };
            repeated SpeedAutos speed_autos = 56 [json_name = "speed-autos"];
            message LocalLoopbackResult {
               enum Result {
                  Result_SUCCESS = 0;
                  Result_TESTX_ERROR = 1;
                  Result_NOX_TEST = 2;
                  Result_TESTX_CLASHES = 3;
                  Result_TESTX_NOX_SUPPORT = 4;
               };
               Result result = 1 [json_name = "result"];
               string last_test_time = 2 [json_name = "last-test-time"];
               enum LinkStatus {
                  LinkStatus_DOWN = 0;
                  LinkStatus_UP = 1;
               };
               LinkStatus link_status = 3 [json_name = "link-status"];
               bool crc_error_packet = 4 [json_name = "crc-error-packet"];
               bool other_error_packet = 5 [json_name = "other-error-packet"];
            }
            LocalLoopbackResult local_loopback_result = 57 [json_name = "local-loopback-result"];
            string b1tca = 58 [json_name = "b1tca"];
            string b2tca = 59 [json_name = "b2tca"];
            string b3tca = 60 [json_name = "b3tca"];
            enum Combo {
               INVALID_ENUM_VALUE_Combo = 0;
               Combo_AUTO = 1;
               Combo_COPPER = 2;
               Combo_FIBER = 3;
            };
            Combo combo = 61 [json_name = "combo"];
            enum Eee {
               Eee_ENABLE = 0;
               Eee_DISABLE = 1;
            };
            Eee eee = 62 [json_name = "eee"];
         }
         Ethernet ethernet = 13 [json_name = "ethernet"];
         message Laser {
            enum AutoShutEnable {
               AutoShutEnable_DISABLE = 0;
               AutoShutEnable_ENABLE = 1;
            };
            AutoShutEnable auto_shut_enable = 1 [json_name = "auto-shut-enable"];
            uint32 open_time = 2 [json_name = "open-time"];
            uint32 close_time = 3 [json_name = "close-time"];
            enum Status {
               Status_ON = 0;
               Status_OFF = 1;
               Status_OFFLINE = 2;
            };
            Status status = 4 [json_name = "status"];
         }
         Laser laser = 14 [json_name = "laser"];
         message OpticalModule {
            string vendor_name = 1 [json_name = "vendor-name"];
            string vendor_pn = 2 [json_name = "vendor-pn"];
            string trans_bw = 3 [json_name = "trans-bw"];
            enum TransMode {
               TransMode_UNKNOWN = 0;
               TransMode_SINGLEX_MODE = 1;
               TransMode_MULTIX_MODE = 2;
               TransMode_COPPERX_MODE = 3;
            };
            TransMode trans_mode = 4 [json_name = "trans-mode"];
            bool hot_plug = 5 [json_name = "hot-plug"];
            enum Type {
               Type_UNKNOWN = 0;
               Type_SC = 1;
               Type_GBIC = 2;
               Type_SFP = 3;
               Type_ESFP = 4;
               Type_COPPER = 5;
               Type_XFP = 6;
               Type_XENPAK = 7;
               Type_TRANSPONDER = 8;
               Type_CFP = 9;
               Type_SMB = 10;
               Type_SFPX_PLUS = 11;
               Type_CXP = 12;
               Type_QSFP = 13;
               Type_QSFPX_PLUS = 14;
               Type_CFP2 = 15;
               Type_DWDMSFP = 16;
               Type_MSA100GLH = 17;
               Type_GPS = 18;
               Type_CSFP = 19;
               Type_CFP4 = 20;
               Type_QSFP28 = 21;
               Type_SFPX_ANDX_SFPX_PLUS = 22;
               Type_CFP8 = 23;
               Type_SFP28 = 24;
               Type_QSFPX_DD = 25;
               Type_GPONSFP = 26;
               Type_CFP2DCO = 27;
               Type_SFP56 = 28;
               Type_QSFP56 = 29;
               Type_OA = 30;
            };
            Type type = 6 [json_name = "type"];
            enum FiberType {
               FiberType_UNKNOWN = 0;
               FiberType_SC = 1;
               FiberType_STYLEX_1X_COPPERX_CONNECTOR = 2;
               FiberType_STYLEX_2X_COPPERX_CONNECTOR = 3;
               FiberType_BNCX_TNC = 4;
               FiberType_COAXIALX_HEADERS = 5;
               FiberType_FIBERX_JACK = 6;
               FiberType_LC = 7;
               FiberType_MTX_RJ = 8;
               FiberType_MU = 9;
               FiberType_SG = 10;
               FiberType_OPTICALX_PIGTAIL = 11;
               FiberType_HSSDCII = 12;
               FiberType_COPPERX_PIGTAIL = 13;
               FiberType_MPO = 14;
               FiberType_NA = 15;
               FiberType_RJ45 = 16;
               FiberType_MPOX_1X12 = 17;
               FiberType_MPOX_2X16 = 18;
               FiberType_NOX_SEPARABLE = 19;
               FiberType_MXCX_2X16 = 20;
               FiberType_CSX_OPTICAL = 21;
               FiberType_SNX_OPTICAL = 22;
               FiberType_MPOX_2X12 = 23;
               FiberType_MPOX_1X16 = 24;
               FiberType_ANGLEDX_LC = 25;
            };
            FiberType fiber_type = 7 [json_name = "fiber-type"];
            string wavelength = 8 [json_name = "wavelength"];
            string transmission_distance = 9 [json_name = "transmission-distance"];
            string tx_power = 10 [json_name = "tx-power"];
            string rx_power = 11 [json_name = "rx-power"];
            string rx_high_warn_power = 12 [json_name = "rx-high-warn-power"];
            string rx_low_warn_power = 13 [json_name = "rx-low-warn-power"];
            string tx_high_warn_power = 14 [json_name = "tx-high-warn-power"];
            string tx_low_warn_power = 15 [json_name = "tx-low-warn-power"];
            string rx_high_alarm_power = 16 [json_name = "rx-high-alarm-power"];
            string rx_low_alarm_power = 17 [json_name = "rx-low-alarm-power"];
            string tx_high_alarm_power = 18 [json_name = "tx-high-alarm-power"];
            string tx_low_alarm_power = 19 [json_name = "tx-low-alarm-power"];
            enum Tunable {
               INVALID_ENUM_VALUE_Tunable = 0;
               Tunable_NOTX_SUPPORTED = 1;
               Tunable_NOTX_TUNABLE = 2;
               Tunable_TUNABLE = 3;
               Tunable_SUPPORTED = 4;
            };
            Tunable tunable = 20 [json_name = "tunable"];
            string chromatic_dispersion = 21 [json_name = "chromatic-dispersion"];
            string polarization_mode_dispersion = 22 [json_name = "polarization-mode-dispersion"];
            enum DirectionType {
               INVALID_ENUM_VALUE_DirectionType = 0;
               DirectionType_NOTX_SUPPORTED = 1;
               DirectionType_DUALX_FIBERX_BIDIRECTION = 2;
               DirectionType_SINGLEX_FIBERX_BIDIRECTIONAL = 3;
               DirectionType_DUALX_FIBERX_TWOX_PORTX_BIDIRECTIONAL = 4;
            };
            DirectionType direction_type = 23 [json_name = "direction-type"];
            string total_rx_power = 24 [json_name = "total-rx-power"];
            string total_rx_high_warn = 25 [json_name = "total-rx-high-warn"];
            string total_rx_low_warn = 26 [json_name = "total-rx-low-warn"];
            string total_rx_high_alarm = 27 [json_name = "total-rx-high-alarm"];
            string total_rx_low_alarm = 28 [json_name = "total-rx-low-alarm"];
            int32 bias = 29 [json_name = "bias"];
            int32 voltage = 30 [json_name = "voltage"];
            int32 temperature = 31 [json_name = "temperature"];
            string vendor_oui = 32 [json_name = "vendor-oui"];
            string vendor_rev = 33 [json_name = "vendor-rev"];
            string gpon_sn = 34 [json_name = "gpon-sn"];
            message Channels {
               message Channel {
                  uint32 number7 = 1 [json_name = "number"];
                  string tx_power = 2 [json_name = "tx-power"];
                  string rx_power = 3 [json_name = "rx-power"];
                  string wavelength = 4 [json_name = "wavelength"];
                  string bias = 6 [json_name = "bias"];
               }
               repeated Channel channel = 1 [json_name = "channel"];
            }
            Channels channels = 35 [json_name = "channels"];
            bool rx_high_power_warn_en = 36 [json_name = "rx-high-power-warn-en"];
            bool rx_low_power_warn_en = 37 [json_name = "rx-low-power-warn-en"];
            bool tx_high_power_warn_en = 38 [json_name = "tx-high-power-warn-en"];
            bool tx_low_power_warn_en = 39 [json_name = "tx-low-power-warn-en"];
            bool volt_high_warn_en = 40 [json_name = "volt-high-warn-en"];
            bool volt_low_warn_en = 41 [json_name = "volt-low-warn-en"];
            enum WaveModulationMode {
               WaveModulationMode_DQPSK = 0;
               WaveModulationMode_QPSK = 1;
            };
            WaveModulationMode wave_modulation_mode = 42 [json_name = "wave-modulation-mode"];
            enum WavelengthChannelNumber {
               WavelengthChannelNumber_X_196X_10THZX_1528X_773NM = 0;
               WavelengthChannelNumber_X_196X_05THZX_1529X_163NM = 1;
               WavelengthChannelNumber_X_196X_00THZX_1529X_553NM = 2;
               WavelengthChannelNumber_X_195X_95THZX_1529X_944NM = 3;
               WavelengthChannelNumber_X_195X_90THZX_1530X_334NM = 4;
               WavelengthChannelNumber_X_195X_85THZX_1530X_725NM = 5;
               WavelengthChannelNumber_X_195X_80THZX_1531X_116NM = 6;
               WavelengthChannelNumber_X_195X_75THZX_1531X_507NM = 7;
               WavelengthChannelNumber_X_195X_70THZX_1531X_898NM = 8;
               WavelengthChannelNumber_X_195X_65THZX_1532X_290NM = 9;
               WavelengthChannelNumber_X_195X_60THZX_1532X_681NM = 10;
               WavelengthChannelNumber_X_195X_55THZX_1533X_073NM = 11;
               WavelengthChannelNumber_X_195X_50THZX_1533X_465NM = 12;
               WavelengthChannelNumber_X_195X_45THZX_1533X_858NM = 13;
               WavelengthChannelNumber_X_195X_40THZX_1534X_250NM = 14;
               WavelengthChannelNumber_X_195X_35THZX_1534X_643NM = 15;
               WavelengthChannelNumber_X_195X_30THZX_1535X_036NM = 16;
               WavelengthChannelNumber_X_195X_25THZX_1535X_429NM = 17;
               WavelengthChannelNumber_X_195X_20THZX_1535X_822NM = 18;
               WavelengthChannelNumber_X_195X_15THZX_1536X_216NM = 19;
               WavelengthChannelNumber_X_195X_10THZX_1536X_609NM = 20;
               WavelengthChannelNumber_X_195X_05THZX_1537X_003NM = 21;
               WavelengthChannelNumber_X_195X_00THZX_1537X_397NM = 22;
               WavelengthChannelNumber_X_194X_95THZX_1537X_792NM = 23;
               WavelengthChannelNumber_X_194X_90THZX_1538X_186NM = 24;
               WavelengthChannelNumber_X_194X_85THZX_1538X_581NM = 25;
               WavelengthChannelNumber_X_194X_80THZX_1538X_976NM = 26;
               WavelengthChannelNumber_X_194X_75THZX_1539X_371NM = 27;
               WavelengthChannelNumber_X_194X_70THZX_1539X_766NM = 28;
               WavelengthChannelNumber_X_194X_65THZX_1540X_162NM = 29;
               WavelengthChannelNumber_X_194X_60THZX_1540X_557NM = 30;
               WavelengthChannelNumber_X_194X_55THZX_1540X_953NM = 31;
               WavelengthChannelNumber_X_194X_50THZX_1541X_349NM = 32;
               WavelengthChannelNumber_X_194X_45THZX_1541X_746NM = 33;
               WavelengthChannelNumber_X_194X_40THZX_1542X_142NM = 34;
               WavelengthChannelNumber_X_194X_35THZX_1542X_539NM = 35;
               WavelengthChannelNumber_X_194X_30THZX_1542X_936NM = 36;
               WavelengthChannelNumber_X_194X_25THZX_1543X_333NM = 37;
               WavelengthChannelNumber_X_194X_20THZX_1543X_730NM = 38;
               WavelengthChannelNumber_X_194X_15THZX_1544X_128NM = 39;
               WavelengthChannelNumber_X_194X_10THZX_1544X_526NM = 40;
               WavelengthChannelNumber_X_194X_05THZX_1544X_924NM = 41;
               WavelengthChannelNumber_X_194X_00THZX_1545X_322NM = 42;
               WavelengthChannelNumber_X_193X_95THZX_1545X_720NM = 43;
               WavelengthChannelNumber_X_193X_90THZX_1546X_119NM = 44;
               WavelengthChannelNumber_X_193X_85THZX_1546X_518NM = 45;
               WavelengthChannelNumber_X_193X_80THZX_1546X_917NM = 46;
               WavelengthChannelNumber_X_193X_75THZX_1547X_316NM = 47;
               WavelengthChannelNumber_X_193X_70THZX_1547X_715NM = 48;
               WavelengthChannelNumber_X_193X_65THZX_1548X_115NM = 49;
               WavelengthChannelNumber_X_193X_60THZX_1548X_515NM = 50;
               WavelengthChannelNumber_X_193X_55THZX_1548X_915NM = 51;
               WavelengthChannelNumber_X_193X_50THZX_1549X_315NM = 52;
               WavelengthChannelNumber_X_193X_45THZX_1549X_715NM = 53;
               WavelengthChannelNumber_X_193X_40THZX_1550X_116NM = 54;
               WavelengthChannelNumber_X_193X_35THZX_1550X_517NM = 55;
               WavelengthChannelNumber_X_193X_30THZX_1550X_918NM = 56;
               WavelengthChannelNumber_X_193X_25THZX_1551X_319NM = 57;
               WavelengthChannelNumber_X_193X_20THZX_1551X_721NM = 58;
               WavelengthChannelNumber_X_193X_15THZX_1552X_122NM = 59;
               WavelengthChannelNumber_X_193X_10THZX_1552X_524NM = 60;
               WavelengthChannelNumber_X_193X_05THZX_1552X_926NM = 61;
               WavelengthChannelNumber_X_193X_00THZX_1553X_329NM = 62;
               WavelengthChannelNumber_X_192X_95THZX_1553X_731NM = 63;
               WavelengthChannelNumber_X_192X_90THZX_1554X_134NM = 64;
               WavelengthChannelNumber_X_192X_85THZX_1554X_537NM = 65;
               WavelengthChannelNumber_X_192X_80THZX_1554X_940NM = 66;
               WavelengthChannelNumber_X_192X_75THZX_1555X_343NM = 67;
               WavelengthChannelNumber_X_192X_70THZX_1555X_747NM = 68;
               WavelengthChannelNumber_X_192X_65THZX_1556X_151NM = 69;
               WavelengthChannelNumber_X_192X_60THZX_1556X_555NM = 70;
               WavelengthChannelNumber_X_192X_55THZX_1556X_959NM = 71;
               WavelengthChannelNumber_X_192X_50THZX_1557X_363NM = 72;
               WavelengthChannelNumber_X_192X_45THZX_1557X_768NM = 73;
               WavelengthChannelNumber_X_192X_40THZX_1558X_173NM = 74;
               WavelengthChannelNumber_X_192X_35THZX_1558X_578NM = 75;
               WavelengthChannelNumber_X_192X_30THZX_1558X_983NM = 76;
               WavelengthChannelNumber_X_192X_25THZX_1559X_389NM = 77;
               WavelengthChannelNumber_X_192X_20THZX_1559X_794NM = 78;
               WavelengthChannelNumber_X_192X_15THZX_1560X_200NM = 79;
               WavelengthChannelNumber_X_192X_10THZX_1560X_606NM = 80;
               WavelengthChannelNumber_X_192X_05THZX_1561X_013NM = 81;
               WavelengthChannelNumber_X_192X_00THZX_1561X_419NM = 82;
               WavelengthChannelNumber_X_191X_95THZX_1561X_826NM = 83;
               WavelengthChannelNumber_X_191X_90THZX_1562X_233NM = 84;
               WavelengthChannelNumber_X_191X_85THZX_1562X_640NM = 85;
               WavelengthChannelNumber_X_191X_80THZX_1563X_047NM = 86;
               WavelengthChannelNumber_X_191X_75THZX_1563X_455NM = 87;
               WavelengthChannelNumber_X_191X_70THZX_1563X_863NM = 88;
               WavelengthChannelNumber_X_191X_65THZX_1564X_271NM = 89;
               WavelengthChannelNumber_X_191X_60THZX_1564X_679NM = 90;
               WavelengthChannelNumber_X_191X_55THZX_1565X_087NM = 91;
               WavelengthChannelNumber_X_191X_50THZX_1565X_496NM = 92;
               WavelengthChannelNumber_X_191X_45THZX_1565X_905NM = 93;
               WavelengthChannelNumber_X_191X_40THZX_1566X_314NM = 94;
               WavelengthChannelNumber_X_191X_35THZX_1566X_723NM = 95;
               WavelengthChannelNumber_X_191X_30THZX_1567X_133NM = 96;
               WavelengthChannelNumber_X_191X_25THZX_1567X_542NM = 97;
               WavelengthChannelNumber_X_191X_20THZX_1567X_952NM = 98;
               WavelengthChannelNumber_X_191X_15THZX_1568X_362NM = 99;
            };
            WavelengthChannelNumber wavelength_channel_number = 43 [json_name = "wavelength-channel-number"];
            uint32 tunable_wavelength = 44 [json_name = "tunable-wavelength"];
            uint32 tunable_frequency = 45 [json_name = "tunable-frequency"];
            uint32 signal_dqpsk_tx = 46 [json_name = "signal-dqpsk-tx"];
            uint32 signal_dqpsk_rx = 47 [json_name = "signal-dqpsk-rx"];
            message WaveMapping {
               message WaveMap {
                  uint32 index = 1 [json_name = "index"];
                  string frequency = 2 [json_name = "frequency"];
                  string wavelength = 3 [json_name = "wavelength"];
               }
               repeated WaveMap wave_map = 1 [json_name = "wave-map"];
            }
            WaveMapping wave_mapping = 48 [json_name = "wave-mapping"];
            enum WavelengthChannelNumberStatus {
               WavelengthChannelNumberStatus_X_196X_10THZX_1528X_773NM = 0;
               WavelengthChannelNumberStatus_X_196X_05THZX_1529X_163NM = 1;
               WavelengthChannelNumberStatus_X_196X_00THZX_1529X_553NM = 2;
               WavelengthChannelNumberStatus_X_195X_95THZX_1529X_944NM = 3;
               WavelengthChannelNumberStatus_X_195X_90THZX_1530X_334NM = 4;
               WavelengthChannelNumberStatus_X_195X_85THZX_1530X_725NM = 5;
               WavelengthChannelNumberStatus_X_195X_80THZX_1531X_116NM = 6;
               WavelengthChannelNumberStatus_X_195X_75THZX_1531X_507NM = 7;
               WavelengthChannelNumberStatus_X_195X_70THZX_1531X_898NM = 8;
               WavelengthChannelNumberStatus_X_195X_65THZX_1532X_290NM = 9;
               WavelengthChannelNumberStatus_X_195X_60THZX_1532X_681NM = 10;
               WavelengthChannelNumberStatus_X_195X_55THZX_1533X_073NM = 11;
               WavelengthChannelNumberStatus_X_195X_50THZX_1533X_465NM = 12;
               WavelengthChannelNumberStatus_X_195X_45THZX_1533X_858NM = 13;
               WavelengthChannelNumberStatus_X_195X_40THZX_1534X_250NM = 14;
               WavelengthChannelNumberStatus_X_195X_35THZX_1534X_643NM = 15;
               WavelengthChannelNumberStatus_X_195X_30THZX_1535X_036NM = 16;
               WavelengthChannelNumberStatus_X_195X_25THZX_1535X_429NM = 17;
               WavelengthChannelNumberStatus_X_195X_20THZX_1535X_822NM = 18;
               WavelengthChannelNumberStatus_X_195X_15THZX_1536X_216NM = 19;
               WavelengthChannelNumberStatus_X_195X_10THZX_1536X_609NM = 20;
               WavelengthChannelNumberStatus_X_195X_05THZX_1537X_003NM = 21;
               WavelengthChannelNumberStatus_X_195X_00THZX_1537X_397NM = 22;
               WavelengthChannelNumberStatus_X_194X_95THZX_1537X_792NM = 23;
               WavelengthChannelNumberStatus_X_194X_90THZX_1538X_186NM = 24;
               WavelengthChannelNumberStatus_X_194X_85THZX_1538X_581NM = 25;
               WavelengthChannelNumberStatus_X_194X_80THZX_1538X_976NM = 26;
               WavelengthChannelNumberStatus_X_194X_75THZX_1539X_371NM = 27;
               WavelengthChannelNumberStatus_X_194X_70THZX_1539X_766NM = 28;
               WavelengthChannelNumberStatus_X_194X_65THZX_1540X_162NM = 29;
               WavelengthChannelNumberStatus_X_194X_60THZX_1540X_557NM = 30;
               WavelengthChannelNumberStatus_X_194X_55THZX_1540X_953NM = 31;
               WavelengthChannelNumberStatus_X_194X_50THZX_1541X_349NM = 32;
               WavelengthChannelNumberStatus_X_194X_45THZX_1541X_746NM = 33;
               WavelengthChannelNumberStatus_X_194X_40THZX_1542X_142NM = 34;
               WavelengthChannelNumberStatus_X_194X_35THZX_1542X_539NM = 35;
               WavelengthChannelNumberStatus_X_194X_30THZX_1542X_936NM = 36;
               WavelengthChannelNumberStatus_X_194X_25THZX_1543X_333NM = 37;
               WavelengthChannelNumberStatus_X_194X_20THZX_1543X_730NM = 38;
               WavelengthChannelNumberStatus_X_194X_15THZX_1544X_128NM = 39;
               WavelengthChannelNumberStatus_X_194X_10THZX_1544X_526NM = 40;
               WavelengthChannelNumberStatus_X_194X_05THZX_1544X_924NM = 41;
               WavelengthChannelNumberStatus_X_194X_00THZX_1545X_322NM = 42;
               WavelengthChannelNumberStatus_X_193X_95THZX_1545X_720NM = 43;
               WavelengthChannelNumberStatus_X_193X_90THZX_1546X_119NM = 44;
               WavelengthChannelNumberStatus_X_193X_85THZX_1546X_518NM = 45;
               WavelengthChannelNumberStatus_X_193X_80THZX_1546X_917NM = 46;
               WavelengthChannelNumberStatus_X_193X_75THZX_1547X_316NM = 47;
               WavelengthChannelNumberStatus_X_193X_70THZX_1547X_715NM = 48;
               WavelengthChannelNumberStatus_X_193X_65THZX_1548X_115NM = 49;
               WavelengthChannelNumberStatus_X_193X_60THZX_1548X_515NM = 50;
               WavelengthChannelNumberStatus_X_193X_55THZX_1548X_915NM = 51;
               WavelengthChannelNumberStatus_X_193X_50THZX_1549X_315NM = 52;
               WavelengthChannelNumberStatus_X_193X_45THZX_1549X_715NM = 53;
               WavelengthChannelNumberStatus_X_193X_40THZX_1550X_116NM = 54;
               WavelengthChannelNumberStatus_X_193X_35THZX_1550X_517NM = 55;
               WavelengthChannelNumberStatus_X_193X_30THZX_1550X_918NM = 56;
               WavelengthChannelNumberStatus_X_193X_25THZX_1551X_319NM = 57;
               WavelengthChannelNumberStatus_X_193X_20THZX_1551X_721NM = 58;
               WavelengthChannelNumberStatus_X_193X_15THZX_1552X_122NM = 59;
               WavelengthChannelNumberStatus_X_193X_10THZX_1552X_524NM = 60;
               WavelengthChannelNumberStatus_X_193X_05THZX_1552X_926NM = 61;
               WavelengthChannelNumberStatus_X_193X_00THZX_1553X_329NM = 62;
               WavelengthChannelNumberStatus_X_192X_95THZX_1553X_731NM = 63;
               WavelengthChannelNumberStatus_X_192X_90THZX_1554X_134NM = 64;
               WavelengthChannelNumberStatus_X_192X_85THZX_1554X_537NM = 65;
               WavelengthChannelNumberStatus_X_192X_80THZX_1554X_940NM = 66;
               WavelengthChannelNumberStatus_X_192X_75THZX_1555X_343NM = 67;
               WavelengthChannelNumberStatus_X_192X_70THZX_1555X_747NM = 68;
               WavelengthChannelNumberStatus_X_192X_65THZX_1556X_151NM = 69;
               WavelengthChannelNumberStatus_X_192X_60THZX_1556X_555NM = 70;
               WavelengthChannelNumberStatus_X_192X_55THZX_1556X_959NM = 71;
               WavelengthChannelNumberStatus_X_192X_50THZX_1557X_363NM = 72;
               WavelengthChannelNumberStatus_X_192X_45THZX_1557X_768NM = 73;
               WavelengthChannelNumberStatus_X_192X_40THZX_1558X_173NM = 74;
               WavelengthChannelNumberStatus_X_192X_35THZX_1558X_578NM = 75;
               WavelengthChannelNumberStatus_X_192X_30THZX_1558X_983NM = 76;
               WavelengthChannelNumberStatus_X_192X_25THZX_1559X_389NM = 77;
               WavelengthChannelNumberStatus_X_192X_20THZX_1559X_794NM = 78;
               WavelengthChannelNumberStatus_X_192X_15THZX_1560X_200NM = 79;
               WavelengthChannelNumberStatus_X_192X_10THZX_1560X_606NM = 80;
               WavelengthChannelNumberStatus_X_192X_05THZX_1561X_013NM = 81;
               WavelengthChannelNumberStatus_X_192X_00THZX_1561X_419NM = 82;
               WavelengthChannelNumberStatus_X_191X_95THZX_1561X_826NM = 83;
               WavelengthChannelNumberStatus_X_191X_90THZX_1562X_233NM = 84;
               WavelengthChannelNumberStatus_X_191X_85THZX_1562X_640NM = 85;
               WavelengthChannelNumberStatus_X_191X_80THZX_1563X_047NM = 86;
               WavelengthChannelNumberStatus_X_191X_75THZX_1563X_455NM = 87;
               WavelengthChannelNumberStatus_X_191X_70THZX_1563X_863NM = 88;
               WavelengthChannelNumberStatus_X_191X_65THZX_1564X_271NM = 89;
               WavelengthChannelNumberStatus_X_191X_60THZX_1564X_679NM = 90;
               WavelengthChannelNumberStatus_X_191X_55THZX_1565X_087NM = 91;
               WavelengthChannelNumberStatus_X_191X_50THZX_1565X_496NM = 92;
               WavelengthChannelNumberStatus_X_191X_45THZX_1565X_905NM = 93;
               WavelengthChannelNumberStatus_X_191X_40THZX_1566X_314NM = 94;
               WavelengthChannelNumberStatus_X_191X_35THZX_1566X_723NM = 95;
               WavelengthChannelNumberStatus_X_191X_30THZX_1567X_133NM = 96;
               WavelengthChannelNumberStatus_X_191X_25THZX_1567X_542NM = 97;
               WavelengthChannelNumberStatus_X_191X_20THZX_1567X_952NM = 98;
               WavelengthChannelNumberStatus_X_191X_15THZX_1568X_362NM = 99;
            };
            WavelengthChannelNumberStatus wavelength_channel_number_status = 49 [json_name = "wavelength-channel-number-status"];
            uint32 signal_dqpsk = 50 [json_name = "signal-dqpsk"];
            enum PowerLowProtection {
               PowerLowProtection_ENABLE = 0;
               PowerLowProtection_DISABLE = 1;
            };
            PowerLowProtection power_low_protection = 51 [json_name = "power-low-protection"];
            enum SingleFiber {
               SingleFiber_ENABLE = 0;
               SingleFiber_DISABLE = 1;
            };
            SingleFiber single_fiber = 52 [json_name = "single-fiber"];
            enum SingleFiberRx {
               SingleFiberRx_ENABLE = 0;
               SingleFiberRx_DISABLE = 1;
            };
            SingleFiberRx single_fiber_rx = 53 [json_name = "single-fiber-rx"];
            string manufacture_date = 54 [json_name = "manufacture-date"];
            enum TransceiverMediumType {
               TransceiverMediumType_SFPX_1000BASEX_X = 0;
               TransceiverMediumType_SFPX_1000BASEX_T = 1;
               TransceiverMediumType_SFPX_10GBASEX_FIBER = 2;
               TransceiverMediumType_SFPX_10GBASEX_COPPER = 3;
               TransceiverMediumType_QSFPX_40GBASEX_FIBER = 4;
               TransceiverMediumType_QSFPX_40GBASEX_COPPER = 5;
               TransceiverMediumType_SFPX_100BASEX_FIBER = 7;
               TransceiverMediumType_SFP28X_25GBASEX_FIBER = 11;
               TransceiverMediumType_SFP28X_25GBASEX_COPPER = 12;
               TransceiverMediumType_QSFP28X_100GX_FIBER = 13;
               TransceiverMediumType_QSFP28X_100GX_COPPER = 14;
               TransceiverMediumType_SFPX_10GBASEX_DWDM = 34;
               TransceiverMediumType_QSFP28X_100GBASEX_DWDM = 35;
               TransceiverMediumType_SFP56X_50GX_FIBER = 36;
               TransceiverMediumType_SFP56X_50GX_COPPER = 37;
               TransceiverMediumType_QSFP56X_200GBASEX_FIBER = 38;
               TransceiverMediumType_QSFP56X_200GBASEX_COPPER = 39;
               TransceiverMediumType_QSFPDDX_400GBASEX_FIBER = 40;
               TransceiverMediumType_QSFPDDX_400GBASEX_COPPER = 41;
               TransceiverMediumType_QSFP28X_50GBASEX_COPPER = 48;
               TransceiverMediumType_UNKNOWN = 255;
            };
            TransceiverMediumType transceiver_medium_type = 55 [json_name = "transceiver-medium-type"];
            string voltage_float = 56 [json_name = "voltage-float"];
            string temperature_float = 57 [json_name = "temperature-float"];
            string serial_number = 58 [json_name = "serial-number"];
            enum GainMode {
               INVALID_ENUM_VALUE_GainMode = 0;
               GainMode_AGC = 1;
               GainMode_APC = 2;
            };
            GainMode gain_mode = 59 [json_name = "gain-mode"];
            uint32 gain_value = 60 [json_name = "gain-value"];
            enum OpticalMode {
               INVALID_ENUM_VALUE_OpticalMode = 0;
               OpticalMode_HSEN = 2;
               OpticalMode_OSNR = 3;
            };
            OpticalMode optical_mode = 61 [json_name = "optical-mode"];
            enum GainModeSts {
               INVALID_ENUM_VALUE_GainModeSts = 0;
               GainModeSts_AGC = 1;
               GainModeSts_APC = 2;
            };
            GainModeSts gain_mode_sts = 62 [json_name = "gain-mode-sts"];
            uint32 gain_value_sts = 63 [json_name = "gain-value-sts"];
            enum OpticalModeStatus {
               INVALID_ENUM_VALUE_OpticalModeStatus = 0;
               OpticalModeStatus_HSEN = 2;
               OpticalModeStatus_OSNR = 3;
            };
            OpticalModeStatus optical_mode_status = 64 [json_name = "optical-mode-status"];
            enum CertifiedState {
               CertifiedState_CERTIFIED = 0;
               CertifiedState_NONX_CERTIFIED = 1;
            };
            CertifiedState certified_state = 65 [json_name = "certified-state"];
            enum IsSupportDdm {
               IsSupportDdm_NONX_SUPPORT = 0;
               IsSupportDdm_SUPPORT = 1;
            };
            IsSupportDdm is_support_ddm = 66 [json_name = "is-support-ddm"];
            string bias_high_threshold = 67 [json_name = "bias-high-threshold"];
            string bias_low_threshold = 68 [json_name = "bias-low-threshold"];
            string voltage_high_threshold_float = 69 [json_name = "voltage-high-threshold-float"];
            string voltage_low_threshold_float = 70 [json_name = "voltage-low-threshold-float"];
            string temperature_high_threshold_float = 71 [json_name = "temperature-high-threshold-float"];
            string temperature_low_threshold_float = 72 [json_name = "temperature-low-threshold-float"];
            message GainPower_Gain {
               uint32 agc_value = 1 [json_name = "agc-value"];
            }
            message GainPower_Power {
               uint32 apc_value = 1 [json_name = "apc-value"];
            }
            oneof GainPower {
               GainPower_Gain gain_power_gain = 73 [json_name = "gain"];
               GainPower_Power gain_power_power = 74 [json_name = "power"];
            }
            uint32 agc_effective_value = 75 [json_name = "agc-effective-value"];
            uint32 apc_effective_value = 76 [json_name = "apc-effective-value"];
         }
         OpticalModule optical_module = 15 [json_name = "optical-module"];
         message TransmissionAlarm {
            message TransAlarmIfdowns {
               message TransAlarmIfdown {
                  enum AlarmType {
                     AlarmType_AUAIS = 0;
                     AlarmType_B3TCA = 1;
                     AlarmType_LAIS = 2;
                     AlarmType_LOF = 3;
                     AlarmType_LOM = 4;
                     AlarmType_LOP = 5;
                     AlarmType_LOS = 6;
                     AlarmType_LRDI = 7;
                     AlarmType_LREI = 8;
                     AlarmType_OOF = 9;
                     AlarmType_PAIS = 10;
                     AlarmType_PRDI = 11;
                     AlarmType_PREI = 12;
                     AlarmType_PPLM = 13;
                     AlarmType_RDOOL = 14;
                     AlarmType_RROOL = 15;
                     AlarmType_SDBERE = 16;
                     AlarmType_SFBERE = 17;
                     AlarmType_TROOL = 18;
                     AlarmType_PUNEQ = 19;
                     AlarmType_LCD = 20;
                     AlarmType_WLNK = 21;
                     AlarmType_B1TCA = 40;
                     AlarmType_B2TCA = 41;
                  };
                  AlarmType alarm_type = 1 [json_name = "alarm-type"];
                  bool ifdown = 2 [json_name = "ifdown"];
                  bool alarm_status = 3 [json_name = "alarm-status"];
                  bool is_in_filtering = 4 [json_name = "is-in-filtering"];
                  bool is_in_suppressing = 5 [json_name = "is-in-suppressing"];
                  bool is_in_aging = 6 [json_name = "is-in-aging"];
                  uint32 flapping_count = 7 [json_name = "flapping-count"];
                  uint32 suppressing_count = 8 [json_name = "suppressing-count"];
                  string figure_of_merit = 9 [json_name = "figure-of-merit"];
               }
               repeated TransAlarmIfdown trans_alarm_ifdown = 1 [json_name = "trans-alarm-ifdown"];
            }
            TransAlarmIfdowns trans_alarm_ifdowns = 1 [json_name = "trans-alarm-ifdowns"];
            uint32 holdoff_timer = 2 [json_name = "holdoff-timer"];
            uint32 holdup_timer = 3 [json_name = "holdup-timer"];
            uint32 threshold_b3tca = 4 [json_name = "threshold-b3tca"];
            uint32 threshold_b1tca = 5 [json_name = "threshold-b1tca"];
            uint32 threshold_b2tca = 6 [json_name = "threshold-b2tca"];
            uint32 threshold_bip2tca = 7 [json_name = "threshold-bip2tca"];
            uint32 threshold_sdbere = 8 [json_name = "threshold-sdbere"];
            uint32 threshold_sfbere = 9 [json_name = "threshold-sfbere"];
            uint32 damp_suppress = 10 [json_name = "damp-suppress"];
            uint32 damp_reuse = 11 [json_name = "damp-reuse"];
            uint32 damp_ceiling = 12 [json_name = "damp-ceiling"];
            uint32 damp_decayok = 13 [json_name = "damp-decayok"];
            uint32 damp_decayng = 14 [json_name = "damp-decayng"];
            string alm_last_reset_time = 15 [json_name = "alm-last-reset-time"];
            bool filter_function = 16 [json_name = "filter-function"];
            bool damping_function = 17 [json_name = "damping-function"];
         }
         TransmissionAlarm transmission_alarm = 16 [json_name = "transmission-alarm"];
         message Pos {
            enum FrameFormat {
               FrameFormat_SDH = 0;
               FrameFormat_SONET = 1;
            };
            FrameFormat frame_format = 1 [json_name = "frame-format"];
            enum Crc {
               Crc_X_16BIT = 0;
               Crc_X_32BIT = 1;
            };
            Crc crc = 2 [json_name = "crc"];
            enum HoldUp {
               HoldUp_DISABLED = 0;
               HoldUp_ENABLED = 1;
            };
            HoldUp hold_up = 3 [json_name = "hold-up"];
            enum Speed {
               Speed_UNDO = 0;
               Speed_X_155M = 1;
               Speed_X_622M = 2;
            };
            Speed speed = 4 [json_name = "speed"];
            enum J0Mode {
               INVALID_ENUM_VALUE_J0Mode = 0;
               J0Mode_X_1BYTE = 1;
               J0Mode_X_16BYTE = 16;
               J0Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               J0Mode_PEER = 128;
            };
            J0Mode j0_mode = 5 [json_name = "j0-mode"];
            uint32 j0_value = 6 [json_name = "j0-value"];
            string j0_trace = 7 [json_name = "j0-trace"];
            enum J1Mode {
               INVALID_ENUM_VALUE_J1Mode = 0;
               J1Mode_X_1BYTE = 1;
               J1Mode_X_16BYTE = 16;
               J1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               J1Mode_PEER = 128;
            };
            J1Mode j1_mode = 8 [json_name = "j1-mode"];
            uint32 j1_value = 9 [json_name = "j1-value"];
            string j1_trace = 10 [json_name = "j1-trace"];
            uint32 c2 = 11 [json_name = "c2"];
            enum Clock {
               Clock_MASTER = 0;
               Clock_SLAVE = 1;
            };
            Clock clock = 12 [json_name = "clock"];
            enum Scramble {
               Scramble_DISABLED = 0;
               Scramble_ENABLED = 3;
            };
            Scramble scramble = 13 [json_name = "scramble"];
            uint32 rx_j0_value = 14 [json_name = "rx-j0-value"];
            string rx_j0_trace = 15 [json_name = "rx-j0-trace"];
            uint32 rx_j1_value = 16 [json_name = "rx-j1-value"];
            string rx_j1_trace = 17 [json_name = "rx-j1-trace"];
            uint32 rx_c2 = 18 [json_name = "rx-c2"];
            enum RxJ0Mode {
               INVALID_ENUM_VALUE_RxJ0Mode = 0;
               RxJ0Mode_X_1BYTE = 1;
               RxJ0Mode_X_16BYTE = 16;
               RxJ0Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               RxJ0Mode_PEER = 128;
            };
            RxJ0Mode rx_j0_mode = 19 [json_name = "rx-j0-mode"];
            enum RxJ1Mode {
               INVALID_ENUM_VALUE_RxJ1Mode = 0;
               RxJ1Mode_X_1BYTE = 1;
               RxJ1Mode_X_16BYTE = 16;
               RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               RxJ1Mode_PEER = 128;
            };
            RxJ1Mode rx_j1_mode = 20 [json_name = "rx-j1-mode"];
            string b1tca = 21 [json_name = "b1tca"];
            string b2tca = 22 [json_name = "b2tca"];
            string b3tca = 23 [json_name = "b3tca"];
         }
         Pos pos = 17 [json_name = "pos"];
         message Atm {
            enum HoldUp {
               HoldUp_DISABLED = 0;
               HoldUp_ENABLED = 1;
            };
            HoldUp hold_up = 1 [json_name = "hold-up"];
            enum J0Mode {
               INVALID_ENUM_VALUE_J0Mode = 0;
               J0Mode_X_16BYTE = 16;
               J0Mode_PEER = 128;
            };
            J0Mode j0_mode = 2 [json_name = "j0-mode"];
            string j0_trace = 3 [json_name = "j0-trace"];
            enum J1Mode {
               INVALID_ENUM_VALUE_J1Mode = 0;
               J1Mode_X_16BYTE = 16;
               J1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               J1Mode_PEER = 128;
            };
            J1Mode j1_mode = 4 [json_name = "j1-mode"];
            string j1_trace = 5 [json_name = "j1-trace"];
            uint32 c2 = 6 [json_name = "c2"];
            enum Clock {
               Clock_MASTER = 0;
               Clock_SLAVE = 1;
            };
            Clock clock = 7 [json_name = "clock"];
            enum Scramble {
               Scramble_DISABLED = 0;
               Scramble_ENABLED = 3;
            };
            Scramble scramble = 8 [json_name = "scramble"];
            enum FlagSpacePadding {
               FlagSpacePadding_DISABLE = 0;
               FlagSpacePadding_ENABLE = 1;
            };
            FlagSpacePadding flag_space_padding = 9 [json_name = "flag-space-padding"];
            string rx_j0_trace = 10 [json_name = "rx-j0-trace"];
            string rx_j1_trace = 11 [json_name = "rx-j1-trace"];
            uint32 rx_c2 = 12 [json_name = "rx-c2"];
            enum RxJ0Mode {
               INVALID_ENUM_VALUE_RxJ0Mode = 0;
               RxJ0Mode_X_16BYTE = 16;
               RxJ0Mode_PEER = 128;
            };
            RxJ0Mode rx_j0_mode = 13 [json_name = "rx-j0-mode"];
            enum RxJ1Mode {
               INVALID_ENUM_VALUE_RxJ1Mode = 0;
               RxJ1Mode_X_16BYTE = 16;
               RxJ1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               RxJ1Mode_PEER = 128;
            };
            RxJ1Mode rx_j1_mode = 14 [json_name = "rx-j1-mode"];
            uint32 lb_hold_time = 15 [json_name = "lb-hold-time"];
         }
         Atm atm = 18 [json_name = "atm"];
         message Cpos {
            enum MappingMode {
               MappingMode_HX_MODE = 0;
               MappingMode_AX_MODE = 1;
               MappingMode_LX_MODE = 2;
            };
            MappingMode mapping_mode = 1 [json_name = "mapping-mode"];
            enum FrameFormat {
               FrameFormat_SDH = 0;
               FrameFormat_SONET = 1;
            };
            FrameFormat frame_format = 2 [json_name = "frame-format"];
            enum Multiplex {
               Multiplex_AUX_4 = 0;
               Multiplex_AUX_3 = 1;
            };
            Multiplex multiplex = 3 [json_name = "multiplex"];
            uint32 lb_hold_time = 4 [json_name = "lb-hold-time"];
            enum HoldUp {
               HoldUp_DISABLED = 0;
               HoldUp_ENABLED = 1;
            };
            HoldUp hold_up = 5 [json_name = "hold-up"];
            enum HpMappingMode {
               HpMappingMode_VC12 = 0;
               HpMappingMode_VC4 = 1;
            };
            HpMappingMode hp_mapping_mode = 6 [json_name = "hp-mapping-mode"];
            enum AisFlag {
               AisFlag_DISABLE = 0;
               AisFlag_ENABLE = 1;
            };
            AisFlag ais_flag = 7 [json_name = "ais-flag"];
            enum TuaisFlag {
               TuaisFlag_DISABLE = 0;
               TuaisFlag_ENABLE = 1;
            };
            TuaisFlag tuais_flag = 8 [json_name = "tuais-flag"];
            enum J0Mode {
               J0Mode_SDH = 0;
               J0Mode_SONET = 1;
            };
            J0Mode j0_mode = 9 [json_name = "j0-mode"];
            uint32 j0_value = 10 [json_name = "j0-value"];
            string j0_trace = 11 [json_name = "j0-trace"];
            enum J1Mode {
               INVALID_ENUM_VALUE_J1Mode = 0;
               J1Mode_X_1BYTE = 1;
               J1Mode_X_16BYTE = 16;
               J1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
            };
            J1Mode j1_mode = 12 [json_name = "j1-mode"];
            uint32 j1_value = 13 [json_name = "j1-value"];
            string j1_trace = 14 [json_name = "j1-trace"];
            uint32 c2 = 15 [json_name = "c2"];
            enum Clock {
               Clock_MASTER = 0;
               Clock_SLAVE = 1;
            };
            Clock clock = 16 [json_name = "clock"];
            enum FlagSpacePadding {
               FlagSpacePadding_DISABLE = 0;
               FlagSpacePadding_ENABLE = 1;
            };
            FlagSpacePadding flag_space_padding = 17 [json_name = "flag-space-padding"];
            uint32 rx_j0_value = 18 [json_name = "rx-j0-value"];
            string rx_j0_trace = 19 [json_name = "rx-j0-trace"];
            uint32 rx_j1_value = 20 [json_name = "rx-j1-value"];
            string rx_j1_trace = 21 [json_name = "rx-j1-trace"];
            uint32 rx_c2 = 22 [json_name = "rx-c2"];
            message E1T1S {
               message E1T1 {
                  uint32 number7 = 1 [json_name = "number"];
                  enum WorkMode {
                     WorkMode_FRAMED = 0;
                     WorkMode_UNFRAMED = 1;
                  };
                  WorkMode work_mode = 2 [json_name = "work-mode"];
                  enum Clock {
                     Clock_MASTER = 0;
                     Clock_SLAVE = 1;
                     Clock_DOMAIN = 2;
                  };
                  Clock clock = 3 [json_name = "clock"];
                  uint32 clock_recovery_domain = 4 [json_name = "clock-recovery-domain"];
                  uint32 clock_master_domain = 5 [json_name = "clock-master-domain"];
                  enum FrameFormat {
                     FrameFormat_NOX_CRC4 = 0;
                     FrameFormat_CRC4 = 1;
                  };
                  FrameFormat frame_format = 6 [json_name = "frame-format"];
                  enum Loopback {
                     Loopback_NONE = 0;
                     Loopback_LOCAL = 1;
                     Loopback_REMOTE = 2;
                  };
                  Loopback loopback = 7 [json_name = "loopback"];
                  string j2_trace = 8 [json_name = "j2-trace"];
                  uint32 v5_trace = 9 [json_name = "v5-trace"];
                  uint32 auto_clr_period = 10 [json_name = "auto-clr-period"];
                  string rx_j2_trace = 11 [json_name = "rx-j2-trace"];
                  message ChannelSets {
                     message ChannelSet {
                        uint32 number9 = 1 [json_name = "number"];
                        string timeslot_list = 2 [json_name = "timeslot-list"];
                     }
                     repeated ChannelSet channel_set = 1 [json_name = "channel-set"];
                  }
                  ChannelSets channel_sets = 12 [json_name = "channel-sets"];
               }
               repeated E1T1 e1t1 = 1 [json_name = "e1t1"];
            }
            E1T1S e1t1s = 23 [json_name = "e1t1s"];
         }
         Cpos cpos = 19 [json_name = "cpos"];
         message PortAlarm {
            bool crc_enabled_down = 1 [json_name = "crc-enabled-down"];
            bool input_enabled_down = 2 [json_name = "input-enabled-down"];
            uint32 input_error_high_threshold = 3 [json_name = "input-error-high-threshold"];
            uint32 input_error_low_threshold = 4 [json_name = "input-error-low-threshold"];
            uint32 input_error_interval = 5 [json_name = "input-error-interval"];
            bool output_enabled_down = 6 [json_name = "output-enabled-down"];
            uint32 output_error_high_threshold = 7 [json_name = "output-error-high-threshold"];
            uint32 output_error_low_threshold = 8 [json_name = "output-error-low-threshold"];
            uint32 output_error_interval = 9 [json_name = "output-error-interval"];
            bool phy_updown_en = 10 [json_name = "phy-updown-en"];
            string crc_per_cur = 11 [json_name = "crc-per-cur"];
            message EthPortAlarm {
               bool symbol_enabled_down = 1 [json_name = "symbol-enabled-down"];
               uint32 symbol_error_high_threshold = 2 [json_name = "symbol-error-high-threshold"];
               uint32 symbol_error_low_threshold = 3 [json_name = "symbol-error-low-threshold"];
               uint32 symbol_error_interval = 4 [json_name = "symbol-error-interval"];
               bool bip8_sd_enabled_down = 5 [json_name = "bip8-sd-enabled-down"];
               uint32 bip8_sd_error_high_threshold = 6 [json_name = "bip8-sd-error-high-threshold"];
               uint32 bad_bytes_threshold = 7 [json_name = "bad-bytes-threshold"];
               uint32 bad_bytes_interval = 8 [json_name = "bad-bytes-interval"];
               uint32 tx_pause_error_high_threshold = 9 [json_name = "tx-pause-error-high-threshold"];
               uint32 tx_pause_error_low_threshold = 10 [json_name = "tx-pause-error-low-threshold"];
               uint32 tx_pause_error_interval = 11 [json_name = "tx-pause-error-interval"];
               uint32 rx_pause_error_high_threshold = 12 [json_name = "rx-pause-error-high-threshold"];
               uint32 rx_pause_error_low_threshold = 13 [json_name = "rx-pause-error-low-threshold"];
               uint32 rx_pause_error_interval = 14 [json_name = "rx-pause-error-interval"];
            }
            EthPortAlarm eth_port_alarm = 12 [json_name = "eth-port-alarm"];
            message SdhPortAlarm {
               bool sdh_enabled_down = 1 [json_name = "sdh-enabled-down"];
               uint32 sdh_error_high_threshold = 2 [json_name = "sdh-error-high-threshold"];
               uint32 sdh_error_low_threshold = 3 [json_name = "sdh-error-low-threshold"];
               uint32 sdh_error_interval = 4 [json_name = "sdh-error-interval"];
               uint32 sdh_b1_err_threshold = 5 [json_name = "sdh-b1-err-threshold"];
               uint32 sdh_b2_err_threshold = 6 [json_name = "sdh-b2-err-threshold"];
               uint32 sdh_b1_err_interval = 7 [json_name = "sdh-b1-err-interval"];
               uint32 sdh_b2_err_interval = 8 [json_name = "sdh-b2-err-interval"];
            }
            SdhPortAlarm sdh_port_alarm = 13 [json_name = "sdh-port-alarm"];
            message PdhPortAlarm {
               uint32 trigger_thres = 1 [json_name = "trigger-thres"];
               uint32 resume_thres = 2 [json_name = "resume-thres"];
            }
            PdhPortAlarm pdh_port_alarm = 14 [json_name = "pdh-port-alarm"];
            message CrcMfeAlarm {
               uint32 crc_mfe_alm_thr_coefficient = 1 [json_name = "crc-mfe-alm-thr-coefficient"];
               uint32 crc_mfe_alm_thr_power = 2 [json_name = "crc-mfe-alm-thr-power"];
               uint32 crc_mfe_rsum_thr_coefficient = 3 [json_name = "crc-mfe-rsum-thr-coefficient"];
               uint32 crc_mfe_rsum_thr_power = 4 [json_name = "crc-mfe-rsum-thr-power"];
               bool crc_mfe_alm_lsp_en = 5 [json_name = "crc-mfe-alm-lsp-en"];
            }
            CrcMfeAlarm crc_mfe_alarm = 15 [json_name = "crc-mfe-alarm"];
            message CrcSample {
               uint32 crc_per_samp_win_factor = 1 [json_name = "crc-per-samp-win-factor"];
               uint32 crc_per_child_win_max_num = 2 [json_name = "crc-per-child-win-max-num"];
               uint32 crc_per_child_win_alarm_num = 3 [json_name = "crc-per-child-win-alarm-num"];
               uint32 crc_per_child_win_resume_num = 4 [json_name = "crc-per-child-win-resume-num"];
               uint32 crc_alg_realtime_factor = 5 [json_name = "crc-alg-realtime-factor"];
            }
            CrcSample crc_sample = 16 [json_name = "crc-sample"];
            message AlarmType_CrcErrorThreshold {
               message CrcErrorThreshold6 {
                  uint32 crc_error_high = 1 [json_name = "crc-error-high"];
                  uint32 crc_error_low = 2 [json_name = "crc-error-low"];
                  uint32 crc_error = 3 [json_name = "crc-error"];
                  uint32 crc_error_interval = 4 [json_name = "crc-error-interval"];
                  bool crc_shutdown_en = 5 [json_name = "crc-shutdown-en"];
                  uint32 crc_error_percent_alm_thr = 6 [json_name = "crc-error-percent-alm-thr"];
               }
               CrcErrorThreshold6 crc_error_threshold = 1 [json_name = "crc-error-threshold"];
            }
            message AlarmType_LinkCrc {
               message LinkQuality {
                  uint32 link_quality_alm_thr_coefficient = 1 [json_name = "link-quality-alm-thr-coefficient"];
                  uint32 link_quality_alm_thr_power = 2 [json_name = "link-quality-alm-thr-power"];
                  uint32 link_quality_rsum_thr_coefficient = 3 [json_name = "link-quality-rsum-thr-coefficient"];
                  uint32 link_quality_rsum_thr_power = 4 [json_name = "link-quality-rsum-thr-power"];
               }
               LinkQuality link_quality = 1 [json_name = "link-quality"];
               message CrcPerAlarm {
                  uint32 crc_per_alm_thr_coefficient = 1 [json_name = "crc-per-alm-thr-coefficient"];
                  uint32 crc_per_alm_thr_power = 2 [json_name = "crc-per-alm-thr-power"];
                  uint32 crc_per_rsum_thr_coefficient = 3 [json_name = "crc-per-rsum-thr-coefficient"];
                  uint32 crc_per_rsum_thr_power = 4 [json_name = "crc-per-rsum-thr-power"];
                  bool crc_per_alm_lsp_en = 5 [json_name = "crc-per-alm-lsp-en"];
                  bool crc_per_alm_sec_en = 6 [json_name = "crc-per-alm-sec-en"];
               }
               CrcPerAlarm crc_per_alarm = 2 [json_name = "crc-per-alarm"];
               message CrcPerWarn {
                  uint32 crc_per_war_thr_coefficient = 1 [json_name = "crc-per-war-thr-coefficient"];
                  uint32 crc_per_war_thr_power = 2 [json_name = "crc-per-war-thr-power"];
                  uint32 crc_per_war_rsum_thr_coefficient = 3 [json_name = "crc-per-war-rsum-thr-coefficient"];
                  uint32 crc_per_war_rsum_thr_power = 4 [json_name = "crc-per-war-rsum-thr-power"];
               }
               CrcPerWarn crc_per_warn = 3 [json_name = "crc-per-warn"];
            }
            message AlarmType_CrcMfsAlarm {
               message CrcMfsAlarm6 {
                  uint32 crc_mfs_alm_thr_coefficient = 1 [json_name = "crc-mfs-alm-thr-coefficient"];
                  uint32 crc_mfs_alm_thr_power = 2 [json_name = "crc-mfs-alm-thr-power"];
                  uint32 crc_mfs_rsum_thr_coefficient = 3 [json_name = "crc-mfs-rsum-thr-coefficient"];
                  uint32 crc_mfs_rsum_thr_power = 4 [json_name = "crc-mfs-rsum-thr-power"];
                  bool crc_mfs_alm_lsp_en = 5 [json_name = "crc-mfs-alm-lsp-en"];
               }
               CrcMfsAlarm6 crc_mfs_alarm = 1 [json_name = "crc-mfs-alarm"];
            }
            oneof AlarmType {
               AlarmType_CrcErrorThreshold alarm_type_crc_error_threshold = 17 [json_name = "crc-error-threshold"];
               AlarmType_LinkCrc alarm_type_link_crc = 18 [json_name = "link-crc"];
               AlarmType_CrcMfsAlarm alarm_type_crc_mfs_alarm = 19 [json_name = "crc-mfs-alarm"];
            }
         }
         PortAlarm port_alarm = 20 [json_name = "port-alarm"];
         message AdmPort {
            string rx_power = 1 [json_name = "rx-power"];
            string tx_power = 2 [json_name = "tx-power"];
            string descriton = 3 [json_name = "descriton"];
            string wavelength = 4 [json_name = "wavelength"];
            string conect_relation = 5 [json_name = "conect-relation"];
            string direction = 6 [json_name = "direction"];
            string wave_band = 7 [json_name = "wave-band"];
            string wavelength_num = 8 [json_name = "wavelength-num"];
            string tx_wavelength = 9 [json_name = "tx-wavelength"];
            string rx_wavelength = 10 [json_name = "rx-wavelength"];
            string tx_wavelength_num = 11 [json_name = "tx-wavelength-num"];
            string rx_wavelength_num = 12 [json_name = "rx-wavelength-num"];
         }
         AdmPort adm_port = 21 [json_name = "adm-port"];
         message PhySerial {
            enum Baudrate {
               Baudrate_X_600BIT = 0;
               Baudrate_X_1200BIT = 1;
               Baudrate_X_2400BIT = 2;
               Baudrate_X_4800BIT = 3;
               Baudrate_X_9600BIT = 4;
               Baudrate_X_19200BIT = 5;
               Baudrate_X_38400BIT = 6;
               Baudrate_X_48000BIT = 7;
               Baudrate_X_64KBIT = 8;
               Baudrate_X_128KBIT = 9;
               Baudrate_X_192KBIT = 10;
               Baudrate_X_256KBIT = 11;
               Baudrate_X_320KBIT = 12;
               Baudrate_X_384KBIT = 13;
               Baudrate_X_448KBIT = 14;
               Baudrate_X_512KBIT = 15;
               Baudrate_X_576KBIT = 16;
               Baudrate_X_640KBIT = 17;
               Baudrate_X_704KBIT = 18;
               Baudrate_X_768KBIT = 19;
               Baudrate_X_832KBIT = 20;
               Baudrate_X_896KBIT = 21;
               Baudrate_X_960KBIT = 22;
               Baudrate_X_1024KBIT = 23;
               Baudrate_X_1088KBIT = 24;
               Baudrate_X_1152KBIT = 25;
               Baudrate_X_1216KBIT = 26;
               Baudrate_X_1280KBIT = 27;
               Baudrate_X_1344KBIT = 28;
               Baudrate_X_1408KBIT = 29;
               Baudrate_X_1472KBIT = 30;
               Baudrate_X_1536KBIT = 31;
               Baudrate_X_1600KBIT = 32;
               Baudrate_X_1664KBIT = 33;
               Baudrate_X_1728KBIT = 34;
               Baudrate_X_1792KBIT = 35;
               Baudrate_X_1856KBIT = 36;
               Baudrate_X_1920KBIT = 37;
               Baudrate_X_1984KBIT = 38;
            };
            Baudrate baudrate = 1 [json_name = "baudrate"];
            enum ClockSourceMode {
               ClockSourceMode_INTERNAL = 0;
               ClockSourceMode_EXTERNAL = 1;
               ClockSourceMode_SLAVE = 2;
            };
            ClockSourceMode clock_source_mode = 2 [json_name = "clock-source-mode"];
            uint32 data_bits = 3 [json_name = "data-bits"];
            enum MuxProtocol {
               MuxProtocol_SX_BITX_LOOPBACK = 0;
               MuxProtocol_SX_BITX_0 = 1;
               MuxProtocol_SX_BITX_1 = 2;
            };
            MuxProtocol mux_protocol = 4 [json_name = "mux-protocol"];
            enum Parity {
               Parity_NONE = 0;
               Parity_EVEN = 1;
               Parity_ODD = 2;
            };
            Parity parity = 5 [json_name = "parity"];
            enum PhaseClockSend {
               PhaseClockSend_INX_PHASE = 0;
               PhaseClockSend_INVERSEX_PHASE = 1;
            };
            PhaseClockSend phase_clock_send = 6 [json_name = "phase-clock-send"];
            enum PhaseClockRec {
               PhaseClockRec_INX_PHASE = 0;
               PhaseClockRec_INVERSEX_PHASE = 1;
            };
            PhaseClockRec phase_clock_rec = 7 [json_name = "phase-clock-rec"];
            enum PhysicalMode {
               PhysicalMode_ASYNC = 0;
               PhysicalMode_SYNC = 1;
            };
            PhysicalMode physical_mode = 8 [json_name = "physical-mode"];
            enum PortMode {
               PortMode_RSX_232 = 0;
               PortMode_RSX_485 = 1;
               PortMode_RSX_422 = 2;
               PortMode_VX_24 = 3;
               PortMode_XX_21 = 4;
               PortMode_VX_35 = 5;
               PortMode_EM = 6;
               PortMode_FXS = 7;
               PortMode_FXO = 8;
               PortMode_C3794 = 10;
               PortMode_CODIR = 11;
            };
            PortMode port_mode = 9 [json_name = "port-mode"];
            uint32 stop_bits = 10 [json_name = "stop-bits"];
            enum WorkMode {
               WorkMode_DCE = 0;
               WorkMode_DTE = 1;
            };
            WorkMode work_mode = 11 [json_name = "work-mode"];
            enum PhaseMode {
               PhaseMode_SEQUENCE = 0;
               PhaseMode_INTERVAL = 1;
            };
            PhaseMode phase_mode = 12 [json_name = "phase-mode"];
            enum DetectDsrSignal {
               DetectDsrSignal_DETECT = 0;
               DetectDsrSignal_NODETECT = 1;
            };
            DetectDsrSignal detect_dsr_signal = 13 [json_name = "detect-dsr-signal"];
            enum DetectDtrSignal {
               DetectDtrSignal_DETECT = 0;
               DetectDtrSignal_NODETECT = 1;
            };
            DetectDtrSignal detect_dtr_signal = 14 [json_name = "detect-dtr-signal"];
            enum DetectDcdSignal {
               DetectDcdSignal_DETECT = 0;
               DetectDcdSignal_NODETECT = 1;
            };
            DetectDcdSignal detect_dcd_signal = 15 [json_name = "detect-dcd-signal"];
            enum DetectCtsSignal {
               DetectCtsSignal_DETECT = 0;
               DetectCtsSignal_NODETECT = 1;
            };
            DetectCtsSignal detect_cts_signal = 16 [json_name = "detect-cts-signal"];
            enum DetectRtsSignal {
               DetectRtsSignal_DETECT = 0;
               DetectRtsSignal_NODETECT = 1;
            };
            DetectRtsSignal detect_rts_signal = 17 [json_name = "detect-rts-signal"];
            message SerAttrs {
               message SerAttr {
                  uint32 number7 = 1 [json_name = "number"];
                  uint32 baudrate = 2 [json_name = "baudrate"];
                  string databits = 3 [json_name = "databits"];
                  string parity = 4 [json_name = "parity"];
                  string stopbits = 5 [json_name = "stopbits"];
               }
               repeated SerAttr ser_attr = 1 [json_name = "ser-attr"];
            }
            SerAttrs ser_attrs = 18 [json_name = "ser-attrs"];
         }
         PhySerial phy_serial = 22 [json_name = "phy-serial"];
         message PhyVoice {
            enum PcmLawVaule {
               PcmLawVaule_AX_LAW = 0;
               PcmLawVaule_UX_LAW = 1;
            };
            PcmLawVaule pcm_law_vaule = 1 [json_name = "pcm-law-vaule"];
            message Fxo {
               string gain_send = 1 [json_name = "gain-send"];
               string gain_rec = 2 [json_name = "gain-rec"];
               enum DcImped {
                  DcImped_X_50OHM = 0;
                  DcImped_X_800OHM = 1;
               };
               DcImped dc_imped = 3 [json_name = "dc-imped"];
               enum AcImped {
                  AcImped_X_600OHM = 0;
                  AcImped_X_900OHM = 1;
                  AcImped_X_270OHM = 2;
                  AcImped_X_220OHM = 3;
                  AcImped_X_370OHMX_620OHM = 4;
                  AcImped_X_320OHM = 5;
                  AcImped_X_370OHMX_820OHM = 6;
                  AcImped_X_275OHM = 7;
                  AcImped_X_20OHM = 8;
                  AcImped_X_350OHM = 9;
                  AcImped_X_200OHM = 10;
                  AcImped_X_600OHMX_2X_16UF = 11;
                  AcImped_X_900OHMX_1UF = 12;
                  AcImped_X_900OHMX_2X_16UF = 13;
                  AcImped_X_600OHMX_1UF = 14;
                  AcImped_GLOBALX_IMPEDANCE = 15;
               };
               AcImped ac_imped = 4 [json_name = "ac-imped"];
               enum RingMinDur {
                  RingMinDur_X_100MS = 0;
                  RingMinDur_X_150MS = 1;
                  RingMinDur_X_200MS = 2;
                  RingMinDur_X_256MS = 3;
                  RingMinDur_X_384MS = 4;
                  RingMinDur_X_512MS = 5;
                  RingMinDur_X_640MS = 6;
                  RingMinDur_X_1024MS = 7;
               };
               RingMinDur ring_min_dur = 5 [json_name = "ring-min-dur"];
               enum RingMaxInter {
                  RingMaxInter_NOTX_USE = 0;
                  RingMaxInter_X_128MS = 1;
                  RingMaxInter_X_256MS = 2;
                  RingMaxInter_X_284MS = 3;
                  RingMaxInter_X_512MS = 4;
                  RingMaxInter_X_640MS = 5;
                  RingMaxInter_X_768MS = 6;
                  RingMaxInter_X_896MS = 7;
                  RingMaxInter_X_1024MS = 8;
                  RingMaxInter_X_1152MS = 9;
                  RingMaxInter_X_1280MS = 10;
                  RingMaxInter_X_1408MS = 11;
                  RingMaxInter_X_1536MS = 12;
                  RingMaxInter_X_1664MS = 13;
                  RingMaxInter_X_1792MS = 14;
                  RingMaxInter_X_1920MS = 15;
               };
               RingMaxInter ring_max_inter = 6 [json_name = "ring-max-inter"];
               enum RingFrequence {
                  RingFrequence_X_16HZ = 0;
                  RingFrequence_X_25HZ = 1;
                  RingFrequence_X_50HZ = 2;
               };
               RingFrequence ring_frequence = 7 [json_name = "ring-frequence"];
               enum RingAcAmpli {
                  RingAcAmpli_X_74V = 0;
                  RingAcAmpli_X_65V = 1;
                  RingAcAmpli_X_50V = 2;
               };
               RingAcAmpli ring_ac_ampli = 8 [json_name = "ring-ac-ampli"];
            }
            Fxo fxo = 2 [json_name = "fxo"];
            message Fxs {
               enum FxsCurrent {
                  FxsCurrent_X_16MA = 0;
                  FxsCurrent_X_20MA = 1;
               };
               FxsCurrent fxs_current = 1 [json_name = "fxs-current"];
               string fxs_gain_send = 2 [json_name = "fxs-gain-send"];
               string fxs_gain_rec = 3 [json_name = "fxs-gain-rec"];
               enum FxsHotlineEn {
                  FxsHotlineEn_DISABLE = 0;
                  FxsHotlineEn_ENABLE = 1;
               };
               FxsHotlineEn fxs_hotline_en = 4 [json_name = "fxs-hotline-en"];
               enum FxsDcImped {
                  FxsDcImped_X_600OHM = 0;
                  FxsDcImped_X_900OHM = 1;
                  FxsDcImped_X_270OHM = 2;
                  FxsDcImped_X_220OHM = 3;
                  FxsDcImped_X_370OHMX_620OHM = 4;
                  FxsDcImped_X_320OHM = 5;
                  FxsDcImped_X_370OHMX_820OHM = 6;
                  FxsDcImped_X_275OHM = 7;
                  FxsDcImped_X_20OHM = 8;
                  FxsDcImped_X_350OHM = 9;
                  FxsDcImped_X_200OHM = 10;
                  FxsDcImped_X_600OHMX_2X_16UF = 11;
                  FxsDcImped_X_900OHMX_1UF = 12;
                  FxsDcImped_X_900OHMX_2X_16UF = 13;
                  FxsDcImped_X_600OHMX_1UF = 14;
                  FxsDcImped_GLOBALX_IMPEDANCE = 15;
               };
               FxsDcImped fxs_dc_imped = 5 [json_name = "fxs-dc-imped"];
            }
            Fxs fxs = 3 [json_name = "fxs"];
            message Em {
               string em_gain_send = 1 [json_name = "em-gain-send"];
               string em_gain_rec = 2 [json_name = "em-gain-rec"];
               enum EmuserlineMode {
                  EmuserlineMode_X_2WIRE = 0;
                  EmuserlineMode_X_4WIRE = 1;
               };
               EmuserlineMode emuserline_mode = 3 [json_name = "emuserline-mode"];
               enum EmuserlineStat {
                  EmuserlineStat_X_2WIRE = 0;
                  EmuserlineStat_X_4WIRE = 1;
               };
               EmuserlineStat emuserline_stat = 4 [json_name = "emuserline-stat"];
            }
            Em em = 4 [json_name = "em"];
            uint32 on_hook = 5 [json_name = "on-hook"];
            uint32 off_hook = 6 [json_name = "off-hook"];
            enum ChannelAssociatedSignallingEnable {
               ChannelAssociatedSignallingEnable_DISABLE = 0;
               ChannelAssociatedSignallingEnable_ENABLE = 1;
            };
            ChannelAssociatedSignallingEnable channel_associated_signalling_enable = 7 [json_name = "channel-associated-signalling-enable"];
         }
         PhyVoice phy_voice = 23 [json_name = "phy-voice"];
         message E1T1 {
            enum WorkMode {
               WorkMode_FRAMED = 0;
               WorkMode_UNFRAMED = 1;
            };
            WorkMode work_mode = 1 [json_name = "work-mode"];
            enum FrameFormat {
               FrameFormat_NOX_CRC4 = 0;
               FrameFormat_CRC4 = 1;
            };
            FrameFormat frame_format = 2 [json_name = "frame-format"];
            enum Clock {
               Clock_MASTER = 0;
               Clock_SLAVE = 1;
            };
            Clock clock = 3 [json_name = "clock"];
            enum Code {
               Code_HDB3 = 0;
               Code_AMI = 1;
            };
            Code code = 4 [json_name = "code"];
            uint32 loopback_holdtime = 5 [json_name = "loopback-holdtime"];
            uint64 bipv_static = 6 [json_name = "bipv-static"];
            uint64 fas_static = 7 [json_name = "fas-static"];
            uint64 crc_static = 8 [json_name = "crc-static"];
            message ChannelSets {
               message ChannelSet {
                  uint32 number7 = 1 [json_name = "number"];
                  string timeslot_list = 2 [json_name = "timeslot-list"];
               }
               repeated ChannelSet channel_set = 1 [json_name = "channel-set"];
            }
            ChannelSets channel_sets = 9 [json_name = "channel-sets"];
         }
         E1T1 e1t1 = 24 [json_name = "e1t1"];
         message E3T3 {
            enum WorkMode {
               WorkMode_FRAMED = 0;
               WorkMode_UNFRAMED = 1;
            };
            WorkMode work_mode = 1 [json_name = "work-mode"];
            bool if_framed = 2 [json_name = "if-framed"];
            enum Clock {
               Clock_MASTER = 0;
               Clock_SLAVE = 1;
            };
            Clock clock = 3 [json_name = "clock"];
            enum FrameFormat {
               FrameFormat_GX_751 = 0;
               FrameFormat_NONE = 1;
            };
            FrameFormat frame_format = 4 [json_name = "frame-format"];
            enum E3T3Flag {
               E3T3Flag_E3 = 0;
               E3T3Flag_T3 = 1;
            };
            E3T3Flag e3t3_flag = 5 [json_name = "e3t3-flag"];
         }
         E3T3 e3t3 = 25 [json_name = "e3t3"];
      }
      repeated Port port = 1 [json_name = "port"];
   }
   Ports ports = 11 [json_name = "ports"];
   message LogicPorts {
      message LogicPort {
         string position = 1 [json_name = "position"];
         string serial_number = 2 [json_name = "serial-number"];
         enum PortType {
            PortType_UNKNOWN = 0;
            PortType_ETH = 1;
            PortType_POS = 2;
            PortType_CPOS = 3;
            PortType_E1 = 4;
            PortType_GE = 5;
            PortType_X_10GE = 6;
            PortType_GF = 7;
            PortType_X_10GF = 8;
            PortType_X_40GF = 9;
            PortType_X_10GFCOM = 10;
            PortType_X_40GFSPLIT = 11;
            PortType_OTN = 12;
            PortType_X_100GF = 13;
            PortType_X_400GF = 14;
            PortType_X_25GF = 15;
            PortType_X_50GF = 16;
            PortType_X_200GF = 17;
            PortType_CELLULAR = 18;
            PortType_FE = 19;
            PortType_FLEXE = 20;
            PortType_VSR = 21;
         };
         PortType port_type = 3 [json_name = "port-type"];
         uint32 index = 4 [json_name = "index"];
         enum AdminState {
            AdminState_INACTIVE = 0;
            AdminState_ACTIVE = 1;
            AdminState_NOTSUPPORTED = 2;
         };
         AdminState admin_state = 5 [json_name = "admin-state"];
         enum HardType {
            HardType_UNKNOWN = 0;
            HardType_ETHX_MGEX_PORT = 1;
            HardType_ETHX_10GFX_PORT = 2;
            HardType_ETHX_25GFX_PORT = 3;
            HardType_ETHX_40GFX_PORT = 4;
            HardType_ETHX_50GFX_PORT = 5;
            HardType_ETHX_100GFX_PORT = 6;
            HardType_ETHX_200GFX_PORT = 7;
            HardType_ETHX_400GFX_PORT = 8;
            HardType_ETHX_GEX_PORT = 9;
            HardType_ETHX_GFX_PORT = 10;
            HardType_CELLULARX_PORT = 11;
         };
         HardType hard_type = 6 [json_name = "hard-type"];
         uint32 enable_transmission_delay = 7 [json_name = "enable-transmission-delay"];
         enum Level {
            INVALID_ENUM_VALUE_Level = 0;
            Level_GE = 1;
         };
         Level level = 8 [json_name = "level"];
      }
      repeated LogicPort logic_port = 1 [json_name = "logic-port"];
   }
   LogicPorts logic_ports = 12 [json_name = "logic-ports"];
   message EntityClasses {
      message EntityClass {
         enum ClassName {
            ClassName_OTHER = 0;
            ClassName_CHASSIS = 1;
            ClassName_MPUMODULE = 4;
            ClassName_LPUMODULE = 5;
            ClassName_SFUMODULE = 6;
            ClassName_CLOCKMODULE = 7;
            ClassName_CARDMODULE = 9;
            ClassName_PORT = 10;
            ClassName_FAN = 16;
            ClassName_POWERSUPPLY = 17;
            ClassName_CONTAINER = 18;
            ClassName_PPMODULE = 4108;
            ClassName_SWFMODULE = 4109;
            ClassName_ECUMODULE = 4110;
            ClassName_ICUMODULE = 4111;
            ClassName_LFE = 4162;
            ClassName_CFMODULE = 4170;
            ClassName_LCD = 4181;
            ClassName_PEM = 5006;
            ClassName_CMUMODULE = 5010;
            ClassName_PIC = 5011;
            ClassName_TSU = 5012;
            ClassName_PMU = 5031;
            ClassName_PM = 5032;
         };
         ClassName class_name = 1 [json_name = "class-name"];
         bool is_resetable = 2 [json_name = "is-resetable"];
         bool is_switchoverable = 3 [json_name = "is-switchoverable"];
      }
      repeated EntityClass entity_class = 1 [json_name = "entity-class"];
   }
   EntityClasses entity_classes = 13 [json_name = "entity-classes"];
   message InconsistentEntitys {
      message InconsistentEntity {
         enum Class {
            Class_OTHER = 0;
            Class_CHASSIS = 1;
            Class_MPUMODULE = 4;
            Class_LPUMODULE = 5;
            Class_SFUMODULE = 6;
            Class_CLOCKMODULE = 7;
            Class_CARDMODULE = 9;
            Class_PORT = 10;
            Class_FAN = 16;
            Class_POWERSUPPLY = 17;
            Class_CONTAINER = 18;
            Class_PPMODULE = 4108;
            Class_SWFMODULE = 4109;
            Class_ECUMODULE = 4110;
            Class_ICUMODULE = 4111;
            Class_LFE = 4162;
            Class_CFMODULE = 4170;
            Class_LCD = 4181;
            Class_PEM = 5006;
            Class_CMUMODULE = 5010;
            Class_PIC = 5011;
            Class_TSU = 5012;
            Class_PMU = 5031;
            Class_PM = 5032;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
         string serial_number = 3 [json_name = "serial-number"];
         enum LogicalType {
            LogicalType_UNKNOWN = 0;
         };
         LogicalType logical_type = 4 [json_name = "logical-type"];
         enum PhysicalType {
            PhysicalType_UNKNOWN = 0;
         };
         PhysicalType physical_type = 5 [json_name = "physical-type"];
         enum OperState {
            OperState_UNKNOWN = 0;
            OperState_NORMAL = 1;
            OperState_FAULT = 2;
            OperState_OFFLINE = 3;
            OperState_NOTSUPPORTED = 4;
            OperState_OPTICALNOTEQUIPPED = 5;
            OperState_NOTINSTALL = 6;
            OperState_WRONGTYPE = 7;
            OperState_REGISTERED = 8;
            OperState_UNREGISTERED = 9;
            OperState_POWEROFF = 10;
            OperState_PORTX_PHYSICALX_DOWN = 11;
            OperState_ONLINE = 12;
         };
         OperState oper_state = 6 [json_name = "oper-state"];
      }
      repeated InconsistentEntity inconsistent_entity = 1 [json_name = "inconsistent-entity"];
   }
   InconsistentEntitys inconsistent_entitys = 14 [json_name = "inconsistent-entitys"];
   message OfflineCfgs {
      message Offline {
         enum Class {
            INVALID_ENUM_VALUE_Class = 0;
            Class_CHASSIS = 1;
            Class_BOARD = 3;
            Class_CARD = 8;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
      }
      repeated Offline offline = 1 [json_name = "offline"];
   }
   OfflineCfgs offline_cfgs = 15 [json_name = "offline-cfgs"];
   message ScheduleReboot {
      string datetime = 1 [json_name = "datetime"];
      string delay_time = 2 [json_name = "delay-time"];
   }
   ScheduleReboot schedule_reboot = 16 [json_name = "schedule-reboot"];
   message Offlines {
      message Offline {
         enum Class {
            INVALID_ENUM_VALUE_Class = 0;
            Class_CHASSIS = 1;
            Class_BOARD = 3;
            Class_CARD = 8;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
      }
      repeated Offline offline = 1 [json_name = "offline"];
   }
   Offlines offlines = 17 [json_name = "offlines"];
   message Clockboards {
      message Clockboard {
         string position = 1 [json_name = "position"];
         uint32 ent_index = 2 [json_name = "ent-index"];
         enum BoardType {
            BoardType_UNKNOW = 0;
            BoardType_CLOCK = 1;
         };
         BoardType board_type = 3 [json_name = "board-type"];
         uint32 up_time = 4 [json_name = "up-time"];
         enum SramState {
            SramState_ABNORMAL = 0;
            SramState_NORMAL = 1;
            SramState_UNKNOWN = 2;
         };
         SramState sram_state = 5 [json_name = "sram-state"];
      }
      repeated Clockboard clockboard = 1 [json_name = "clockboard"];
   }
   Clockboards clockboards = 18 [json_name = "clockboards"];
   message Driver {
      message Cmus {
         message Cmu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            uint32 sdram_size = 4 [json_name = "sdram-size"];
            uint32 flash_size = 5 [json_name = "flash-size"];
            uint32 up_time = 6 [json_name = "up-time"];
            enum Role {
               Role_MASTER = 0;
               Role_SLAVE = 1;
               Role_NA = 2;
            };
            Role role = 7 [json_name = "role"];
            message CmuSwitchs {
               message CmuSwitch {
                  uint32 switch_id = 1 [json_name = "switch-id"];
                  string switch_name = 2 [json_name = "switch-name"];
                  enum AlarmMode {
                     AlarmMode_OPEN = 0;
                     AlarmMode_CLOSE = 1;
                     AlarmMode_UNDO = 2;
                  };
                  AlarmMode alarm_mode = 3 [json_name = "alarm-mode"];
                  enum SwitchFog {
                     SwitchFog_UNKNOWN = 0;
                     SwitchFog_FOG = 1;
                  };
                  SwitchFog switch_fog = 4 [json_name = "switch-fog"];
               }
               repeated CmuSwitch cmu_switch = 1 [json_name = "cmu-switch"];
            }
            CmuSwitchs cmu_switchs = 8 [json_name = "cmu-switchs"];
            message CmuRelays {
               message CmuRelay {
                  uint32 relay_id = 1 [json_name = "relay-id"];
                  string relay_name = 2 [json_name = "relay-name"];
                  enum RelayAlarmMode {
                     RelayAlarmMode_OPEN = 0;
                     RelayAlarmMode_CLOSE = 1;
                     RelayAlarmMode_UNDO = 2;
                  };
                  RelayAlarmMode relay_alarm_mode = 3 [json_name = "relay-alarm-mode"];
               }
               repeated CmuRelay cmu_relay = 1 [json_name = "cmu-relay"];
            }
            CmuRelays cmu_relays = 9 [json_name = "cmu-relays"];
            message CmuAnalogs {
               message CmuAnalog {
                  uint32 analog_id = 1 [json_name = "analog-id"];
                  string analog_name = 2 [json_name = "analog-name"];
                  enum AnalogType {
                     AnalogType_UNKNOWN = 0;
                     AnalogType_CURRENT = 1;
                     AnalogType_VOLTAGE = 2;
                  };
                  AnalogType analog_type = 3 [json_name = "analog-type"];
                  enum AnalogObject {
                     AnalogObject_UNKNOWN = 0;
                     AnalogObject_TEMPERATURE = 2;
                     AnalogObject_HUMIDITY = 3;
                  };
                  AnalogObject analog_object = 4 [json_name = "analog-object"];
                  int32 work_low = 5 [json_name = "work-low"];
                  int32 work_high = 6 [json_name = "work-high"];
                  int32 wanted = 7 [json_name = "wanted"];
                  int32 alarm_low = 8 [json_name = "alarm-low"];
                  int32 alarm_high = 9 [json_name = "alarm-high"];
               }
               repeated CmuAnalog cmu_analog = 1 [json_name = "cmu-analog"];
            }
            CmuAnalogs cmu_analogs = 10 [json_name = "cmu-analogs"];
            message CmuAlarms {
               message CmuAlarm {
                  uint32 alarm_id = 1 [json_name = "alarm-id"];
                  enum AlarmLevel {
                     AlarmLevel_OPEN = 0;
                     AlarmLevel_CLOSE = 1;
                     AlarmLevel_UNDO = 2;
                  };
                  AlarmLevel alarm_level = 2 [json_name = "alarm-level"];
               }
               repeated CmuAlarm cmu_alarm = 1 [json_name = "cmu-alarm"];
            }
            CmuAlarms cmu_alarms = 11 [json_name = "cmu-alarms"];
            message Switchs {
               message Switch {
                  uint32 switch_id = 1 [json_name = "switch-id"];
                  string switch_name = 2 [json_name = "switch-name"];
                  enum AlarmTriggeringMode {
                     AlarmTriggeringMode_FALLINGX_EDGE = 0;
                     AlarmTriggeringMode_RISINGX_EDGE = 1;
                  };
                  AlarmTriggeringMode alarm_triggering_mode = 3 [json_name = "alarm-triggering-mode"];
                  enum SensorName {
                     INVALID_ENUM_VALUE_SensorName = 0;
                     SensorName_FOG = 1;
                  };
                  SensorName sensor_name = 4 [json_name = "sensor-name"];
               }
               repeated Switch switch = 1 [json_name = "switch"];
            }
            Switchs switchs = 12 [json_name = "switchs"];
            message Relays {
               message Relay {
                  uint32 relay_id = 1 [json_name = "relay-id"];
                  string relay_name = 2 [json_name = "relay-name"];
                  enum RelayMode {
                     RelayMode_OPEN = 0;
                     RelayMode_CLOSE = 1;
                  };
                  RelayMode relay_mode = 3 [json_name = "relay-mode"];
               }
               repeated Relay relay = 1 [json_name = "relay"];
            }
            Relays relays = 13 [json_name = "relays"];
            message Analogs {
               message Analog {
                  uint32 analog_id = 1 [json_name = "analog-id"];
                  string analog_name = 2 [json_name = "analog-name"];
                  enum AnalogObject {
                     INVALID_ENUM_VALUE_AnalogObject = 0;
                     AnalogObject_TEMPERATURE = 2;
                     AnalogObject_HUMIDITY = 3;
                  };
                  AnalogObject analog_object = 3 [json_name = "analog-object"];
                  enum AnalogSensorType {
                     INVALID_ENUM_VALUE_AnalogSensorType = 0;
                     AnalogSensorType_CURRENT = 1;
                     AnalogSensorType_VOLTAGE = 2;
                  };
                  AnalogSensorType analog_sensor_type = 4 [json_name = "analog-sensor-type"];
                  int32 lower_limit = 5 [json_name = "lower-limit"];
                  int32 upper_limit = 6 [json_name = "upper-limit"];
                  int32 nominal_value = 7 [json_name = "nominal-value"];
                  int32 lower_alarm_threshold = 8 [json_name = "lower-alarm-threshold"];
                  int32 high_alarm_threshold = 9 [json_name = "high-alarm-threshold"];
               }
               repeated Analog analog = 1 [json_name = "analog"];
            }
            Analogs analogs = 14 [json_name = "analogs"];
            message AlarmOutput {
               bool major_relay_output_enable = 1 [json_name = "major-relay-output-enable"];
               bool minor_relay_output_enable = 2 [json_name = "minor-relay-output-enable"];
            }
            AlarmOutput alarm_output = 15 [json_name = "alarm-output"];
         }
         repeated Cmu cmu = 1 [json_name = "cmu"];
      }
      Cmus cmus = 1 [json_name = "cmus"];
      message Pms {
         message Pm {
            string position = 1 [json_name = "position"];
            uint32 serial_number = 2 [json_name = "serial-number"];
            enum SingleInput {
               SingleInput_NA = 0;
               SingleInput_A = 1;
               SingleInput_B = 2;
            };
            SingleInput single_input = 3 [json_name = "single-input"];
            string board_type = 4 [json_name = "board-type"];
            uint32 entity_index = 5 [json_name = "entity-index"];
            enum MonitorCableState {
               MonitorCableState_UNX_PLUG = 0;
               MonitorCableState_PLUG = 1;
            };
            MonitorCableState monitor_cable_state = 6 [json_name = "monitor-cable-state"];
            string input_voltage_value = 7 [json_name = "input-voltage-value"];
            string input_electrical_value = 8 [json_name = "input-electrical-value"];
            string input_power_value = 9 [json_name = "input-power-value"];
            string output_voltage_value = 10 [json_name = "output-voltage-value"];
            string output_electrical_value = 11 [json_name = "output-electrical-value"];
            string output_power_value = 12 [json_name = "output-power-value"];
            string pm_area = 13 [json_name = "pm-area"];
            enum PmStatus {
               PmStatus_NORMAL = 0;
               PmStatus_ABNORMAL = 1;
            };
            PmStatus pm_status = 14 [json_name = "pm-status"];
         }
         repeated Pm pm = 1 [json_name = "pm"];
      }
      Pms pms = 2 [json_name = "pms"];
      message Ccus {
         message Ccu {
            string software_version = 1 [json_name = "software-version"];
         }
         Ccu ccu = 1 [json_name = "ccu"];
      }
      Ccus ccus = 3 [json_name = "ccus"];
      message Dacss {
         message Dacs {
            string position = 1 [json_name = "position"];
            uint32 serial_number = 2 [json_name = "serial-number"];
            string board_type = 3 [json_name = "board-type"];
            string dacs_area = 4 [json_name = "dacs-area"];
            uint32 entity_index = 5 [json_name = "entity-index"];
            enum Status {
               Status_NORMAL = 0;
               Status_ABNORMAL = 1;
            };
            Status status = 6 [json_name = "status"];
            string insource_plane = 7 [json_name = "insource-plane"];
            string insource_plane_a = 8 [json_name = "insource-plane-a"];
            string insource_plane_b = 9 [json_name = "insource-plane-b"];
            string output_voltage_value = 10 [json_name = "output-voltage-value"];
            string output_electrical_value = 11 [json_name = "output-electrical-value"];
            string output_status = 12 [json_name = "output-status"];
         }
         repeated Dacs dacs = 1 [json_name = "dacs"];
      }
      Dacss dacss = 4 [json_name = "dacss"];
      message Fans {
         message Fan {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_AUTO = 1;
               WorkMode_MANUAL = 2;
               WorkMode_SILENT = 4;
               WorkMode_FULL = 5;
               WorkMode_MINIMUMX_PERCENT = 9;
               WorkMode_DENOISE = 11;
            };
            WorkMode work_mode = 4 [json_name = "work-mode"];
            uint32 speed = 5 [json_name = "speed"];
            uint32 fan_rate = 6 [json_name = "fan-rate"];
            enum MonitorCableState {
               MonitorCableState_UNX_PLUG = 0;
               MonitorCableState_PLUG = 1;
            };
            MonitorCableState monitor_cable_state = 7 [json_name = "monitor-cable-state"];
            enum Register {
               Register_NO = 0;
               Register_YES = 1;
            };
            Register register = 8 [json_name = "register"];
            enum Present {
               Present_NO = 0;
               Present_YES = 1;
            };
            Present present = 9 [json_name = "present"];
            uint32 fan_number = 10 [json_name = "fan-number"];
            string global_speed = 11 [json_name = "global-speed"];
         }
         repeated Fan fan = 1 [json_name = "fan"];
      }
      Fans fans = 5 [json_name = "fans"];
      message Icus {
         message Icu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            uint32 sdram_size = 4 [json_name = "sdram-size"];
            uint32 flash_size = 5 [json_name = "flash-size"];
            uint32 up_time = 6 [json_name = "up-time"];
         }
         repeated Icu icu = 1 [json_name = "icu"];
      }
      Icus icus = 6 [json_name = "icus"];
      message Pmus {
         message Pmu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            string present = 4 [json_name = "present"];
            string ha_status = 5 [json_name = "ha-status"];
            string register = 6 [json_name = "register"];
            string work = 7 [json_name = "work"];
         }
         repeated Pmu pmu = 1 [json_name = "pmu"];
      }
      Pmus pmus = 7 [json_name = "pmus"];
      message PowerSupplys {
         message PowerSupply {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_DC = 1;
               WorkMode_AC = 2;
               WorkMode_HVDC = 3;
               WorkMode_UNKNOWN = 4;
            };
            WorkMode work_mode = 4 [json_name = "work-mode"];
            enum MonitorCableState {
               MonitorCableState_UNX_PLUG = 0;
               MonitorCableState_PLUG = 1;
            };
            MonitorCableState monitor_cable_state = 5 [json_name = "monitor-cable-state"];
            string power_state = 6 [json_name = "power-state"];
            uint32 abnormal_number = 7 [json_name = "abnormal-number"];
            uint32 normal_number = 8 [json_name = "normal-number"];
            message PowerEnvironments {
               message PowerEnvironment {
                  uint32 pem_index = 1 [json_name = "pem-index"];
                  string voltage_value = 2 [json_name = "voltage-value"];
                  string electrical_value = 3 [json_name = "electrical-value"];
                  string temperature_value = 4 [json_name = "temperature-value"];
                  string power_value = 5 [json_name = "power-value"];
                  string out_voltage_value = 6 [json_name = "out-voltage-value"];
                  string out_electrical_value = 7 [json_name = "out-electrical-value"];
                  string out_power_value = 8 [json_name = "out-power-value"];
               }
               repeated PowerEnvironment power_environment = 1 [json_name = "power-environment"];
            }
            PowerEnvironments power_environments = 9 [json_name = "power-environments"];
         }
         repeated PowerSupply power_supply = 1 [json_name = "power-supply"];
      }
      PowerSupplys power_supplys = 8 [json_name = "power-supplys"];
      message Dmus {
         message Dmu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            string present = 4 [json_name = "present"];
            string register = 5 [json_name = "register"];
            string work = 6 [json_name = "work"];
         }
         repeated Dmu dmu = 1 [json_name = "dmu"];
      }
      Dmus dmus = 9 [json_name = "dmus"];
      message Pdus {
         message Pdu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_DC = 1;
               WorkMode_AC = 2;
               WorkMode_HVDC = 3;
               WorkMode_UNKNOWN = 4;
            };
            WorkMode work_mode = 4 [json_name = "work-mode"];
            string power_state = 5 [json_name = "power-state"];
            string abnormal_number = 6 [json_name = "abnormal-number"];
            string normal_number = 7 [json_name = "normal-number"];
         }
         repeated Pdu pdu = 1 [json_name = "pdu"];
      }
      Pdus pdus = 10 [json_name = "pdus"];
      message Vsus {
         message Vsu {
            string position = 1 [json_name = "position"];
            enum ServiceType {
               INVALID_ENUM_VALUE_ServiceType = 0;
               ServiceType_CGN = 1;
               ServiceType_QOE = 3;
            };
            ServiceType service_type = 2 [json_name = "service-type"];
         }
         repeated Vsu vsu = 1 [json_name = "vsu"];
      }
      Vsus vsus = 11 [json_name = "vsus"];
      message Ecus {
         message Ecu {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
            uint32 sdram_size = 4 [json_name = "sdram-size"];
            uint32 flash_size = 5 [json_name = "flash-size"];
            uint32 up_time = 6 [json_name = "up-time"];
            uint32 ofc_card_number = 7 [json_name = "ofc-card-number"];
            uint32 subcard_slot_number = 8 [json_name = "subcard-slot-number"];
         }
         repeated Ecu ecu = 1 [json_name = "ecu"];
      }
      Ecus ecus = 12 [json_name = "ecus"];
      message Lcds {
         message Lcd {
            string position = 1 [json_name = "position"];
            uint32 entity_index = 2 [json_name = "entity-index"];
            string board_type = 3 [json_name = "board-type"];
         }
         repeated Lcd lcd = 1 [json_name = "lcd"];
      }
      Lcds lcds = 13 [json_name = "lcds"];
      message Disks {
         message Disk {
            string position = 1 [json_name = "position"];
            enum Type {
               Type_HARDX_DISK = 0;
               Type_USBX_FLASHX_DRIVE = 1;
            };
            Type type = 2 [json_name = "type"];
            string present = 3 [json_name = "present"];
            string power = 4 [json_name = "power"];
            string register = 5 [json_name = "register"];
            string vendor = 6 [json_name = "vendor"];
            string serial_number = 7 [json_name = "serial-number"];
            string firmware_version = 8 [json_name = "firmware-version"];
         }
         repeated Disk disk = 1 [json_name = "disk"];
      }
      Disks disks = 14 [json_name = "disks"];
   }
   Driver driver = 19 [json_name = "driver"];
   message FwdPerformanceAlarms {
      message FwdPerformanceAlarm {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 report_threshold = 2 [json_name = "report-threshold"];
         uint32 clear_threshold = 3 [json_name = "clear-threshold"];
      }
      repeated FwdPerformanceAlarm fwd_performance_alarm = 1 [json_name = "fwd-performance-alarm"];
   }
   FwdPerformanceAlarms fwd_performance_alarms = 20 [json_name = "fwd-performance-alarms"];
   message FwdServicesAlarms {
      message FwdServicesAlarm {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 report_threshold = 2 [json_name = "report-threshold"];
         uint32 clear_threshold = 3 [json_name = "clear-threshold"];
      }
      repeated FwdServicesAlarm fwd_services_alarm = 1 [json_name = "fwd-services-alarm"];
   }
   FwdServicesAlarms fwd_services_alarms = 21 [json_name = "fwd-services-alarms"];
   message FwdReassemblyAlarms {
      message FwdReassemblyAlarm {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 report_threshold = 2 [json_name = "report-threshold"];
         uint32 clear_threshold = 3 [json_name = "clear-threshold"];
      }
      repeated FwdReassemblyAlarm fwd_reassembly_alarm = 1 [json_name = "fwd-reassembly-alarm"];
   }
   FwdReassemblyAlarms fwd_reassembly_alarms = 22 [json_name = "fwd-reassembly-alarms"];
   message FwdBoardFlowAlarms {
      message FwdBoardFlowAlarm {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 input_report_threshold = 2 [json_name = "input-report-threshold"];
         uint32 input_clear_threshold = 3 [json_name = "input-clear-threshold"];
         uint32 output_report_threshold = 4 [json_name = "output-report-threshold"];
         uint32 output_clear_threshold = 5 [json_name = "output-clear-threshold"];
      }
      repeated FwdBoardFlowAlarm fwd_board_flow_alarm = 1 [json_name = "fwd-board-flow-alarm"];
   }
   FwdBoardFlowAlarms fwd_board_flow_alarms = 23 [json_name = "fwd-board-flow-alarms"];
   message ForwardCpuAlarm {
      uint32 threshold = 1 [json_name = "threshold"];
      bool log_enable = 2 [json_name = "log-enable"];
      bool trap_enable = 3 [json_name = "trap-enable"];
   }
   ForwardCpuAlarm forward_cpu_alarm = 24 [json_name = "forward-cpu-alarm"];
   message ForwardVcpuAlarm {
      uint32 threshold = 1 [json_name = "threshold"];
      bool log_enable = 2 [json_name = "log-enable"];
      bool trap_enable = 3 [json_name = "trap-enable"];
   }
   ForwardVcpuAlarm forward_vcpu_alarm = 25 [json_name = "forward-vcpu-alarm"];
   message ActiveHardwareAlarmInfos {
      message ActiveHardwareAlarmInfo {
         uint32 sequence = 1 [json_name = "sequence"];
         string position = 2 [json_name = "position"];
         uint32 alarm_id = 3 [json_name = "alarm-id"];
         string level = 4 [json_name = "level"];
         string generated_time = 5 [json_name = "generated-time"];
         string info = 6 [json_name = "info"];
      }
      repeated ActiveHardwareAlarmInfo active_hardware_alarm_info = 1 [json_name = "active-hardware-alarm-info"];
   }
   ActiveHardwareAlarmInfos active_hardware_alarm_infos = 26 [json_name = "active-hardware-alarm-infos"];
   message HistoryHardwareAlarmInfos {
      message HistoryHardwareAlarmInfo {
         uint32 sequence = 1 [json_name = "sequence"];
         string position = 2 [json_name = "position"];
         uint32 alarm_id = 3 [json_name = "alarm-id"];
         string level = 4 [json_name = "level"];
         string generated_time = 5 [json_name = "generated-time"];
         string info = 6 [json_name = "info"];
      }
      repeated HistoryHardwareAlarmInfo history_hardware_alarm_info = 1 [json_name = "history-hardware-alarm-info"];
   }
   HistoryHardwareAlarmInfos history_hardware_alarm_infos = 27 [json_name = "history-hardware-alarm-infos"];
   message RemotePorts {
      message RemotePort {
         string name = 1 [json_name = "name"];
         enum LoopbackMode {
            LoopbackMode_NOLOOPBACK = 0;
            LoopbackMode_LOCALLOOPBACK = 1;
            LoopbackMode_REMOTELOOPBACK = 2;
         };
         LoopbackMode loopback_mode = 2 [json_name = "loopback-mode"];
         uint32 tx_enable_delay = 3 [json_name = "tx-enable-delay"];
         message Ethernet {
            enum FlowControl {
               FlowControl_ALLX_DISABLE = 0;
               FlowControl_RECEIVEX_ENABLE = 1;
               FlowControl_SENDX_ENABLE = 2;
               FlowControl_ALLX_ENABLE = 3;
            };
            FlowControl flow_control = 1 [json_name = "flow-control"];
            enum TransMode {
               TransMode_LANX_MODE = 0;
               TransMode_WANX_MODE = 1;
            };
            TransMode trans_mode = 2 [json_name = "trans-mode"];
            uint32 down_hold_time = 3 [json_name = "down-hold-time"];
            uint32 up_hold_time = 4 [json_name = "up-hold-time"];
            enum HoldUp {
               HoldUp_DISABLE = 0;
               HoldUp_ENABLE = 1;
            };
            HoldUp hold_up = 5 [json_name = "hold-up"];
            enum InterPacketGap {
               InterPacketGap_SHRINK = 0;
               InterPacketGap_NONX_SHRINK = 1;
            };
            InterPacketGap inter_packet_gap = 6 [json_name = "inter-packet-gap"];
            message EthWanAttr {
               enum FrameFormat {
                  FrameFormat_SDH = 0;
                  FrameFormat_SONET = 1;
               };
               FrameFormat frame_format = 1 [json_name = "frame-format"];
               enum J0Mode {
                  INVALID_ENUM_VALUE_J0Mode = 0;
                  J0Mode_X_1BYTE = 1;
                  J0Mode_X_16BYTE = 16;
                  J0Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               };
               J0Mode j0_mode = 2 [json_name = "j0-mode"];
               uint32 j0_value = 3 [json_name = "j0-value"];
               string j0_trace = 4 [json_name = "j0-trace"];
               enum J1Mode {
                  INVALID_ENUM_VALUE_J1Mode = 0;
                  J1Mode_X_1BYTE = 1;
                  J1Mode_X_16BYTE = 16;
                  J1Mode_X_64BYTEX_ORX_NULLX_MODE = 64;
               };
               J1Mode j1_mode = 5 [json_name = "j1-mode"];
               uint32 j1_value = 6 [json_name = "j1-value"];
               string j1_trace = 7 [json_name = "j1-trace"];
               uint32 c2 = 8 [json_name = "c2"];
               enum Clock {
                  Clock_MASTER = 0;
                  Clock_SLAVE = 1;
               };
               Clock clock = 9 [json_name = "clock"];
               enum Scramble {
                  Scramble_DISABLE = 0;
                  Scramble_ENABLE = 3;
               };
               Scramble scramble = 10 [json_name = "scramble"];
            }
            EthWanAttr eth_wan_attr = 7 [json_name = "eth-wan-attr"];
            enum Speed {
               Speed_X_10M = 0;
               Speed_X_100M = 1;
               Speed_X_1000M = 3;
               Speed_AUTO = 9;
            };
            Speed speed = 8 [json_name = "speed"];
            enum Duplex {
               Duplex_AUTO = 0;
               Duplex_HALF = 1;
               Duplex_FULL = 2;
            };
            Duplex duplex = 9 [json_name = "duplex"];
            enum Negotiation {
               Negotiation_DISABLE = 0;
               Negotiation_ENABLE = 1;
               Negotiation_DEFAULT = 255;
            };
            Negotiation negotiation = 10 [json_name = "negotiation"];
            enum NegotiationMode {
               NegotiationMode_SLAVE = 0;
               NegotiationMode_MASTER = 1;
            };
            NegotiationMode negotiation_mode = 11 [json_name = "negotiation-mode"];
            enum GfMediaType {
               GfMediaType_AUTO = 0;
               GfMediaType_FIBER1000 = 1;
               GfMediaType_FIBER100 = 2;
               GfMediaType_COPPER = 3;
            };
            GfMediaType gf_media_type = 12 [json_name = "gf-media-type"];
            enum FlowControlState {
               FlowControlState_ALLX_DISABLE = 0;
               FlowControlState_RECEIVEX_ENABLE = 1;
               FlowControlState_SENDX_ENABLE = 2;
               FlowControlState_ALLX_ENABLE = 3;
            };
            FlowControlState flow_control_state = 13 [json_name = "flow-control-state"];
         }
         Ethernet ethernet = 4 [json_name = "ethernet"];
         message Laser {
            enum AutoShutEnable {
               AutoShutEnable_DISABLE = 0;
               AutoShutEnable_ENABLE = 1;
            };
            AutoShutEnable auto_shut_enable = 1 [json_name = "auto-shut-enable"];
            uint32 open_time = 2 [json_name = "open-time"];
            uint32 close_time = 3 [json_name = "close-time"];
         }
         Laser laser = 5 [json_name = "laser"];
         message OpticalModule {
            bool rx_high_power_warn_enable = 1 [json_name = "rx-high-power-warn-enable"];
            bool rx_low_power_warn_enable = 2 [json_name = "rx-low-power-warn-enable"];
            bool tx_high_power_warn_enable = 3 [json_name = "tx-high-power-warn-enable"];
            bool tx_low_power_warn_enable = 4 [json_name = "tx-low-power-warn-enable"];
            bool volt_high_warn_enable = 5 [json_name = "volt-high-warn-enable"];
            bool volt_low_warn_enable = 6 [json_name = "volt-low-warn-enable"];
            enum WavelengthChannelNumber {
               WavelengthChannelNumber_X_196X_10THZX_1528X_773NM = 0;
               WavelengthChannelNumber_X_196X_05THZX_1529X_163NM = 1;
               WavelengthChannelNumber_X_196X_00THZX_1529X_553NM = 2;
               WavelengthChannelNumber_X_195X_95THZX_1529X_944NM = 3;
               WavelengthChannelNumber_X_195X_90THZX_1530X_334NM = 4;
               WavelengthChannelNumber_X_195X_85THZX_1530X_725NM = 5;
               WavelengthChannelNumber_X_195X_80THZX_1531X_116NM = 6;
               WavelengthChannelNumber_X_195X_75THZX_1531X_507NM = 7;
               WavelengthChannelNumber_X_195X_70THZX_1531X_898NM = 8;
               WavelengthChannelNumber_X_195X_65THZX_1532X_290NM = 9;
               WavelengthChannelNumber_X_195X_60THZX_1532X_681NM = 10;
               WavelengthChannelNumber_X_195X_55THZX_1533X_073NM = 11;
               WavelengthChannelNumber_X_195X_50THZX_1533X_465NM = 12;
               WavelengthChannelNumber_X_195X_45THZX_1533X_858NM = 13;
               WavelengthChannelNumber_X_195X_40THZX_1534X_250NM = 14;
               WavelengthChannelNumber_X_195X_35THZX_1534X_643NM = 15;
               WavelengthChannelNumber_X_195X_30THZX_1535X_036NM = 16;
               WavelengthChannelNumber_X_195X_25THZX_1535X_429NM = 17;
               WavelengthChannelNumber_X_195X_20THZX_1535X_822NM = 18;
               WavelengthChannelNumber_X_195X_15THZX_1536X_216NM = 19;
               WavelengthChannelNumber_X_195X_10THZX_1536X_609NM = 20;
               WavelengthChannelNumber_X_195X_05THZX_1537X_003NM = 21;
               WavelengthChannelNumber_X_195X_00THZX_1537X_397NM = 22;
               WavelengthChannelNumber_X_194X_95THZX_1537X_792NM = 23;
               WavelengthChannelNumber_X_194X_90THZX_1538X_186NM = 24;
               WavelengthChannelNumber_X_194X_85THZX_1538X_581NM = 25;
               WavelengthChannelNumber_X_194X_80THZX_1538X_976NM = 26;
               WavelengthChannelNumber_X_194X_75THZX_1539X_371NM = 27;
               WavelengthChannelNumber_X_194X_70THZX_1539X_766NM = 28;
               WavelengthChannelNumber_X_194X_65THZX_1540X_162NM = 29;
               WavelengthChannelNumber_X_194X_60THZX_1540X_557NM = 30;
               WavelengthChannelNumber_X_194X_55THZX_1540X_953NM = 31;
               WavelengthChannelNumber_X_194X_50THZX_1541X_349NM = 32;
               WavelengthChannelNumber_X_194X_45THZX_1541X_746NM = 33;
               WavelengthChannelNumber_X_194X_40THZX_1542X_142NM = 34;
               WavelengthChannelNumber_X_194X_35THZX_1542X_539NM = 35;
               WavelengthChannelNumber_X_194X_30THZX_1542X_936NM = 36;
               WavelengthChannelNumber_X_194X_25THZX_1543X_333NM = 37;
               WavelengthChannelNumber_X_194X_20THZX_1543X_730NM = 38;
               WavelengthChannelNumber_X_194X_15THZX_1544X_128NM = 39;
               WavelengthChannelNumber_X_194X_10THZX_1544X_526NM = 40;
               WavelengthChannelNumber_X_194X_05THZX_1544X_924NM = 41;
               WavelengthChannelNumber_X_194X_00THZX_1545X_322NM = 42;
               WavelengthChannelNumber_X_193X_95THZX_1545X_720NM = 43;
               WavelengthChannelNumber_X_193X_90THZX_1546X_119NM = 44;
               WavelengthChannelNumber_X_193X_85THZX_1546X_518NM = 45;
               WavelengthChannelNumber_X_193X_80THZX_1546X_917NM = 46;
               WavelengthChannelNumber_X_193X_75THZX_1547X_316NM = 47;
               WavelengthChannelNumber_X_193X_70THZX_1547X_715NM = 48;
               WavelengthChannelNumber_X_193X_65THZX_1548X_115NM = 49;
               WavelengthChannelNumber_X_193X_60THZX_1548X_515NM = 50;
               WavelengthChannelNumber_X_193X_55THZX_1548X_915NM = 51;
               WavelengthChannelNumber_X_193X_50THZX_1549X_315NM = 52;
               WavelengthChannelNumber_X_193X_45THZX_1549X_715NM = 53;
               WavelengthChannelNumber_X_193X_40THZX_1550X_116NM = 54;
               WavelengthChannelNumber_X_193X_35THZX_1550X_517NM = 55;
               WavelengthChannelNumber_X_193X_30THZX_1550X_918NM = 56;
               WavelengthChannelNumber_X_193X_25THZX_1551X_319NM = 57;
               WavelengthChannelNumber_X_193X_20THZX_1551X_721NM = 58;
               WavelengthChannelNumber_X_193X_15THZX_1552X_122NM = 59;
               WavelengthChannelNumber_X_193X_10THZX_1552X_524NM = 60;
               WavelengthChannelNumber_X_193X_05THZX_1552X_926NM = 61;
               WavelengthChannelNumber_X_193X_00THZX_1553X_329NM = 62;
               WavelengthChannelNumber_X_192X_95THZX_1553X_731NM = 63;
               WavelengthChannelNumber_X_192X_90THZX_1554X_134NM = 64;
               WavelengthChannelNumber_X_192X_85THZX_1554X_537NM = 65;
               WavelengthChannelNumber_X_192X_80THZX_1554X_940NM = 66;
               WavelengthChannelNumber_X_192X_75THZX_1555X_343NM = 67;
               WavelengthChannelNumber_X_192X_70THZX_1555X_747NM = 68;
               WavelengthChannelNumber_X_192X_65THZX_1556X_151NM = 69;
               WavelengthChannelNumber_X_192X_60THZX_1556X_555NM = 70;
               WavelengthChannelNumber_X_192X_55THZX_1556X_959NM = 71;
               WavelengthChannelNumber_X_192X_50THZX_1557X_363NM = 72;
               WavelengthChannelNumber_X_192X_45THZX_1557X_768NM = 73;
               WavelengthChannelNumber_X_192X_40THZX_1558X_173NM = 74;
               WavelengthChannelNumber_X_192X_35THZX_1558X_578NM = 75;
               WavelengthChannelNumber_X_192X_30THZX_1558X_983NM = 76;
               WavelengthChannelNumber_X_192X_25THZX_1559X_389NM = 77;
               WavelengthChannelNumber_X_192X_20THZX_1559X_794NM = 78;
               WavelengthChannelNumber_X_192X_15THZX_1560X_200NM = 79;
               WavelengthChannelNumber_X_192X_10THZX_1560X_606NM = 80;
               WavelengthChannelNumber_X_192X_05THZX_1561X_013NM = 81;
               WavelengthChannelNumber_X_192X_00THZX_1561X_419NM = 82;
               WavelengthChannelNumber_X_191X_95THZX_1561X_826NM = 83;
               WavelengthChannelNumber_X_191X_90THZX_1562X_233NM = 84;
               WavelengthChannelNumber_X_191X_85THZX_1562X_640NM = 85;
               WavelengthChannelNumber_X_191X_80THZX_1563X_047NM = 86;
               WavelengthChannelNumber_X_191X_75THZX_1563X_455NM = 87;
               WavelengthChannelNumber_X_191X_70THZX_1563X_863NM = 88;
               WavelengthChannelNumber_X_191X_65THZX_1564X_271NM = 89;
               WavelengthChannelNumber_X_191X_60THZX_1564X_679NM = 90;
               WavelengthChannelNumber_X_191X_55THZX_1565X_087NM = 91;
               WavelengthChannelNumber_X_191X_50THZX_1565X_496NM = 92;
               WavelengthChannelNumber_X_191X_45THZX_1565X_905NM = 93;
               WavelengthChannelNumber_X_191X_40THZX_1566X_314NM = 94;
               WavelengthChannelNumber_X_191X_35THZX_1566X_723NM = 95;
               WavelengthChannelNumber_X_191X_30THZX_1567X_133NM = 96;
               WavelengthChannelNumber_X_191X_25THZX_1567X_542NM = 97;
               WavelengthChannelNumber_X_191X_20THZX_1567X_952NM = 98;
               WavelengthChannelNumber_X_191X_15THZX_1568X_362NM = 99;
            };
            WavelengthChannelNumber wavelength_channel_number = 7 [json_name = "wavelength-channel-number"];
            uint32 tunable_wavelength = 8 [json_name = "tunable-wavelength"];
            uint32 tunable_frequency = 9 [json_name = "tunable-frequency"];
         }
         OpticalModule optical_module = 6 [json_name = "optical-module"];
         message TransmissionAlarm {
            uint32 holdoff_timer = 1 [json_name = "holdoff-timer"];
            uint32 holdup_timer = 2 [json_name = "holdup-timer"];
            uint32 threshold_b3tca = 3 [json_name = "threshold-b3tca"];
            uint32 threshold_b1tca = 4 [json_name = "threshold-b1tca"];
            uint32 threshold_b2tca = 5 [json_name = "threshold-b2tca"];
            uint32 threshold_sdbere = 6 [json_name = "threshold-sdbere"];
            uint32 threshold_sfbere = 7 [json_name = "threshold-sfbere"];
            uint32 damp_suppress = 8 [json_name = "damp-suppress"];
            uint32 damp_reuse = 9 [json_name = "damp-reuse"];
            uint32 damp_ceiling = 10 [json_name = "damp-ceiling"];
            uint32 damp_decay_ok = 11 [json_name = "damp-decay-ok"];
            uint32 damp_decay_ng = 12 [json_name = "damp-decay-ng"];
            message TransAlarmIfDowns {
               message TransAlarmIfDown {
                  enum AlarmType {
                     AlarmType_AUAIS = 0;
                     AlarmType_B3TCA = 1;
                     AlarmType_LAIS = 2;
                     AlarmType_LOF = 3;
                     AlarmType_LOM = 4;
                     AlarmType_LOP = 5;
                     AlarmType_LOS = 6;
                     AlarmType_LRDI = 7;
                     AlarmType_LREI = 8;
                     AlarmType_OOF = 9;
                     AlarmType_PAIS = 10;
                     AlarmType_PRDI = 11;
                     AlarmType_PREI = 12;
                     AlarmType_PPLM = 13;
                     AlarmType_RDOOL = 14;
                     AlarmType_RROOL = 15;
                     AlarmType_SDBERE = 16;
                     AlarmType_SFBERE = 17;
                     AlarmType_TROOL = 18;
                     AlarmType_PUNEQ = 19;
                     AlarmType_LCD = 20;
                     AlarmType_B1TCA = 40;
                     AlarmType_B2TCA = 41;
                  };
                  AlarmType alarm_type = 1 [json_name = "alarm-type"];
                  bool if_down = 2 [json_name = "if-down"];
               }
               repeated TransAlarmIfDown trans_alarm_if_down = 1 [json_name = "trans-alarm-if-down"];
            }
            TransAlarmIfDowns trans_alarm_if_downs = 13 [json_name = "trans-alarm-if-downs"];
         }
         TransmissionAlarm transmission_alarm = 7 [json_name = "transmission-alarm"];
         message PortAlarm {
            bool crc_enable_down = 1 [json_name = "crc-enable-down"];
            bool input_enable_down = 2 [json_name = "input-enable-down"];
            uint32 input_error_high_threshold = 3 [json_name = "input-error-high-threshold"];
            uint32 input_error_low_threshold = 4 [json_name = "input-error-low-threshold"];
            uint32 input_error_interval = 5 [json_name = "input-error-interval"];
            bool output_enable_down = 6 [json_name = "output-enable-down"];
            uint32 output_error_high_threshold = 7 [json_name = "output-error-high-threshold"];
            uint32 output_error_low_threshold = 8 [json_name = "output-error-low-threshold"];
            uint32 output_error_interval = 9 [json_name = "output-error-interval"];
            bool physical_updown_enable = 10 [json_name = "physical-updown-enable"];
            message EthPortAlarm {
               bool symbol_enable_down = 1 [json_name = "symbol-enable-down"];
               uint32 symbol_error_high_threshold = 2 [json_name = "symbol-error-high-threshold"];
               uint32 symbol_error_low_threshold = 3 [json_name = "symbol-error-low-threshold"];
               uint32 symbol_error_interval = 4 [json_name = "symbol-error-interval"];
               bool bip8_sd_enable_down = 5 [json_name = "bip8-sd-enable-down"];
               uint32 bip8_sd_error_high_threshold = 6 [json_name = "bip8-sd-error-high-threshold"];
               uint32 bad_bytes_threshold = 7 [json_name = "bad-bytes-threshold"];
               uint32 bad_bytes_interval = 8 [json_name = "bad-bytes-interval"];
               uint32 tx_pause_error_high_threshold = 9 [json_name = "tx-pause-error-high-threshold"];
               uint32 tx_pause_error_low_threshold = 10 [json_name = "tx-pause-error-low-threshold"];
               uint32 tx_pause_error_interval = 11 [json_name = "tx-pause-error-interval"];
            }
            EthPortAlarm eth_port_alarm = 11 [json_name = "eth-port-alarm"];
            message SdhPortAlarm {
               bool sdh_enable_down = 1 [json_name = "sdh-enable-down"];
               uint32 sdh_error_high_threshold = 2 [json_name = "sdh-error-high-threshold"];
               uint32 sdh_error_low_threshold = 3 [json_name = "sdh-error-low-threshold"];
               uint32 sdh_error_interval = 4 [json_name = "sdh-error-interval"];
               uint32 sdh_b1_error_threshold = 5 [json_name = "sdh-b1-error-threshold"];
               uint32 sdh_b1_error_interval = 6 [json_name = "sdh-b1-error-interval"];
               uint32 sdh_b2_error_threshold = 7 [json_name = "sdh-b2-error-threshold"];
               uint32 sdh_b2_error_interval = 8 [json_name = "sdh-b2-error-interval"];
            }
            SdhPortAlarm sdh_port_alarm = 12 [json_name = "sdh-port-alarm"];
            message AlarmType_CrcErrorThreshold {
               message CrcErrorThreshold6 {
                  uint32 crc_error_high = 1 [json_name = "crc-error-high"];
                  uint32 crc_error_low = 2 [json_name = "crc-error-low"];
                  uint32 crc_error_interval = 3 [json_name = "crc-error-interval"];
                  bool crc_shutdown_enable = 4 [json_name = "crc-shutdown-enable"];
                  uint32 crc_error_percent_alm_thr = 5 [json_name = "crc-error-percent-alm-thr"];
               }
               CrcErrorThreshold6 crc_error_threshold = 1 [json_name = "crc-error-threshold"];
            }
            message AlarmType_LinkCrc {
               message LinkQuality {
                  uint32 link_quality_alm_thr_coefficient = 1 [json_name = "link-quality-alm-thr-coefficient"];
                  uint32 link_quality_alm_thr_power = 2 [json_name = "link-quality-alm-thr-power"];
                  uint32 link_quality_rsum_thr_coefficient = 3 [json_name = "link-quality-rsum-thr-coefficient"];
                  uint32 link_quality_rsum_thr_power = 4 [json_name = "link-quality-rsum-thr-power"];
               }
               LinkQuality link_quality = 1 [json_name = "link-quality"];
               message CrcPerAlarm {
                  uint32 crc_per_alm_thr_coefficient = 1 [json_name = "crc-per-alm-thr-coefficient"];
                  uint32 crc_per_alm_thr_power = 2 [json_name = "crc-per-alm-thr-power"];
                  uint32 crc_per_rsum_thr_coefficient = 3 [json_name = "crc-per-rsum-thr-coefficient"];
                  uint32 crc_per_rsum_thr_power = 4 [json_name = "crc-per-rsum-thr-power"];
                  bool crc_per_alm_lsp_enable = 5 [json_name = "crc-per-alm-lsp-enable"];
                  bool crc_per_alm_section_enable = 6 [json_name = "crc-per-alm-section-enable"];
                  message CrcSample {
                     uint32 crc_per_samp_win_factor = 1 [json_name = "crc-per-samp-win-factor"];
                     uint32 crc_per_child_win_max_num = 2 [json_name = "crc-per-child-win-max-num"];
                     uint32 crc_per_child_win_alarm_num = 3 [json_name = "crc-per-child-win-alarm-num"];
                     uint32 crc_per_child_win_resume_num = 4 [json_name = "crc-per-child-win-resume-num"];
                     uint32 crc_alg_realtime_factor = 5 [json_name = "crc-alg-realtime-factor"];
                  }
                  CrcSample crc_sample = 7 [json_name = "crc-sample"];
               }
               CrcPerAlarm crc_per_alarm = 2 [json_name = "crc-per-alarm"];
            }
            oneof AlarmType {
               AlarmType_CrcErrorThreshold alarm_type_crc_error_threshold = 13 [json_name = "crc-error-threshold"];
               AlarmType_LinkCrc alarm_type_link_crc = 14 [json_name = "link-crc"];
            }
         }
         PortAlarm port_alarm = 8 [json_name = "port-alarm"];
      }
      repeated RemotePort remote_port = 1 [json_name = "remote-port"];
   }
   RemotePorts remote_ports = 28 [json_name = "remote-ports"];
   message DisableHardwareAlarms {
      message DisableHardwareAlarm {
         string alarm_name = 1 [json_name = "alarm-name"];
         uint32 fault_id = 2 [json_name = "fault-id"];
      }
      repeated DisableHardwareAlarm disable_hardware_alarm = 1 [json_name = "disable-hardware-alarm"];
   }
   DisableHardwareAlarms disable_hardware_alarms = 29 [json_name = "disable-hardware-alarms"];
}


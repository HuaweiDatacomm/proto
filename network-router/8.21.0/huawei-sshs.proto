syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-14 11:05:08
// ProtoYang-version 1
// module huawei-sshs
// revision 2020-07-02
// namespace urn:huawei:yang:huawei-sshs

package huawei_sshs;

message Sshs {
   message CallHomes {
      message CallHome {
         string call_home_name = 1 [json_name = "call-home-name"];
         message ReconnectStrategy {
            uint32 reconnectInterval = 1;
         }
         ReconnectStrategy reconnectStrategy = 2;
         message SshEndpoints {
            message SshEndpoint {
               string address = 1;
               string endpointName = 2;
               bool isPublicNet = 3;
               uint32 port = 4;
               string srcIPAddress = 5;
               string vpnInstance = 6;
            }
            repeated SshEndpoint sshEndpoint = 1;
         }
         SshEndpoints sshEndpoints = 3;
         uint32 reconnect_interval = 4 [json_name = "reconnect-interval"];
         message EndPoints {
            message EndPoint {
               string end_point_name = 1 [json_name = "end-point-name"];
               string address = 2 [json_name = "address"];
               uint32 port = 3 [json_name = "port"];
               bool is_public_net = 4 [json_name = "is-public-net"];
               string vpn_name = 5 [json_name = "vpn-name"];
               string src_ipaddress = 6 [json_name = "src-ipaddress"];
               uint32 keepalive_interval = 7 [json_name = "keepalive-interval"];
               uint32 keepalive_count = 8 [json_name = "keepalive-count"];
               enum ConnectionStatus {
                  INVALID_ENUM_VALUE_ConnectionStatus = 0;
                  ConnectionStatus_CONNECTED = 1;
                  ConnectionStatus_DISCONNECTED = 2;
               };
               ConnectionStatus connection_status = 9 [json_name = "connection-status"];
               message AddressHostname_IpAddress {
                  string address = 1 [json_name = "address"];
               }
               message AddressHostname_HostName {
                  string host_name = 1 [json_name = "host-name"];
                  enum AddrType {
                     AddrType_IPV4 = 0;
                     AddrType_IPV6 = 1;
                  };
                  AddrType addr_type = 2 [json_name = "addr-type"];
               }
               oneof AddressHostname {
                  AddressHostname_IpAddress address_hostname_ip_address = 10 [json_name = "ip-address"];
                  AddressHostname_HostName address_hostname_host_name = 11 [json_name = "host-name"];
               }
            }
            repeated EndPoint end_point = 1 [json_name = "end-point"];
         }
         EndPoints end_points = 5 [json_name = "end-points"];
      }
      repeated CallHome call_home = 1 [json_name = "call-home"];
   }
   CallHomes call_homes = 1 [json_name = "call-homes"];
   message LoginFailAlarm {
      uint32 lower_limit = 1 [json_name = "lower-limit"];
      uint32 period = 2 [json_name = "period"];
      uint32 upper_limit = 3 [json_name = "upper-limit"];
   }
   LoginFailAlarm login_fail_alarm = 2 [json_name = "login-fail-alarm"];
   message Rekey {
      uint32 max_packet = 1 [json_name = "max-packet"];
      int32 time = 2 [json_name = "time"];
      int32 max_data = 3 [json_name = "max-data"];
   }
   Rekey rekey = 3 [json_name = "rekey"];
   message SshDefaultCfg {
      string sftpDefaultDir = 1;
   }
   SshDefaultCfg sshDefaultCfg = 4;
   message SshIPBlockAllStatss {
      message SshIPBlockAllStats {
         uint32 authFailCount = 1;
         string blockIpAddr = 2;
         enum State {
            State_AUTHX_FAILED = 0;
            State_BLOCKED = 1;
         };
         State state = 3;
         string vpnInstance = 4;
      }
      repeated SshIPBlockAllStats sshIPBlockAllStats = 1;
   }
   SshIPBlockAllStatss sshIPBlockAllStatss = 5;
   message SshIPBlockStatss {
      message SshIPBlockStats {
         string blockIpAddr = 1;
         uint32 unBlockInterval = 2;
         string vpnInstance = 3;
      }
      repeated SshIPBlockStats sshIPBlockStats = 1;
   }
   SshIPBlockStatss sshIPBlockStatss = 6;
   message SshKeyboard {
      enum KeyBdIntSup {
         KeyBdIntSup_DISABLEKEYBOARD = 0;
         KeyBdIntSup_ENABLEKEYBOARD = 1;
      };
      KeyBdIntSup keyBdIntSup = 1;
   }
   SshKeyboard sshKeyboard = 7;
   message SshNcaVtyCfg {
      int32 maxSessions = 1;
      uint32 timeoutMin = 2;
      uint32 timeoutSec = 3;
   }
   SshNcaVtyCfg sshNcaVtyCfg = 8;
   message SshSCipherAlg {
      bool aes128cbc = 1;
      bool aes128ctr = 2;
      bool aes128gcm = 3;
      bool aes192cbc = 4;
      bool aes192ctr = 5;
      bool aes256cbc = 6;
      bool aes256ctr = 7;
      bool aes256gcm = 8;
      bool arcfour128 = 9;
      bool arcfour256 = 10;
      bool blowfishcbc = 11;
      bool des3cbc = 12;
      bool descbc = 13;
   }
   SshSCipherAlg sshSCipherAlg = 9;
   message SshSHMacAlg {
      bool md5 = 1;
      bool md596 = 2;
      bool sha1 = 3;
      bool sha196 = 4;
      bool sha2256 = 5;
      bool sha225696 = 6;
      bool sha2512 = 7;
   }
   SshSHMacAlg sshSHMacAlg = 10;
   message SshSPubKeyAlg {
      bool dsa = 1;
      bool ecc = 2;
      bool rsa = 3;
   }
   SshSPubKeyAlg sshSPubKeyAlg = 11;
   message SshServer {
      int32 authRetries = 1;
      int32 authenticationTimeout = 2;
      enum CompatibleSsh1X {
         CompatibleSsh1X_DISABLE = 0;
         CompatibleSsh1X_ENABLE = 1;
      };
      CompatibleSsh1X compatibleSsh1x = 3;
      string dsaHostKey = 4;
      string eccHostKey = 5;
      bool ipBlockEnable = 6;
      enum KeepAliveEnable {
         KeepAliveEnable_DISABLE = 0;
         KeepAliveEnable_ENABLE = 1;
      };
      KeepAliveEnable keepAliveEnable = 7;
      uint32 packetDscp = 8;
      int32 portNumber = 9;
      int32 rekeyInterval = 10;
      string rsaHostKey = 11;
      string rsaServerKey = 12;
      enum ScpEnable {
         ScpEnable_DISABLE = 0;
         ScpEnable_ENABLE = 1;
      };
      ScpEnable scpEnable = 13;
      int32 scpMaxsession = 14;
      enum SftpEnable {
         SftpEnable_DISABLE = 0;
         SftpEnable_ENABLE = 1;
      };
      SftpEnable sftpEnable = 15;
      int32 sftpMaxUser = 16;
      int32 sftpOnlineUser = 17;
      uint32 sftpTimeoutMin = 18;
      uint32 sftpTimeoutSec = 19;
      enum SnetconfEnable {
         SnetconfEnable_DISABLE = 0;
         SnetconfEnable_ENABLE = 1;
      };
      SnetconfEnable snetconfEnable = 20;
      enum SnetconfPortEnable {
         SnetconfPortEnable_DISABLE = 0;
         SnetconfPortEnable_ENABLE = 1;
      };
      SnetconfPortEnable snetconfPortEnable = 21;
      string srcInterfName = 22;
      string srcIpv6Addr = 23;
      uint32 srcIpv6VpnId = 24;
      string srcIpv6VpnName = 25;
      enum SshAuthDefPass {
         SshAuthDefPass_DISABLE = 0;
         SshAuthDefPass_ENABLE = 1;
      };
      SshAuthDefPass sshAuthDefPass = 26;
      enum SshAuthorDef {
         SshAuthorDef_AAA = 0;
         SshAuthorDef_ROOT = 1;
      };
      SshAuthorDef sshAuthorDef = 27;
      enum SshVersion {
         SshVersion_SSHVER1_99 = 0;
         SshVersion_SSHVER2 = 1;
      };
      SshVersion sshVersion = 28;
      string sshacl4Name = 29;
      string sshacl4Num = 30;
      string sshacl6Name = 31;
      string sshacl6Num = 32;
      enum StelnetEnable {
         StelnetEnable_DISABLE = 0;
         StelnetEnable_ENABLE = 1;
      };
      StelnetEnable stelnetEnable = 33;
   }
   SshServer sshServer = 12;
   message SshServerEnable {
      enum Nca830V4Enable {
         Nca830V4Enable_DISABLE = 0;
         Nca830V4Enable_ENABLE = 1;
      };
      Nca830V4Enable nca830V4Enable = 1;
      enum Nca830V6Enable {
         Nca830V6Enable_DISABLE = 0;
         Nca830V6Enable_ENABLE = 1;
      };
      Nca830V6Enable nca830V6Enable = 2;
      enum ScpIpv4Enable {
         ScpIpv4Enable_DISABLE = 0;
         ScpIpv4Enable_ENABLE = 1;
      };
      ScpIpv4Enable scpIpv4Enable = 3;
      enum ScpIpv6Enable {
         ScpIpv6Enable_DISABLE = 0;
         ScpIpv6Enable_ENABLE = 1;
      };
      ScpIpv6Enable scpIpv6Enable = 4;
      enum SftpIpv4Enable {
         SftpIpv4Enable_DISABLE = 0;
         SftpIpv4Enable_ENABLE = 1;
      };
      SftpIpv4Enable sftpIpv4Enable = 5;
      enum SftpIpv6Enable {
         SftpIpv6Enable_DISABLE = 0;
         SftpIpv6Enable_ENABLE = 1;
      };
      SftpIpv6Enable sftpIpv6Enable = 6;
      enum SncaIpv4Enable {
         SncaIpv4Enable_DISABLE = 0;
         SncaIpv4Enable_ENABLE = 1;
      };
      SncaIpv4Enable sncaIpv4Enable = 7;
      enum SncaIpv6Enable {
         SncaIpv6Enable_DISABLE = 0;
         SncaIpv6Enable_ENABLE = 1;
      };
      SncaIpv6Enable sncaIpv6Enable = 8;
      enum StelIpv4Enable {
         StelIpv4Enable_DISABLE = 0;
         StelIpv4Enable_ENABLE = 1;
      };
      StelIpv4Enable stelIpv4Enable = 9;
      enum StelIpv6Enable {
         StelIpv6Enable_DISABLE = 0;
         StelIpv6Enable_ENABLE = 1;
      };
      StelIpv6Enable stelIpv6Enable = 10;
   }
   SshServerEnable sshServerEnable = 13;
   message SshServerPort {
      int32 ipv4PortNumber = 1;
      int32 ipv6PortNumber = 2;
   }
   SshServerPort sshServerPort = 14;
   message SshSessionStatuss {
      message SshSessionStatus {
         int32 SshSessNum = 1;
         enum ConnState {
            ConnState_STARTED = 0;
            ConnState_STOP = 1;
         };
         ConnState connState = 2;
         int32 connectionPort = 3;
         string ctosCipher = 4;
         string ctosCompress = 5;
         string ctosHMAC = 6;
         string keyExchange = 7;
         string serviceIndex = 8;
         string serviceType = 9;
         string sessionAuthType = 10;
         enum SessionKeyType {
            SessionKeyType_DSA = 0;
            SessionKeyType_ECC = 1;
            SessionKeyType_NOTSET = 2;
            SessionKeyType_RSA = 3;
         };
         SessionKeyType sessionKeyType = 11;
         int32 sessionRetry = 12;
         string sshVersion = 13;
         string stocCipher = 14;
         string stocCompress = 15;
         string stocHMAC = 16;
         string userName = 17;
      }
      repeated SshSessionStatus sshSessionStatus = 1;
   }
   SshSessionStatuss sshSessionStatuss = 15;
   message SshUserCfgs {
      message SshUserCfg {
         enum AuthType {
            AuthType_ALL = 0;
            AuthType_DSA = 1;
            AuthType_ECC = 2;
            AuthType_NOTSET = 3;
            AuthType_PASSWORD = 4;
            AuthType_PASSWORDX_DSA = 5;
            AuthType_PASSWORDX_ECC = 6;
            AuthType_PASSWORDX_RSA = 7;
            AuthType_RSA = 8;
         };
         AuthType authType = 1;
         string keyName = 2;
         enum PubKeyType {
            PubKeyType_DSA = 0;
            PubKeyType_ECC = 1;
            PubKeyType_NOTSET = 2;
            PubKeyType_RSA = 3;
         };
         PubKeyType pubKeyType = 3;
         string sftpDir = 4;
         enum SshServiceType {
            SshServiceType_ALL = 0;
            SshServiceType_NOTSET = 1;
            SshServiceType_SFTP = 2;
            SshServiceType_SFTPX_SNETCONF = 3;
            SshServiceType_SFTPX_SNETCONFX_STELNET = 4;
            SshServiceType_SNETCONF = 5;
            SshServiceType_STELNET = 6;
            SshServiceType_STELNETX_SFTP = 7;
            SshServiceType_STELNETX_SNETCONF = 8;
         };
         SshServiceType sshServiceType = 5;
         string userName = 6;
      }
      repeated SshUserCfg sshUserCfg = 1;
   }
   SshUserCfgs sshUserCfgs = 16;
   message SshsKexAlg {
      bool dhGroup14Sha1 = 1;
      bool dhGroup1Sha1 = 2;
      bool dhGroupExchangeSha1 = 3;
      bool dhGroupExchangeSha256 = 4;
      bool ecdhSha2Nistp256 = 5;
      bool ecdhSha2Nistp384 = 6;
      bool ecdhSha2Nistp521 = 7;
      bool sm2Kep = 8;
      uint32 sshDhMinLen = 9;
   }
   SshsKexAlg sshsKexAlg = 17;
   message SshsLocalKeys {
      message SshsLocalKey {
         string hostKeyCode = 1;
         string hostKeyName = 2;
         string hostKeyOpenSSH = 3;
         string hostKeyPEM = 4;
         string hostKeySSH1 = 5;
         uint32 keySize = 6;
         string serverKeyCode = 7;
         string serverKeyName = 8;
      }
      SshsLocalKey sshsLocalKey = 1;
   }
   SshsLocalKeys sshsLocalKeys = 18;
   message Server {
      int32 authentication_timeout = 1 [json_name = "authentication-timeout"];
      int32 rekey_interval = 2 [json_name = "rekey-interval"];
      enum KeepAliveEnable {
         INVALID_ENUM_VALUE_KeepAliveEnable = 0;
         KeepAliveEnable_ENABLE = 1;
         KeepAliveEnable_DISABLE = 2;
      };
      KeepAliveEnable keep_alive_enable = 3 [json_name = "keep-alive-enable"];
      enum CompatibleSsh1X {
         INVALID_ENUM_VALUE_CompatibleSsh1X = 0;
         CompatibleSsh1X_ENABLE = 1;
         CompatibleSsh1X_DISABLE = 2;
      };
      CompatibleSsh1X compatible_ssh1x = 4 [json_name = "compatible-ssh1x"];
      bool ip_block_enable = 5 [json_name = "ip-block-enable"];
      enum AuthorizationDef {
         AuthorizationDef_AAA = 0;
         AuthorizationDef_ROOT = 1;
      };
      AuthorizationDef authorization_def = 6 [json_name = "authorization-def"];
      enum AuthenticationDef {
         INVALID_ENUM_VALUE_AuthenticationDef = 0;
         AuthenticationDef_ENABLE = 1;
         AuthenticationDef_DISABLE = 2;
      };
      AuthenticationDef authentication_def = 7 [json_name = "authentication-def"];
      uint32 packet_dscp = 8 [json_name = "packet-dscp"];
      int32 auth_retries = 9 [json_name = "auth-retries"];
      enum AuthBogusMode {
         INVALID_ENUM_VALUE_AuthBogusMode = 0;
         AuthBogusMode_ENABLE = 1;
         AuthBogusMode_DISABLE = 2;
      };
      AuthBogusMode auth_bogus_mode = 10 [json_name = "auth-bogus-mode"];
      int32 sftp_max_user = 11 [json_name = "sftp-max-user"];
      uint32 sftp_timeout_min = 12 [json_name = "sftp-timeout-min"];
      uint32 sftp_timeout_sec = 13 [json_name = "sftp-timeout-sec"];
      int32 scp_max_session = 14 [json_name = "scp-max-session"];
      string src_ipv6_addr = 15 [json_name = "src-ipv6-addr"];
      string src_ipv6_vpn_name = 16 [json_name = "src-ipv6-vpn-name"];
      string src_interf_name = 17 [json_name = "src-interf-name"];
      string rsa_host_key = 18 [json_name = "rsa-host-key"];
      string dsa_host_key = 19 [json_name = "dsa-host-key"];
      string ecc_host_key = 20 [json_name = "ecc-host-key"];
      string sm2_host_key = 21 [json_name = "sm2-host-key"];
      string ipv4_acl_name = 22 [json_name = "ipv4-acl-name"];
      string ipv4_acl_number = 23 [json_name = "ipv4-acl-number"];
      string ipv6_acl_name = 24 [json_name = "ipv6-acl-name"];
      string ipv6_acl_number = 25 [json_name = "ipv6-acl-number"];
      enum SshVersion {
         SshVersion_SSHVER2 = 0;
         SshVersion_SSHVER1X_99 = 1;
      };
      SshVersion ssh_version = 26 [json_name = "ssh-version"];
      string rsa_server_key = 27 [json_name = "rsa-server-key"];
      string pki_domain = 28 [json_name = "pki-domain"];
      uint32 limit_session_number = 29 [json_name = "limit-session-number"];
      uint32 rsa_min_key_length = 30 [json_name = "rsa-min-key-length"];
   }
   Server server = 19 [json_name = "server"];
   message Users {
      message User {
         string name = 1 [json_name = "name"];
         enum AuthType {
            AuthType_NOTX_SET = 0;
            AuthType_PASSWORD = 1;
            AuthType_RSA = 2;
            AuthType_ALL = 3;
            AuthType_PASSWORDX_RSA = 4;
            AuthType_DSA = 5;
            AuthType_PASSWORDX_DSA = 6;
            AuthType_ECC = 7;
            AuthType_PASSWORDX_ECC = 8;
            AuthType_SM2 = 9;
            AuthType_PASSWORDX_SM2 = 10;
            AuthType_X509V3X_RSA = 11;
            AuthType_PASSWORDX_X509V3X_RSA = 12;
         };
         AuthType auth_type = 2 [json_name = "auth-type"];
         string sftp_dir = 3 [json_name = "sftp-dir"];
         string key_name = 4 [json_name = "key-name"];
         enum ServiceType {
            ServiceType_NOTX_SET = 0;
            ServiceType_STELNET = 1;
            ServiceType_SFTP = 2;
            ServiceType_SNETCONF = 3;
            ServiceType_ALL = 4;
            ServiceType_SFTPX_SNETCONF = 5;
            ServiceType_STELNETX_SFTP = 6;
            ServiceType_STELNETX_SNETCONF = 7;
            ServiceType_SFTPX_SNETCONFX_STELNET = 8;
         };
         ServiceType service_type = 5 [json_name = "service-type"];
         enum PubKeyType {
            PubKeyType_NOTX_SET = 0;
            PubKeyType_RSA = 1;
            PubKeyType_DSA = 2;
            PubKeyType_ECC = 3;
            PubKeyType_SM2 = 5;
            PubKeyType_PKI = 6;
         };
         PubKeyType pub_key_type = 6 [json_name = "pub-key-type"];
         bool cert_verify_san = 7 [json_name = "cert-verify-san"];
      }
      repeated User user = 1 [json_name = "user"];
   }
   Users users = 20 [json_name = "users"];
   message CipherAlg {
      enum Descbc {
         Descbc_FALSE = 0;
         Descbc_TRUE = 1;
      };
      Descbc descbc = 1 [json_name = "descbc"];
      enum Des3Cbc {
         Des3Cbc_FALSE = 0;
         Des3Cbc_TRUE = 1;
      };
      Des3Cbc des3cbc = 2 [json_name = "des3cbc"];
      enum Aes128Cbc {
         Aes128Cbc_FALSE = 0;
         Aes128Cbc_TRUE = 1;
      };
      Aes128Cbc aes128cbc = 3 [json_name = "aes128cbc"];
      enum Aes192Cbc {
         Aes192Cbc_FALSE = 0;
         Aes192Cbc_TRUE = 1;
      };
      Aes192Cbc aes192cbc = 4 [json_name = "aes192cbc"];
      enum Aes256Cbc {
         Aes256Cbc_FALSE = 0;
         Aes256Cbc_TRUE = 1;
      };
      Aes256Cbc aes256cbc = 5 [json_name = "aes256cbc"];
      enum Aes128Ctr {
         Aes128Ctr_FALSE = 0;
         Aes128Ctr_TRUE = 1;
      };
      Aes128Ctr aes128ctr = 6 [json_name = "aes128ctr"];
      enum Aes192Ctr {
         Aes192Ctr_FALSE = 0;
         Aes192Ctr_TRUE = 1;
      };
      Aes192Ctr aes192ctr = 7 [json_name = "aes192ctr"];
      enum Aes256Ctr {
         Aes256Ctr_FALSE = 0;
         Aes256Ctr_TRUE = 1;
      };
      Aes256Ctr aes256ctr = 8 [json_name = "aes256ctr"];
      enum Arcfour128 {
         Arcfour128_FALSE = 0;
         Arcfour128_TRUE = 1;
      };
      Arcfour128 arcfour128 = 9 [json_name = "arcfour128"];
      enum Arcfour256 {
         Arcfour256_FALSE = 0;
         Arcfour256_TRUE = 1;
      };
      Arcfour256 arcfour256 = 10 [json_name = "arcfour256"];
      enum Blowfishcbc {
         Blowfishcbc_FALSE = 0;
         Blowfishcbc_TRUE = 1;
      };
      Blowfishcbc blowfishcbc = 11 [json_name = "blowfishcbc"];
      enum Aes128Gcm {
         Aes128Gcm_FALSE = 0;
         Aes128Gcm_TRUE = 1;
      };
      Aes128Gcm aes128gcm = 12 [json_name = "aes128gcm"];
      enum Aes256Gcm {
         Aes256Gcm_FALSE = 0;
         Aes256Gcm_TRUE = 1;
      };
      Aes256Gcm aes256gcm = 13 [json_name = "aes256gcm"];
   }
   CipherAlg cipher_alg = 21 [json_name = "cipher-alg"];
   message HmacAlg {
      enum Md5 {
         Md5_FALSE = 0;
         Md5_TRUE = 1;
      };
      Md5 md5 = 1 [json_name = "md5"];
      enum Md596 {
         Md596_FALSE = 0;
         Md596_TRUE = 1;
      };
      Md596 md596 = 2 [json_name = "md596"];
      enum Sha1 {
         Sha1_FALSE = 0;
         Sha1_TRUE = 1;
      };
      Sha1 sha1 = 3 [json_name = "sha1"];
      enum Sha196 {
         Sha196_FALSE = 0;
         Sha196_TRUE = 1;
      };
      Sha196 sha196 = 4 [json_name = "sha196"];
      enum Sha2256 {
         Sha2256_FALSE = 0;
         Sha2256_TRUE = 1;
      };
      Sha2256 sha2256 = 5 [json_name = "sha2256"];
      enum Sha225696 {
         Sha225696_FALSE = 0;
         Sha225696_TRUE = 1;
      };
      Sha225696 sha225696 = 6 [json_name = "sha225696"];
      enum Sha2512 {
         Sha2512_FALSE = 0;
         Sha2512_TRUE = 1;
      };
      Sha2512 sha2512 = 7 [json_name = "sha2512"];
   }
   HmacAlg hmac_alg = 22 [json_name = "hmac-alg"];
   message KeyExcAlg {
      enum DhGroup14Sha1 {
         DhGroup14Sha1_FALSE = 0;
         DhGroup14Sha1_TRUE = 1;
      };
      DhGroup14Sha1 dh_group14_sha1 = 1 [json_name = "dh-group14-sha1"];
      enum DhGroup1Sha1 {
         DhGroup1Sha1_FALSE = 0;
         DhGroup1Sha1_TRUE = 1;
      };
      DhGroup1Sha1 dh_group1_sha1 = 2 [json_name = "dh-group1-sha1"];
      enum EcdhSha2Nistp521 {
         EcdhSha2Nistp521_FALSE = 0;
         EcdhSha2Nistp521_TRUE = 1;
      };
      EcdhSha2Nistp521 ecdh_sha2_nistp521 = 3 [json_name = "ecdh-sha2-nistp521"];
      enum EcdhSha2Nistp384 {
         EcdhSha2Nistp384_FALSE = 0;
         EcdhSha2Nistp384_TRUE = 1;
      };
      EcdhSha2Nistp384 ecdh_sha2_nistp384 = 4 [json_name = "ecdh-sha2-nistp384"];
      enum EcdhSha2Nistp256 {
         EcdhSha2Nistp256_FALSE = 0;
         EcdhSha2Nistp256_TRUE = 1;
      };
      EcdhSha2Nistp256 ecdh_sha2_nistp256 = 5 [json_name = "ecdh-sha2-nistp256"];
      enum DhGroupExchangeSha256 {
         DhGroupExchangeSha256_FALSE = 0;
         DhGroupExchangeSha256_TRUE = 1;
      };
      DhGroupExchangeSha256 dh_group_exchange_sha256 = 6 [json_name = "dh-group-exchange-sha256"];
      enum DhGroupExchangeSha1 {
         DhGroupExchangeSha1_FALSE = 0;
         DhGroupExchangeSha1_TRUE = 1;
      };
      DhGroupExchangeSha1 dh_group_exchange_sha1 = 7 [json_name = "dh-group-exchange-sha1"];
      enum Sm2KepSha2Nistp256 {
         Sm2KepSha2Nistp256_FALSE = 0;
         Sm2KepSha2Nistp256_TRUE = 1;
      };
      Sm2KepSha2Nistp256 sm2_kep_sha2_nistp256 = 8 [json_name = "sm2-kep-sha2-nistp256"];
      uint32 dh_min_len = 9 [json_name = "dh-min-len"];
      enum DhGroup16Sha512 {
         DhGroup16Sha512_FALSE = 0;
         DhGroup16Sha512_TRUE = 1;
      };
      DhGroup16Sha512 dh_group16_sha512 = 10 [json_name = "dh-group16-sha512"];
      enum DhGroup18Sha512 {
         DhGroup18Sha512_FALSE = 0;
         DhGroup18Sha512_TRUE = 1;
      };
      DhGroup18Sha512 dh_group18_sha512 = 11 [json_name = "dh-group18-sha512"];
      enum Curve25519Sha256 {
         Curve25519Sha256_FALSE = 0;
         Curve25519Sha256_TRUE = 1;
      };
      Curve25519Sha256 curve25519_sha256 = 12 [json_name = "curve25519-sha256"];
   }
   KeyExcAlg key_exc_alg = 23 [json_name = "key-exc-alg"];
   message ServerEnable {
      enum StelnetIpv4Enable {
         INVALID_ENUM_VALUE_StelnetIpv4Enable = 0;
         StelnetIpv4Enable_ENABLE = 1;
         StelnetIpv4Enable_DISABLE = 2;
      };
      StelnetIpv4Enable stelnet_ipv4_enable = 1 [json_name = "stelnet-ipv4-enable"];
      enum StelnetIpv6Enable {
         INVALID_ENUM_VALUE_StelnetIpv6Enable = 0;
         StelnetIpv6Enable_ENABLE = 1;
         StelnetIpv6Enable_DISABLE = 2;
      };
      StelnetIpv6Enable stelnet_ipv6_enable = 2 [json_name = "stelnet-ipv6-enable"];
      enum SftpIpv4Enable {
         INVALID_ENUM_VALUE_SftpIpv4Enable = 0;
         SftpIpv4Enable_ENABLE = 1;
         SftpIpv4Enable_DISABLE = 2;
      };
      SftpIpv4Enable sftp_ipv4_enable = 3 [json_name = "sftp-ipv4-enable"];
      enum SftpIpv6Enable {
         INVALID_ENUM_VALUE_SftpIpv6Enable = 0;
         SftpIpv6Enable_ENABLE = 1;
         SftpIpv6Enable_DISABLE = 2;
      };
      SftpIpv6Enable sftp_ipv6_enable = 4 [json_name = "sftp-ipv6-enable"];
      enum ScpIpv4Enable {
         INVALID_ENUM_VALUE_ScpIpv4Enable = 0;
         ScpIpv4Enable_ENABLE = 1;
         ScpIpv4Enable_DISABLE = 2;
      };
      ScpIpv4Enable scp_ipv4_enable = 5 [json_name = "scp-ipv4-enable"];
      enum ScpIpv6Enable {
         INVALID_ENUM_VALUE_ScpIpv6Enable = 0;
         ScpIpv6Enable_ENABLE = 1;
         ScpIpv6Enable_DISABLE = 2;
      };
      ScpIpv6Enable scp_ipv6_enable = 6 [json_name = "scp-ipv6-enable"];
      enum SnetconfIpv4Enable {
         INVALID_ENUM_VALUE_SnetconfIpv4Enable = 0;
         SnetconfIpv4Enable_ENABLE = 1;
         SnetconfIpv4Enable_DISABLE = 2;
      };
      SnetconfIpv4Enable snetconf_ipv4_enable = 7 [json_name = "snetconf-ipv4-enable"];
      enum SnetconfIpv6Enable {
         INVALID_ENUM_VALUE_SnetconfIpv6Enable = 0;
         SnetconfIpv6Enable_ENABLE = 1;
         SnetconfIpv6Enable_DISABLE = 2;
      };
      SnetconfIpv6Enable snetconf_ipv6_enable = 8 [json_name = "snetconf-ipv6-enable"];
      enum Netconf830Ipv4Enable {
         INVALID_ENUM_VALUE_Netconf830Ipv4Enable = 0;
         Netconf830Ipv4Enable_ENABLE = 1;
         Netconf830Ipv4Enable_DISABLE = 2;
      };
      Netconf830Ipv4Enable netconf_830_ipv4_enable = 9 [json_name = "netconf-830-ipv4-enable"];
      enum Netconf830Ipv6Enable {
         INVALID_ENUM_VALUE_Netconf830Ipv6Enable = 0;
         Netconf830Ipv6Enable_ENABLE = 1;
         Netconf830Ipv6Enable_DISABLE = 2;
      };
      Netconf830Ipv6Enable netconf_830_ipv6_enable = 10 [json_name = "netconf-830-ipv6-enable"];
      bool tcp_forwarding = 11 [json_name = "tcp-forwarding"];
   }
   ServerEnable server_enable = 24 [json_name = "server-enable"];
   message ServerPort {
      int32 ipv4_port_number = 1 [json_name = "ipv4-port-number"];
      int32 ipv6_port_number = 2 [json_name = "ipv6-port-number"];
   }
   ServerPort server_port = 25 [json_name = "server-port"];
   message DefaultDir {
      string sftp_dir = 1 [json_name = "sftp-dir"];
   }
   DefaultDir default_dir = 26 [json_name = "default-dir"];
   message PubkeyAlg {
      bool dsa = 1 [json_name = "dsa"];
      bool ecc = 2 [json_name = "ecc"];
      bool rsa = 3 [json_name = "rsa"];
      bool sm2 = 4 [json_name = "sm2"];
      bool x509v3_ssh_rsa = 5 [json_name = "x509v3-ssh-rsa"];
      bool rsa_sha2_256 = 6 [json_name = "rsa-sha2-256"];
      bool rsa_sha2_512 = 7 [json_name = "rsa-sha2-512"];
   }
   PubkeyAlg pubkey_alg = 27 [json_name = "pubkey-alg"];
   message Keyboard {
      enum KeyboardEnable {
         KeyboardEnable_DISABLEX_KEYBOARD = 0;
         KeyboardEnable_ENABLEX_KEYBOARD = 1;
      };
      KeyboardEnable keyboard_enable = 1 [json_name = "keyboard-enable"];
   }
   Keyboard keyboard = 28 [json_name = "keyboard"];
   message Netconf {
      uint32 timeout_min = 1 [json_name = "timeout-min"];
      uint32 timeout_sec = 2 [json_name = "timeout-sec"];
      int32 max_sessions = 3 [json_name = "max-sessions"];
   }
   Netconf netconf = 29 [json_name = "netconf"];
   message Ipv4ServerSources {
      message Ipv4ServerSource {
         string src_interface = 1 [json_name = "src-interface"];
      }
      repeated Ipv4ServerSource ipv4_server_source = 1 [json_name = "ipv4-server-source"];
   }
   Ipv4ServerSources ipv4_server_sources = 30 [json_name = "ipv4-server-sources"];
   message Ipv4IsolateServerSources {
      message Ipv4IsolateServerSource {
         string src_interface = 1 [json_name = "src-interface"];
         string src_ipv4_addr = 2 [json_name = "src-ipv4-addr"];
      }
      repeated Ipv4IsolateServerSource ipv4_isolate_server_source = 1 [json_name = "ipv4-isolate-server-source"];
   }
   Ipv4IsolateServerSources ipv4_isolate_server_sources = 31 [json_name = "ipv4-isolate-server-sources"];
   message Ipv6ServerSources {
      message Ipv6ServerSource {
         string src_ipv6_addr = 1 [json_name = "src-ipv6-addr"];
         string src_ipv6_vpn_name = 2 [json_name = "src-ipv6-vpn-name"];
      }
      repeated Ipv6ServerSource ipv6_server_source = 1 [json_name = "ipv6-server-source"];
   }
   Ipv6ServerSources ipv6_server_sources = 32 [json_name = "ipv6-server-sources"];
   message Ipv6IsolateServerSources {
      message Ipv6IsolateServerSource {
         string src_interface = 1 [json_name = "src-interface"];
         string src_ipv6_addr = 2 [json_name = "src-ipv6-addr"];
      }
      repeated Ipv6IsolateServerSource ipv6_isolate_server_source = 1 [json_name = "ipv6-isolate-server-source"];
   }
   Ipv6IsolateServerSources ipv6_isolate_server_sources = 33 [json_name = "ipv6-isolate-server-sources"];
   message AllServerSource {
      bool all_ipv4_interface = 1 [json_name = "all-ipv4-interface"];
      bool all_ipv6_interface = 2 [json_name = "all-ipv6-interface"];
   }
   AllServerSource all_server_source = 34 [json_name = "all-server-source"];
   message SessionCar {
      bool enable = 1 [json_name = "enable"];
      uint32 cir_interval = 2 [json_name = "cir-interval"];
      uint32 cbs_interval = 3 [json_name = "cbs-interval"];
      uint32 pir_interval = 4 [json_name = "pir-interval"];
      uint32 pbs_interval = 5 [json_name = "pbs-interval"];
   }
   SessionCar session_car = 35 [json_name = "session-car"];
   message SessionStatuses {
      message SessionStatus {
         int32 session_num = 1 [json_name = "session-num"];
         string service_index = 2 [json_name = "service-index"];
         string version = 3 [json_name = "version"];
         enum ConnState {
            ConnState_STOP = 0;
            ConnState_STARTED = 1;
         };
         ConnState conn_state = 4 [json_name = "conn-state"];
         string user_name = 5 [json_name = "user-name"];
         string ctos_cipher = 6 [json_name = "ctos-cipher"];
         string stoc_cipher = 7 [json_name = "stoc-cipher"];
         string ctos_compress = 8 [json_name = "ctos-compress"];
         string stoc_compress = 9 [json_name = "stoc-compress"];
         string ctos_hmac = 10 [json_name = "ctos-hmac"];
         string stoc_hmac = 11 [json_name = "stoc-hmac"];
         string key_exchange = 12 [json_name = "key-exchange"];
         string service_type = 13 [json_name = "service-type"];
         int32 session_retry = 14 [json_name = "session-retry"];
         string session_auth_type = 15 [json_name = "session-auth-type"];
         int32 connection_port = 16 [json_name = "connection-port"];
         enum SessionKeyType {
            SessionKeyType_NOTX_SET = 0;
            SessionKeyType_RSA = 1;
            SessionKeyType_DSA = 2;
            SessionKeyType_ECC = 3;
            SessionKeyType_SM2 = 5;
            SessionKeyType_RSAX_SHA2X_256 = 7;
            SessionKeyType_RSAX_SHA2X_512 = 8;
         };
         SessionKeyType session_key_type = 17 [json_name = "session-key-type"];
      }
      repeated SessionStatus session_status = 1 [json_name = "session-status"];
   }
   SessionStatuses session_statuses = 36 [json_name = "session-statuses"];
}
message HwSSHLoginFailed {
   uint32 hwUserInfoLoginFailedTimes = 1;
   uint32 hwUserInfoStatisticPeriod = 2;
}
message HwSSHLoginFailedClear {
   uint32 hwUserInfoLoginFailedTimes = 1;
   uint32 hwUserInfoStatisticPeriod = 2;
}


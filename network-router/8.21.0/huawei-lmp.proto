syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-lmp
// revision 2020-03-21
// revision 2019-09-21
// namespace urn:huawei:yang:huawei-lmp

package huawei_lmp;

message Lmp {
   message LmpCcInterfaces {
      message LmpCcInterface {
         string bind_if_name = 1 [json_name = "bind-if-name"];
         string if_name = 2 [json_name = "if-name"];
      }
      repeated LmpCcInterface lmp_cc_interface = 1 [json_name = "lmp-cc-interface"];
   }
   LmpCcInterfaces lmp_cc_interfaces = 1 [json_name = "lmp-cc-interfaces"];
   message LmpGlobal {
      bool lmpEnable = 1;
   }
   LmpGlobal lmpGlobal = 2;
   message LmpNbrs {
      message LmpNbr {
         string isisSystemId = 1;
         message LmpTeLinks {
            message LmpTeLink {
               message LmpDataLinks {
                  message LmpDataLink {
                     uint32 bandwidth = 1;
                     enum Encoding {
                        Encoding_ETHERNET = 0;
                     };
                     Encoding encoding = 2;
                     string ifName = 3;
                     string localIntfId = 4;
                     string remoteIntfId = 5;
                     enum State {
                        State_DOWN = 0;
                        State_UP = 1;
                     };
                     State state = 6;
                     string switchType = 7;
                  }
                  repeated LmpDataLink lmpDataLink = 1;
               }
               LmpDataLinks lmpDataLinks = 1;
               string localLinkId = 2;
               string nbrLinkId = 3;
               enum State {
                  State_DOWN = 0;
                  State_UP = 1;
               };
               State state = 4;
               uint32 teLinkId = 5;
            }
            repeated LmpTeLink lmpTeLink = 1;
         }
         LmpTeLinks lmpTeLinks = 2;
         enum NbrMode {
            NbrMode_NONE = 0;
            NbrMode_STATIC = 1;
         };
         NbrMode nbrMode = 3;
         string nbrName = 4;
         string nodeId = 5;
      }
      repeated LmpNbr lmpNbr = 1;
   }
   LmpNbrs lmpNbrs = 3;
   message Global {
      bool enable = 1 [json_name = "enable"];
   }
   Global global = 4 [json_name = "global"];
   message Neighbors {
      message Neighbor {
         string name = 1 [json_name = "name"];
         enum Mode {
            Mode_NONE = 0;
            Mode_STATIC = 1;
         };
         Mode mode = 2 [json_name = "mode"];
         string node_id = 3 [json_name = "node-id"];
         string isis_system_id = 4 [json_name = "isis-system-id"];
         message TeLinks {
            message TeLink {
               uint32 te_link_id = 1 [json_name = "te-link-id"];
               string local_link_address = 2 [json_name = "local-link-address"];
               string remote_link_address = 3 [json_name = "remote-link-address"];
               enum State {
                  State_UP = 0;
                  State_DOWN = 1;
               };
               State state = 4 [json_name = "state"];
               message DataLinks {
                  message DataLink {
                     string if_name = 1 [json_name = "if-name"];
                     string local_link_address = 2 [json_name = "local-link-address"];
                     string remote_link_address = 3 [json_name = "remote-link-address"];
                     enum State {
                        State_UP = 0;
                        State_DOWN = 1;
                     };
                     State state = 4 [json_name = "state"];
                     uint32 bandwidth = 5 [json_name = "bandwidth"];
                     enum SwitchType {
                        SwitchType_EVPLX_TOX_EVPL = 0;
                        SwitchType_EVPLX_TOX_DCSC = 1;
                        SwitchType_DCSCX_TOX_EVPL = 2;
                        SwitchType_DCSCX_TOX_DCSC = 3;
                     };
                     SwitchType switch_type = 6 [json_name = "switch-type"];
                     enum EncodingType {
                        INVALID_ENUM_VALUE_EncodingType = 0;
                        EncodingType_ETHERNET = 2;
                     };
                     EncodingType encoding_type = 7 [json_name = "encoding-type"];
                  }
                  repeated DataLink data_link = 1 [json_name = "data-link"];
               }
               DataLinks data_links = 5 [json_name = "data-links"];
            }
            repeated TeLink te_link = 1 [json_name = "te-link"];
         }
         TeLinks te_links = 5 [json_name = "te-links"];
      }
      repeated Neighbor neighbor = 1 [json_name = "neighbor"];
   }
   Neighbors neighbors = 5 [json_name = "neighbors"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-06-08 09:14:21
// ProtoYang-version 1
// module huawei-bd
// revision 2022-02-15
// revision 2021-01-26
// revision 2020-03-13
// revision 2020-02-07
// revision 2019-12-06
// revision 2019-09-09
// namespace urn:huawei:yang:huawei-bd

package huawei_bd;

message Bd {
   message Instances {
      message Instance {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         enum AdminStatus {
            AdminStatus_UP = 0;
            AdminStatus_DOWN = 1;
         };
         AdminStatus admin_status = 3 [json_name = "admin-status"];
         enum Status {
            Status_DOWN = 0;
            Status_UP = 1;
            Status_ADMINX_DOWN = 2;
            Status_INVALID = 255;
         };
         Status status = 4 [json_name = "status"];
         enum StatisticEnable {
            StatisticEnable_DISABLE = 0;
            StatisticEnable_ENABLE = 1;
         };
         StatisticEnable statistic_enable = 5 [json_name = "statistic-enable"];
         enum StatisticDiscard {
            StatisticDiscard_DISABLE = 0;
            StatisticDiscard_ENABLE = 1;
         };
         StatisticDiscard statistic_discard = 6 [json_name = "statistic-discard"];
         enum BroadcastDiscard {
            BroadcastDiscard_DISABLE = 0;
            BroadcastDiscard_ENABLE = 1;
         };
         BroadcastDiscard broadcast_discard = 7 [json_name = "broadcast-discard"];
         enum UnknownMulticastDiscard {
            UnknownMulticastDiscard_DISABLE = 0;
            UnknownMulticastDiscard_ENABLE = 1;
         };
         UnknownMulticastDiscard unknown_multicast_discard = 8 [json_name = "unknown-multicast-discard"];
         enum UnknownUnicastDiscard {
            UnknownUnicastDiscard_DISABLE = 0;
            UnknownUnicastDiscard_ENABLE = 1;
         };
         UnknownUnicastDiscard unknown_unicast_discard = 9 [json_name = "unknown-unicast-discard"];
         enum MacLearning {
            MacLearning_DISABLE = 0;
            MacLearning_ENABLE = 1;
         };
         MacLearning mac_learning = 10 [json_name = "mac-learning"];
         uint32 mac_aging_time = 11 [json_name = "mac-aging-time"];
         enum SplitHorizon {
            SplitHorizon_DISABLE = 0;
            SplitHorizon_ENABLE = 1;
         };
         SplitHorizon split_horizon = 12 [json_name = "split-horizon"];
         message ServicePoints {
            message ServicePoint {
               string interface_name = 1 [json_name = "interface-name"];
               enum SplitHorizon {
                  SplitHorizon_DISABLE = 0;
                  SplitHorizon_ENABLE = 1;
               };
               SplitHorizon split_horizon = 2 [json_name = "split-horizon"];
               message Evpn {
                  bool e_tree_leaf = 1 [json_name = "e-tree-leaf"];
               }
               Evpn evpn = 3 [json_name = "evpn"];
               message AcSuppression {
                  string time = 1 [json_name = "time"];
                  bool unicast_inbound_flag = 2 [json_name = "unicast-inbound-flag"];
                  uint64 unicast_inbound_pass_packets = 3 [json_name = "unicast-inbound-pass-packets"];
                  uint64 unicast_inbound_pass_bytes = 4 [json_name = "unicast-inbound-pass-bytes"];
                  uint64 unicast_inbound_drop_packets = 5 [json_name = "unicast-inbound-drop-packets"];
                  uint64 unicast_inbound_drop_bytes = 6 [json_name = "unicast-inbound-drop-bytes"];
                  bool unicast_outbound_flag = 7 [json_name = "unicast-outbound-flag"];
                  uint64 unicast_outbound_pass_packets = 8 [json_name = "unicast-outbound-pass-packets"];
                  uint64 unicast_outbound_pass_bytes = 9 [json_name = "unicast-outbound-pass-bytes"];
                  uint64 unicast_outbound_drop_packets = 10 [json_name = "unicast-outbound-drop-packets"];
                  uint64 unicast_outbound_drop_bytes = 11 [json_name = "unicast-outbound-drop-bytes"];
                  bool multicast_inbound_flag = 12 [json_name = "multicast-inbound-flag"];
                  uint64 multicast_inbound_pass_packets = 13 [json_name = "multicast-inbound-pass-packets"];
                  uint64 multicast_inbound_pass_bytes = 14 [json_name = "multicast-inbound-pass-bytes"];
                  uint64 multicast_inbound_drop_packets = 15 [json_name = "multicast-inbound-drop-packets"];
                  uint64 multicast_inbound_drop_bytes = 16 [json_name = "multicast-inbound-drop-bytes"];
                  bool multicast_outbound_flag = 17 [json_name = "multicast-outbound-flag"];
                  uint64 multicast_outbound_pass_packets = 18 [json_name = "multicast-outbound-pass-packets"];
                  uint64 multicast_outbound_pass_bytes = 19 [json_name = "multicast-outbound-pass-bytes"];
                  uint64 multicast_outbound_drop_packets = 20 [json_name = "multicast-outbound-drop-packets"];
                  uint64 multicast_outbound_drop_bytes = 21 [json_name = "multicast-outbound-drop-bytes"];
                  bool broadcast_inbound_flag = 22 [json_name = "broadcast-inbound-flag"];
                  uint64 broadcast_inbound_pass_packets = 23 [json_name = "broadcast-inbound-pass-packets"];
                  uint64 broadcast_inbound_pass_bytes = 24 [json_name = "broadcast-inbound-pass-bytes"];
                  uint64 broadcast_inbound_drop_packets = 25 [json_name = "broadcast-inbound-drop-packets"];
                  uint64 broadcast_inbound_drop_bytes = 26 [json_name = "broadcast-inbound-drop-bytes"];
                  bool broadcast_outbound_flag = 27 [json_name = "broadcast-outbound-flag"];
                  uint64 broadcast_outbound_pass_packets = 28 [json_name = "broadcast-outbound-pass-packets"];
                  uint64 broadcast_outbound_pass_bytes = 29 [json_name = "broadcast-outbound-pass-bytes"];
                  uint64 broadcast_outbound_drop_packets = 30 [json_name = "broadcast-outbound-drop-packets"];
                  uint64 broadcast_outbound_drop_bytes = 31 [json_name = "broadcast-outbound-drop-bytes"];
               }
               AcSuppression ac_suppression = 4 [json_name = "ac-suppression"];
               message ProtocolActions {
                  message ProtocolAction {
                     enum ProtocolType {
                        INVALID_ENUM_VALUE_ProtocolType = 0;
                        ProtocolType_LACP = 1;
                        ProtocolType_LLDP = 2;
                        ProtocolType_BPDU = 4;
                        ProtocolType_CDP = 5;
                        ProtocolType_UDLD = 6;
                     };
                     ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                     enum Action {
                        INVALID_ENUM_VALUE_Action = 0;
                        Action_FORWARDING = 1;
                        Action_DISCARD = 2;
                        Action_TRANSPORT = 3;
                        Action_TRANSPORTX_TAGGED = 4;
                     };
                     Action action = 2 [json_name = "action"];
                     enum Mode {
                        Mode_NORMAL = 0;
                        Mode_UNTAG = 1;
                        Mode_UNTAGX_VLANX_CHECK = 2;
                     };
                     Mode mode = 3 [json_name = "mode"];
                  }
                  repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
               }
               ProtocolActions protocol_actions = 5 [json_name = "protocol-actions"];
            }
            repeated ServicePoint service_point = 1 [json_name = "service-point"];
         }
         ServicePoints service_points = 13 [json_name = "service-points"];
         message Statistics {
            uint64 inbound_packets = 1 [json_name = "inbound-packets"];
            uint64 outbound_packets = 2 [json_name = "outbound-packets"];
            uint64 inbound_bytes = 3 [json_name = "inbound-bytes"];
            uint64 outbound_bytes = 4 [json_name = "outbound-bytes"];
            uint64 inbound_unicasts = 5 [json_name = "inbound-unicasts"];
            uint64 outbound_unicasts = 6 [json_name = "outbound-unicasts"];
            uint64 inbound_multicasts = 7 [json_name = "inbound-multicasts"];
            uint64 outbound_multicasts = 8 [json_name = "outbound-multicasts"];
            uint64 inbound_broadcasts = 9 [json_name = "inbound-broadcasts"];
            uint64 outbound_broadcasts = 10 [json_name = "outbound-broadcasts"];
            uint64 inbound_unknown_unicast_drops = 11 [json_name = "inbound-unknown-unicast-drops"];
            uint64 inbound_unknown_multicast_drops = 12 [json_name = "inbound-unknown-multicast-drops"];
            uint64 inbound_broadcast_drops = 13 [json_name = "inbound-broadcast-drops"];
            uint64 outbound_pps = 14 [json_name = "outbound-pps"];
            uint64 outbound_bps = 15 [json_name = "outbound-bps"];
            uint64 inbound_pps = 16 [json_name = "inbound-pps"];
            uint64 inbound_bps = 17 [json_name = "inbound-bps"];
         }
         Statistics statistics = 14 [json_name = "statistics"];
         message BindService {
            string vsi_name = 1 [json_name = "vsi-name"];
            string evpn_name = 2 [json_name = "evpn-name"];
            uint32 vni = 3 [json_name = "vni"];
         }
         BindService bind_service = 15 [json_name = "bind-service"];
         message Evpn {
            string name = 1 [json_name = "name"];
            string esi = 2 [json_name = "esi"];
            uint32 tag = 3 [json_name = "tag"];
            message InterfaceTrackPeers {
               message InterfaceTrackPeer {
                  string es_track_address = 1 [json_name = "es-track-address"];
               }
               repeated InterfaceTrackPeer interface_track_peer = 1 [json_name = "interface-track-peer"];
            }
            InterfaceTrackPeers interface_track_peers = 4 [json_name = "interface-track-peers"];
            bool umr_originate = 5 [json_name = "umr-originate"];
            bool detail_suppressed = 6 [json_name = "detail-suppressed"];
            bool umr_forward = 7 [json_name = "umr-forward"];
            bool df_result_spread = 8 [json_name = "df-result-spread"];
            bool dci_ac_access = 9 [json_name = "dci-ac-access"];
            message EsRecover {
               uint32 timer = 1 [json_name = "timer"];
            }
            EsRecover es_recover = 10 [json_name = "es-recover"];
            bool qualify_compatible = 11 [json_name = "qualify-compatible"];
         }
         Evpn evpn = 16 [json_name = "evpn"];
         message Nvo3 {
            message VniList {
               uint32 vni = 1 [json_name = "vni"];
               bool split_horizon = 2 [json_name = "split-horizon"];
               string source_vtep_ip = 3 [json_name = "source-vtep-ip"];
            }
            repeated VniList vni_list = 1 [json_name = "vni-list"];
            message MapVnis {
               message MapVni {
                  uint32 vni = 1 [json_name = "vni"];
                  string split_group = 2 [json_name = "split-group"];
               }
               repeated MapVni map_vni = 1 [json_name = "map-vni"];
            }
            MapVnis map_vnis = 2 [json_name = "map-vnis"];
         }
         Nvo3 nvo3 = 17 [json_name = "nvo3"];
         message ArpList {
            bool l2proxy_enable = 1 [json_name = "l2proxy-enable"];
            bool l2proxy_gw_enable = 2 [json_name = "l2proxy-gw-enable"];
            message BroadcastSuppress_Enable {
               bool broadcast_suppress_enable = 1 [json_name = "broadcast-suppress-enable"];
            }
            message BroadcastSuppress_MismatchDiscardEnable {
               bool broadcast_suppress_discard = 1 [json_name = "broadcast-suppress-discard"];
            }
            oneof BroadcastSuppress {
               BroadcastSuppress_Enable broadcast_suppress_enable = 3 [json_name = "enable"];
               BroadcastSuppress_MismatchDiscardEnable broadcast_suppress_mismatch_discard_enable = 4 [json_name = "mismatch-discard-enable"];
            }
            uint32 l2proxy_expire_time = 5 [json_name = "l2proxy-expire-time"];
            bool collect_host_enable = 6 [json_name = "collect-host-enable"];
            uint32 rate_limit = 7 [json_name = "rate-limit"];
            bool dynamic_enable = 8 [json_name = "dynamic-enable"];
            message CheckItem {
               bool vxlan_tunnel = 1 [json_name = "vxlan-tunnel"];
               bool ip_check = 2 [json_name = "ip-check"];
               bool mac_check = 3 [json_name = "mac-check"];
            }
            CheckItem check_item = 9 [json_name = "check-item"];
         }
         ArpList arp_list = 18 [json_name = "arp-list"];
         message MacLimit {
            uint32 maximum = 1 [json_name = "maximum"];
            uint32 rate = 2 [json_name = "rate"];
            enum Action {
               Action_DISCARD = 0;
               Action_FORWARD = 1;
            };
            Action action = 3 [json_name = "action"];
            uint32 up_threshold = 4 [json_name = "up-threshold"];
            uint32 down_threshold = 5 [json_name = "down-threshold"];
         }
         MacLimit mac_limit = 19 [json_name = "mac-limit"];
         message IgmpSnooping {
            message Global {
               string ssm_acl = 1 [json_name = "ssm-acl"];
               uint32 version = 2 [json_name = "version"];
               bool ssm_mapping_enable = 3 [json_name = "ssm-mapping-enable"];
               string ssm_mapping_policy = 4 [json_name = "ssm-mapping-policy"];
               bool enable = 5 [json_name = "enable"];
               string group_policy_acl = 6 [json_name = "group-policy-acl"];
               uint32 group_policy_version = 7 [json_name = "group-policy-version"];
               uint32 max_response_time = 8 [json_name = "max-response-time"];
               bool immediately_leave = 9 [json_name = "immediately-leave"];
               string immediately_leave_acl = 10 [json_name = "immediately-leave-acl"];
               bool proxy_enable = 11 [json_name = "proxy-enable"];
               enum MulticastGroupModel {
                  INVALID_ENUM_VALUE_MulticastGroupModel = 0;
                  MulticastGroupModel_ASMX_SSM = 1;
                  MulticastGroupModel_ASMX_ONLY = 2;
                  MulticastGroupModel_SSMX_ONLY = 3;
               };
               MulticastGroupModel multicast_group_model = 12 [json_name = "multicast-group-model"];
               string ip_policy_acl = 13 [json_name = "ip-policy-acl"];
               string query_ip_policy_acl = 14 [json_name = "query-ip-policy-acl"];
               bool querier_election = 15 [json_name = "querier-election"];
               bool proxy_router_protocol_pass = 16 [json_name = "proxy-router-protocol-pass"];
               bool querier_enable = 17 [json_name = "querier-enable"];
               uint32 query_interval = 18 [json_name = "query-interval"];
               bool require_router_alert = 19 [json_name = "require-router-alert"];
               bool send_router_alert = 20 [json_name = "send-router-alert"];
               uint32 robustness = 21 [json_name = "robustness"];
               uint32 router_aging_time = 22 [json_name = "router-aging-time"];
               bool router_port_learning = 23 [json_name = "router-port-learning"];
               uint32 query_suppress_time = 24 [json_name = "query-suppress-time"];
               uint32 last_member_query_interval = 25 [json_name = "last-member-query-interval"];
               bool static_group_suppress_dynamic_join = 26 [json_name = "static-group-suppress-dynamic-join"];
               bool report_suppress = 27 [json_name = "report-suppress"];
               uint32 source_life_time = 28 [json_name = "source-life-time"];
               uint32 designated_vlan = 29 [json_name = "designated-vlan"];
               bool signal_smet_disable = 30 [json_name = "signal-smet-disable"];
               bool signal_synch_enable = 31 [json_name = "signal-synch-enable"];
               bool signal_ignore_df_enable = 32 [json_name = "signal-ignore-df-enable"];
               message EviRts {
                  message EviRt {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_EXPORTX_EXTCOMMUNITY = 2;
                        Type_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     Type type = 1 [json_name = "type"];
                     string value = 2 [json_name = "value"];
                  }
                  repeated EviRt evi_rt = 1 [json_name = "evi-rt"];
               }
               EviRts evi_rts = 33 [json_name = "evi-rts"];
               message Querier {
                  bool querier_state = 1 [json_name = "querier-state"];
                  string querier_address = 2 [json_name = "querier-address"];
               }
               Querier querier = 34 [json_name = "querier"];
            }
            Global global = 1 [json_name = "global"];
            message GroupPorts {
               message GroupPort {
                  string group_address = 1 [json_name = "group-address"];
                  string source_address = 2 [json_name = "source-address"];
                  uint32 source_up_time = 3 [json_name = "source-up-time"];
                  uint32 group_up_time = 4 [json_name = "group-up-time"];
                  enum EntryFlag {
                     EntryFlag_NONE = 0;
                     EntryFlag_PROTOCOL = 1;
                     EntryFlag_ACTIVE = 2;
                     EntryFlag_PROTOCOLX_ACTIVE = 3;
                     EntryFlag_FASTCHANNEL = 4;
                     EntryFlag_PROTOCOLX_FASTCHANNEL = 5;
                     EntryFlag_ACTIVEX_FASTCHANNEL = 6;
                     EntryFlag_PROTOCOLX_ACTIVEX_FASTCHANNEL = 7;
                  };
                  EntryFlag entry_flag = 5 [json_name = "entry-flag"];
                  enum SourceFlag {
                     SourceFlag_UNKNOWN = 0;
                     SourceFlag_IGMP = 1;
                     SourceFlag_ACTIVE = 2;
                     SourceFlag_IGMPX_ACTIVE = 3;
                     SourceFlag_FASTCHANNEL = 4;
                     SourceFlag_IGMPX_FASTCHANNEL = 5;
                     SourceFlag_ACTIVEX_FASTCHANNEL = 6;
                     SourceFlag_IGMPX_ACTIVEX_FASTCHANNEL = 7;
                     SourceFlag_MLD = 9;
                     SourceFlag_ACTIVE6 = 10;
                     SourceFlag_MLDX_ACTIVE6 = 11;
                     SourceFlag_FASTCHANNEL6 = 12;
                     SourceFlag_MLDX_FASTCHANNEL6 = 13;
                     SourceFlag_ACTIVE6X_FASTCHANNEL6 = 14;
                     SourceFlag_MLDX_ACTIVE6X_FASTCHANNEL6 = 15;
                     SourceFlag_TRILL = 16;
                     SourceFlag_IGMPX_TRILL = 17;
                     SourceFlag_ACTIVEX_TRILL = 18;
                     SourceFlag_IGMPX_ACTIVEX_TRILL = 19;
                  };
                  SourceFlag source_flag = 6 [json_name = "source-flag"];
                  message Ports {
                     message Port {
                        string interface = 1 [json_name = "interface"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        string port_flag = 4 [json_name = "port-flag"];
                        string esi = 5 [json_name = "esi"];
                        enum DfStatus {
                           INVALID_ENUM_VALUE_DfStatus = 0;
                           DfStatus_DF = 1;
                           DfStatus_NONX_DF = 2;
                        };
                        DfStatus df_status = 6 [json_name = "df-status"];
                        enum RemoteFlag {
                           INVALID_ENUM_VALUE_RemoteFlag = 0;
                           RemoteFlag_LOCAL = 1;
                           RemoteFlag_REMOTE = 2;
                           RemoteFlag_LOCALX_REMOTE = 3;
                        };
                        RemoteFlag remote_flag = 7 [json_name = "remote-flag"];
                     }
                     repeated Port port = 1 [json_name = "port"];
                  }
                  Ports ports = 7 [json_name = "ports"];
                  message P2MpTunnelPorts {
                     message P2MpTunnelPort {
                        string tunnel_name = 1 [json_name = "tunnel-name"];
                        uint32 port_up_time = 2 [json_name = "port-up-time"];
                        string port_flag = 3 [json_name = "port-flag"];
                     }
                     repeated P2MpTunnelPort p2mp_tunnel_port = 1 [json_name = "p2mp-tunnel-port"];
                  }
                  P2MpTunnelPorts p2mp_tunnel_ports = 8 [json_name = "p2mp-tunnel-ports"];
               }
               repeated GroupPort group_port = 1 [json_name = "group-port"];
            }
            GroupPorts group_ports = 2 [json_name = "group-ports"];
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  string group_policy_acl = 2 [json_name = "group-policy-acl"];
                  uint32 group_policy_version = 3 [json_name = "group-policy-version"];
                  bool learning = 4 [json_name = "learning"];
                  bool proxy_uplink_port = 5 [json_name = "proxy-uplink-port"];
                  uint32 pe_vid = 6 [json_name = "pe-vid"];
                  uint32 ce_vid = 7 [json_name = "ce-vid"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 3 [json_name = "interfaces"];
            message StaticGroups {
               message StaticGroup {
                  string vsi_name = 1 [json_name = "vsi-name"];
                  string remote_peer = 2 [json_name = "remote-peer"];
                  uint32 negotiation_vc_id = 3 [json_name = "negotiation-vc-id"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        string source_address = 2 [json_name = "source-address"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 4 [json_name = "groups"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 4 [json_name = "static-groups"];
            message PwStaticRouterPorts {
               message PwStaticRouterPort {
                  string vsi_name = 1 [json_name = "vsi-name"];
                  string remote_peer = 2 [json_name = "remote-peer"];
                  uint32 negotiation_vc_id = 3 [json_name = "negotiation-vc-id"];
               }
               repeated PwStaticRouterPort pw_static_router_port = 1 [json_name = "pw-static-router-port"];
            }
            PwStaticRouterPorts pw_static_router_ports = 5 [json_name = "pw-static-router-ports"];
            message SsmMappingGroups {
               message SsmMappingGroup {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 mask_length = 2 [json_name = "mask-length"];
                  string source_address = 3 [json_name = "source-address"];
               }
               repeated SsmMappingGroup ssm_mapping_group = 1 [json_name = "ssm-mapping-group"];
            }
            SsmMappingGroups ssm_mapping_groups = 6 [json_name = "ssm-mapping-groups"];
            message FastChannels {
               message FastChannel {
                  string group_address = 1 [json_name = "group-address"];
                  uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                  string source_address = 3 [json_name = "source-address"];
                  uint32 source_mask_length = 4 [json_name = "source-mask-length"];
               }
               repeated FastChannel fast_channel = 1 [json_name = "fast-channel"];
            }
            FastChannels fast_channels = 7 [json_name = "fast-channels"];
            message InterfaceStaticGroups {
               message InterfaceStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
                  string group_address = 4 [json_name = "group-address"];
                  string source_address = 5 [json_name = "source-address"];
               }
               repeated InterfaceStaticGroup interface_static_group = 1 [json_name = "interface-static-group"];
            }
            InterfaceStaticGroups interface_static_groups = 8 [json_name = "interface-static-groups"];
            message StaticRouterPorts {
               message StaticRouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
               }
               repeated StaticRouterPort static_router_port = 1 [json_name = "static-router-port"];
            }
            StaticRouterPorts static_router_ports = 9 [json_name = "static-router-ports"];
            message RouterPorts {
               message RouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
                  uint32 up_time = 4 [json_name = "up-time"];
                  uint32 expire_time = 5 [json_name = "expire-time"];
                  uint32 port_number = 6 [json_name = "port-number"];
                  enum Flag {
                     INVALID_ENUM_VALUE_Flag = 0;
                     Flag_STATIC = 1;
                     Flag_DYNAMIC = 2;
                     Flag_STATICX_DYNAMIC = 3;
                     Flag_MAPPING = 4;
                     Flag_STATICX_MAPPING = 5;
                     Flag_DYNAMICX_MAPPING = 6;
                     Flag_STATICX_DYNAMICX_MAPPING = 7;
                  };
                  Flag flag = 7 [json_name = "flag"];
               }
               repeated RouterPort router_port = 1 [json_name = "router-port"];
            }
            RouterPorts router_ports = 10 [json_name = "router-ports"];
            message InterfaceGroups {
               message InterfaceGroup {
                  string interface = 1 [json_name = "interface"];
                  enum PortType {
                     INVALID_ENUM_VALUE_PortType = 0;
                     PortType_INVALID = 1;
                     PortType_PWX_INTERFACE = 2;
                     PortType_L2X_INTERFACE = 3;
                     PortType_ENCAPSULATIONX_SUBX_INTERFACE = 4;
                     PortType_TERMINATIONX_SUBX_INTERFACE = 5;
                     PortType_INTERFACEX_BOARD = 6;
                     PortType_VLANIFX_PORT = 7;
                     PortType_VXLANX_TUNNEL = 8;
                     PortType_STACKINGX_PORT = 9;
                     PortType_MAPPINGX_PORT = 10;
                     PortType_STACKINGX_MACX_PORT = 11;
                     PortType_MAPPINGX_MACX_PORT = 12;
                  };
                  PortType port_type = 2 [json_name = "port-type"];
                  uint32 pe_vid = 3 [json_name = "pe-vid"];
                  uint32 ce_vid = 4 [json_name = "ce-vid"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum GroupTimer {
                           GroupTimer_NOTX_EXIST = 0;
                           GroupTimer_EXIST = 1;
                        };
                        GroupTimer group_timer = 4 [json_name = "group-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                        enum FilterMode {
                           FilterMode_EXCLUDE = 0;
                           FilterMode_INCLUDE = 1;
                           FilterMode_INVALID = 2;
                        };
                        FilterMode filter_mode = 7 [json_name = "filter-mode"];
                        enum CompatMode {
                           INVALID_ENUM_VALUE_CompatMode = 0;
                           CompatMode_V1 = 1;
                           CompatMode_V2 = 2;
                           CompatMode_V3 = 3;
                           CompatMode_INVALID = 255;
                        };
                        CompatMode compat_mode = 8 [json_name = "compat-mode"];
                        enum V1HostTimer {
                           V1HostTimer_NOTX_EXIST = 0;
                           V1HostTimer_EXIST = 1;
                        };
                        V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                        enum V2HostTimer {
                           V2HostTimer_NOTX_EXIST = 0;
                           V2HostTimer_EXIST = 1;
                        };
                        V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                        bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                        enum LastMemberQueryTimer {
                           LastMemberQueryTimer_NOTX_EXIST = 0;
                           LastMemberQueryTimer_EXIST = 1;
                        };
                        LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                        message Sources {
                           message Source {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 up_time = 2 [json_name = "up-time"];
                              uint32 expire_time = 3 [json_name = "expire-time"];
                              enum SourceTimer {
                                 SourceTimer_NOTX_EXIST = 0;
                                 SourceTimer_EXIST = 1;
                              };
                              SourceTimer source_timer = 4 [json_name = "source-timer"];
                              uint32 retran_count = 5 [json_name = "retran-count"];
                              bool last_member_query = 6 [json_name = "last-member-query"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 13 [json_name = "sources"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 5 [json_name = "groups"];
               }
               repeated InterfaceGroup interface_group = 1 [json_name = "interface-group"];
            }
            InterfaceGroups interface_groups = 11 [json_name = "interface-groups"];
            message PwGroups {
               message PwGroup {
                  string vsi_name = 1 [json_name = "vsi-name"];
                  string remote_peer = 2 [json_name = "remote-peer"];
                  uint32 negotiation_vc_id = 3 [json_name = "negotiation-vc-id"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum GroupTimer {
                           GroupTimer_NOTX_EXIST = 0;
                           GroupTimer_EXIST = 1;
                        };
                        GroupTimer group_timer = 4 [json_name = "group-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                        enum FilterMode {
                           FilterMode_EXCLUDE = 0;
                           FilterMode_INCLUDE = 1;
                           FilterMode_INVALID = 2;
                        };
                        FilterMode filter_mode = 7 [json_name = "filter-mode"];
                        enum CompatMode {
                           INVALID_ENUM_VALUE_CompatMode = 0;
                           CompatMode_V1 = 1;
                           CompatMode_V2 = 2;
                           CompatMode_V3 = 3;
                           CompatMode_INVALID = 255;
                        };
                        CompatMode compat_mode = 8 [json_name = "compat-mode"];
                        enum V1HostTimer {
                           V1HostTimer_NOTX_EXIST = 0;
                           V1HostTimer_EXIST = 1;
                        };
                        V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                        enum V2HostTimer {
                           V2HostTimer_NOTX_EXIST = 0;
                           V2HostTimer_EXIST = 1;
                        };
                        V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                        bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                        enum LastMemberQueryTimer {
                           LastMemberQueryTimer_NOTX_EXIST = 0;
                           LastMemberQueryTimer_EXIST = 1;
                        };
                        LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                        message Sources {
                           message Source {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 up_time = 2 [json_name = "up-time"];
                              uint32 expire_time = 3 [json_name = "expire-time"];
                              enum SourceTimer {
                                 SourceTimer_NOTX_EXIST = 0;
                                 SourceTimer_EXIST = 1;
                              };
                              SourceTimer source_timer = 4 [json_name = "source-timer"];
                              uint32 retran_count = 5 [json_name = "retran-count"];
                              bool last_member_query = 6 [json_name = "last-member-query"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 13 [json_name = "sources"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 4 [json_name = "groups"];
               }
               repeated PwGroup pw_group = 1 [json_name = "pw-group"];
            }
            PwGroups pw_groups = 12 [json_name = "pw-groups"];
            message TunnelGroups {
               message TunnelGroup {
                  string peer_address = 1 [json_name = "peer-address"];
                  message Groups {
                     message Group {
                        string group_address = 1 [json_name = "group-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum GroupTimer {
                           GroupTimer_NOTX_EXIST = 0;
                           GroupTimer_EXIST = 1;
                        };
                        GroupTimer group_timer = 4 [json_name = "group-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                        enum FilterMode {
                           FilterMode_EXCLUDE = 0;
                           FilterMode_INCLUDE = 1;
                           FilterMode_INVALID = 2;
                        };
                        FilterMode filter_mode = 7 [json_name = "filter-mode"];
                        enum CompatMode {
                           INVALID_ENUM_VALUE_CompatMode = 0;
                           CompatMode_V1 = 1;
                           CompatMode_V2 = 2;
                           CompatMode_V3 = 3;
                           CompatMode_INVALID = 255;
                        };
                        CompatMode compat_mode = 8 [json_name = "compat-mode"];
                        enum V1HostTimer {
                           V1HostTimer_NOTX_EXIST = 0;
                           V1HostTimer_EXIST = 1;
                        };
                        V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
                        enum V2HostTimer {
                           V2HostTimer_NOTX_EXIST = 0;
                           V2HostTimer_EXIST = 1;
                        };
                        V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
                        bool source_last_member_query = 11 [json_name = "source-last-member-query"];
                        enum LastMemberQueryTimer {
                           LastMemberQueryTimer_NOTX_EXIST = 0;
                           LastMemberQueryTimer_EXIST = 1;
                        };
                        LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
                        message Sources {
                           message Source {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 up_time = 2 [json_name = "up-time"];
                              uint32 expire_time = 3 [json_name = "expire-time"];
                              enum SourceTimer {
                                 SourceTimer_NOTX_EXIST = 0;
                                 SourceTimer_EXIST = 1;
                              };
                              SourceTimer source_timer = 4 [json_name = "source-timer"];
                              uint32 retran_count = 5 [json_name = "retran-count"];
                              bool last_member_query = 6 [json_name = "last-member-query"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 13 [json_name = "sources"];
                     }
                     repeated Group group = 1 [json_name = "group"];
                  }
                  Groups groups = 2 [json_name = "groups"];
               }
               repeated TunnelGroup tunnel_group = 1 [json_name = "tunnel-group"];
            }
            TunnelGroups tunnel_groups = 13 [json_name = "tunnel-groups"];
            message Statistics {
               uint32 send_source_group_query_count = 1 [json_name = "send-source-group-query-count"];
               uint32 v1_report_count = 2 [json_name = "v1-report-count"];
               uint32 v2_report_count = 3 [json_name = "v2-report-count"];
               uint32 v3_report_count = 4 [json_name = "v3-report-count"];
               uint32 v1_query_count = 5 [json_name = "v1-query-count"];
               uint32 v2_query_count = 6 [json_name = "v2-query-count"];
               uint32 v3_query_cnt = 7 [json_name = "v3-query-cnt"];
               uint32 leave_count = 8 [json_name = "leave-count"];
               uint32 hello_count = 9 [json_name = "hello-count"];
               uint32 s_flag_query_count = 10 [json_name = "s-flag-query-count"];
               uint32 no_s_flag_query_count = 11 [json_name = "no-s-flag-query-count"];
               uint32 send_general_query_count = 12 [json_name = "send-general-query-count"];
               uint32 send_group_query_count = 13 [json_name = "send-group-query-count"];
               uint32 mld_v1_report_count = 14 [json_name = "mld-v1-report-count"];
               uint32 mld_v2_report_count = 15 [json_name = "mld-v2-report-count"];
               uint32 mld_v1_query_count = 16 [json_name = "mld-v1-query-count"];
               uint32 mld_v2_query_count = 17 [json_name = "mld-v2-query-count"];
               uint32 mld_done_count = 18 [json_name = "mld-done-count"];
               uint32 invalid_count = 19 [json_name = "invalid-count"];
               uint32 ignored_count = 20 [json_name = "ignored-count"];
               uint32 forwarded_report_count = 21 [json_name = "forwarded-report-count"];
               uint32 forwarded_leave_count = 22 [json_name = "forwarded-leave-count"];
               uint32 forwarded_query_count = 23 [json_name = "forwarded-query-count"];
            }
            Statistics statistics = 14 [json_name = "statistics"];
            message InvalidPacket {
               message GeneralCount {
                  uint32 fault_length = 1 [json_name = "fault-length"];
                  uint32 invalid_type_count = 2 [json_name = "invalid-type-count"];
                  uint32 bad_checksum = 3 [json_name = "bad-checksum"];
                  uint32 fault_router_alert = 4 [json_name = "fault-router-alert"];
               }
               GeneralCount general_count = 1 [json_name = "general-count"];
               message InvalidQueryCount {
                  uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                  uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
               }
               InvalidQueryCount invalid_query_count = 2 [json_name = "invalid-query-count"];
               message InvalidReportCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
                  uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
               }
               InvalidReportCount invalid_report_count = 3 [json_name = "invalid-report-count"];
               message InvalicLeaveCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
               }
               InvalicLeaveCount invalic_leave_count = 4 [json_name = "invalic-leave-count"];
               message InvalidHelloCount {
                  uint32 invalid_pim_version = 1 [json_name = "invalid-pim-version"];
                  uint32 fault_length = 2 [json_name = "fault-length"];
                  uint32 bad_holdtime_length = 3 [json_name = "bad-holdtime-length"];
                  uint32 bad_dr_priority_length = 4 [json_name = "bad-dr-priority-length"];
                  uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                  uint32 bad_generation_id_length = 6 [json_name = "bad-generation-id-length"];
                  uint32 bad_lan_prune_delay_length = 7 [json_name = "bad-lan-prune-delay-length"];
               }
               InvalidHelloCount invalid_hello_count = 5 [json_name = "invalid-hello-count"];
               message InvalidLeaveCount {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 invalid_version = 2 [json_name = "invalid-version"];
               }
               InvalidLeaveCount invalid_leave_count = 6 [json_name = "invalid-leave-count"];
            }
            InvalidPacket invalid_packet = 15 [json_name = "invalid-packet"];
            message StaticDot1QRouterPorts {
               message StaticDot1QRouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 vid = 2 [json_name = "vid"];
               }
               repeated StaticDot1QRouterPort static_dot1q_router_port = 1 [json_name = "static-dot1q-router-port"];
            }
            StaticDot1QRouterPorts static_dot1q_router_ports = 16 [json_name = "static-dot1q-router-ports"];
            message StaticQinqRouterPorts {
               message StaticQinqRouterPort {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
               }
               repeated StaticQinqRouterPort static_qinq_router_port = 1 [json_name = "static-qinq-router-port"];
            }
            StaticQinqRouterPorts static_qinq_router_ports = 17 [json_name = "static-qinq-router-ports"];
            message InterfaceStaticDot1QGroups {
               message InterfaceStaticDot1QGroup {
                  string interface = 1 [json_name = "interface"];
                  uint32 vid = 2 [json_name = "vid"];
                  string group_address = 3 [json_name = "group-address"];
                  string source_address = 4 [json_name = "source-address"];
               }
               repeated InterfaceStaticDot1QGroup interface_static_dot1q_group = 1 [json_name = "interface-static-dot1q-group"];
            }
            InterfaceStaticDot1QGroups interface_static_dot1q_groups = 18 [json_name = "interface-static-dot1q-groups"];
            message InterfaceStaticQinqGroups {
               message InterfaceStaticQinqGroup {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
                  string group_address = 4 [json_name = "group-address"];
                  string source_address = 5 [json_name = "source-address"];
               }
               repeated InterfaceStaticQinqGroup interface_static_qinq_group = 1 [json_name = "interface-static-qinq-group"];
            }
            InterfaceStaticQinqGroups interface_static_qinq_groups = 19 [json_name = "interface-static-qinq-groups"];
         }
         IgmpSnooping igmp_snooping = 20 [json_name = "igmp-snooping"];
         enum Encapsulation {
            INVALID_ENUM_VALUE_Encapsulation = 0;
            Encapsulation_RAW = 1;
            Encapsulation_TAGGED = 2;
         };
         Encapsulation encapsulation = 21 [json_name = "encapsulation"];
         message BindVlan {
            string vlan_list = 1 [json_name = "vlan-list"];
         }
         BindVlan bind_vlan = 22 [json_name = "bind-vlan"];
         message DhcpBd {
            message Option82InsertSetting {
               message Option82InsertFormat_InsertFormat {
                  bool insert = 1 [json_name = "insert"];
               }
               message Option82InsertFormat_RebuildFormat {
                  bool rebuild = 1 [json_name = "rebuild"];
               }
               oneof Option82InsertFormat {
                  Option82InsertFormat_InsertFormat option82_insert_format_insert_format = 1 [json_name = "insert-format"];
                  Option82InsertFormat_RebuildFormat option82_insert_format_rebuild_format = 2 [json_name = "rebuild-format"];
               }
            }
            Option82InsertSetting option82_insert_setting = 1 [json_name = "option82-insert-setting"];
            message Option82Formats {
               message Option82Format {
                  enum SubOptionType {
                     INVALID_ENUM_VALUE_SubOptionType = 0;
                     SubOptionType_CIRCUITX_ID = 1;
                     SubOptionType_REMOTEX_ID = 2;
                     SubOptionType_CIRCUITX_REMOTE = 3;
                  };
                  SubOptionType sub_option_type = 1 [json_name = "sub-option-type"];
                  enum Option82Format7 {
                     INVALID_ENUM_VALUE_Option82Format7 = 0;
                     Option82Format7_COMMON = 1;
                     Option82Format7_EXTEND = 2;
                     Option82Format7_USERX_DEFINED = 3;
                     Option82Format7_DEFAULT = 4;
                     Option82Format7_TYPE1 = 5;
                     Option82Format7_TYPE2 = 6;
                     Option82Format7_SELFX_DEFINE = 7;
                     Option82Format7_DEFAULTX_EXTRA = 8;
                     Option82Format7_CNX_TELECOM = 9;
                     Option82Format7_SELFX_DEFINEX_EXTRA = 10;
                     Option82Format7_INTRACOMX_VXLAN = 11;
                     Option82Format7_CNX_TELECOMX_INHERIT = 12;
                  };
                  Option82Format7 option82_format = 2 [json_name = "option82-format"];
               }
               repeated Option82Format option82_format = 1 [json_name = "option82-format"];
            }
            Option82Formats option82_formats = 2 [json_name = "option82-formats"];
            message Encapsulation {
               enum Suboption {
                  Suboption_CIRCUITX_ID = 0;
                  Suboption_REMOTEX_ID = 1;
                  Suboption_SUBSCRIBERX_ID = 2;
                  Suboption_VENDORX_SPECIFICX_ID = 3;
               };
               repeated Suboption suboption = 1 [json_name = "suboption"];
            }
            Encapsulation encapsulation = 3 [json_name = "encapsulation"];
         }
         DhcpBd dhcp_bd = 23 [json_name = "dhcp-bd"];
         message DhcpSnoopingBd {
            message BasicAttribute {
               bool enable = 1 [json_name = "enable"];
               bool trust_enable = 2 [json_name = "trust-enable"];
               bool nni_trust_enable = 3 [json_name = "nni-trust-enable"];
               bool check_arp_enable = 4 [json_name = "check-arp-enable"];
               bool alarm_arp_enable = 5 [json_name = "alarm-arp-enable"];
               uint32 alarm_arp_threshold = 6 [json_name = "alarm-arp-threshold"];
               bool check_ip_enable = 7 [json_name = "check-ip-enable"];
               bool alarm_ip_enable = 8 [json_name = "alarm-ip-enable"];
               uint32 alarm_ip_threshold = 9 [json_name = "alarm-ip-threshold"];
               bool alarm_reply_enable = 10 [json_name = "alarm-reply-enable"];
               uint32 alarm_reply_threshold = 11 [json_name = "alarm-reply-threshold"];
               bool check_mac_enable = 12 [json_name = "check-mac-enable"];
               bool alarm_mac_enable = 13 [json_name = "alarm-mac-enable"];
               uint32 alarm_mac_threshold = 14 [json_name = "alarm-mac-threshold"];
               bool check_request_enable = 15 [json_name = "check-request-enable"];
               bool alarm_request_enable = 16 [json_name = "alarm-request-enable"];
               uint32 alarm_request_threshold = 17 [json_name = "alarm-request-threshold"];
               uint32 max_user_number = 18 [json_name = "max-user-number"];
               bool alarm_user_limit_enable = 19 [json_name = "alarm-user-limit-enable"];
               uint32 alarm_user_limit_threshold = 20 [json_name = "alarm-user-limit-threshold"];
            }
            BasicAttribute basic_attribute = 1 [json_name = "basic-attribute"];
            message StaticBinds {
               message StaticBind {
                  string ip_address = 1 [json_name = "ip-address"];
                  uint32 pe_vlan = 2 [json_name = "pe-vlan"];
                  uint32 ce_vlan = 3 [json_name = "ce-vlan"];
                  string mac_address = 4 [json_name = "mac-address"];
               }
               repeated StaticBind static_bind = 1 [json_name = "static-bind"];
            }
            StaticBinds static_binds = 2 [json_name = "static-binds"];
            message PacketsDiscardedStatistics {
               uint32 drop_arp_packets_count = 1 [json_name = "drop-arp-packets-count"];
               uint32 drop_ip_packets_count = 2 [json_name = "drop-ip-packets-count"];
               uint32 drop_dhcp_request_count_by_bind = 3 [json_name = "drop-dhcp-request-count-by-bind"];
               uint32 drop_dhcp_request_count_by_mac_check = 4 [json_name = "drop-dhcp-request-count-by-mac-check"];
               uint32 drop_dhcp_reply_count = 5 [json_name = "drop-dhcp-reply-count"];
            }
            PacketsDiscardedStatistics packets_discarded_statistics = 3 [json_name = "packets-discarded-statistics"];
         }
         DhcpSnoopingBd dhcp_snooping_bd = 24 [json_name = "dhcp-snooping-bd"];
         message NdBdProperty {
            bool unicast_forward = 1 [json_name = "unicast-forward"];
            bool proxy_reply = 2 [json_name = "proxy-reply"];
            bool mismatch_discard = 3 [json_name = "mismatch-discard"];
            bool collect_host_flag = 4 [json_name = "collect-host-flag"];
            uint32 dynamic_limit = 5 [json_name = "dynamic-limit"];
            bool router_flag = 6 [json_name = "router-flag"];
            uint32 dynamic_expire_time = 7 [json_name = "dynamic-expire-time"];
            bool unknown_options_unicast = 8 [json_name = "unknown-options-unicast"];
         }
         NdBdProperty nd_bd_property = 25 [json_name = "nd-bd-property"];
         message MacAddresss {
            message MacAddress {
               string address = 1 [json_name = "address"];
               message MacType_BlackHole {
                  bool black_hole = 1 [json_name = "black-hole"];
               }
               message MacType_Static {
                  message OutInterfaceType_Ac {
                     string out_interface_name = 1 [json_name = "out-interface-name"];
                     bool untag = 2 [json_name = "untag"];
                     bool pe_default = 3 [json_name = "pe-default"];
                     uint32 vid = 4 [json_name = "vid"];
                     bool ce_default = 5 [json_name = "ce-default"];
                     uint32 ce_vid = 6 [json_name = "ce-vid"];
                  }
                  message OutInterfaceType_Tunnel {
                     string source_ip = 1 [json_name = "source-ip"];
                     string peer_ip = 2 [json_name = "peer-ip"];
                     uint32 vni = 3 [json_name = "vni"];
                  }
                  message OutInterfaceType_Ipv6Tunnel {
                     string source_ipv6 = 1 [json_name = "source-ipv6"];
                     string peer_ipv6 = 2 [json_name = "peer-ipv6"];
                     uint32 vni_v6 = 3 [json_name = "vni-v6"];
                  }
                  oneof OutInterfaceType {
                     OutInterfaceType_Ac out_interface_type_ac = 1 [json_name = "ac"];
                     OutInterfaceType_Tunnel out_interface_type_tunnel = 2 [json_name = "tunnel"];
                     OutInterfaceType_Ipv6Tunnel out_interface_type_ipv6_tunnel = 3 [json_name = "ipv6-tunnel"];
                  }
               }
               oneof MacType {
                  MacType_BlackHole mac_type_black_hole = 2 [json_name = "black-hole"];
                  MacType_Static mac_type_static = 3 [json_name = "static"];
               }
            }
            repeated MacAddress mac_address = 1 [json_name = "mac-address"];
         }
         MacAddresss mac_addresss = 26 [json_name = "mac-addresss"];
         message Pipe {
            bool split_mode = 1 [json_name = "split-mode"];
            enum PipeMode {
               INVALID_ENUM_VALUE_PipeMode = 0;
               PipeMode_PIPE = 1;
               PipeMode_SHORTPIPE = 2;
               PipeMode_UNIFORM = 3;
            };
            PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
            enum IngressPipeMode {
               INVALID_ENUM_VALUE_IngressPipeMode = 0;
               IngressPipeMode_PIPE = 1;
               IngressPipeMode_SHORTPIPE = 2;
               IngressPipeMode_UNIFORM = 3;
            };
            IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
            enum EgressPipeMode {
               INVALID_ENUM_VALUE_EgressPipeMode = 0;
               EgressPipeMode_PIPE = 1;
               EgressPipeMode_SHORTPIPE = 2;
               EgressPipeMode_UNIFORM = 3;
            };
            EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 5 [json_name = "service-class"];
            enum Color {
               Color_GREEN = 0;
               Color_YELLOW = 1;
               Color_RED = 2;
            };
            Color color = 6 [json_name = "color"];
            string domain_name = 7 [json_name = "domain-name"];
            enum TrustType {
               TrustType_OUTPRI = 0;
               TrustType_INPRI = 1;
               TrustType_IPDSCP = 2;
            };
            TrustType trust_type = 8 [json_name = "trust-type"];
         }
         Pipe pipe = 27 [json_name = "pipe"];
         message ReserveIfSwitch {
            bool enable = 1 [json_name = "enable"];
         }
         ReserveIfSwitch reserve_if_switch = 28 [json_name = "reserve-if-switch"];
         message MacHops {
            message MacHop {
               string mac_address = 1 [json_name = "mac-address"];
               string interface_name = 2 [json_name = "interface-name"];
               string peer_ip = 3 [json_name = "peer-ip"];
               string detect_time = 4 [json_name = "detect-time"];
            }
            repeated MacHop mac_hop = 1 [json_name = "mac-hop"];
         }
         MacHops mac_hops = 29 [json_name = "mac-hops"];
         message MacAccounting {
            bool enable = 1 [json_name = "enable"];
         }
         MacAccounting mac_accounting = 30 [json_name = "mac-accounting"];
         message Mirror {
            message BdPortMirrors {
               message BdPortMirror {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string instance_name = 2 [json_name = "instance-name"];
                  string group_name = 3 [json_name = "group-name"];
               }
               repeated BdPortMirror bd_port_mirror = 1 [json_name = "bd-port-mirror"];
            }
            BdPortMirrors bd_port_mirrors = 1 [json_name = "bd-port-mirrors"];
         }
         Mirror mirror = 31 [json_name = "mirror"];
         message Qos {
            message DomainServiceClasss {
               message DomainServiceClass {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
               }
               DomainServiceClass domain_service_class = 1 [json_name = "domain-service-class"];
            }
            DomainServiceClasss domain_service_classs = 1 [json_name = "domain-service-classs"];
            message DomainPolicyApplys {
               message DomainPolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
                  enum Layer {
                     Layer_NONE = 0;
                     Layer_LINK = 1;
                     Layer_ALL = 2;
                     Layer_MPLS = 3;
                  };
                  Layer layer = 3 [json_name = "layer"];
               }
               repeated DomainPolicyApply domain_policy_apply = 1 [json_name = "domain-policy-apply"];
            }
            DomainPolicyApplys domain_policy_applys = 2 [json_name = "domain-policy-applys"];
            message Trusts {
               message Trust {
                  enum TrustType {
                     TrustType_IPX_DSCP = 0;
                     TrustType_X_8021P = 1;
                     TrustType_OUTERX_8021P = 2;
                     TrustType_INNERX_8021P = 3;
                  };
                  TrustType trust_type = 1 [json_name = "trust-type"];
                  enum Direction {
                     Direction_INX_OUTBOUND = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  string diffserv_domain_name = 3 [json_name = "diffserv-domain-name"];
               }
               repeated Trust trust = 1 [json_name = "trust"];
            }
            Trusts trusts = 3 [json_name = "trusts"];
            message PhbVxlans {
               message PhbVxlan {
                  enum OperateType {
                     INVALID_ENUM_VALUE_OperateType = 0;
                     OperateType_ENABLE = 1;
                  };
                  OperateType operate_type = 1 [json_name = "operate-type"];
                  string diffserv_domain_name = 2 [json_name = "diffserv-domain-name"];
               }
               PhbVxlan phb_vxlan = 1 [json_name = "phb-vxlan"];
            }
            PhbVxlans phb_vxlans = 4 [json_name = "phb-vxlans"];
            message Phbs {
               message Phb {
                  enum OperateType {
                     OperateType_DISABLE = 0;
                     OperateType_ENABLE = 1;
                  };
                  OperateType operate_type = 1 [json_name = "operate-type"];
                  enum MapType {
                     INVALID_ENUM_VALUE_MapType = 0;
                     MapType_NONE = 1;
                     MapType_INNERX_8021P = 2;
                     MapType_OUTERX_8021P = 4;
                     MapType_DSCP = 8;
                     MapType_MPLSX_EXP = 16;
                  };
                  MapType map_type = 2 [json_name = "map-type"];
                  string diffserv_domain_name = 3 [json_name = "diffserv-domain-name"];
               }
               repeated Phb phb = 1 [json_name = "phb"];
            }
            Phbs phbs = 5 [json_name = "phbs"];
            message CarVxlanModes {
               message CarVxlanMode {
                  string slot = 1 [json_name = "slot"];
                  enum ExcludeMode {
                     ExcludeMode_NOX_EXCLUDE = 0;
                     ExcludeMode_EXCLUDE = 1;
                  };
                  ExcludeMode exclude_mode = 2 [json_name = "exclude-mode"];
               }
               repeated CarVxlanMode car_vxlan_mode = 1 [json_name = "car-vxlan-mode"];
            }
            CarVxlanModes car_vxlan_modes = 6 [json_name = "car-vxlan-modes"];
            message VxlanModePolicyApplys {
               message VxlanModePolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINK = 1;
                  };
                  Layer layer = 3 [json_name = "layer"];
               }
               repeated VxlanModePolicyApply vxlan_mode_policy_apply = 1 [json_name = "vxlan-mode-policy-apply"];
            }
            VxlanModePolicyApplys vxlan_mode_policy_applys = 7 [json_name = "vxlan-mode-policy-applys"];
            message VxlanModeTrusts {
               message VxlanModeTrust {
                  enum TrustType {
                     TrustType_UPSTREAM = 0;
                     TrustType_X_8021P = 1;
                  };
                  TrustType trust_type = 1 [json_name = "trust-type"];
                  string ds_name = 2 [json_name = "ds-name"];
               }
               repeated VxlanModeTrust vxlan_mode_trust = 1 [json_name = "vxlan-mode-trust"];
            }
            VxlanModeTrusts vxlan_mode_trusts = 8 [json_name = "vxlan-mode-trusts"];
            message TrafficPolicys {
               message TrafficPolicy {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
               }
               repeated TrafficPolicy traffic_policy = 1 [json_name = "traffic-policy"];
            }
            TrafficPolicys traffic_policys = 9 [json_name = "traffic-policys"];
         }
         Qos qos = 32 [json_name = "qos"];
         message MacFlapping {
            message LoopDetect {
               uint32 loop_times = 1 [json_name = "loop-times"];
               uint32 detect_cycle = 2 [json_name = "detect-cycle"];
               uint32 cycles = 3 [json_name = "cycles"];
               enum Action {
                  INVALID_ENUM_VALUE_Action = 0;
                  Action_BLOCK = 1;
                  Action_ALARM = 2;
               };
               Action action = 4 [json_name = "action"];
               uint32 retry_times = 5 [json_name = "retry-times"];
               uint32 block_time = 6 [json_name = "block-time"];
            }
            LoopDetect loop_detect = 1 [json_name = "loop-detect"];
            message PreciseBlock {
            }
            PreciseBlock precise_block = 2 [json_name = "precise-block"];
         }
         MacFlapping mac_flapping = 33 [json_name = "mac-flapping"];
         enum MacLearnStyle {
            MacLearnStyle_UNQUALIFY = 0;
            MacLearnStyle_QUALIFY = 1;
         };
         MacLearnStyle mac_learn_style = 34 [json_name = "mac-learn-style"];
         message ArpUserEntry {
            string ip_addr = 1 [json_name = "ip-addr"];
            string mac_addr = 2 [json_name = "mac-addr"];
            string vtep = 3 [json_name = "vtep"];
            string flag = 4 [json_name = "flag"];
         }
         ArpUserEntry arp_user_entry = 35 [json_name = "arp-user-entry"];
         message ArpStatistics {
            uint32 receive_req_packets = 1 [json_name = "receive-req-packets"];
            uint32 receive_gratis_packets = 2 [json_name = "receive-gratis-packets"];
            uint32 receive_proxy_packets = 3 [json_name = "receive-proxy-packets"];
            uint32 receive_reply = 4 [json_name = "receive-reply"];
            uint32 miss_discard = 5 [json_name = "miss-discard"];
            uint32 discard_other = 6 [json_name = "discard-other"];
            uint32 receive_total_packets = 7 [json_name = "receive-total-packets"];
            uint32 send_unicast_packets = 8 [json_name = "send-unicast-packets"];
            uint32 send_broadcast_packets = 9 [json_name = "send-broadcast-packets"];
            uint32 send_gratis_packets = 10 [json_name = "send-gratis-packets"];
            uint32 send_proxy_packets = 11 [json_name = "send-proxy-packets"];
            uint32 l2proxy_reply = 12 [json_name = "l2proxy-reply"];
            uint32 send_total_packets = 13 [json_name = "send-total-packets"];
         }
         ArpStatistics arp_statistics = 36 [json_name = "arp-statistics"];
         message SuppressionStatistics {
            uint64 broadcast_inbound_pass_bytes = 1 [json_name = "broadcast-inbound-pass-bytes"];
            uint64 broadcast_inbound_pass_packets = 2 [json_name = "broadcast-inbound-pass-packets"];
            uint64 broadcast_inbound_drop_bytes = 3 [json_name = "broadcast-inbound-drop-bytes"];
            uint64 broadcast_inbound_drop_packets = 4 [json_name = "broadcast-inbound-drop-packets"];
            uint64 broadcast_outbound_pass_bytes = 5 [json_name = "broadcast-outbound-pass-bytes"];
            uint64 broadcast_outbound_pass_packets = 6 [json_name = "broadcast-outbound-pass-packets"];
            uint64 broadcast_outbound_drop_bytes = 7 [json_name = "broadcast-outbound-drop-bytes"];
            uint64 broadcast_outbound_drop_packets = 8 [json_name = "broadcast-outbound-drop-packets"];
            uint64 unicast_inbound_pass_bytes = 9 [json_name = "unicast-inbound-pass-bytes"];
            uint64 unicast_inbound_pass_packets = 10 [json_name = "unicast-inbound-pass-packets"];
            uint64 unicast_inbound_drop_bytes = 11 [json_name = "unicast-inbound-drop-bytes"];
            uint64 unicast_inbound_drop_packets = 12 [json_name = "unicast-inbound-drop-packets"];
            uint64 unicast_outbound_pass_bytes = 13 [json_name = "unicast-outbound-pass-bytes"];
            uint64 unicast_outbound_pass_packets = 14 [json_name = "unicast-outbound-pass-packets"];
            uint64 unicast_outbound_drop_bytes = 15 [json_name = "unicast-outbound-drop-bytes"];
            uint64 unicast_outbound_drop_packets = 16 [json_name = "unicast-outbound-drop-packets"];
            uint64 multicast_inbound_pass_bytes = 17 [json_name = "multicast-inbound-pass-bytes"];
            uint64 multicast_inbound_pass_packets = 18 [json_name = "multicast-inbound-pass-packets"];
            uint64 multicast_inbound_drop_bytes = 19 [json_name = "multicast-inbound-drop-bytes"];
            uint64 multicast_inbound_drop_packets = 20 [json_name = "multicast-inbound-drop-packets"];
            uint64 multicast_outbound_pass_bytes = 21 [json_name = "multicast-outbound-pass-bytes"];
            uint64 multicast_outbound_pass_packets = 22 [json_name = "multicast-outbound-pass-packets"];
            uint64 multicast_outbound_drop_bytes = 23 [json_name = "multicast-outbound-drop-bytes"];
            uint64 multicast_outbound_drop_packets = 24 [json_name = "multicast-outbound-drop-packets"];
         }
         SuppressionStatistics suppression_statistics = 37 [json_name = "suppression-statistics"];
         message MulticastForward {
            message TrunkLoadBalanceEnable {
            }
            TrunkLoadBalanceEnable trunk_load_balance_enable = 1 [json_name = "trunk-load-balance-enable"];
            message MulticastForwardTlbStatistics {
               message MulticastForwardTlbStatistic {
                  enum AddressFamily {
                     AddressFamily_UNKNOWN = 0;
                     AddressFamily_IPV4 = 1;
                     AddressFamily_IPV6 = 2;
                  };
                  AddressFamily address_family = 1 [json_name = "address-family"];
                  string source_address = 2 [json_name = "source-address"];
                  string group_address = 3 [json_name = "group-address"];
                  enum ForwardingMode {
                     INVALID_ENUM_VALUE_ForwardingMode = 0;
                     ForwardingMode_IP = 1;
                     ForwardingMode_MAC = 2;
                  };
                  ForwardingMode forwarding_mode = 4 [json_name = "forwarding-mode"];
                  enum Sg {
                     INVALID_ENUM_VALUE_Sg = 0;
                     Sg_SG = 1;
                     Sg_SOURCEX_WILDCARD = 2;
                     Sg_RTX_PORT = 3;
                  };
                  Sg sg = 5 [json_name = "sg"];
                  uint32 port_cnt = 6 [json_name = "port-cnt"];
               }
               repeated MulticastForwardTlbStatistic multicast_forward_tlb_statistic = 1 [json_name = "multicast-forward-tlb-statistic"];
            }
            MulticastForwardTlbStatistics multicast_forward_tlb_statistics = 2 [json_name = "multicast-forward-tlb-statistics"];
         }
         MulticastForward multicast_forward = 38 [json_name = "multicast-forward"];
         message MulticastForwardTlbStatistics {
            message MulticastForwardTlbStatistic {
               string source_address = 1 [json_name = "source-address"];
               string group_address = 2 [json_name = "group-address"];
               enum ForwardingMode {
                  INVALID_ENUM_VALUE_ForwardingMode = 0;
                  ForwardingMode_IP = 1;
                  ForwardingMode_MAC = 2;
               };
               ForwardingMode forwarding_mode = 3 [json_name = "forwarding-mode"];
               enum Sg {
                  INVALID_ENUM_VALUE_Sg = 0;
                  Sg_SG = 1;
                  Sg_SOURCEX_WILDCARD = 2;
                  Sg_RTX_PORT = 3;
               };
               Sg sg = 4 [json_name = "sg"];
               uint32 port_cnt = 5 [json_name = "port-cnt"];
            }
            repeated MulticastForwardTlbStatistic multicast_forward_tlb_statistic = 1 [json_name = "multicast-forward-tlb-statistic"];
         }
         MulticastForwardTlbStatistics multicast_forward_tlb_statistics = 39 [json_name = "multicast-forward-tlb-statistics"];
         message UniSuppressions {
            message UniSuppression {
               enum Type {
                  Type_BROADCAST = 0;
                  Type_MULTICAST = 1;
                  Type_UNKNOWNX_UNICAST = 2;
               };
               Type type = 1 [json_name = "type"];
               enum Direction {
                  Direction_UNIX_INBOUND = 0;
                  Direction_UNIX_OUTBOUND = 1;
               };
               Direction direction = 2 [json_name = "direction"];
               uint64 cir = 3 [json_name = "cir"];
               uint64 cbs = 4 [json_name = "cbs"];
            }
            repeated UniSuppression uni_suppression = 1 [json_name = "uni-suppression"];
         }
         UniSuppressions uni_suppressions = 40 [json_name = "uni-suppressions"];
         message StickyMac {
            bool enable = 1 [json_name = "enable"];
            bool source_mac_check = 2 [json_name = "source-mac-check"];
            repeated string whitelist = 3 [json_name = "whitelist"];
         }
         StickyMac sticky_mac = 41 [json_name = "sticky-mac"];
         message StormControl {
            message StormRates {
               message StormRate {
                  enum PacketType {
                     INVALID_ENUM_VALUE_PacketType = 0;
                     PacketType_BROADCAST = 1;
                     PacketType_UNKNOWNX_MULTICAST = 2;
                     PacketType_UNICAST = 3;
                     PacketType_UNKNOWNX_UNICAST = 4;
                     PacketType_FLOOD = 5;
                  };
                  PacketType packet_type = 1 [json_name = "packet-type"];
                  message RateType_Packet {
                     uint32 pps_min_rate = 1 [json_name = "pps-min-rate"];
                     uint32 pps_max_rate = 2 [json_name = "pps-max-rate"];
                  }
                  message RateType_Cir {
                     uint32 cir_min_rate = 1 [json_name = "cir-min-rate"];
                     uint32 cir_max_rate = 2 [json_name = "cir-max-rate"];
                  }
                  message RateType_Percent {
                     uint32 per_min_rate = 1 [json_name = "per-min-rate"];
                     uint32 per_max_rate = 2 [json_name = "per-max-rate"];
                  }
                  oneof RateType {
                     RateType_Packet rate_type_packet = 2 [json_name = "packet"];
                     RateType_Cir rate_type_cir = 3 [json_name = "cir"];
                     RateType_Percent rate_type_percent = 4 [json_name = "percent"];
                  }
               }
               repeated StormRate storm_rate = 1 [json_name = "storm-rate"];
            }
            StormRates storm_rates = 1 [json_name = "storm-rates"];
         }
         StormControl storm_control = 42 [json_name = "storm-control"];
         message StormSuppress {
            message StormRates {
               message StormRate {
                  enum PacketType {
                     INVALID_ENUM_VALUE_PacketType = 0;
                     PacketType_BROADCAST = 1;
                     PacketType_UNKNOWNX_MULTICAST = 2;
                     PacketType_UNICAST = 3;
                     PacketType_UNKNOWNX_UNICAST = 4;
                     PacketType_FLOOD = 5;
                  };
                  PacketType packet_type = 1 [json_name = "packet-type"];
                  message RateType_Packet {
                     uint32 pps = 1 [json_name = "pps"];
                  }
                  message RateType_Rate {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                  }
                  message RateType_Percent {
                     uint32 percent8 = 1 [json_name = "percent"];
                  }
                  oneof RateType {
                     RateType_Packet rate_type_packet = 2 [json_name = "packet"];
                     RateType_Rate rate_type_rate = 3 [json_name = "rate"];
                     RateType_Percent rate_type_percent = 4 [json_name = "percent"];
                  }
               }
               repeated StormRate storm_rate = 1 [json_name = "storm-rate"];
            }
            StormRates storm_rates = 1 [json_name = "storm-rates"];
         }
         StormSuppress storm_suppress = 43 [json_name = "storm-suppress"];
         message Isolation {
            bool local = 1 [json_name = "local"];
            bool remote = 2 [json_name = "remote"];
         }
         Isolation isolation = 44 [json_name = "isolation"];
         message Dai {
            bool enable = 1 [json_name = "enable"];
            message CheckItems {
               bool interface_check = 1 [json_name = "interface-check"];
               bool ip_check = 2 [json_name = "ip-check"];
               bool mac_check = 3 [json_name = "mac-check"];
               bool vxlan_tunnel_check = 4 [json_name = "vxlan-tunnel-check"];
            }
            CheckItems check_items = 2 [json_name = "check-items"];
            bool alarm_enable = 3 [json_name = "alarm-enable"];
            uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
         }
         Dai dai = 45 [json_name = "dai"];
         uint32 profile_id = 46 [json_name = "profile-id"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 1 [json_name = "instances"];
   message Profiles {
      message Profile {
         uint32 id = 1 [json_name = "id"];
         string description = 2 [json_name = "description"];
         bool vlan_auto = 3 [json_name = "vlan-auto"];
         message Nvo3 {
            bool vni_auto = 1 [json_name = "vni-auto"];
         }
         Nvo3 nvo3 = 4 [json_name = "nvo3"];
         message Evpn {
            bool rd_auto = 1 [json_name = "rd-auto"];
            bool rt_auto = 2 [json_name = "rt-auto"];
         }
         Evpn evpn = 5 [json_name = "evpn"];
      }
      repeated Profile profile = 1 [json_name = "profile"];
   }
   Profiles profiles = 2 [json_name = "profiles"];
}


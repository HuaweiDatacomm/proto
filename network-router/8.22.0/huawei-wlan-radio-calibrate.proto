syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-08-29 10:52:32
// ProtoYang-version 1
// module huawei-wlan-radio-calibrate
// revision 2022-08-06
// namespace urn:huawei:yang:huawei-wlan-radio-calibrate

package huawei_wlan_radio_calibrate;

message WlanRadioCalibrate {
   message DynamicCca {
      int32 upper_threshold = 1 [json_name = "upper-threshold"];
      int32 lower_threshold = 2 [json_name = "lower-threshold"];
   }
   DynamicCca dynamic_cca = 1 [json_name = "dynamic-cca"];
   message EdgeSta {
      int32 snr_threshold = 1 [json_name = "snr-threshold"];
      int32 rssi_threshold = 2 [json_name = "rssi-threshold"];
   }
   EdgeSta edge_sta = 2 [json_name = "edge-sta"];
   message Calibrate {
      enum CalibrateMode {
         CalibrateMode_AUTO = 0;
         CalibrateMode_DISABLE = 1;
         CalibrateMode_MANUAL = 2;
         CalibrateMode_SCHEDULE = 3;
      };
      CalibrateMode calibrate_mode = 1 [json_name = "calibrate-mode"];
      message AutoModePara {
         int32 auto_interval = 1 [json_name = "auto-interval"];
         string auto_start_time = 2 [json_name = "auto-start-time"];
      }
      AutoModePara auto_mode_para = 2 [json_name = "auto-mode-para"];
      message ScheduleModePara {
         enum TimeMode {
            TimeMode_SCHEDULEX_TIMEX_RANGE = 0;
            TimeMode_SCHEDULEX_SPECIFICX_TIME = 1;
         };
         TimeMode time_mode = 1 [json_name = "time-mode"];
         string time_range = 2 [json_name = "time-range"];
         string specific_time = 3 [json_name = "specific-time"];
      }
      ScheduleModePara schedule_mode_para = 3 [json_name = "schedule-mode-para"];
      message CalibratePolicy {
         bool rogue_ap = 1 [json_name = "rogue-ap"];
         bool non_wifi = 2 [json_name = "non-wifi"];
      }
      CalibratePolicy calibrate_policy = 4 [json_name = "calibrate-policy"];
      message FlexibleRadio {
         enum RadioMode {
            RadioMode_AUTOX_SWITCH = 0;
            RadioMode_AUTOX_OFF = 1;
         };
         RadioMode radio_mode = 1 [json_name = "radio-mode"];
         uint32 recognize_time = 2 [json_name = "recognize-time"];
         uint32 process = 3 [json_name = "process"];
      }
      FlexibleRadio flexible_radio = 5 [json_name = "flexible-radio"];
      enum RogueApInterference {
         RogueApInterference_ENABLE = 0;
         RogueApInterference_DISABLE = 1;
      };
      RogueApInterference rogue_ap_interference = 6 [json_name = "rogue-ap-interference"];
      message Sensitivity {
         enum SensitivityType {
            SensitivityType_HIGH = 0;
            SensitivityType_MEDIUM = 1;
            SensitivityType_LOW = 2;
            SensitivityType_INSENSITIVITY = 3;
            SensitivityType_CUSTOMX_THRESHOLD = 4;
         };
         SensitivityType sensitivity_type = 1 [json_name = "sensitivity-type"];
         uint32 custom_threshold = 2 [json_name = "custom-threshold"];
      }
      Sensitivity sensitivity = 7 [json_name = "sensitivity"];
   }
   Calibrate calibrate = 3 [json_name = "calibrate"];
   message AntiInterference {
      enum AntiInterferenceSwitch {
         AntiInterferenceSwitch_DISABLE = 0;
         AntiInterferenceSwitch_ENABLE = 1;
      };
      AntiInterferenceSwitch anti_interference_switch = 1 [json_name = "anti-interference-switch"];
      enum PerPacketTpc {
         PerPacketTpc_DISABLE = 0;
         PerPacketTpc_ENABLE = 1;
      };
      PerPacketTpc per_packet_tpc = 2 [json_name = "per-packet-tpc"];
      enum AgcCheck {
         AgcCheck_DISABLE = 0;
         AgcCheck_ENABLE = 1;
      };
      AgcCheck agc_check = 3 [json_name = "agc-check"];
   }
   AntiInterference anti_interference = 4 [json_name = "anti-interference"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-vcluster
// revision 2020-07-11
// revision 2020-03-20
// revision 2020-03-10
// revision 2019-11-13
// namespace urn:huawei:yang:huawei-vcluster

package huawei_vcluster;

message Vcluster {
   message ApNameMaps {
      message ApNameMap {
         string apIp = 1;
         string apName = 2;
      }
      repeated ApNameMap apNameMap = 1;
   }
   ApNameMaps apNameMaps = 1;
   message PathDbApNodes {
      message PathDbApNode {
         string apId = 1;
         uint32 areaId = 2;
         enum IgpType {
            IgpType_ISIS = 0;
         };
         IgpType igpType = 3;
         uint32 linkCount = 4;
         message Links {
            message Link {
               string apId = 1;
               string drApId = 2;
               uint32 drCircId = 3;
               uint32 drIfIndex = 4;
               string drSystemId = 5;
               enum LinkStatus {
                  LinkStatus_ACTIVE = 0;
                  LinkStatus_INACTIVE = 1;
               };
               LinkStatus linkStatus = 6;
               enum LinkType {
                  LinkType_MULTIX_ACCESS = 0;
                  LinkType_POINTX_TOX_POINT = 1;
               };
               LinkType linkType = 7;
               uint32 localCircId = 8;
               uint32 localIfIndex = 9;
               uint32 metric = 10;
               uint32 mtu = 11;
               string opaquelsId = 12;
               string peerApId = 13;
               uint32 peerCircId = 14;
               uint32 peerIfIndex = 15;
               string peerSystemId = 16;
               string systemId = 17;
            }
            repeated Link link = 1;
         }
         Links links = 5;
         string primeVcsIp = 6;
         uint32 processId = 7;
         enum Role {
            Role_AP = 0;
            Role_APM = 1;
            Role_NONE = 2;
         };
         Role role = 8;
         string standbyVcsIp = 9;
      }
      repeated PathDbApNode pathDbApNode = 1;
   }
   PathDbApNodes pathDbApNodes = 2;
   message PathDbNetworkLsas {
      message PathDbNetworkLsa {
         uint32 areaId = 1;
         message AttachedNbrs {
            message AttachedNbr {
               string peerApId = 1;
               string peerSystemId = 2;
            }
            repeated AttachedNbr attachedNbr = 1;
         }
         AttachedNbrs attachedNbrs = 2;
         string drApId = 3;
         uint32 drCircId = 4;
         uint32 drIfIndex = 5;
         string drSystemId = 6;
         enum IgpType {
            IgpType_ISIS = 0;
         };
         IgpType igpType = 7;
         uint32 processId = 8;
      }
      repeated PathDbNetworkLsa pathDbNetworkLsa = 1;
   }
   PathDbNetworkLsas pathDbNetworkLsas = 3;
   message RemoteApIfs {
      message RemoteApIf {
         string apInterface = 1;
         string apIp = 2;
         string apName = 3;
         string ifName = 4;
         message RemoteApConnectSlot {
            string slotNumber = 1;
         }
         RemoteApConnectSlot remoteApConnectSlot = 5;
         message VcBfd {
            uint32 detectMultiplier = 1;
            uint32 minRxInterval = 2;
            uint32 minTxInterval = 3;
         }
         VcBfd vcBfd = 6;
         message VcBitErrorDetection {
            bool bitErrorDetection = 1;
         }
         VcBitErrorDetection vcBitErrorDetection = 7;
      }
      repeated RemoteApIf remoteApIf = 1;
   }
   RemoteApIfs remoteApIfs = 4;
   message VBridgeIfs {
      message VBridgeIf {
         string ifName = 1;
         message VBridgeMemberIfs {
            message VBridgeMemberIf {
               string memberIfName = 1;
            }
            repeated VBridgeMemberIf vBridgeMemberIf = 1;
         }
         VBridgeMemberIfs vBridgeMemberIfs = 2;
         message VbridgeConnectSlot {
            string slotNumber = 1;
         }
         VbridgeConnectSlot vbridgeConnectSlot = 3;
      }
      repeated VBridgeIf vBridgeIf = 1;
   }
   VBridgeIfs vBridgeIfs = 5;
   message VcApInfos {
      message VcApInfo {
         string adminIp = 1;
         string apName = 2;
         string computeMasterId = 3;
         enum GrState {
            GrState_AGING = 0;
            GrState_IDLE = 1;
            GrState_RECONNECT = 2;
            GrState_RECOVERY = 3;
         };
         GrState grState = 4;
         uint32 labelBaseValue = 5;
         uint32 labelSize = 6;
         string primaryMasterId = 7;
         string secondaryMasterId = 8;
         enum State {
            State_INIT = 0;
            State_REGISTING = 1;
            State_RUNNING = 2;
            State_SETUP = 3;
         };
         State state = 9;
         string upTime = 10;
         message VcApIfInfos {
            message VcApIfInfo {
               string ifName = 1;
               enum IfOperStatus {
                  IfOperStatus_DOWN = 0;
                  IfOperStatus_UP = 1;
               };
               IfOperStatus ifOperStatus = 2;
               enum IfServType {
                  IfServType_E1 = 0;
                  IfServType_ETH = 1;
                  IfServType_NULL = 2;
               };
               IfServType ifServType = 3;
            }
            repeated VcApIfInfo vcApIfInfo = 1;
         }
         VcApIfInfos vcApIfInfos = 11;
         message VpComputeInfos {
            message VpComputeInfo {
               string destId = 1;
               enum PathRole {
                  PathRole_INVALID = 0;
                  PathRole_PROCTECTION = 1;
                  PathRole_WORKING = 2;
               };
               PathRole pathRole = 2;
               string sourceId = 3;
               uint32 totalMetrics = 4;
               message VpComputeHops {
                  message VpComputeHop {
                     string hopIfName = 1;
                     uint32 hopIndex = 2;
                     string nodeId = 3;
                  }
                  repeated VpComputeHop vpComputeHop = 1;
               }
               VpComputeHops vpComputeHops = 5;
            }
            repeated VpComputeInfo vpComputeInfo = 1;
         }
         VpComputeInfos vpComputeInfos = 12;
      }
      repeated VcApInfo vcApInfo = 1;
   }
   VcApInfos vcApInfos = 6;
   message VcMasterInfos {
      message VcMasterInfo {
         string adminIp = 1;
         enum GrState {
            GrState_AGING = 0;
            GrState_IDLE = 1;
            GrState_RECONNECT = 2;
            GrState_RECOVERY = 3;
         };
         GrState grState = 2;
         enum State {
            State_INIT = 0;
            State_REGISTING = 1;
            State_RUNNING = 2;
            State_SETUP = 3;
         };
         State state = 3;
         string upTime = 4;
      }
      repeated VcMasterInfo vcMasterInfo = 1;
   }
   VcMasterInfos vcMasterInfos = 7;
   message VclusterCommon {
      string adminIp = 1;
      string keychainName = 2;
      uint32 resumeCoefficient = 3;
      uint32 resumePower = 4;
      enum Role {
         Role_DEFAULT = 0;
         Role_MASTER = 1;
      };
      Role role = 5;
      uint32 switchCoefficient = 6;
      uint32 switchPower = 7;
      uint32 vcDetectMultiplier = 8;
      uint32 vcMinRxInterval = 9;
      uint32 vcMinTxInterval = 10;
      bool vcbitErrorDetection = 11;
      bool vclusterEnable = 12;
      uint32 vpDetectMultiplier = 13;
      uint32 vpMinRxInterval = 14;
      uint32 vpMinTxInterval = 15;
      bool vpbitErrorDetection = 16;
      string vpnName = 17;
   }
   VclusterCommon vclusterCommon = 8;
   message VclusterIfs {
      message VclusterIf {
         string ifName = 1;
      }
      repeated VclusterIf vclusterIf = 1;
   }
   VclusterIfs vclusterIfs = 9;
   message VclusterSlots {
      message VclusterSlot {
         bool isDefaultMac = 1;
         string mac = 2;
         string slotId = 3;
      }
      repeated VclusterSlot vclusterSlot = 1;
   }
   VclusterSlots vclusterSlots = 10;
   message VirtualCircuitInfos {
      message VirtualCircuitInfo {
         enum AcStatus {
            AcStatus_DOWN = 0;
            AcStatus_UP = 1;
         };
         AcStatus acStatus = 1;
         string apId = 2;
         string apInterface = 3;
         uint32 createTime = 4;
         string ifName = 5;
         bool isForwardExist = 6;
         uint32 lastChangeTime = 7;
         enum LocalCtrlWord {
            LocalCtrlWord_DISABLE = 0;
            LocalCtrlWord_ENABLE = 1;
         };
         LocalCtrlWord localCtrlWord = 8;
         string localVCCV = 9;
         uint32 localVcLabel = 10;
         uint32 localVcMtu = 11;
         string masterId = 12;
         uint32 protectGroupCount = 13;
         message ProtectGroupInfos {
            message ProtectGroupInfo {
               uint32 groupId = 1;
               enum ProtectGroupType {
                  ProtectGroupType_INVALID = 0;
                  ProtectGroupType_VP = 1;
               };
               ProtectGroupType protectGroupType = 2;
            }
            repeated ProtectGroupInfo protectGroupInfo = 1;
         }
         ProtectGroupInfos protectGroupInfos = 14;
         enum RemoteCtrlWord {
            RemoteCtrlWord_DISABLE = 0;
            RemoteCtrlWord_ENABLE = 1;
         };
         RemoteCtrlWord remoteCtrlWord = 15;
         string remoteVCCV = 16;
         uint32 remoteVcLabel = 17;
         uint32 remoteVcMtu = 18;
         uint32 upTime = 19;
         string vcLastUpTime = 20;
         enum VcState {
            VcState_DOWN = 0;
            VcState_UP = 1;
         };
         VcState vcState = 21;
         uint32 vcTotalUpTime = 22;
         enum VcType {
            VcType_ATMX_1TO1X_VCC = 0;
            VcType_ATMX_1TO1X_VPC = 1;
            VcType_ATMX_AAL5X_PDU = 2;
            VcType_ATMX_AAL5X_SDU = 3;
            VcType_ATMX_NTO1X_VCC = 4;
            VcType_ATMX_NTO1X_VPC = 5;
            VcType_ATMX_TRANSX_CELL = 6;
            VcType_CEM = 7;
            VcType_CESOP = 8;
            VcType_CESOPSNX_BASIC = 9;
            VcType_CESOPSN_TDM = 10;
            VcType_ETHERNET = 11;
            VcType_FR = 12;
            VcType_FRX_PORTX_MODE = 13;
            VcType_FR_DLCI = 14;
            VcType_HDLC = 15;
            VcType_IPX_INTERWORKING = 16;
            VcType_IPX_LAYER2 = 17;
            VcType_PPP = 18;
            VcType_SATOPX_E1 = 19;
            VcType_SATOPX_E3 = 20;
            VcType_SATOPX_T1 = 21;
            VcType_SATOPX_T3 = 22;
            VcType_TDMOIP_AAL1 = 23;
            VcType_TDMOIP_AAL2 = 24;
            VcType_UNKNOWN = 25;
            VcType_VLAN = 26;
         };
         VcType vcType = 23;
      }
      repeated VirtualCircuitInfo virtualCircuitInfo = 1;
   }
   VirtualCircuitInfos virtualCircuitInfos = 11;
   message VirtualPathInfos {
      message VirtualPathInfo {
         string destId = 1;
         uint32 groupId = 2;
         uint32 oamAge = 3;
         enum OamState {
            OamState_DOWN = 0;
            OamState_INVALID = 1;
            OamState_UP = 2;
         };
         OamState oamState = 4;
         string sourceId = 5;
         uint32 vpAge = 6;
         message VpHops {
            message VpHop {
               string hopIfName = 1;
               uint32 hopIndex = 2;
               uint32 inLabel = 3;
               string nodeId = 4;
               uint32 outLabel = 5;
            }
            repeated VpHop vpHop = 1;
         }
         VpHops vpHops = 7;
         uint32 vpId = 8;
         uint32 vpMtu = 9;
         enum VpPointRole {
            VpPointRole_EGRESS = 0;
            VpPointRole_INGRESS = 1;
            VpPointRole_TRANSIT = 2;
         };
         VpPointRole vpPointRole = 10;
      }
      repeated VirtualPathInfo virtualPathInfo = 1;
   }
   VirtualPathInfos virtualPathInfos = 12;
   message VpProtectGroupInfos {
      message VpProtectGroupInfo {
         uint32 activeVpId = 1;
         enum ActiveVpType {
            ActiveVpType_INVALID = 0;
            ActiveVpType_PROCTECTION = 1;
            ActiveVpType_WORKING = 2;
         };
         ActiveVpType activeVpType = 2;
         uint32 age = 3;
         string destId = 4;
         uint32 groupId = 5;
         string sourceId = 6;
         enum State {
            State_DOWN = 0;
            State_GRACEFULX_SWITCH = 1;
            State_UP = 2;
         };
         State state = 7;
         enum TunnelBitErr {
            TunnelBitErr_START = 0;
            TunnelBitErr_STOP = 1;
         };
         TunnelBitErr tunnelBitErr = 8;
         message VirtualPaths {
            message VirtualPath {
               uint32 inLabel = 1;
               string nextHop = 2;
               enum OamState {
                  OamState_DOWN = 0;
                  OamState_INVALID = 1;
                  OamState_UP = 2;
               };
               OamState oamState = 3;
               string outInterface = 4;
               uint32 outLabel = 5;
               enum VpBitErr {
                  VpBitErr_START = 0;
                  VpBitErr_STOP = 1;
               };
               VpBitErr vpBitErr = 6;
               uint32 vpId = 7;
               enum VpType {
                  VpType_INVALID = 0;
                  VpType_PROCTECTION = 1;
                  VpType_WORKING = 2;
               };
               VpType vpType = 8;
            }
            repeated VirtualPath virtualPath = 1;
         }
         VirtualPaths virtualPaths = 9;
      }
      repeated VpProtectGroupInfo vpProtectGroupInfo = 1;
   }
   VpProtectGroupInfos vpProtectGroupInfos = 13;
   message VpStatisticInfo {
      uint32 vpEgressPointNum = 1;
      uint32 vpIngressPointDownNum = 2;
      uint32 vpIngressPointNum = 3;
      uint32 vpIngressPointUpNum = 4;
      uint32 vpProtectGroupDownNum = 5;
      uint32 vpProtectGroupNum = 6;
      uint32 vpProtectGroupUpNum = 7;
      uint32 vpTransitPointNum = 8;
   }
   VpStatisticInfo vpStatisticInfo = 14;
   message Global {
      enum Role {
         Role_DEFAULT = 0;
         Role_MASTER = 1;
      };
      Role role = 1 [json_name = "role"];
      string admin_ip_address = 2 [json_name = "admin-ip-address"];
      string vpn_name = 3 [json_name = "vpn-name"];
      string keychain_name = 4 [json_name = "keychain-name"];
      uint32 vc_min_tx_interval = 5 [json_name = "vc-min-tx-interval"];
      uint32 vc_min_rx_interval = 6 [json_name = "vc-min-rx-interval"];
      uint32 vc_detect_multiplier = 7 [json_name = "vc-detect-multiplier"];
      bool vc_bit_error_detection = 8 [json_name = "vc-bit-error-detection"];
      uint32 vp_min_rx_interval = 9 [json_name = "vp-min-rx-interval"];
      uint32 vp_min_tx_interval = 10 [json_name = "vp-min-tx-interval"];
      uint32 vp_detect_multiplier = 11 [json_name = "vp-detect-multiplier"];
      bool vp_bit_error_detection = 12 [json_name = "vp-bit-error-detection"];
   }
   Global global = 15 [json_name = "global"];
}


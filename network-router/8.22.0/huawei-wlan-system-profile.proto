syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-09 15:04:15
// ProtoYang-version 1
// module huawei-wlan-system-profile
// revision 2022-09-02
// revision 2022-08-19
// revision 2022-07-15
// revision 2022-06-15
// revision 2022-04-08
// namespace urn:huawei:yang:huawei-wlan-system-profile

package huawei_wlan_system_profile;

message WlanSystemProfile {
   message SystemProfiles {
      message SystemProfile {
         string profile_name = 1 [json_name = "profile-name"];
         uint32 management_vlan = 2 [json_name = "management-vlan"];
         bool connectivity_detect = 3 [json_name = "connectivity-detect"];
         message WmiServers {
            message WmiServer {
               uint32 index = 1 [json_name = "index"];
               string wmi_server_name = 2 [json_name = "wmi-server-name"];
            }
            repeated WmiServer wmi_server = 1 [json_name = "wmi-server"];
         }
         WmiServers wmi_servers = 4 [json_name = "wmi-servers"];
         uint32 mtu = 5 [json_name = "mtu"];
         uint32 memory_usage_threshold = 6 [json_name = "memory-usage-threshold"];
         uint32 disk_usage_threshold = 7 [json_name = "disk-usage-threshold"];
         uint32 cpu_usage_threshold = 8 [json_name = "cpu-usage-threshold"];
         enum DhcpClientOption12 {
            DhcpClientOption12_APX_NAME = 0;
            DhcpClientOption12_APX_TYPEX_MAC = 1;
            DhcpClientOption12_DISABLE = 2;
         };
         DhcpClientOption12 dhcp_client_option12 = 9 [json_name = "dhcp-client-option12"];
         bool console = 10 [json_name = "console"];
         bool stelnet_server = 11 [json_name = "stelnet-server"];
         bool telnet = 12 [json_name = "telnet"];
         enum Usb {
            Usb_DISABLE = 0;
            Usb_ENABLEX_2POINT5W = 1;
            Usb_ENABLEX_5W = 2;
         };
         Usb usb = 13 [json_name = "usb"];
         message Led {
            enum LedSwitch {
               LedSwitch_TURNX_ON = 0;
               LedSwitch_TURNX_OFF = 1;
            };
            LedSwitch led_switch = 1 [json_name = "led-switch"];
            string turn_off_by_time = 2 [json_name = "turn-off-by-time"];
         }
         Led led = 14 [json_name = "led"];
         message AclVtys {
            message AclVty {
               uint32 vty_number = 1 [json_name = "vty-number"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 2 [json_name = "direction"];
               uint32 acl_number = 3 [json_name = "acl-number"];
            }
            repeated AclVty acl_vty = 1 [json_name = "acl-vty"];
         }
         AclVtys acl_vtys = 15 [json_name = "acl-vtys"];
         message Poe {
            uint32 max_power = 1 [json_name = "max-power"];
            uint32 power_threshold = 2 [json_name = "power-threshold"];
            bool high_inrush = 3 [json_name = "high-inrush"];
            bool af_inrush = 4 [json_name = "af-inrush"];
            uint32 power_reserved = 5 [json_name = "power-reserved"];
         }
         Poe poe = 16 [json_name = "poe"];
         message LocalManagement {
            bool enable = 1 [json_name = "enable"];
            string ipv4_address = 2 [json_name = "ipv4-address"];
            string sub_net_mask = 3 [json_name = "sub-net-mask"];
         }
         LocalManagement local_management = 17 [json_name = "local-management"];
         message TrafficOptimize {
            uint32 arp_threshold = 1 [json_name = "arp-threshold"];
            uint32 igmp_threshold = 2 [json_name = "igmp-threshold"];
            uint32 nd_threshold = 3 [json_name = "nd-threshold"];
            uint32 dhcp_threshold = 4 [json_name = "dhcp-threshold"];
            uint32 dhcpv6_threshold = 5 [json_name = "dhcpv6-threshold"];
            uint32 mdns_threshold = 6 [json_name = "mdns-threshold"];
            uint32 other_broadcast_threshold = 7 [json_name = "other-broadcast-threshold"];
            uint32 other_multicast_threshold = 8 [json_name = "other-multicast-threshold"];
            bool arp = 9 [json_name = "arp"];
            bool igmp = 10 [json_name = "igmp"];
            bool nd = 11 [json_name = "nd"];
            bool dhcp = 12 [json_name = "dhcp"];
            bool dhcpv6 = 13 [json_name = "dhcpv6"];
            bool mdns = 14 [json_name = "mdns"];
            bool other_broadcast = 15 [json_name = "other-broadcast"];
            bool other_multicast = 16 [json_name = "other-multicast"];
         }
         TrafficOptimize traffic_optimize = 18 [json_name = "traffic-optimize"];
         message IgmpGroupBandwidths {
            message IgmpGroupBandwidth {
               string start_group_address = 1 [json_name = "start-group-address"];
               string end_group_address = 2 [json_name = "end-group-address"];
               uint32 bandwidth = 3 [json_name = "bandwidth"];
            }
            repeated IgmpGroupBandwidth igmp_group_bandwidth = 1 [json_name = "igmp-group-bandwidth"];
         }
         IgmpGroupBandwidths igmp_group_bandwidths = 19 [json_name = "igmp-group-bandwidths"];
         message CpuDefends {
            message CpuDefend {
               string packet_protocol_type = 1 [json_name = "packet-protocol-type"];
               enum PacketType {
                  PacketType_WIRED = 0;
                  PacketType_WIRELESS = 1;
               };
               PacketType packet_type = 2 [json_name = "packet-type"];
               uint32 rate_limit = 3 [json_name = "rate-limit"];
            }
            repeated CpuDefend cpu_defend = 1 [json_name = "cpu-defend"];
         }
         CpuDefends cpu_defends = 20 [json_name = "cpu-defends"];
         message PacketAutoDetect {
            uint32 broadcast_packet = 1 [json_name = "broadcast-packet"];
            uint32 multicast_packet = 2 [json_name = "multicast-packet"];
            bool unicast_switch = 3 [json_name = "unicast-switch"];
            uint32 unicast_packet = 4 [json_name = "unicast-packet"];
         }
         PacketAutoDetect packet_auto_detect = 21 [json_name = "packet-auto-detect"];
         message TemperatureThresholds {
            message TemperatureThreshold {
               enum TemperatureLevel {
                  TemperatureLevel_HIGH = 0;
                  TemperatureLevel_LOW = 1;
               };
               TemperatureLevel temperature_level = 1 [json_name = "temperature-level"];
               enum TemperatureType {
                  TemperatureType_ENVIRONMENT = 0;
                  TemperatureType_CPU = 1;
                  TemperatureType_NP = 2;
                  TemperatureType_DEVICE = 3;
               };
               TemperatureType temperature_type = 2 [json_name = "temperature-type"];
               int32 low_threshold = 3 [json_name = "low-threshold"];
               uint32 high_threshold = 4 [json_name = "high-threshold"];
            }
            repeated TemperatureThreshold temperature_threshold = 1 [json_name = "temperature-threshold"];
         }
         TemperatureThresholds temperature_thresholds = 22 [json_name = "temperature-thresholds"];
         message BindingStaWhiteBlackListProfile {
            message StaAccessMode_Whitelist {
               string binding_sta_whitelist_profile = 1 [json_name = "binding-sta-whitelist-profile"];
            }
            message StaAccessMode_Blacklist {
               string binding_sta_blacklist_profile = 1 [json_name = "binding-sta-blacklist-profile"];
            }
            oneof StaAccessMode {
               StaAccessMode_Whitelist sta_access_mode_whitelist = 1 [json_name = "whitelist"];
               StaAccessMode_Blacklist sta_access_mode_blacklist = 2 [json_name = "blacklist"];
            }
         }
         BindingStaWhiteBlackListProfile binding_sta_white_black_list_profile = 23 [json_name = "binding-sta-white-black-list-profile"];
      }
      repeated SystemProfile system_profile = 1 [json_name = "system-profile"];
   }
   SystemProfiles system_profiles = 1 [json_name = "system-profiles"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-06-22 15:03:07
// ProtoYang-version 1
// module huawei-netstream
// revision 2022-06-22
// revision 2022-05-05
// revision 2022-03-01
// revision 2022-01-19
// revision 2021-12-13
// revision 2020-03-10
// revision 2020-03-09
// revision 2020-02-26
// revision 2020-01-09
// revision 2020-01-02
// revision 2019-10-25
// revision 2019-10-12
// revision 2019-06-27
// namespace urn:huawei:yang:huawei-netstream

package huawei_netstream;

message Netstream {
   message FlowInstances {
      message FlowInstance {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         string source_ipv4_address = 2 [json_name = "source-ipv4-address"];
         uint32 source_ipv4_port = 3 [json_name = "source-ipv4-port"];
         string source_ipv6_address = 4 [json_name = "source-ipv6-address"];
         uint32 source_ipv6_port = 5 [json_name = "source-ipv6-port"];
         enum ExportVersion {
            INVALID_ENUM_VALUE_ExportVersion = 0;
            ExportVersion_X_5 = 5;
            ExportVersion_X_9 = 9;
            ExportVersion_IPFIX = 10;
         };
         ExportVersion export_version = 6 [json_name = "export-version"];
         enum AsType {
            AsType_INVALIDX_AS = 0;
            AsType_ORIGINX_AS = 1;
            AsType_PEERX_AS = 2;
         };
         AsType as_type = 7 [json_name = "as-type"];
         enum BgpNexthop {
            BgpNexthop_FALSE = 0;
            BgpNexthop_TRUE = 1;
         };
         BgpNexthop bgp_nexthop = 8 [json_name = "bgp-nexthop"];
         uint32 template_timeout_rate = 9 [json_name = "template-timeout-rate"];
         uint32 option_template_timeout_rate = 10 [json_name = "option-template-timeout-rate"];
         uint32 option_template_refresh_rate = 11 [json_name = "option-template-refresh-rate"];
         message AggActiveAge_Minutes {
            uint32 agg_active_age_minutes = 1 [json_name = "agg-active-age-minutes"];
         }
         message AggActiveAge_Seconds {
            uint32 agg_active_age_seconds = 1 [json_name = "agg-active-age-seconds"];
         }
         oneof AggActiveAge {
            AggActiveAge_Minutes agg_active_age_minutes = 12 [json_name = "minutes"];
            AggActiveAge_Seconds agg_active_age_seconds = 13 [json_name = "seconds"];
         }
         uint32 agg_inactive_age_seconds = 14 [json_name = "agg-inactive-age-seconds"];
         message OriginActiveAge_Minutes {
            uint32 origin_active_age_minutes = 1 [json_name = "origin-active-age-minutes"];
         }
         message OriginActiveAge_Seconds {
            uint32 origin_active_age_seconds = 1 [json_name = "origin-active-age-seconds"];
         }
         oneof OriginActiveAge {
            OriginActiveAge_Minutes origin_active_age_minutes = 15 [json_name = "minutes"];
            OriginActiveAge_Seconds origin_active_age_seconds = 16 [json_name = "seconds"];
         }
         uint32 origin_inactive_seconds = 17 [json_name = "origin-inactive-seconds"];
         enum AsMode {
            AsMode_X_16 = 0;
            AsMode_X_32 = 1;
         };
         AsMode as_mode = 18 [json_name = "as-mode"];
         enum IndexSwitch {
            IndexSwitch_X_16 = 0;
            IndexSwitch_X_32 = 1;
         };
         IndexSwitch index_switch = 19 [json_name = "index-switch"];
         enum TcpflagEnable {
            TcpflagEnable_FALSE = 0;
            TcpflagEnable_TRUE = 1;
         };
         TcpflagEnable tcpflag_enable = 20 [json_name = "tcpflag-enable"];
         enum MplsAwareEnable {
            MplsAwareEnable_IPX_ONLY = 0;
            MplsAwareEnable_LABELX_ANDX_IP = 1;
            MplsAwareEnable_LABELX_ONLY = 2;
         };
         MplsAwareEnable mpls_aware_enable = 21 [json_name = "mpls-aware-enable"];
         enum InterfaceOptionEnable {
            InterfaceOptionEnable_FALSE = 0;
            InterfaceOptionEnable_TRUE = 1;
         };
         InterfaceOptionEnable interface_option_enable = 23 [json_name = "interface-option-enable"];
         enum TtlFlag {
            TtlFlag_FALSE = 0;
            TtlFlag_TRUE = 1;
         };
         TtlFlag ttl_flag = 24 [json_name = "ttl-flag"];
         enum SequenceNumberFix {
            SequenceNumberFix_FALSE = 0;
            SequenceNumberFix_TRUE = 1;
         };
         SequenceNumberFix sequence_number_fix = 25 [json_name = "sequence-number-fix"];
         message SamplerRates {
            message SamplerRate {
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 1 [json_name = "direction"];
               message SamplerType_FixPackets {
                  uint32 fix_packets_value = 1 [json_name = "fix-packets-value"];
               }
               message SamplerType_FixTime {
                  uint32 fix_time_value = 1 [json_name = "fix-time-value"];
               }
               message SamplerType_RandomPackets {
                  uint32 random_packets_value = 1 [json_name = "random-packets-value"];
               }
               oneof SamplerType {
                  SamplerType_FixPackets sampler_type_fix_packets = 3 [json_name = "fix-packets"];
                  SamplerType_FixTime sampler_type_fix_time = 4 [json_name = "fix-time"];
                  SamplerType_RandomPackets sampler_type_random_packets = 5 [json_name = "random-packets"];
               }
            }
            repeated SamplerRate sampler_rate = 1 [json_name = "sampler-rate"];
         }
         SamplerRates sampler_rates = 26 [json_name = "sampler-rates"];
         message ExportIpv4Hosts {
            message ExportIpv4Host {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               uint32 dscp_value = 4 [json_name = "dscp-value"];
            }
            repeated ExportIpv4Host export_ipv4_host = 1 [json_name = "export-ipv4-host"];
         }
         ExportIpv4Hosts export_ipv4_hosts = 27 [json_name = "export-ipv4-hosts"];
         enum Srv6Aware {
            INVALID_ENUM_VALUE_Srv6Aware = 0;
            Srv6Aware_INNERX_HEADER = 1;
         };
         Srv6Aware srv6_aware = 28 [json_name = "srv6-aware"];
         uint32 option_data_timeout_rate = 29 [json_name = "option-data-timeout-rate"];
         string record_name = 32 [json_name = "record-name"];
         enum RdFlag {
            RdFlag_FALSE = 0;
            RdFlag_TRUE = 1;
         };
         RdFlag rd_flag = 33 [json_name = "rd-flag"];
         enum TcpSessionTimeout {
            TcpSessionTimeout_FALSE = 0;
            TcpSessionTimeout_TRUE = 1;
         };
         TcpSessionTimeout tcp_session_timeout = 34 [json_name = "tcp-session-timeout"];
         message ExportIpv6Hosts {
            message ExportIpv6Host {
               string address = 1 [json_name = "address"];
               uint32 port = 2 [json_name = "port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               uint32 dscp_value = 4 [json_name = "dscp-value"];
            }
            repeated ExportIpv6Host export_ipv6_host = 1 [json_name = "export-ipv6-host"];
         }
         ExportIpv6Hosts export_ipv6_hosts = 35 [json_name = "export-ipv6-hosts"];
      }
      repeated FlowInstance flow_instance = 1 [json_name = "flow-instance"];
   }
   FlowInstances flow_instances = 1 [json_name = "flow-instances"];
   message Aggregations {
      message Aggregation {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         enum AggType {
            AggType_AS = 0;
            AggType_ASX_TOS = 1;
            AggType_PROTOCOLX_PORT = 2;
            AggType_PROTOCOLX_PORTX_TOS = 3;
            AggType_SOURCEX_PREFIX = 4;
            AggType_SOURCEX_PREFIXX_TOS = 5;
            AggType_DESTINATIONX_PREFIX = 6;
            AggType_DESTINATIONX_PREFIXX_TOS = 7;
            AggType_PREFIX = 8;
            AggType_PREFIXX_TOS = 9;
            AggType_MPLSX_LABEL = 10;
            AggType_VLANX_ID = 11;
            AggType_BGPX_NEXTHOPX_TOS = 12;
            AggType_INDEXX_TOS = 13;
            AggType_SOURCEX_INDEXX_TOS = 14;
            AggType_BGPX_COMMUNITY = 15;
            AggType_VNIX_SIPX_DIP = 16;
         };
         AggType agg_type = 2 [json_name = "agg-type"];
         enum AggEnable {
            AggEnable_FALSE = 0;
            AggEnable_TRUE = 1;
         };
         AggEnable agg_enable = 3 [json_name = "agg-enable"];
         uint32 template_timeout_minutes = 4 [json_name = "template-timeout-minutes"];
         uint32 source_mask = 5 [json_name = "source-mask"];
         uint32 dest_mask = 6 [json_name = "dest-mask"];
         string source_ipv4_address = 7 [json_name = "source-ipv4-address"];
         uint32 source_ipv4_port = 8 [json_name = "source-ipv4-port"];
         string source_ipv6_address = 9 [json_name = "source-ipv6-address"];
         uint32 source_ipv6_port = 10 [json_name = "source-ipv6-port"];
         enum Version {
            INVALID_ENUM_VALUE_Version = 0;
            Version_V8 = 8;
            Version_V9 = 9;
            Version_IPFIX = 10;
         };
         Version version = 11 [json_name = "version"];
         message ExportIpv4Hosts {
            message ExportIpv4Host {
               string host_ip_address = 1 [json_name = "host-ip-address"];
               uint32 host_port = 2 [json_name = "host-port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               uint32 dscp_value = 4 [json_name = "dscp-value"];
            }
            repeated ExportIpv4Host export_ipv4_host = 1 [json_name = "export-ipv4-host"];
         }
         ExportIpv4Hosts export_ipv4_hosts = 12 [json_name = "export-ipv4-hosts"];
         message ExportIpv6Hosts {
            message ExportIpv6Host {
               string host_ip_address = 1 [json_name = "host-ip-address"];
               uint32 host_port = 2 [json_name = "host-port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               uint32 dscp_value = 4 [json_name = "dscp-value"];
            }
            repeated ExportIpv6Host export_ipv6_host = 1 [json_name = "export-ipv6-host"];
         }
         ExportIpv6Hosts export_ipv6_hosts = 13 [json_name = "export-ipv6-hosts"];
      }
      repeated Aggregation aggregation = 1 [json_name = "aggregation"];
   }
   Aggregations aggregations = 2 [json_name = "aggregations"];
   message Monitors {
      message Monitor {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         string monitor_name = 2 [json_name = "monitor-name"];
         uint32 apply_interface_count = 3 [json_name = "apply-interface-count"];
         string record_name = 4 [json_name = "record-name"];
         string source_ipv4_address = 5 [json_name = "source-ipv4-address"];
         uint32 source_ipv4_port = 6 [json_name = "source-ipv4-port"];
         string source_ipv6_addr = 7 [json_name = "source-ipv6-addr"];
         uint32 source_ipv6_port = 8 [json_name = "source-ipv6-port"];
         message ExportHostIpv4S {
            message ExportHostIpv4 {
               string host_ip_address = 1 [json_name = "host-ip-address"];
               uint32 host_port = 2 [json_name = "host-port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               enum Version {
                  INVALID_ENUM_VALUE_Version = 0;
                  Version_X_5 = 5;
                  Version_X_9 = 9;
                  Version_IPFIX = 10;
               };
               Version version = 4 [json_name = "version"];
               uint32 dscp_value = 5 [json_name = "dscp-value"];
            }
            repeated ExportHostIpv4 export_host_ipv4 = 1 [json_name = "export-host-ipv4"];
         }
         ExportHostIpv4S export_host_ipv4s = 9 [json_name = "export-host-ipv4s"];
         message ExportHostIpv6S {
            message ExportHostIpv6 {
               string host_ipv6_addr = 1 [json_name = "host-ipv6-addr"];
               uint32 host_port = 2 [json_name = "host-port"];
               string vpn_name = 3 [json_name = "vpn-name"];
               enum Version {
                  INVALID_ENUM_VALUE_Version = 0;
                  Version_X_5 = 5;
                  Version_X_9 = 9;
                  Version_IPFIX = 10;
               };
               Version version = 4 [json_name = "version"];
               uint32 dscp_value = 5 [json_name = "dscp-value"];
            }
            repeated ExportHostIpv6 export_host_ipv6 = 1 [json_name = "export-host-ipv6"];
         }
         ExportHostIpv6S export_host_ipv6s = 10 [json_name = "export-host-ipv6s"];
         message ApplyInterfaces {
            message ApplyInterface {
               string interface_name = 1 [json_name = "interface-name"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 2 [json_name = "direction"];
            }
            repeated ApplyInterface apply_interface = 1 [json_name = "apply-interface"];
         }
         ApplyInterfaces apply_interfaces = 11 [json_name = "apply-interfaces"];
      }
      repeated Monitor monitor = 1 [json_name = "monitor"];
   }
   Monitors monitors = 3 [json_name = "monitors"];
   message FlexflowRecords {
      message FlexflowRecord {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         string record_name = 2 [json_name = "record-name"];
         enum SourceAddress {
            SourceAddress_FALSE = 0;
            SourceAddress_TRUE = 1;
         };
         SourceAddress source_address = 3 [json_name = "source-address"];
         enum SourceAs {
            SourceAs_FALSE = 0;
            SourceAs_TRUE = 1;
         };
         SourceAs source_as = 4 [json_name = "source-as"];
         uint32 bytes_value = 5 [json_name = "bytes-value"];
         uint32 packets_value = 6 [json_name = "packets-value"];
         enum FirstTime {
            FirstTime_FALSE = 0;
            FirstTime_TRUE = 1;
         };
         FirstTime first_time = 7 [json_name = "first-time"];
         enum LastTime {
            LastTime_FALSE = 0;
            LastTime_TRUE = 1;
         };
         LastTime last_time = 8 [json_name = "last-time"];
         string description = 9 [json_name = "description"];
         enum Protocol {
            Protocol_FALSE = 0;
            Protocol_TRUE = 1;
         };
         Protocol protocol = 10 [json_name = "protocol"];
         enum Tos {
            Tos_FALSE = 0;
            Tos_TRUE = 1;
         };
         Tos tos = 11 [json_name = "tos"];
         enum TcpFlag {
            TcpFlag_FALSE = 0;
            TcpFlag_TRUE = 1;
         };
         TcpFlag tcp_flag = 12 [json_name = "tcp-flag"];
         enum SourceMask {
            SourceMask_FALSE = 0;
            SourceMask_TRUE = 1;
         };
         SourceMask source_mask = 13 [json_name = "source-mask"];
         enum DestinationAddress {
            DestinationAddress_FALSE = 0;
            DestinationAddress_TRUE = 1;
         };
         DestinationAddress destination_address = 14 [json_name = "destination-address"];
         enum DestinationMask {
            DestinationMask_FALSE = 0;
            DestinationMask_TRUE = 1;
         };
         DestinationMask destination_mask = 15 [json_name = "destination-mask"];
         enum SourcePort {
            SourcePort_FALSE = 0;
            SourcePort_TRUE = 1;
         };
         SourcePort source_port = 16 [json_name = "source-port"];
         enum DestinationPort {
            DestinationPort_FALSE = 0;
            DestinationPort_TRUE = 1;
         };
         DestinationPort destination_port = 17 [json_name = "destination-port"];
         enum DestinationAs {
            DestinationAs_FALSE = 0;
            DestinationAs_TRUE = 1;
         };
         DestinationAs destination_as = 18 [json_name = "destination-as"];
         enum FlowLabel {
            FlowLabel_FALSE = 0;
            FlowLabel_TRUE = 1;
         };
         FlowLabel flow_label = 19 [json_name = "flow-label"];
         enum SourceVlan {
            SourceVlan_FALSE = 0;
            SourceVlan_TRUE = 1;
         };
         SourceVlan source_vlan = 20 [json_name = "source-vlan"];
         enum DestinationVlan {
            DestinationVlan_FALSE = 0;
            DestinationVlan_TRUE = 1;
         };
         DestinationVlan destination_vlan = 21 [json_name = "destination-vlan"];
         enum Direction {
            Direction_FALSE = 0;
            Direction_TRUE = 1;
         };
         Direction direction = 22 [json_name = "direction"];
         enum InputInterface {
            InputInterface_FALSE = 0;
            InputInterface_TRUE = 1;
         };
         InputInterface input_interface = 23 [json_name = "input-interface"];
         enum OutputInterface {
            OutputInterface_FALSE = 0;
            OutputInterface_TRUE = 1;
         };
         OutputInterface output_interface = 24 [json_name = "output-interface"];
         enum Nexthop {
            Nexthop_FALSE = 0;
            Nexthop_TRUE = 1;
         };
         Nexthop nexthop = 25 [json_name = "nexthop"];
         enum BgpNexthop {
            BgpNexthop_FALSE = 0;
            BgpNexthop_TRUE = 1;
         };
         BgpNexthop bgp_nexthop = 26 [json_name = "bgp-nexthop"];
         enum MplsLabel {
            MplsLabel_FALSE = 0;
            MplsLabel_TRUE = 1;
         };
         MplsLabel mpls_label = 27 [json_name = "mpls-label"];
         enum MplsLabelPos1 {
            MplsLabelPos1_FALSE = 0;
            MplsLabelPos1_TRUE = 1;
         };
         MplsLabelPos1 mpls_label_pos1 = 28 [json_name = "mpls-label-pos1"];
         enum MplsLabelPos2 {
            MplsLabelPos2_FALSE = 0;
            MplsLabelPos2_TRUE = 1;
         };
         MplsLabelPos2 mpls_label_pos2 = 29 [json_name = "mpls-label-pos2"];
         enum MplsLabelPos3 {
            MplsLabelPos3_FALSE = 0;
            MplsLabelPos3_TRUE = 1;
         };
         MplsLabelPos3 mpls_label_pos3 = 30 [json_name = "mpls-label-pos3"];
         enum SourceMac {
            SourceMac_FALSE = 0;
            SourceMac_TRUE = 1;
         };
         SourceMac source_mac = 31 [json_name = "source-mac"];
         enum DestinationMac {
            DestinationMac_FALSE = 0;
            DestinationMac_TRUE = 1;
         };
         DestinationMac destination_mac = 32 [json_name = "destination-mac"];
         enum EthernetType {
            EthernetType_FALSE = 0;
            EthernetType_TRUE = 1;
         };
         EthernetType ethernet_type = 33 [json_name = "ethernet-type"];
         enum Pvlan {
            Pvlan_FALSE = 0;
            Pvlan_TRUE = 1;
         };
         Pvlan pvlan = 34 [json_name = "pvlan"];
         enum Cvlan {
            Cvlan_FALSE = 0;
            Cvlan_TRUE = 1;
         };
         Cvlan cvlan = 35 [json_name = "cvlan"];
         enum SampleInfo {
            SampleInfo_FALSE = 0;
            SampleInfo_TRUE = 1;
         };
         SampleInfo sample_info = 36 [json_name = "sample-info"];
         enum SdWanCollection {
            SdWanCollection_FALSE = 0;
            SdWanCollection_TRUE = 1;
         };
         SdWanCollection sd_wan_collection = 37 [json_name = "sd-wan-collection"];
         enum ApplicationName {
            ApplicationName_FALSE = 0;
            ApplicationName_TRUE = 1;
         };
         ApplicationName application_name = 38 [json_name = "application-name"];
         enum SdWanConnection {
            SdWanConnection_FALSE = 0;
            SdWanConnection_TRUE = 1;
         };
         SdWanConnection sd_wan_connection = 39 [json_name = "sd-wan-connection"];
         enum FlowEndReason {
            FlowEndReason_FALSE = 0;
            FlowEndReason_TRUE = 1;
         };
         FlowEndReason flow_end_reason = 40 [json_name = "flow-end-reason"];
      }
      repeated FlexflowRecord flexflow_record = 1 [json_name = "flexflow-record"];
   }
   FlexflowRecords flexflow_records = 4 [json_name = "flexflow-records"];
   message SamplerRateLowerLimits {
      message SamplerRateLowerLimit {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 fix_packets_lower_limit = 2 [json_name = "fix-packets-lower-limit"];
         uint32 fix_time_lower_limit = 3 [json_name = "fix-time-lower-limit"];
         uint32 random_packets_lower_limit = 4 [json_name = "random-packets-lower-limit"];
      }
      repeated SamplerRateLowerLimit sampler_rate_lower_limit = 1 [json_name = "sampler-rate-lower-limit"];
   }
   SamplerRateLowerLimits sampler_rate_lower_limits = 5 [json_name = "sampler-rate-lower-limits"];
   message TemplateExportStatistics {
      message TemplateExportStatistic {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         enum StatisticType {
            StatisticType_TEMPLATE = 0;
            StatisticType_PACK = 1;
         };
         StatisticType statistic_type = 2 [json_name = "statistic-type"];
         enum ExportType {
            ExportType_OPTION = 0;
            ExportType_AGGREGATION = 1;
            ExportType_ORIGIN = 2;
            ExportType_RECORD = 3;
         };
         ExportType export_type = 3 [json_name = "export-type"];
         string export_key = 4 [json_name = "export-key"];
         uint32 success_num = 5 [json_name = "success-num"];
         uint32 failed_num = 6 [json_name = "failed-num"];
      }
      repeated TemplateExportStatistic template_export_statistic = 1 [json_name = "template-export-statistic"];
   }
   TemplateExportStatistics template_export_statistics = 6 [json_name = "template-export-statistics"];
   message OptionApplicationLabels {
      enum TalEnable {
         TalEnable_FALSE = 0;
         TalEnable_TRUE = 1;
      };
      TalEnable tal_enable = 1 [json_name = "tal-enable"];
      message TalInfos {
         message TalInfo {
            enum TalType {
               INVALID_ENUM_VALUE_TalType = 0;
               TalType_MPLS = 1;
            };
            TalType tal_type = 1 [json_name = "tal-type"];
            string ip_address = 2 [json_name = "ip-address"];
            uint32 total_num = 3 [json_name = "total-num"];
            string router_id = 4 [json_name = "router-id"];
            string create_time = 5 [json_name = "create-time"];
         }
         repeated TalInfo tal_info = 1 [json_name = "tal-info"];
      }
      TalInfos tal_infos = 2 [json_name = "tal-infos"];
   }
   OptionApplicationLabels option_application_labels = 7 [json_name = "option-application-labels"];
   message StreamInfos {
      message StreamInfo {
         string slot_id = 1 [json_name = "slot-id"];
         string source_ipv4_address = 2 [json_name = "source-ipv4-address"];
         string destination_ipv4_address = 3 [json_name = "destination-ipv4-address"];
         uint32 source_port = 4 [json_name = "source-port"];
         uint32 destination_port = 5 [json_name = "destination-port"];
         uint32 protocol = 6 [json_name = "protocol"];
         string interface_name = 7 [json_name = "interface-name"];
         enum PacketType {
            INVALID_ENUM_VALUE_PacketType = 0;
            PacketType_IPV4 = 1;
            PacketType_MPLS = 2;
         };
         PacketType packet_type = 8 [json_name = "packet-type"];
         string start_time = 9 [json_name = "start-time"];
         string end_time = 10 [json_name = "end-time"];
         enum Direction {
            Direction_INBOUND = 0;
            Direction_OUTBOUND = 1;
         };
         Direction direction = 11 [json_name = "direction"];
         uint32 packet_bytes = 12 [json_name = "packet-bytes"];
         uint32 tos = 13 [json_name = "tos"];
         uint32 ttl = 14 [json_name = "ttl"];
         uint32 tcp_flag = 15 [json_name = "tcp-flag"];
         uint32 vni_id = 16 [json_name = "vni-id"];
         uint32 vlan_id = 17 [json_name = "vlan-id"];
         uint32 mpls_label1 = 18 [json_name = "mpls-label1"];
         uint32 mpls_exp1 = 19 [json_name = "mpls-exp1"];
         uint32 mpls_bottom1 = 20 [json_name = "mpls-bottom1"];
         uint32 mpls_label2 = 21 [json_name = "mpls-label2"];
         uint32 mpls_exp2 = 22 [json_name = "mpls-exp2"];
         uint32 mpls_bottom2 = 23 [json_name = "mpls-bottom2"];
         uint32 mpls_label3 = 24 [json_name = "mpls-label3"];
         uint32 mpls_exp3 = 25 [json_name = "mpls-exp3"];
         uint32 mpls_bottom3 = 26 [json_name = "mpls-bottom3"];
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 27 [json_name = "flow-type"];
         enum AggType {
            AggType_AS = 0;
            AggType_ASX_TOS = 1;
            AggType_PROTOCOLX_PORT = 2;
            AggType_PROTOCOLX_PORTX_TOS = 3;
            AggType_SOURCEX_PREFIX = 4;
            AggType_SOURCEX_PREFIXX_TOS = 5;
            AggType_DESTINATIONX_PREFIX = 6;
            AggType_DESTINATIONX_PREFIXX_TOS = 7;
            AggType_PREFIX = 8;
            AggType_PREFIXX_TOS = 9;
            AggType_MPLSX_LABEL = 10;
            AggType_VLANX_ID = 11;
            AggType_BGPX_NEXTHOPX_TOS = 12;
            AggType_INDEXX_TOS = 13;
            AggType_SOURCEX_INDEXX_TOS = 14;
            AggType_BGPX_COMMUNITY = 15;
            AggType_VNIX_SIPX_DIP = 16;
         };
         AggType agg_type = 28 [json_name = "agg-type"];
         string flexible_flow_template = 29 [json_name = "flexible-flow-template"];
         string source_ipv6_address = 30 [json_name = "source-ipv6-address"];
         string destination_ipv6_address = 31 [json_name = "destination-ipv6-address"];
         string destination_interface_name = 32 [json_name = "destination-interface-name"];
         uint32 source_mask = 33 [json_name = "source-mask"];
         uint32 destination_mask = 34 [json_name = "destination-mask"];
         uint32 source_as = 35 [json_name = "source-as"];
         uint32 destination_as = 36 [json_name = "destination-as"];
         uint32 stream_count = 37 [json_name = "stream-count"];
         uint32 packet_count = 38 [json_name = "packet-count"];
         uint32 bytes_count = 39 [json_name = "bytes-count"];
         uint32 destination_vlan_id = 40 [json_name = "destination-vlan-id"];
         string source_prefix = 41 [json_name = "source-prefix"];
         string destination_prefix = 42 [json_name = "destination-prefix"];
         string nexthop = 43 [json_name = "nexthop"];
         string bgp_nexthop = 44 [json_name = "bgp-nexthop"];
         uint32 top_label_type = 45 [json_name = "top-label-type"];
         string top_label_ip_address = 46 [json_name = "top-label-ip-address"];
         string create_time = 47 [json_name = "create-time"];
         string last_time = 48 [json_name = "last-time"];
         string vpn = 49 [json_name = "vpn"];
         uint32 flow_label = 50 [json_name = "flow-label"];
         string rd_value = 51 [json_name = "rd-value"];
         string community1 = 52 [json_name = "community1"];
         string community2 = 53 [json_name = "community2"];
         string community3 = 54 [json_name = "community3"];
         string community4 = 55 [json_name = "community4"];
         uint32 first_time_stamp = 56 [json_name = "first-time-stamp"];
         uint32 last_time_stamp = 57 [json_name = "last-time-stamp"];
         enum ForwardingStatus {
            ForwardingStatus_UNKNOWN = 0;
            ForwardingStatus_FORWARDEDX_UNKNOWN = 64;
            ForwardingStatus_FORWARDEDX_FRAGMENTED = 65;
            ForwardingStatus_FORWARDEDX_NOTX_FRAGMENTED = 66;
            ForwardingStatus_DROPX_UNKNOWN = 128;
            ForwardingStatus_DROPX_ACLX_DENY = 129;
            ForwardingStatus_DROPX_UNROUTABLE = 131;
            ForwardingStatus_DROPX_BADX_HEADERX_CHECKSUM = 134;
            ForwardingStatus_DROPX_BADX_HEADERX_LENGTH = 136;
            ForwardingStatus_DROPX_BADX_TTL = 137;
            ForwardingStatus_DROPX_REVERSEX_PATHX_FORWARDING = 140;
         };
         ForwardingStatus forwarding_status = 58 [json_name = "forwarding-status"];
      }
      repeated StreamInfo stream_info = 1 [json_name = "stream-info"];
   }
   StreamInfos stream_infos = 8 [json_name = "stream-infos"];
   message StreamLogInfos {
      message StreamLogInfo {
         string source_ipv4_address = 1 [json_name = "source-ipv4-address"];
         string destination_ipv4_address = 2 [json_name = "destination-ipv4-address"];
         uint32 source_port = 3 [json_name = "source-port"];
         uint32 destination_port = 4 [json_name = "destination-port"];
         uint32 protocol = 5 [json_name = "protocol"];
         string interface_name = 6 [json_name = "interface-name"];
         enum PacketType {
            INVALID_ENUM_VALUE_PacketType = 0;
            PacketType_IPV4 = 1;
            PacketType_MPLS = 2;
         };
         PacketType packet_type = 7 [json_name = "packet-type"];
         string start_time = 8 [json_name = "start-time"];
         string end_time = 9 [json_name = "end-time"];
         enum Direction {
            Direction_INBOUND = 0;
            Direction_OUTBOUND = 1;
         };
         Direction direction = 10 [json_name = "direction"];
         uint32 packet_bytes = 11 [json_name = "packet-bytes"];
         uint32 tos = 12 [json_name = "tos"];
         uint32 ttl = 13 [json_name = "ttl"];
         uint32 tcp_flag = 14 [json_name = "tcp-flag"];
         uint32 vni_id = 15 [json_name = "vni-id"];
         uint32 vlan_id = 16 [json_name = "vlan-id"];
         uint32 mpls_label1 = 17 [json_name = "mpls-label1"];
         uint32 mpls_exp1 = 18 [json_name = "mpls-exp1"];
         uint32 mpls_bottom1 = 19 [json_name = "mpls-bottom1"];
         uint32 mpls_label2 = 20 [json_name = "mpls-label2"];
         uint32 mpls_exp2 = 21 [json_name = "mpls-exp2"];
         uint32 mpls_bottom2 = 22 [json_name = "mpls-bottom2"];
         uint32 mpls_label3 = 23 [json_name = "mpls-label3"];
         uint32 mpls_exp3 = 24 [json_name = "mpls-exp3"];
         uint32 mpls_bottom3 = 25 [json_name = "mpls-bottom3"];
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 26 [json_name = "flow-type"];
         string source_ipv6_address = 27 [json_name = "source-ipv6-address"];
         string destination_ipv6_address = 28 [json_name = "destination-ipv6-address"];
         string destination_interface_name = 29 [json_name = "destination-interface-name"];
         uint32 source_mask = 30 [json_name = "source-mask"];
         uint32 destination_mask = 31 [json_name = "destination-mask"];
         uint32 source_as = 32 [json_name = "source-as"];
         uint32 destination_as = 33 [json_name = "destination-as"];
         uint32 packet_count = 34 [json_name = "packet-count"];
         uint32 bytes_count = 35 [json_name = "bytes-count"];
         string nexthop = 36 [json_name = "nexthop"];
         string bgp_nexthop = 37 [json_name = "bgp-nexthop"];
         uint32 top_label_type = 38 [json_name = "top-label-type"];
         string top_label_ip_address = 39 [json_name = "top-label-ip-address"];
         string create_time = 40 [json_name = "create-time"];
         string last_time = 41 [json_name = "last-time"];
         string vpn = 42 [json_name = "vpn"];
         uint32 flow_label = 43 [json_name = "flow-label"];
         string rd_value = 44 [json_name = "rd-value"];
         enum ForwardingStatus {
            ForwardingStatus_UNKNOWN = 0;
            ForwardingStatus_FORWARDEDX_UNKNOWN = 64;
            ForwardingStatus_FORWARDEDX_FRAGMENTED = 65;
            ForwardingStatus_FORWARDEDX_NOTX_FRAGMENTED = 66;
            ForwardingStatus_DROPX_UNKNOWN = 128;
            ForwardingStatus_DROPX_ACLX_DENY = 129;
            ForwardingStatus_DROPX_UNROUTABLE = 131;
            ForwardingStatus_DROPX_BADX_HEADERX_CHECKSUM = 134;
            ForwardingStatus_DROPX_BADX_HEADERX_LENGTH = 136;
            ForwardingStatus_DROPX_BADX_TTL = 137;
            ForwardingStatus_DROPX_REVERSEX_PATHX_FORWARDING = 140;
         };
         ForwardingStatus forwarding_status = 45 [json_name = "forwarding-status"];
         enum FlowEndReason {
            FlowEndReason_UNKNOWN = 0;
            FlowEndReason_IDLEX_TIMEOUT = 1;
            FlowEndReason_ACTIVEX_TIMEOUT = 2;
            FlowEndReason_ENDX_OFX_FLOWX_DETECTED = 3;
            FlowEndReason_FORCEDX_END = 4;
            FlowEndReason_LACKX_OFX_RESOURCES = 5;
         };
         FlowEndReason flow_end_reason = 46 [json_name = "flow-end-reason"];
      }
      repeated StreamLogInfo stream_log_info = 1 [json_name = "stream-log-info"];
   }
   StreamLogInfos stream_log_infos = 9 [json_name = "stream-log-infos"];
   message LogEnable {
      enum LogEnable3 {
         LogEnable3_FALSE = 0;
         LogEnable3_TRUE = 1;
      };
      LogEnable3 log_enable = 1 [json_name = "log-enable"];
   }
   LogEnable log_enable = 10 [json_name = "log-enable"];
   message NsidUsages {
      message NsidUsage {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 total_count = 2 [json_name = "total-count"];
         uint32 cur_count = 3 [json_name = "cur-count"];
         uint32 success_count = 4 [json_name = "success-count"];
         uint32 remain_count = 5 [json_name = "remain-count"];
      }
      repeated NsidUsage nsid_usage = 1 [json_name = "nsid-usage"];
   }
   NsidUsages nsid_usages = 11 [json_name = "nsid-usages"];
   message SlotSamplerStatistics {
      message SlotSamplerStatistic {
         enum FlowType {
            FlowType_IPX_FLOW = 0;
            FlowType_IPV6X_FLOW = 1;
            FlowType_VXLANX_INNERX_IPX_FLOW = 2;
            FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
            FlowType_ETHERNETX_FLOW = 4;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         string slot_id = 2 [json_name = "slot-id"];
         uint64 pkt_ipv4_count = 3 [json_name = "pkt-ipv4-count"];
         uint64 pkt_ipv6_count = 4 [json_name = "pkt-ipv6-count"];
         uint64 pkt_mpls_count = 5 [json_name = "pkt-mpls-count"];
         uint64 pkt_vll_count = 6 [json_name = "pkt-vll-count"];
         uint64 pkt_count = 7 [json_name = "pkt-count"];
         uint64 pkt_count64 = 8 [json_name = "pkt-count64"];
         uint64 pkt_count128 = 9 [json_name = "pkt-count128"];
         uint64 pkt_count256 = 10 [json_name = "pkt-count256"];
         uint64 pkt_count512 = 11 [json_name = "pkt-count512"];
         uint64 pkt_count1024 = 12 [json_name = "pkt-count1024"];
         uint64 pkt_count1500 = 13 [json_name = "pkt-count1500"];
         uint64 pkt_countn = 14 [json_name = "pkt-countn"];
         message AggregationStatistics {
            message AggregationStatistic {
               string template_name = 1 [json_name = "template-name"];
               uint64 flow_cur_count = 2 [json_name = "flow-cur-count"];
               uint64 flow_age_count = 3 [json_name = "flow-age-count"];
               uint64 flow_create_count = 4 [json_name = "flow-create-count"];
               uint64 pkt_export_count = 5 [json_name = "pkt-export-count"];
               uint64 stream_export_count = 6 [json_name = "stream-export-count"];
            }
            repeated AggregationStatistic aggregation_statistic = 1 [json_name = "aggregation-statistic"];
         }
         AggregationStatistics aggregation_statistics = 15 [json_name = "aggregation-statistics"];
      }
      repeated SlotSamplerStatistic slot_sampler_statistic = 1 [json_name = "slot-sampler-statistic"];
   }
   SlotSamplerStatistics slot_sampler_statistics = 12 [json_name = "slot-sampler-statistics"];
   message CacheUsages {
      message CacheUsage {
         enum FlowType {
            INVALID_ENUM_VALUE_FlowType = 0;
            FlowType_ORIGIN = 1;
            FlowType_AGGREGATION = 2;
         };
         FlowType flow_type = 1 [json_name = "flow-type"];
         string slot_id = 2 [json_name = "slot-id"];
         uint32 total_stream_count = 3 [json_name = "total-stream-count"];
         uint32 cur_stream_count = 4 [json_name = "cur-stream-count"];
      }
      repeated CacheUsage cache_usage = 1 [json_name = "cache-usage"];
   }
   CacheUsages cache_usages = 13 [json_name = "cache-usages"];
   message IfSamplerStatistics {
      message IfSamplerStatistic {
         string if_name = 1 [json_name = "if-name"];
         uint64 ipv4_in_byte_stat = 2 [json_name = "ipv4-in-byte-stat"];
         uint64 ipv4_out_byte_stat = 3 [json_name = "ipv4-out-byte-stat"];
         uint64 ipv6_in_byte_stat = 4 [json_name = "ipv6-in-byte-stat"];
         uint64 ipv6_out_byte_stat = 5 [json_name = "ipv6-out-byte-stat"];
         uint64 mpls_in_byte_stat = 6 [json_name = "mpls-in-byte-stat"];
         uint64 mpls_out_byte_stat = 7 [json_name = "mpls-out-byte-stat"];
         uint64 ipv4_in_pkt_stat = 8 [json_name = "ipv4-in-pkt-stat"];
         uint64 ipv4_out_pkt_stat = 9 [json_name = "ipv4-out-pkt-stat"];
         uint64 ipv6_in_pkt_stat = 10 [json_name = "ipv6-in-pkt-stat"];
         uint64 ipv6_out_pkt_stat = 11 [json_name = "ipv6-out-pkt-stat"];
         uint64 mpls_in_pkt_stat = 12 [json_name = "mpls-in-pkt-stat"];
         uint64 mpls_out_pkt_stat = 13 [json_name = "mpls-out-pkt-stat"];
         uint64 total_in_byte = 14 [json_name = "total-in-byte"];
         uint64 total_in_pkt = 15 [json_name = "total-in-pkt"];
         uint64 total_out_byte = 16 [json_name = "total-out-byte"];
         uint64 total_out_pkt = 17 [json_name = "total-out-pkt"];
      }
      repeated IfSamplerStatistic if_sampler_statistic = 1 [json_name = "if-sampler-statistic"];
   }
   IfSamplerStatistics if_sampler_statistics = 14 [json_name = "if-sampler-statistics"];
   message SamplerRateAllFlows {
      message SamplerRateAllFlow {
         enum Direction {
            Direction_INBOUND = 0;
            Direction_OUTBOUND = 1;
         };
         Direction direction = 1 [json_name = "direction"];
         message SamplerType_RandomPackets {
            uint32 random_packets_value = 1 [json_name = "random-packets-value"];
         }
         oneof SamplerType {
            SamplerType_RandomPackets sampler_type_random_packets = 2 [json_name = "random-packets"];
         }
      }
      repeated SamplerRateAllFlow sampler_rate_all_flow = 1 [json_name = "sampler-rate-all-flow"];
   }
   SamplerRateAllFlows sampler_rate_all_flows = 15 [json_name = "sampler-rate-all-flows"];
   message TmAfterEnable {
      enum Enable {
         Enable_FALSE = 0;
         Enable_TRUE = 1;
      };
      Enable enable = 1 [json_name = "enable"];
   }
   TmAfterEnable tm_after_enable = 16 [json_name = "tm-after-enable"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-21 10:17:56
// ProtoYang-version 1
// module huawei-ifm
// revision 2022-09-20
// revision 2022-08-06
// revision 2022-06-29
// revision 2022-05-06
// revision 2022-03-30
// revision 2022-01-25
// revision 2022-01-18
// revision 2021-10-11
// revision 2021-01-25
// revision 2020-06-10
// revision 2020-02-15
// revision 2020-01-20
// revision 2020-01-15
// revision 2020-01-10
// revision 2019-09-29
// revision 2019-08-22
// revision 2019-04-15
// revision 2019-04-10
// namespace urn:huawei:yang:huawei-ifm

package huawei_ifm;

message Ifm {
   message Global {
      uint32 statistic_interval = 1 [json_name = "statistic-interval"];
      bool ipv4_ignore_primary_sub = 2 [json_name = "ipv4-ignore-primary-sub"];
      bool sub_interface_link_trap_enable = 3 [json_name = "sub-interface-link-trap-enable"];
      message Ipv4ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv4ConflictEnable ipv4_conflict_enable = 4 [json_name = "ipv4-conflict-enable"];
      message Ipv6ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv6ConflictEnable ipv6_conflict_enable = 5 [json_name = "ipv6-conflict-enable"];
      message FimIfmGlobal {
         enum GlobalStrictFilter {
            GlobalStrictFilter_DISABLE = 0;
            GlobalStrictFilter_ENABLE = 1;
         };
         GlobalStrictFilter global_strict_filter = 1 [json_name = "global-strict-filter"];
         enum DualStatEnable {
            DualStatEnable_DISABLE = 0;
            DualStatEnable_ENABLE = 1;
         };
         DualStatEnable dual_stat_enable = 2 [json_name = "dual-stat-enable"];
         uint32 trunk_delaysend_time = 3 [json_name = "trunk-delaysend-time"];
         enum TrunkAdjustEnable {
            TrunkAdjustEnable_DISABLE = 0;
            TrunkAdjustEnable_ENABLE = 1;
         };
         TrunkAdjustEnable trunk_adjust_enable = 4 [json_name = "trunk-adjust-enable"];
         enum QinqTransportEnable {
            QinqTransportEnable_DISABLE = 0;
            QinqTransportEnable_ENABLE = 1;
         };
         QinqTransportEnable qinq_transport_enable = 5 [json_name = "qinq-transport-enable"];
      }
      FimIfmGlobal fim_ifm_global = 6 [json_name = "fim-ifm-global"];
      message FimTrunkLocalfwd {
         enum Enable {
            Enable_DISABLE = 0;
            Enable_ENABLE = 1;
         };
         Enable enable = 1 [json_name = "enable"];
      }
      FimTrunkLocalfwd fim_trunk_localfwd = 7 [json_name = "fim-trunk-localfwd"];
      message VeGroups {
         message VeGroup {
            uint32 ve_group_id = 1 [json_name = "ve-group-id"];
            string slot_id = 2 [json_name = "slot-id"];
            string l2_ve_ifname = 3 [json_name = "l2-ve-ifname"];
            string l3_ve_ifname = 4 [json_name = "l3-ve-ifname"];
         }
         repeated VeGroup ve_group = 1 [json_name = "ve-group"];
      }
      VeGroups ve_groups = 8 [json_name = "ve-groups"];
      message AtmGlobal {
         message AtmGlobalServices {
            message AtmGlobalService {
               string service_name = 1 [json_name = "service-name"];
               enum ServiceType {
                  INVALID_ENUM_VALUE_ServiceType = 0;
                  ServiceType_UBR = 1;
                  ServiceType_CBR = 2;
                  ServiceType_RTX_VBR = 3;
                  ServiceType_NRTX_VBR = 4;
                  ServiceType_UBRX_PLUS = 5;
               };
               ServiceType service_type = 2 [json_name = "service-type"];
               uint32 pcr = 3 [json_name = "pcr"];
               uint32 scr = 4 [json_name = "scr"];
               uint32 mcr = 5 [json_name = "mcr"];
               uint32 mbs = 6 [json_name = "mbs"];
               uint32 cdvt = 7 [json_name = "cdvt"];
            }
            repeated AtmGlobalService atm_global_service = 1 [json_name = "atm-global-service"];
         }
         AtmGlobalServices atm_global_services = 1 [json_name = "atm-global-services"];
      }
      AtmGlobal atm_global = 9 [json_name = "atm-global"];
   }
   Global global = 1 [json_name = "global"];
   message Interfaces {
      message Interface {
         string name = 1 [json_name = "name"];
         uint32 index = 2 [json_name = "index"];
         enum Class {
            Class_MAINX_INTERFACE = 0;
            Class_SUBX_INTERFACE = 1;
         };
         Class class = 3 [json_name = "class"];
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPX_GE = 114;
            Type_FLEXEX_400G = 115;
            Type_VIRTUALX_IF = 116;
            Type_CELLULAR = 117;
            Type_MULTIGE = 124;
            Type_FLEXEX_10G = 125;
            Type_OPTICALAMPLIFIER = 126;
            Type_DIALER = 128;
            Type_X_1200GE = 129;
         };
         Type type = 4 [json_name = "type"];
         string position = 5 [json_name = "position"];
         string parent_name = 6 [json_name = "parent-name"];
         string number4 = 7 [json_name = "number"];
         string description = 8 [json_name = "description"];
         string aggregation_name = 9 [json_name = "aggregation-name"];
         bool is_l2_switch = 10 [json_name = "is-l2-switch"];
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_UP = 1;
         };
         AdminStatus admin_status = 11 [json_name = "admin-status"];
         enum LinkProtocol {
            LinkProtocol_ETHERNET = 0;
            LinkProtocol_PPP = 1;
            LinkProtocol_HDLC = 2;
            LinkProtocol_FR = 3;
            LinkProtocol_ATM = 6;
            LinkProtocol_TDM = 7;
         };
         LinkProtocol link_protocol = 12 [json_name = "link-protocol"];
         enum RouterType {
            RouterType_PTOP = 0;
            RouterType_PTOMP = 1;
            RouterType_BROADCAST = 2;
            RouterType_NBMA = 3;
            RouterType_INVALID = 255;
         };
         RouterType router_type = 13 [json_name = "router-type"];
         bool clear_ip_df = 14 [json_name = "clear-ip-df"];
         bool link_up_down_trap_enable = 15 [json_name = "link-up-down-trap-enable"];
         bool statistic_enable = 16 [json_name = "statistic-enable"];
         enum StatisticMode {
            INVALID_ENUM_VALUE_StatisticMode = 0;
            StatisticMode_INTERFACEX_BASED = 1;
            StatisticMode_VLANX_GROUPX_BASED = 2;
         };
         StatisticMode statistic_mode = 17 [json_name = "statistic-mode"];
         uint32 bandwidth = 18 [json_name = "bandwidth"];
         uint32 mtu = 19 [json_name = "mtu"];
         bool spread_mtu_flag = 20 [json_name = "spread-mtu-flag"];
         uint32 statistic_interval = 21 [json_name = "statistic-interval"];
         string vrf_name = 22 [json_name = "vrf-name"];
         bool l2_mode_enable = 23 [json_name = "l2-mode-enable"];
         uint32 down_delay_time = 24 [json_name = "down-delay-time"];
         string mac_address = 25 [json_name = "mac-address"];
         message Dynamic {
            enum OperStatus {
               OperStatus_DOWN = 0;
               OperStatus_UP = 1;
            };
            OperStatus oper_status = 1 [json_name = "oper-status"];
            enum PhysicalStatus {
               PhysicalStatus_DOWN = 0;
               PhysicalStatus_UP = 1;
            };
            PhysicalStatus physical_status = 2 [json_name = "physical-status"];
            enum LinkStatus {
               LinkStatus_DOWN = 0;
               LinkStatus_UP = 1;
            };
            LinkStatus link_status = 3 [json_name = "link-status"];
            uint32 mtu = 4 [json_name = "mtu"];
            uint64 bandwidth = 5 [json_name = "bandwidth"];
            enum Ipv4Status {
               Ipv4Status_DOWN = 0;
               Ipv4Status_UP = 1;
            };
            Ipv4Status ipv4_status = 6 [json_name = "ipv4-status"];
            enum Ipv6Status {
               Ipv6Status_DOWN = 0;
               Ipv6Status_UP = 1;
            };
            Ipv6Status ipv6_status = 7 [json_name = "ipv6-status"];
            bool is_control_flap_damp = 8 [json_name = "is-control-flap-damp"];
            string mac_address = 9 [json_name = "mac-address"];
            string line_protocol_up_time = 10 [json_name = "line-protocol-up-time"];
            bool is_offline = 11 [json_name = "is-offline"];
            enum LinkQualityGrade {
               LinkQualityGrade_GOOD = 0;
               LinkQualityGrade_HIGH = 1;
               LinkQualityGrade_MIDDLE = 2;
               LinkQualityGrade_LOW = 4;
            };
            LinkQualityGrade link_quality_grade = 12 [json_name = "link-quality-grade"];
            uint32 sub_if_counts = 13 [json_name = "sub-if-counts"];
            enum LicenseActiveStatus {
               LicenseActiveStatus_ACTIVE = 0;
               LicenseActiveStatus_INACTIVE = 1;
            };
            LicenseActiveStatus license_active_status = 14 [json_name = "license-active-status"];
         }
         Dynamic dynamic = 26 [json_name = "dynamic"];
         message MibStatistics {
            uint64 receive_byte = 1 [json_name = "receive-byte"];
            uint64 send_byte = 2 [json_name = "send-byte"];
            uint64 receive_packet = 3 [json_name = "receive-packet"];
            uint64 send_packet = 4 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 5 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 6 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 7 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 8 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 9 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 10 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 11 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 12 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 13 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 14 [json_name = "send-drop-packet"];
            message EthPortErrSts {
               uint64 rx_pause = 1 [json_name = "rx-pause"];
               uint64 rx_jumbo_octets = 2 [json_name = "rx-jumbo-octets"];
               uint64 rx_crc = 3 [json_name = "rx-crc"];
               uint64 rx_symbol = 4 [json_name = "rx-symbol"];
               uint64 rx_over_run = 5 [json_name = "rx-over-run"];
               uint64 rx_inrange_len = 6 [json_name = "rx-inrange-len"];
               uint64 rx_long = 7 [json_name = "rx-long"];
               uint64 rx_jabber = 8 [json_name = "rx-jabber"];
               uint64 rx_alignment = 9 [json_name = "rx-alignment"];
               uint64 rx_fragment = 10 [json_name = "rx-fragment"];
               uint64 rx_undersize = 11 [json_name = "rx-undersize"];
               uint64 tx_pause = 12 [json_name = "tx-pause"];
               uint64 tx_jumbo_octets = 13 [json_name = "tx-jumbo-octets"];
               uint64 tx_over_run = 14 [json_name = "tx-over-run"];
               uint64 tx_under_run = 15 [json_name = "tx-under-run"];
               uint64 tx_system = 16 [json_name = "tx-system"];
               uint64 tx_lost = 17 [json_name = "tx-lost"];
            }
            EthPortErrSts eth_port_err_sts = 15 [json_name = "eth-port-err-sts"];
            message FecErrorStatistics {
               uint32 prefec_ber_coefficient = 1 [json_name = "prefec-ber-coefficient"];
               uint32 prefec_ber_power = 2 [json_name = "prefec-ber-power"];
            }
            FecErrorStatistics fec_error_statistics = 16 [json_name = "fec-error-statistics"];
            message CrcErrorStatistics {
               uint32 crc_bit_rate = 1 [json_name = "crc-bit-rate"];
            }
            CrcErrorStatistics crc_error_statistics = 17 [json_name = "crc-error-statistics"];
         }
         MibStatistics mib_statistics = 27 [json_name = "mib-statistics"];
         message CommonStatistics {
            uint32 stati_interval = 1 [json_name = "stati-interval"];
            uint64 in_byte_rate = 2 [json_name = "in-byte-rate"];
            uint64 in_bit_rate = 3 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 4 [json_name = "in-packet-rate"];
            string in_use_rate = 5 [json_name = "in-use-rate"];
            uint64 out_byte_rate = 6 [json_name = "out-byte-rate"];
            uint64 out_bit_rate = 7 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 8 [json_name = "out-packet-rate"];
            string out_use_rate = 9 [json_name = "out-use-rate"];
            uint64 receive_byte = 10 [json_name = "receive-byte"];
            uint64 send_byte = 11 [json_name = "send-byte"];
            uint64 receive_packet = 12 [json_name = "receive-packet"];
            uint64 send_packet = 13 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 14 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 15 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 16 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 17 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 18 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 19 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 20 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 21 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 22 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 23 [json_name = "send-drop-packet"];
            uint64 send_unicast_bit = 24 [json_name = "send-unicast-bit"];
            uint64 receive_unicast_bit = 25 [json_name = "receive-unicast-bit"];
            uint64 send_multicast_bit = 26 [json_name = "send-multicast-bit"];
            uint64 receive_multicast_bit = 27 [json_name = "receive-multicast-bit"];
            uint64 send_broad_bit = 28 [json_name = "send-broad-bit"];
            uint64 receive_broad_bit = 29 [json_name = "receive-broad-bit"];
            uint64 send_unicast_bit_rate = 30 [json_name = "send-unicast-bit-rate"];
            uint64 receive_unicast_bit_rate = 31 [json_name = "receive-unicast-bit-rate"];
            uint64 send_multicast_bit_rate = 32 [json_name = "send-multicast-bit-rate"];
            uint64 receive_multicast_bit_rate = 33 [json_name = "receive-multicast-bit-rate"];
            uint64 send_broad_bit_rate = 34 [json_name = "send-broad-bit-rate"];
            uint64 receive_broad_bit_rate = 35 [json_name = "receive-broad-bit-rate"];
            uint64 send_unicast_packet_rate = 36 [json_name = "send-unicast-packet-rate"];
            uint64 receive_unicast_packet_rate = 37 [json_name = "receive-unicast-packet-rate"];
            uint64 send_multicast_packet_rate = 38 [json_name = "send-multicast-packet-rate"];
            uint64 receive_multicast_packet_rate = 39 [json_name = "receive-multicast-packet-rate"];
            uint64 send_broadcast_packet_rate = 40 [json_name = "send-broadcast-packet-rate"];
            uint64 receive_broadcast_packet_rate = 41 [json_name = "receive-broadcast-packet-rate"];
         }
         CommonStatistics common_statistics = 28 [json_name = "common-statistics"];
         string vs_name = 29 [json_name = "vs-name"];
         uint32 l2_switch_port_index = 30 [json_name = "l2-switch-port-index"];
         enum ServiceType {
            ServiceType_NONE = 0;
            ServiceType_TRUNKX_MEMBER = 2;
            ServiceType_STACKX_MEMBER = 6;
            ServiceType_MPX_MEMBER = 7;
            ServiceType_VBRIDGEX_MEMBER = 8;
            ServiceType_IMAX_MEMBER = 9;
            ServiceType_BUNDLEX_MEMBER = 10;
            ServiceType_FABRICX_MEMBER = 11;
            ServiceType_LAGX_MASTERX_MEMBER = 12;
            ServiceType_LAGX_SLAVEX_MEMBER = 13;
            ServiceType_CPOSX_TRUNKX_MEMBER = 15;
            ServiceType_POSX_TRUNKX_MEMBER = 16;
            ServiceType_GLOBALX_MPX_MEMBER = 17;
            ServiceType_GLOBALX_IMAX_MEMBER = 18;
         };
         ServiceType service_type = 31 [json_name = "service-type"];
         enum EncapsulationType {
            EncapsulationType_VLANX_TYPE = 0;
            EncapsulationType_DOT1Q = 1;
            EncapsulationType_QINQ = 2;
            EncapsulationType_P2P = 3;
            EncapsulationType_P2MP = 4;
            EncapsulationType_L2VE = 5;
            EncapsulationType_L3VE = 6;
            EncapsulationType_VLANX_TYPEX_POLICY = 7;
            EncapsulationType_DOT1QX_POLICY = 8;
            EncapsulationType_STACKINGX_POLICY = 9;
            EncapsulationType_UNTAGX_POLICY = 10;
            EncapsulationType_QINQX_MAPPING = 11;
            EncapsulationType_L2VC = 12;
            EncapsulationType_L3VC = 13;
            EncapsulationType_EVCX_UNTAG = 14;
            EncapsulationType_EVCX_DOT1Q = 15;
            EncapsulationType_EVCX_QINQ = 16;
            EncapsulationType_EVCX_DEFAULT = 17;
            EncapsulationType_EVCX_DOT1QX_POLICY = 18;
            EncapsulationType_IETF = 19;
            EncapsulationType_NONSTANDARD = 20;
            EncapsulationType_USERX_VLAN = 21;
            EncapsulationType_USERX_VLANX_ANYOTHER = 22;
            EncapsulationType_QINX_LINK = 23;
            EncapsulationType_SOFTX_GREX_VE = 24;
            EncapsulationType_L3VEX_TER = 25;
            EncapsulationType_L3VEX_ACC = 26;
            EncapsulationType_ETHERNETX_OVERX_GREX_VE = 27;
            EncapsulationType_INVALID = 255;
         };
         EncapsulationType encapsulation_type = 32 [json_name = "encapsulation-type"];
         enum NetworkLayerStatus {
            NetworkLayerStatus_IPV4X_IPV6X_UP = 0;
            NetworkLayerStatus_IPV4X_IPV6X_DOWN = 196608;
         };
         NetworkLayerStatus network_layer_status = 33 [json_name = "network-layer-status"];
         uint32 protocol_up_delay_time = 34 [json_name = "protocol-up-delay-time"];
         message ControlFlap {
            uint32 suppress = 1 [json_name = "suppress"];
            uint32 reuse = 2 [json_name = "reuse"];
            uint32 ceiling = 3 [json_name = "ceiling"];
            uint32 decay_ok = 4 [json_name = "decay-ok"];
            uint32 decay_ng = 5 [json_name = "decay-ng"];
            uint32 control_flap_count = 6 [json_name = "control-flap-count"];
         }
         ControlFlap control_flap = 35 [json_name = "control-flap"];
         message TrapThreshold {
            uint32 input_rising_rate = 1 [json_name = "input-rising-rate"];
            uint32 input_resume_rate = 2 [json_name = "input-resume-rate"];
            uint32 output_rising_rate = 3 [json_name = "output-rising-rate"];
            uint32 output_resume_rate = 4 [json_name = "output-resume-rate"];
         }
         TrapThreshold trap_threshold = 36 [json_name = "trap-threshold"];
         message DampState {
            enum SuppressStatus {
               SuppressStatus_SUPPRESSED = 0;
               SuppressStatus_UNSUPPRESSED = 1;
            };
            SuppressStatus suppress_status = 1 [json_name = "suppress-status"];
            uint32 suppress = 2 [json_name = "suppress"];
            uint32 reuse = 3 [json_name = "reuse"];
            uint32 max_suppress_time = 4 [json_name = "max-suppress-time"];
            uint32 half_life_period = 5 [json_name = "half-life-period"];
            uint32 damp_reuse_time = 6 [json_name = "damp-reuse-time"];
            uint32 current_penalty = 7 [json_name = "current-penalty"];
            uint32 max_penalty = 8 [json_name = "max-penalty"];
         }
         DampState damp_state = 37 [json_name = "damp-state"];
         message ErrorDown {
            enum Cause {
               Cause_BPDUX_PROTECTION = 0;
               Cause_AUTOX_DEFEND = 1;
               Cause_MONITORX_LINK = 2;
               Cause_PORTSECX_REACHEDX_LIMIT = 65;
               Cause_STORMX_CONTROL = 66;
               Cause_LOOPBACKX_DETECT = 67;
               Cause_DUALX_ACTIVE = 68;
               Cause_MACX_ADDRESSX_FLAPPING = 69;
               Cause_NOX_STACKX_LINK = 70;
               Cause_CRCX_STATISTICS = 71;
               Cause_TRANSCEIVERX_POWERX_LOW = 72;
               Cause_LINKX_FLAP = 73;
               Cause_L2X_LOOPX_OCCURED = 74;
               Cause_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
               Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
               Cause_RESOURCEX_MISMATCH = 77;
               Cause_LEAFX_MSTP = 78;
               Cause_MX_LAG = 79;
               Cause_FABRICX_UPLINKX_THRESHOLD = 80;
               Cause_STACKX_CONFIGX_CONFLICT = 81;
               Cause_SPINEX_TYPEX_UNSUPPORTED = 82;
               Cause_STACKX_PACKETX_DEFENSIVE = 83;
               Cause_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
               Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
               Cause_FABRICX_LINKX_FAILURE = 87;
               Cause_MX_LAGX_CONSISTENCYX_CHECK = 88;
               Cause_PFCX_DEADLOCK = 89;
               Cause_REMOTEX_UNITX_LINK = 90;
               Cause_REMOTEX_UNITX_MISCONFIG = 91;
            };
            Cause cause = 1 [json_name = "cause"];
            uint32 recovery_time = 2 [json_name = "recovery-time"];
            uint32 remainder_time = 3 [json_name = "remainder-time"];
         }
         ErrorDown error_down = 38 [json_name = "error-down"];
         message TunnelProtocol {
            message Type_MplsTe {
               message TeTunnel {
                  message CommonAttributes {
                     enum SignalProtocol {
                        INVALID_ENUM_VALUE_SignalProtocol = 0;
                        SignalProtocol_RSVPX_TE = 2;
                        SignalProtocol_CRX_STATIC = 4;
                        SignalProtocol_SEGMENTX_ROUTING = 6;
                     };
                     SignalProtocol signal_protocol = 1 [json_name = "signal-protocol"];
                     uint32 tunnel_id = 2 [json_name = "tunnel-id"];
                     string egress_lsr_id = 3 [json_name = "egress-lsr-id"];
                     bool reserved_for_binding = 4 [json_name = "reserved-for-binding"];
                     bool lsp_tp_outbound = 5 [json_name = "lsp-tp-outbound"];
                     bool statistic_enable = 6 [json_name = "statistic-enable"];
                  }
                  CommonAttributes common_attributes = 1 [json_name = "common-attributes"];
                  message TunnelMode_P2PRsvpTe {
                     message RsvpTe {
                        string signalled_tunnel_name = 1 [json_name = "signalled-tunnel-name"];
                        bool traffic_enable = 2 [json_name = "traffic-enable"];
                        uint32 bandwidth = 3 [json_name = "bandwidth"];
                        enum ClassType {
                           ClassType_CT0 = 0;
                           ClassType_CT1 = 1;
                           ClassType_CT2 = 2;
                           ClassType_CT3 = 3;
                           ClassType_CT4 = 4;
                           ClassType_CT5 = 5;
                           ClassType_CT6 = 6;
                           ClassType_CT7 = 7;
                        };
                        ClassType class_type = 4 [json_name = "class-type"];
                        uint32 setup_priority = 5 [json_name = "setup-priority"];
                        uint32 hold_priority = 6 [json_name = "hold-priority"];
                        bool ordinary_enable = 7 [json_name = "ordinary-enable"];
                        bool best_effort_enable = 8 [json_name = "best-effort-enable"];
                        bool backup_frr_inuse = 9 [json_name = "backup-frr-inuse"];
                        bool path_disjoint_calculate = 10 [json_name = "path-disjoint-calculate"];
                        bool soft_preempt_enable = 11 [json_name = "soft-preempt-enable"];
                        bool disable_cspf = 12 [json_name = "disable-cspf"];
                        enum ReserveStyle {
                           INVALID_ENUM_VALUE_ReserveStyle = 0;
                           ReserveStyle_SE = 1;
                           ReserveStyle_FF = 2;
                        };
                        ReserveStyle reserve_style = 13 [json_name = "reserve-style"];
                        enum RecordRoute {
                           INVALID_ENUM_VALUE_RecordRoute = 0;
                           RecordRoute_DISABLE = 1;
                           RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                           RecordRoute_RECORDX_LABEL = 3;
                        };
                        RecordRoute record_route = 14 [json_name = "record-route"];
                        bool reoptimization = 15 [json_name = "reoptimization"];
                        uint32 reoptimization_frequency = 16 [json_name = "reoptimization-frequency"];
                        bool inter_area_reoptimization = 17 [json_name = "inter-area-reoptimization"];
                        enum TieBreaking {
                           INVALID_ENUM_VALUE_TieBreaking = 0;
                           TieBreaking_LEASTX_FILL = 1;
                           TieBreaking_MOSTX_FILL = 2;
                           TieBreaking_RANDOM = 3;
                           TieBreaking_DEFAULT = 4;
                        };
                        TieBreaking tie_breaking = 18 [json_name = "tie-breaking"];
                        enum PathMetricType {
                           INVALID_ENUM_VALUE_PathMetricType = 0;
                           PathMetricType_NONE = 1;
                           PathMetricType_IGP = 2;
                           PathMetricType_TE = 3;
                        };
                        PathMetricType path_metric_type = 19 [json_name = "path-metric-type"];
                        bool metric_inherit_igp = 20 [json_name = "metric-inherit-igp"];
                        enum PceDelegate {
                           PceDelegate_NO = 0;
                           PceDelegate_ACTIVE = 1;
                           PceDelegate_ONLYX_STATUSX_REPORT = 2;
                        };
                        PceDelegate pce_delegate = 21 [json_name = "pce-delegate"];
                        enum EntropyLabel {
                           EntropyLabel_DEFAULT = 0;
                           EntropyLabel_ENABLE = 1;
                           EntropyLabel_BLOCK = 2;
                        };
                        EntropyLabel entropy_label = 22 [json_name = "entropy-label"];
                        bool split_tunnel = 23 [json_name = "split-tunnel"];
                        bool soft_preempt_block = 24 [json_name = "soft-preempt-block"];
                        bool disable_reroute = 25 [json_name = "disable-reroute"];
                        enum SelfPing {
                           SelfPing_DISABLE = 0;
                           SelfPing_ENABLE = 1;
                           SelfPing_BLOCK = 2;
                        };
                        SelfPing self_ping = 26 [json_name = "self-ping"];
                        uint32 self_ping_duration = 27 [json_name = "self-ping-duration"];
                        message FastReroute {
                           bool enable = 1 [json_name = "enable"];
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_FACILITYX_BACKUP = 1;
                              Mode_DETOURX_BACKUP = 2;
                           };
                           Mode mode = 2 [json_name = "mode"];
                           bool bandwidth_protection_enable = 3 [json_name = "bandwidth-protection-enable"];
                           bool frr_switch_degrade = 4 [json_name = "frr-switch-degrade"];
                           message BypassAttributes {
                              uint32 frr_bandwidth = 1 [json_name = "frr-bandwidth"];
                              uint32 setup_priority = 2 [json_name = "setup-priority"];
                              uint32 hold_priority = 3 [json_name = "hold-priority"];
                              string include_any = 4 [json_name = "include-any"];
                              string exclude_any = 5 [json_name = "exclude-any"];
                              string include_all = 6 [json_name = "include-all"];
                              repeated string include_any_affinity_name = 7 [json_name = "include-any-affinity-name"];
                              repeated string include_all_affinity_name = 8 [json_name = "include-all-affinity-name"];
                              repeated string exclude_affinity_name = 9 [json_name = "exclude-affinity-name"];
                           }
                           BypassAttributes bypass_attributes = 5 [json_name = "bypass-attributes"];
                        }
                        FastReroute fast_reroute = 28 [json_name = "fast-reroute"];
                        message Hotstandby {
                           uint32 wtr = 1 [json_name = "wtr"];
                           enum RevertiveMode {
                              RevertiveMode_NONX_REVERTIVE = 0;
                              RevertiveMode_REVERTIVE = 1;
                           };
                           RevertiveMode revertive_mode = 2 [json_name = "revertive-mode"];
                           bool path_overlap = 3 [json_name = "path-overlap"];
                           bool dynamic_bandwidth = 4 [json_name = "dynamic-bandwidth"];
                        }
                        Hotstandby hotstandby = 29 [json_name = "hotstandby"];
                        message LspPaths {
                           message LspPath {
                              enum PathType {
                                 INVALID_ENUM_VALUE_PathType = 0;
                                 PathType_PRIMARY = 1;
                                 PathType_HOTX_STANDBY = 2;
                                 PathType_ORDINARY = 3;
                                 PathType_BESTX_EFFORT = 4;
                              };
                              PathType path_type = 1 [json_name = "path-type"];
                              string explicit_path_name = 2 [json_name = "explicit-path-name"];
                              uint32 hop_limit = 3 [json_name = "hop-limit"];
                              uint32 lsp_id = 4 [json_name = "lsp-id"];
                              enum LspState {
                                 LspState_DOWN = 0;
                                 LspState_UP = 1;
                                 LspState_NONE = 2;
                              };
                              LspState lsp_state = 5 [json_name = "lsp-state"];
                              uint32 modify_lsp_id = 6 [json_name = "modify-lsp-id"];
                              string include_all = 7 [json_name = "include-all"];
                              string include_any = 8 [json_name = "include-any"];
                              string exclude_any = 9 [json_name = "exclude-any"];
                              repeated string include_any_affinity_name = 10 [json_name = "include-any-affinity-name"];
                              repeated string include_all_affinity_name = 11 [json_name = "include-all-affinity-name"];
                              repeated string exclude_affinity_name = 12 [json_name = "exclude-affinity-name"];
                           }
                           repeated LspPath lsp_path = 1 [json_name = "lsp-path"];
                        }
                        LspPaths lsp_paths = 30 [json_name = "lsp-paths"];
                        message Bypass {
                           bool enable = 1 [json_name = "enable"];
                           repeated string protection_interfaces = 2 [json_name = "protection-interfaces"];
                        }
                        Bypass bypass = 31 [json_name = "bypass"];
                        message HotstandbyState {
                           enum SwitchResult {
                              SwitchResult_MAINX_LSP = 0;
                              SwitchResult_HSBX_LSP = 1;
                              SwitchResult_BESTX_EFFORTX_LSP = 2;
                           };
                           SwitchResult switch_result = 1 [json_name = "switch-result"];
                           bool wtr_state = 2 [json_name = "wtr-state"];
                           uint32 wtr_remaining_time = 3 [json_name = "wtr-remaining-time"];
                           enum SwitchState {
                              SwitchState_NONE = 0;
                              SwitchState_WAITX_TOX_RESTORE = 1;
                           };
                           SwitchState switch_state = 4 [json_name = "switch-state"];
                           enum UsingOverlap {
                              UsingOverlap_DIFFERENTX_PATH = 0;
                              UsingOverlap_PARTIALX_LINKX_SAME = 1;
                              UsingOverlap_NOTX_COMPARE = 2;
                              UsingOverlap_EXACTLYX_SAMEX_PATH = 3;
                           };
                           UsingOverlap using_overlap = 5 [json_name = "using-overlap"];
                           enum SwitchReason {
                              SwitchReason_NONE = 0;
                              SwitchReason_FORCE = 1;
                              SwitchReason_SIGNALX_FAIL = 2;
                              SwitchReason_DOX_NOTX_REVERT = 3;
                              SwitchReason_WAITX_TOX_RESTORE = 4;
                              SwitchReason_BFDX_DOWN = 5;
                              SwitchReason_SIGNALX_DEGRADE = 6;
                              SwitchReason_FRRX_INUSE = 7;
                              SwitchReason_BFDX_CRC = 9;
                           };
                           SwitchReason switch_reason = 6 [json_name = "switch-reason"];
                        }
                        HotstandbyState hotstandby_state = 32 [json_name = "hotstandby-state"];
                        message Lsps {
                           message Lsp {
                              string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                              string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                              uint32 session_id = 3 [json_name = "session-id"];
                              uint32 lsp_id = 4 [json_name = "lsp-id"];
                              enum TunnelRole {
                                 INVALID_ENUM_VALUE_TunnelRole = 0;
                                 TunnelRole_HEAD = 1;
                                 TunnelRole_TRANSIT = 2;
                                 TunnelRole_TAIL = 3;
                                 TunnelRole_HEADX_ANDX_TAIL = 4;
                              };
                              TunnelRole tunnel_role = 5 [json_name = "tunnel-role"];
                              string incoming_interface_name = 6 [json_name = "incoming-interface-name"];
                              string outgoing_interface_name = 7 [json_name = "outgoing-interface-name"];
                              uint32 setup_priority = 8 [json_name = "setup-priority"];
                              uint32 hold_priority = 9 [json_name = "hold-priority"];
                              enum RecordRoute {
                                 INVALID_ENUM_VALUE_RecordRoute = 0;
                                 RecordRoute_DISABLE = 1;
                                 RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                                 RecordRoute_RECORDX_LABEL = 3;
                              };
                              RecordRoute record_route = 10 [json_name = "record-route"];
                              bool dste_mode = 11 [json_name = "dste-mode"];
                              uint32 reserved_bandwidth = 12 [json_name = "reserved-bandwidth"];
                              string explicit_path_name = 13 [json_name = "explicit-path-name"];
                              string include_all = 14 [json_name = "include-all"];
                              string include_any = 15 [json_name = "include-any"];
                              string exclude_any = 16 [json_name = "exclude-any"];
                              bool local_protect_enable = 17 [json_name = "local-protect-enable"];
                              enum LocalProtectInuse {
                                 LocalProtectInuse_FRRX_NOTX_EXIST = 0;
                                 LocalProtectInuse_FRRX_AVILABLE = 1;
                                 LocalProtectInuse_FRRX_INUSED = 2;
                              };
                              LocalProtectInuse local_protect_inuse = 18 [json_name = "local-protect-inuse"];
                              string bypass_tunnel_name = 19 [json_name = "bypass-tunnel-name"];
                              bool permit_bandwidth_share = 20 [json_name = "permit-bandwidth-share"];
                              uint32 lsp_mtu = 21 [json_name = "lsp-mtu"];
                              enum OperStatus {
                                 INVALID_ENUM_VALUE_OperStatus = 0;
                                 OperStatus_DOWN = 1;
                                 OperStatus_UP = 2;
                              };
                              OperStatus oper_status = 22 [json_name = "oper-status"];
                              enum LspDelegate {
                                 LspDelegate_NO = 0;
                                 LspDelegate_ACTIVE = 1;
                                 LspDelegate_ONLYX_STATUSX_REPORT = 2;
                              };
                              LspDelegate lsp_delegate = 23 [json_name = "lsp-delegate"];
                              uint32 xcindex = 24 [json_name = "xcindex"];
                              bool entropy_label = 25 [json_name = "entropy-label"];
                              message ArHops {
                                 message ArHop {
                                    uint32 index = 1 [json_name = "index"];
                                    bool incomming_type = 2 [json_name = "incomming-type"];
                                    string ip_address = 3 [json_name = "ip-address"];
                                    uint32 label = 4 [json_name = "label"];
                                    bool local_protect_inuse = 5 [json_name = "local-protect-inuse"];
                                    enum LocalProtectType {
                                       LocalProtectType_NONE = 0;
                                       LocalProtectType_LINK = 1;
                                       LocalProtectType_NODE = 2;
                                    };
                                    LocalProtectType local_protect_type = 6 [json_name = "local-protect-type"];
                                    bool bandwidth_protection = 7 [json_name = "bandwidth-protection"];
                                 }
                                 repeated ArHop ar_hop = 1 [json_name = "ar-hop"];
                              }
                              ArHops ar_hops = 26 [json_name = "ar-hops"];
                              message CHops {
                                 message CHop {
                                    uint32 index = 1 [json_name = "index"];
                                    uint32 path_index = 2 [json_name = "path-index"];
                                    bool include = 3 [json_name = "include"];
                                    enum HopType {
                                       INVALID_ENUM_VALUE_HopType = 0;
                                       HopType_STRICT = 1;
                                       HopType_LOOSE = 2;
                                    };
                                    HopType hop_type = 4 [json_name = "hop-type"];
                                    enum AddressType {
                                       INVALID_ENUM_VALUE_AddressType = 0;
                                       AddressType_IPV4 = 1;
                                    };
                                    AddressType address_type = 5 [json_name = "address-type"];
                                    string ip_address = 6 [json_name = "ip-address"];
                                 }
                                 repeated CHop c_hop = 1 [json_name = "c-hop"];
                              }
                              CHops c_hops = 27 [json_name = "c-hops"];
                              message DetourLsps {
                                 message DetourLsp {
                                    string local_address = 1 [json_name = "local-address"];
                                    string neighbor_address = 2 [json_name = "neighbor-address"];
                                    enum LsrRole {
                                       INVALID_ENUM_VALUE_LsrRole = 0;
                                       LsrRole_HEAD = 1;
                                       LsrRole_TRANSIT = 2;
                                       LsrRole_TAIL = 3;
                                       LsrRole_HEADX_ANDX_TAIL = 4;
                                    };
                                    LsrRole lsr_role = 3 [json_name = "lsr-role"];
                                    string incoming_interface = 4 [json_name = "incoming-interface"];
                                    string outgoing_interface = 5 [json_name = "outgoing-interface"];
                                    uint32 detour_in_label = 6 [json_name = "detour-in-label"];
                                    uint32 detour_out_label = 7 [json_name = "detour-out-label"];
                                    uint32 xcindex = 8 [json_name = "xcindex"];
                                 }
                                 repeated DetourLsp detour_lsp = 1 [json_name = "detour-lsp"];
                              }
                              DetourLsps detour_lsps = 28 [json_name = "detour-lsps"];
                              message LockedPaths {
                                 message LockedPath {
                                    uint32 path_index = 1 [json_name = "path-index"];
                                    uint32 hop_index = 2 [json_name = "hop-index"];
                                    string hop_ip_address = 3 [json_name = "hop-ip-address"];
                                 }
                                 repeated LockedPath locked_path = 1 [json_name = "locked-path"];
                              }
                              LockedPaths locked_paths = 29 [json_name = "locked-paths"];
                              message MplsTeLspMetrics {
                                 message MplsTeLspMetric {
                                    enum MetricType {
                                       MetricType_NONE = 0;
                                       MetricType_IGP = 1;
                                       MetricType_TE = 2;
                                       MetricType_HOPX_COUNT = 3;
                                    };
                                    MetricType metric_type = 1 [json_name = "metric-type"];
                                    uint64 metric_value = 2 [json_name = "metric-value"];
                                 }
                                 repeated MplsTeLspMetric mpls_te_lsp_metric = 1 [json_name = "mpls-te-lsp-metric"];
                              }
                              MplsTeLspMetrics mpls_te_lsp_metrics = 30 [json_name = "mpls-te-lsp-metrics"];
                           }
                           repeated Lsp lsp = 1 [json_name = "lsp"];
                        }
                        Lsps lsps = 33 [json_name = "lsps"];
                        message AutoBandwidths {
                           enum Mode {
                              Mode_NONE = 0;
                              Mode_COLLECTX_BW = 1;
                              Mode_ADJUSTMENT = 2;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           uint32 threshold_percent = 2 [json_name = "threshold-percent"];
                           uint64 threshold_absolute = 3 [json_name = "threshold-absolute"];
                           uint32 frequency = 4 [json_name = "frequency"];
                           uint64 max_bandwidth = 5 [json_name = "max-bandwidth"];
                           uint64 min_bandwidth = 6 [json_name = "min-bandwidth"];
                           uint32 overflow_limit = 7 [json_name = "overflow-limit"];
                           uint32 underflow_limit = 8 [json_name = "underflow-limit"];
                           enum ThresholdLogic {
                              ThresholdLogic_AND = 0;
                              ThresholdLogic_OR = 1;
                           };
                           ThresholdLogic threshold_logic = 9 [json_name = "threshold-logic"];
                           uint32 overflow_sample_count = 10 [json_name = "overflow-sample-count"];
                           uint32 underflow_sample_count = 11 [json_name = "underflow-sample-count"];
                           uint64 lsp_bandwidth = 12 [json_name = "lsp-bandwidth"];
                           uint32 auto_bw_remain_time = 13 [json_name = "auto-bw-remain-time"];
                           uint64 prev_period_avg_bw = 14 [json_name = "prev-period-avg-bw"];
                           uint64 current_period_avg_bw = 15 [json_name = "current-period-avg-bw"];
                           uint32 max_sample_count = 16 [json_name = "max-sample-count"];
                           uint32 overflow_remain_time = 17 [json_name = "overflow-remain-time"];
                           uint64 overflow_prev_period_avg_bw = 18 [json_name = "overflow-prev-period-avg-bw"];
                        }
                        AutoBandwidths auto_bandwidths = 34 [json_name = "auto-bandwidths"];
                        message BitErrorDetection {
                           bool bit_error_switch = 1 [json_name = "bit-error-switch"];
                           enum DetectionMode {
                              INVALID_ENUM_VALUE_DetectionMode = 0;
                              DetectionMode_UNIDIRECTIONAL = 1;
                              DetectionMode_BIDIRECTIONAL = 2;
                           };
                           DetectionMode detection_mode = 2 [json_name = "detection-mode"];
                           uint32 switch_threshold_coe_value = 3 [json_name = "switch-threshold-coe-value"];
                           uint32 switch_threshold_pow_value = 4 [json_name = "switch-threshold-pow-value"];
                           uint32 resume_threshold_coe_value = 5 [json_name = "resume-threshold-coe-value"];
                           uint32 resume_threshold_pow_value = 6 [json_name = "resume-threshold-pow-value"];
                        }
                        BitErrorDetection bit_error_detection = 35 [json_name = "bit-error-detection"];
                        message ReverseLsp {
                           string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                           uint32 tunnel_id = 2 [json_name = "tunnel-id"];
                        }
                        ReverseLsp reverse_lsp = 36 [json_name = "reverse-lsp"];
                        message TunnelInterface {
                           string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                           uint32 tunnel_ftid = 2 [json_name = "tunnel-ftid"];
                           enum State {
                              INVALID_ENUM_VALUE_State = 0;
                              State_UP = 1;
                              State_DOWN = 2;
                              State_SETTING = 3;
                              State_MBBX_WAITX_FORX_DELETING = 4;
                              State_MBBX_WAITX_FORX_SWITCH = 5;
                              State_ALLX_PATHX_READY = 6;
                              State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
                              State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
                              State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
                           };
                           State state = 3 [json_name = "state"];
                           enum StateDescription {
                              INVALID_ENUM_VALUE_StateDescription = 0;
                              StateDescription_CRX_LSPX_DOWN = 1;
                              StateDescription_CRX_LSPX_FAILED = 2;
                              StateDescription_CRX_LSPX_UP = 3;
                              StateDescription_CRX_LSPX_SETTINGX_UP = 4;
                              StateDescription_MODIFYX_WAITINGX_DELETING = 5;
                              StateDescription_MODIFYX_WAITINGX_SWITCHING = 6;
                              StateDescription_CRX_LSPX_MODIFY = 7;
                              StateDescription_BACKUPX_INUSEX_PRIMARYX_SETTINGX_UP = 8;
                              StateDescription_PRIMARYX_UPX_HOTX_BACKUPX_UP = 9;
                              StateDescription_PRIMARYX_UPX_HOTX_BACKUPX_SETTINGX_UP = 10;
                              StateDescription_PRIMARYX_DOWNX_BACKUPX_SETTINGX_UP = 11;
                              StateDescription_BACKUPX_INUSEX_PRIMARYX_UP = 14;
                              StateDescription_MODIFYX_UP = 15;
                           };
                           StateDescription state_description = 4 [json_name = "state-description"];
                           enum AdminStatus {
                              INVALID_ENUM_VALUE_AdminStatus = 0;
                              AdminStatus_DOWN = 1;
                              AdminStatus_UP = 2;
                           };
                           AdminStatus admin_status = 5 [json_name = "admin-status"];
                           enum OperStatus {
                              INVALID_ENUM_VALUE_OperStatus = 0;
                              OperStatus_DOWN = 1;
                              OperStatus_UP = 2;
                           };
                           OperStatus oper_status = 6 [json_name = "oper-status"];
                           enum ActiveLspType {
                              ActiveLspType_PRIMARYX_LSP = 0;
                              ActiveLspType_HOTX_STANDBYX_LSP = 1;
                              ActiveLspType_ORDINARYX_LSP = 2;
                              ActiveLspType_BESTX_EFFORTX_LSP = 3;
                           };
                           ActiveLspType active_lsp_type = 7 [json_name = "active-lsp-type"];
                           uint32 working_lsp_id = 8 [json_name = "working-lsp-id"];
                           enum TrafficSwitchAction {
                              INVALID_ENUM_VALUE_TrafficSwitchAction = 0;
                              TrafficSwitchAction_PRIMARYX_TOX_HOTX_STANDBY = 1;
                              TrafficSwitchAction_HOTX_STANDBYX_TOX_PRIMARY = 2;
                              TrafficSwitchAction_PRIMARYX_TOX_ORDINARY = 3;
                              TrafficSwitchAction_ORDINARYX_TOX_PRIMARY = 4;
                              TrafficSwitchAction_PRIMARYX_TOX_BESTX_EFFORT = 5;
                              TrafficSwitchAction_BESTX_EFFORTX_TOX_PRIMARY = 6;
                              TrafficSwitchAction_HOTX_STANDBYX_TOX_ORDINARY = 7;
                              TrafficSwitchAction_ORDINARYX_TOX_HOTX_STANDBY = 8;
                              TrafficSwitchAction_HOTX_STANDBYX_TOX_BESTX_EFFORT = 9;
                              TrafficSwitchAction_BESTX_EFFORTX_TOX_HOTX_STANDBY = 10;
                              TrafficSwitchAction_ORDINARYX_TOX_BESTX_EFFORT = 11;
                              TrafficSwitchAction_BESTX_EFFORTX_TOX_ORDINARY = 12;
                           };
                           TrafficSwitchAction traffic_switch_action = 9 [json_name = "traffic-switch-action"];
                           uint32 current_collect_bandwith = 10 [json_name = "current-collect-bandwith"];
                           bool offload_enable = 11 [json_name = "offload-enable"];
                           uint32 offload_frequency = 12 [json_name = "offload-frequency"];
                           uint32 offload_low_bandwith = 13 [json_name = "offload-low-bandwith"];
                           uint32 offload_high_bandwith = 14 [json_name = "offload-high-bandwith"];
                           string offload_path_name = 15 [json_name = "offload-path-name"];
                           uint32 readjust_bandwith = 16 [json_name = "readjust-bandwith"];
                           string excluded_ip = 17 [json_name = "excluded-ip"];
                           uint32 referred_lsp_count = 18 [json_name = "referred-lsp-count"];
                           enum OamStatus {
                              OamStatus_NONE = 0;
                              OamStatus_UP = 1;
                              OamStatus_DOWN = 2;
                           };
                           OamStatus oam_status = 19 [json_name = "oam-status"];
                           enum BfdStatus {
                              BfdStatus_UNKNOWN = 0;
                              BfdStatus_UP = 1;
                              BfdStatus_DOWN = 2;
                              BfdStatus_BFDX_CRC = 4;
                           };
                           BfdStatus bfd_status = 20 [json_name = "bfd-status"];
                           enum BackupLspType {
                              BackupLspType_PRIMARY = 0;
                              BackupLspType_HOTX_STANDBY = 1;
                              BackupLspType_ORDINARY = 2;
                              BackupLspType_BESTX_EFFORT = 3;
                              BackupLspType_NONE = 4;
                           };
                           BackupLspType backup_lsp_type = 21 [json_name = "backup-lsp-type"];
                           enum LspControlStatus {
                              LspControlStatus_LOCALX_CONTROL = 0;
                              LspControlStatus_PCEX_CONTROL = 1;
                           };
                           LspControlStatus lsp_control_status = 22 [json_name = "lsp-control-status"];
                           uint32 auto_bandwidth_remain_time = 23 [json_name = "auto-bandwidth-remain-time"];
                           uint32 reoptimization_remain_time = 24 [json_name = "reoptimization-remain-time"];
                           uint32 associate_group_id = 25 [json_name = "associate-group-id"];
                        }
                        TunnelInterface tunnel_interface = 37 [json_name = "tunnel-interface"];
                        message TunnelVpnInfos {
                           message TunnelVpnInfo {
                              string vrf_name = 1 [json_name = "vrf-name"];
                              enum AfType {
                                 INVALID_ENUM_VALUE_AfType = 0;
                                 AfType_IPV4X_UNICAST = 1;
                                 AfType_IPV6X_UNICAST = 5;
                              };
                              AfType af_type = 2 [json_name = "af-type"];
                              string nexthop = 3 [json_name = "nexthop"];
                           }
                           repeated TunnelVpnInfo tunnel_vpn_info = 1 [json_name = "tunnel-vpn-info"];
                        }
                        TunnelVpnInfos tunnel_vpn_infos = 38 [json_name = "tunnel-vpn-infos"];
                        message Pws {
                           message Pw {
                              uint32 index = 1 [json_name = "index"];
                              string instance_name = 2 [json_name = "instance-name"];
                              enum InstanceType {
                                 INVALID_ENUM_VALUE_InstanceType = 0;
                                 InstanceType_VPWSX_LOCALX_CCC = 1;
                                 InstanceType_VPWSX_REMOTEX_CCC = 2;
                                 InstanceType_VPWSX_SVC = 3;
                                 InstanceType_VPWSX_LDP = 4;
                                 InstanceType_VPWSX_SWITCH = 5;
                                 InstanceType_VPLS = 6;
                                 InstanceType_VPWSX_BGP = 8;
                                 InstanceType_VPWSX_SINGLEX_CCC = 9;
                              };
                              InstanceType instance_type = 3 [json_name = "instance-type"];
                              enum PwRole {
                                 INVALID_ENUM_VALUE_PwRole = 0;
                                 PwRole_PRIMARY = 1;
                                 PwRole_BACKUP = 2;
                                 PwRole_BYPASS = 3;
                                 PwRole_LEFTX_PRIMARY = 4;
                                 PwRole_RIGHTX_PRIMARY = 5;
                                 PwRole_RIGHTX_BACKUP = 6;
                                 PwRole_ACX_BYPASS = 7;
                                 PwRole_PWX_BYPASS = 8;
                              };
                              PwRole pw_role = 4 [json_name = "pw-role"];
                              string peer_ip = 5 [json_name = "peer-ip"];
                              uint32 pw_id = 6 [json_name = "pw-id"];
                              enum EncapsulationType {
                                 INVALID_ENUM_VALUE_EncapsulationType = 0;
                                 EncapsulationType_FR = 1;
                                 EncapsulationType_ATMX_AAL5X_SDU = 2;
                                 EncapsulationType_ATMX_TRANSX_CELL = 3;
                                 EncapsulationType_VLAN = 4;
                                 EncapsulationType_ETHERNET = 5;
                                 EncapsulationType_HDLC = 6;
                                 EncapsulationType_PPP = 7;
                                 EncapsulationType_CEM = 8;
                                 EncapsulationType_ATMX_NTO1X_VCC = 9;
                                 EncapsulationType_ATMX_NTO1X_VPC = 10;
                                 EncapsulationType_IPX_LAYER2 = 11;
                                 EncapsulationType_ATMX_1TO1X_VCC = 12;
                                 EncapsulationType_ATMX_1TO1X_VPC = 13;
                                 EncapsulationType_ATMX_AAL5X_PDU = 14;
                                 EncapsulationType_FRX_PORTX_MODE = 15;
                                 EncapsulationType_CEP = 16;
                                 EncapsulationType_SATOPX_E1 = 17;
                                 EncapsulationType_SATOPX_T1 = 18;
                                 EncapsulationType_SATOPX_E3 = 19;
                                 EncapsulationType_SATOPX_T3 = 20;
                                 EncapsulationType_CESOPSNX_BASIC = 21;
                                 EncapsulationType_TDMOIPX_AAL1 = 22;
                                 EncapsulationType_CESOPSNX_TDM = 23;
                                 EncapsulationType_TDMOIPX_AAL2 = 24;
                                 EncapsulationType_FRX_DLCI = 25;
                                 EncapsulationType_IPX_INTERWORKING = 64;
                                 EncapsulationType_UNSUPPORT = 255;
                              };
                              EncapsulationType encapsulation_type = 7 [json_name = "encapsulation-type"];
                              string interface_name = 8 [json_name = "interface-name"];
                           }
                           repeated Pw pw = 1 [json_name = "pw"];
                        }
                        Pws pws = 39 [json_name = "pws"];
                        message BfdForLsp {
                           enum Ability {
                              INVALID_ENUM_VALUE_Ability = 0;
                              Ability_ENABLE = 1;
                              Ability_BLOCK = 2;
                           };
                           Ability ability = 1 [json_name = "ability"];
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ONEX_ARMX_ECHO = 1;
                              Mode_OPTIONX_TLV = 3;
                           };
                           Mode mode = 2 [json_name = "mode"];
                           uint32 min_tx_interval = 3 [json_name = "min-tx-interval"];
                           uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
                           uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                        }
                        BfdForLsp bfd_for_lsp = 40 [json_name = "bfd-for-lsp"];
                        message TunnelGroup {
                           uint32 protection_tunnel_id = 1 [json_name = "protection-tunnel-id"];
                           enum RevertiveMode {
                              RevertiveMode_NOREVERTIVE = 0;
                              RevertiveMode_REVERTIVE = 1;
                           };
                           RevertiveMode revertive_mode = 2 [json_name = "revertive-mode"];
                           uint32 wtr = 3 [json_name = "wtr"];
                           uint32 hold_off = 4 [json_name = "hold-off"];
                           enum ApsState {
                              ApsState_LOCKOUTX_OFX_PROTECTION = 0;
                              ApsState_SIGNALX_FAILX_FORX_PROTECTION = 1;
                              ApsState_FORCEDX_SWITCH = 2;
                              ApsState_SIGNALX_FAILX_FORX_WORKING = 3;
                              ApsState_SIGNALX_DEGRADEX_FORX_PROTECTION = 4;
                              ApsState_SIGNALX_DEGRADEX_FORX_WORKING = 5;
                              ApsState_MANUALX_SWITCH = 6;
                              ApsState_WAITX_TOX_RESTORE = 7;
                              ApsState_EXERCISE = 8;
                              ApsState_REVERSEX_REQUEST = 9;
                              ApsState_DOX_NOTX_REVERT = 10;
                              ApsState_NOX_REQUEST = 11;
                           };
                           ApsState aps_state = 5 [json_name = "aps-state"];
                           string prot_tnl_name = 6 [json_name = "prot-tnl-name"];
                           enum ApsProtocol {
                              INVALID_ENUM_VALUE_ApsProtocol = 0;
                              ApsProtocol_G8131 = 1;
                           };
                           ApsProtocol aps_protocol = 7 [json_name = "aps-protocol"];
                           message Paths {
                              message Path {
                                 enum PathType {
                                    INVALID_ENUM_VALUE_PathType = 0;
                                    PathType_WORKX_PATH = 1;
                                    PathType_PROTECTX_PATH = 2;
                                 };
                                 PathType path_type = 1 [json_name = "path-type"];
                                 enum TrafficState {
                                    TrafficState_INUSE = 0;
                                    TrafficState_STANDBY = 1;
                                 };
                                 TrafficState traffic_state = 2 [json_name = "traffic-state"];
                                 enum TunnelState {
                                    TunnelState_NONX_DEFECT = 0;
                                    TunnelState_INX_DEFECT = 1;
                                 };
                                 TunnelState tunnel_state = 3 [json_name = "tunnel-state"];
                                 enum TnlDirection {
                                    INVALID_ENUM_VALUE_TnlDirection = 0;
                                    TnlDirection_UNIDIRECTIONAL = 1;
                                    TnlDirection_BIDIRECTIONAL = 2;
                                 };
                                 TnlDirection tnl_direction = 4 [json_name = "tnl-direction"];
                                 string rvs_tnl_name = 5 [json_name = "rvs-tnl-name"];
                                 enum ForwardLspDefectState {
                                    ForwardLspDefectState_NONX_DEFECT = 0;
                                    ForwardLspDefectState_INX_DEFECT = 1;
                                 };
                                 ForwardLspDefectState forward_lsp_defect_state = 6 [json_name = "forward-lsp-defect-state"];
                                 enum ReverseLspDefectState {
                                    ReverseLspDefectState_NONX_DEFECT = 0;
                                    ReverseLspDefectState_INX_DEFECT = 1;
                                 };
                                 ReverseLspDefectState reverse_lsp_defect_state = 7 [json_name = "reverse-lsp-defect-state"];
                              }
                              repeated Path path = 1 [json_name = "path"];
                           }
                           Paths paths = 8 [json_name = "paths"];
                           message ApsInfo {
                              enum LocalWorkPathState {
                                 LocalWorkPathState_NONX_DEFECT = 0;
                                 LocalWorkPathState_INX_DEFECT = 1;
                              };
                              LocalWorkPathState local_work_path_state = 1 [json_name = "local-work-path-state"];
                              enum LocalProtPathState {
                                 LocalProtPathState_NONX_DEFECT = 0;
                                 LocalProtPathState_INX_DEFECT = 1;
                              };
                              LocalProtPathState local_prot_path_state = 2 [json_name = "local-prot-path-state"];
                              enum LocalChannelType {
                                 LocalChannelType_NONX_APS = 0;
                                 LocalChannelType_APS = 1;
                              };
                              LocalChannelType local_channel_type = 3 [json_name = "local-channel-type"];
                              enum LocalBridgeType {
                                 LocalBridgeType_PERMANENT = 0;
                                 LocalBridgeType_SELECTOR = 1;
                              };
                              LocalBridgeType local_bridge_type = 4 [json_name = "local-bridge-type"];
                              enum LocalSwitchType {
                                 LocalSwitchType_UNIDIRECTIONAL = 0;
                                 LocalSwitchType_BIDIRECTIONAL = 1;
                              };
                              LocalSwitchType local_switch_type = 5 [json_name = "local-switch-type"];
                              enum LocalApsState {
                                 LocalApsState_LO = 0;
                                 LocalApsState_SFP = 1;
                                 LocalApsState_FS = 2;
                                 LocalApsState_SF = 3;
                                 LocalApsState_SDX_P = 4;
                                 LocalApsState_SDX_W = 5;
                                 LocalApsState_MS = 6;
                                 LocalApsState_WTR = 7;
                                 LocalApsState_EXER = 8;
                                 LocalApsState_RR = 9;
                                 LocalApsState_DNR = 10;
                                 LocalApsState_NR = 11;
                              };
                              LocalApsState local_aps_state = 6 [json_name = "local-aps-state"];
                              enum LocalBridgeResult {
                                 INVALID_ENUM_VALUE_LocalBridgeResult = 0;
                                 LocalBridgeResult_WORKX_PATH = 1;
                                 LocalBridgeResult_PROTECTX_PATH = 2;
                              };
                              LocalBridgeResult local_bridge_result = 7 [json_name = "local-bridge-result"];
                              enum LocalRequestResult {
                                 INVALID_ENUM_VALUE_LocalRequestResult = 0;
                                 LocalRequestResult_WORKX_PATH = 1;
                                 LocalRequestResult_PROTECTX_PATH = 2;
                              };
                              LocalRequestResult local_request_result = 8 [json_name = "local-request-result"];
                              enum LocalRevertiveMode {
                                 LocalRevertiveMode_NONX_REVERTIVE = 0;
                                 LocalRevertiveMode_REVERTIVE = 1;
                              };
                              LocalRevertiveMode local_revertive_mode = 9 [json_name = "local-revertive-mode"];
                              enum HardwareResourceState {
                                 INVALID_ENUM_VALUE_HardwareResourceState = 0;
                                 HardwareResourceState_NORMAL = 1;
                                 HardwareResourceState_NOTX_ENOUGH = 2;
                                 HardwareResourceState_NOTX_SUPPORT = 3;
                                 HardwareResourceState_OFFLINE = 4;
                              };
                              HardwareResourceState hardware_resource_state = 10 [json_name = "hardware-resource-state"];
                              enum RemoteChannelType {
                                 RemoteChannelType_NONX_APS = 0;
                                 RemoteChannelType_APS = 1;
                              };
                              RemoteChannelType remote_channel_type = 11 [json_name = "remote-channel-type"];
                              enum RemoteBridgeType {
                                 RemoteBridgeType_PERMANENT = 0;
                                 RemoteBridgeType_SELECTOR = 1;
                              };
                              RemoteBridgeType remote_bridge_type = 12 [json_name = "remote-bridge-type"];
                              enum RemoteSwitchType {
                                 RemoteSwitchType_UNIDIRECTIONAL = 0;
                                 RemoteSwitchType_BIDIRECTIONAL = 1;
                              };
                              RemoteSwitchType remote_switch_type = 13 [json_name = "remote-switch-type"];
                              enum RemoteApsState {
                                 RemoteApsState_LO = 0;
                                 RemoteApsState_SFP = 1;
                                 RemoteApsState_FS = 2;
                                 RemoteApsState_SF = 3;
                                 RemoteApsState_SDX_P = 4;
                                 RemoteApsState_SDX_W = 5;
                                 RemoteApsState_MS = 6;
                                 RemoteApsState_WTR = 7;
                                 RemoteApsState_EXER = 8;
                                 RemoteApsState_RR = 9;
                                 RemoteApsState_DNR = 10;
                                 RemoteApsState_NR = 11;
                              };
                              RemoteApsState remote_aps_state = 14 [json_name = "remote-aps-state"];
                              enum RemoteBridgeResult {
                                 INVALID_ENUM_VALUE_RemoteBridgeResult = 0;
                                 RemoteBridgeResult_WORKX_PATH = 1;
                                 RemoteBridgeResult_PROTECTX_PATH = 2;
                              };
                              RemoteBridgeResult remote_bridge_result = 15 [json_name = "remote-bridge-result"];
                              enum RemoteRequestResult {
                                 INVALID_ENUM_VALUE_RemoteRequestResult = 0;
                                 RemoteRequestResult_WORKX_PATH = 1;
                                 RemoteRequestResult_PROTECTX_PATH = 2;
                              };
                              RemoteRequestResult remote_request_result = 16 [json_name = "remote-request-result"];
                              enum RemoteRevertiveMode {
                                 RemoteRevertiveMode_NONX_REVERTIVE = 0;
                                 RemoteRevertiveMode_REVERTIVE = 1;
                              };
                              RemoteRevertiveMode remote_revertive_mode = 17 [json_name = "remote-revertive-mode"];
                              enum UsingSamePath {
                                 UsingSamePath_DIFFERENTX_PATH = 0;
                                 UsingSamePath_SAMEX_PATH = 1;
                                 UsingSamePath_NOTX_COMPARE = 2;
                                 UsingSamePath_EXACTLYX_SAMEX_PATH = 3;
                              };
                              UsingSamePath using_same_path = 18 [json_name = "using-same-path"];
                           }
                           ApsInfo aps_info = 9 [json_name = "aps-info"];
                        }
                        TunnelGroup tunnel_group = 41 [json_name = "tunnel-group"];
                        uint32 tunnel_weight = 42 [json_name = "tunnel-weight"];
                        message ReverseLspStateInfos {
                           message ReverseLspStateInfo {
                              uint32 reverse_lsp_id = 1 [json_name = "reverse-lsp-id"];
                              string reverse_tunnel_name = 2 [json_name = "reverse-tunnel-name"];
                              uint32 in_label = 3 [json_name = "in-label"];
                              string in_interface = 4 [json_name = "in-interface"];
                              enum ReverseLspStatus {
                                 ReverseLspStatus_DOWN = 0;
                                 ReverseLspStatus_UP = 1;
                                 ReverseLspStatus_NONE = 2;
                              };
                              ReverseLspStatus reverse_lsp_status = 5 [json_name = "reverse-lsp-status"];
                           }
                           repeated ReverseLspStateInfo reverse_lsp_state_info = 1 [json_name = "reverse-lsp-state-info"];
                        }
                        ReverseLspStateInfos reverse_lsp_state_infos = 43 [json_name = "reverse-lsp-state-infos"];
                        enum ReoptimizationAggressive {
                           ReoptimizationAggressive_DISABLE = 0;
                           ReoptimizationAggressive_ENABLE = 1;
                           ReoptimizationAggressive_BLOCK = 2;
                        };
                        ReoptimizationAggressive reoptimization_aggressive = 44 [json_name = "reoptimization-aggressive"];
                        uint32 color = 45 [json_name = "color"];
                     }
                     RsvpTe rsvp_te = 1 [json_name = "rsvp-te"];
                  }
                  message TunnelMode_P2MpTe {
                     message P2MpTe8 {
                        bool traffic_enable = 1 [json_name = "traffic-enable"];
                        uint32 bandwidth = 2 [json_name = "bandwidth"];
                        uint32 setup_priority = 3 [json_name = "setup-priority"];
                        uint32 hold_priority = 4 [json_name = "hold-priority"];
                        enum SoftPreempt {
                           SoftPreempt_DISABLE = 0;
                           SoftPreempt_ENABLE = 1;
                           SoftPreempt_BLOCK = 2;
                        };
                        SoftPreempt soft_preempt = 5 [json_name = "soft-preempt"];
                        bool disable_cspf = 6 [json_name = "disable-cspf"];
                        enum ReserveStyle {
                           INVALID_ENUM_VALUE_ReserveStyle = 0;
                           ReserveStyle_SE = 1;
                           ReserveStyle_FF = 2;
                        };
                        ReserveStyle reserve_style = 7 [json_name = "reserve-style"];
                        enum RecordRoute {
                           INVALID_ENUM_VALUE_RecordRoute = 0;
                           RecordRoute_DISABLE = 1;
                           RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                           RecordRoute_RECORDX_LABEL = 3;
                        };
                        RecordRoute record_route = 8 [json_name = "record-route"];
                        bool reoptimization = 9 [json_name = "reoptimization"];
                        int32 reoptimization_frequency = 10 [json_name = "reoptimization-frequency"];
                        enum TieBreaking {
                           INVALID_ENUM_VALUE_TieBreaking = 0;
                           TieBreaking_LEASTX_FILL = 1;
                           TieBreaking_MOSTX_FILL = 2;
                           TieBreaking_RANDOM = 3;
                           TieBreaking_DEFAULT = 4;
                        };
                        TieBreaking tie_breaking = 11 [json_name = "tie-breaking"];
                        enum PathMetricType {
                           INVALID_ENUM_VALUE_PathMetricType = 0;
                           PathMetricType_NONE = 1;
                           PathMetricType_IGP = 2;
                           PathMetricType_TE = 3;
                        };
                        PathMetricType path_metric_type = 12 [json_name = "path-metric-type"];
                        string leaf_list_name = 13 [json_name = "leaf-list-name"];
                        message FastReroute {
                           bool enable = 1 [json_name = "enable"];
                           bool bandwidth_protection_enable = 2 [json_name = "bandwidth-protection-enable"];
                           message BypassAttributes {
                              uint32 frr_bandwidth = 1 [json_name = "frr-bandwidth"];
                              uint32 setup_priority = 2 [json_name = "setup-priority"];
                              uint32 hold_priority = 3 [json_name = "hold-priority"];
                           }
                           BypassAttributes bypass_attributes = 3 [json_name = "bypass-attributes"];
                        }
                        FastReroute fast_reroute = 14 [json_name = "fast-reroute"];
                        message LspPaths {
                           message LspPath {
                              enum PathType {
                                 INVALID_ENUM_VALUE_PathType = 0;
                                 PathType_PRIMARY = 1;
                                 PathType_HOTX_STANDBY = 2;
                                 PathType_ORDINARY = 3;
                                 PathType_BESTX_EFFORT = 4;
                              };
                              PathType path_type = 1 [json_name = "path-type"];
                              uint32 hop_limit = 2 [json_name = "hop-limit"];
                              string include_any = 3 [json_name = "include-any"];
                              string exclude_any = 4 [json_name = "exclude-any"];
                              string include_all = 5 [json_name = "include-all"];
                              repeated string include_any_affinity_name = 6 [json_name = "include-any-affinity-name"];
                              repeated string include_all_affinity_name = 7 [json_name = "include-all-affinity-name"];
                              repeated string exclude_affinity_name = 8 [json_name = "exclude-affinity-name"];
                           }
                           repeated LspPath lsp_path = 1 [json_name = "lsp-path"];
                        }
                        LspPaths lsp_paths = 15 [json_name = "lsp-paths"];
                        enum ReoptimizationAggressive {
                           ReoptimizationAggressive_DISABLE = 0;
                           ReoptimizationAggressive_ENABLE = 1;
                           ReoptimizationAggressive_BLOCK = 2;
                        };
                        ReoptimizationAggressive reoptimization_aggressive = 16 [json_name = "reoptimization-aggressive"];
                     }
                     P2MpTe8 p2mp_te = 1 [json_name = "p2mp-te"];
                  }
                  oneof TunnelMode {
                     TunnelMode_P2PRsvpTe tunnel_mode_p2p_rsvp_te = 2 [json_name = "p2p-rsvp-te"];
                     TunnelMode_P2MpTe tunnel_mode_p2mp_te = 3 [json_name = "p2mp-te"];
                  }
                  message SrTe {
                     uint32 bandwidth = 1 [json_name = "bandwidth"];
                     uint32 setup_priority = 2 [json_name = "setup-priority"];
                     uint32 hold_priority = 3 [json_name = "hold-priority"];
                     enum PceDelegate {
                        PceDelegate_NO = 0;
                        PceDelegate_ACTIVE = 1;
                        PceDelegate_ONLYX_STATUSX_REPORT = 2;
                     };
                     PceDelegate pce_delegate = 4 [json_name = "pce-delegate"];
                     bool split_tunnel = 5 [json_name = "split-tunnel"];
                     uint32 binding_sid = 6 [json_name = "binding-sid"];
                     uint32 reverse_binding_sid = 7 [json_name = "reverse-binding-sid"];
                     enum PathVerification {
                        PathVerification_INHERIT = 0;
                        PathVerification_ENABLE = 1;
                        PathVerification_DISABLE = 2;
                     };
                     PathVerification path_verification = 8 [json_name = "path-verification"];
                     bool adjacency_sid = 9 [json_name = "adjacency-sid"];
                     message Reoptimization {
                        uint32 frequency = 1 [json_name = "frequency"];
                     }
                     Reoptimization reoptimization = 10 [json_name = "reoptimization"];
                     message Hotstandby {
                        enum RevertiveMode {
                           RevertiveMode_NONX_REVERTIVE = 0;
                           RevertiveMode_REVERTIVE = 1;
                        };
                        RevertiveMode revertive_mode = 1 [json_name = "revertive-mode"];
                        uint32 wtr_time = 2 [json_name = "wtr-time"];
                        bool path_overlap = 3 [json_name = "path-overlap"];
                     }
                     Hotstandby hotstandby = 11 [json_name = "hotstandby"];
                     message LspPaths {
                        message LspPath {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_PRIMARY = 1;
                              Type_HOTX_STANDBY = 2;
                           };
                           Type type = 1 [json_name = "type"];
                           string explicit_path_name = 2 [json_name = "explicit-path-name"];
                           uint32 hop_limit = 3 [json_name = "hop-limit"];
                           enum LspState {
                              LspState_DOWN = 0;
                              LspState_UP = 1;
                              LspState_NONE = 2;
                           };
                           LspState lsp_state = 4 [json_name = "lsp-state"];
                           uint32 lsp_id = 5 [json_name = "lsp-id"];
                           uint32 modify_lsp_id = 6 [json_name = "modify-lsp-id"];
                           string include_all = 7 [json_name = "include-all"];
                           string include_any = 8 [json_name = "include-any"];
                           string exclude_any = 9 [json_name = "exclude-any"];
                           repeated string include_all_affinity_name = 10 [json_name = "include-all-affinity-name"];
                           repeated string include_any_affinity_name = 11 [json_name = "include-any-affinity-name"];
                           repeated string exclude_affinity_name = 12 [json_name = "exclude-affinity-name"];
                        }
                        repeated LspPath lsp_path = 1 [json_name = "lsp-path"];
                     }
                     LspPaths lsp_paths = 12 [json_name = "lsp-paths"];
                     message HotstandbyState {
                        enum SwitchResult {
                           SwitchResult_MAINX_LSP = 0;
                           SwitchResult_HSBX_LSP = 1;
                           SwitchResult_BESTX_EFFORTX_LSP = 2;
                        };
                        SwitchResult switch_result = 1 [json_name = "switch-result"];
                        bool wtr_state = 2 [json_name = "wtr-state"];
                        uint32 wtr_remaining_time = 3 [json_name = "wtr-remaining-time"];
                        enum SwitchState {
                           SwitchState_NONE = 0;
                           SwitchState_WAITX_TOX_RESTORE = 1;
                        };
                        SwitchState switch_state = 4 [json_name = "switch-state"];
                        enum UsingOverlap {
                           UsingOverlap_DIFFERENTX_PATH = 0;
                           UsingOverlap_PARTIALX_LINKX_SAME = 1;
                           UsingOverlap_NOTX_COMPARE = 2;
                           UsingOverlap_EXACTLYX_SAMEX_PATH = 3;
                        };
                        UsingOverlap using_overlap = 5 [json_name = "using-overlap"];
                        enum SwitchReason {
                           SwitchReason_NONE = 0;
                           SwitchReason_FORCE = 1;
                           SwitchReason_SIGNALX_FAIL = 2;
                           SwitchReason_DOX_NOTX_REVERT = 3;
                           SwitchReason_WAITX_TOX_RESTORE = 4;
                           SwitchReason_BFDX_DOWN = 5;
                           SwitchReason_SIGNALX_DEGRADE = 6;
                           SwitchReason_FRRX_INUSE = 7;
                           SwitchReason_BFDX_CRC = 9;
                        };
                        SwitchReason switch_reason = 6 [json_name = "switch-reason"];
                     }
                     HotstandbyState hotstandby_state = 13 [json_name = "hotstandby-state"];
                     message TunnelInterface {
                        string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                        uint32 tunnel_ftid = 2 [json_name = "tunnel-ftid"];
                        enum State {
                           INVALID_ENUM_VALUE_State = 0;
                           State_UP = 1;
                           State_DOWN = 2;
                           State_SETTING = 3;
                           State_MBBX_WAITX_FORX_DELETING = 4;
                           State_MBBX_WAITX_FORX_SWITCH = 5;
                           State_ALLX_PATHX_READY = 6;
                           State_PRIMARYX_READYX_BACKUPX_SETTING = 7;
                           State_PRIMARYX_DOWNX_BACKUPX_SETTING = 8;
                           State_BACKUPX_INUSEX_PRIMARYX_SETTING = 9;
                        };
                        State state = 3 [json_name = "state"];
                        enum StateDescription {
                           INVALID_ENUM_VALUE_StateDescription = 0;
                           StateDescription_CRX_LSPX_DOWN = 1;
                           StateDescription_CRX_LSPX_FAILED = 2;
                           StateDescription_CRX_LSPX_UP = 3;
                           StateDescription_CRX_LSPX_SETTINGX_UP = 4;
                           StateDescription_MODIFYX_WAITINGX_DELETING = 5;
                           StateDescription_MODIFYX_WAITINGX_SWITCHING = 6;
                           StateDescription_CRX_LSPX_MODIFY = 7;
                           StateDescription_BACKUPX_INUSEX_PRIMARYX_SETTINGX_UP = 8;
                           StateDescription_PRIMARYX_UPX_HOTX_BACKUPX_UP = 9;
                           StateDescription_PRIMARYX_UPX_HOTX_BACKUPX_SETTINGX_UP = 10;
                           StateDescription_PRIMARYX_DOWNX_BACKUPX_SETTINGX_UP = 11;
                           StateDescription_BACKUPX_INUSEX_PRIMARYX_UP = 14;
                           StateDescription_MODIFYX_UP = 15;
                        };
                        StateDescription state_description = 4 [json_name = "state-description"];
                        enum ActiveLsp {
                           ActiveLsp_PRIMARYX_LSP = 0;
                           ActiveLsp_HOTX_STANDBYX_LSP = 1;
                           ActiveLsp_ORDINARYX_LSP = 2;
                           ActiveLsp_BESTX_EFFORTX_LSP = 3;
                        };
                        ActiveLsp active_lsp = 5 [json_name = "active-lsp"];
                        uint32 working_lsp_id = 6 [json_name = "working-lsp-id"];
                        enum TrafficSwitchAction {
                           INVALID_ENUM_VALUE_TrafficSwitchAction = 0;
                           TrafficSwitchAction_PRIMARYX_TOX_HOTX_STANDBY = 1;
                           TrafficSwitchAction_HOTX_STANDBYX_TOX_PRIMARY = 2;
                           TrafficSwitchAction_PRIMARYX_TOX_ORDINARY = 3;
                           TrafficSwitchAction_ORDINARYX_TOX_PRIMARY = 4;
                           TrafficSwitchAction_PRIMARYX_TOX_BESTX_EFFORT = 5;
                           TrafficSwitchAction_BESTX_EFFORTX_TOX_PRIMARY = 6;
                           TrafficSwitchAction_HOTX_STANDBYX_TOX_ORDINARY = 7;
                           TrafficSwitchAction_ORDINARYX_TOX_HOTX_STANDBY = 8;
                           TrafficSwitchAction_HOTX_STANDBYX_TOX_BESTX_EFFORT = 9;
                           TrafficSwitchAction_BESTX_EFFORTX_TOX_HOTX_STANDBY = 10;
                           TrafficSwitchAction_ORDINARYX_TOX_BESTX_EFFORT = 11;
                           TrafficSwitchAction_BESTX_EFFORTX_TOX_ORDINARY = 12;
                        };
                        TrafficSwitchAction traffic_switch_action = 7 [json_name = "traffic-switch-action"];
                        uint32 current_collect_bandwith = 8 [json_name = "current-collect-bandwith"];
                        bool offload_enable = 9 [json_name = "offload-enable"];
                        uint32 offload_frequency = 10 [json_name = "offload-frequency"];
                        uint32 offload_low_bandwith = 11 [json_name = "offload-low-bandwith"];
                        uint32 offload_high_bandwith = 12 [json_name = "offload-high-bandwith"];
                        string offload_path_name = 13 [json_name = "offload-path-name"];
                        uint32 readjust_bandwith = 14 [json_name = "readjust-bandwith"];
                        string excluded_ip = 15 [json_name = "excluded-ip"];
                        uint32 referred_lsp_count = 16 [json_name = "referred-lsp-count"];
                        enum OamStatus {
                           OamStatus_NONE = 0;
                           OamStatus_UP = 1;
                           OamStatus_DOWN = 2;
                        };
                        OamStatus oam_status = 17 [json_name = "oam-status"];
                        enum BfdStatus {
                           BfdStatus_UNKNOWN = 0;
                           BfdStatus_UP = 1;
                           BfdStatus_DOWN = 2;
                           BfdStatus_BFDX_CRC = 4;
                        };
                        BfdStatus bfd_status = 18 [json_name = "bfd-status"];
                        enum BackupLspType {
                           BackupLspType_PRIMARY = 0;
                           BackupLspType_HOTX_STANDBY = 1;
                           BackupLspType_ORDINARY = 2;
                           BackupLspType_BESTX_EFFORT = 3;
                           BackupLspType_NONE = 4;
                        };
                        BackupLspType backup_lsp_type = 19 [json_name = "backup-lsp-type"];
                        enum LspControlStatus {
                           LspControlStatus_LOCALX_CONTROL = 0;
                           LspControlStatus_PCEX_CONTROL = 1;
                        };
                        LspControlStatus lsp_control_status = 20 [json_name = "lsp-control-status"];
                        uint32 auto_bandwidth_remain_time = 21 [json_name = "auto-bandwidth-remain-time"];
                        uint32 reoptimization_remain_time = 22 [json_name = "reoptimization-remain-time"];
                        uint32 associate_group_id = 23 [json_name = "associate-group-id"];
                        enum AdminStatus {
                           INVALID_ENUM_VALUE_AdminStatus = 0;
                           AdminStatus_DOWN = 1;
                           AdminStatus_UP = 2;
                        };
                        AdminStatus admin_status = 24 [json_name = "admin-status"];
                        enum OperStatus {
                           INVALID_ENUM_VALUE_OperStatus = 0;
                           OperStatus_DOWN = 1;
                           OperStatus_UP = 2;
                        };
                        OperStatus oper_status = 25 [json_name = "oper-status"];
                     }
                     TunnelInterface tunnel_interface = 14 [json_name = "tunnel-interface"];
                     message Lsps {
                        message Lsp {
                           string ingress_lsr_id = 1 [json_name = "ingress-lsr-id"];
                           string egress_lsr_id = 2 [json_name = "egress-lsr-id"];
                           uint32 session_id = 3 [json_name = "session-id"];
                           uint32 lsp_id = 4 [json_name = "lsp-id"];
                           enum LspDelegate {
                              LspDelegate_NO = 0;
                              LspDelegate_ACTIVE = 1;
                              LspDelegate_ONLYX_STATUSX_REPORT = 2;
                           };
                           LspDelegate lsp_delegate = 5 [json_name = "lsp-delegate"];
                           enum OperStatus {
                              INVALID_ENUM_VALUE_OperStatus = 0;
                              OperStatus_DOWN = 1;
                              OperStatus_UP = 2;
                           };
                           OperStatus oper_status = 6 [json_name = "oper-status"];
                           message CHops {
                              message CHop {
                                 uint32 index = 1 [json_name = "index"];
                                 enum Type {
                                    INVALID_ENUM_VALUE_Type = 0;
                                    Type_STRICT = 1;
                                    Type_LOOSE = 2;
                                 };
                                 Type type = 2 [json_name = "type"];
                                 enum LabelType {
                                    LabelType_LINK = 0;
                                    LabelType_NODE = 1;
                                    LabelType_BINDING = 2;
                                 };
                                 LabelType label_type = 3 [json_name = "label-type"];
                                 uint32 label = 4 [json_name = "label"];
                                 string nai = 5 [json_name = "nai"];
                              }
                              repeated CHop c_hop = 1 [json_name = "c-hop"];
                           }
                           CHops c_hops = 7 [json_name = "c-hops"];
                           uint32 setup_priority = 8 [json_name = "setup-priority"];
                           uint32 hold_priority = 9 [json_name = "hold-priority"];
                           bool dste_mode = 10 [json_name = "dste-mode"];
                           uint32 bandwidth = 11 [json_name = "bandwidth"];
                           string explicit_path_name = 12 [json_name = "explicit-path-name"];
                           string include_all = 13 [json_name = "include-all"];
                           string include_any = 14 [json_name = "include-any"];
                           string exclude_any = 15 [json_name = "exclude-any"];
                           uint32 xcindex = 16 [json_name = "xcindex"];
                           message MplsTeLspMetrics {
                              message MplsTeLspMetric {
                                 enum MetricType {
                                    MetricType_NONE = 0;
                                    MetricType_IGP = 1;
                                    MetricType_TE = 2;
                                    MetricType_HOPX_COUNT = 3;
                                 };
                                 MetricType metric_type = 1 [json_name = "metric-type"];
                                 uint64 metric_value = 2 [json_name = "metric-value"];
                              }
                              repeated MplsTeLspMetric mpls_te_lsp_metric = 1 [json_name = "mpls-te-lsp-metric"];
                           }
                           MplsTeLspMetrics mpls_te_lsp_metrics = 17 [json_name = "mpls-te-lsp-metrics"];
                        }
                        repeated Lsp lsp = 1 [json_name = "lsp"];
                     }
                     Lsps lsps = 15 [json_name = "lsps"];
                     message TunnelVpnInfos {
                        message TunnelVpnInfo {
                           string vrf_name = 1 [json_name = "vrf-name"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4X_UNICAST = 1;
                              AfType_IPV6X_UNICAST = 5;
                           };
                           AfType af_type = 2 [json_name = "af-type"];
                           string nexthop = 3 [json_name = "nexthop"];
                        }
                        repeated TunnelVpnInfo tunnel_vpn_info = 1 [json_name = "tunnel-vpn-info"];
                     }
                     TunnelVpnInfos tunnel_vpn_infos = 16 [json_name = "tunnel-vpn-infos"];
                     message Pws {
                        message Pw {
                           uint32 index = 1 [json_name = "index"];
                           string instance_name = 2 [json_name = "instance-name"];
                           enum InstanceType {
                              INVALID_ENUM_VALUE_InstanceType = 0;
                              InstanceType_VPWSX_LOCALX_CCC = 1;
                              InstanceType_VPWSX_REMOTEX_CCC = 2;
                              InstanceType_VPWSX_SVC = 3;
                              InstanceType_VPWSX_LDP = 4;
                              InstanceType_VPWSX_SWITCH = 5;
                              InstanceType_VPLS = 6;
                              InstanceType_VPWSX_BGP = 8;
                              InstanceType_VPWSX_SINGLEX_CCC = 9;
                           };
                           InstanceType instance_type = 3 [json_name = "instance-type"];
                           enum PwRole {
                              INVALID_ENUM_VALUE_PwRole = 0;
                              PwRole_PRIMARY = 1;
                              PwRole_BACKUP = 2;
                              PwRole_BYPASS = 3;
                              PwRole_LEFTX_PRIMARY = 4;
                              PwRole_RIGHTX_PRIMARY = 5;
                              PwRole_RIGHTX_BACKUP = 6;
                              PwRole_ACX_BYPASS = 7;
                              PwRole_PWX_BYPASS = 8;
                           };
                           PwRole pw_role = 4 [json_name = "pw-role"];
                           string peer_ip = 5 [json_name = "peer-ip"];
                           uint32 pw_id = 6 [json_name = "pw-id"];
                           enum EncapsulationType {
                              INVALID_ENUM_VALUE_EncapsulationType = 0;
                              EncapsulationType_FR = 1;
                              EncapsulationType_ATMX_AAL5X_SDU = 2;
                              EncapsulationType_ATMX_TRANSX_CELL = 3;
                              EncapsulationType_VLAN = 4;
                              EncapsulationType_ETHERNET = 5;
                              EncapsulationType_HDLC = 6;
                              EncapsulationType_PPP = 7;
                              EncapsulationType_CEM = 8;
                              EncapsulationType_ATMX_NTO1X_VCC = 9;
                              EncapsulationType_ATMX_NTO1X_VPC = 10;
                              EncapsulationType_IPX_LAYER2 = 11;
                              EncapsulationType_ATMX_1TO1X_VCC = 12;
                              EncapsulationType_ATMX_1TO1X_VPC = 13;
                              EncapsulationType_ATMX_AAL5X_PDU = 14;
                              EncapsulationType_FRX_PORTX_MODE = 15;
                              EncapsulationType_CEP = 16;
                              EncapsulationType_SATOPX_E1 = 17;
                              EncapsulationType_SATOPX_T1 = 18;
                              EncapsulationType_SATOPX_E3 = 19;
                              EncapsulationType_SATOPX_T3 = 20;
                              EncapsulationType_CESOPSNX_BASIC = 21;
                              EncapsulationType_TDMOIPX_AAL1 = 22;
                              EncapsulationType_CESOPSNX_TDM = 23;
                              EncapsulationType_TDMOIPX_AAL2 = 24;
                              EncapsulationType_FRX_DLCI = 25;
                              EncapsulationType_IPX_INTERWORKING = 64;
                              EncapsulationType_UNSUPPORT = 255;
                           };
                           EncapsulationType encapsulation_type = 7 [json_name = "encapsulation-type"];
                           string interface_name = 8 [json_name = "interface-name"];
                        }
                        repeated Pw pw = 1 [json_name = "pw"];
                     }
                     Pws pws = 17 [json_name = "pws"];
                     message BfdForLsp {
                        enum Ability {
                           INVALID_ENUM_VALUE_Ability = 0;
                           Ability_ENABLE = 1;
                           Ability_BLOCK = 2;
                        };
                        Ability ability = 1 [json_name = "ability"];
                        enum Mode {
                           INVALID_ENUM_VALUE_Mode = 0;
                           Mode_ONEX_ARMX_ECHO = 1;
                           Mode_SEAMLESS = 2;
                           Mode_OPTIONX_TLV = 3;
                        };
                        Mode mode = 2 [json_name = "mode"];
                        uint32 min_tx_interval = 3 [json_name = "min-tx-interval"];
                        uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
                        uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                        bool only_detection_primary = 6 [json_name = "only-detection-primary"];
                     }
                     BfdForLsp bfd_for_lsp = 18 [json_name = "bfd-for-lsp"];
                     message BfdForTunnel {
                        enum Ability {
                           INVALID_ENUM_VALUE_Ability = 0;
                           Ability_ENABLE = 1;
                           Ability_BLOCK = 2;
                        };
                        Ability ability = 1 [json_name = "ability"];
                        enum Mode {
                           INVALID_ENUM_VALUE_Mode = 0;
                           Mode_ONEX_ARMX_ECHO = 1;
                           Mode_SEAMLESS = 3;
                        };
                        Mode mode = 2 [json_name = "mode"];
                        uint32 min_tx_interval = 3 [json_name = "min-tx-interval"];
                        uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
                        uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                     }
                     BfdForTunnel bfd_for_tunnel = 19 [json_name = "bfd-for-tunnel"];
                     message StaticBfdForLsp {
                        bool initial_down_enable = 1 [json_name = "initial-down-enable"];
                     }
                     StaticBfdForLsp static_bfd_for_lsp = 20 [json_name = "static-bfd-for-lsp"];
                     uint32 tunnel_weight = 21 [json_name = "tunnel-weight"];
                     uint32 color = 22 [json_name = "color"];
                  }
                  SrTe sr_te = 4 [json_name = "sr-te"];
                  message TunnelLastErrors {
                     message TunnelLastError {
                        uint32 lsp_id = 1 [json_name = "lsp-id"];
                        enum LspType {
                           LspType_PRIMARY = 0;
                           LspType_HOTX_STANDBY = 1;
                           LspType_ORDINARY = 2;
                           LspType_BESTX_EFFORT = 3;
                        };
                        LspType lsp_type = 2 [json_name = "lsp-type"];
                        string error_node = 3 [json_name = "error-node"];
                        string error_lsr_id = 4 [json_name = "error-lsr-id"];
                        string occur_time = 5 [json_name = "occur-time"];
                        uint32 error_code = 6 [json_name = "error-code"];
                        uint32 error_sub_code = 7 [json_name = "error-sub-code"];
                        uint32 error_value = 8 [json_name = "error-value"];
                        string error_info = 9 [json_name = "error-info"];
                        string down_reason = 10 [json_name = "down-reason"];
                     }
                     repeated TunnelLastError tunnel_last_error = 1 [json_name = "tunnel-last-error"];
                  }
                  TunnelLastErrors tunnel_last_errors = 5 [json_name = "tunnel-last-errors"];
                  message IgpAttr {
                     bool adv_enable = 1 [json_name = "adv-enable"];
                     bool adv_ipv6_enable = 2 [json_name = "adv-ipv6-enable"];
                     uint32 hold_time = 3 [json_name = "hold-time"];
                     enum ShortcutType {
                        ShortcutType_DISABLE = 0;
                        ShortcutType_ISIS = 1;
                        ShortcutType_OSPF = 2;
                        ShortcutType_BOTH = 3;
                     };
                     ShortcutType shortcut_type = 4 [json_name = "shortcut-type"];
                     message MetricType_Relative {
                        int32 relative9 = 1 [json_name = "relative"];
                     }
                     message MetricType_Absolute {
                        int32 absolute9 = 1 [json_name = "absolute"];
                     }
                     oneof MetricType {
                        MetricType_Relative metric_type_relative = 5 [json_name = "relative"];
                        MetricType_Absolute metric_type_absolute = 6 [json_name = "absolute"];
                     }
                  }
                  IgpAttr igp_attr = 6 [json_name = "igp-attr"];
                  message CrStatic {
                     enum Direction {
                        INVALID_ENUM_VALUE_Direction = 0;
                        Direction_BIDIRECTIONAL = 1;
                        Direction_PASSIVEX_TUNNEL = 2;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string binding_bidirection_name = 2 [json_name = "binding-bidirection-name"];
                     string reverse_lsp_name = 3 [json_name = "reverse-lsp-name"];
                     message TunnelGroup {
                        uint32 protection_tunnel_id = 1 [json_name = "protection-tunnel-id"];
                        enum RevertiveMode {
                           RevertiveMode_NOREVERTIVE = 0;
                           RevertiveMode_REVERTIVE = 1;
                        };
                        RevertiveMode revertive_mode = 2 [json_name = "revertive-mode"];
                        uint32 wtr = 3 [json_name = "wtr"];
                        uint32 hold_off = 4 [json_name = "hold-off"];
                        enum ApsState {
                           ApsState_LOCKOUTX_OFX_PROTECTION = 0;
                           ApsState_SIGNALX_FAILX_FORX_PROTECTION = 1;
                           ApsState_FORCEDX_SWITCH = 2;
                           ApsState_SIGNALX_FAILX_FORX_WORKING = 3;
                           ApsState_SIGNALX_DEGRADEX_FORX_PROTECTION = 4;
                           ApsState_SIGNALX_DEGRADEX_FORX_WORKING = 5;
                           ApsState_MANUALX_SWITCH = 6;
                           ApsState_WAITX_TOX_RESTORE = 7;
                           ApsState_EXERCISE = 8;
                           ApsState_REVERSEX_REQUEST = 9;
                           ApsState_DOX_NOTX_REVERT = 10;
                           ApsState_NOX_REQUEST = 11;
                        };
                        ApsState aps_state = 5 [json_name = "aps-state"];
                        message Paths {
                           message Path {
                              enum PathType {
                                 INVALID_ENUM_VALUE_PathType = 0;
                                 PathType_WORKX_PATH = 1;
                                 PathType_PROTECTX_PATH = 2;
                              };
                              PathType path_type = 1 [json_name = "path-type"];
                              enum TrafficState {
                                 TrafficState_INUSE = 0;
                                 TrafficState_STANDBY = 1;
                              };
                              TrafficState traffic_state = 2 [json_name = "traffic-state"];
                              enum TunnelState {
                                 TunnelState_NONX_DEFECT = 0;
                                 TunnelState_INX_DEFECT = 1;
                              };
                              TunnelState tunnel_state = 3 [json_name = "tunnel-state"];
                              enum TnlDirection {
                                 INVALID_ENUM_VALUE_TnlDirection = 0;
                                 TnlDirection_UNIDIRECTIONAL = 1;
                                 TnlDirection_BIDIRECTIONAL = 2;
                              };
                              TnlDirection tnl_direction = 4 [json_name = "tnl-direction"];
                              string rvs_tnl_name = 5 [json_name = "rvs-tnl-name"];
                              enum ForwardLspDefectState {
                                 ForwardLspDefectState_NONX_DEFECT = 0;
                                 ForwardLspDefectState_INX_DEFECT = 1;
                              };
                              ForwardLspDefectState forward_lsp_defect_state = 6 [json_name = "forward-lsp-defect-state"];
                              enum ReverseLspDefectState {
                                 ReverseLspDefectState_NONX_DEFECT = 0;
                                 ReverseLspDefectState_INX_DEFECT = 1;
                              };
                              ReverseLspDefectState reverse_lsp_defect_state = 7 [json_name = "reverse-lsp-defect-state"];
                           }
                           repeated Path path = 1 [json_name = "path"];
                        }
                        Paths paths = 6 [json_name = "paths"];
                        string prot_tnl_name = 7 [json_name = "prot-tnl-name"];
                        enum ApsProtocol {
                           INVALID_ENUM_VALUE_ApsProtocol = 0;
                           ApsProtocol_G8131 = 1;
                        };
                        ApsProtocol aps_protocol = 8 [json_name = "aps-protocol"];
                        message ApsInfo {
                           enum LocalWorkPathState {
                              LocalWorkPathState_NONX_DEFECT = 0;
                              LocalWorkPathState_INX_DEFECT = 1;
                           };
                           LocalWorkPathState local_work_path_state = 1 [json_name = "local-work-path-state"];
                           enum LocalProtPathState {
                              LocalProtPathState_NONX_DEFECT = 0;
                              LocalProtPathState_INX_DEFECT = 1;
                           };
                           LocalProtPathState local_prot_path_state = 2 [json_name = "local-prot-path-state"];
                           enum LocalChannelType {
                              LocalChannelType_NONX_APS = 0;
                              LocalChannelType_APS = 1;
                           };
                           LocalChannelType local_channel_type = 3 [json_name = "local-channel-type"];
                           enum LocalBridgeType {
                              LocalBridgeType_PERMANENT = 0;
                              LocalBridgeType_SELECTOR = 1;
                           };
                           LocalBridgeType local_bridge_type = 4 [json_name = "local-bridge-type"];
                           enum LocalSwitchType {
                              LocalSwitchType_UNIDIRECTIONAL = 0;
                              LocalSwitchType_BIDIRECTIONAL = 1;
                           };
                           LocalSwitchType local_switch_type = 5 [json_name = "local-switch-type"];
                           enum LocalApsState {
                              LocalApsState_LO = 0;
                              LocalApsState_SFP = 1;
                              LocalApsState_FS = 2;
                              LocalApsState_SF = 3;
                              LocalApsState_SDX_P = 4;
                              LocalApsState_SDX_W = 5;
                              LocalApsState_MS = 6;
                              LocalApsState_WTR = 7;
                              LocalApsState_EXER = 8;
                              LocalApsState_RR = 9;
                              LocalApsState_DNR = 10;
                              LocalApsState_NR = 11;
                           };
                           LocalApsState local_aps_state = 6 [json_name = "local-aps-state"];
                           enum LocalBridgeResult {
                              INVALID_ENUM_VALUE_LocalBridgeResult = 0;
                              LocalBridgeResult_WORKX_PATH = 1;
                              LocalBridgeResult_PROTECTX_PATH = 2;
                           };
                           LocalBridgeResult local_bridge_result = 7 [json_name = "local-bridge-result"];
                           enum LocalRequestResult {
                              INVALID_ENUM_VALUE_LocalRequestResult = 0;
                              LocalRequestResult_WORKX_PATH = 1;
                              LocalRequestResult_PROTECTX_PATH = 2;
                           };
                           LocalRequestResult local_request_result = 8 [json_name = "local-request-result"];
                           enum LocalRevertiveMode {
                              LocalRevertiveMode_NONX_REVERTIVE = 0;
                              LocalRevertiveMode_REVERTIVE = 1;
                           };
                           LocalRevertiveMode local_revertive_mode = 9 [json_name = "local-revertive-mode"];
                           enum HardwareResourceState {
                              INVALID_ENUM_VALUE_HardwareResourceState = 0;
                              HardwareResourceState_NORMAL = 1;
                              HardwareResourceState_NOTX_ENOUGH = 2;
                              HardwareResourceState_NOTX_SUPPORT = 3;
                              HardwareResourceState_OFFLINE = 4;
                           };
                           HardwareResourceState hardware_resource_state = 10 [json_name = "hardware-resource-state"];
                           enum RemoteChannelType {
                              RemoteChannelType_NONX_APS = 0;
                              RemoteChannelType_APS = 1;
                           };
                           RemoteChannelType remote_channel_type = 11 [json_name = "remote-channel-type"];
                           enum RemoteBridgeType {
                              RemoteBridgeType_PERMANENT = 0;
                              RemoteBridgeType_SELECTOR = 1;
                           };
                           RemoteBridgeType remote_bridge_type = 12 [json_name = "remote-bridge-type"];
                           enum RemoteSwitchType {
                              RemoteSwitchType_UNIDIRECTIONAL = 0;
                              RemoteSwitchType_BIDIRECTIONAL = 1;
                           };
                           RemoteSwitchType remote_switch_type = 13 [json_name = "remote-switch-type"];
                           enum RemoteApsState {
                              RemoteApsState_LO = 0;
                              RemoteApsState_SFP = 1;
                              RemoteApsState_FS = 2;
                              RemoteApsState_SF = 3;
                              RemoteApsState_SDX_P = 4;
                              RemoteApsState_SDX_W = 5;
                              RemoteApsState_MS = 6;
                              RemoteApsState_WTR = 7;
                              RemoteApsState_EXER = 8;
                              RemoteApsState_RR = 9;
                              RemoteApsState_DNR = 10;
                              RemoteApsState_NR = 11;
                           };
                           RemoteApsState remote_aps_state = 14 [json_name = "remote-aps-state"];
                           enum RemoteBridgeResult {
                              INVALID_ENUM_VALUE_RemoteBridgeResult = 0;
                              RemoteBridgeResult_WORKX_PATH = 1;
                              RemoteBridgeResult_PROTECTX_PATH = 2;
                           };
                           RemoteBridgeResult remote_bridge_result = 15 [json_name = "remote-bridge-result"];
                           enum RemoteRequestResult {
                              INVALID_ENUM_VALUE_RemoteRequestResult = 0;
                              RemoteRequestResult_WORKX_PATH = 1;
                              RemoteRequestResult_PROTECTX_PATH = 2;
                           };
                           RemoteRequestResult remote_request_result = 16 [json_name = "remote-request-result"];
                           enum RemoteRevertiveMode {
                              RemoteRevertiveMode_NONX_REVERTIVE = 0;
                              RemoteRevertiveMode_REVERTIVE = 1;
                           };
                           RemoteRevertiveMode remote_revertive_mode = 17 [json_name = "remote-revertive-mode"];
                           enum UsingSamePath {
                              UsingSamePath_DIFFERENTX_PATH = 0;
                              UsingSamePath_SAMEX_PATH = 1;
                              UsingSamePath_NOTX_COMPARE = 2;
                              UsingSamePath_EXACTLYX_SAMEX_PATH = 3;
                           };
                           UsingSamePath using_same_path = 18 [json_name = "using-same-path"];
                        }
                        ApsInfo aps_info = 9 [json_name = "aps-info"];
                     }
                     TunnelGroup tunnel_group = 4 [json_name = "tunnel-group"];
                     message Pws {
                        message Pw {
                           uint32 index = 1 [json_name = "index"];
                           string instance_name = 2 [json_name = "instance-name"];
                           enum InstanceType {
                              INVALID_ENUM_VALUE_InstanceType = 0;
                              InstanceType_VPWSX_LOCALX_CCC = 1;
                              InstanceType_VPWSX_REMOTEX_CCC = 2;
                              InstanceType_VPWSX_SVC = 3;
                              InstanceType_VPWSX_LDP = 4;
                              InstanceType_VPWSX_SWITCH = 5;
                              InstanceType_VPLS = 6;
                              InstanceType_VPWSX_BGP = 8;
                              InstanceType_VPWSX_SINGLEX_CCC = 9;
                           };
                           InstanceType instance_type = 3 [json_name = "instance-type"];
                           enum PwRole {
                              INVALID_ENUM_VALUE_PwRole = 0;
                              PwRole_PRIMARY = 1;
                              PwRole_BACKUP = 2;
                              PwRole_BYPASS = 3;
                              PwRole_LEFTX_PRIMARY = 4;
                              PwRole_RIGHTX_PRIMARY = 5;
                              PwRole_RIGHTX_BACKUP = 6;
                              PwRole_ACX_BYPASS = 7;
                              PwRole_PWX_BYPASS = 8;
                           };
                           PwRole pw_role = 4 [json_name = "pw-role"];
                           string peer_ip = 5 [json_name = "peer-ip"];
                           uint32 pw_id = 6 [json_name = "pw-id"];
                           enum EncapsulationType {
                              INVALID_ENUM_VALUE_EncapsulationType = 0;
                              EncapsulationType_FR = 1;
                              EncapsulationType_ATMX_AAL5X_SDU = 2;
                              EncapsulationType_ATMX_TRANSX_CELL = 3;
                              EncapsulationType_VLAN = 4;
                              EncapsulationType_ETHERNET = 5;
                              EncapsulationType_HDLC = 6;
                              EncapsulationType_PPP = 7;
                              EncapsulationType_CEM = 8;
                              EncapsulationType_ATMX_NTO1X_VCC = 9;
                              EncapsulationType_ATMX_NTO1X_VPC = 10;
                              EncapsulationType_IPX_LAYER2 = 11;
                              EncapsulationType_ATMX_1TO1X_VCC = 12;
                              EncapsulationType_ATMX_1TO1X_VPC = 13;
                              EncapsulationType_ATMX_AAL5X_PDU = 14;
                              EncapsulationType_FRX_PORTX_MODE = 15;
                              EncapsulationType_CEP = 16;
                              EncapsulationType_SATOPX_E1 = 17;
                              EncapsulationType_SATOPX_T1 = 18;
                              EncapsulationType_SATOPX_E3 = 19;
                              EncapsulationType_SATOPX_T3 = 20;
                              EncapsulationType_CESOPSNX_BASIC = 21;
                              EncapsulationType_TDMOIPX_AAL1 = 22;
                              EncapsulationType_CESOPSNX_TDM = 23;
                              EncapsulationType_TDMOIPX_AAL2 = 24;
                              EncapsulationType_FRX_DLCI = 25;
                              EncapsulationType_IPX_INTERWORKING = 64;
                              EncapsulationType_UNSUPPORT = 255;
                           };
                           EncapsulationType encapsulation_type = 7 [json_name = "encapsulation-type"];
                           string interface_name = 8 [json_name = "interface-name"];
                        }
                        repeated Pw pw = 1 [json_name = "pw"];
                     }
                     Pws pws = 5 [json_name = "pws"];
                     bool traffic_enable = 6 [json_name = "traffic-enable"];
                     message TunnelInterface {
                        enum OamType {
                           OamType_INVALID = 0;
                           OamType_OAM = 1;
                           OamType_TPOAM = 2;
                        };
                        OamType oam_type = 1 [json_name = "oam-type"];
                        enum AdminStatus {
                           AdminStatus_UP = 0;
                           AdminStatus_DOWN = 1;
                        };
                        AdminStatus admin_status = 2 [json_name = "admin-status"];
                        enum OperStatus {
                           OperStatus_DOWN = 0;
                           OperStatus_UP = 1;
                        };
                        OperStatus oper_status = 3 [json_name = "oper-status"];
                        uint32 tunnel_ftid = 4 [json_name = "tunnel-ftid"];
                        enum StateDescription {
                           INVALID_ENUM_VALUE_StateDescription = 0;
                           StateDescription_DOWN = 1;
                           StateDescription_UP = 3;
                           StateDescription_NONE = 14;
                        };
                        StateDescription state_description = 5 [json_name = "state-description"];
                        enum OamStatus {
                           OamStatus_NONE = 0;
                           OamStatus_UP = 1;
                           OamStatus_DOWN = 2;
                        };
                        OamStatus oam_status = 6 [json_name = "oam-status"];
                     }
                     TunnelInterface tunnel_interface = 7 [json_name = "tunnel-interface"];
                     message ReverseLspStateInfos {
                        message ReverseLspStateInfo {
                           uint32 reverse_lsp_id = 1 [json_name = "reverse-lsp-id"];
                           uint32 in_label = 2 [json_name = "in-label"];
                           string in_interface = 3 [json_name = "in-interface"];
                           enum ReverseLspStatus {
                              ReverseLspStatus_DOWN = 0;
                              ReverseLspStatus_UP = 1;
                              ReverseLspStatus_NONE = 2;
                           };
                           ReverseLspStatus reverse_lsp_status = 4 [json_name = "reverse-lsp-status"];
                        }
                        repeated ReverseLspStateInfo reverse_lsp_state_info = 1 [json_name = "reverse-lsp-state-info"];
                     }
                     ReverseLspStateInfos reverse_lsp_state_infos = 8 [json_name = "reverse-lsp-state-infos"];
                  }
                  CrStatic cr_static = 7 [json_name = "cr-static"];
                  message Mplstunnelpipe {
                     enum PipeMode {
                        INVALID_ENUM_VALUE_PipeMode = 0;
                        PipeMode_PIPE = 1;
                        PipeMode_UNIFORM = 3;
                     };
                     PipeMode pipe_mode = 1 [json_name = "pipe-mode"];
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 2 [json_name = "service-class"];
                     enum Color {
                        Color_GREEN = 0;
                        Color_YELLOW = 1;
                        Color_RED = 2;
                     };
                     Color color = 3 [json_name = "color"];
                  }
                  Mplstunnelpipe mplstunnelpipe = 8 [json_name = "mplstunnelpipe"];
                  message MplsTunnelServiceClass {
                     bool default_enable = 1 [json_name = "default-enable"];
                     bool be_enable = 2 [json_name = "be-enable"];
                     bool af1_enable = 3 [json_name = "af1-enable"];
                     bool af2_enable = 4 [json_name = "af2-enable"];
                     bool af3_enable = 5 [json_name = "af3-enable"];
                     bool af4_enable = 6 [json_name = "af4-enable"];
                     bool ef_enable = 7 [json_name = "ef-enable"];
                     bool cs6_enable = 8 [json_name = "cs6-enable"];
                     bool cs7_enable = 9 [json_name = "cs7-enable"];
                  }
                  MplsTunnelServiceClass mpls_tunnel_service_class = 9 [json_name = "mpls-tunnel-service-class"];
                  message MplsTunnelDscp {
                     bool ipv4_defalut = 1 [json_name = "ipv4-defalut"];
                     bool ipv6_defalut = 2 [json_name = "ipv6-defalut"];
                     string ipv4_dscp_value = 3 [json_name = "ipv4-dscp-value"];
                     string ipv6_dscp_value = 4 [json_name = "ipv6-dscp-value"];
                  }
                  MplsTunnelDscp mpls_tunnel_dscp = 10 [json_name = "mpls-tunnel-dscp"];
                  message Static {
                     string tunnel_description = 1 [json_name = "tunnel-description"];
                     enum StaticMode {
                        INVALID_ENUM_VALUE_StaticMode = 0;
                        StaticMode_BIDIRECTIONAL = 1;
                        StaticMode_PASSIVEX_TUNNEL = 2;
                     };
                     StaticMode static_mode = 2 [json_name = "static-mode"];
                     string binding_bidir_name = 3 [json_name = "binding-bidir-name"];
                     bool traffic_enable = 4 [json_name = "traffic-enable"];
                     bool oam_aps_enable = 5 [json_name = "oam-aps-enable"];
                     uint32 signal_degrade = 6 [json_name = "signal-degrade"];
                     uint32 signal_fail = 7 [json_name = "signal-fail"];
                     bool stackable_enable = 8 [json_name = "stackable-enable"];
                     bool bypass_enable = 9 [json_name = "bypass-enable"];
                  }
                  Static static = 11 [json_name = "static"];
               }
               TeTunnel te_tunnel = 1 [json_name = "te-tunnel"];
            }
            message Type_Gre {
               message GreTunnel {
                  message Source_IpInfo {
                     string address = 1 [json_name = "address"];
                  }
                  message Source_IfInfo {
                     string if_name = 1 [json_name = "if-name"];
                  }
                  oneof Source {
                     Source_IpInfo source_ip_info = 1 [json_name = "ip-info"];
                     Source_IfInfo source_if_info = 2 [json_name = "if-info"];
                  }
                  message Destination {
                     string vpn_name = 1 [json_name = "vpn-name"];
                     string address = 2 [json_name = "address"];
                  }
                  Destination destination = 3 [json_name = "destination"];
                  string key = 4 [json_name = "key"];
                  message KeepAliveEnable {
                     uint32 period = 1 [json_name = "period"];
                     uint32 retry_cnt = 2 [json_name = "retry-cnt"];
                  }
                  KeepAliveEnable keep_alive_enable = 5 [json_name = "keep-alive-enable"];
                  bool path_mtu_enable = 6 [json_name = "path-mtu-enable"];
                  bool statistic_enable = 7 [json_name = "statistic-enable"];
                  bool checksum_enable = 8 [json_name = "checksum-enable"];
                  bool mtu_check_enable = 9 [json_name = "mtu-check-enable"];
                  message KeepAlive {
                     uint32 send_req_cnt = 1 [json_name = "send-req-cnt"];
                     uint32 recv_rsp_cnt = 2 [json_name = "recv-rsp-cnt"];
                     uint32 recv_req_cnt = 3 [json_name = "recv-req-cnt"];
                     uint32 send_rsp_cnt = 4 [json_name = "send-rsp-cnt"];
                  }
                  KeepAlive keep_alive = 10 [json_name = "keep-alive"];
                  message UnicastForward {
                     uint32 tcp_mss = 1 [json_name = "tcp-mss"];
                  }
                  UnicastForward unicast_forward = 11 [json_name = "unicast-forward"];
                  message IcmpDetectEnable {
                     uint32 period = 1 [json_name = "period"];
                     uint32 retry_cnt = 2 [json_name = "retry-cnt"];
                  }
                  IcmpDetectEnable icmp_detect_enable = 12 [json_name = "icmp-detect-enable"];
                  message VeIfMaps {
                     message VeIfMap {
                        string ve_if_name = 1 [json_name = "ve-if-name"];
                        uint32 priority = 2 [json_name = "priority"];
                     }
                     repeated VeIfMap ve_if_map = 1 [json_name = "ve-if-map"];
                  }
                  VeIfMaps ve_if_maps = 13 [json_name = "ve-if-maps"];
               }
               GreTunnel gre_tunnel = 1 [json_name = "gre-tunnel"];
            }
            message Type_Gre6 {
               message Gre6Tunnel {
                  message Source_IpInfo {
                     string address = 1 [json_name = "address"];
                  }
                  message Source_IfInfo {
                     string if_name = 1 [json_name = "if-name"];
                  }
                  oneof Source {
                     Source_IpInfo source_ip_info = 1 [json_name = "ip-info"];
                     Source_IfInfo source_if_info = 2 [json_name = "if-info"];
                  }
                  message Destination {
                     string vpn_name = 1 [json_name = "vpn-name"];
                     string address = 2 [json_name = "address"];
                  }
                  Destination destination = 3 [json_name = "destination"];
               }
               Gre6Tunnel gre6_tunnel = 1 [json_name = "gre6-tunnel"];
            }
            message Type_P2MpGre {
               message MgreTunnel {
                  message Source_IpInfo {
                     string address = 1 [json_name = "address"];
                  }
                  message Source_IfInfo {
                     string if_name = 1 [json_name = "if-name"];
                  }
                  oneof Source {
                     Source_IpInfo source_ip_info = 1 [json_name = "ip-info"];
                     Source_IfInfo source_if_info = 2 [json_name = "if-info"];
                  }
                  string key = 3 [json_name = "key"];
               }
               MgreTunnel mgre_tunnel = 1 [json_name = "mgre-tunnel"];
               message DsvpnNhrp {
                  message Property {
                     enum Scenario {
                        Scenario_HUB = 0;
                        Scenario_SPOKE = 1;
                        Scenario_HUBX_SPOKE = 2;
                     };
                     Scenario scenario = 1 [json_name = "scenario"];
                     uint32 network_id = 2 [json_name = "network-id"];
                     bool register_unique = 3 [json_name = "register-unique"];
                     uint32 register_interval = 4 [json_name = "register-interval"];
                     uint32 hold_time = 5 [json_name = "hold-time"];
                     bool short_cut = 6 [json_name = "short-cut"];
                     bool redirect = 7 [json_name = "redirect"];
                     bool multicast_dynamic = 8 [json_name = "multicast-dynamic"];
                     bool dynamic_entry_track_hub_entry = 9 [json_name = "dynamic-entry-track-hub-entry"];
                     message Authentication {
                        string text = 1 [json_name = "text"];
                        enum Algorithm {
                           INVALID_ENUM_VALUE_Algorithm = 0;
                           Algorithm_SHA2X_256 = 2;
                           Algorithm_SHA2X_384 = 3;
                           Algorithm_SHA2X_512 = 4;
                        };
                        Algorithm algorithm = 2 [json_name = "algorithm"];
                     }
                     Authentication authentication = 10 [json_name = "authentication"];
                  }
                  Property property = 1 [json_name = "property"];
                  message Entrys {
                     message Entry {
                        string protocol_addr = 1 [json_name = "protocol-addr"];
                        string nbma_addr = 2 [json_name = "nbma-addr"];
                        bool register = 3 [json_name = "register"];
                        uint32 preference = 4 [json_name = "preference"];
                     }
                     repeated Entry entry = 1 [json_name = "entry"];
                  }
                  Entrys entrys = 2 [json_name = "entrys"];
                  message Statistics {
                     uint32 reg_req_send_success = 1 [json_name = "reg-req-send-success"];
                     uint32 reg_req_send_fail = 2 [json_name = "reg-req-send-fail"];
                     uint32 reg_req_correct_receive = 3 [json_name = "reg-req-correct-receive"];
                     uint32 reg_req_error_receive = 4 [json_name = "reg-req-error-receive"];
                     uint32 reg_req_transfer = 5 [json_name = "reg-req-transfer"];
                     uint32 reg_reply_send_success = 6 [json_name = "reg-reply-send-success"];
                     uint32 reg_reply_send_fail = 7 [json_name = "reg-reply-send-fail"];
                     uint32 reg_reply_correct_receive = 8 [json_name = "reg-reply-correct-receive"];
                     uint32 reg_reply_error_receive = 9 [json_name = "reg-reply-error-receive"];
                     uint32 reg_reply_transfer = 10 [json_name = "reg-reply-transfer"];
                     uint32 res_req_send_success = 11 [json_name = "res-req-send-success"];
                     uint32 res_req_send_fail = 12 [json_name = "res-req-send-fail"];
                     uint32 res_req_correct_receive = 13 [json_name = "res-req-correct-receive"];
                     uint32 res_req_error_receive = 14 [json_name = "res-req-error-receive"];
                     uint32 res_req_transfer = 15 [json_name = "res-req-transfer"];
                     uint32 res_reply_send_success = 16 [json_name = "res-reply-send-success"];
                     uint32 res_reply_send_fail = 17 [json_name = "res-reply-send-fail"];
                     uint32 res_reply_correct_receive = 18 [json_name = "res-reply-correct-receive"];
                     uint32 res_reply_error_receive = 19 [json_name = "res-reply-error-receive"];
                     uint32 res_reply_transfer = 20 [json_name = "res-reply-transfer"];
                     uint32 pur_req_send_success = 21 [json_name = "pur-req-send-success"];
                     uint32 pur_req_send_fail = 22 [json_name = "pur-req-send-fail"];
                     uint32 pur_req_correct_receive = 23 [json_name = "pur-req-correct-receive"];
                     uint32 pur_req_error_receive = 24 [json_name = "pur-req-error-receive"];
                     uint32 pur_req_transfer = 25 [json_name = "pur-req-transfer"];
                     uint32 pur_reply_send_success = 26 [json_name = "pur-reply-send-success"];
                     uint32 pur_reply_send_fail = 27 [json_name = "pur-reply-send-fail"];
                     uint32 pur_reply_correct_receive = 28 [json_name = "pur-reply-correct-receive"];
                     uint32 pur_reply_error_receive = 29 [json_name = "pur-reply-error-receive"];
                     uint32 pur_reply_transfer = 30 [json_name = "pur-reply-transfer"];
                     uint32 redirect_send_success = 31 [json_name = "redirect-send-success"];
                     uint32 redirect_send_fail = 32 [json_name = "redirect-send-fail"];
                     uint32 redirect_correct_receive = 33 [json_name = "redirect-correct-receive"];
                     uint32 redirect_error_receive = 34 [json_name = "redirect-error-receive"];
                     uint32 redirect_transfer = 35 [json_name = "redirect-transfer"];
                     uint32 err_indi_send_success = 36 [json_name = "err-indi-send-success"];
                     uint32 err_indi_send_fail = 37 [json_name = "err-indi-send-fail"];
                     uint32 err_indi_correct_receive = 38 [json_name = "err-indi-correct-receive"];
                     uint32 err_indi_error_receive = 39 [json_name = "err-indi-error-receive"];
                     uint32 err_indi_transfer = 40 [json_name = "err-indi-transfer"];
                     uint32 authen_fail = 41 [json_name = "authen-fail"];
                     uint32 loop_detect_fail = 42 [json_name = "loop-detect-fail"];
                  }
                  Statistics statistics = 3 [json_name = "statistics"];
               }
               DsvpnNhrp dsvpn_nhrp = 2 [json_name = "dsvpn-nhrp"];
            }
            message Type_Ipip6Over4 {
               message Ipip6Over4Tunnel {
                  message Source_Address {
                     string source_address = 1 [json_name = "source-address"];
                  }
                  message Source_Interface7 {
                     string source_ifname = 1 [json_name = "source-ifname"];
                  }
                  oneof Source {
                     Source_Address source_address = 1 [json_name = "address"];
                     Source_Interface7 source_interface7 = 2 [json_name = "interface"];
                  }
                  message Destination_Ip {
                     string destination_address = 1 [json_name = "destination-address"];
                  }
                  oneof Destination {
                     Destination_Ip destination_ip = 3 [json_name = "ip"];
                  }
               }
               Ipip6Over4Tunnel ipip_6over4_tunnel = 1 [json_name = "ipip-6over4-tunnel"];
            }
            message Type_Ipip6To4 {
               message Ipip6To4Tunnel {
                  message Source_Address {
                     string source_address = 1 [json_name = "source-address"];
                  }
                  message Source_Interface7 {
                     string source_ifname = 1 [json_name = "source-ifname"];
                  }
                  oneof Source {
                     Source_Address source_address = 1 [json_name = "address"];
                     Source_Interface7 source_interface7 = 2 [json_name = "interface"];
                  }
               }
               Ipip6To4Tunnel ipip_6to4_tunnel = 1 [json_name = "ipip-6to4-tunnel"];
            }
            message Type_Ipip6Rd {
               message Ipip6RdTunnel {
                  message Source_Address {
                     string source_address = 1 [json_name = "source-address"];
                  }
                  message Source_Interface7 {
                     string source_ifname = 1 [json_name = "source-ifname"];
                  }
                  oneof Source {
                     Source_Address source_address = 1 [json_name = "address"];
                     Source_Interface7 source_interface7 = 2 [json_name = "interface"];
                  }
                  string ipv6_prefix = 3 [json_name = "ipv6-prefix"];
                  uint32 ipv6_prefix_length = 4 [json_name = "ipv6-prefix-length"];
                  uint32 ipv4_prefix_length = 5 [json_name = "ipv4-prefix-length"];
                  string border_relay_ipv4_address = 6 [json_name = "border-relay-ipv4-address"];
               }
               Ipip6RdTunnel ipip_6rd_tunnel = 1 [json_name = "ipip-6rd-tunnel"];
            }
            message Type_Ipip4Over6 {
               message Ipip4Over6Tunnel {
                  message Source_Address {
                     string source_address = 1 [json_name = "source-address"];
                  }
                  message Source_Interface7 {
                     string source_ifname = 1 [json_name = "source-ifname"];
                  }
                  oneof Source {
                     Source_Address source_address = 1 [json_name = "address"];
                     Source_Interface7 source_interface7 = 2 [json_name = "interface"];
                  }
                  message Destination_Ip {
                     string destination_address = 1 [json_name = "destination-address"];
                     string dest_vrf_name = 2 [json_name = "dest-vrf-name"];
                  }
                  message Destination_Domain {
                     string domain_name = 1 [json_name = "domain-name"];
                     string domain_vrf_name = 2 [json_name = "domain-vrf-name"];
                  }
                  oneof Destination {
                     Destination_Ip destination_ip = 3 [json_name = "ip"];
                     Destination_Domain destination_domain = 4 [json_name = "domain"];
                  }
                  uint32 encapsulation_limit = 5 [json_name = "encapsulation-limit"];
                  uint32 flow_label = 6 [json_name = "flow-label"];
                  uint32 hop_limit = 7 [json_name = "hop-limit"];
                  uint32 traffic_class = 8 [json_name = "traffic-class"];
               }
               Ipip4Over6Tunnel ipip_4over6_tunnel = 1 [json_name = "ipip-4over6-tunnel"];
            }
            message Type_SdWanTunnel {
               message SdWanTunnel6 {
                  bool service_enable = 1 [json_name = "service-enable"];
               }
               SdWanTunnel6 sd_wan_tunnel = 1 [json_name = "sd-wan-tunnel"];
            }
            message Type_IpsecTunnel {
               message IpsecTunnel6 {
                  bool enable = 1 [json_name = "enable"];
               }
               IpsecTunnel6 ipsec_tunnel = 1 [json_name = "ipsec-tunnel"];
            }
            message Type_ServiceLink {
               message ServiceLink6 {
                  string source_interface = 1 [json_name = "source-interface"];
               }
               ServiceLink6 service_link = 1 [json_name = "service-link"];
            }
            oneof Type {
               Type_MplsTe type_mpls_te = 1 [json_name = "mpls-te"];
               Type_Gre type_gre = 2 [json_name = "gre"];
               Type_Gre6 type_gre6 = 3 [json_name = "gre6"];
               Type_P2MpGre type_p2mp_gre = 4 [json_name = "p2mp-gre"];
               Type_Ipip6Over4 type_ipip_6over4 = 5 [json_name = "ipip-6over4"];
               Type_Ipip6To4 type_ipip_6to4 = 6 [json_name = "ipip-6to4"];
               Type_Ipip6Rd type_ipip_6rd = 7 [json_name = "ipip-6rd"];
               Type_Ipip4Over6 type_ipip_4over6 = 8 [json_name = "ipip-4over6"];
               Type_SdWanTunnel type_sd_wan_tunnel = 9 [json_name = "sd-wan-tunnel"];
               Type_IpsecTunnel type_ipsec_tunnel = 10 [json_name = "ipsec-tunnel"];
               Type_ServiceLink type_service_link = 11 [json_name = "service-link"];
            }
         }
         TunnelProtocol tunnel_protocol = 39 [json_name = "tunnel-protocol"];
         message VlanifAttribute {
            uint32 damping_time = 1 [json_name = "damping-time"];
            message BandWidthType_BandWidthMbps {
               uint32 band_width = 1 [json_name = "band-width"];
            }
            message BandWidthType_BandWidthKbps {
               uint32 band_width_kbps = 1 [json_name = "band-width-kbps"];
            }
            oneof BandWidthType {
               BandWidthType_BandWidthMbps band_width_type_band_width_mbps = 2 [json_name = "band-width-mbps"];
               BandWidthType_BandWidthKbps band_width_type_band_width_kbps = 3 [json_name = "band-width-kbps"];
            }
         }
         VlanifAttribute vlanif_attribute = 40 [json_name = "vlanif-attribute"];
         message Ipv4 {
            message State {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     string mask = 2 [json_name = "mask"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_UNNUMBER = 2;
                        Type_NEG = 4;
                        Type_SUB = 32;
                        Type_DHCP = 256;
                     };
                     Type type = 3 [json_name = "type"];
                     bool is_block = 4 [json_name = "is-block"];
                     uint32 tag = 5 [json_name = "tag"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
               message Gateways {
                  message Gateway {
                     string gateway = 1 [json_name = "gateway"];
                     string gateway8 = 2 [json_name = "gateway"];
                  }
                  repeated Gateway gateway = 1 [json_name = "gateway"];
               }
               Gateways gateways = 2 [json_name = "gateways"];
               message Statistics {
                  uint64 in_receives = 1 [json_name = "in-receives"];
                  uint64 in_octets = 2 [json_name = "in-octets"];
                  uint64 in_rate_pkts = 3 [json_name = "in-rate-pkts"];
                  uint64 in_rate_bits = 4 [json_name = "in-rate-bits"];
                  string in_rate_byte_bandwidth_usage = 5 [json_name = "in-rate-byte-bandwidth-usage"];
                  uint64 in_ucast_pkts = 6 [json_name = "in-ucast-pkts"];
                  uint64 in_ucast_octets = 7 [json_name = "in-ucast-octets"];
                  uint64 in_mcast_pkts = 8 [json_name = "in-mcast-pkts"];
                  uint64 in_mcast_octets = 9 [json_name = "in-mcast-octets"];
                  uint64 in_bcast_pkts = 10 [json_name = "in-bcast-pkts"];
                  uint64 in_bcast_octets = 11 [json_name = "in-bcast-octets"];
                  uint64 out_ucast_pkts = 12 [json_name = "out-ucast-pkts"];
                  uint64 out_ucast_octets = 13 [json_name = "out-ucast-octets"];
                  uint64 out_mcast_pkts = 14 [json_name = "out-mcast-pkts"];
                  uint64 out_mcast_octets = 15 [json_name = "out-mcast-octets"];
                  uint64 out_bcast_pkts = 16 [json_name = "out-bcast-pkts"];
                  uint64 out_bcast_octets = 17 [json_name = "out-bcast-octets"];
                  uint64 out_rate_pkts = 18 [json_name = "out-rate-pkts"];
                  uint64 out_rate_bits = 19 [json_name = "out-rate-bits"];
                  string out_rate_byte_bandwidth_usage = 20 [json_name = "out-rate-byte-bandwidth-usage"];
                  uint64 out_transmits = 21 [json_name = "out-transmits"];
                  uint64 out_octets = 22 [json_name = "out-octets"];
                  uint64 out_frag_requires = 23 [json_name = "out-frag-requires"];
                  uint32 out_frag_fails = 24 [json_name = "out-frag-fails"];
                  uint64 out_frag_oks = 25 [json_name = "out-frag-oks"];
                  uint64 out_frag_creates = 26 [json_name = "out-frag-creates"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            State state = 1 [json_name = "state"];
            message StaticArps {
               message StaticArp {
                  string ip_addr = 1 [json_name = "ip-addr"];
                  string mac_addr = 2 [json_name = "mac-addr"];
                  uint32 pevid = 3 [json_name = "pevid"];
                  uint32 cevid = 4 [json_name = "cevid"];
               }
               repeated StaticArp static_arp = 1 [json_name = "static-arp"];
            }
            StaticArps static_arps = 2 [json_name = "static-arps"];
            message Vrrp {
               message Groups {
                  message Group {
                     uint32 id = 1 [json_name = "id"];
                     uint32 priority = 2 [json_name = "priority"];
                     message Preempt {
                        bool preempt_enable = 1 [json_name = "preempt-enable"];
                        uint32 delay_time = 2 [json_name = "delay-time"];
                     }
                     Preempt preempt = 3 [json_name = "preempt"];
                     uint32 adver_interval = 4 [json_name = "adver-interval"];
                     enum AuthenticationMode {
                        AuthenticationMode_NONE = 0;
                        AuthenticationMode_SIMPLE = 1;
                        AuthenticationMode_MD5 = 2;
                        AuthenticationMode_HMACX_SHA256 = 3;
                     };
                     AuthenticationMode authentication_mode = 5 [json_name = "authentication-mode"];
                     bool isplain = 6 [json_name = "isplain"];
                     string authentication_key = 7 [json_name = "authentication-key"];
                     uint32 link_bfddown_num = 8 [json_name = "link-bfddown-num"];
                     uint32 hold_multiper = 9 [json_name = "hold-multiper"];
                     bool backup_forward = 10 [json_name = "backup-forward"];
                     bool fast_resume = 11 [json_name = "fast-resume"];
                     enum V3Sendmode {
                        V3Sendmode_V3X_ONLY = 0;
                        V3Sendmode_V2V3X_BOTH = 1;
                        V3Sendmode_V2X_ONLY = 2;
                     };
                     V3Sendmode v3_sendmode = 12 [json_name = "v3-sendmode"];
                     enum Type {
                        Type_NORMAL = 0;
                        Type_ADMIN = 1;
                        Type_MEMBER = 2;
                        Type_LBRG = 3;
                        Type_LBRGX_MEM = 4;
                        Type_MEMX_LBRG = 5;
                        Type_MEMX_LBRGX_MEM = 6;
                        Type_UNICAST = 7;
                     };
                     Type type = 13 [json_name = "type"];
                     enum State {
                        State_INITIALIZE = 0;
                        State_BACKUP = 1;
                        State_MASTER = 2;
                     };
                     State state = 14 [json_name = "state"];
                     string create_time = 15 [json_name = "create-time"];
                     string last_change_time = 16 [json_name = "last-change-time"];
                     message VirtualIps {
                        message VirtualIp {
                           string address = 1 [json_name = "address"];
                           string mask = 2 [json_name = "mask"];
                           enum VgmpRole {
                              INVALID_ENUM_VALUE_VgmpRole = 0;
                              VgmpRole_ACTIVE = 1;
                              VgmpRole_STANDBY = 2;
                           };
                           VgmpRole vgmp_role = 3 [json_name = "vgmp-role"];
                           bool extend_flag = 4 [json_name = "extend-flag"];
                        }
                        repeated VirtualIp virtual_ip = 1 [json_name = "virtual-ip"];
                     }
                     VirtualIps virtual_ips = 17 [json_name = "virtual-ips"];
                     message TrackInterfaces {
                        message TrackInterface {
                           string if_name = 1 [json_name = "if-name"];
                           uint32 priority_change = 2 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 3 [json_name = "track-mode"];
                        }
                        repeated TrackInterface track_interface = 1 [json_name = "track-interface"];
                     }
                     TrackInterfaces track_interfaces = 18 [json_name = "track-interfaces"];
                     message TrackBfds {
                        message TrackBfd {
                           string session_name = 1 [json_name = "session-name"];
                           enum SessionType {
                              SessionType_NORMAL = 0;
                              SessionType_LINK = 1;
                              SessionType_PEER = 2;
                           };
                           SessionType session_type = 2 [json_name = "session-type"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                           uint32 session_id = 5 [json_name = "session-id"];
                           enum SessionState {
                              SessionState_DOWN = 0;
                              SessionState_UP = 1;
                              SessionState_ADMINX_DOWN = 2;
                              SessionState_UNKNOW = 3;
                           };
                           SessionState session_state = 6 [json_name = "session-state"];
                        }
                        repeated TrackBfd track_bfd = 1 [json_name = "track-bfd"];
                     }
                     TrackBfds track_bfds = 19 [json_name = "track-bfds"];
                     message TrackMtgrps {
                        message TrackMtgrp {
                           string monitor_group_name = 1 [json_name = "monitor-group-name"];
                           uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_LINK = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                        }
                        repeated TrackMtgrp track_mtgrp = 1 [json_name = "track-mtgrp"];
                     }
                     TrackMtgrps track_mtgrps = 20 [json_name = "track-mtgrps"];
                     message TrackNqas {
                        message TrackNqa {
                           string admin_name = 1 [json_name = "admin-name"];
                           string test_name = 2 [json_name = "test-name"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                        }
                        repeated TrackNqa track_nqa = 1 [json_name = "track-nqa"];
                     }
                     TrackNqas track_nqas = 21 [json_name = "track-nqas"];
                     message TrackIpRoutes {
                        message TrackIpRoute {
                           string vpn_name = 1 [json_name = "vpn-name"];
                           string ip_address = 2 [json_name = "ip-address"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           uint32 priority_change = 4 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 5 [json_name = "track-mode"];
                        }
                        repeated TrackIpRoute track_ip_route = 1 [json_name = "track-ip-route"];
                     }
                     TrackIpRoutes track_ip_routes = 22 [json_name = "track-ip-routes"];
                     message VrrpType_MemberVrrp {
                        uint32 admin_id = 1 [json_name = "admin-id"];
                        string admin_if_name = 2 [json_name = "admin-if-name"];
                        bool unflowdown = 3 [json_name = "unflowdown"];
                        message MemberLoadBalance_MemLbrg {
                           bool memlbrg_vrrp = 1 [json_name = "memlbrg-vrrp"];
                        }
                        message MemberLoadBalance_MemLbrgMem {
                           uint32 memlbrg_vrrpid = 1 [json_name = "memlbrg-vrrpid"];
                        }
                        oneof MemberLoadBalance {
                           MemberLoadBalance_MemLbrg member_load_balance_mem_lbrg = 4 [json_name = "mem-lbrg"];
                           MemberLoadBalance_MemLbrgMem member_load_balance_mem_lbrg_mem = 5 [json_name = "mem-lbrg-mem"];
                        }
                        bool arp_copy_to_member = 6 [json_name = "arp-copy-to-member"];
                     }
                     message VrrpType_AdminVrrp {
                        bool admin_flag = 1 [json_name = "admin-flag"];
                        bool admin_ignore_ifdown = 2 [json_name = "admin-ignore-ifdown"];
                        uint32 init_state_holdtime = 3 [json_name = "init-state-holdtime"];
                     }
                     message VrrpType_Lbrg {
                        bool lbrg_vrrp = 1 [json_name = "lbrg-vrrp"];
                     }
                     message VrrpType_LbrgMem {
                        uint32 lbrg_vrrpid = 1 [json_name = "lbrg-vrrpid"];
                     }
                     message VrrpType_Unicast {
                        string peer_addr = 1 [json_name = "peer-addr"];
                        string source_addr = 2 [json_name = "source-addr"];
                        uint32 unicast_adver_interval = 3 [json_name = "unicast-adver-interval"];
                     }
                     oneof VrrpType {
                        VrrpType_MemberVrrp vrrp_type_member_vrrp = 23 [json_name = "member-vrrp"];
                        VrrpType_AdminVrrp vrrp_type_admin_vrrp = 24 [json_name = "admin-vrrp"];
                        VrrpType_Lbrg vrrp_type_lbrg = 33 [json_name = "lbrg"];
                        VrrpType_LbrgMem vrrp_type_lbrg_mem = 34 [json_name = "lbrg-mem"];
                        VrrpType_Unicast vrrp_type_unicast = 35 [json_name = "unicast"];
                     }
                     string virtual_mac = 25 [json_name = "virtual-mac"];
                     uint32 run_priority = 26 [json_name = "run-priority"];
                     uint32 master_priority = 27 [json_name = "master-priority"];
                     message Track3Ahs {
                        message Track3Ah {
                           string track_if_name = 1 [json_name = "track-if-name"];
                        }
                        repeated Track3Ah track_3ah = 1 [json_name = "track-3ah"];
                     }
                     Track3Ahs track_3ahs = 28 [json_name = "track-3ahs"];
                     string ni_name = 29 [json_name = "ni-name"];
                     uint32 efm_down_num = 30 [json_name = "efm-down-num"];
                     uint32 mcspid = 31 [json_name = "mcspid"];
                     uint32 backup_id = 32 [json_name = "backup-id"];
                     uint32 remain_time = 36 [json_name = "remain-time"];
                     string master_ip = 37 [json_name = "master-ip"];
                     string local_if_ip = 38 [json_name = "local-if-ip"];
                     message TrackRmtgrps {
                        message TrackRmtgrp {
                           string rmtgrp_name = 1 [json_name = "rmtgrp-name"];
                           uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_LINK = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                        }
                        repeated TrackRmtgrp track_rmtgrp = 1 [json_name = "track-rmtgrp"];
                     }
                     TrackRmtgrps track_rmtgrps = 39 [json_name = "track-rmtgrps"];
                     message MemberVrrps {
                        message MemberVrrp {
                           uint32 vrrpid = 1 [json_name = "vrrpid"];
                           string if_name = 2 [json_name = "if-name"];
                           enum State {
                              State_INITIALIZE = 0;
                              State_BACKUP = 1;
                              State_MASTER = 2;
                           };
                           State state = 3 [json_name = "state"];
                        }
                        repeated MemberVrrp member_vrrp = 1 [json_name = "member-vrrp"];
                     }
                     MemberVrrps member_vrrps = 40 [json_name = "member-vrrps"];
                     message LbrgMemberVrrps {
                        message LbrgMemberVrrp {
                           uint32 vrrpid = 1 [json_name = "vrrpid"];
                           enum State {
                              State_INITIALIZE = 0;
                              State_BACKUP = 1;
                              State_MASTER = 2;
                           };
                           State state = 2 [json_name = "state"];
                        }
                        repeated LbrgMemberVrrp lbrg_member_vrrp = 1 [json_name = "lbrg-member-vrrp"];
                     }
                     LbrgMemberVrrps lbrg_member_vrrps = 41 [json_name = "lbrg-member-vrrps"];
                     message StateChanges {
                        message StateChange {
                           uint32 index = 1 [json_name = "index"];
                           string change_time = 2 [json_name = "change-time"];
                           enum SourceState {
                              SourceState_MASTER = 0;
                              SourceState_BACKUP = 1;
                              SourceState_INITIALIZE = 2;
                           };
                           SourceState source_state = 3 [json_name = "source-state"];
                           enum DestState {
                              DestState_MASTER = 0;
                              DestState_BACKUP = 1;
                              DestState_INITIALIZE = 2;
                           };
                           DestState dest_state = 4 [json_name = "dest-state"];
                           string change_reason = 5 [json_name = "change-reason"];
                        }
                        repeated StateChange state_change = 1 [json_name = "state-change"];
                     }
                     StateChanges state_changes = 42 [json_name = "state-changes"];
                     message Statistics {
                        uint32 change_master_num = 1 [json_name = "change-master-num"];
                        uint32 send_packets_num = 2 [json_name = "send-packets-num"];
                        uint32 receive_packets_num = 3 [json_name = "receive-packets-num"];
                        uint32 adver_diff_num = 4 [json_name = "adver-diff-num"];
                        uint32 authentication_failures = 5 [json_name = "authentication-failures"];
                        uint32 ip_ttl_errors = 6 [json_name = "ip-ttl-errors"];
                        uint32 receive_priority_zero = 7 [json_name = "receive-priority-zero"];
                        uint32 send_priority_zero = 8 [json_name = "send-priority-zero"];
                        uint32 invalid_type_packets = 9 [json_name = "invalid-type-packets"];
                        uint32 address_list_errs = 10 [json_name = "address-list-errs"];
                        uint32 invalid_authen_type = 11 [json_name = "invalid-authen-type"];
                        uint32 authen_type_num = 12 [json_name = "authen-type-num"];
                        uint32 receive_length_num = 13 [json_name = "receive-length-num"];
                        uint32 receive_self_num = 14 [json_name = "receive-self-num"];
                        uint32 send_timeerr_num = 15 [json_name = "send-timeerr-num"];
                        uint32 receive_timeerr_num = 16 [json_name = "receive-timeerr-num"];
                        uint32 send_reply_num = 17 [json_name = "send-reply-num"];
                        uint32 receive_reply_num = 18 [json_name = "receive-reply-num"];
                        uint32 receive_attack_num = 19 [json_name = "receive-attack-num"];
                        uint32 receive_faillearn_num = 20 [json_name = "receive-faillearn-num"];
                     }
                     Statistics statistics = 43 [json_name = "statistics"];
                     message TrackIpsecInsts {
                        message TrackIpsecInst {
                           uint32 ipsec_inst_id = 1 [json_name = "ipsec-inst-id"];
                           uint32 reduced_pri = 2 [json_name = "reduced-pri"];
                        }
                        repeated TrackIpsecInst track_ipsec_inst = 1 [json_name = "track-ipsec-inst"];
                     }
                     TrackIpsecInsts track_ipsec_insts = 44 [json_name = "track-ipsec-insts"];
                  }
                  repeated Group group = 1 [json_name = "group"];
               }
               Groups groups = 1 [json_name = "groups"];
            }
            Vrrp vrrp = 3 [json_name = "vrrp"];
            message Rgm {
               message TrackRtmtg {
                  string name = 1 [json_name = "name"];
                  uint32 down_weight = 2 [json_name = "down-weight"];
               }
               TrackRtmtg track_rtmtg = 1 [json_name = "track-rtmtg"];
               message RgmTrack_TrackVrrp {
                  message TrackVrrp7 {
                     uint32 vrrp_id = 1 [json_name = "vrrp-id"];
                     uint32 cost_change = 2 [json_name = "cost-change"];
                  }
                  TrackVrrp7 track_vrrp = 1 [json_name = "track-vrrp"];
               }
               message RgmTrack_TrackPw {
                  message TrackPw7 {
                     uint32 cost_change = 1 [json_name = "cost-change"];
                  }
                  TrackPw7 track_pw = 1 [json_name = "track-pw"];
               }
               message RgmTrack_AdvertiseDelay {
                  message AdvertiseDelay7 {
                     uint32 cost_change = 1 [json_name = "cost-change"];
                     uint32 time_delay = 2 [json_name = "time-delay"];
                  }
                  AdvertiseDelay7 advertise_delay = 1 [json_name = "advertise-delay"];
               }
               oneof RgmTrack {
                  RgmTrack_TrackVrrp rgm_track_track_vrrp = 2 [json_name = "track-vrrp"];
                  RgmTrack_TrackPw rgm_track_track_pw = 3 [json_name = "track-pw"];
                  RgmTrack_AdvertiseDelay rgm_track_advertise_delay = 4 [json_name = "advertise-delay"];
               }
               message TrackTrunk {
                  string if_name = 1 [json_name = "if-name"];
                  uint32 cost_change = 2 [json_name = "cost-change"];
               }
               TrackTrunk track_trunk = 5 [json_name = "track-trunk"];
               message TrackLoopbackVrrp {
                  uint32 vrrp_id = 1 [json_name = "vrrp-id"];
                  string if_name = 2 [json_name = "if-name"];
                  uint32 cost_change = 3 [json_name = "cost-change"];
               }
               TrackLoopbackVrrp track_loopback_vrrp = 6 [json_name = "track-loopback-vrrp"];
               message TrackVirtualAccess {
                  uint32 cost_change = 1 [json_name = "cost-change"];
               }
               TrackVirtualAccess track_virtual_access = 7 [json_name = "track-virtual-access"];
            }
            Rgm rgm = 4 [json_name = "rgm"];
            message Address_CommonAddress {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     string mask = 2 [json_name = "mask"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_SUB = 32;
                     };
                     Type type = 3 [json_name = "type"];
                     uint32 tag = 4 [json_name = "tag"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
            }
            message Address_UnnumberedAddress {
               message UnnumberedAddress6 {
                  string unnumbered_if_name = 1 [json_name = "unnumbered-if-name"];
               }
               UnnumberedAddress6 unnumbered_address = 1 [json_name = "unnumbered-address"];
            }
            message Address_NegotiateAddress {
               message NegotiationAddress {
                  enum NegotiationType {
                     NegotiationType_PPPX_NEGOTIATE = 0;
                  };
                  NegotiationType negotiation_type = 1 [json_name = "negotiation-type"];
               }
               NegotiationAddress negotiation_address = 1 [json_name = "negotiation-address"];
            }
            oneof Address {
               Address_CommonAddress address_common_address = 5 [json_name = "common-address"];
               Address_UnnumberedAddress address_unnumbered_address = 6 [json_name = "unnumbered-address"];
               Address_NegotiateAddress address_negotiate_address = 7 [json_name = "negotiate-address"];
            }
         }
         Ipv4 ipv4 = 41 [json_name = "ipv4"];
         message Ipv6 {
            uint32 mtu6 = 1 [json_name = "mtu6"];
            bool spread_mtu_flag = 2 [json_name = "spread-mtu-flag"];
            bool auto_link_local = 3 [json_name = "auto-link-local"];
            message NdPrefixs {
               message NdPrefix {
                  string prefix = 1 [json_name = "prefix"];
                  int32 prefix_len = 2 [json_name = "prefix-len"];
                  uint32 valid_lifetime = 3 [json_name = "valid-lifetime"];
                  uint32 preferred_lifetime = 4 [json_name = "preferred-lifetime"];
                  bool auto_flag = 5 [json_name = "auto-flag"];
                  bool on_link_flag = 6 [json_name = "on-link-flag"];
               }
               repeated NdPrefix nd_prefix = 1 [json_name = "nd-prefix"];
            }
            NdPrefixs nd_prefixs = 4 [json_name = "nd-prefixs"];
            message State {
               uint32 mtu6 = 1 [json_name = "mtu6"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_AUTOX_LINKX_LOCAL = 3;
                        Type_ANYCAST = 6;
                        Type_DHCP = 10;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                     uint32 collision_count = 5 [json_name = "collision-count"];
                     bool is_block = 6 [json_name = "is-block"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_PREFERRED = 1;
                        Status_INACCESSIBLE = 4;
                        Status_UNKNOWN = 5;
                        Status_TENTATIVE = 6;
                        Status_DUPLICATE = 7;
                     };
                     Status status = 7 [json_name = "status"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
               message Statistics {
                  uint64 in_receives = 1 [json_name = "in-receives"];
                  uint64 in_octets = 2 [json_name = "in-octets"];
                  uint64 in_rate_pkts = 3 [json_name = "in-rate-pkts"];
                  uint64 in_rate_bits = 4 [json_name = "in-rate-bits"];
                  string in_rate_byte_bandwidth_usage = 5 [json_name = "in-rate-byte-bandwidth-usage"];
                  uint64 in_ucast_pkts = 6 [json_name = "in-ucast-pkts"];
                  uint64 in_ucast_octets = 7 [json_name = "in-ucast-octets"];
                  uint64 in_mcast_pkts = 8 [json_name = "in-mcast-pkts"];
                  uint64 in_mcast_octets = 9 [json_name = "in-mcast-octets"];
                  uint64 out_ucast_pkts = 10 [json_name = "out-ucast-pkts"];
                  uint64 out_ucast_octets = 11 [json_name = "out-ucast-octets"];
                  uint64 out_mcast_pkts = 12 [json_name = "out-mcast-pkts"];
                  uint64 out_mcast_octets = 13 [json_name = "out-mcast-octets"];
                  uint64 out_rate_pkts = 14 [json_name = "out-rate-pkts"];
                  uint64 out_rate_bits = 15 [json_name = "out-rate-bits"];
                  string out_rate_byte_bandwidth_usage = 16 [json_name = "out-rate-byte-bandwidth-usage"];
                  uint64 out_transmits = 17 [json_name = "out-transmits"];
                  uint64 out_octets = 18 [json_name = "out-octets"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            State state = 5 [json_name = "state"];
            message Cgas {
               message Cga {
                  string rsakey_pair = 1 [json_name = "rsakey-pair"];
                  uint32 sec_level = 2 [json_name = "sec-level"];
                  string modifier = 3 [json_name = "modifier"];
               }
               repeated Cga cga = 1 [json_name = "cga"];
            }
            Cgas cgas = 6 [json_name = "cgas"];
            message NdCollection {
               message IfProperty {
                  uint32 retrans_timer = 1 [json_name = "retrans-timer"];
                  uint32 nud_reach_time = 2 [json_name = "nud-reach-time"];
                  uint32 attempts_value = 3 [json_name = "attempts-value"];
                  enum NsMcastFlag {
                     NsMcastFlag_OFF = 0;
                     NsMcastFlag_ON = 1;
                  };
                  NsMcastFlag ns_mcast_flag = 4 [json_name = "ns-mcast-flag"];
                  uint64 max_dyn_nb_num = 5 [json_name = "max-dyn-nb-num"];
                  uint32 dad_timeout = 6 [json_name = "dad-timeout"];
                  uint32 nud_attempts = 7 [json_name = "nud-attempts"];
                  enum NaGlean {
                     NaGlean_OFF = 0;
                     NaGlean_ON = 1;
                  };
                  NaGlean na_glean = 8 [json_name = "na-glean"];
                  enum MaFlag {
                     MaFlag_OFF = 0;
                     MaFlag_ON = 1;
                  };
                  MaFlag ma_flag = 9 [json_name = "ma-flag"];
                  enum OFlag {
                     OFlag_OFF = 0;
                     OFlag_ON = 1;
                  };
                  OFlag o_flag = 10 [json_name = "o-flag"];
                  enum RaHaltFlag {
                     RaHaltFlag_OFF = 0;
                     RaHaltFlag_ON = 1;
                  };
                  RaHaltFlag ra_halt_flag = 11 [json_name = "ra-halt-flag"];
                  uint32 max_interval = 12 [json_name = "max-interval"];
                  uint32 ra_lifetime = 13 [json_name = "ra-lifetime"];
                  enum RaPreference {
                     RaPreference_MEDIUM = 0;
                     RaPreference_HIGH = 1;
                     RaPreference_LOW = 3;
                  };
                  RaPreference ra_preference = 14 [json_name = "ra-preference"];
                  enum RaPrefixFlag {
                     RaPrefixFlag_OFF = 0;
                     RaPrefixFlag_ON = 1;
                  };
                  RaPrefixFlag ra_prefix_flag = 15 [json_name = "ra-prefix-flag"];
                  enum RaMtuFlag {
                     RaMtuFlag_OFF = 0;
                     RaMtuFlag_ON = 1;
                  };
                  RaMtuFlag ra_mtu_flag = 16 [json_name = "ra-mtu-flag"];
                  bool strict_flag = 17 [json_name = "strict-flag"];
                  uint32 ts_fuzz_factor = 18 [json_name = "ts-fuzz-factor"];
                  uint32 ts_clock_drift = 19 [json_name = "ts-clock-drift"];
                  uint32 ts_delta = 20 [json_name = "ts-delta"];
                  uint32 rsa_min_key_len = 21 [json_name = "rsa-min-key-len"];
                  uint32 rsa_max_key_len = 22 [json_name = "rsa-max-key-len"];
                  uint32 stale_time = 23 [json_name = "stale-time"];
                  enum CollectHostFlag {
                     CollectHostFlag_OFF = 0;
                     CollectHostFlag_ON = 1;
                  };
                  CollectHostFlag collect_host_flag = 24 [json_name = "collect-host-flag"];
                  enum GenerateRdEnable {
                     GenerateRdEnable_OFF = 0;
                     GenerateRdEnable_ON = 1;
                  };
                  GenerateRdEnable generate_rd_enable = 25 [json_name = "generate-rd-enable"];
                  uint32 nud_interval = 26 [json_name = "nud-interval"];
                  uint32 hop_limit = 27 [json_name = "hop-limit"];
                  enum LinkDownTriggerDelFlag {
                     LinkDownTriggerDelFlag_OFF = 0;
                     LinkDownTriggerDelFlag_ON = 1;
                  };
                  LinkDownTriggerDelFlag link_down_trigger_del_flag = 28 [json_name = "link-down-trigger-del-flag"];
                  uint32 min_interval = 29 [json_name = "min-interval"];
               }
               IfProperty if_property = 1 [json_name = "if-property"];
               message Proxys {
                  enum RouteProxy {
                     RouteProxy_OFF = 0;
                     RouteProxy_ON = 1;
                  };
                  RouteProxy route_proxy = 1 [json_name = "route-proxy"];
                  enum InnerVlanProxy {
                     InnerVlanProxy_OFF = 0;
                     InnerVlanProxy_ON = 1;
                  };
                  InnerVlanProxy inner_vlan_proxy = 2 [json_name = "inner-vlan-proxy"];
                  enum InterVlanProxy {
                     InterVlanProxy_OFF = 0;
                     InterVlanProxy_ON = 1;
                  };
                  InterVlanProxy inter_vlan_proxy = 3 [json_name = "inter-vlan-proxy"];
                  enum AnywayProxy {
                     AnywayProxy_OFF = 0;
                     AnywayProxy_ON = 1;
                  };
                  AnywayProxy anyway_proxy = 4 [json_name = "anyway-proxy"];
                  enum LocalProxy {
                     LocalProxy_OFF = 0;
                     LocalProxy_ON = 1;
                  };
                  LocalProxy local_proxy = 5 [json_name = "local-proxy"];
               }
               Proxys proxys = 2 [json_name = "proxys"];
               message AntiAttack {
                  message ReceiveRateLimits {
                     message ReceiveRateLimit {
                        enum Type {
                           Type_RS = 0;
                           Type_RA = 1;
                           Type_NS = 2;
                           Type_NA = 3;
                           Type_NDMISS = 4;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 value = 2 [json_name = "value"];
                     }
                     repeated ReceiveRateLimit receive_rate_limit = 1 [json_name = "receive-rate-limit"];
                  }
                  ReceiveRateLimits receive_rate_limits = 1 [json_name = "receive-rate-limits"];
                  message SourceIpReceive {
                     message IpRateLimits {
                        message IpRateLimit {
                           enum PacketType {
                              PacketType_RS = 0;
                              PacketType_RA = 1;
                              PacketType_NS = 2;
                              PacketType_NA = 3;
                              PacketType_NDMISS = 4;
                           };
                           PacketType packet_type = 1 [json_name = "packet-type"];
                           string ipv6_addr = 2 [json_name = "ipv6-addr"];
                           uint32 value = 3 [json_name = "value"];
                        }
                        repeated IpRateLimit ip_rate_limit = 1 [json_name = "ip-rate-limit"];
                     }
                     IpRateLimits ip_rate_limits = 1 [json_name = "ip-rate-limits"];
                  }
                  SourceIpReceive source_ip_receive = 2 [json_name = "source-ip-receive"];
               }
               AntiAttack anti_attack = 3 [json_name = "anti-attack"];
               message StaticNeighbor {
                  message CommonIfs {
                     message CommonIf {
                        string ipv6_addr = 1 [json_name = "ipv6-addr"];
                        string mac_addr = 2 [json_name = "mac-addr"];
                     }
                     repeated CommonIf common_if = 1 [json_name = "common-if"];
                  }
                  CommonIfs common_ifs = 1 [json_name = "common-ifs"];
                  message Dot1QTerminationIfs {
                     message Dot1QTerminationIf {
                        string ipv6_addr = 1 [json_name = "ipv6-addr"];
                        string mac_addr = 2 [json_name = "mac-addr"];
                        uint32 pe_vlan = 3 [json_name = "pe-vlan"];
                     }
                     repeated Dot1QTerminationIf dot1q_termination_if = 1 [json_name = "dot1q-termination-if"];
                  }
                  Dot1QTerminationIfs dot1q_termination_ifs = 2 [json_name = "dot1q-termination-ifs"];
                  message QinqTerminationIfs {
                     message QinqTerminationIf {
                        string ipv6_addr = 1 [json_name = "ipv6-addr"];
                        string mac_addr = 2 [json_name = "mac-addr"];
                        uint32 pe_vlan = 3 [json_name = "pe-vlan"];
                        uint32 ce_vlan = 4 [json_name = "ce-vlan"];
                     }
                     repeated QinqTerminationIf qinq_termination_if = 1 [json_name = "qinq-termination-if"];
                  }
                  QinqTerminationIfs qinq_termination_ifs = 3 [json_name = "qinq-termination-ifs"];
                  message VlanIfs {
                     message VlanIf {
                        string ipv6_addr = 1 [json_name = "ipv6-addr"];
                        string mac_addr = 2 [json_name = "mac-addr"];
                        uint32 vlan_id = 3 [json_name = "vlan-id"];
                        string port_name = 4 [json_name = "port-name"];
                     }
                     repeated VlanIf vlan_if = 1 [json_name = "vlan-if"];
                  }
                  VlanIfs vlan_ifs = 4 [json_name = "vlan-ifs"];
                  message VbdIfs {
                     message VbdIf {
                        string ipv6_addr = 1 [json_name = "ipv6-addr"];
                        message NeighborAccessType_VbdifCommon {
                           string mac_addr = 1 [json_name = "mac-addr"];
                        }
                        message NeighborAccessType_EvcUntag {
                           string untag_mac_addr = 1 [json_name = "untag-mac-addr"];
                           string untag_port_name = 2 [json_name = "untag-port-name"];
                        }
                        message NeighborAccessType_EvcDot1Q {
                           string dot1q_mac_addr = 1 [json_name = "dot1q-mac-addr"];
                           string dot1q_port_name = 2 [json_name = "dot1q-port-name"];
                           uint32 vlan_id = 3 [json_name = "vlan-id"];
                        }
                        message NeighborAccessType_EvcQinq {
                           string qinq_mac_addr = 1 [json_name = "qinq-mac-addr"];
                           string qinq_port_name = 2 [json_name = "qinq-port-name"];
                           uint32 pe_vid = 3 [json_name = "pe-vid"];
                           uint32 ce_vid = 4 [json_name = "ce-vid"];
                        }
                        message NeighborAccessType_Vxlan {
                           string vxlan_mac_addr = 1 [json_name = "vxlan-mac-addr"];
                           uint32 vni = 2 [json_name = "vni"];
                           string source_addr = 3 [json_name = "source-addr"];
                           string peer_addr = 4 [json_name = "peer-addr"];
                        }
                        message NeighborAccessType_Vxlan6 {
                           string vxlan6_mac_addr = 1 [json_name = "vxlan6-mac-addr"];
                           uint32 vni6 = 2 [json_name = "vni6"];
                           string source_ipv6_addr = 3 [json_name = "source-ipv6-addr"];
                           string peer_ipv6_addr = 4 [json_name = "peer-ipv6-addr"];
                        }
                        oneof NeighborAccessType {
                           NeighborAccessType_VbdifCommon neighbor_access_type_vbdif_common = 2 [json_name = "vbdif-common"];
                           NeighborAccessType_EvcUntag neighbor_access_type_evc_untag = 3 [json_name = "evc-untag"];
                           NeighborAccessType_EvcDot1Q neighbor_access_type_evc_dot1q = 4 [json_name = "evc-dot1q"];
                           NeighborAccessType_EvcQinq neighbor_access_type_evc_qinq = 5 [json_name = "evc-qinq"];
                           NeighborAccessType_Vxlan neighbor_access_type_vxlan = 6 [json_name = "vxlan"];
                           NeighborAccessType_Vxlan6 neighbor_access_type_vxlan6 = 7 [json_name = "vxlan6"];
                        }
                     }
                     repeated VbdIf vbd_if = 1 [json_name = "vbd-if"];
                  }
                  VbdIfs vbd_ifs = 5 [json_name = "vbd-ifs"];
               }
               StaticNeighbor static_neighbor = 4 [json_name = "static-neighbor"];
               message SendRateLimit {
                  message PacketRateLimits {
                     message PacketRateLimit {
                        enum PacketType {
                           PacketType_RS = 0;
                           PacketType_RA = 1;
                           PacketType_NS = 2;
                           PacketType_NA = 3;
                        };
                        PacketType packet_type = 1 [json_name = "packet-type"];
                        uint32 value = 2 [json_name = "value"];
                     }
                     repeated PacketRateLimit packet_rate_limit = 1 [json_name = "packet-rate-limit"];
                  }
                  PacketRateLimits packet_rate_limits = 1 [json_name = "packet-rate-limits"];
                  message MulticastRateLimits {
                     message MulticastRateLimit {
                        enum PacketType {
                           PacketType_RS = 0;
                           PacketType_RA = 1;
                           PacketType_NS = 2;
                           PacketType_NA = 3;
                        };
                        PacketType packet_type = 1 [json_name = "packet-type"];
                        uint32 value = 2 [json_name = "value"];
                     }
                     repeated MulticastRateLimit multicast_rate_limit = 1 [json_name = "multicast-rate-limit"];
                  }
                  MulticastRateLimits multicast_rate_limits = 2 [json_name = "multicast-rate-limits"];
               }
               SendRateLimit send_rate_limit = 5 [json_name = "send-rate-limit"];
               message RaProperty {
                  message RaControl {
                     enum UnicastSend {
                        UnicastSend_OFF = 0;
                        UnicastSend_ON = 1;
                     };
                     UnicastSend unicast_send = 1 [json_name = "unicast-send"];
                  }
                  RaControl ra_control = 1 [json_name = "ra-control"];
                  message RaRoutes {
                     message RaRoute {
                        string prefix_addr = 1 [json_name = "prefix-addr"];
                        uint32 prefix_len = 2 [json_name = "prefix-len"];
                        uint32 lifetime = 3 [json_name = "lifetime"];
                        enum Preference {
                           Preference_MEDIUM = 0;
                           Preference_HIGH = 1;
                           Preference_LOW = 3;
                        };
                        Preference preference = 4 [json_name = "preference"];
                     }
                     repeated RaRoute ra_route = 1 [json_name = "ra-route"];
                  }
                  RaRoutes ra_routes = 2 [json_name = "ra-routes"];
                  message DnsServerAddresses {
                     message DnsServerAddress {
                        string ipv6_address = 1 [json_name = "ipv6-address"];
                        uint32 lifetime = 2 [json_name = "lifetime"];
                     }
                     repeated DnsServerAddress dns_server_address = 1 [json_name = "dns-server-address"];
                  }
                  DnsServerAddresses dns_server_addresses = 3 [json_name = "dns-server-addresses"];
                  message DnsSearchSuffixes {
                     message DnsSearchSuffix {
                        string suffix_name = 1 [json_name = "suffix-name"];
                        uint32 lifetime = 2 [json_name = "lifetime"];
                     }
                     repeated DnsSearchSuffix dns_search_suffix = 1 [json_name = "dns-search-suffix"];
                  }
                  DnsSearchSuffixes dns_search_suffixes = 4 [json_name = "dns-search-suffixes"];
               }
               RaProperty ra_property = 6 [json_name = "ra-property"];
               message StrictPrefixLearn {
                  enum Switch {
                     Switch_OFF = 0;
                     Switch_ON = 1;
                  };
                  Switch switch = 1 [json_name = "switch"];
               }
               StrictPrefixLearn strict_prefix_learn = 7 [json_name = "strict-prefix-learn"];
            }
            NdCollection nd_collection = 7 [json_name = "nd-collection"];
            message Pp6Collection {
               bool permit_incomplete_fragment = 1 [json_name = "permit-incomplete-fragment"];
            }
            Pp6Collection pp6_collection = 8 [json_name = "pp6-collection"];
            message ExtensionHeaderFilter {
               message HopByHopSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               HopByHopSwitch hop_by_hop_switch = 1 [json_name = "hop-by-hop-switch"];
               message RoutingSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               RoutingSwitch routing_switch = 2 [json_name = "routing-switch"];
               message DestinationSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               DestinationSwitch destination_switch = 3 [json_name = "destination-switch"];
               message NoOptionExhSwitchs {
                  message NoOptionExhSwitch {
                     enum ExhType {
                        INVALID_ENUM_VALUE_ExhType = 0;
                        ExhType_FRAGMENT = 44;
                        ExhType_ESP = 50;
                        ExhType_AH = 51;
                     };
                     ExhType exh_type = 1 [json_name = "exh-type"];
                     enum FilterRule {
                        FilterRule_DENY = 0;
                        FilterRule_PERMIT = 1;
                     };
                     FilterRule filter_rule = 2 [json_name = "filter-rule"];
                  }
                  repeated NoOptionExhSwitch no_option_exh_switch = 1 [json_name = "no-option-exh-switch"];
               }
               NoOptionExhSwitchs no_option_exh_switchs = 4 [json_name = "no-option-exh-switchs"];
            }
            ExtensionHeaderFilter extension_header_filter = 9 [json_name = "extension-header-filter"];
            message Vrrp6 {
               message Group6S {
                  message Group6 {
                     uint32 id = 1 [json_name = "id"];
                     uint32 priority = 2 [json_name = "priority"];
                     message Preempt {
                        bool preempt_enable = 1 [json_name = "preempt-enable"];
                        uint32 delay_time = 2 [json_name = "delay-time"];
                     }
                     Preempt preempt = 3 [json_name = "preempt"];
                     uint32 adver_interval = 4 [json_name = "adver-interval"];
                     string link_local_ip = 5 [json_name = "link-local-ip"];
                     enum VgmpRole {
                        INVALID_ENUM_VALUE_VgmpRole = 0;
                        VgmpRole_ACTIVE = 1;
                        VgmpRole_STANDBY = 2;
                     };
                     VgmpRole vgmp_role = 6 [json_name = "vgmp-role"];
                     message VirtualIps {
                        message VirtualIp {
                           string ip_address = 1 [json_name = "ip-address"];
                        }
                        repeated VirtualIp virtual_ip = 1 [json_name = "virtual-ip"];
                     }
                     VirtualIps virtual_ips = 7 [json_name = "virtual-ips"];
                     message TrackBfds {
                        message TrackBfd {
                           string bfd_sessname = 1 [json_name = "bfd-sessname"];
                           enum BfdType {
                              BfdType_NORMAL = 0;
                              BfdType_LINK = 1;
                              BfdType_PEER = 2;
                           };
                           BfdType bfd_type = 2 [json_name = "bfd-type"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                           uint32 bfd_sessid = 5 [json_name = "bfd-sessid"];
                        }
                        repeated TrackBfd track_bfd = 1 [json_name = "track-bfd"];
                     }
                     TrackBfds track_bfds = 8 [json_name = "track-bfds"];
                     string ni_name = 9 [json_name = "ni-name"];
                     message Vrrp6Type_Admin {
                        bool adminvrrp6 = 1 [json_name = "adminvrrp6"];
                        bool admin_ignore_ifdown = 2 [json_name = "admin-ignore-ifdown"];
                        uint32 init_state_holdtime = 3 [json_name = "init-state-holdtime"];
                     }
                     message Vrrp6Type_Member {
                        uint32 admin_id = 1 [json_name = "admin-id"];
                        string admin_if_name = 2 [json_name = "admin-if-name"];
                        bool unflowdown = 3 [json_name = "unflowdown"];
                        message MemberLoadBalance_MemLbrg {
                           bool memlbrg_vrrp = 1 [json_name = "memlbrg-vrrp"];
                        }
                        message MemberLoadBalance_MemLbrgMem {
                           uint32 memlbrg_vrrpid = 1 [json_name = "memlbrg-vrrpid"];
                        }
                        oneof MemberLoadBalance {
                           MemberLoadBalance_MemLbrg member_load_balance_mem_lbrg = 4 [json_name = "mem-lbrg"];
                           MemberLoadBalance_MemLbrgMem member_load_balance_mem_lbrg_mem = 5 [json_name = "mem-lbrg-mem"];
                        }
                        bool na_copy_to_member = 6 [json_name = "na-copy-to-member"];
                     }
                     message Vrrp6Type_Lbrg {
                        bool lbrg_vrrp = 1 [json_name = "lbrg-vrrp"];
                     }
                     message Vrrp6Type_LbrgMem {
                        uint32 lbrg_vrrpid = 1 [json_name = "lbrg-vrrpid"];
                     }
                     oneof Vrrp6Type {
                        Vrrp6Type_Admin vrrp6_type_admin = 10 [json_name = "admin"];
                        Vrrp6Type_Member vrrp6_type_member = 11 [json_name = "member"];
                        Vrrp6Type_Lbrg vrrp6_type_lbrg = 12 [json_name = "lbrg"];
                        Vrrp6Type_LbrgMem vrrp6_type_lbrg_mem = 13 [json_name = "lbrg-mem"];
                     }
                     uint32 hold_multiper = 14 [json_name = "hold-multiper"];
                     bool backup_forward = 15 [json_name = "backup-forward"];
                     enum State {
                        State_INITIALIZE = 0;
                        State_BACKUP = 1;
                        State_MASTER = 2;
                     };
                     State state = 16 [json_name = "state"];
                     uint32 run_priority = 17 [json_name = "run-priority"];
                     uint32 master_priority = 18 [json_name = "master-priority"];
                     string master_ip = 19 [json_name = "master-ip"];
                     string local_ifip = 20 [json_name = "local-ifip"];
                     string create_time = 21 [json_name = "create-time"];
                     string last_chage_time = 22 [json_name = "last-chage-time"];
                     uint32 run_adver_interval = 23 [json_name = "run-adver-interval"];
                     uint32 remain_time = 24 [json_name = "remain-time"];
                     string virtual_mac = 25 [json_name = "virtual-mac"];
                     enum Type {
                        Type_NORMAL = 0;
                        Type_ADMIN = 1;
                        Type_MEMBER = 2;
                        Type_LBRG = 3;
                        Type_LBRGX_MEM = 4;
                        Type_MEMX_LBRG = 5;
                        Type_MEMX_LBRGX_MEM = 6;
                        Type_UNICAST = 7;
                     };
                     Type type = 26 [json_name = "type"];
                     message TrackInterfaces {
                        message TrackInterface {
                           string track_ifname = 1 [json_name = "track-ifname"];
                           uint32 priority_change = 2 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 3 [json_name = "track-mode"];
                        }
                        repeated TrackInterface track_interface = 1 [json_name = "track-interface"];
                     }
                     TrackInterfaces track_interfaces = 27 [json_name = "track-interfaces"];
                     message Membervrrp6S {
                        message Membervrrp6 {
                           uint32 vrrpid = 1 [json_name = "vrrpid"];
                           string if_name = 2 [json_name = "if-name"];
                           enum State {
                              State_INITIALIZE = 0;
                              State_BACKUP = 1;
                              State_MASTER = 2;
                           };
                           State state = 3 [json_name = "state"];
                        }
                        repeated Membervrrp6 membervrrp6 = 1 [json_name = "membervrrp6"];
                     }
                     Membervrrp6S membervrrp6s = 28 [json_name = "membervrrp6s"];
                     message LbrgMemberVrrp6S {
                        message LbrgMemberVrrp6 {
                           uint32 vrrpid = 1 [json_name = "vrrpid"];
                           enum State {
                              State_INITIALIZE = 0;
                              State_BACKUP = 1;
                              State_MASTER = 2;
                           };
                           State state = 2 [json_name = "state"];
                        }
                        repeated LbrgMemberVrrp6 lbrg_member_vrrp6 = 1 [json_name = "lbrg-member-vrrp6"];
                     }
                     LbrgMemberVrrp6S lbrg_member_vrrp6s = 29 [json_name = "lbrg-member-vrrp6s"];
                     message StateChanges {
                        message StateChange {
                           uint32 index = 1 [json_name = "index"];
                           string change_time = 2 [json_name = "change-time"];
                           enum SourceState {
                              SourceState_MASTER = 0;
                              SourceState_BACKUP = 1;
                              SourceState_INITIALIZE = 2;
                           };
                           SourceState source_state = 3 [json_name = "source-state"];
                           enum DestState {
                              DestState_MASTER = 0;
                              DestState_BACKUP = 1;
                              DestState_INITIALIZE = 2;
                           };
                           DestState dest_state = 4 [json_name = "dest-state"];
                           string change_reason = 5 [json_name = "change-reason"];
                        }
                        repeated StateChange state_change = 1 [json_name = "state-change"];
                     }
                     StateChanges state_changes = 30 [json_name = "state-changes"];
                     message Statistics {
                        uint32 change_master_num = 1 [json_name = "change-master-num"];
                        uint32 send_adver = 2 [json_name = "send-adver"];
                        uint32 send_packets_num = 3 [json_name = "send-packets-num"];
                        uint32 adver_diff_num = 4 [json_name = "adver-diff-num"];
                        uint32 authentication_failures = 5 [json_name = "authentication-failures"];
                        uint32 ip_ttl_errors = 6 [json_name = "ip-ttl-errors"];
                        uint32 receive_priority_zero = 7 [json_name = "receive-priority-zero"];
                        uint32 send_priority_zero = 8 [json_name = "send-priority-zero"];
                        uint32 invalid_type_packets = 9 [json_name = "invalid-type-packets"];
                        uint32 address_list_errs = 10 [json_name = "address-list-errs"];
                        uint32 invalid_authen_type = 11 [json_name = "invalid-authen-type"];
                        uint32 authen_type_num = 12 [json_name = "authen-type-num"];
                        uint32 receive_length_num = 13 [json_name = "receive-length-num"];
                        uint32 receive_self_num = 14 [json_name = "receive-self-num"];
                        uint32 receive_attack_num = 15 [json_name = "receive-attack-num"];
                        uint32 receive_faillearn_num = 16 [json_name = "receive-faillearn-num"];
                     }
                     Statistics statistics = 31 [json_name = "statistics"];
                     message TrackIpv6Routes {
                        message TrackIpv6Route {
                           string vpn_name = 1 [json_name = "vpn-name"];
                           string ipv6_address = 2 [json_name = "ipv6-address"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           uint32 priority_change = 4 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 5 [json_name = "track-mode"];
                        }
                        repeated TrackIpv6Route track_ipv6_route = 1 [json_name = "track-ipv6-route"];
                     }
                     TrackIpv6Routes track_ipv6_routes = 32 [json_name = "track-ipv6-routes"];
                     message TrackMtgrps {
                        message TrackMtgrp {
                           string monitor_group_name = 1 [json_name = "monitor-group-name"];
                           uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_LINK = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                        }
                        repeated TrackMtgrp track_mtgrp = 1 [json_name = "track-mtgrp"];
                     }
                     TrackMtgrps track_mtgrps = 33 [json_name = "track-mtgrps"];
                     message TrackIpv6Interfaces {
                        message TrackIpv6Interface {
                           string track_ifname = 1 [json_name = "track-ifname"];
                           uint32 priority_change = 2 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 3 [json_name = "track-mode"];
                        }
                        repeated TrackIpv6Interface track_ipv6_interface = 1 [json_name = "track-ipv6-interface"];
                     }
                     TrackIpv6Interfaces track_ipv6_interfaces = 34 [json_name = "track-ipv6-interfaces"];
                  }
                  repeated Group6 group6 = 1 [json_name = "group6"];
               }
               Group6S group6s = 1 [json_name = "group6s"];
            }
            Vrrp6 vrrp6 = 10 [json_name = "vrrp6"];
            message Rgm6 {
               message Rgm6Track_AdvertiseDelay {
                  message AdvertiseDelay7 {
                     uint32 cost_change = 1 [json_name = "cost-change"];
                     uint32 time_delay = 2 [json_name = "time-delay"];
                  }
                  AdvertiseDelay7 advertise_delay = 1 [json_name = "advertise-delay"];
               }
               message Rgm6Track_TrackVrrp6 {
                  message TrackVrrp6S {
                     uint32 vrrp_id = 1 [json_name = "vrrp-id"];
                     uint32 cost_change = 2 [json_name = "cost-change"];
                  }
                  TrackVrrp6S track_vrrp6s = 1 [json_name = "track-vrrp6s"];
               }
               message Rgm6Track_TrackPw {
                  message TrackPw7 {
                     uint32 cost_change = 1 [json_name = "cost-change"];
                  }
                  TrackPw7 track_pw = 1 [json_name = "track-pw"];
               }
               oneof Rgm6Track {
                  Rgm6Track_AdvertiseDelay rgm6_track_advertise_delay = 1 [json_name = "advertise-delay"];
                  Rgm6Track_TrackVrrp6 rgm6_track_track_vrrp6 = 2 [json_name = "track-vrrp6"];
                  Rgm6Track_TrackPw rgm6_track_track_pw = 3 [json_name = "track-pw"];
               }
               message TrackVirtualAccess {
                  uint32 cost_change = 1 [json_name = "cost-change"];
               }
               TrackVirtualAccess track_virtual_access = 4 [json_name = "track-virtual-access"];
            }
            Rgm6 rgm6 = 11 [json_name = "rgm6"];
            message Address_CommonAddress {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
            }
            oneof Address {
               Address_CommonAddress address_common_address = 12 [json_name = "common-address"];
            }
            message Pp6Security {
               enum MulticastEchoReceive {
                  INVALID_ENUM_VALUE_MulticastEchoReceive = 0;
                  MulticastEchoReceive_ALLOW = 1;
                  MulticastEchoReceive_DENY = 2;
               };
               MulticastEchoReceive multicast_echo_receive = 1 [json_name = "multicast-echo-receive"];
            }
            Pp6Security pp6_security = 14 [json_name = "pp6-security"];
            message IfIcmp6PktSwitchSends {
               message IfIcmp6PktSwitchSend {
                  enum Name {
                     INVALID_ENUM_VALUE_Name = 0;
                     Name_HOSTX_UNREACHABLE = 2;
                     Name_PORTX_UNREACHABLE = 3;
                     Name_HOPX_LIMITX_EXCEEDED = 5;
                  };
                  Name name = 1 [json_name = "name"];
                  enum Switch {
                     Switch_ALLOW = 0;
                     Switch_DENY = 1;
                  };
                  Switch switch = 2 [json_name = "switch"];
               }
               repeated IfIcmp6PktSwitchSend if_icmp6_pkt_switch_send = 1 [json_name = "if-icmp6-pkt-switch-send"];
            }
            IfIcmp6PktSwitchSends if_icmp6_pkt_switch_sends = 15 [json_name = "if-icmp6-pkt-switch-sends"];
            bool auto_global_default = 16 [json_name = "auto-global-default"];
            message PrefixAddresses {
               message PrefixAddress {
                  string prefix_name = 1 [json_name = "prefix-name"];
                  string ip = 2 [json_name = "ip"];
                  uint32 prefix_length = 3 [json_name = "prefix-length"];
               }
               repeated PrefixAddress prefix_address = 1 [json_name = "prefix-address"];
            }
            PrefixAddresses prefix_addresses = 17 [json_name = "prefix-addresses"];
         }
         Ipv6 ipv6 = 42 [json_name = "ipv6"];
         message Ethernet {
            message MainInterface {
               enum VlanSwap {
                  VlanSwap_DISABLE = 0;
                  VlanSwap_ENABLE = 1;
               };
               VlanSwap vlan_swap = 1 [json_name = "vlan-swap"];
               string qinq_protocol = 2 [json_name = "qinq-protocol"];
               message L2Attribute {
                  enum LinkType {
                     INVALID_ENUM_VALUE_LinkType = 0;
                     LinkType_ACCESS = 1;
                     LinkType_TRUNK = 2;
                     LinkType_HYBRID = 3;
                     LinkType_DOT1QTUNNEL = 4;
                  };
                  LinkType link_type = 1 [json_name = "link-type"];
                  uint32 pvid = 2 [json_name = "pvid"];
                  string trunk_vlans = 3 [json_name = "trunk-vlans"];
                  bool untag_discarding = 4 [json_name = "untag-discarding"];
                  message VlanStackings {
                     message VlanStacking {
                        uint32 stacking_vlan = 1 [json_name = "stacking-vlan"];
                        bool ce_default = 2 [json_name = "ce-default"];
                        string trans_vlans = 3 [json_name = "trans-vlans"];
                     }
                     repeated VlanStacking vlan_stacking = 1 [json_name = "vlan-stacking"];
                  }
                  VlanStackings vlan_stackings = 5 [json_name = "vlan-stackings"];
                  message StatisticsEnableVlans {
                     string vlans = 1 [json_name = "vlans"];
                  }
                  StatisticsEnableVlans statistics_enable_vlans = 6 [json_name = "statistics-enable-vlans"];
                  message PortIsolateGroups {
                     message PortIsolateGroup {
                        int32 group_id = 1 [json_name = "group-id"];
                     }
                     repeated PortIsolateGroup port_isolate_group = 1 [json_name = "port-isolate-group"];
                  }
                  PortIsolateGroups port_isolate_groups = 7 [json_name = "port-isolate-groups"];
                  message MstpAttribute {
                     bool enable = 1 [json_name = "enable"];
                     bool loop_protection = 2 [json_name = "loop-protection"];
                     bool no_agreement_check = 3 [json_name = "no-agreement-check"];
                     enum PointToPoint {
                        INVALID_ENUM_VALUE_PointToPoint = 0;
                        PointToPoint_FORCEX_TRUE = 1;
                        PointToPoint_FORCEX_FALSE = 2;
                        PointToPoint_AUTO = 3;
                     };
                     PointToPoint point_to_point = 4 [json_name = "point-to-point"];
                     bool root_protection = 5 [json_name = "root-protection"];
                     uint32 transmit_limit = 6 [json_name = "transmit-limit"];
                     bool tc_restriction = 7 [json_name = "tc-restriction"];
                     enum BpduFilter {
                        INVALID_ENUM_VALUE_BpduFilter = 0;
                        BpduFilter_DISABLE = 1;
                        BpduFilter_ENABLE = 2;
                        BpduFilter_DEFAULT = 3;
                     };
                     BpduFilter bpdu_filter = 8 [json_name = "bpdu-filter"];
                     enum EdgePort {
                        INVALID_ENUM_VALUE_EdgePort = 0;
                        EdgePort_DISABLE = 1;
                        EdgePort_ENABLE = 2;
                        EdgePort_DEFAULT = 3;
                     };
                     EdgePort edge_port = 9 [json_name = "edge-port"];
                     bool vpls_sub_interface = 10 [json_name = "vpls-sub-interface"];
                     enum Compliance {
                        INVALID_ENUM_VALUE_Compliance = 0;
                        Compliance_AUTO = 1;
                        Compliance_DOT1S = 2;
                        Compliance_LEGACY = 3;
                     };
                     Compliance compliance = 11 [json_name = "compliance"];
                     bool digest_snooping = 12 [json_name = "digest-snooping"];
                     bool tc_notify_bd = 13 [json_name = "tc-notify-bd"];
                     message TcSnooping {
                        bool enable = 1 [json_name = "enable"];
                        message NotifyBd_DefaultProcess {
                           bool notify_bd_default_process = 1 [json_name = "notify-bd-default-process"];
                        }
                        message NotifyBd_Process {
                           uint32 notify_bd_process = 1 [json_name = "notify-bd-process"];
                        }
                        oneof NotifyBd {
                           NotifyBd_DefaultProcess notify_bd_default_process = 2 [json_name = "default-process"];
                           NotifyBd_Process notify_bd_process = 3 [json_name = "process"];
                        }
                     }
                     TcSnooping tc_snooping = 14 [json_name = "tc-snooping"];
                     enum BpduEncapsulation {
                        INVALID_ENUM_VALUE_BpduEncapsulation = 0;
                        BpduEncapsulation_VBST = 1;
                        BpduEncapsulation_STP = 2;
                     };
                     BpduEncapsulation bpdu_encapsulation = 15 [json_name = "bpdu-encapsulation"];
                     string deny_vlans = 16 [json_name = "deny-vlans"];
                     bool tc_notify_trill = 17 [json_name = "tc-notify-trill"];
                     message PermitMacs {
                        message PermitMac {
                           string mac = 1 [json_name = "mac"];
                           string mask = 2 [json_name = "mask"];
                        }
                        repeated PermitMac permit_mac = 1 [json_name = "permit-mac"];
                     }
                     PermitMacs permit_macs = 18 [json_name = "permit-macs"];
                     message Process {
                        uint32 process_id = 1 [json_name = "process-id"];
                        repeated uint32 link_share_process = 2 [json_name = "link-share-process"];
                     }
                     Process process = 19 [json_name = "process"];
                     message DefaultProcessInstance {
                        message DefaultInstance9 {
                           uint32 cost = 1 [json_name = "cost"];
                           uint32 priority = 2 [json_name = "priority"];
                        }
                        DefaultInstance9 default_instance9 = 1 [json_name = "default-instance"];
                        message Instances {
                           message Instance {
                              uint32 instance_id = 1 [json_name = "instance-id"];
                              uint32 cost = 2 [json_name = "cost"];
                              uint32 priority = 3 [json_name = "priority"];
                           }
                           repeated Instance instance = 1 [json_name = "instance"];
                        }
                        Instances instances = 2 [json_name = "instances"];
                     }
                     DefaultProcessInstance default_process_instance = 20 [json_name = "default-process-instance"];
                     message ProcessInstances {
                        message DefaultInstances {
                           message DefaultInstance10 {
                              uint32 process_id = 1 [json_name = "process-id"];
                              uint32 cost = 2 [json_name = "cost"];
                              uint32 priority = 3 [json_name = "priority"];
                           }
                           repeated DefaultInstance10 default_instance10 = 1 [json_name = "default-instance"];
                        }
                        DefaultInstances default_instances = 1 [json_name = "default-instances"];
                        message Instances {
                           message Instance {
                              uint32 process_id = 1 [json_name = "process-id"];
                              uint32 instance_id = 2 [json_name = "instance-id"];
                              uint32 cost = 3 [json_name = "cost"];
                              uint32 priority = 4 [json_name = "priority"];
                           }
                           repeated Instance instance = 1 [json_name = "instance"];
                        }
                        Instances instances = 2 [json_name = "instances"];
                        message ProcessInstance {
                           uint32 process_id = 1 [json_name = "process-id"];
                           uint32 instance_id = 2 [json_name = "instance-id"];
                           uint32 cost = 3 [json_name = "cost"];
                           uint32 priority = 4 [json_name = "priority"];
                        }
                        repeated ProcessInstance process_instance = 3 [json_name = "process-instance"];
                     }
                     ProcessInstances process_instances = 21 [json_name = "process-instances"];
                     message HvrpTransport {
                        bool enable = 1 [json_name = "enable"];
                     }
                     HvrpTransport hvrp_transport = 22 [json_name = "hvrp-transport"];
                     message Vbst {
                        message VbstCommon {
                           bool slow_revertive = 1 [json_name = "slow-revertive"];
                           bool legacy = 2 [json_name = "legacy"];
                        }
                        VbstCommon vbst_common = 1 [json_name = "vbst-common"];
                        message VbstInstances {
                           message VbstInstance {
                              int32 vlan_id = 1 [json_name = "vlan-id"];
                              uint32 cost = 2 [json_name = "cost"];
                              uint32 priority = 3 [json_name = "priority"];
                           }
                           repeated VbstInstance vbst_instance = 1 [json_name = "vbst-instance"];
                        }
                        VbstInstances vbst_instances = 2 [json_name = "vbst-instances"];
                     }
                     Vbst vbst = 23 [json_name = "vbst"];
                  }
                  MstpAttribute mstp_attribute = 8 [json_name = "mstp-attribute"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                        };
                        Action action = 2 [json_name = "action"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 9 [json_name = "protocol-actions"];
                  message BpduTunnel {
                     message BpduEnable_Enable {
                        bool enable9 = 1 [json_name = "enable"];
                     }
                     message BpduEnable_EnableVlans {
                        string enable_vlans = 1 [json_name = "enable-vlans"];
                     }
                     oneof BpduEnable {
                        BpduEnable_Enable bpdu_enable_enable = 1 [json_name = "enable"];
                        BpduEnable_EnableVlans bpdu_enable_enable_vlans = 2 [json_name = "enable-vlans"];
                     }
                     uint32 vlan_id = 3 [json_name = "vlan-id"];
                  }
                  BpduTunnel bpdu_tunnel = 10 [json_name = "bpdu-tunnel"];
                  message VlanIsolateAttribute {
                     string isolate_vlanlist = 1 [json_name = "isolate-vlanlist"];
                     bool outside_vlan_iso = 2 [json_name = "outside-vlan-iso"];
                  }
                  VlanIsolateAttribute vlan_isolate_attribute = 11 [json_name = "vlan-isolate-attribute"];
                  string untag_vlans = 12 [json_name = "untag-vlans"];
                  message VlanStackingRemarks {
                     message VlanStackingRemark {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                        uint32 stack_vlan = 3 [json_name = "stack-vlan"];
                        uint32 remark_8021p = 4 [json_name = "remark-8021p"];
                     }
                     repeated VlanStackingRemark vlan_stacking_remark = 1 [json_name = "vlan-stacking-remark"];
                  }
                  VlanStackingRemarks vlan_stacking_remarks = 13 [json_name = "vlan-stacking-remarks"];
                  message VlanMappings {
                     message VlanMapping {
                        uint32 mapping_vlan = 1 [json_name = "mapping-vlan"];
                        string trans_vlans = 2 [json_name = "trans-vlans"];
                     }
                     repeated VlanMapping vlan_mapping = 1 [json_name = "vlan-mapping"];
                  }
                  VlanMappings vlan_mappings = 14 [json_name = "vlan-mappings"];
                  message VlanMappingRemarks {
                     message VlanMappingRemark {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                        uint32 mapping_vlan = 3 [json_name = "mapping-vlan"];
                        uint32 remark_8021p = 4 [json_name = "remark-8021p"];
                     }
                     repeated VlanMappingRemark vlan_mapping_remark = 1 [json_name = "vlan-mapping-remark"];
                  }
                  VlanMappingRemarks vlan_mapping_remarks = 15 [json_name = "vlan-mapping-remarks"];
                  message VlanMacLimits {
                     message VlanMacLimit {
                        uint32 maximum = 1 [json_name = "maximum"];
                        uint32 rate = 2 [json_name = "rate"];
                        enum Action {
                           Action_DISCARD = 0;
                           Action_FORWARD = 1;
                        };
                        Action action = 3 [json_name = "action"];
                        enum Alarm {
                           Alarm_DISABLE = 0;
                           Alarm_ENABLE = 1;
                        };
                        Alarm alarm = 4 [json_name = "alarm"];
                        string vlan_list = 5 [json_name = "vlan-list"];
                     }
                     repeated VlanMacLimit vlan_mac_limit = 1 [json_name = "vlan-mac-limit"];
                  }
                  VlanMacLimits vlan_mac_limits = 16 [json_name = "vlan-mac-limits"];
                  message VlanMacLimitRules {
                     message VlanMacLimitRule {
                        string rule_name = 1 [json_name = "rule-name"];
                        string vlan_list = 2 [json_name = "vlan-list"];
                     }
                     repeated VlanMacLimitRule vlan_mac_limit_rule = 1 [json_name = "vlan-mac-limit-rule"];
                  }
                  VlanMacLimitRules vlan_mac_limit_rules = 17 [json_name = "vlan-mac-limit-rules"];
                  message Suppressions {
                     message Suppression {
                        enum Type {
                           Type_BROADCAST = 0;
                           Type_MULTICAST = 1;
                           Type_UNKNOWNX_UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        enum Direction {
                           Direction_INBOUND = 0;
                           Direction_OUTBOUND = 1;
                        };
                        Direction direction = 2 [json_name = "direction"];
                        message SuppressionType_Percent {
                           uint32 percent10 = 1 [json_name = "percent"];
                        }
                        message SuppressionType_Value {
                           uint32 band_width = 1 [json_name = "band-width"];
                        }
                        oneof SuppressionType {
                           SuppressionType_Percent suppression_type_percent = 3 [json_name = "percent"];
                           SuppressionType_Value suppression_type_value = 4 [json_name = "value"];
                        }
                     }
                     repeated Suppression suppression = 1 [json_name = "suppression"];
                  }
                  Suppressions suppressions = 18 [json_name = "suppressions"];
                  message VlanSuppressions {
                     message VlanSuppression {
                        enum Type {
                           Type_BROADCAST = 0;
                           Type_MULTICAST = 1;
                           Type_UNKNOWNX_UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 cir = 2 [json_name = "cir"];
                        uint32 cbs = 3 [json_name = "cbs"];
                        enum Direction {
                           Direction_INBOUND = 0;
                           Direction_OUTBOUND = 1;
                        };
                        Direction direction = 4 [json_name = "direction"];
                        string vlan_list = 5 [json_name = "vlan-list"];
                     }
                     repeated VlanSuppression vlan_suppression = 1 [json_name = "vlan-suppression"];
                  }
                  VlanSuppressions vlan_suppressions = 19 [json_name = "vlan-suppressions"];
                  bool ip_subnet_vlan_enable = 20 [json_name = "ip-subnet-vlan-enable"];
                  message ActiveVlans {
                     message ActiveVlan {
                        string untag_vlans = 1 [json_name = "untag-vlans"];
                        string tag_vlans = 2 [json_name = "tag-vlans"];
                     }
                     ActiveVlan active_vlan = 1 [json_name = "active-vlan"];
                  }
                  ActiveVlans active_vlans = 21 [json_name = "active-vlans"];
                  message L2Pt {
                     message WellKnownProtocols {
                        message WellKnownProtocol {
                           enum ProtocolType {
                              INVALID_ENUM_VALUE_ProtocolType = 0;
                              ProtocolType_EOAM3AH = 1;
                              ProtocolType_LLDP = 2;
                              ProtocolType_GMRP = 3;
                              ProtocolType_GVRP = 4;
                              ProtocolType_DLDP = 5;
                              ProtocolType_HGMP = 6;
                              ProtocolType_VTP = 7;
                              ProtocolType_DTP = 8;
                              ProtocolType_CDP = 9;
                              ProtocolType_UDLD = 10;
                              ProtocolType_PAGP = 11;
                              ProtocolType_PVSTX_PLUS = 12;
                              ProtocolType_STP = 13;
                              ProtocolType_LACP = 14;
                              ProtocolType_MVRP = 15;
                              ProtocolType_MMRP = 16;
                              ProtocolType_EX_LMI = 17;
                              ProtocolType_X_802X_1X = 18;
                              ProtocolType_SSTP = 19;
                           };
                           ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                           string vlan_list = 2 [json_name = "vlan-list"];
                           enum Action {
                              Action_ENABLE = 0;
                              Action_REVERSE = 2;
                           };
                           Action action = 3 [json_name = "action"];
                           uint32 drop_threshold = 4 [json_name = "drop-threshold"];
                           message Statistics {
                              uint64 input_packets = 1 [json_name = "input-packets"];
                              uint64 output_packets = 2 [json_name = "output-packets"];
                              uint64 drop_packets = 3 [json_name = "drop-packets"];
                           }
                           Statistics statistics = 5 [json_name = "statistics"];
                        }
                        repeated WellKnownProtocol well_known_protocol = 1 [json_name = "well-known-protocol"];
                     }
                     WellKnownProtocols well_known_protocols = 1 [json_name = "well-known-protocols"];
                     message UserDefinedProtocols {
                        message UserDefinedProtocol {
                           string protocol_name = 1 [json_name = "protocol-name"];
                           string vlan_list = 2 [json_name = "vlan-list"];
                           enum Action {
                              Action_ENABLE = 0;
                              Action_REVERSE = 2;
                           };
                           Action action = 3 [json_name = "action"];
                           uint32 drop_threshold = 4 [json_name = "drop-threshold"];
                           message Statistics {
                              uint64 input_packets = 1 [json_name = "input-packets"];
                              uint64 output_packets = 2 [json_name = "output-packets"];
                              uint64 drop_packets = 3 [json_name = "drop-packets"];
                           }
                           Statistics statistics = 5 [json_name = "statistics"];
                        }
                        repeated UserDefinedProtocol user_defined_protocol = 1 [json_name = "user-defined-protocol"];
                     }
                     UserDefinedProtocols user_defined_protocols = 2 [json_name = "user-defined-protocols"];
                  }
                  L2Pt l2pt = 22 [json_name = "l2pt"];
                  message ErpsAttribute {
                     message Rings {
                        message Ring {
                           uint32 id = 1 [json_name = "id"];
                           enum PortRole {
                              PortRole_COMMON = 0;
                              PortRole_NEIGHBOUR = 1;
                              PortRole_OWNER = 2;
                           };
                           PortRole port_role = 2 [json_name = "port-role"];
                           string md_name = 3 [json_name = "md-name"];
                           string ma_name = 4 [json_name = "ma-name"];
                           uint32 mep_id = 5 [json_name = "mep-id"];
                           uint32 rmep_id = 6 [json_name = "rmep-id"];
                           message CfmTracks {
                              message CfmTrack {
                                 string md_name = 1 [json_name = "md-name"];
                                 string ma_name = 2 [json_name = "ma-name"];
                                 uint32 mep_id = 3 [json_name = "mep-id"];
                                 uint32 rmep_id = 4 [json_name = "rmep-id"];
                              }
                              repeated CfmTrack cfm_track = 1 [json_name = "cfm-track"];
                           }
                           CfmTracks cfm_tracks = 7 [json_name = "cfm-tracks"];
                        }
                        repeated Ring ring = 1 [json_name = "ring"];
                     }
                     Rings rings = 1 [json_name = "rings"];
                     message NotifySubif {
                        enum NotifyVpls {
                           NotifyVpls_DISABLE = 0;
                           NotifyVpls_ENABLE = 1;
                        };
                        NotifyVpls notify_vpls = 1 [json_name = "notify-vpls"];
                        enum NotifyBd {
                           NotifyBd_DISABLE = 0;
                           NotifyBd_ENABLE = 1;
                        };
                        NotifyBd notify_bd = 2 [json_name = "notify-bd"];
                     }
                     NotifySubif notify_subif = 2 [json_name = "notify-subif"];
                  }
                  ErpsAttribute erps_attribute = 23 [json_name = "erps-attribute"];
                  message MacLearning {
                     bool enable = 1 [json_name = "enable"];
                     enum Action {
                        INVALID_ENUM_VALUE_Action = 0;
                        Action_DISCARD = 1;
                        Action_FORWARD = 2;
                     };
                     Action action = 2 [json_name = "action"];
                  }
                  MacLearning mac_learning = 24 [json_name = "mac-learning"];
                  message PortSecurity {
                     uint32 maximum = 1 [json_name = "maximum"];
                     enum Action {
                        Action_RESTRICT = 0;
                        Action_PROTECT = 1;
                        Action_ERRORX_DOWN = 2;
                     };
                     Action action = 2 [json_name = "action"];
                     uint32 aging_time = 3 [json_name = "aging-time"];
                     enum AgingType {
                        AgingType_ABSOLUTE = 0;
                        AgingType_INACTIVITY = 1;
                        AgingType_FORCE = 2;
                     };
                     AgingType aging_type = 4 [json_name = "aging-type"];
                     enum MacAddressSticky {
                        MacAddressSticky_DISABLE = 0;
                        MacAddressSticky_ENABLE = 1;
                     };
                     MacAddressSticky mac_address_sticky = 5 [json_name = "mac-address-sticky"];
                     message MacAddressSecuritys {
                        message MacAddressSecurity {
                           string address = 1 [json_name = "address"];
                           uint32 vlan_id = 2 [json_name = "vlan-id"];
                        }
                        repeated MacAddressSecurity mac_address_security = 1 [json_name = "mac-address-security"];
                     }
                     MacAddressSecuritys mac_address_securitys = 6 [json_name = "mac-address-securitys"];
                  }
                  PortSecurity port_security = 25 [json_name = "port-security"];
                  message MstpProcessAttribute {
                     message ProcessInstances {
                        message ProcessInstance {
                           uint32 process_id = 1 [json_name = "process-id"];
                           uint32 instance_id = 2 [json_name = "instance-id"];
                           uint32 cost = 3 [json_name = "cost"];
                           uint32 priority = 4 [json_name = "priority"];
                        }
                        repeated ProcessInstance process_instance = 1 [json_name = "process-instance"];
                     }
                     ProcessInstances process_instances = 1 [json_name = "process-instances"];
                  }
                  MstpProcessAttribute mstp_process_attribute = 26 [json_name = "mstp-process-attribute"];
                  message GvrpAttribute {
                     enum RegistrationMode {
                        RegistrationMode_NORMAL = 0;
                        RegistrationMode_FIXED = 1;
                        RegistrationMode_FORBIDDEN = 2;
                     };
                     RegistrationMode registration_mode = 1 [json_name = "registration-mode"];
                     uint32 hold_timer = 2 [json_name = "hold-timer"];
                     uint32 join_timer = 3 [json_name = "join-timer"];
                     uint32 leave_timer = 4 [json_name = "leave-timer"];
                  }
                  GvrpAttribute gvrp_attribute = 27 [json_name = "gvrp-attribute"];
                  message Smartlink {
                     bool detect_active_link = 1 [json_name = "detect-active-link"];
                     uint32 control_vlan = 2 [json_name = "control-vlan"];
                  }
                  Smartlink smartlink = 28 [json_name = "smartlink"];
                  string erps_auto_vlans = 29 [json_name = "erps-auto-vlans"];
                  message VlanClassification {
                     bool ip_subnet_vlan = 1 [json_name = "ip-subnet-vlan"];
                  }
                  VlanClassification vlan_classification = 30 [json_name = "vlan-classification"];
                  message VlanStackingTags {
                     message VlanStackingTag {
                        uint32 stack_vlan = 1 [json_name = "stack-vlan"];
                        string trans_vlans = 2 [json_name = "trans-vlans"];
                     }
                     repeated VlanStackingTag vlan_stacking_tag = 1 [json_name = "vlan-stacking-tag"];
                  }
                  VlanStackingTags vlan_stacking_tags = 31 [json_name = "vlan-stacking-tags"];
                  message VlanStackingRemarkTags {
                     message VlanStackingRemarkTag {
                        uint32 stack_vlan = 1 [json_name = "stack-vlan"];
                        uint32 remark_8021p = 2 [json_name = "remark-8021p"];
                        string trans_vlans = 3 [json_name = "trans-vlans"];
                     }
                     repeated VlanStackingRemarkTag vlan_stacking_remark_tag = 1 [json_name = "vlan-stacking-remark-tag"];
                  }
                  VlanStackingRemarkTags vlan_stacking_remark_tags = 32 [json_name = "vlan-stacking-remark-tags"];
                  message VlanStacking8021PFilters {
                     message VlanStacking8021PFilter {
                        uint32 stack_vlan = 1 [json_name = "stack-vlan"];
                        uint32 match_8021p_begin = 2 [json_name = "match-8021p-begin"];
                        uint32 match_8021p_end = 3 [json_name = "match-8021p-end"];
                        string trans_vlans = 4 [json_name = "trans-vlans"];
                     }
                     repeated VlanStacking8021PFilter vlan_stacking_8021p_filter = 1 [json_name = "vlan-stacking-8021p-filter"];
                  }
                  VlanStacking8021PFilters vlan_stacking_8021p_filters = 33 [json_name = "vlan-stacking-8021p-filters"];
                  message VlanStacking8021PRemarks {
                     message VlanStacking8021PRemark {
                        uint32 stack_vlan = 1 [json_name = "stack-vlan"];
                        uint32 remark_8021p = 2 [json_name = "remark-8021p"];
                        uint32 match_8021p_begin = 3 [json_name = "match-8021p-begin"];
                        uint32 match_8021p_end = 4 [json_name = "match-8021p-end"];
                        string trans_vlans = 5 [json_name = "trans-vlans"];
                     }
                     repeated VlanStacking8021PRemark vlan_stacking_8021p_remark = 1 [json_name = "vlan-stacking-8021p-remark"];
                  }
                  VlanStacking8021PRemarks vlan_stacking_8021p_remarks = 34 [json_name = "vlan-stacking-8021p-remarks"];
                  message VlanStackingUntag {
                     uint32 stacking_vlan = 1 [json_name = "stacking-vlan"];
                     uint32 stacking_inner_vlan = 2 [json_name = "stacking-inner-vlan"];
                  }
                  VlanStackingUntag vlan_stacking_untag = 35 [json_name = "vlan-stacking-untag"];
                  message MacAddressFlapping {
                     bool error_down = 1 [json_name = "error-down"];
                  }
                  MacAddressFlapping mac_address_flapping = 36 [json_name = "mac-address-flapping"];
                  message MuxVlan {
                     string vlan_list = 1 [json_name = "vlan-list"];
                  }
                  MuxVlan mux_vlan = 37 [json_name = "mux-vlan"];
                  message VlanMappingSingles {
                     message VlanMappingSingle {
                        uint32 vlan = 1 [json_name = "vlan"];
                        uint32 mapping_vlan = 2 [json_name = "mapping-vlan"];
                        uint32 remark_8021p = 3 [json_name = "remark-8021p"];
                     }
                     repeated VlanMappingSingle vlan_mapping_single = 1 [json_name = "vlan-mapping-single"];
                  }
                  VlanMappingSingles vlan_mapping_singles = 38 [json_name = "vlan-mapping-singles"];
                  message VlanMappingDoubles {
                     message VlanMappingDouble {
                        uint32 vlan = 1 [json_name = "vlan"];
                        uint32 inner_vlan_begin = 2 [json_name = "inner-vlan-begin"];
                        uint32 inner_vlan_end = 3 [json_name = "inner-vlan-end"];
                        uint32 mapping_vlan = 4 [json_name = "mapping-vlan"];
                        uint32 mapping_inner_vlan = 5 [json_name = "mapping-inner-vlan"];
                        uint32 remark_8021p = 6 [json_name = "remark-8021p"];
                     }
                     repeated VlanMappingDouble vlan_mapping_double = 1 [json_name = "vlan-mapping-double"];
                  }
                  VlanMappingDoubles vlan_mapping_doubles = 39 [json_name = "vlan-mapping-doubles"];
                  message VlanMappingDoubleToSingles {
                     message VlanMappingDoubleToSingle {
                        uint32 vlan = 1 [json_name = "vlan"];
                        uint32 inner_vlan = 2 [json_name = "inner-vlan"];
                        uint32 mapping_vlan = 3 [json_name = "mapping-vlan"];
                     }
                     repeated VlanMappingDoubleToSingle vlan_mapping_double_to_single = 1 [json_name = "vlan-mapping-double-to-single"];
                  }
                  VlanMappingDoubleToSingles vlan_mapping_double_to_singles = 40 [json_name = "vlan-mapping-double-to-singles"];
               }
               L2Attribute l2_attribute = 3 [json_name = "l2-attribute"];
               message MstpAttribute {
                  bool enable = 1 [json_name = "enable"];
                  bool loop_protection = 2 [json_name = "loop-protection"];
                  bool no_agreement_check = 3 [json_name = "no-agreement-check"];
                  enum PointToPoint {
                     INVALID_ENUM_VALUE_PointToPoint = 0;
                     PointToPoint_FORCEX_TRUE = 1;
                     PointToPoint_FORCEX_FALSE = 2;
                     PointToPoint_AUTO = 3;
                  };
                  PointToPoint point_to_point = 4 [json_name = "point-to-point"];
                  bool root_protection = 5 [json_name = "root-protection"];
                  uint32 transmit_limit = 6 [json_name = "transmit-limit"];
                  bool tc_restriction = 7 [json_name = "tc-restriction"];
                  enum BpduFilter {
                     INVALID_ENUM_VALUE_BpduFilter = 0;
                     BpduFilter_DISABLE = 1;
                     BpduFilter_ENABLE = 2;
                     BpduFilter_DEFAULT = 3;
                  };
                  BpduFilter bpdu_filter = 8 [json_name = "bpdu-filter"];
                  enum EdgePort {
                     INVALID_ENUM_VALUE_EdgePort = 0;
                     EdgePort_DISABLE = 1;
                     EdgePort_ENABLE = 2;
                     EdgePort_DEFAULT = 3;
                  };
                  EdgePort edge_port = 9 [json_name = "edge-port"];
                  bool vpls_sub_interface = 10 [json_name = "vpls-sub-interface"];
                  enum Compliance {
                     INVALID_ENUM_VALUE_Compliance = 0;
                     Compliance_AUTO = 1;
                     Compliance_DOT1S = 2;
                     Compliance_LEGACY = 3;
                  };
                  Compliance compliance = 11 [json_name = "compliance"];
                  bool digest_snooping = 12 [json_name = "digest-snooping"];
                  bool tc_notify_bd = 13 [json_name = "tc-notify-bd"];
                  message TcSnooping {
                     bool enable = 1 [json_name = "enable"];
                     message NotifyBd_DefaultProcess {
                        bool notify_bd_default_process = 1 [json_name = "notify-bd-default-process"];
                     }
                     message NotifyBd_Process {
                        uint32 notify_bd_process = 1 [json_name = "notify-bd-process"];
                     }
                     oneof NotifyBd {
                        NotifyBd_DefaultProcess notify_bd_default_process = 2 [json_name = "default-process"];
                        NotifyBd_Process notify_bd_process = 3 [json_name = "process"];
                     }
                  }
                  TcSnooping tc_snooping = 14 [json_name = "tc-snooping"];
                  enum BpduEncapsulation {
                     INVALID_ENUM_VALUE_BpduEncapsulation = 0;
                     BpduEncapsulation_VBST = 1;
                     BpduEncapsulation_STP = 2;
                  };
                  BpduEncapsulation bpdu_encapsulation = 15 [json_name = "bpdu-encapsulation"];
                  string deny_vlans = 16 [json_name = "deny-vlans"];
                  message PermitMacs {
                     message PermitMac {
                        string mac = 1 [json_name = "mac"];
                        string mask = 2 [json_name = "mask"];
                     }
                     repeated PermitMac permit_mac = 1 [json_name = "permit-mac"];
                  }
                  PermitMacs permit_macs = 17 [json_name = "permit-macs"];
                  message Process {
                     uint32 process_id = 1 [json_name = "process-id"];
                     repeated uint32 link_share_process = 2 [json_name = "link-share-process"];
                  }
                  Process process = 18 [json_name = "process"];
                  message DefaultProcessInstance {
                     message DefaultInstance8 {
                        uint32 cost = 1 [json_name = "cost"];
                        uint32 priority = 2 [json_name = "priority"];
                     }
                     DefaultInstance8 default_instance8 = 1 [json_name = "default-instance"];
                     message Instances {
                        message Instance {
                           uint32 instance_id = 1 [json_name = "instance-id"];
                           uint32 cost = 2 [json_name = "cost"];
                           uint32 priority = 3 [json_name = "priority"];
                        }
                        repeated Instance instance = 1 [json_name = "instance"];
                     }
                     Instances instances = 2 [json_name = "instances"];
                  }
                  DefaultProcessInstance default_process_instance = 19 [json_name = "default-process-instance"];
                  message ProcessInstances {
                     message DefaultInstances {
                        message DefaultInstance9 {
                           uint32 process_id = 1 [json_name = "process-id"];
                           uint32 cost = 2 [json_name = "cost"];
                           uint32 priority = 3 [json_name = "priority"];
                        }
                        repeated DefaultInstance9 default_instance9 = 1 [json_name = "default-instance"];
                     }
                     DefaultInstances default_instances = 1 [json_name = "default-instances"];
                     message Instances {
                        message Instance {
                           uint32 process_id = 1 [json_name = "process-id"];
                           uint32 instance_id = 2 [json_name = "instance-id"];
                           uint32 cost = 3 [json_name = "cost"];
                           uint32 priority = 4 [json_name = "priority"];
                        }
                        repeated Instance instance = 1 [json_name = "instance"];
                     }
                     Instances instances = 2 [json_name = "instances"];
                     message ProcessInstance {
                        uint32 process_id = 1 [json_name = "process-id"];
                        uint32 instance_id = 2 [json_name = "instance-id"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 priority = 4 [json_name = "priority"];
                     }
                     repeated ProcessInstance process_instance = 3 [json_name = "process-instance"];
                  }
                  ProcessInstances process_instances = 20 [json_name = "process-instances"];
               }
               MstpAttribute mstp_attribute = 4 [json_name = "mstp-attribute"];
               message FimMain {
                  enum OuterVlanEnable {
                     OuterVlanEnable_DISABLE = 0;
                     OuterVlanEnable_ENABLE = 1;
                  };
                  OuterVlanEnable outer_vlan_enable = 1 [json_name = "outer-vlan-enable"];
               }
               FimMain fim_main = 5 [json_name = "fim-main"];
               message MflpMacShift {
               }
               MflpMacShift mflp_mac_shift = 6 [json_name = "mflp-mac-shift"];
               message MacLimit {
                  message LimitType_LimitRuleRef {
                     string rule_name = 1 [json_name = "rule-name"];
                  }
                  message LimitType_LimitParameter {
                     uint32 maximum = 1 [json_name = "maximum"];
                     uint32 rate = 2 [json_name = "rate"];
                     enum Action {
                        Action_DISCARD = 0;
                        Action_FORWARD = 1;
                     };
                     Action action = 3 [json_name = "action"];
                     enum Alarm {
                        Alarm_DISABLE = 0;
                        Alarm_ENABLE = 1;
                     };
                     Alarm alarm = 4 [json_name = "alarm"];
                  }
                  oneof LimitType {
                     LimitType_LimitRuleRef limit_type_limit_rule_ref = 1 [json_name = "limit-rule-ref"];
                     LimitType_LimitParameter limit_type_limit_parameter = 2 [json_name = "limit-parameter"];
                  }
               }
               MacLimit mac_limit = 7 [json_name = "mac-limit"];
               message MacAccounting {
                  bool enable = 1 [json_name = "enable"];
               }
               MacAccounting mac_accounting = 8 [json_name = "mac-accounting"];
               message Encapsulation {
                  uint32 pvid = 1 [json_name = "pvid"];
               }
               Encapsulation encapsulation = 9 [json_name = "encapsulation"];
               message MstpProcessAttribute {
                  message ProcessInstances {
                     message ProcessInstance {
                        uint32 process_id = 1 [json_name = "process-id"];
                        uint32 instance_id = 2 [json_name = "instance-id"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 priority = 4 [json_name = "priority"];
                     }
                     repeated ProcessInstance process_instance = 1 [json_name = "process-instance"];
                  }
                  ProcessInstances process_instances = 1 [json_name = "process-instances"];
               }
               MstpProcessAttribute mstp_process_attribute = 10 [json_name = "mstp-process-attribute"];
               message ModechannelMain {
                  uint32 remain_bandwidth = 1 [json_name = "remain-bandwidth"];
                  uint64 remain_in_bit_rate = 2 [json_name = "remain-in-bit-rate"];
                  uint64 remain_out_bit_rate = 3 [json_name = "remain-out-bit-rate"];
               }
               ModechannelMain modechannel_main = 11 [json_name = "modechannel-main"];
               message PortIsolateGroups {
                  message PortIsolateGroup {
                     int32 group_id = 1 [json_name = "group-id"];
                  }
                  repeated PortIsolateGroup port_isolate_group = 1 [json_name = "port-isolate-group"];
               }
               PortIsolateGroups port_isolate_groups = 12 [json_name = "port-isolate-groups"];
               message PortAmIsolates {
                  message PortAmIsolate {
                     string if_name = 1 [json_name = "if-name"];
                  }
                  repeated PortAmIsolate port_am_isolate = 1 [json_name = "port-am-isolate"];
               }
               PortAmIsolates port_am_isolates = 13 [json_name = "port-am-isolates"];
               enum L2Mode {
                  L2Mode_DISABLE = 0;
                  L2Mode_ENABLE = 1;
               };
               L2Mode l2_mode = 14 [json_name = "l2-mode"];
            }
            MainInterface main_interface = 1 [json_name = "main-interface"];
            message L3SubInterface {
               message VlanGroups {
                  message VlanGroup {
                     uint32 id = 1 [json_name = "id"];
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_MULTIPLE = 1;
                        Mode_SINGLE = 2;
                     };
                     Mode mode = 2 [json_name = "mode"];
                     bool statistic_enable = 3 [json_name = "statistic-enable"];
                     string description = 4 [json_name = "description"];
                  }
                  repeated VlanGroup vlan_group = 1 [json_name = "vlan-group"];
               }
               VlanGroups vlan_groups = 1 [json_name = "vlan-groups"];
               message ModeChannel {
                  enum ModeChannelEnable {
                     ModeChannelEnable_DISABLE = 0;
                     ModeChannelEnable_ENABLE = 1;
                  };
                  ModeChannelEnable mode_channel_enable = 1 [json_name = "mode-channel-enable"];
                  uint32 bandwidth = 2 [json_name = "bandwidth"];
               }
               ModeChannel mode_channel = 2 [json_name = "mode-channel"];
               message FlowType_VlanType {
                  message VlanTypeDot1Q {
                     uint32 vlan_type_vid = 1 [json_name = "vlan-type-vid"];
                  }
                  VlanTypeDot1Q vlan_type_dot1q = 1 [json_name = "vlan-type-dot1q"];
               }
               message FlowType_Dot1QTermination {
                  message Dot1QTermination7 {
                     enum Tag {
                        Tag_NONE = 0;
                        Tag_LOCALX_SWITCH = 1;
                        Tag_RTX_PROTOCOL = 2;
                     };
                     Tag tag = 1 [json_name = "tag"];
                     bool arp_broadcast_enable = 2 [json_name = "arp-broadcast-enable"];
                     message Dot1QVlans {
                        message Dot1QVlansGroup {
                           uint32 group_id = 1 [json_name = "group-id"];
                           string vlan_list = 2 [json_name = "vlan-list"];
                        }
                        repeated Dot1QVlansGroup dot1q_vlans_group = 1 [json_name = "dot1q-vlans-group"];
                        message Dot1QVlans9 {
                           string vlan_list = 1 [json_name = "vlan-list"];
                        }
                        Dot1QVlans9 dot1q_vlans = 2 [json_name = "dot1q-vlans"];
                     }
                     Dot1QVlans dot1q_vlans = 3 [json_name = "dot1q-vlans"];
                     message Dot1QVlansPolicy {
                        message PolicyVlans {
                           message PolicyVlan {
                              uint32 vlan_id_begin = 1 [json_name = "vlan-id-begin"];
                              uint32 vlan_id_end = 2 [json_name = "vlan-id-end"];
                              enum PolicyType {
                                 INVALID_ENUM_VALUE_PolicyType = 0;
                                 PolicyType_X_8021P = 1;
                                 PolicyType_DSCP = 2;
                                 PolicyType_PPPOE = 3;
                                 PolicyType_DEFAULT = 4;
                              };
                              PolicyType policy_type = 3 [json_name = "policy-type"];
                              string value_8021p = 4 [json_name = "value-8021p"];
                              string dscp_values = 5 [json_name = "dscp-values"];
                           }
                           repeated PolicyVlan policy_vlan = 1 [json_name = "policy-vlan"];
                        }
                        PolicyVlans policy_vlans = 1 [json_name = "policy-vlans"];
                        message PolicyVlanGroups {
                           message PolicyVlanGroup {
                              uint32 group_id = 1 [json_name = "group-id"];
                              uint32 vlan_id_begin = 2 [json_name = "vlan-id-begin"];
                              uint32 vlan_id_end = 3 [json_name = "vlan-id-end"];
                              enum PolicyType {
                                 INVALID_ENUM_VALUE_PolicyType = 0;
                                 PolicyType_X_8021P = 1;
                                 PolicyType_DSCP = 2;
                                 PolicyType_PPPOE = 3;
                                 PolicyType_DEFAULT = 4;
                              };
                              PolicyType policy_type = 4 [json_name = "policy-type"];
                              string value_8021p = 5 [json_name = "value-8021p"];
                              string dscp_values = 6 [json_name = "dscp-values"];
                           }
                           repeated PolicyVlanGroup policy_vlan_group = 1 [json_name = "policy-vlan-group"];
                        }
                        PolicyVlanGroups policy_vlan_groups = 2 [json_name = "policy-vlan-groups"];
                     }
                     Dot1QVlansPolicy dot1q_vlans_policy = 4 [json_name = "dot1q-vlans-policy"];
                     message Vrrps {
                        message Vrrp {
                           uint32 vlan_id = 1 [json_name = "vlan-id"];
                        }
                        repeated Vrrp vrrp = 1 [json_name = "vrrp"];
                     }
                     Vrrps vrrps = 5 [json_name = "vrrps"];
                     message Pwtag {
                        enum TagVidMode {
                           TagVidMode_NULL = 0;
                           TagVidMode_OUTERX_VLAN = 1;
                           TagVidMode_INNERX_VLAN = 2;
                           TagVidMode_USERX_DEFINE = 3;
                        };
                        TagVidMode tag_vid_mode = 1 [json_name = "tag-vid-mode"];
                        uint32 tag_vid = 2 [json_name = "tag-vid"];
                        enum Tag8021PMode {
                           Tag8021PMode_NULL = 0;
                           Tag8021PMode_OUTERX_VLAN = 1;
                           Tag8021PMode_INNERX_VLAN = 2;
                           Tag8021PMode_USERX_DEFINE = 3;
                        };
                        Tag8021PMode tag_8021p_mode = 3 [json_name = "tag-8021p-mode"];
                        uint32 tag_8021p_value = 4 [json_name = "tag-8021p-value"];
                     }
                     Pwtag pwtag = 6 [json_name = "pwtag"];
                     message TerminationModeEnable {
                        bool single_mode_enable = 1 [json_name = "single-mode-enable"];
                     }
                     TerminationModeEnable termination_mode_enable = 7 [json_name = "termination-mode-enable"];
                  }
                  Dot1QTermination7 dot1q_termination = 1 [json_name = "dot1q-termination"];
               }
               message FlowType_QinqTermination {
                  message QinqTermination7 {
                     enum Tag {
                        Tag_NONE = 0;
                        Tag_LOCALX_SWITCH = 1;
                        Tag_RTX_PROTOCOL = 2;
                     };
                     Tag tag = 1 [json_name = "tag"];
                     bool arp_broadcast_enable = 2 [json_name = "arp-broadcast-enable"];
                     message Remark8021P {
                        enum RemarkType {
                           RemarkType_PRECEDENCE = 0;
                           RemarkType_TRUSTX_CEX_8021P = 1;
                           RemarkType_TRUSTX_PEX_8021P = 2;
                        };
                        RemarkType remark_type = 1 [json_name = "remark-type"];
                        uint32 precedence_value = 2 [json_name = "precedence-value"];
                     }
                     Remark8021P remark_8021p = 3 [json_name = "remark-8021p"];
                     message SymmetryMode {
                        enum SymmetryType {
                           SymmetryType_ASYMMETRY = 0;
                           SymmetryType_SYMMETRY = 1;
                           SymmetryType_TRANSPARENT = 2;
                        };
                        SymmetryType symmetry_type = 1 [json_name = "symmetry-type"];
                        enum UserMode {
                           UserMode_DISABLE = 0;
                           UserMode_ENABLE = 1;
                        };
                        UserMode user_mode = 2 [json_name = "user-mode"];
                     }
                     SymmetryMode symmetry_mode = 4 [json_name = "symmetry-mode"];
                     message QinqVids {
                        message QinqVid {
                           uint32 pe_vlan_begin = 1 [json_name = "pe-vlan-begin"];
                           uint32 pe_vlan_end = 2 [json_name = "pe-vlan-end"];
                           uint32 ce_vlan_begin = 3 [json_name = "ce-vlan-begin"];
                           uint32 ce_vlan_end = 4 [json_name = "ce-vlan-end"];
                           uint32 group_id = 5 [json_name = "group-id"];
                        }
                        repeated QinqVid qinq_vid = 1 [json_name = "qinq-vid"];
                     }
                     QinqVids qinq_vids = 5 [json_name = "qinq-vids"];
                     message Pwtag {
                        enum TagVidMode {
                           TagVidMode_NULL = 0;
                           TagVidMode_OUTERX_VLAN = 1;
                           TagVidMode_INNERX_VLAN = 2;
                           TagVidMode_USERX_DEFINE = 3;
                        };
                        TagVidMode tag_vid_mode = 1 [json_name = "tag-vid-mode"];
                        uint32 tag_vid = 2 [json_name = "tag-vid"];
                        enum Tag8021PMode {
                           Tag8021PMode_NULL = 0;
                           Tag8021PMode_OUTERX_VLAN = 1;
                           Tag8021PMode_INNERX_VLAN = 2;
                           Tag8021PMode_USERX_DEFINE = 3;
                        };
                        Tag8021PMode tag_8021p_mode = 3 [json_name = "tag-8021p-mode"];
                        uint32 tag_8021p_value = 4 [json_name = "tag-8021p-value"];
                     }
                     Pwtag pwtag = 6 [json_name = "pwtag"];
                     message QinqVidCeAny {
                        string pe_vlan_list = 1 [json_name = "pe-vlan-list"];
                     }
                     QinqVidCeAny qinq_vid_ce_any = 7 [json_name = "qinq-vid-ce-any"];
                     message Vrrps {
                        message Vrrp {
                           uint32 pe_vlan_id = 1 [json_name = "pe-vlan-id"];
                           uint32 ce_vlan_id = 2 [json_name = "ce-vlan-id"];
                        }
                        repeated Vrrp vrrp = 1 [json_name = "vrrp"];
                     }
                     Vrrps vrrps = 8 [json_name = "vrrps"];
                  }
                  QinqTermination7 qinq_termination = 1 [json_name = "qinq-termination"];
               }
               message FlowType_QinqStacking {
                  message QinqStacking7 {
                     uint32 pe_vid = 1 [json_name = "pe-vid"];
                     message StackingVid {
                        uint32 vlan_id_begin = 1 [json_name = "vlan-id-begin"];
                        uint32 vlan_id_end = 2 [json_name = "vlan-id-end"];
                        uint32 group_id = 3 [json_name = "group-id"];
                     }
                     repeated StackingVid stacking_vid = 2 [json_name = "stacking-vid"];
                     message StackingModeEnable {
                        bool single_mode_enable = 1 [json_name = "single-mode-enable"];
                     }
                     StackingModeEnable stacking_mode_enable = 3 [json_name = "stacking-mode-enable"];
                     message Pwtag {
                        enum TagVidMode {
                           TagVidMode_NULL = 0;
                           TagVidMode_OUTERX_VLAN = 1;
                           TagVidMode_INNERX_VLAN = 2;
                           TagVidMode_USERX_DEFINE = 3;
                        };
                        TagVidMode tag_vid_mode = 1 [json_name = "tag-vid-mode"];
                        uint32 tag_vid = 2 [json_name = "tag-vid"];
                        enum Tag8021PMode {
                           Tag8021PMode_NULL = 0;
                           Tag8021PMode_OUTERX_VLAN = 1;
                           Tag8021PMode_INNERX_VLAN = 2;
                           Tag8021PMode_USERX_DEFINE = 3;
                        };
                        Tag8021PMode tag_8021p_mode = 3 [json_name = "tag-8021p-mode"];
                        uint32 tag_8021p_value = 4 [json_name = "tag-8021p-value"];
                     }
                     Pwtag pwtag = 4 [json_name = "pwtag"];
                  }
                  QinqStacking7 qinq_stacking = 1 [json_name = "qinq-stacking"];
               }
               message FlowType_QinqMapping {
                  message QinqMapping7 {
                     message MappingVids {
                        message MappingVid {
                           uint32 vlan_id = 1 [json_name = "vlan-id"];
                           uint32 mapping_vlan_id = 2 [json_name = "mapping-vlan-id"];
                           uint32 group_id = 3 [json_name = "group-id"];
                        }
                        repeated MappingVid mapping_vid = 1 [json_name = "mapping-vid"];
                     }
                     MappingVids mapping_vids = 1 [json_name = "mapping-vids"];
                     message Pwtag {
                        enum TagVidMode {
                           TagVidMode_NULL = 0;
                           TagVidMode_OUTERX_VLAN = 1;
                           TagVidMode_INNERX_VLAN = 2;
                           TagVidMode_USERX_DEFINE = 3;
                        };
                        TagVidMode tag_vid_mode = 1 [json_name = "tag-vid-mode"];
                        uint32 tag_vid = 2 [json_name = "tag-vid"];
                        enum Tag8021PMode {
                           Tag8021PMode_NULL = 0;
                           Tag8021PMode_OUTERX_VLAN = 1;
                           Tag8021PMode_INNERX_VLAN = 2;
                           Tag8021PMode_USERX_DEFINE = 3;
                        };
                        Tag8021PMode tag_8021p_mode = 3 [json_name = "tag-8021p-mode"];
                        uint32 tag_8021p_value = 4 [json_name = "tag-8021p-value"];
                     }
                     Pwtag pwtag = 2 [json_name = "pwtag"];
                  }
                  QinqMapping7 qinq_mapping = 1 [json_name = "qinq-mapping"];
               }
               message FlowType_VlanTypePolicy {
                  message VlanTypePolicy7 {
                     uint32 vlan_type_vid = 1 [json_name = "vlan-type-vid"];
                     enum PolicyType {
                        INVALID_ENUM_VALUE_PolicyType = 0;
                        PolicyType_X_8021P = 1;
                        PolicyType_DSCP = 2;
                        PolicyType_PPPOE = 3;
                        PolicyType_DEFAULT = 4;
                     };
                     PolicyType policy_type = 2 [json_name = "policy-type"];
                     string value_8021p = 3 [json_name = "value-8021p"];
                     string dscp_values = 4 [json_name = "dscp-values"];
                  }
                  VlanTypePolicy7 vlan_type_policy = 1 [json_name = "vlan-type-policy"];
               }
               message FlowType_UntagPolicy {
                  message UntagPolicy7 {
                     enum PolicyType {
                        INVALID_ENUM_VALUE_PolicyType = 0;
                        PolicyType_X_8021P = 1;
                        PolicyType_DSCP = 2;
                        PolicyType_PPPOE = 3;
                        PolicyType_DEFAULT = 4;
                     };
                     PolicyType policy_type = 1 [json_name = "policy-type"];
                     string dscp_values = 2 [json_name = "dscp-values"];
                  }
                  UntagPolicy7 untag_policy = 1 [json_name = "untag-policy"];
               }
               message FlowType_UserVlanComm {
                  message UserVlanCommon {
                     message UserVlanQinqs {
                        message UserVlanQinq {
                           uint32 pe_vlan_begin = 1 [json_name = "pe-vlan-begin"];
                           uint32 pe_vlan_end = 2 [json_name = "pe-vlan-end"];
                           uint32 ce_vlan_begin = 3 [json_name = "ce-vlan-begin"];
                           uint32 ce_vlan_end = 4 [json_name = "ce-vlan-end"];
                           message Binding8021PVpns {
                              message Binding8021PVpn {
                                 uint32 prioirty = 1 [json_name = "prioirty"];
                                 string vpn_instance = 2 [json_name = "vpn-instance"];
                              }
                              repeated Binding8021PVpn binding_8021p_vpn = 1 [json_name = "binding-8021p-vpn"];
                           }
                           Binding8021PVpns binding_8021p_vpns = 5 [json_name = "binding-8021p-vpns"];
                        }
                        repeated UserVlanQinq user_vlan_qinq = 1 [json_name = "user-vlan-qinq"];
                        message Descriptions {
                           message Description {
                              uint32 pe_vlan_id = 1 [json_name = "pe-vlan-id"];
                              uint32 ce_vlan_id = 2 [json_name = "ce-vlan-id"];
                              string description11 = 3 [json_name = "description"];
                           }
                           repeated Description description = 1 [json_name = "description"];
                        }
                        Descriptions descriptions = 2 [json_name = "descriptions"];
                     }
                     UserVlanQinqs user_vlan_qinqs = 1 [json_name = "user-vlan-qinqs"];
                     message UserVlanDot1Q {
                        string vlan_list = 1 [json_name = "vlan-list"];
                        message Descriptions {
                           message Description {
                              uint32 vlan_id = 1 [json_name = "vlan-id"];
                              string description11 = 2 [json_name = "description"];
                           }
                           repeated Description description = 1 [json_name = "description"];
                        }
                        Descriptions descriptions = 2 [json_name = "descriptions"];
                     }
                     UserVlanDot1Q user_vlan_dot1q = 2 [json_name = "user-vlan-dot1q"];
                  }
                  UserVlanCommon user_vlan_common = 1 [json_name = "user-vlan-common"];
               }
               message FlowType_UserVlanAny {
                  message UserVlanAny7 {
                  }
                  UserVlanAny7 user_vlan_any = 1 [json_name = "user-vlan-any"];
               }
               message FlowType_QinqStackingPolicy {
                  message StackingPolicy {
                     message PolicyVlans {
                        message PolicyVlan {
                           uint32 vlan_id_begin = 1 [json_name = "vlan-id-begin"];
                           uint32 vlan_id_end = 2 [json_name = "vlan-id-end"];
                           enum PolicyType {
                              INVALID_ENUM_VALUE_PolicyType = 0;
                              PolicyType_X_8021P = 1;
                              PolicyType_DSCP = 2;
                              PolicyType_PPPOE = 3;
                              PolicyType_DEFAULT = 4;
                           };
                           PolicyType policy_type = 3 [json_name = "policy-type"];
                           string value_8021p = 4 [json_name = "value-8021p"];
                           string dscp_values = 5 [json_name = "dscp-values"];
                        }
                        repeated PolicyVlan policy_vlan = 1 [json_name = "policy-vlan"];
                     }
                     PolicyVlans policy_vlans = 1 [json_name = "policy-vlans"];
                     message PolicyVlanGroups {
                        message PolicyVlanGroup {
                           uint32 group_id = 1 [json_name = "group-id"];
                           uint32 vlan_id_begin = 2 [json_name = "vlan-id-begin"];
                           uint32 vlan_id_end = 3 [json_name = "vlan-id-end"];
                           enum PolicyType {
                              INVALID_ENUM_VALUE_PolicyType = 0;
                              PolicyType_X_8021P = 1;
                              PolicyType_DSCP = 2;
                              PolicyType_PPPOE = 3;
                              PolicyType_DEFAULT = 4;
                           };
                           PolicyType policy_type = 4 [json_name = "policy-type"];
                           string value_8021p = 5 [json_name = "value-8021p"];
                           string dscp_values = 6 [json_name = "dscp-values"];
                        }
                        repeated PolicyVlanGroup policy_vlan_group = 1 [json_name = "policy-vlan-group"];
                     }
                     PolicyVlanGroups policy_vlan_groups = 2 [json_name = "policy-vlan-groups"];
                  }
                  StackingPolicy stacking_policy = 1 [json_name = "stacking-policy"];
               }
               oneof FlowType {
                  FlowType_VlanType flow_type_vlan_type = 3 [json_name = "vlan-type"];
                  FlowType_Dot1QTermination flow_type_dot1q_termination = 4 [json_name = "dot1q-termination"];
                  FlowType_QinqTermination flow_type_qinq_termination = 5 [json_name = "qinq-termination"];
                  FlowType_QinqStacking flow_type_qinq_stacking = 6 [json_name = "qinq-stacking"];
                  FlowType_QinqMapping flow_type_qinq_mapping = 7 [json_name = "qinq-mapping"];
                  FlowType_VlanTypePolicy flow_type_vlan_type_policy = 8 [json_name = "vlan-type-policy"];
                  FlowType_UntagPolicy flow_type_untag_policy = 9 [json_name = "untag-policy"];
                  FlowType_UserVlanComm flow_type_user_vlan_comm = 10 [json_name = "user-vlan-comm"];
                  FlowType_UserVlanAny flow_type_user_vlan_any = 11 [json_name = "user-vlan-any"];
                  FlowType_QinqStackingPolicy flow_type_qinq_stacking_policy = 12 [json_name = "qinq-stacking-policy"];
               }
            }
            L3SubInterface l3_sub_interface = 2 [json_name = "l3-sub-interface"];
            message L2SubInterface {
               enum LocalSwitch {
                  LocalSwitch_DISABLE = 0;
                  LocalSwitch_ENABLE = 1;
               };
               LocalSwitch local_switch = 1 [json_name = "local-switch"];
               message FlowAction {
                  enum ActionType {
                     ActionType_POPX_OUTER = 0;
                     ActionType_PUSH1X_LAYER = 1;
                     ActionType_SWAP = 2;
                     ActionType_MAPX_OFFSETX_INCREASE = 3;
                     ActionType_MAPX_1X_TOX_1 = 4;
                     ActionType_MAPX_2X_TOX_1 = 5;
                     ActionType_MAPX_1X_TOX_2 = 6;
                     ActionType_MAPX_2X_TOX_2 = 7;
                     ActionType_POPX_DOUBLE = 8;
                     ActionType_PUSH2X_LAYER = 9;
                     ActionType_MAPX_OFFSETX_DECREASE = 10;
                     ActionType_MAPX_SINGLEX_OUTBOUND = 12;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  uint32 out_vlan_id = 2 [json_name = "out-vlan-id"];
                  uint32 inner_vlan_id = 3 [json_name = "inner-vlan-id"];
                  uint32 outer_8021p = 4 [json_name = "outer-8021p"];
                  uint32 inner_8021p = 5 [json_name = "inner-8021p"];
                  uint32 offset_value = 6 [json_name = "offset-value"];
               }
               FlowAction flow_action = 2 [json_name = "flow-action"];
               message FimL2Sub {
                  enum EgressStrictFilter {
                     EgressStrictFilter_DISABLE = 0;
                     EgressStrictFilter_ENABLE = 1;
                  };
                  EgressStrictFilter egress_strict_filter = 1 [json_name = "egress-strict-filter"];
               }
               FimL2Sub fim_l2_sub = 3 [json_name = "fim-l2-sub"];
               message FlowType_Default {
                  message Default7 {
                  }
                  Default7 default7 = 1 [json_name = "default"];
               }
               message FlowType_Untag {
                  message Untag7 {
                  }
                  Untag7 untag7 = 1 [json_name = "untag"];
               }
               message FlowType_Dot1Q {
                  message Dot1Q7 {
                     message Policy_NoPolicy {
                        message Vlans {
                           string vlan_list = 1 [json_name = "vlan-list"];
                        }
                        Vlans vlans = 1 [json_name = "vlans"];
                     }
                     message Policy_Policy {
                        message PolicyVlans {
                           message PolicyVlan {
                              uint32 vlan_id_begin = 1 [json_name = "vlan-id-begin"];
                              uint32 vlan_id_end = 2 [json_name = "vlan-id-end"];
                              string dot1q_8021p = 3 [json_name = "dot1q-8021p"];
                           }
                           repeated PolicyVlan policy_vlan = 1 [json_name = "policy-vlan"];
                        }
                        PolicyVlans policy_vlans = 1 [json_name = "policy-vlans"];
                     }
                     oneof Policy {
                        Policy_NoPolicy policy_no_policy = 1 [json_name = "no-policy"];
                        Policy_Policy policy_policy = 2 [json_name = "policy"];
                     }
                  }
                  Dot1Q7 dot1q7 = 1 [json_name = "dot1q"];
               }
               message FlowType_Qinq {
                  message Qinqs {
                     message QinqVids {
                        message QinqVid {
                           uint32 pe_vlan_id = 1 [json_name = "pe-vlan-id"];
                           string ce_vlan_list = 2 [json_name = "ce-vlan-list"];
                        }
                        repeated QinqVid qinq_vid = 1 [json_name = "qinq-vid"];
                     }
                     QinqVids qinq_vids = 1 [json_name = "qinq-vids"];
                     message QinqVidCeDefault {
                        string pe_vlan_list = 1 [json_name = "pe-vlan-list"];
                     }
                     QinqVidCeDefault qinq_vid_ce_default = 2 [json_name = "qinq-vid-ce-default"];
                     message QinqWithPeSegments {
                        message QinqWithPeSegment {
                           uint32 pe_vlan_begin = 1 [json_name = "pe-vlan-begin"];
                           uint32 pe_vlan_end = 2 [json_name = "pe-vlan-end"];
                           uint32 ce_vlan_begin = 3 [json_name = "ce-vlan-begin"];
                           uint32 ce_vlan_end = 4 [json_name = "ce-vlan-end"];
                        }
                        repeated QinqWithPeSegment qinq_with_pe_segment = 1 [json_name = "qinq-with-pe-segment"];
                     }
                     QinqWithPeSegments qinq_with_pe_segments = 3 [json_name = "qinq-with-pe-segments"];
                  }
                  Qinqs qinqs = 1 [json_name = "qinqs"];
               }
               oneof FlowType {
                  FlowType_Default flow_type_default = 4 [json_name = "default"];
                  FlowType_Untag flow_type_untag = 5 [json_name = "untag"];
                  FlowType_Dot1Q flow_type_dot1q = 6 [json_name = "dot1q"];
                  FlowType_Qinq flow_type_qinq = 7 [json_name = "qinq"];
               }
               message HubMode {
               }
               HubMode hub_mode = 8 [json_name = "hub-mode"];
               message MacAddressFlapping {
                  bool error_down = 1 [json_name = "error-down"];
               }
               MacAddressFlapping mac_address_flapping = 9 [json_name = "mac-address-flapping"];
            }
            L2SubInterface l2_sub_interface = 3 [json_name = "l2-sub-interface"];
            message Mac {
               message SubInterfaceMacLimit {
                  message LimitType_LimitRuleRef {
                     string rule_name = 1 [json_name = "rule-name"];
                  }
                  message LimitType_LimitParameters {
                     uint32 maximum = 1 [json_name = "maximum"];
                     uint32 rate = 2 [json_name = "rate"];
                     enum Action {
                        Action_DISCARD = 0;
                        Action_FORWARD = 1;
                     };
                     Action action = 3 [json_name = "action"];
                     enum Alarm {
                        Alarm_DISABLE = 0;
                        Alarm_ENABLE = 1;
                     };
                     Alarm alarm = 4 [json_name = "alarm"];
                  }
                  oneof LimitType {
                     LimitType_LimitRuleRef limit_type_limit_rule_ref = 1 [json_name = "limit-rule-ref"];
                     LimitType_LimitParameters limit_type_limit_parameters = 2 [json_name = "limit-parameters"];
                  }
               }
               SubInterfaceMacLimit sub_interface_mac_limit = 1 [json_name = "sub-interface-mac-limit"];
               message SubInterfaceSuppressions {
                  message SubInterfaceSuppression {
                     enum Type {
                        Type_BROADCAST = 0;
                        Type_MULTICAST = 1;
                        Type_UNKNOWNX_UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     Direction direction = 2 [json_name = "direction"];
                     uint64 cir = 3 [json_name = "cir"];
                     uint64 cbs = 4 [json_name = "cbs"];
                  }
                  repeated SubInterfaceSuppression sub_interface_suppression = 1 [json_name = "sub-interface-suppression"];
               }
               SubInterfaceSuppressions sub_interface_suppressions = 2 [json_name = "sub-interface-suppressions"];
               message Discards {
                  message Discard {
                     enum Type {
                        Type_BROADCASTX_DISCARD = 0;
                        Type_UNKNOWNX_MULTICASTX_DISCARD = 1;
                        Type_UNKNOWNX_UNICASTX_DISCARD = 2;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  repeated Discard discard = 1 [json_name = "discard"];
               }
               Discards discards = 3 [json_name = "discards"];
            }
            Mac mac = 4 [json_name = "mac"];
            message L2Pt {
               message WellKnownProtocols {
                  message WellKnownProtocol {
                     enum ProtocolType {
                        INVALID_ENUM_VALUE_ProtocolType = 0;
                        ProtocolType_EOAM3AH = 1;
                        ProtocolType_LLDP = 2;
                        ProtocolType_GMRP = 3;
                        ProtocolType_GVRP = 4;
                        ProtocolType_DLDP = 5;
                        ProtocolType_HGMP = 6;
                        ProtocolType_VTP = 7;
                        ProtocolType_DTP = 8;
                        ProtocolType_CDP = 9;
                        ProtocolType_UDLD = 10;
                        ProtocolType_PAGP = 11;
                        ProtocolType_PVSTX_PLUS = 12;
                        ProtocolType_STP = 13;
                        ProtocolType_LACP = 14;
                        ProtocolType_MVRP = 15;
                        ProtocolType_MMRP = 16;
                        ProtocolType_EX_LMI = 17;
                        ProtocolType_X_802X_1X = 18;
                        ProtocolType_SSTP = 19;
                     };
                     ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                     enum Action {
                        Action_ENABLE = 0;
                        Action_DROP = 1;
                        Action_REVERSE = 2;
                        Action_REVERSEX_DROP = 3;
                     };
                     Action action = 2 [json_name = "action"];
                     uint32 drop_threshold = 3 [json_name = "drop-threshold"];
                     message Statistics {
                        uint64 input_packets = 1 [json_name = "input-packets"];
                        uint64 output_packets = 2 [json_name = "output-packets"];
                        uint64 drop_packets = 3 [json_name = "drop-packets"];
                     }
                     Statistics statistics = 4 [json_name = "statistics"];
                  }
                  repeated WellKnownProtocol well_known_protocol = 1 [json_name = "well-known-protocol"];
               }
               WellKnownProtocols well_known_protocols = 1 [json_name = "well-known-protocols"];
               message UserDefinedProtocols {
                  message UserDefinedProtocol {
                     string protocol_name = 1 [json_name = "protocol-name"];
                     enum Action {
                        Action_ENABLE = 0;
                        Action_DROP = 1;
                        Action_REVERSE = 2;
                        Action_REVERSEX_DROP = 3;
                     };
                     Action action = 2 [json_name = "action"];
                     uint32 drop_threshold = 3 [json_name = "drop-threshold"];
                     message Statistics {
                        uint64 input_packets = 1 [json_name = "input-packets"];
                        uint64 output_packets = 2 [json_name = "output-packets"];
                        uint64 drop_packets = 3 [json_name = "drop-packets"];
                     }
                     Statistics statistics = 4 [json_name = "statistics"];
                  }
                  repeated UserDefinedProtocol user_defined_protocol = 1 [json_name = "user-defined-protocol"];
               }
               UserDefinedProtocols user_defined_protocols = 2 [json_name = "user-defined-protocols"];
            }
            L2Pt l2pt = 5 [json_name = "l2pt"];
            message MacFlapping {
               message BlockPriority {
                  uint32 priority = 1 [json_name = "priority"];
               }
               BlockPriority block_priority = 1 [json_name = "block-priority"];
            }
            MacFlapping mac_flapping = 6 [json_name = "mac-flapping"];
         }
         Ethernet ethernet = 43 [json_name = "ethernet"];
         message Bfd {
            bool enable_trunk_crc_bit_error = 1 [json_name = "enable-trunk-crc-bit-error"];
            bool enable_trigger_if_down = 2 [json_name = "enable-trigger-if-down"];
         }
         Bfd bfd = 44 [json_name = "bfd"];
         message Qos {
            message Trusts {
               message Trust {
                  enum Type {
                     Type_IPX_DSCP = 0;
                     Type_X_8021P = 1;
                     Type_OUTERX_8021P = 2;
                     Type_INNERX_8021P = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     Direction_INX_OUTBOUND = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  bool vlan_mode = 3 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 4 [json_name = "begin-vlan"];
                  uint32 end_vlan = 5 [json_name = "end-vlan"];
                  string diffserv_domain_name = 6 [json_name = "diffserv-domain-name"];
                  bool vpn_mode = 7 [json_name = "vpn-mode"];
               }
               repeated Trust trust = 1 [json_name = "trust"];
            }
            Trusts trusts = 1 [json_name = "trusts"];
            message TrafficPolicyApplys {
               message TrafficPolicyApply {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum Layer {
                     Layer_NONE = 0;
                     Layer_LINK = 1;
                     Layer_ALL = 2;
                     Layer_MPLS = 3;
                     Layer_VXLAN = 4;
                  };
                  Layer layer = 3 [json_name = "layer"];
                  bool vlan_mode = 4 [json_name = "vlan-mode"];
                  uint32 pe_vlan_id = 5 [json_name = "pe-vlan-id"];
                  string vlan_id = 6 [json_name = "vlan-id"];
                  enum Identifier {
                     Identifier_NO = 0;
                     Identifier_NONE = 1;
                     Identifier_VID = 2;
                     Identifier_CEX_VID = 3;
                     Identifier_VIDX_CEX_VID = 4;
                  };
                  Identifier identifier = 7 [json_name = "identifier"];
               }
               repeated TrafficPolicyApply traffic_policy_apply = 1 [json_name = "traffic-policy-apply"];
            }
            TrafficPolicyApplys traffic_policy_applys = 2 [json_name = "traffic-policy-applys"];
            message ProfileApplys {
               message ProfileApply {
                  string profile_name = 1 [json_name = "profile-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum Type {
                     Type_INTERFACE = 0;
                     Type_VLAN = 1;
                     Type_PE = 2;
                  };
                  Type type = 3 [json_name = "type"];
                  uint32 pe_vlan_id = 4 [json_name = "pe-vlan-id"];
                  uint32 ce_begin_vlan_id = 5 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 6 [json_name = "ce-end-vlan-id"];
                  enum IdentifyType {
                     IdentifyType_NONE = 0;
                     IdentifyType_VLAN = 1;
                     IdentifyType_PEX_VID = 2;
                     IdentifyType_CEX_VID = 3;
                     IdentifyType_PEX_CEX_VID = 4;
                     IdentifyType_VID = 5;
                     IdentifyType_EVCX_CEX_VID = 6;
                     IdentifyType_VIDX_CEX_VID = 7;
                  };
                  IdentifyType identify_type = 7 [json_name = "identify-type"];
                  enum LinkageBandwidth {
                     LinkageBandwidth_DISABLE = 0;
                     LinkageBandwidth_ENABLE = 1;
                  };
                  LinkageBandwidth linkage_bandwidth = 8 [json_name = "linkage-bandwidth"];
                  string group_name = 9 [json_name = "group-name"];
               }
               repeated ProfileApply profile_apply = 1 [json_name = "profile-apply"];
            }
            ProfileApplys profile_applys = 3 [json_name = "profile-applys"];
            message UserQueueApplys {
               message UserQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 pir = 3 [json_name = "pir"];
                  string flow_queue_name = 4 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 5 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 6 [json_name = "user-group-queue-name"];
                  string service_template_name = 7 [json_name = "service-template-name"];
                  enum AdjustOnCard {
                     AdjustOnCard_DISABLE = 0;
                     AdjustOnCard_ENABLE = 1;
                  };
                  AdjustOnCard adjust_on_card = 8 [json_name = "adjust-on-card"];
                  message UserQueueApplysStats {
                     message UserQueueApplysStat {
                        enum ServiceClass {
                           ServiceClass_BE = 0;
                           ServiceClass_AF1 = 1;
                           ServiceClass_AF2 = 2;
                           ServiceClass_AF3 = 3;
                           ServiceClass_AF4 = 4;
                           ServiceClass_EF = 5;
                           ServiceClass_CS6 = 6;
                           ServiceClass_CS7 = 7;
                           ServiceClass_TOTAL = 8;
                           ServiceClass_COS0 = 9;
                           ServiceClass_COS1 = 10;
                           ServiceClass_COS2 = 11;
                           ServiceClass_COS3 = 12;
                        };
                        ServiceClass service_class = 1 [json_name = "service-class"];
                        uint64 pass_packets = 2 [json_name = "pass-packets"];
                        uint64 pass_bytes = 3 [json_name = "pass-bytes"];
                        uint64 pass_packet_rate = 4 [json_name = "pass-packet-rate"];
                        uint64 pass_byte_rate = 5 [json_name = "pass-byte-rate"];
                        uint64 drop_packets = 6 [json_name = "drop-packets"];
                        uint64 drop_bytes = 7 [json_name = "drop-bytes"];
                        uint64 drop_packet_rate = 8 [json_name = "drop-packet-rate"];
                        uint64 drop_byte_rate = 9 [json_name = "drop-byte-rate"];
                     }
                     repeated UserQueueApplysStat user_queue_applys_stat = 1 [json_name = "user-queue-applys-stat"];
                  }
                  UserQueueApplysStats user_queue_applys_stats = 9 [json_name = "user-queue-applys-stats"];
               }
               repeated UserQueueApply user_queue_apply = 1 [json_name = "user-queue-apply"];
            }
            UserQueueApplys user_queue_applys = 4 [json_name = "user-queue-applys"];
            message PortQueues {
               message PortQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
                  message ConfigType_ShapingMode {
                     enum QueueScheduleMode {
                        QueueScheduleMode_PQ = 0;
                        QueueScheduleMode_WFQ = 1;
                        QueueScheduleMode_LPQ = 2;
                     };
                     QueueScheduleMode queue_schedule_mode = 1 [json_name = "queue-schedule-mode"];
                     uint32 weight = 2 [json_name = "weight"];
                     uint32 pbs = 3 [json_name = "pbs"];
                     enum LowLatency {
                        INVALID_ENUM_VALUE_LowLatency = 0;
                        LowLatency_ENABLE = 1;
                     };
                     LowLatency low_latency = 4 [json_name = "low-latency"];
                     message ShapingParameters_Shaping {
                        uint32 shaping_value = 1 [json_name = "shaping-value"];
                     }
                     message ShapingParameters_ShapingPercent {
                        uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                     }
                     oneof ShapingParameters {
                        ShapingParameters_Shaping shaping_parameters_shaping = 5 [json_name = "shaping"];
                        ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 6 [json_name = "shaping-percent"];
                     }
                  }
                  message ConfigType_CirMode {
                     enum CirScheduleMode {
                        CirScheduleMode_PQ = 0;
                     };
                     CirScheduleMode cir_schedule_mode = 1 [json_name = "cir-schedule-mode"];
                     enum PirScheduleMode {
                        PirScheduleMode_PQ = 0;
                        PirScheduleMode_WFQ = 1;
                        PirScheduleMode_LPQ = 2;
                     };
                     PirScheduleMode pir_schedule_mode = 2 [json_name = "pir-schedule-mode"];
                     uint32 pir_weight = 3 [json_name = "pir-weight"];
                     uint32 cbs = 4 [json_name = "cbs"];
                     uint32 pir_pbs = 5 [json_name = "pir-pbs"];
                     message CirParameters_Cir {
                        uint32 cir_value = 1 [json_name = "cir-value"];
                        uint32 pir_value = 2 [json_name = "pir-value"];
                     }
                     message CirParameters_CirPercent {
                        uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                        uint32 pir_percentage = 2 [json_name = "pir-percentage"];
                     }
                     oneof CirParameters {
                        CirParameters_Cir cir_parameters_cir = 6 [json_name = "cir"];
                        CirParameters_CirPercent cir_parameters_cir_percent = 7 [json_name = "cir-percent"];
                     }
                  }
                  oneof ConfigType {
                     ConfigType_ShapingMode config_type_shaping_mode = 3 [json_name = "shaping-mode"];
                     ConfigType_CirMode config_type_cir_mode = 4 [json_name = "cir-mode"];
                  }
               }
               repeated PortQueue port_queue = 1 [json_name = "port-queue"];
            }
            PortQueues port_queues = 5 [json_name = "port-queues"];
            message PortQueueStates {
               message PortQueueState {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
                  message ConfigType_ShapingMode {
                     enum QueueScheduleMode {
                        QueueScheduleMode_PQ = 0;
                        QueueScheduleMode_WFQ = 1;
                        QueueScheduleMode_LPQ = 2;
                     };
                     QueueScheduleMode queue_schedule_mode = 1 [json_name = "queue-schedule-mode"];
                     uint32 weight = 2 [json_name = "weight"];
                     uint32 pbs = 3 [json_name = "pbs"];
                     enum LowLatency {
                        INVALID_ENUM_VALUE_LowLatency = 0;
                        LowLatency_ENABLE = 1;
                     };
                     LowLatency low_latency = 4 [json_name = "low-latency"];
                     message ShapingParameters_Shaping {
                        uint32 shaping_value = 1 [json_name = "shaping-value"];
                     }
                     message ShapingParameters_ShapingPercent {
                        uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                     }
                     oneof ShapingParameters {
                        ShapingParameters_Shaping shaping_parameters_shaping = 5 [json_name = "shaping"];
                        ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 6 [json_name = "shaping-percent"];
                     }
                  }
                  message ConfigType_CirMode {
                     enum CirScheduleMode {
                        CirScheduleMode_PQ = 0;
                     };
                     CirScheduleMode cir_schedule_mode = 1 [json_name = "cir-schedule-mode"];
                     enum PirScheduleMode {
                        PirScheduleMode_PQ = 0;
                        PirScheduleMode_WFQ = 1;
                        PirScheduleMode_LPQ = 2;
                     };
                     PirScheduleMode pir_schedule_mode = 2 [json_name = "pir-schedule-mode"];
                     uint32 pir_weight = 3 [json_name = "pir-weight"];
                     uint32 cbs = 4 [json_name = "cbs"];
                     uint32 pir_pbs = 5 [json_name = "pir-pbs"];
                     message CirParameters_Cir {
                        uint32 cir_value = 1 [json_name = "cir-value"];
                        uint32 pir_value = 2 [json_name = "pir-value"];
                     }
                     message CirParameters_CirPercent {
                        uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                        uint32 pir_percentage = 2 [json_name = "pir-percentage"];
                     }
                     oneof CirParameters {
                        CirParameters_Cir cir_parameters_cir = 6 [json_name = "cir"];
                        CirParameters_CirPercent cir_parameters_cir_percent = 7 [json_name = "cir-percent"];
                     }
                  }
                  oneof ConfigType {
                     ConfigType_ShapingMode config_type_shaping_mode = 3 [json_name = "shaping-mode"];
                     ConfigType_CirMode config_type_cir_mode = 4 [json_name = "cir-mode"];
                  }
               }
               repeated PortQueueState port_queue_state = 1 [json_name = "port-queue-state"];
            }
            PortQueueStates port_queue_states = 6 [json_name = "port-queue-states"];
            message PortQueueTemplateApplys {
               message PortQueueTemplateApply {
                  string port_queue_template_name = 1 [json_name = "port-queue-template-name"];
               }
               repeated PortQueueTemplateApply port_queue_template_apply = 1 [json_name = "port-queue-template-apply"];
            }
            PortQueueTemplateApplys port_queue_template_applys = 7 [json_name = "port-queue-template-applys"];
            message PortQueueAlarms {
               message PortQueueAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarm port_queue_alarm = 1 [json_name = "port-queue-alarm"];
            }
            PortQueueAlarms port_queue_alarms = 8 [json_name = "port-queue-alarms"];
            message PortQueueAlarmStates {
               message PortQueueAlarmState {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarmState port_queue_alarm_state = 1 [json_name = "port-queue-alarm-state"];
            }
            PortQueueAlarmStates port_queue_alarm_states = 9 [json_name = "port-queue-alarm-states"];
            message PortQueueDiscardAlarms {
               message PortQueueDiscardAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_DISCARDX_PACKET = 1;
                     Type_DISCARDX_BYTE = 2;
                     Type_DISCARDX_PACKETX_RATIO = 3;
                  };
                  Type type = 2 [json_name = "type"];
                  uint32 discard_number = 3 [json_name = "discard-number"];
                  uint32 discard_packet_coefficient = 4 [json_name = "discard-packet-coefficient"];
                  uint32 discard_packet_exponent = 5 [json_name = "discard-packet-exponent"];
                  uint32 interval_time = 6 [json_name = "interval-time"];
                  uint32 repeat_count = 7 [json_name = "repeat-count"];
               }
               repeated PortQueueDiscardAlarm port_queue_discard_alarm = 1 [json_name = "port-queue-discard-alarm"];
            }
            PortQueueDiscardAlarms port_queue_discard_alarms = 10 [json_name = "port-queue-discard-alarms"];
            message SetQueueStats {
               message SetQueueStat {
                  enum Interval {
                     INVALID_ENUM_VALUE_Interval = 0;
                     Interval_X_5S = 5;
                     Interval_X_30S = 30;
                     Interval_X_300S = 300;
                  };
                  Interval interval = 1 [json_name = "interval"];
               }
               repeated SetQueueStat set_queue_stat = 1 [json_name = "set-queue-stat"];
            }
            SetQueueStats set_queue_stats = 11 [json_name = "set-queue-stats"];
            message LinkAdjustment {
               int32 adjust_value = 1 [json_name = "adjust-value"];
               enum ShapingMode {
                  INVALID_ENUM_VALUE_ShapingMode = 0;
                  ShapingMode_CELL = 1;
               };
               ShapingMode shaping_mode = 2 [json_name = "shaping-mode"];
            }
            LinkAdjustment link_adjustment = 12 [json_name = "link-adjustment"];
            message QosQueues {
               message QosQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Priority {
                     Priority_PQ = 0;
                     Priority_WFQ = 1;
                     Priority_LPQ = 2;
                  };
                  Priority priority = 2 [json_name = "priority"];
                  message CirParameters_Cir {
                     uint32 cir8 = 1 [json_name = "cir"];
                  }
                  message CirParameters_CirPercent {
                     uint32 cir_percent = 1 [json_name = "cir-percent"];
                  }
                  oneof CirParameters {
                     CirParameters_Cir cir_parameters_cir = 3 [json_name = "cir"];
                     CirParameters_CirPercent cir_parameters_cir_percent = 4 [json_name = "cir-percent"];
                  }
                  message PirParameters_Pir {
                     uint32 pir8 = 1 [json_name = "pir"];
                  }
                  message PirParameters_PirPercent {
                     uint32 pir_percent = 1 [json_name = "pir-percent"];
                  }
                  oneof PirParameters {
                     PirParameters_Pir pir_parameters_pir = 5 [json_name = "pir"];
                     PirParameters_PirPercent pir_parameters_pir_percent = 6 [json_name = "pir-percent"];
                  }
               }
               repeated QosQueue qos_queue = 1 [json_name = "qos-queue"];
            }
            QosQueues qos_queues = 13 [json_name = "qos-queues"];
            message QueueTemplateApplys {
               message QueueTemplateApply {
                  string queue_template_name = 1 [json_name = "queue-template-name"];
               }
               repeated QueueTemplateApply queue_template_apply = 1 [json_name = "queue-template-apply"];
            }
            QueueTemplateApplys queue_template_applys = 14 [json_name = "queue-template-applys"];
            message SoftPipeAlarms {
               message SoftPipeAlarm {
                  uint32 bandwidth_usage_threshold = 1 [json_name = "bandwidth-usage-threshold"];
                  uint32 resume_threshold = 2 [json_name = "resume-threshold"];
               }
               SoftPipeAlarm soft_pipe_alarm = 1 [json_name = "soft-pipe-alarm"];
            }
            SoftPipeAlarms soft_pipe_alarms = 15 [json_name = "soft-pipe-alarms"];
            message FlowQueueTemplateApplys {
               message FlowQueueTemplateApply {
                  string flow_queue_template_name = 1 [json_name = "flow-queue-template-name"];
               }
               repeated FlowQueueTemplateApply flow_queue_template_apply = 1 [json_name = "flow-queue-template-apply"];
            }
            FlowQueueTemplateApplys flow_queue_template_applys = 16 [json_name = "flow-queue-template-applys"];
            message ServiceTemplateApplys {
               message ServiceTemplateApply {
                  string service_template_name = 1 [json_name = "service-template-name"];
               }
               repeated ServiceTemplateApply service_template_apply = 1 [json_name = "service-template-apply"];
            }
            ServiceTemplateApplys service_template_applys = 17 [json_name = "service-template-applys"];
            message DefaultServiceClasss {
               message DefaultServiceClass {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
               }
               repeated DefaultServiceClass default_service_class = 1 [json_name = "default-service-class"];
            }
            DefaultServiceClasss default_service_classs = 18 [json_name = "default-service-classs"];
            message DefaultUserGroupQueues {
               message DefaultUserGroupQueue {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 shaping = 2 [json_name = "shaping"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated DefaultUserGroupQueue default_user_group_queue = 1 [json_name = "default-user-group-queue"];
            }
            DefaultUserGroupQueues default_user_group_queues = 19 [json_name = "default-user-group-queues"];
            message DefaultSubPortQueues {
               message DefaultSubPortQueue {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 shaping = 2 [json_name = "shaping"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated DefaultSubPortQueue default_sub_port_queue = 1 [json_name = "default-sub-port-queue"];
            }
            DefaultSubPortQueues default_sub_port_queues = 20 [json_name = "default-sub-port-queues"];
            message PortShapings {
               message PortShaping {
                  uint32 pbs = 1 [json_name = "pbs"];
                  int32 network_header_length = 2 [json_name = "network-header-length"];
                  enum WeightMode {
                     INVALID_ENUM_VALUE_WeightMode = 0;
                     WeightMode_ENABLE = 1;
                  };
                  WeightMode weight_mode = 3 [json_name = "weight-mode"];
                  message ShapingParameters_ShapingType {
                     enum ShapingType8 {
                        ShapingType8_X_256K = 0;
                        ShapingType8_X_512K = 1;
                     };
                     ShapingType8 shaping_type = 1 [json_name = "shaping-type"];
                  }
                  message ShapingParameters_ShapingValue {
                     uint32 shaping_value = 1 [json_name = "shaping-value"];
                  }
                  message ShapingParameters_ShapingPercent {
                     uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                  }
                  oneof ShapingParameters {
                     ShapingParameters_ShapingType shaping_parameters_shaping_type = 4 [json_name = "shaping-type"];
                     ShapingParameters_ShapingValue shaping_parameters_shaping_value = 5 [json_name = "shaping-value"];
                     ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 6 [json_name = "shaping-percent"];
                  }
               }
               PortShaping port_shaping = 1 [json_name = "port-shaping"];
            }
            PortShapings port_shapings = 21 [json_name = "port-shapings"];
            message PerHopBehaviorDisables {
               message PerHopBehaviorDisable {
                  enum MapType {
                     INVALID_ENUM_VALUE_MapType = 0;
                     MapType_NONE = 1;
                     MapType_INNERX_8021P = 2;
                     MapType_OUTERX_8021P = 4;
                     MapType_DSCP = 8;
                     MapType_MPLSX_EXP = 16;
                  };
                  MapType map_type = 1 [json_name = "map-type"];
                  bool vlan_mode = 2 [json_name = "vlan-mode"];
                  string vlan_id = 3 [json_name = "vlan-id"];
               }
               repeated PerHopBehaviorDisable per_hop_behavior_disable = 1 [json_name = "per-hop-behavior-disable"];
            }
            PerHopBehaviorDisables per_hop_behavior_disables = 22 [json_name = "per-hop-behavior-disables"];
            message PerHopBehaviorEnables {
               message PerHopBehaviorEnable {
                  string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
               }
               PerHopBehaviorEnable per_hop_behavior_enable = 1 [json_name = "per-hop-behavior-enable"];
            }
            PerHopBehaviorEnables per_hop_behavior_enables = 23 [json_name = "per-hop-behavior-enables"];
            message PerHopBehaviorEnableVlans {
               message PerHopBehaviorEnableVlan {
                  string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
                  string vlan_id = 2 [json_name = "vlan-id"];
               }
               repeated PerHopBehaviorEnableVlan per_hop_behavior_enable_vlan = 1 [json_name = "per-hop-behavior-enable-vlan"];
            }
            PerHopBehaviorEnableVlans per_hop_behavior_enable_vlans = 24 [json_name = "per-hop-behavior-enable-vlans"];
            message PerHopBehavior {
               enum Enable {
                  INVALID_ENUM_VALUE_Enable = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            PerHopBehavior per_hop_behavior = 25 [json_name = "per-hop-behavior"];
            message Cars {
               message Car {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool vlan_mode = 2 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 3 [json_name = "begin-vlan"];
                  uint32 end_vlan = 4 [json_name = "end-vlan"];
                  uint32 cbs = 5 [json_name = "cbs"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  int32 adjust_value = 7 [json_name = "adjust-value"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 8 [json_name = "green-action"];
                  enum GreenServiceClass {
                     GreenServiceClass_BE = 0;
                     GreenServiceClass_AF1 = 1;
                     GreenServiceClass_AF2 = 2;
                     GreenServiceClass_AF3 = 3;
                     GreenServiceClass_AF4 = 4;
                     GreenServiceClass_EF = 5;
                     GreenServiceClass_CS6 = 6;
                     GreenServiceClass_CS7 = 7;
                  };
                  GreenServiceClass green_service_class = 9 [json_name = "green-service-class"];
                  enum GreenColor {
                     GreenColor_GREEN = 0;
                     GreenColor_YELLOW = 1;
                     GreenColor_RED = 2;
                  };
                  GreenColor green_color = 10 [json_name = "green-color"];
                  enum YellowAction {
                     YellowAction_PASS = 0;
                     YellowAction_DISCARD = 2;
                  };
                  YellowAction yellow_action = 11 [json_name = "yellow-action"];
                  enum YellowServiceClass {
                     YellowServiceClass_BE = 0;
                     YellowServiceClass_AF1 = 1;
                     YellowServiceClass_AF2 = 2;
                     YellowServiceClass_AF3 = 3;
                     YellowServiceClass_AF4 = 4;
                     YellowServiceClass_EF = 5;
                     YellowServiceClass_CS6 = 6;
                     YellowServiceClass_CS7 = 7;
                  };
                  YellowServiceClass yellow_service_class = 12 [json_name = "yellow-service-class"];
                  enum YellowColor {
                     YellowColor_GREEN = 0;
                     YellowColor_YELLOW = 1;
                     YellowColor_RED = 2;
                  };
                  YellowColor yellow_color = 13 [json_name = "yellow-color"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 14 [json_name = "red-action"];
                  enum RedServiceClass {
                     RedServiceClass_BE = 0;
                     RedServiceClass_AF1 = 1;
                     RedServiceClass_AF2 = 2;
                     RedServiceClass_AF3 = 3;
                     RedServiceClass_AF4 = 4;
                     RedServiceClass_EF = 5;
                     RedServiceClass_CS6 = 6;
                     RedServiceClass_CS7 = 7;
                  };
                  RedServiceClass red_service_class = 15 [json_name = "red-service-class"];
                  enum RedColor {
                     RedColor_GREEN = 0;
                     RedColor_YELLOW = 1;
                     RedColor_RED = 2;
                  };
                  RedColor red_color = 16 [json_name = "red-color"];
                  enum ColorAware {
                     INVALID_ENUM_VALUE_ColorAware = 0;
                     ColorAware_ENABLE = 1;
                  };
                  ColorAware color_aware = 17 [json_name = "color-aware"];
                  enum Identifier {
                     Identifier_NO = 0;
                     Identifier_NONE = 1;
                     Identifier_VID = 2;
                     Identifier_CEX_VID = 3;
                     Identifier_VIDX_CEX_VID = 4;
                  };
                  Identifier identifier = 18 [json_name = "identifier"];
                  message CirParameters_Cir {
                     uint32 cir_value = 1 [json_name = "cir-value"];
                     uint32 pir_value = 2 [json_name = "pir-value"];
                  }
                  message CirParameters_CirPercentage {
                     uint32 cir_percent = 1 [json_name = "cir-percent"];
                     uint32 pir_percent = 2 [json_name = "pir-percent"];
                  }
                  oneof CirParameters {
                     CirParameters_Cir cir_parameters_cir = 19 [json_name = "cir"];
                     CirParameters_CirPercentage cir_parameters_cir_percentage = 20 [json_name = "cir-percentage"];
                  }
               }
               repeated Car car = 1 [json_name = "car"];
            }
            Cars cars = 26 [json_name = "cars"];
            message ConvergentPrecedence {
               enum PriorityType {
                  INVALID_ENUM_VALUE_PriorityType = 0;
                  PriorityType_HIGH = 1;
               };
               PriorityType priority_type = 1 [json_name = "priority-type"];
            }
            ConvergentPrecedence convergent_precedence = 27 [json_name = "convergent-precedence"];
            message DropEligibleIndicatorVlan {
               string vlan_id = 1 [json_name = "vlan-id"];
            }
            DropEligibleIndicatorVlan drop_eligible_indicator_vlan = 28 [json_name = "drop-eligible-indicator-vlan"];
            message DropEligibleIndicator {
               bool enable = 1 [json_name = "enable"];
            }
            DropEligibleIndicator drop_eligible_indicator = 29 [json_name = "drop-eligible-indicator"];
            message TrustUntagIpPrecedence {
               enum Enable {
                  INVALID_ENUM_VALUE_Enable = 0;
                  Enable_ENABLE = 2;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            TrustUntagIpPrecedence trust_untag_ip_precedence = 30 [json_name = "trust-untag-ip-precedence"];
            message TrustIpPrecedences {
               message TrustIpPrecedence {
                  bool vlan_mode = 1 [json_name = "vlan-mode"];
                  string vlan_id = 2 [json_name = "vlan-id"];
               }
               repeated TrustIpPrecedence trust_ip_precedence = 1 [json_name = "trust-ip-precedence"];
            }
            TrustIpPrecedences trust_ip_precedences = 31 [json_name = "trust-ip-precedences"];
            message ShareShaping {
               enum Be {
                  Be_TRUE = 0;
               };
               Be be = 1 [json_name = "be"];
               enum Af1 {
                  INVALID_ENUM_VALUE_Af1 = 0;
                  Af1_TRUE = 1;
               };
               Af1 af1 = 2 [json_name = "af1"];
               enum Af2 {
                  INVALID_ENUM_VALUE_Af2 = 0;
                  Af2_TRUE = 2;
               };
               Af2 af2 = 3 [json_name = "af2"];
               enum Af3 {
                  INVALID_ENUM_VALUE_Af3 = 0;
                  Af3_TRUE = 3;
               };
               Af3 af3 = 4 [json_name = "af3"];
               enum Af4 {
                  INVALID_ENUM_VALUE_Af4 = 0;
                  Af4_TRUE = 4;
               };
               Af4 af4 = 5 [json_name = "af4"];
               enum Ef {
                  INVALID_ENUM_VALUE_Ef = 0;
                  Ef_TRUE = 5;
               };
               Ef ef = 6 [json_name = "ef"];
               enum Cs6 {
                  INVALID_ENUM_VALUE_Cs6 = 0;
                  Cs6_TRUE = 6;
               };
               Cs6 cs6 = 7 [json_name = "cs6"];
               enum Cs7 {
                  INVALID_ENUM_VALUE_Cs7 = 0;
                  Cs7_TRUE = 7;
               };
               Cs7 cs7 = 8 [json_name = "cs7"];
               enum QueueScheduleMode {
                  QueueScheduleMode_PQ = 0;
                  QueueScheduleMode_WFQ = 1;
                  QueueScheduleMode_LPQ = 2;
               };
               QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
               uint32 weight = 10 [json_name = "weight"];
               uint32 pbs = 11 [json_name = "pbs"];
               message ShapingParameters_Shaping {
                  uint32 shaping_value = 1 [json_name = "shaping-value"];
               }
               message ShapingParameters_ShapingPercent {
                  uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
               }
               oneof ShapingParameters {
                  ShapingParameters_Shaping shaping_parameters_shaping = 12 [json_name = "shaping"];
                  ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 13 [json_name = "shaping-percent"];
               }
            }
            ShareShaping share_shaping = 32 [json_name = "share-shaping"];
            message SubPortQueueApplys {
               message SubPortQueueApply {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string sub_port_queue_name = 2 [json_name = "sub-port-queue-name"];
                  string group_name = 3 [json_name = "group-name"];
               }
               repeated SubPortQueueApply sub_port_queue_apply = 1 [json_name = "sub-port-queue-apply"];
            }
            SubPortQueueApplys sub_port_queue_applys = 33 [json_name = "sub-port-queue-applys"];
            message UserVlanUserGroupQueueApplys {
               message UserVlanUserGroupQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pe_begin_vlan_id = 2 [json_name = "pe-begin-vlan-id"];
                  uint32 pe_end_vlan_id = 3 [json_name = "pe-end-vlan-id"];
                  uint32 ce_begin_vlan_id = 4 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 5 [json_name = "ce-end-vlan-id"];
                  enum IdentifierType {
                     IdentifierType_NONE = 0;
                     IdentifierType_VLANX_ID = 1;
                     IdentifierType_PEX_VID = 2;
                     IdentifierType_CEX_VID = 3;
                     IdentifierType_PEX_CEX_VID = 4;
                  };
                  IdentifierType identifier_type = 6 [json_name = "identifier-type"];
                  string user_group_queue_name = 7 [json_name = "user-group-queue-name"];
                  string group_name = 8 [json_name = "group-name"];
               }
               repeated UserVlanUserGroupQueueApply user_vlan_user_group_queue_apply = 1 [json_name = "user-vlan-user-group-queue-apply"];
            }
            UserVlanUserGroupQueueApplys user_vlan_user_group_queue_applys = 34 [json_name = "user-vlan-user-group-queue-applys"];
            message BrasMemberLinkSchedulers {
               message BrasMemberLinkScheduler {
                  enum UserAccessType {
                     INVALID_ENUM_VALUE_UserAccessType = 0;
                     UserAccessType_LEASEDX_LINEX_ACCESS = 10;
                     UserAccessType_SUBSCRIBERX_ACCESS = 13;
                  };
                  UserAccessType user_access_type = 1 [json_name = "user-access-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated BrasMemberLinkScheduler bras_member_link_scheduler = 1 [json_name = "bras-member-link-scheduler"];
            }
            BrasMemberLinkSchedulers bras_member_link_schedulers = 35 [json_name = "bras-member-link-schedulers"];
            message ScheduleTreeDistributeModes {
               message ScheduleTreeDistributeMode {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum ScheduleTreeMode {
                     ScheduleTreeMode_DISTRIBUTE = 0;
                     ScheduleTreeMode_MERGE = 1;
                  };
                  ScheduleTreeMode schedule_tree_mode = 2 [json_name = "schedule-tree-mode"];
               }
               repeated ScheduleTreeDistributeMode schedule_tree_distribute_mode = 1 [json_name = "schedule-tree-distribute-mode"];
            }
            ScheduleTreeDistributeModes schedule_tree_distribute_modes = 36 [json_name = "schedule-tree-distribute-modes"];
            message LoopMode {
            }
            LoopMode loop_mode = 37 [json_name = "loop-mode"];
            message ResourcePools {
               message ResourcePool {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum PoolId {
                     PoolId_POOLX_0 = 0;
                     PoolId_POOLX_1 = 1;
                  };
                  PoolId pool_id = 2 [json_name = "pool-id"];
               }
               repeated ResourcePool resource_pool = 1 [json_name = "resource-pool"];
            }
            ResourcePools resource_pools = 38 [json_name = "resource-pools"];
            message UserGroupQueueApplys {
               message UserGroupQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string group_queue_name = 2 [json_name = "group-queue-name"];
                  string group_name = 3 [json_name = "group-name"];
               }
               repeated UserGroupQueueApply user_group_queue_apply = 1 [json_name = "user-group-queue-apply"];
            }
            UserGroupQueueApplys user_group_queue_applys = 39 [json_name = "user-group-queue-applys"];
            message MplsL2Vc {
               string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
            }
            MplsL2Vc mpls_l2vc = 40 [json_name = "mpls-l2vc"];
            message MemberLinkSchedulers {
               message MemberLinkScheduler {
                  enum MemberLinkSchedulerType {
                     INVALID_ENUM_VALUE_MemberLinkSchedulerType = 0;
                     MemberLinkSchedulerType_TRAFFICX_CAR = 1;
                     MemberLinkSchedulerType_QOSX_CAR = 2;
                     MemberLinkSchedulerType_PORTX_SHAPING = 3;
                     MemberLinkSchedulerType_HARDX_PIPE = 4;
                     MemberLinkSchedulerType_USERX_QUEUE = 5;
                     MemberLinkSchedulerType_PROFILEX_CAR = 7;
                     MemberLinkSchedulerType_HQOSX_OUTBOUND = 8;
                     MemberLinkSchedulerType_MPLSX_TE = 9;
                  };
                  MemberLinkSchedulerType member_link_scheduler_type = 1 [json_name = "member-link-scheduler-type"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated MemberLinkScheduler member_link_scheduler = 1 [json_name = "member-link-scheduler"];
            }
            MemberLinkSchedulers member_link_schedulers = 41 [json_name = "member-link-schedulers"];
            message QosLr {
               message CirParameters_Cir {
                  uint32 cir_value = 1 [json_name = "cir-value"];
               }
               message CirParameters_CirPercent {
                  uint32 cir_percent_value = 1 [json_name = "cir-percent-value"];
               }
               oneof CirParameters {
                  CirParameters_Cir cir_parameters_cir = 1 [json_name = "cir"];
                  CirParameters_CirPercent cir_parameters_cir_percent = 2 [json_name = "cir-percent"];
               }
               message Pps {
                  uint32 packets = 1 [json_name = "packets"];
               }
               Pps pps = 3 [json_name = "pps"];
            }
            QosLr qos_lr = 42 [json_name = "qos-lr"];
            message LdpTraffic {
               enum TrafficType {
                  INVALID_ENUM_VALUE_TrafficType = 0;
                  TrafficType_LDPX_TRAFFIC = 1;
               };
               TrafficType traffic_type = 1 [json_name = "traffic-type"];
            }
            LdpTraffic ldp_traffic = 43 [json_name = "ldp-traffic"];
            message BufferPolicyMode {
               enum BufferMode {
                  BufferMode_NORMAL = 0;
                  BufferMode_LARGE = 1;
               };
               BufferMode buffer_mode = 1 [json_name = "buffer-mode"];
            }
            BufferPolicyMode buffer_policy_mode = 44 [json_name = "buffer-policy-mode"];
            message HardPipeApply {
               enum Mode {
                  Mode_SHAREX_MODE = 0;
                  Mode_EXCLUSIVEX_MODE = 1;
               };
               Mode mode = 1 [json_name = "mode"];
               uint32 bandwidth = 2 [json_name = "bandwidth"];
            }
            HardPipeApply hard_pipe_apply = 45 [json_name = "hard-pipe-apply"];
            message ChannelAdjustment {
               uint32 adjust_value = 1 [json_name = "adjust-value"];
            }
            ChannelAdjustment channel_adjustment = 46 [json_name = "channel-adjustment"];
            message UserVlanProfileApplys {
               message UserVlanProfileApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pe_begin_vlan_id = 2 [json_name = "pe-begin-vlan-id"];
                  uint32 pe_end_vlan_id = 3 [json_name = "pe-end-vlan-id"];
                  uint32 ce_begin_vlan_id = 4 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 5 [json_name = "ce-end-vlan-id"];
                  string profile_name = 6 [json_name = "profile-name"];
                  enum EachVlan {
                     EachVlan_NO = 0;
                     EachVlan_YES = 1;
                  };
                  EachVlan each_vlan = 7 [json_name = "each-vlan"];
               }
               repeated UserVlanProfileApply user_vlan_profile_apply = 1 [json_name = "user-vlan-profile-apply"];
            }
            UserVlanProfileApplys user_vlan_profile_applys = 47 [json_name = "user-vlan-profile-applys"];
            message ServiceTemplateShaping {
               message AllServiceClass {
                  string service_template_name = 1 [json_name = "service-template-name"];
               }
               AllServiceClass all_service_class = 1 [json_name = "all-service-class"];
               message SpecificServiceClasss {
                  message SpecificServiceClass {
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 1 [json_name = "service-class"];
                     string service_template_name = 2 [json_name = "service-template-name"];
                  }
                  repeated SpecificServiceClass specific_service_class = 1 [json_name = "specific-service-class"];
               }
               SpecificServiceClasss specific_service_classs = 2 [json_name = "specific-service-classs"];
            }
            ServiceTemplateShaping service_template_shaping = 48 [json_name = "service-template-shaping"];
            message DefaultServiceClassRemote {
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 1 [json_name = "service-class"];
            }
            DefaultServiceClassRemote default_service_class_remote = 49 [json_name = "default-service-class-remote"];
            message TrustRemotes {
               message TrustRemote {
                  enum Type {
                     Type_IPX_DSCP = 0;
                     Type_X_8021P = 1;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_INBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  bool vlan_mode = 3 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 4 [json_name = "begin-vlan"];
                  uint32 end_vlan = 5 [json_name = "end-vlan"];
                  string diffserv_domain_name = 6 [json_name = "diffserv-domain-name"];
                  enum Type8021P {
                     INVALID_ENUM_VALUE_Type8021P = 0;
                     Type8021P_X_8021P = 1;
                     Type8021P_OUTERX_8021P = 2;
                     Type8021P_INNERX_8021P = 3;
                  };
                  Type8021P type_8021p = 7 [json_name = "type-8021p"];
               }
               repeated TrustRemote trust_remote = 1 [json_name = "trust-remote"];
            }
            TrustRemotes trust_remotes = 50 [json_name = "trust-remotes"];
            message WfqShaping {
               message ShapingParameters_Shaping {
                  uint32 shaping_value = 1 [json_name = "shaping-value"];
               }
               message ShapingParameters_ShapingPercent {
                  uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
               }
               oneof ShapingParameters {
                  ShapingParameters_Shaping shaping_parameters_shaping = 1 [json_name = "shaping"];
                  ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 2 [json_name = "shaping-percent"];
               }
            }
            WfqShaping wfq_shaping = 51 [json_name = "wfq-shaping"];
            message SourceBoardScheduleWeights {
               message SourceBoardScheduleWeight {
                  string slot_id = 1 [json_name = "slot-id"];
                  uint32 weight_value = 2 [json_name = "weight-value"];
               }
               repeated SourceBoardScheduleWeight source_board_schedule_weight = 1 [json_name = "source-board-schedule-weight"];
            }
            SourceBoardScheduleWeights source_board_schedule_weights = 52 [json_name = "source-board-schedule-weights"];
            message DeficitUnit {
               enum Unit {
                  INVALID_ENUM_VALUE_Unit = 0;
                  Unit_X_1K = 4;
                  Unit_X_2K = 5;
               };
               Unit unit = 1 [json_name = "unit"];
            }
            DeficitUnit deficit_unit = 53 [json_name = "deficit-unit"];
            message DefaultUserQueue {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 1 [json_name = "direction"];
               uint32 cir = 2 [json_name = "cir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 pir = 4 [json_name = "pir"];
               uint32 pbs = 5 [json_name = "pbs"];
               uint32 weight = 6 [json_name = "weight"];
            }
            DefaultUserQueue default_user_queue = 54 [json_name = "default-user-queue"];
            message VniCfgPeers {
               message VniCfgPeer {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 vni_id = 2 [json_name = "vni-id"];
                  string source_ip = 3 [json_name = "source-ip"];
                  string peer_ip = 4 [json_name = "peer-ip"];
                  string profile_name = 5 [json_name = "profile-name"];
               }
               repeated VniCfgPeer vni_cfg_peer = 1 [json_name = "vni-cfg-peer"];
            }
            VniCfgPeers vni_cfg_peers = 55 [json_name = "vni-cfg-peers"];
            message QosVllPipe {
               bool split_mode = 1 [json_name = "split-mode"];
               enum PipeMode {
                  INVALID_ENUM_VALUE_PipeMode = 0;
                  PipeMode_PIPE = 1;
                  PipeMode_SHORTPIPE = 2;
                  PipeMode_UNIFORM = 3;
               };
               PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
               enum IngressPipeMode {
                  INVALID_ENUM_VALUE_IngressPipeMode = 0;
                  IngressPipeMode_PIPE = 1;
                  IngressPipeMode_SHORTPIPE = 2;
                  IngressPipeMode_UNIFORM = 3;
               };
               IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
               enum EgressPipeMode {
                  INVALID_ENUM_VALUE_EgressPipeMode = 0;
                  EgressPipeMode_PIPE = 1;
                  EgressPipeMode_SHORTPIPE = 2;
                  EgressPipeMode_UNIFORM = 3;
               };
               EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               enum Color {
                  Color_GREEN = 0;
                  Color_YELLOW = 1;
                  Color_RED = 2;
               };
               Color color = 6 [json_name = "color"];
               string domain_name = 7 [json_name = "domain-name"];
               enum TrustType {
                  TrustType_OUTPRI = 0;
                  TrustType_INPRI = 1;
                  TrustType_IPDSCP = 2;
               };
               TrustType trust_type = 8 [json_name = "trust-type"];
            }
            QosVllPipe qos_vll_pipe = 56 [json_name = "qos-vll-pipe"];
            message LocalIdEnable {
               enum Mode {
                  Mode_SOURCE = 0;
                  Mode_DESTINATION = 1;
               };
               Mode mode = 1 [json_name = "mode"];
               bool both = 2 [json_name = "both"];
            }
            LocalIdEnable local_id_enable = 57 [json_name = "local-id-enable"];
            message Qppb {
               message Policys {
                  message Policy {
                     enum Direction {
                        INVALID_ENUM_VALUE_Direction = 0;
                        Direction_INBOUND = 2;
                        Direction_OUTBOUND = 3;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string policy_name = 2 [json_name = "policy-name"];
                     enum Mode {
                        Mode_SOURCE = 0;
                        Mode_DESTINATION = 1;
                     };
                     Mode mode = 3 [json_name = "mode"];
                     bool share_mode = 4 [json_name = "share-mode"];
                  }
                  repeated Policy policy = 1 [json_name = "policy"];
               }
               Policys policys = 1 [json_name = "policys"];
               message IpPrecedence {
                  enum Mode {
                     Mode_SOURCE = 0;
                     Mode_DESTINATION = 1;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               IpPrecedence ip_precedence = 2 [json_name = "ip-precedence"];
            }
            Qppb qppb = 58 [json_name = "qppb"];
            message TrafficPolicyMultiApplys {
               message TrafficPolicyMultiApply {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  uint32 match_precedence = 3 [json_name = "match-precedence"];
               }
               repeated TrafficPolicyMultiApply traffic_policy_multi_apply = 1 [json_name = "traffic-policy-multi-apply"];
            }
            TrafficPolicyMultiApplys traffic_policy_multi_applys = 59 [json_name = "traffic-policy-multi-applys"];
            message ModeChannelBandwidthMaximize {
               enum EnableMaximize {
                  INVALID_ENUM_VALUE_EnableMaximize = 0;
                  EnableMaximize_ENABLE = 1;
               };
               EnableMaximize enable_maximize = 1 [json_name = "enable-maximize"];
            }
            ModeChannelBandwidthMaximize mode_channel_bandwidth_maximize = 60 [json_name = "mode-channel-bandwidth-maximize"];
            message TrafficPolicys {
               message TrafficPolicy {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum Direction {
                     Direction_INX_OUTBOUND = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum Priority {
                     Priority_NORMAL = 0;
                     Priority_PREX_PROCESS = 1;
                     Priority_FIRSTX_PROCESS = 2;
                     Priority_DECAPX_PROCESS = 3;
                  };
                  Priority priority = 3 [json_name = "priority"];
               }
               repeated TrafficPolicy traffic_policy = 1 [json_name = "traffic-policy"];
            }
            TrafficPolicys traffic_policys = 61 [json_name = "traffic-policys"];
            message DeiEnables {
               enum Enable {
                  Enable_DISABLE = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            DeiEnables dei_enables = 62 [json_name = "dei-enables"];
            message QosLrOutbound {
               uint32 cir = 1 [json_name = "cir"];
               enum CirUnit {
                  CirUnit_KBPS = 0;
                  CirUnit_MBPS = 1;
                  CirUnit_GBPS = 2;
               };
               CirUnit cir_unit = 2 [json_name = "cir-unit"];
               uint32 cbs = 3 [json_name = "cbs"];
               enum CbsUnit {
                  CbsUnit_BYTES = 0;
                  CbsUnit_KBYTES = 1;
                  CbsUnit_MBYTES = 2;
               };
               CbsUnit cbs_unit = 4 [json_name = "cbs-unit"];
            }
            QosLrOutbound qos_lr_outbound = 63 [json_name = "qos-lr-outbound"];
            message Wreds {
               message Wred {
                  string drop_profile_name = 1 [json_name = "drop-profile-name"];
               }
               repeated Wred wred = 1 [json_name = "wred"];
            }
            Wreds wreds = 64 [json_name = "wreds"];
            message QueueBufferMonitors {
               message QueueBufferMonitor {
                  uint32 service_class = 1 [json_name = "service-class"];
                  enum Enable {
                     INVALID_ENUM_VALUE_Enable = 0;
                     Enable_ENABLE = 1;
                  };
                  Enable enable = 2 [json_name = "enable"];
               }
               repeated QueueBufferMonitor queue_buffer_monitor = 1 [json_name = "queue-buffer-monitor"];
               message QueueBufferMonitorThreds {
                  message QueueBufferMonitorThred {
                     uint32 service_class = 1 [json_name = "service-class"];
                     uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                     uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  }
                  repeated QueueBufferMonitorThred queue_buffer_monitor_thred = 1 [json_name = "queue-buffer-monitor-thred"];
               }
               QueueBufferMonitorThreds queue_buffer_monitor_threds = 2 [json_name = "queue-buffer-monitor-threds"];
            }
            QueueBufferMonitors queue_buffer_monitors = 65 [json_name = "queue-buffer-monitors"];
            message PortPriority {
               uint32 priority = 1 [json_name = "priority"];
            }
            PortPriority port_priority = 66 [json_name = "port-priority"];
            message PortPhbTrusts {
               message PortPhbTrust {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_DSCP = 1;
                     Type_MPLSX_EXP = 2;
                     Type_IPX_PRECEDENCE = 11;
                  };
                  Type type = 1 [json_name = "type"];
                  enum DscpPhbEnable {
                     DscpPhbEnable_TRUE = 0;
                     DscpPhbEnable_FALSE = 1;
                  };
                  DscpPhbEnable dscp_phb_enable = 2 [json_name = "dscp-phb-enable"];
               }
               repeated PortPhbTrust port_phb_trust = 1 [json_name = "port-phb-trust"];
            }
            PortPhbTrusts port_phb_trusts = 67 [json_name = "port-phb-trusts"];
            message QueueSchedules {
               message QueueSchedule {
                  uint32 queue_index = 1 [json_name = "queue-index"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_DRR = 1;
                     ScheduleMode_LPQ = 2;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
                  uint32 weight = 3 [json_name = "weight"];
               }
               repeated QueueSchedule queue_schedule = 1 [json_name = "queue-schedule"];
            }
            QueueSchedules queue_schedules = 68 [json_name = "queue-schedules"];
            message BurstMode {
               enum Mode {
                  Mode_ENHANCED = 0;
                  Mode_SHARED = 1;
                  Mode_LOWX_LATENCY = 2;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            BurstMode burst_mode = 69 [json_name = "burst-mode"];
            message TrustUpstream {
               string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
            }
            TrustUpstream trust_upstream = 70 [json_name = "trust-upstream"];
            message Trust8021PDscp {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_X_8021P = 1;
                  Type_OUTERX_8021P = 2;
                  Type_INNERX_8021P = 3;
               };
               Type type = 1 [json_name = "type"];
            }
            Trust8021PDscp trust_8021p_dscp = 71 [json_name = "trust-8021p-dscp"];
            message QueueBuffers {
               message QueueBuffer {
                  uint32 queue_index = 1 [json_name = "queue-index"];
                  enum ConfigMode {
                     ConfigMode_SHAPEX_BUFFER = 0;
                     ConfigMode_SHAPE = 1;
                     ConfigMode_BUFFER = 2;
                  };
                  ConfigMode config_mode = 2 [json_name = "config-mode"];
                  message ShapingParameters_ShapingPercent {
                     uint32 cir_percent = 1 [json_name = "cir-percent"];
                     uint32 pir_percent = 2 [json_name = "pir-percent"];
                  }
                  message ShapingParameters_ShapingAbsolute {
                     uint32 cir_value = 1 [json_name = "cir-value"];
                     enum CirUnit {
                        CirUnit_KBPS = 0;
                        CirUnit_MBPS = 1;
                        CirUnit_GBPS = 2;
                     };
                     CirUnit cir_unit = 2 [json_name = "cir-unit"];
                     uint32 cbs_value = 3 [json_name = "cbs-value"];
                     enum CbsUnit {
                        CbsUnit_BYTES = 0;
                        CbsUnit_KBYTES = 1;
                        CbsUnit_MBYTES = 2;
                     };
                     CbsUnit cbs_unit = 4 [json_name = "cbs-unit"];
                     uint32 pir_value = 5 [json_name = "pir-value"];
                     enum PirUnit {
                        PirUnit_KBPS = 0;
                        PirUnit_MBPS = 1;
                        PirUnit_GBPS = 2;
                     };
                     PirUnit pir_unit = 6 [json_name = "pir-unit"];
                     uint32 pbs_value = 7 [json_name = "pbs-value"];
                     enum PbsUnit {
                        PbsUnit_BYTES = 0;
                        PbsUnit_KBYTES = 1;
                        PbsUnit_MBYTES = 2;
                     };
                     PbsUnit pbs_unit = 8 [json_name = "pbs-unit"];
                  }
                  oneof ShapingParameters {
                     ShapingParameters_ShapingPercent shaping_parameters_shaping_percent = 3 [json_name = "shaping-percent"];
                     ShapingParameters_ShapingAbsolute shaping_parameters_shaping_absolute = 4 [json_name = "shaping-absolute"];
                  }
                  message QueueBufferType_Static {
                     uint32 static_value = 1 [json_name = "static-value"];
                     enum StaticUnit {
                        StaticUnit_BYTES = 0;
                        StaticUnit_KBYTES = 1;
                        StaticUnit_MBYTES = 2;
                     };
                     StaticUnit static_unit = 2 [json_name = "static-unit"];
                     uint32 packets_value = 3 [json_name = "packets-value"];
                  }
                  message QueueBufferType_Dynamic {
                     uint32 dynamic_value = 1 [json_name = "dynamic-value"];
                  }
                  oneof QueueBufferType {
                     QueueBufferType_Static queue_buffer_type_static = 5 [json_name = "static"];
                     QueueBufferType_Dynamic queue_buffer_type_dynamic = 6 [json_name = "dynamic"];
                  }
               }
               repeated QueueBuffer queue_buffer = 1 [json_name = "queue-buffer"];
            }
            QueueBuffers queue_buffers = 72 [json_name = "queue-buffers"];
            message CarTemplates {
               message CarTemplate {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string name = 2 [json_name = "name"];
                  bool is_decapsulate = 3 [json_name = "is-decapsulate"];
               }
               repeated CarTemplate car_template = 1 [json_name = "car-template"];
            }
            CarTemplates car_templates = 73 [json_name = "car-templates"];
            message QosLocalId {
               uint32 qos_local_id = 1 [json_name = "qos-local-id"];
            }
            QosLocalId qos_local_id = 74 [json_name = "qos-local-id"];
            message TrafficInloopEnable {
               enum Enable {
                  Enable_DISABLE = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            TrafficInloopEnable traffic_inloop_enable = 75 [json_name = "traffic-inloop-enable"];
            message QueueCapabilityEnable {
               enum Enable {
                  Enable_DISABLE = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            QueueCapabilityEnable queue_capability_enable = 76 [json_name = "queue-capability-enable"];
            message LsPortQueue {
               enum WeightModeSet {
                  WeightModeSet_DISABLE = 0;
                  WeightModeSet_ENABLE = 1;
               };
               WeightModeSet weight_mode_set = 1 [json_name = "weight-mode-set"];
               message PortQueues {
                  message PortQueue {
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 1 [json_name = "service-class"];
                     message ScheduleMode_Pq {
                        enum PqMode {
                           PqMode_DISABLE = 0;
                           PqMode_ENABLE = 1;
                        };
                        PqMode pq_mode = 1 [json_name = "pq-mode"];
                     }
                     message ScheduleMode_Wfq {
                        enum WfqMode {
                           WfqMode_DISABLE = 0;
                           WfqMode_ENABLE = 1;
                        };
                        WfqMode wfq_mode = 1 [json_name = "wfq-mode"];
                        message WfqConfigMode_WeightMode {
                           uint32 weight_value = 1 [json_name = "weight-value"];
                        }
                        message WfqConfigMode_CirMode {
                           message CirConfigType_CirValue {
                              uint32 cir_value = 1 [json_name = "cir-value"];
                           }
                           message CirConfigType_CirPercentage {
                              uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                           }
                           oneof CirConfigType {
                              CirConfigType_CirValue cir_config_type_cir_value = 1 [json_name = "cir-value"];
                              CirConfigType_CirPercentage cir_config_type_cir_percentage = 2 [json_name = "cir-percentage"];
                           }
                        }
                        oneof WfqConfigMode {
                           WfqConfigMode_WeightMode wfq_config_mode_weight_mode = 2 [json_name = "weight-mode"];
                           WfqConfigMode_CirMode wfq_config_mode_cir_mode = 3 [json_name = "cir-mode"];
                        }
                     }
                     oneof ScheduleMode {
                        ScheduleMode_Pq schedule_mode_pq = 2 [json_name = "pq"];
                        ScheduleMode_Wfq schedule_mode_wfq = 3 [json_name = "wfq"];
                     }
                     message PirConfigType_PirValue {
                        uint32 pir_value = 1 [json_name = "pir-value"];
                     }
                     message PirConfigType_PirPercentage {
                        uint32 pir_percentage = 1 [json_name = "pir-percentage"];
                     }
                     oneof PirConfigType {
                        PirConfigType_PirValue pir_config_type_pir_value = 4 [json_name = "pir-value"];
                        PirConfigType_PirPercentage pir_config_type_pir_percentage = 5 [json_name = "pir-percentage"];
                     }
                     uint32 max_buffer_time = 6 [json_name = "max-buffer-time"];
                     message Statistic {
                        uint32 queue_usage = 1 [json_name = "queue-usage"];
                        uint64 total_pass_packets = 2 [json_name = "total-pass-packets"];
                        uint64 total_pass_bytes = 3 [json_name = "total-pass-bytes"];
                        uint64 total_pass_packet_rate = 4 [json_name = "total-pass-packet-rate"];
                        uint64 total_pass_bit_rate = 5 [json_name = "total-pass-bit-rate"];
                        uint64 drop_packets = 6 [json_name = "drop-packets"];
                        uint64 drop_packet_rate = 7 [json_name = "drop-packet-rate"];
                        uint64 drop_bytes = 8 [json_name = "drop-bytes"];
                        uint64 drop_bit_rate = 9 [json_name = "drop-bit-rate"];
                     }
                     Statistic statistic = 7 [json_name = "statistic"];
                  }
                  repeated PortQueue port_queue = 1 [json_name = "port-queue"];
               }
               PortQueues port_queues = 2 [json_name = "port-queues"];
            }
            LsPortQueue ls_port_queue = 77 [json_name = "ls-port-queue"];
            message TunnelEncapOverhead {
               uint32 encap_length = 1 [json_name = "encap-length"];
            }
            TunnelEncapOverhead tunnel_encap_overhead = 78 [json_name = "tunnel-encap-overhead"];
            message EncapsulationOverhead {
               message TunnelEncapOverhead {
                  int32 encap_length = 1 [json_name = "encap-length"];
               }
               TunnelEncapOverhead tunnel_encap_overhead = 1 [json_name = "tunnel-encap-overhead"];
            }
            EncapsulationOverhead encapsulation_overhead = 79 [json_name = "encapsulation-overhead"];
            message ScheduleProfile {
               string name = 1 [json_name = "name"];
            }
            ScheduleProfile schedule_profile = 80 [json_name = "schedule-profile"];
         }
         Qos qos = 45 [json_name = "qos"];
         message Trunk {
            uint32 min_up_num = 1 [json_name = "min-up-num"];
            uint32 min_up_bandwidth = 2 [json_name = "min-up-bandwidth"];
            uint32 max_up_num = 3 [json_name = "max-up-num"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ETHX_TRUNK = 1;
               Type_IPX_TRUNK = 2;
            };
            Type type = 4 [json_name = "type"];
            enum HashType {
               INVALID_ENUM_VALUE_HashType = 0;
               HashType_IP = 1;
               HashType_MAC = 2;
               HashType_PACKETX_ALL = 3;
               HashType_DESX_IP = 4;
               HashType_DESX_MAC = 5;
               HashType_SRCX_IP = 6;
               HashType_SRCX_MAC = 7;
               HashType_ENHANCED = 8;
               HashType_RESILIENT = 9;
               HashType_INVALID = 10;
               HashType_L4 = 11;
               HashType_RANDOM = 12;
               HashType_ROUNDX_ROBIN = 13;
               HashType_SYMMETRIC = 14;
               HashType_SYMMETRICX_COMPLEMENT = 15;
            };
            HashType hash_type = 5 [json_name = "hash-type"];
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_MANUAL = 1;
               WorkMode_DYNAMIC = 2;
               WorkMode_STATIC = 3;
               WorkMode_BACKUP = 4;
               WorkMode_INVALID = 5;
            };
            WorkMode work_mode = 6 [json_name = "work-mode"];
            uint32 smart_link_flush_vlan = 7 [json_name = "smart-link-flush-vlan"];
            bool inactive_port_shutdown = 8 [json_name = "inactive-port-shutdown"];
            bool preempt_enable = 9 [json_name = "preempt-enable"];
            uint32 preempt_delay_minutes = 10 [json_name = "preempt-delay-minutes"];
            uint32 preempt_delay_seconds = 11 [json_name = "preempt-delay-seconds"];
            uint32 preempt_delay_milliseconds = 12 [json_name = "preempt-delay-milliseconds"];
            uint32 up_member_num = 13 [json_name = "up-member-num"];
            uint32 online_member_num = 14 [json_name = "online-member-num"];
            uint32 member_num = 15 [json_name = "member-num"];
            uint64 max_bandwidth = 16 [json_name = "max-bandwidth"];
            message Members {
               message Member {
                  string name = 1 [json_name = "name"];
                  uint32 weight = 2 [json_name = "weight"];
                  enum Status {
                     Status_DOWN = 0;
                     Status_UP = 1;
                  };
                  Status status = 3 [json_name = "status"];
                  bool is_master = 4 [json_name = "is-master"];
                  enum Role {
                     Role_SLAVE = 0;
                     Role_MASTER = 1;
                     Role_COMMON = 3;
                  };
                  Role role = 5 [json_name = "role"];
                  enum LacpNegotiationMode {
                     INVALID_ENUM_VALUE_LacpNegotiationMode = 0;
                     LacpNegotiationMode_ACTIVE = 1;
                     LacpNegotiationMode_PASSIVE = 2;
                  };
                  LacpNegotiationMode lacp_negotiation_mode = 6 [json_name = "lacp-negotiation-mode"];
                  message FimIfmtrunkMember {
                     uint32 hash_index = 1 [json_name = "hash-index"];
                  }
                  FimIfmtrunkMember fim_ifmtrunk_member = 7 [json_name = "fim-ifmtrunk-member"];
                  message Lacp {
                     message PortAttributes {
                        uint32 priority = 1 [json_name = "priority"];
                        enum Role {
                           Role_NONE = 0;
                           Role_MASTER = 1;
                           Role_SLAVE = 2;
                        };
                        Role role = 2 [json_name = "role"];
                        uint32 id = 3 [json_name = "id"];
                     }
                     PortAttributes port_attributes = 1 [json_name = "port-attributes"];
                     message PortNegotiateParameter {
                        enum Status {
                           Status_UNSELECTED = 0;
                           Status_SELECTED = 1;
                           Status_INDEP = 2;
                           Status_FORCEX_UP = 3;
                        };
                        Status status = 1 [json_name = "status"];
                        enum PortType {
                           PortType_NULL = 0;
                           PortType_X_10M = 1;
                           PortType_X_100M = 2;
                           PortType_X_1GE = 3;
                           PortType_X_10GE = 4;
                           PortType_X_100GE = 5;
                           PortType_X_1TE = 6;
                           PortType_X_10TE = 7;
                           PortType_X_100TE = 8;
                           PortType_X_1000TE = 9;
                           PortType_X_40GE = 10;
                           PortType_X_400GE = 11;
                           PortType_X_25GE = 12;
                           PortType_X_200GE = 13;
                           PortType_X_50GE = 14;
                           PortType_X_1200GE = 15;
                           PortType_FLEXE = 10002;
                        };
                        PortType port_type = 2 [json_name = "port-type"];
                        string actor_state = 3 [json_name = "actor-state"];
                        uint32 actor_portkey = 4 [json_name = "actor-portkey"];
                        string actor_sysid = 5 [json_name = "actor-sysid"];
                        uint32 actor_portno = 6 [json_name = "actor-portno"];
                        string partner_sysprimac = 7 [json_name = "partner-sysprimac"];
                        uint32 partner_syspri = 8 [json_name = "partner-syspri"];
                        string partner_sysid = 9 [json_name = "partner-sysid"];
                        uint32 partner_portpri = 10 [json_name = "partner-portpri"];
                        uint32 partner_id = 11 [json_name = "partner-id"];
                        uint32 partner_portkey = 12 [json_name = "partner-portkey"];
                        string partner_state = 13 [json_name = "partner-state"];
                        bool reference_port = 14 [json_name = "reference-port"];
                     }
                     PortNegotiateParameter port_negotiate_parameter = 2 [json_name = "port-negotiate-parameter"];
                     message PduStatistic {
                        uint32 recv_pdunum = 1 [json_name = "recv-pdunum"];
                        uint32 recv_err_pdunum = 2 [json_name = "recv-err-pdunum"];
                        uint32 send_pdunum = 3 [json_name = "send-pdunum"];
                        uint32 recv_marker_pdunum = 4 [json_name = "recv-marker-pdunum"];
                        uint32 recv_err_makernum = 5 [json_name = "recv-err-makernum"];
                        uint32 send_makernum = 6 [json_name = "send-makernum"];
                     }
                     PduStatistic pdu_statistic = 3 [json_name = "pdu-statistic"];
                     enum Status {
                        Status_UNSELECTED = 0;
                        Status_SELECTED = 1;
                        Status_INDEP = 2;
                        Status_FORCEX_UP = 3;
                     };
                     Status status = 4 [json_name = "status"];
                     enum PortType {
                        PortType_NULL = 0;
                        PortType_X_10M = 1;
                        PortType_X_100M = 2;
                        PortType_X_1GE = 3;
                        PortType_X_10GE = 4;
                        PortType_X_100GE = 5;
                        PortType_X_1TE = 6;
                        PortType_X_10TE = 7;
                        PortType_X_100TE = 8;
                        PortType_X_1000TE = 9;
                        PortType_X_40GE = 10;
                        PortType_X_400GE = 11;
                        PortType_X_25GE = 12;
                        PortType_X_200GE = 13;
                        PortType_X_50GE = 14;
                        PortType_X_1200GE = 15;
                        PortType_FLEXE = 10002;
                     };
                     PortType port_type = 5 [json_name = "port-type"];
                     string actor_state = 6 [json_name = "actor-state"];
                     uint32 actor_portkey = 7 [json_name = "actor-portkey"];
                     string actor_sysid = 8 [json_name = "actor-sysid"];
                     uint32 actor_portno = 9 [json_name = "actor-portno"];
                     string partner_sysprimac = 10 [json_name = "partner-sysprimac"];
                     uint32 partner_syspri = 11 [json_name = "partner-syspri"];
                     string partner_sysid = 12 [json_name = "partner-sysid"];
                     uint32 partner_portpri = 13 [json_name = "partner-portpri"];
                     uint32 partner_id = 14 [json_name = "partner-id"];
                     uint32 partner_portkey = 15 [json_name = "partner-portkey"];
                     string partner_state = 16 [json_name = "partner-state"];
                     bool reference_port = 17 [json_name = "reference-port"];
                  }
                  Lacp lacp = 8 [json_name = "lacp"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 17 [json_name = "members"];
            message Forwardings {
               message Forwarding {
                  uint32 id = 1 [json_name = "id"];
                  string master_port = 2 [json_name = "master-port"];
                  string slave_port = 3 [json_name = "slave-port"];
               }
               repeated Forwarding forwarding = 1 [json_name = "forwarding"];
            }
            Forwardings forwardings = 18 [json_name = "forwardings"];
            message FimIfmtrunk {
               bool trunk_locality_flag = 1 [json_name = "trunk-locality-flag"];
               enum TrunkHashType {
                  TrunkHashType_CRC32X_1 = 0;
                  TrunkHashType_CRC32X_2 = 1;
                  TrunkHashType_XORX_16BIT = 2;
                  TrunkHashType_XORX_8BIT = 3;
               };
               TrunkHashType trunk_hash_type = 2 [json_name = "trunk-hash-type"];
               enum DualReceiveEnable {
                  DualReceiveEnable_DISABLE = 0;
                  DualReceiveEnable_ENABLE = 1;
               };
               DualReceiveEnable dual_receive_enable = 3 [json_name = "dual-receive-enable"];
            }
            FimIfmtrunk fim_ifmtrunk = 19 [json_name = "fim-ifmtrunk"];
            message Lacp {
               enum ReceiveTimeoutType {
                  ReceiveTimeoutType_SLOW = 0;
                  ReceiveTimeoutType_FAST = 1;
               };
               ReceiveTimeoutType receive_timeout_type = 1 [json_name = "receive-timeout-type"];
               uint32 fast_timeout_value = 2 [json_name = "fast-timeout-value"];
               bool support_preempt = 3 [json_name = "support-preempt"];
               enum SelectPortStd {
                  INVALID_ENUM_VALUE_SelectPortStd = 0;
                  SelectPortStd_SPEED = 1;
                  SelectPortStd_PRIORITY = 3;
               };
               SelectPortStd select_port_std = 4 [json_name = "select-port-std"];
               uint32 preempt_delay = 5 [json_name = "preempt-delay"];
               uint32 max_active_num = 6 [json_name = "max-active-num"];
               uint32 collect_max_delay = 7 [json_name = "collect-max-delay"];
               bool mix_rate_enable = 8 [json_name = "mix-rate-enable"];
               bool backup_enable = 9 [json_name = "backup-enable"];
               bool damp_state_enable = 10 [json_name = "damp-state-enable"];
               bool damp_mac_enable = 11 [json_name = "damp-mac-enable"];
               string sys_mac = 12 [json_name = "sys-mac"];
               uint32 sys_priority = 13 [json_name = "sys-priority"];
               message MLag {
                  uint32 sys_priority = 1 [json_name = "sys-priority"];
                  string sys_mac = 2 [json_name = "sys-mac"];
                  uint32 negotia_delay = 3 [json_name = "negotia-delay"];
               }
               MLag m_lag = 14 [json_name = "m-lag"];
               message TrackVrrp {
                  uint32 vrrp_id = 1 [json_name = "vrrp-id"];
                  string if_name = 2 [json_name = "if-name"];
                  uint32 sys_priority = 3 [json_name = "sys-priority"];
                  bool id_ext = 4 [json_name = "id-ext"];
               }
               TrackVrrp track_vrrp = 15 [json_name = "track-vrrp"];
               uint32 portup_num = 16 [json_name = "portup-num"];
               uint32 oper_syspri = 17 [json_name = "oper-syspri"];
               string oper_sysmac = 18 [json_name = "oper-sysmac"];
               enum SysmacSource {
                  INVALID_ENUM_VALUE_SysmacSource = 0;
                  SysmacSource_LOCAL = 1;
                  SysmacSource_REMOTE = 2;
               };
               SysmacSource sysmac_source = 19 [json_name = "sysmac-source"];
               uint32 portkey = 20 [json_name = "portkey"];
               bool trunk_portid_ext = 21 [json_name = "trunk-portid-ext"];
               message ErrorPackets {
                  string port_name = 1 [json_name = "port-name"];
                  string time = 2 [json_name = "time"];
                  string content = 3 [json_name = "content"];
               }
               ErrorPackets error_packets = 22 [json_name = "error-packets"];
               bool unique_port_no = 23 [json_name = "unique-port-no"];
               bool trunk_delay_enable = 24 [json_name = "trunk-delay-enable"];
            }
            Lacp lacp = 20 [json_name = "lacp"];
            message JumboFrame {
               uint32 max_jumbo_frame = 1 [json_name = "max-jumbo-frame"];
               uint32 max_non_jumbo_frame = 2 [json_name = "max-non-jumbo-frame"];
            }
            JumboFrame jumbo_frame = 21 [json_name = "jumbo-frame"];
            message LocalPreference {
               enum Enable {
                  Enable_DISABLE = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
               enum Enhanced {
                  Enhanced_DISABLE = 0;
                  Enhanced_ENABLE = 1;
               };
               Enhanced enhanced = 2 [json_name = "enhanced"];
               uint32 least_active_linknumber = 3 [json_name = "least-active-linknumber"];
            }
            LocalPreference local_preference = 22 [json_name = "local-preference"];
            message TrunkLoadbalance {
               message Mpls {
                  enum TopLabel {
                     TopLabel_DISABLE = 0;
                     TopLabel_ENABLE = 1;
                  };
                  TopLabel top_label = 1 [json_name = "top-label"];
                  enum SecondLabel {
                     SecondLabel_DISABLE = 0;
                     SecondLabel_ENABLE = 1;
                  };
                  SecondLabel second_label = 2 [json_name = "second-label"];
                  enum ThirdLabel {
                     ThirdLabel_DISABLE = 0;
                     ThirdLabel_ENABLE = 1;
                  };
                  ThirdLabel third_label = 3 [json_name = "third-label"];
                  enum SrcIp {
                     SrcIp_DISABLE = 0;
                     SrcIp_ENABLE = 1;
                  };
                  SrcIp src_ip = 4 [json_name = "src-ip"];
                  enum DstIp {
                     DstIp_DISABLE = 0;
                     DstIp_ENABLE = 1;
                  };
                  DstIp dst_ip = 5 [json_name = "dst-ip"];
                  enum SrcInterface {
                     SrcInterface_DISABLE = 0;
                     SrcInterface_ENABLE = 1;
                  };
                  SrcInterface src_interface = 6 [json_name = "src-interface"];
                  enum SrcMac {
                     SrcMac_DISABLE = 0;
                     SrcMac_ENABLE = 1;
                  };
                  SrcMac src_mac = 7 [json_name = "src-mac"];
                  enum DstMac {
                     DstMac_DISABLE = 0;
                     DstMac_ENABLE = 1;
                  };
                  DstMac dst_mac = 8 [json_name = "dst-mac"];
                  enum L4SrcPort {
                     L4SrcPort_DISABLE = 0;
                     L4SrcPort_ENABLE = 1;
                  };
                  L4SrcPort l4_src_port = 9 [json_name = "l4-src-port"];
                  enum L4DstPort {
                     L4DstPort_DISABLE = 0;
                     L4DstPort_ENABLE = 1;
                  };
                  L4DstPort l4_dst_port = 10 [json_name = "l4-dst-port"];
                  enum Protocol {
                     Protocol_DISABLE = 0;
                     Protocol_ENABLE = 1;
                  };
                  Protocol protocol = 11 [json_name = "protocol"];
               }
               Mpls mpls = 1 [json_name = "mpls"];
               message Ip {
                  enum DstIp {
                     DstIp_DISABLE = 0;
                     DstIp_ENABLE = 1;
                  };
                  DstIp dst_ip = 1 [json_name = "dst-ip"];
                  enum SrcIp {
                     SrcIp_DISABLE = 0;
                     SrcIp_ENABLE = 1;
                  };
                  SrcIp src_ip = 2 [json_name = "src-ip"];
                  enum L4DstPort {
                     L4DstPort_DISABLE = 0;
                     L4DstPort_ENABLE = 1;
                  };
                  L4DstPort l4_dst_port = 3 [json_name = "l4-dst-port"];
                  enum L4SrcPort {
                     L4SrcPort_DISABLE = 0;
                     L4SrcPort_ENABLE = 1;
                  };
                  L4SrcPort l4_src_port = 4 [json_name = "l4-src-port"];
                  enum Protocol {
                     Protocol_DISABLE = 0;
                     Protocol_ENABLE = 1;
                  };
                  Protocol protocol = 5 [json_name = "protocol"];
                  enum DstMac {
                     DstMac_DISABLE = 0;
                     DstMac_ENABLE = 1;
                  };
                  DstMac dst_mac = 6 [json_name = "dst-mac"];
                  enum SrcMac {
                     SrcMac_DISABLE = 0;
                     SrcMac_ENABLE = 1;
                  };
                  SrcMac src_mac = 7 [json_name = "src-mac"];
                  enum FlowLabel {
                     FlowLabel_DISABLE = 0;
                     FlowLabel_ENABLE = 1;
                  };
                  FlowLabel flow_label = 8 [json_name = "flow-label"];
                  enum SrcInterface {
                     SrcInterface_DISABLE = 0;
                     SrcInterface_ENABLE = 1;
                  };
                  SrcInterface src_interface = 9 [json_name = "src-interface"];
                  enum DstQp {
                     DstQp_DISABLE = 0;
                     DstQp_ENABLE = 1;
                  };
                  DstQp dst_qp = 10 [json_name = "dst-qp"];
                  enum SessionId {
                     SessionId_DISABLE = 0;
                     SessionId_ENABLE = 1;
                  };
                  SessionId session_id = 11 [json_name = "session-id"];
               }
               Ip ip = 2 [json_name = "ip"];
               message L2 {
                  enum DstMac {
                     DstMac_DISABLE = 0;
                     DstMac_ENABLE = 1;
                  };
                  DstMac dst_mac = 1 [json_name = "dst-mac"];
                  enum SrcMac {
                     SrcMac_DISABLE = 0;
                     SrcMac_ENABLE = 1;
                  };
                  SrcMac src_mac = 2 [json_name = "src-mac"];
                  enum EthType {
                     EthType_DISABLE = 0;
                     EthType_ENABLE = 1;
                  };
                  EthType eth_type = 3 [json_name = "eth-type"];
                  enum SrcInterface {
                     SrcInterface_DISABLE = 0;
                     SrcInterface_ENABLE = 1;
                  };
                  SrcInterface src_interface = 4 [json_name = "src-interface"];
                  enum Vlan {
                     Vlan_DISABLE = 0;
                     Vlan_ENABLE = 1;
                  };
                  Vlan vlan = 5 [json_name = "vlan"];
               }
               L2 l2 = 3 [json_name = "l2"];
               message HashMode {
                  uint32 hash_mode = 1 [json_name = "hash-mode"];
               }
               HashMode hash_mode = 4 [json_name = "hash-mode"];
            }
            TrunkLoadbalance trunk_loadbalance = 23 [json_name = "trunk-loadbalance"];
            message BrasNasLogic {
               string system_name = 1 [json_name = "system-name"];
               string ip_address = 2 [json_name = "ip-address"];
               string eth_trunk_number = 3 [json_name = "eth-trunk-number"];
            }
            BrasNasLogic bras_nas_logic = 24 [json_name = "bras-nas-logic"];
         }
         Trunk trunk = 46 [json_name = "trunk"];
         message Bas {
            message EapAuthenticationDomainIndividual {
               bool enable = 1 [json_name = "enable"];
            }
            EapAuthenticationDomainIndividual eap_authentication_domain_individual = 1 [json_name = "eap-authentication-domain-individual"];
            message BasInterface {
               message Information {
                  bool is_static_user_exist = 1 [json_name = "is-static-user-exist"];
                  bool is_selected = 2 [json_name = "is-selected"];
                  int32 increased_user_num = 3 [json_name = "increased-user-num"];
                  uint32 access_number = 4 [json_name = "access-number"];
               }
               Information information = 1 [json_name = "information"];
               message AccessUsers {
                  message AccessUser {
                     uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                     uint32 ce_vlan = 2 [json_name = "ce-vlan"];
                     uint32 user_number = 3 [json_name = "user-number"];
                     uint32 ipoe_user_number = 4 [json_name = "ipoe-user-number"];
                     uint32 pppoe_user_number = 5 [json_name = "pppoe-user-number"];
                  }
                  repeated AccessUser access_user = 1 [json_name = "access-user"];
               }
               AccessUsers access_users = 2 [json_name = "access-users"];
               message Statistics {
                  string last_statistics_time = 1 [json_name = "last-statistics-time"];
                  uint32 input_rate = 2 [json_name = "input-rate"];
                  uint32 output_rate = 3 [json_name = "output-rate"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            BasInterface bas_interface = 2 [json_name = "bas-interface"];
            message PppoeBasStatics {
               uint32 active_session = 1 [json_name = "active-session"];
               uint32 total_sessions = 2 [json_name = "total-sessions"];
               uint32 receive_padi_packets = 3 [json_name = "receive-padi-packets"];
               uint32 discard_padi_packets = 4 [json_name = "discard-padi-packets"];
               uint32 send_pado_packets = 5 [json_name = "send-pado-packets"];
               uint32 receive_padr_packets = 6 [json_name = "receive-padr-packets"];
               uint32 discard_padr_packets = 7 [json_name = "discard-padr-packets"];
               uint32 send_pads_packets = 8 [json_name = "send-pads-packets"];
               uint32 discard_padr_same_mac = 9 [json_name = "discard-padr-same-mac"];
               uint32 receive_padt_packets = 10 [json_name = "receive-padt-packets"];
               uint32 discard_padt_packets = 11 [json_name = "discard-padt-packets"];
               uint32 send_padt_packets = 12 [json_name = "send-padt-packets"];
               uint32 send_padm_packets = 13 [json_name = "send-padm-packets"];
               uint32 send_padm_url_packets = 14 [json_name = "send-padm-url-packets"];
               uint32 send_padm_motm_packets = 15 [json_name = "send-padm-motm-packets"];
               uint32 send_padn_packets = 16 [json_name = "send-padn-packets"];
               uint32 receive_session_packets = 17 [json_name = "receive-session-packets"];
               uint32 discard_session_packets = 18 [json_name = "discard-session-packets"];
               uint32 send_session_packets = 19 [json_name = "send-session-packets"];
               uint32 receive_packets = 20 [json_name = "receive-packets"];
               uint32 discard_packets = 21 [json_name = "discard-packets"];
               uint32 invalid_version = 22 [json_name = "invalid-version"];
               uint32 invalid_pad_code = 23 [json_name = "invalid-pad-code"];
               uint32 invalid_pad_tags = 24 [json_name = "invalid-pad-tags"];
               uint32 invalid_pad_tag_length = 25 [json_name = "invalid-pad-tag-length"];
               uint32 invalid_pad_type = 26 [json_name = "invalid-pad-type"];
               uint32 invalid_padi_sessions = 27 [json_name = "invalid-padi-sessions"];
               uint32 invalid_padr_sessions = 28 [json_name = "invalid-padr-sessions"];
               uint32 invalid_pad_packet_length = 29 [json_name = "invalid-pad-packet-length"];
               uint32 other_invalid_pad_packets = 30 [json_name = "other-invalid-pad-packets"];
               uint32 total_invalid_pad_packets = 31 [json_name = "total-invalid-pad-packets"];
            }
            PppoeBasStatics pppoe_bas_statics = 3 [json_name = "pppoe-bas-statics"];
            message PppBasStatistics {
               uint32 send_echo_request = 1 [json_name = "send-echo-request"];
               uint32 send_echo_reply = 2 [json_name = "send-echo-reply"];
               uint32 send_echo_failed = 3 [json_name = "send-echo-failed"];
               uint32 receive_echo_reply = 4 [json_name = "receive-echo-reply"];
               uint32 receive_echo_request = 5 [json_name = "receive-echo-request"];
               uint32 send_echo_receipt_fast = 6 [json_name = "send-echo-receipt-fast"];
               uint32 receive_echo_request_fast = 7 [json_name = "receive-echo-request-fast"];
               uint32 send_lcp_connection_request = 8 [json_name = "send-lcp-connection-request"];
               uint32 send_lcp_connection_nak = 9 [json_name = "send-lcp-connection-nak"];
               uint32 send_lcp_connection_rejection = 10 [json_name = "send-lcp-connection-rejection"];
               uint32 send_lcp_connection_ack = 11 [json_name = "send-lcp-connection-ack"];
               uint32 send_lcp_code_rejection = 12 [json_name = "send-lcp-code-rejection"];
               uint32 send_lcp_protocol_rejection = 13 [json_name = "send-lcp-protocol-rejection"];
               uint32 send_lcp_termination_request = 14 [json_name = "send-lcp-termination-request"];
               uint32 send_lcp_termination_ack = 15 [json_name = "send-lcp-termination-ack"];
               uint32 receive_lcp_connection_request = 16 [json_name = "receive-lcp-connection-request"];
               uint32 receive_lcp_connection_nak = 17 [json_name = "receive-lcp-connection-nak"];
               uint32 receive_lcp_connection_rejection = 18 [json_name = "receive-lcp-connection-rejection"];
               uint32 receive_lcp_connection_ack = 19 [json_name = "receive-lcp-connection-ack"];
               uint32 receive_lcp_code_rejection = 20 [json_name = "receive-lcp-code-rejection"];
               uint32 receive_lcp_protocol_rejection = 21 [json_name = "receive-lcp-protocol-rejection"];
               uint32 receive_lcp_termination_request = 22 [json_name = "receive-lcp-termination-request"];
               uint32 receive_lcp_termination_ack = 23 [json_name = "receive-lcp-termination-ack"];
               uint32 send_ipcp_connection_request = 24 [json_name = "send-ipcp-connection-request"];
               uint32 send_ipcp_connection_nak = 25 [json_name = "send-ipcp-connection-nak"];
               uint32 send_ipcp_connection_rejection = 26 [json_name = "send-ipcp-connection-rejection"];
               uint32 send_ipcp_connection_ack = 27 [json_name = "send-ipcp-connection-ack"];
               uint32 send_ipcp_code_rejection = 28 [json_name = "send-ipcp-code-rejection"];
               uint32 send_ipcp_protocol_rejection = 29 [json_name = "send-ipcp-protocol-rejection"];
               uint32 send_ipcp_termination_request = 30 [json_name = "send-ipcp-termination-request"];
               uint32 send_ipccp_termination_ack = 31 [json_name = "send-ipccp-termination-ack"];
               uint32 receive_ipcp_connection_request = 32 [json_name = "receive-ipcp-connection-request"];
               uint32 receive_ipcp_connection_nak = 33 [json_name = "receive-ipcp-connection-nak"];
               uint32 receive_ipcp_connection_rejection = 34 [json_name = "receive-ipcp-connection-rejection"];
               uint32 receive_ipcp_connection_ack = 35 [json_name = "receive-ipcp-connection-ack"];
               uint32 receive_ipcp_code_rejection = 36 [json_name = "receive-ipcp-code-rejection"];
               uint32 receive_ipcp_protocol_rejection = 37 [json_name = "receive-ipcp-protocol-rejection"];
               uint32 receive_ipcp_termination_request = 38 [json_name = "receive-ipcp-termination-request"];
               uint32 receive_ipcp_termination_ack = 39 [json_name = "receive-ipcp-termination-ack"];
               uint32 send_ip6cp_connection_request = 40 [json_name = "send-ip6cp-connection-request"];
               uint32 send_ip6cp_connection_nak = 41 [json_name = "send-ip6cp-connection-nak"];
               uint32 send_ip6cp_connection_rejection = 42 [json_name = "send-ip6cp-connection-rejection"];
               uint32 send_ip6cp_connection_ack = 43 [json_name = "send-ip6cp-connection-ack"];
               uint32 send_ip6cp_code_rejection = 44 [json_name = "send-ip6cp-code-rejection"];
               uint32 send_ip6cp_protocol_rejection = 45 [json_name = "send-ip6cp-protocol-rejection"];
               uint32 send_ip6cp_termination_request = 46 [json_name = "send-ip6cp-termination-request"];
               uint32 send_ip6cp_termination_ack = 47 [json_name = "send-ip6cp-termination-ack"];
               uint32 receive_ip6cp_connection_request = 48 [json_name = "receive-ip6cp-connection-request"];
               uint32 receive_ip6cp_connection_nak = 49 [json_name = "receive-ip6cp-connection-nak"];
               uint32 receive_ip6cp_connection_reject = 50 [json_name = "receive-ip6cp-connection-reject"];
               uint32 receive_ip6cp_connection_ack = 51 [json_name = "receive-ip6cp-connection-ack"];
               uint32 receive_ip6cp_code_rejection = 52 [json_name = "receive-ip6cp-code-rejection"];
               uint32 receive_ip6cp_protocol_rejection = 53 [json_name = "receive-ip6cp-protocol-rejection"];
               uint32 receive_ip6cp_termination_request = 54 [json_name = "receive-ip6cp-termination-request"];
               uint32 receive_ip6cp_termination_ack = 55 [json_name = "receive-ip6cp-termination-ack"];
               uint32 send_pap_authentication_ack = 56 [json_name = "send-pap-authentication-ack"];
               uint32 send_pap_authentication_nak = 57 [json_name = "send-pap-authentication-nak"];
               uint32 send_chap_challenge = 58 [json_name = "send-chap-challenge"];
               uint32 send_chap_authentication_ack = 59 [json_name = "send-chap-authentication-ack"];
               uint32 send_chap_authentication_fail = 60 [json_name = "send-chap-authentication-fail"];
               uint32 discard_dail_fast = 61 [json_name = "discard-dail-fast"];
               uint32 discard_chasten = 62 [json_name = "discard-chasten"];
               uint32 receive_pap_authentication_request = 63 [json_name = "receive-pap-authentication-request"];
               uint32 receive_chap_response = 64 [json_name = "receive-chap-response"];
            }
            PppBasStatistics ppp_bas_statistics = 4 [json_name = "ppp-bas-statistics"];
            message AccessType_Layer2Subscriber {
               message Layer2Subscriber6 {
                  message SubscriberBase {
                     enum DefaultDomainType {
                        INVALID_ENUM_VALUE_DefaultDomainType = 0;
                        DefaultDomainType_FORCE = 1;
                        DefaultDomainType_REPLACE = 2;
                     };
                     DefaultDomainType default_domain_type = 1 [json_name = "default-domain-type"];
                     string default_domain_name = 2 [json_name = "default-domain-name"];
                     string pre_domain_name = 3 [json_name = "pre-domain-name"];
                     string bas_interface_name = 4 [json_name = "bas-interface-name"];
                     string radius_server_name = 5 [json_name = "radius-server-name"];
                  }
                  SubscriberBase subscriber_base = 1 [json_name = "subscriber-base"];
                  message NasPortType {
                     enum Type {
                        Type_ASYNC = 0;
                        Type_SYNC = 1;
                        Type_ISDNX_SYNC = 2;
                        Type_ISDNX_ASYNCX_V120 = 3;
                        Type_ISDNX_ASYNCX_V110 = 4;
                        Type_VIRTUAL = 5;
                        Type_PIAFS = 6;
                        Type_HDLC = 7;
                        Type_XX_25 = 8;
                        Type_XX_75 = 9;
                        Type_GX_3X_FAX = 10;
                        Type_SDSL = 11;
                        Type_ADSLX_CAP = 12;
                        Type_ADSLX_DMT = 13;
                        Type_IDSL = 14;
                        Type_ETHERNET = 15;
                        Type_XDSL = 16;
                        Type_CABLE = 17;
                        Type_WIRELESSX_OTHER = 18;
                        Type_X_802X_11 = 19;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  NasPortType nas_port_type = 2 [json_name = "nas-port-type"];
                  message AuthenticationMethod {
                     message AuthenticationMethod8_Bind {
                        bool bind_authentication = 1 [json_name = "bind-authentication"];
                     }
                     message AuthenticationMethod8_Unbind {
                        bool dot1x_authentication = 1 [json_name = "dot1x-authentication"];
                        bool ppp_authentication = 2 [json_name = "ppp-authentication"];
                        message FastWeb_Fast {
                           bool fast_authentication = 1 [json_name = "fast-authentication"];
                        }
                        message FastWeb_Web {
                           bool web_authentication = 1 [json_name = "web-authentication"];
                        }
                        oneof FastWeb {
                           FastWeb_Fast fast_web_fast = 3 [json_name = "fast"];
                           FastWeb_Web fast_web_web = 4 [json_name = "web"];
                        }
                     }
                     oneof AuthenticationMethod8 {
                        AuthenticationMethod8_Bind authentication_method_bind = 1 [json_name = "bind"];
                        AuthenticationMethod8_Unbind authentication_method_unbind = 2 [json_name = "unbind"];
                     }
                  }
                  AuthenticationMethod authentication_method = 3 [json_name = "authentication-method"];
                  message AccessLineIdInsert {
                     message AccessLineIdInsert8_Trust {
                        enum TrustInsertType {
                           INVALID_ENUM_VALUE_TrustInsertType = 0;
                           TrustInsertType_OPTION82 = 1;
                           TrustInsertType_ACCESSX_LINEX_ID = 2;
                        };
                        TrustInsertType trust_insert_type = 1 [json_name = "trust-insert-type"];
                        enum TrustInsertVersion {
                           INVALID_ENUM_VALUE_TrustInsertVersion = 0;
                           TrustInsertVersion_CNX_TELECOM = 1;
                           TrustInsertVersion_CLIENTX_VERSION1 = 2;
                           TrustInsertVersion_CLIENTX_VERSION3 = 3;
                           TrustInsertVersion_CNX_TELECOMX_VERSION2 = 4;
                        };
                        TrustInsertVersion trust_insert_version = 2 [json_name = "trust-insert-version"];
                     }
                     message AccessLineIdInsert8_Distrust {
                        enum DistrustInsertVersion {
                           INVALID_ENUM_VALUE_DistrustInsertVersion = 0;
                           DistrustInsertVersion_CNX_TELECOM = 1;
                           DistrustInsertVersion_CLIENTX_VERSION2 = 2;
                        };
                        DistrustInsertVersion distrust_insert_version = 1 [json_name = "distrust-insert-version"];
                     }
                     oneof AccessLineIdInsert8 {
                        AccessLineIdInsert8_Trust access_line_id_insert_trust = 1 [json_name = "trust"];
                        AccessLineIdInsert8_Distrust access_line_id_insert_distrust = 2 [json_name = "distrust"];
                     }
                  }
                  AccessLineIdInsert access_line_id_insert = 4 [json_name = "access-line-id-insert"];
                  message AccessDelay {
                     message AccessDelay8_Global {
                        uint32 delay_time = 1 [json_name = "delay-time"];
                     }
                     message AccessDelay8_Mac {
                        uint32 odd_delay_time = 1 [json_name = "odd-delay-time"];
                        uint32 even_delay_time = 2 [json_name = "even-delay-time"];
                     }
                     message AccessDelay8_CircuitId {
                        uint32 circuit_id_delay_time = 1 [json_name = "circuit-id-delay-time"];
                        string circuit_id = 2 [json_name = "circuit-id"];
                     }
                     message AccessDelay8_LoadBalanceGroup {
                        uint32 load_balance_group_delay_time = 1 [json_name = "load-balance-group-delay-time"];
                        string load_balance_group = 2 [json_name = "load-balance-group"];
                     }
                     message AccessDelay8_Backup {
                        bool backup_enable = 1 [json_name = "backup-enable"];
                     }
                     oneof AccessDelay8 {
                        AccessDelay8_Global access_delay_global = 1 [json_name = "global"];
                        AccessDelay8_Mac access_delay_mac = 2 [json_name = "mac"];
                        AccessDelay8_CircuitId access_delay_circuit_id = 3 [json_name = "circuit-id"];
                        AccessDelay8_LoadBalanceGroup access_delay_load_balance_group = 4 [json_name = "load-balance-group"];
                        AccessDelay8_Backup access_delay_backup = 5 [json_name = "backup"];
                     }
                     uint32 delay_mac_offset = 6 [json_name = "delay-mac-offset"];
                  }
                  AccessDelay access_delay = 5 [json_name = "access-delay"];
                  message ClientOption60 {
                     enum ClientVendorClass {
                        INVALID_ENUM_VALUE_ClientVendorClass = 0;
                        ClientVendorClass_OPTION60 = 1;
                        ClientVendorClass_VENDORX_CLASS = 2;
                     };
                     ClientVendorClass client_vendor_class = 1 [json_name = "client-vendor-class"];
                  }
                  ClientOption60 client_option60 = 6 [json_name = "client-option60"];
                  message ClientOption18 {
                     bool option18_enable = 1 [json_name = "option18-enable"];
                  }
                  ClientOption18 client_option18 = 7 [json_name = "client-option18"];
                  message ClientOption37 {
                     bool option37_enable = 1 [json_name = "option37-enable"];
                     bool ft_telecom_enable = 2 [json_name = "ft-telecom-enable"];
                  }
                  ClientOption37 client_option37 = 8 [json_name = "client-option37"];
                  message AccessLimits {
                     message AccessLimit {
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                        };
                        UserType user_type = 1 [json_name = "user-type"];
                        uint32 user_number = 2 [json_name = "user-number"];
                     }
                     repeated AccessLimit access_limit = 1 [json_name = "access-limit"];
                  }
                  AccessLimits access_limits = 9 [json_name = "access-limits"];
                  message AccessLimitVlans {
                     message AccessLimitVlan {
                        uint32 start_vlan = 1 [json_name = "start-vlan"];
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                           UserType_IPV4 = 3;
                           UserType_IPV6 = 4;
                        };
                        UserType user_type = 2 [json_name = "user-type"];
                        uint32 end_vlan = 3 [json_name = "end-vlan"];
                        uint32 user_number = 4 [json_name = "user-number"];
                     }
                     repeated AccessLimitVlan access_limit_vlan = 1 [json_name = "access-limit-vlan"];
                  }
                  AccessLimitVlans access_limit_vlans = 10 [json_name = "access-limit-vlans"];
                  message AccessLimitQinqs {
                     message AccessLimitQinq {
                        uint32 start_vlan = 1 [json_name = "start-vlan"];
                        uint32 qinq_vlan = 2 [json_name = "qinq-vlan"];
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                           UserType_IPV4 = 3;
                           UserType_IPV6 = 4;
                        };
                        UserType user_type = 3 [json_name = "user-type"];
                        uint32 end_vlan = 4 [json_name = "end-vlan"];
                        uint32 user_number = 5 [json_name = "user-number"];
                     }
                     repeated AccessLimitQinq access_limit_qinq = 1 [json_name = "access-limit-qinq"];
                  }
                  AccessLimitQinqs access_limit_qinqs = 11 [json_name = "access-limit-qinqs"];
                  message AccessLineIdIdentifyType {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum IdentifyType {
                        IdentifyType_AUTO = 0;
                        IdentifyType_CONFIG = 1;
                     };
                     IdentifyType identify_type = 2 [json_name = "identify-type"];
                  }
                  AccessLineIdIdentifyType access_line_id_identify_type = 12 [json_name = "access-line-id-identify-type"];
                  message AccessLineIdTransmitMode {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum AgentCircuitIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentCircuitIdTransmitMode = 0;
                        AgentCircuitIdTransmitMode_HEX = 1;
                        AgentCircuitIdTransmitMode_STRING = 2;
                     };
                     AgentCircuitIdTransmitMode agent_circuit_id_transmit_mode = 2 [json_name = "agent-circuit-id-transmit-mode"];
                     enum AgentRemoteIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentRemoteIdTransmitMode = 0;
                        AgentRemoteIdTransmitMode_HEX = 1;
                        AgentRemoteIdTransmitMode_STRING = 2;
                     };
                     AgentRemoteIdTransmitMode agent_remote_id_transmit_mode = 3 [json_name = "agent-remote-id-transmit-mode"];
                  }
                  AccessLineIdTransmitMode access_line_id_transmit_mode = 13 [json_name = "access-line-id-transmit-mode"];
                  message AccessLineIdParseValue {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     message ParseValue_All {
                        bool include_all_value = 1 [json_name = "include-all-value"];
                     }
                     message ParseValue_Spec {
                        bool agent_circuit_id = 1 [json_name = "agent-circuit-id"];
                        bool agent_remote_id = 2 [json_name = "agent-remote-id"];
                        string separator = 3 [json_name = "separator"];
                     }
                     oneof ParseValue {
                        ParseValue_All parse_value_all = 2 [json_name = "all"];
                        ParseValue_Spec parse_value_spec = 3 [json_name = "spec"];
                     }
                  }
                  AccessLineIdParseValue access_line_id_parse_value = 14 [json_name = "access-line-id-parse-value"];
                  message IgmpReportLooseCheck {
                     bool enable = 1 [json_name = "enable"];
                  }
                  IgmpReportLooseCheck igmp_report_loose_check = 15 [json_name = "igmp-report-loose-check"];
                  message UserPolicyInterfaceDown {
                     enum Policy {
                        Policy_ONLINE = 0;
                        Policy_OFFLINE = 1;
                     };
                     Policy policy = 1 [json_name = "policy"];
                  }
                  UserPolicyInterfaceDown user_policy_interface_down = 16 [json_name = "user-policy-interface-down"];
                  message ArpProxy {
                     bool enable = 1 [json_name = "enable"];
                  }
                  ArpProxy arp_proxy = 17 [json_name = "arp-proxy"];
                  message UserDetect {
                     bool no_data_check_enable = 1 [json_name = "no-data-check-enable"];
                     uint32 retransmit_time = 2 [json_name = "retransmit-time"];
                     uint32 interval = 3 [json_name = "interval"];
                  }
                  UserDetect user_detect = 18 [json_name = "user-detect"];
                  message LinkAccountResolve {
                     bool enable = 1 [json_name = "enable"];
                  }
                  LinkAccountResolve link_account_resolve = 19 [json_name = "link-account-resolve"];
                  message WlanSwitch {
                     bool enable = 1 [json_name = "enable"];
                     string group_name = 2 [json_name = "group-name"];
                  }
                  WlanSwitch wlan_switch = 20 [json_name = "wlan-switch"];
                  message NasLogic {
                     string system_name = 1 [json_name = "system-name"];
                     string ip_address = 2 [json_name = "ip-address"];
                     string interface_name = 3 [json_name = "interface-name"];
                  }
                  NasLogic nas_logic = 21 [json_name = "nas-logic"];
                  message DhcpProxy {
                     bool enable = 1 [json_name = "enable"];
                  }
                  DhcpProxy dhcp_proxy = 22 [json_name = "dhcp-proxy"];
                  message DhcpLeaseProxy {
                     message DhcpLeaseProxy8_Fixed {
                        uint32 value = 1 [json_name = "value"];
                     }
                     message DhcpLeaseProxy8_Step {
                        uint32 first_value = 1 [json_name = "first-value"];
                        uint32 second_value = 2 [json_name = "second-value"];
                     }
                     oneof DhcpLeaseProxy8 {
                        DhcpLeaseProxy8_Fixed dhcp_lease_proxy_fixed = 1 [json_name = "fixed"];
                        DhcpLeaseProxy8_Step dhcp_lease_proxy_step = 2 [json_name = "step"];
                     }
                     uint32 through_time = 3 [json_name = "through-time"];
                  }
                  DhcpLeaseProxy dhcp_lease_proxy = 23 [json_name = "dhcp-lease-proxy"];
                  message Trigger {
                     bool arp = 1 [json_name = "arp"];
                     bool ip = 2 [json_name = "ip"];
                  }
                  Trigger trigger = 24 [json_name = "trigger"];
                  message UserFlowVpnStatistics {
                     bool enable = 1 [json_name = "enable"];
                  }
                  UserFlowVpnStatistics user_flow_vpn_statistics = 25 [json_name = "user-flow-vpn-statistics"];
                  message DhcpAccess {
                     message TempleteMode_Broadcast {
                        message Broadcast9 {
                           bool enable = 1 [json_name = "enable"];
                        }
                        Broadcast9 broadcast9 = 1 [json_name = "broadcast"];
                     }
                     message TempleteMode_ReplyTrust {
                        message ReplyTrust9 {
                           bool enable = 1 [json_name = "enable"];
                        }
                        ReplyTrust9 reply_trust = 1 [json_name = "reply-trust"];
                     }
                     oneof TempleteMode {
                        TempleteMode_Broadcast templete_mode_broadcast = 1 [json_name = "broadcast"];
                        TempleteMode_ReplyTrust templete_mode_reply_trust = 2 [json_name = "reply-trust"];
                     }
                     message IpoeService {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4 = 1;
                           Type_IPV6 = 2;
                        };
                        Type type = 1 [json_name = "type"];
                     }
                     IpoeService ipoe_service = 3 [json_name = "ipoe-service"];
                     message OptionUpdate {
                        bool enable = 1 [json_name = "enable"];
                     }
                     OptionUpdate option_update = 4 [json_name = "option-update"];
                     message SessionMismatch {
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_OFFLINE = 1;
                           Action_ROAMX_IPV4 = 2;
                           Action_ROAMX_IPV6 = 3;
                           Action_ROAMX_IPV4X_IPV6 = 4;
                           Action_ROAMX_ND = 5;
                           Action_ROAMX_NDX_IPV4 = 6;
                           Action_ROAMX_NDX_IPV6 = 7;
                           Action_ROAMX_NDX_IPV4X_IPV6 = 8;
                        };
                        Action action = 1 [json_name = "action"];
                     }
                     SessionMismatch session_mismatch = 5 [json_name = "session-mismatch"];
                     message ForceRenew {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 time = 2 [json_name = "time"];
                     }
                     ForceRenew force_renew = 6 [json_name = "force-renew"];
                     message IpTtl {
                        uint32 value = 1 [json_name = "value"];
                     }
                     IpTtl ip_ttl = 7 [json_name = "ip-ttl"];
                     message Option61 {
                        enum HardwareType {
                           HardwareType_STRING = 0;
                           HardwareType_HEX = 1;
                        };
                        HardwareType hardware_type = 1 [json_name = "hardware-type"];
                     }
                     Option61 option61 = 8 [json_name = "option61"];
                     message Rebuild {
                        message Type_SelfDefine {
                           string circuit_id = 1 [json_name = "circuit-id"];
                           string remote_id = 2 [json_name = "remote-id"];
                           uint32 inner_vlan = 3 [json_name = "inner-vlan"];
                           uint32 out_vlan = 4 [json_name = "out-vlan"];
                           bool add_domain_description = 5 [json_name = "add-domain-description"];
                        }
                        message Type_Version3 {
                           enum Version3Option37Type {
                              Version3Option37Type_VERSION3OPTION37NEBA = 0;
                              Version3Option37Type_VERSION3OPTION37VULA = 1;
                           };
                           Version3Option37Type version3_option37_type = 1 [json_name = "version3-option37-type"];
                        }
                        message Type_Version4 {
                           bool version410 = 1 [json_name = "version4"];
                        }
                        oneof Type {
                           Type_SelfDefine type_self_define = 1 [json_name = "self-define"];
                           Type_Version3 type_version3 = 2 [json_name = "version3"];
                           Type_Version4 type_version4 = 3 [json_name = "version4"];
                        }
                     }
                     Rebuild rebuild = 9 [json_name = "rebuild"];
                     message Option82Mismatch {
                        bool offline = 1 [json_name = "offline"];
                     }
                     Option82Mismatch option82_mismatch = 10 [json_name = "option82-mismatch"];
                  }
                  DhcpAccess dhcp_access = 26 [json_name = "dhcp-access"];
                  message Dhcpv6Access {
                     message VendorClass {
                        uint32 option_code_value = 1 [json_name = "option-code-value"];
                        uint32 offset_value = 2 [json_name = "offset-value"];
                     }
                     VendorClass vendor_class = 1 [json_name = "vendor-class"];
                     message Option18Interface {
                        string interface_id = 1 [json_name = "interface-id"];
                        bool add_domain_description = 2 [json_name = "add-domain-description"];
                     }
                     Option18Interface option18_interface = 2 [json_name = "option18-interface"];
                     message Option37RemoteId {
                        string remote_id = 1 [json_name = "remote-id"];
                     }
                     Option37RemoteId option37_remote_id = 3 [json_name = "option37-remote-id"];
                     message Option37RelayMode {
                        bool delete_enterprise_number_enable = 1 [json_name = "delete-enterprise-number-enable"];
                     }
                     Option37RelayMode option37_relay_mode = 4 [json_name = "option37-relay-mode"];
                     message LeaseProxy {
                        uint32 prefer_time = 1 [json_name = "prefer-time"];
                        uint32 valid_time = 2 [json_name = "valid-time"];
                        bool user_detect = 3 [json_name = "user-detect"];
                     }
                     LeaseProxy lease_proxy = 5 [json_name = "lease-proxy"];
                  }
                  Dhcpv6Access dhcpv6_access = 27 [json_name = "dhcpv6-access"];
                  message Dot1XTrigger {
                     bool trigger_enable = 1 [json_name = "trigger-enable"];
                  }
                  Dot1XTrigger dot1x_trigger = 28 [json_name = "dot1x-trigger"];
                  message AuthenticationMethodIpv6 {
                     message AuthenticationMethod_Bind {
                        bool bind_authentication = 1 [json_name = "bind-authentication"];
                     }
                     message AuthenticationMethod_Unbind {
                        bool dot1x_authentication = 1 [json_name = "dot1x-authentication"];
                        bool ppp_authentication = 2 [json_name = "ppp-authentication"];
                        message FastWeb_Fast {
                           bool fast_authentication = 1 [json_name = "fast-authentication"];
                        }
                        message FastWeb_Web {
                           bool web_authentication = 1 [json_name = "web-authentication"];
                        }
                        oneof FastWeb {
                           FastWeb_Fast fast_web_fast = 3 [json_name = "fast"];
                           FastWeb_Web fast_web_web = 4 [json_name = "web"];
                        }
                     }
                     oneof AuthenticationMethod {
                        AuthenticationMethod_Bind authentication_method_bind = 1 [json_name = "bind"];
                        AuthenticationMethod_Unbind authentication_method_unbind = 2 [json_name = "unbind"];
                     }
                  }
                  AuthenticationMethodIpv6 authentication_method_ipv6 = 29 [json_name = "authentication-method-ipv6"];
                  message Ipv6NdTrigger {
                     bool nd = 1 [json_name = "nd"];
                     bool ipv6 = 2 [json_name = "ipv6"];
                  }
                  Ipv6NdTrigger ipv6_nd_trigger = 30 [json_name = "ipv6-nd-trigger"];
                  message ClientOption38 {
                     bool enable = 1 [json_name = "enable"];
                     bool basinfo_insert_mac = 2 [json_name = "basinfo-insert-mac"];
                  }
                  ClientOption38 client_option38 = 31 [json_name = "client-option38"];
                  message NdProxy {
                     bool enable = 1 [json_name = "enable"];
                  }
                  NdProxy nd_proxy = 32 [json_name = "nd-proxy"];
                  message Ipv6Pools {
                     message Ipv6Pool {
                        string name = 1 [json_name = "name"];
                     }
                     repeated Ipv6Pool ipv6_pool = 1 [json_name = "ipv6-pool"];
                  }
                  Ipv6Pools ipv6_pools = 33 [json_name = "ipv6-pools"];
                  message L2Tp {
                     message CevlanOffset {
                        uint32 offset_value = 1 [json_name = "offset-value"];
                     }
                     CevlanOffset cevlan_offset = 1 [json_name = "cevlan-offset"];
                  }
                  L2Tp l2tp = 34 [json_name = "l2tp"];
                  message Ppp {
                     message RoamDomain {
                        string name = 1 [json_name = "name"];
                     }
                     RoamDomain roam_domain = 1 [json_name = "roam-domain"];
                     message KeepAliveSlow {
                        bool enable = 1 [json_name = "enable"];
                     }
                     KeepAliveSlow keep_alive_slow = 2 [json_name = "keep-alive-slow"];
                     message AccessIpLimit {
                        uint32 access_user_limit = 1 [json_name = "access-user-limit"];
                        bool exclude_enable = 2 [json_name = "exclude-enable"];
                     }
                     AccessIpLimit access_ip_limit = 3 [json_name = "access-ip-limit"];
                     message AccessIp {
                        uint32 access_ip_number = 1 [json_name = "access-ip-number"];
                     }
                     AccessIp access_ip = 4 [json_name = "access-ip"];
                     message DefaultDomain {
                        string domain_name = 1 [json_name = "domain-name"];
                        string force_domain_name = 2 [json_name = "force-domain-name"];
                     }
                     DefaultDomain default_domain = 5 [json_name = "default-domain"];
                  }
                  Ppp ppp = 35 [json_name = "ppp"];
                  message MapInterface {
                     string map_interface_name = 1 [json_name = "map-interface-name"];
                  }
                  MapInterface map_interface = 36 [json_name = "map-interface"];
                  message Trust8021PProtocol {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Trust8021PProtocol trust_8021p_protocol = 37 [json_name = "trust-8021p-protocol"];
                  message UserBandwidthAutoAdapt {
                     bool enable = 1 [json_name = "enable"];
                     bool type1 = 2 [json_name = "type1"];
                  }
                  UserBandwidthAutoAdapt user_bandwidth_auto_adapt = 38 [json_name = "user-bandwidth-auto-adapt"];
                  message ServiceIdentifyPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  ServiceIdentifyPolicy service_identify_policy = 39 [json_name = "service-identify-policy"];
                  message DefaultPasswordTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultPasswordTemplate default_password_template = 40 [json_name = "default-password-template"];
                  message Block {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Block block = 41 [json_name = "block"];
                  message DefaultUserNameTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultUserNameTemplate default_user_name_template = 42 [json_name = "default-user-name-template"];
                  message Bas8021PToVpn {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Bas8021PToVpn bas_8021p_to_vpn = 43 [json_name = "bas-8021p-to-vpn"];
                  message Ssid {
                     string name = 1 [json_name = "name"];
                  }
                  Ssid ssid = 44 [json_name = "ssid"];
                  message WlanOption82DecodeApMac {
                     message Mode_Huawei {
                        bool type3 = 1 [json_name = "type3"];
                     }
                     message Mode_Other {
                        bool type1 = 1 [json_name = "type1"];
                        bool type2 = 2 [json_name = "type2"];
                     }
                     oneof Mode {
                        Mode_Huawei mode_huawei = 1 [json_name = "huawei"];
                        Mode_Other mode_other = 2 [json_name = "other"];
                     }
                  }
                  WlanOption82DecodeApMac wlan_option82_decode_ap_mac = 45 [json_name = "wlan-option82-decode-ap-mac"];
                  message WlanOption82DecodeSsid {
                     message Mode_Huawei {
                        bool type3 = 1 [json_name = "type3"];
                     }
                     message Mode_Other {
                        bool type1 = 1 [json_name = "type1"];
                        bool type2 = 2 [json_name = "type2"];
                     }
                     oneof Mode {
                        Mode_Huawei mode_huawei = 1 [json_name = "huawei"];
                        Mode_Other mode_other = 2 [json_name = "other"];
                     }
                  }
                  WlanOption82DecodeSsid wlan_option82_decode_ssid = 46 [json_name = "wlan-option82-decode-ssid"];
                  message QosProfileApplys {
                     message QosProfileApply {
                        enum Direction {
                           Direction_INBOUND = 0;
                           Direction_OUTBOUND = 1;
                           Direction_ALL = 2;
                        };
                        Direction direction = 1 [json_name = "direction"];
                        enum AnyOtherType {
                           AnyOtherType_NOTX_CONFIG = 0;
                           AnyOtherType_USERX_VLAN = 1;
                           AnyOtherType_QINQ = 2;
                        };
                        AnyOtherType any_other_type = 2 [json_name = "any-other-type"];
                        uint32 pe_vlan_id = 3 [json_name = "pe-vlan-id"];
                        uint32 ce_begin_vlan_id = 4 [json_name = "ce-begin-vlan-id"];
                        uint32 ce_end_vlan_id = 5 [json_name = "ce-end-vlan-id"];
                        enum IdentifyType {
                           INVALID_ENUM_VALUE_IdentifyType = 0;
                           IdentifyType_PEX_VID = 1;
                           IdentifyType_CEX_VID = 2;
                           IdentifyType_PEX_CEX_VID = 3;
                           IdentifyType_VLANX_ID = 4;
                           IdentifyType_NONE = 5;
                           IdentifyType_OPTION82 = 7;
                           IdentifyType_ACCESSX_LINEX_ID = 11;
                        };
                        IdentifyType identify_type = 6 [json_name = "identify-type"];
                        string profile_name = 7 [json_name = "profile-name"];
                        string group_name = 8 [json_name = "group-name"];
                        uint32 session_limit_number = 9 [json_name = "session-limit-number"];
                     }
                     repeated QosProfileApply qos_profile_apply = 1 [json_name = "qos-profile-apply"];
                  }
                  QosProfileApplys qos_profile_applys = 47 [json_name = "qos-profile-applys"];
                  message UserGroupQueueApplys {
                     message UserGroupQueueApply {
                        enum Direction {
                           INVALID_ENUM_VALUE_Direction = 0;
                           Direction_OUTBOUND = 1;
                        };
                        Direction direction = 1 [json_name = "direction"];
                        string group_queue_name = 2 [json_name = "group-queue-name"];
                        string group_name = 3 [json_name = "group-name"];
                     }
                     repeated UserGroupQueueApply user_group_queue_apply = 1 [json_name = "user-group-queue-apply"];
                  }
                  UserGroupQueueApplys user_group_queue_applys = 48 [json_name = "user-group-queue-applys"];
                  message ClientFastAccess {
                     bool client_replace = 1 [json_name = "client-replace"];
                  }
                  ClientFastAccess client_fast_access = 49 [json_name = "client-fast-access"];
                  message NdRaSendFast {
                     uint32 transmit_number = 1 [json_name = "transmit-number"];
                  }
                  NdRaSendFast nd_ra_send_fast = 50 [json_name = "nd-ra-send-fast"];
                  message NdRaUnicast {
                     bool enable = 1 [json_name = "enable"];
                  }
                  NdRaUnicast nd_ra_unicast = 51 [json_name = "nd-ra-unicast"];
                  message NdNsMulticastMac {
                     bool enable = 1 [json_name = "enable"];
                  }
                  NdNsMulticastMac nd_ns_multicast_mac = 52 [json_name = "nd-ns-multicast-mac"];
                  message Option82Identify {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Option82Identify option82_identify = 53 [json_name = "option82-identify"];
                  message VbasMacMode {
                     string mac_address = 1 [json_name = "mac-address"];
                     enum AuthenticationMode {
                        INVALID_ENUM_VALUE_AuthenticationMode = 0;
                        AuthenticationMode_IGNORE = 1;
                        AuthenticationMode_REJECT = 2;
                     };
                     AuthenticationMode authentication_mode = 2 [json_name = "authentication-mode"];
                  }
                  VbasMacMode vbas_mac_mode = 54 [json_name = "vbas-mac-mode"];
                  message PermitOrDenyAccess {
                     message PermitOrDeny_DenyDomain {
                        repeated string deny_domain = 1 [json_name = "deny-domain"];
                     }
                     message PermitOrDeny_PermitDomain {
                        repeated string permit_domain = 1 [json_name = "permit-domain"];
                     }
                     message PermitOrDeny_DenyDomainGroup {
                        message DenyDomainGroup9 {
                           string deny_domain_list = 1 [json_name = "deny-domain-list"];
                        }
                        DenyDomainGroup9 deny_domain_group = 1 [json_name = "deny-domain-group"];
                     }
                     message PermitOrDeny_PermitDomainGroup {
                        message PermitDomainGroup9 {
                           string permit_domain_list = 1 [json_name = "permit-domain-list"];
                        }
                        PermitDomainGroup9 permit_domain_group = 1 [json_name = "permit-domain-group"];
                     }
                     oneof PermitOrDeny {
                        PermitOrDeny_DenyDomain permit_or_deny_deny_domain = 1 [json_name = "deny-domain"];
                        PermitOrDeny_PermitDomain permit_or_deny_permit_domain = 2 [json_name = "permit-domain"];
                        PermitOrDeny_DenyDomainGroup permit_or_deny_deny_domain_group = 3 [json_name = "deny-domain-group"];
                        PermitOrDeny_PermitDomainGroup permit_or_deny_permit_domain_group = 4 [json_name = "permit-domain-group"];
                     }
                  }
                  PermitOrDenyAccess permit_or_deny_access = 55 [json_name = "permit-or-deny-access"];
                  message AccessLineIdParseMode {
                     enum ParseType {
                        ParseType_OPTION82 = 0;
                        ParseType_ACCESSX_LINEX_ID = 1;
                     };
                     ParseType parse_type = 1 [json_name = "parse-type"];
                     enum ParseFormat {
                        INVALID_ENUM_VALUE_ParseFormat = 0;
                        ParseFormat_BINARY = 1;
                        ParseFormat_TRX_101 = 2;
                        ParseFormat_CN = 3;
                     };
                     ParseFormat parse_format = 2 [json_name = "parse-format"];
                  }
                  AccessLineIdParseMode access_line_id_parse_mode = 56 [json_name = "access-line-id-parse-mode"];
                  message DefaultUserName {
                     string user_name = 1 [json_name = "user-name"];
                  }
                  DefaultUserName default_user_name = 57 [json_name = "default-user-name"];
                  message FilterPolicyAcl {
                     string dhcp_acl_number = 1 [json_name = "dhcp-acl-number"];
                     string ppp_acl_number = 2 [json_name = "ppp-acl-number"];
                  }
                  FilterPolicyAcl filter_policy_acl = 58 [json_name = "filter-policy-acl"];
               }
               Layer2Subscriber6 layer2_subscriber = 1 [json_name = "layer2-subscriber"];
            }
            message AccessType_Layer2Leaseline {
               message Layer2Leaseline6 {
                  string user_name = 1 [json_name = "user-name"];
                  string password = 2 [json_name = "password"];
                  enum PasswordType {
                     INVALID_ENUM_VALUE_PasswordType = 0;
                     PasswordType_SIMPLE = 4;
                     PasswordType_CIPHER = 5;
                  };
                  PasswordType password_type = 3 [json_name = "password-type"];
                  message LeaselineBase {
                     string default_domain_name = 1 [json_name = "default-domain-name"];
                     string bas_interface_name = 2 [json_name = "bas-interface-name"];
                     string radius_server_name = 3 [json_name = "radius-server-name"];
                     enum NasPortType {
                        NasPortType_ASYNC = 0;
                        NasPortType_SYNC = 1;
                        NasPortType_ISDNX_SYNC = 2;
                        NasPortType_ISDNX_ASYNCX_V120 = 3;
                        NasPortType_ISDNX_ASYNCX_V110 = 4;
                        NasPortType_VIRTUAL = 5;
                        NasPortType_PIAFS = 6;
                        NasPortType_HDLC = 7;
                        NasPortType_XX_25 = 8;
                        NasPortType_XX_75 = 9;
                        NasPortType_GX_3X_FAX = 10;
                        NasPortType_SDSL = 11;
                        NasPortType_ADSLX_CAP = 12;
                        NasPortType_ADSLX_DMT = 13;
                        NasPortType_IDSL = 14;
                        NasPortType_ETHERNET = 15;
                        NasPortType_XDSL = 16;
                        NasPortType_CABLE = 17;
                        NasPortType_WIRELESSX_OTHER = 18;
                        NasPortType_X_802X_11 = 19;
                     };
                     NasPortType nas_port_type = 4 [json_name = "nas-port-type"];
                  }
                  LeaselineBase leaseline_base = 4 [json_name = "leaseline-base"];
                  message NasPortType {
                     enum Type {
                        Type_ASYNC = 0;
                        Type_SYNC = 1;
                        Type_ISDNX_SYNC = 2;
                        Type_ISDNX_ASYNCX_V120 = 3;
                        Type_ISDNX_ASYNCX_V110 = 4;
                        Type_VIRTUAL = 5;
                        Type_PIAFS = 6;
                        Type_HDLC = 7;
                        Type_XX_25 = 8;
                        Type_XX_75 = 9;
                        Type_GX_3X_FAX = 10;
                        Type_SDSL = 11;
                        Type_ADSLX_CAP = 12;
                        Type_ADSLX_DMT = 13;
                        Type_IDSL = 14;
                        Type_ETHERNET = 15;
                        Type_XDSL = 16;
                        Type_CABLE = 17;
                        Type_WIRELESSX_OTHER = 18;
                        Type_X_802X_11 = 19;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  NasPortType nas_port_type = 5 [json_name = "nas-port-type"];
                  message TrustAccessLineIdInsert {
                     enum InsertType {
                        INVALID_ENUM_VALUE_InsertType = 0;
                        InsertType_OPTION82 = 1;
                        InsertType_ACCESSX_LINEX_ID = 2;
                     };
                     InsertType insert_type = 1 [json_name = "insert-type"];
                     enum InsertVersion {
                        INVALID_ENUM_VALUE_InsertVersion = 0;
                        InsertVersion_CNX_TELECOM = 1;
                        InsertVersion_CLIENTX_VERSION1 = 2;
                        InsertVersion_CLIENTX_VERSION3 = 3;
                        InsertVersion_CNX_TELECOMX_VERSION2 = 4;
                     };
                     InsertVersion insert_version = 2 [json_name = "insert-version"];
                  }
                  TrustAccessLineIdInsert trust_access_line_id_insert = 6 [json_name = "trust-access-line-id-insert"];
                  message AccessLimits {
                     message AccessLimit {
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                        };
                        UserType user_type = 1 [json_name = "user-type"];
                        uint32 user_number = 2 [json_name = "user-number"];
                     }
                     repeated AccessLimit access_limit = 1 [json_name = "access-limit"];
                  }
                  AccessLimits access_limits = 7 [json_name = "access-limits"];
                  message AccessLimitVlans {
                     message AccessLimitVlan {
                        uint32 start_vlan = 1 [json_name = "start-vlan"];
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                           UserType_IPV4 = 3;
                           UserType_IPV6 = 4;
                        };
                        UserType user_type = 2 [json_name = "user-type"];
                        uint32 end_vlan = 3 [json_name = "end-vlan"];
                        uint32 user_number = 4 [json_name = "user-number"];
                     }
                     repeated AccessLimitVlan access_limit_vlan = 1 [json_name = "access-limit-vlan"];
                  }
                  AccessLimitVlans access_limit_vlans = 8 [json_name = "access-limit-vlans"];
                  message AccessLimitQinqs {
                     message AccessLimitQinq {
                        uint32 start_vlan = 1 [json_name = "start-vlan"];
                        uint32 qinq_vlan = 2 [json_name = "qinq-vlan"];
                        enum UserType {
                           UserType_NONE = 0;
                           UserType_IPOE = 1;
                           UserType_PPPOE = 2;
                           UserType_IPV4 = 3;
                           UserType_IPV6 = 4;
                        };
                        UserType user_type = 3 [json_name = "user-type"];
                        uint32 end_vlan = 4 [json_name = "end-vlan"];
                        uint32 user_number = 5 [json_name = "user-number"];
                     }
                     repeated AccessLimitQinq access_limit_qinq = 1 [json_name = "access-limit-qinq"];
                  }
                  AccessLimitQinqs access_limit_qinqs = 9 [json_name = "access-limit-qinqs"];
                  message AccessLineIdIdentifyType {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum IdentifyType {
                        IdentifyType_AUTO = 0;
                        IdentifyType_CONFIG = 1;
                     };
                     IdentifyType identify_type = 2 [json_name = "identify-type"];
                  }
                  AccessLineIdIdentifyType access_line_id_identify_type = 10 [json_name = "access-line-id-identify-type"];
                  message AccessLineIdTransmitMode {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum AgentCircuitIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentCircuitIdTransmitMode = 0;
                        AgentCircuitIdTransmitMode_HEX = 1;
                        AgentCircuitIdTransmitMode_STRING = 2;
                     };
                     AgentCircuitIdTransmitMode agent_circuit_id_transmit_mode = 2 [json_name = "agent-circuit-id-transmit-mode"];
                     enum AgentRemoteIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentRemoteIdTransmitMode = 0;
                        AgentRemoteIdTransmitMode_HEX = 1;
                        AgentRemoteIdTransmitMode_STRING = 2;
                     };
                     AgentRemoteIdTransmitMode agent_remote_id_transmit_mode = 3 [json_name = "agent-remote-id-transmit-mode"];
                  }
                  AccessLineIdTransmitMode access_line_id_transmit_mode = 11 [json_name = "access-line-id-transmit-mode"];
                  message AccessLineIdParseValue {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     message ParseValue_All {
                        bool include_all_value = 1 [json_name = "include-all-value"];
                     }
                     message ParseValue_Spec {
                        bool agent_circuit_id = 1 [json_name = "agent-circuit-id"];
                        bool agent_remote_id = 2 [json_name = "agent-remote-id"];
                        string separator = 3 [json_name = "separator"];
                     }
                     oneof ParseValue {
                        ParseValue_All parse_value_all = 2 [json_name = "all"];
                        ParseValue_Spec parse_value_spec = 3 [json_name = "spec"];
                     }
                  }
                  AccessLineIdParseValue access_line_id_parse_value = 12 [json_name = "access-line-id-parse-value"];
                  message IgmpReportLooseCheck {
                     bool enable = 1 [json_name = "enable"];
                  }
                  IgmpReportLooseCheck igmp_report_loose_check = 13 [json_name = "igmp-report-loose-check"];
                  message ArpProxy {
                     bool enable = 1 [json_name = "enable"];
                  }
                  ArpProxy arp_proxy = 14 [json_name = "arp-proxy"];
                  message UserDetect {
                     bool no_data_check_enable = 1 [json_name = "no-data-check-enable"];
                     uint32 retransmit_time = 2 [json_name = "retransmit-time"];
                     uint32 interval = 3 [json_name = "interval"];
                  }
                  UserDetect user_detect = 15 [json_name = "user-detect"];
                  message DhcpProxy {
                     bool enable = 1 [json_name = "enable"];
                  }
                  DhcpProxy dhcp_proxy = 16 [json_name = "dhcp-proxy"];
                  message DhcpLeaseProxy {
                     message DhcpLeaseProxy8_Fixed {
                        uint32 value = 1 [json_name = "value"];
                     }
                     message DhcpLeaseProxy8_Step {
                        uint32 first_value = 1 [json_name = "first-value"];
                        uint32 second_value = 2 [json_name = "second-value"];
                     }
                     oneof DhcpLeaseProxy8 {
                        DhcpLeaseProxy8_Fixed dhcp_lease_proxy_fixed = 1 [json_name = "fixed"];
                        DhcpLeaseProxy8_Step dhcp_lease_proxy_step = 2 [json_name = "step"];
                     }
                     uint32 through_time = 3 [json_name = "through-time"];
                  }
                  DhcpLeaseProxy dhcp_lease_proxy = 17 [json_name = "dhcp-lease-proxy"];
                  message Trigger {
                     bool arp = 1 [json_name = "arp"];
                     bool ip = 2 [json_name = "ip"];
                  }
                  Trigger trigger = 18 [json_name = "trigger"];
                  message UserFlowVpnStatistics {
                     bool enable = 1 [json_name = "enable"];
                  }
                  UserFlowVpnStatistics user_flow_vpn_statistics = 19 [json_name = "user-flow-vpn-statistics"];
                  message DhcpAccess {
                     message TempleteMode_Broadcast {
                        message Broadcast9 {
                           bool enable = 1 [json_name = "enable"];
                        }
                        Broadcast9 broadcast9 = 1 [json_name = "broadcast"];
                     }
                     message TempleteMode_ReplyTrust {
                        message ReplyTrust9 {
                           bool enable = 1 [json_name = "enable"];
                        }
                        ReplyTrust9 reply_trust = 1 [json_name = "reply-trust"];
                     }
                     oneof TempleteMode {
                        TempleteMode_Broadcast templete_mode_broadcast = 1 [json_name = "broadcast"];
                        TempleteMode_ReplyTrust templete_mode_reply_trust = 2 [json_name = "reply-trust"];
                     }
                     message OptionUpdate {
                        bool enable = 1 [json_name = "enable"];
                     }
                     OptionUpdate option_update = 3 [json_name = "option-update"];
                     message ForceRenew {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 time = 2 [json_name = "time"];
                     }
                     ForceRenew force_renew = 4 [json_name = "force-renew"];
                     message IpTtl {
                        uint32 value = 1 [json_name = "value"];
                     }
                     IpTtl ip_ttl = 5 [json_name = "ip-ttl"];
                     message Option61 {
                        enum HardwareType {
                           HardwareType_STRING = 0;
                           HardwareType_HEX = 1;
                        };
                        HardwareType hardware_type = 1 [json_name = "hardware-type"];
                     }
                     Option61 option61 = 6 [json_name = "option61"];
                     message Rebuild {
                        message Type_SelfDefine {
                           string circuit_id = 1 [json_name = "circuit-id"];
                           string remote_id = 2 [json_name = "remote-id"];
                           uint32 inner_vlan = 3 [json_name = "inner-vlan"];
                           uint32 out_vlan = 4 [json_name = "out-vlan"];
                           bool add_domain_description = 5 [json_name = "add-domain-description"];
                        }
                        message Type_Version3 {
                           enum Version3Option37Type {
                              Version3Option37Type_VERSION3OPTION37NEBA = 0;
                              Version3Option37Type_VERSION3OPTION37VULA = 1;
                           };
                           Version3Option37Type version3_option37_type = 1 [json_name = "version3-option37-type"];
                        }
                        message Type_Version4 {
                           bool version410 = 1 [json_name = "version4"];
                        }
                        oneof Type {
                           Type_SelfDefine type_self_define = 1 [json_name = "self-define"];
                           Type_Version3 type_version3 = 2 [json_name = "version3"];
                           Type_Version4 type_version4 = 3 [json_name = "version4"];
                        }
                     }
                     Rebuild rebuild = 7 [json_name = "rebuild"];
                     message Option82Mismatch {
                        bool offline = 1 [json_name = "offline"];
                     }
                     Option82Mismatch option82_mismatch = 8 [json_name = "option82-mismatch"];
                  }
                  DhcpAccess dhcp_access = 20 [json_name = "dhcp-access"];
                  message Dhcpv6Access {
                     message Option18Interface {
                        string interface_id = 1 [json_name = "interface-id"];
                        bool add_domain_description = 2 [json_name = "add-domain-description"];
                     }
                     Option18Interface option18_interface = 1 [json_name = "option18-interface"];
                     message Option37RemoteId {
                        string remote_id = 1 [json_name = "remote-id"];
                     }
                     Option37RemoteId option37_remote_id = 2 [json_name = "option37-remote-id"];
                     message Option37RelayMode {
                        bool delete_enterprise_number_enable = 1 [json_name = "delete-enterprise-number-enable"];
                     }
                     Option37RelayMode option37_relay_mode = 3 [json_name = "option37-relay-mode"];
                  }
                  Dhcpv6Access dhcpv6_access = 21 [json_name = "dhcpv6-access"];
                  message Trust8021PProtocol {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Trust8021PProtocol trust_8021p_protocol = 22 [json_name = "trust-8021p-protocol"];
                  message UserBandwidthAutoAdapt {
                     bool enable = 1 [json_name = "enable"];
                     bool type1 = 2 [json_name = "type1"];
                  }
                  UserBandwidthAutoAdapt user_bandwidth_auto_adapt = 23 [json_name = "user-bandwidth-auto-adapt"];
                  message ServiceIdentifyPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  ServiceIdentifyPolicy service_identify_policy = 24 [json_name = "service-identify-policy"];
                  message DefaultUserNameTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultUserNameTemplate default_user_name_template = 25 [json_name = "default-user-name-template"];
                  message ClientFastAccess {
                     bool client_replace = 1 [json_name = "client-replace"];
                  }
                  ClientFastAccess client_fast_access = 26 [json_name = "client-fast-access"];
                  message DefaultPasswordTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultPasswordTemplate default_password_template = 27 [json_name = "default-password-template"];
                  message UserPolicyInterfaceDown {
                     enum Policy {
                        Policy_ONLINE = 0;
                        Policy_OFFLINE = 1;
                     };
                     Policy policy = 1 [json_name = "policy"];
                  }
                  UserPolicyInterfaceDown user_policy_interface_down = 28 [json_name = "user-policy-interface-down"];
                  message Option82Identify {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Option82Identify option82_identify = 29 [json_name = "option82-identify"];
                  message VasPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  VasPolicy vas_policy = 30 [json_name = "vas-policy"];
                  message AccessLineIdParseMode {
                     enum ParseType {
                        ParseType_OPTION82 = 0;
                        ParseType_ACCESSX_LINEX_ID = 1;
                     };
                     ParseType parse_type = 1 [json_name = "parse-type"];
                     enum ParseFormat {
                        INVALID_ENUM_VALUE_ParseFormat = 0;
                        ParseFormat_BINARY = 1;
                        ParseFormat_TRX_101 = 2;
                        ParseFormat_CN = 3;
                     };
                     ParseFormat parse_format = 2 [json_name = "parse-format"];
                  }
                  AccessLineIdParseMode access_line_id_parse_mode = 31 [json_name = "access-line-id-parse-mode"];
                  message AccessDelay {
                     message AccessDelay8_Global {
                        uint32 delay_time = 1 [json_name = "delay-time"];
                     }
                     message AccessDelay8_Mac {
                        uint32 odd_delay_time = 1 [json_name = "odd-delay-time"];
                        uint32 even_delay_time = 2 [json_name = "even-delay-time"];
                     }
                     message AccessDelay8_CircuitId {
                        uint32 circuit_id_delay_time = 1 [json_name = "circuit-id-delay-time"];
                        string circuit_id = 2 [json_name = "circuit-id"];
                     }
                     message AccessDelay8_LoadBalanceGroup {
                        uint32 load_balance_group_delay_time = 1 [json_name = "load-balance-group-delay-time"];
                        string load_balance_group = 2 [json_name = "load-balance-group"];
                     }
                     message AccessDelay8_Backup {
                        bool backup_enable = 1 [json_name = "backup-enable"];
                     }
                     oneof AccessDelay8 {
                        AccessDelay8_Global access_delay_global = 1 [json_name = "global"];
                        AccessDelay8_Mac access_delay_mac = 2 [json_name = "mac"];
                        AccessDelay8_CircuitId access_delay_circuit_id = 3 [json_name = "circuit-id"];
                        AccessDelay8_LoadBalanceGroup access_delay_load_balance_group = 4 [json_name = "load-balance-group"];
                        AccessDelay8_Backup access_delay_backup = 5 [json_name = "backup"];
                     }
                     uint32 delay_mac_offset = 6 [json_name = "delay-mac-offset"];
                  }
                  AccessDelay access_delay = 32 [json_name = "access-delay"];
                  message FilterPolicyAcl {
                     string dhcp_acl_number = 1 [json_name = "dhcp-acl-number"];
                     string ppp_acl_number = 2 [json_name = "ppp-acl-number"];
                  }
                  FilterPolicyAcl filter_policy_acl = 33 [json_name = "filter-policy-acl"];
                  message ReferenceTrafficPolicy {
                     string inbound = 1 [json_name = "inbound"];
                     string outbound = 2 [json_name = "outbound"];
                  }
                  ReferenceTrafficPolicy reference_traffic_policy = 34 [json_name = "reference-traffic-policy"];
               }
               Layer2Leaseline6 layer2_leaseline = 1 [json_name = "layer2-leaseline"];
            }
            message AccessType_Layer3Subscriber {
               message Layer3Subscriber6 {
                  message SubscriberBase {
                     enum DefaultDomainType {
                        INVALID_ENUM_VALUE_DefaultDomainType = 0;
                        DefaultDomainType_FORCE = 1;
                        DefaultDomainType_REPLACE = 2;
                     };
                     DefaultDomainType default_domain_type = 1 [json_name = "default-domain-type"];
                     string default_domain_name = 2 [json_name = "default-domain-name"];
                     string pre_domain_name = 3 [json_name = "pre-domain-name"];
                  }
                  SubscriberBase subscriber_base = 1 [json_name = "subscriber-base"];
                  message NasPortType {
                     enum Type {
                        Type_ASYNC = 0;
                        Type_SYNC = 1;
                        Type_ISDNX_SYNC = 2;
                        Type_ISDNX_ASYNCX_V120 = 3;
                        Type_ISDNX_ASYNCX_V110 = 4;
                        Type_VIRTUAL = 5;
                        Type_PIAFS = 6;
                        Type_HDLC = 7;
                        Type_XX_25 = 8;
                        Type_XX_75 = 9;
                        Type_GX_3X_FAX = 10;
                        Type_SDSL = 11;
                        Type_ADSLX_CAP = 12;
                        Type_ADSLX_DMT = 13;
                        Type_IDSL = 14;
                        Type_ETHERNET = 15;
                        Type_XDSL = 16;
                        Type_CABLE = 17;
                        Type_WIRELESSX_OTHER = 18;
                        Type_X_802X_11 = 19;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  NasPortType nas_port_type = 2 [json_name = "nas-port-type"];
                  message AccessLineIdInsert {
                     message AccessLineIdInsert8_Trust {
                        enum TrustInsertType {
                           INVALID_ENUM_VALUE_TrustInsertType = 0;
                           TrustInsertType_OPTION82 = 1;
                           TrustInsertType_ACCESSX_LINEX_ID = 2;
                        };
                        TrustInsertType trust_insert_type = 1 [json_name = "trust-insert-type"];
                        enum TrustInsertVersion {
                           INVALID_ENUM_VALUE_TrustInsertVersion = 0;
                           TrustInsertVersion_CNX_TELECOM = 1;
                           TrustInsertVersion_CLIENTX_VERSION1 = 2;
                           TrustInsertVersion_CLIENTX_VERSION3 = 3;
                           TrustInsertVersion_CNX_TELECOMX_VERSION2 = 4;
                        };
                        TrustInsertVersion trust_insert_version = 2 [json_name = "trust-insert-version"];
                     }
                     message AccessLineIdInsert8_Distrust {
                        enum DistrustInsertVersion {
                           INVALID_ENUM_VALUE_DistrustInsertVersion = 0;
                           DistrustInsertVersion_CNX_TELECOM = 1;
                           DistrustInsertVersion_CLIENTX_VERSION2 = 2;
                        };
                        DistrustInsertVersion distrust_insert_version = 1 [json_name = "distrust-insert-version"];
                     }
                     oneof AccessLineIdInsert8 {
                        AccessLineIdInsert8_Trust access_line_id_insert_trust = 1 [json_name = "trust"];
                        AccessLineIdInsert8_Distrust access_line_id_insert_distrust = 2 [json_name = "distrust"];
                     }
                  }
                  AccessLineIdInsert access_line_id_insert = 3 [json_name = "access-line-id-insert"];
                  message AccessLineIdIdentifyType {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum IdentifyType {
                        IdentifyType_AUTO = 0;
                        IdentifyType_CONFIG = 1;
                     };
                     IdentifyType identify_type = 2 [json_name = "identify-type"];
                  }
                  AccessLineIdIdentifyType access_line_id_identify_type = 4 [json_name = "access-line-id-identify-type"];
                  message AccessLineIdTransmitMode {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum AgentCircuitIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentCircuitIdTransmitMode = 0;
                        AgentCircuitIdTransmitMode_HEX = 1;
                        AgentCircuitIdTransmitMode_STRING = 2;
                     };
                     AgentCircuitIdTransmitMode agent_circuit_id_transmit_mode = 2 [json_name = "agent-circuit-id-transmit-mode"];
                     enum AgentRemoteIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentRemoteIdTransmitMode = 0;
                        AgentRemoteIdTransmitMode_HEX = 1;
                        AgentRemoteIdTransmitMode_STRING = 2;
                     };
                     AgentRemoteIdTransmitMode agent_remote_id_transmit_mode = 3 [json_name = "agent-remote-id-transmit-mode"];
                  }
                  AccessLineIdTransmitMode access_line_id_transmit_mode = 5 [json_name = "access-line-id-transmit-mode"];
                  message AccessLineIdParseValue {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     message ParseValue_All {
                        bool include_all_value = 1 [json_name = "include-all-value"];
                     }
                     message ParseValue_Spec {
                        bool agent_circuit_id = 1 [json_name = "agent-circuit-id"];
                        bool agent_remote_id = 2 [json_name = "agent-remote-id"];
                        string separator = 3 [json_name = "separator"];
                     }
                     oneof ParseValue {
                        ParseValue_All parse_value_all = 2 [json_name = "all"];
                        ParseValue_Spec parse_value_spec = 3 [json_name = "spec"];
                     }
                  }
                  AccessLineIdParseValue access_line_id_parse_value = 6 [json_name = "access-line-id-parse-value"];
                  message ServiceIdentifyPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  ServiceIdentifyPolicy service_identify_policy = 7 [json_name = "service-identify-policy"];
                  message UserGroupQueueApplys {
                     message UserGroupQueueApply {
                        enum Direction {
                           INVALID_ENUM_VALUE_Direction = 0;
                           Direction_OUTBOUND = 1;
                        };
                        Direction direction = 1 [json_name = "direction"];
                        string group_queue_name = 2 [json_name = "group-queue-name"];
                        string group_name = 3 [json_name = "group-name"];
                     }
                     repeated UserGroupQueueApply user_group_queue_apply = 1 [json_name = "user-group-queue-apply"];
                  }
                  UserGroupQueueApplys user_group_queue_applys = 8 [json_name = "user-group-queue-applys"];
                  message DhcpAccess {
                     message SessionMismatch {
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_OFFLINE = 1;
                           Action_ROAMX_IPV4 = 2;
                           Action_ROAMX_IPV6 = 3;
                           Action_ROAMX_IPV4X_IPV6 = 4;
                           Action_ROAMX_ND = 5;
                           Action_ROAMX_NDX_IPV4 = 6;
                           Action_ROAMX_NDX_IPV6 = 7;
                           Action_ROAMX_NDX_IPV4X_IPV6 = 8;
                        };
                        Action action = 1 [json_name = "action"];
                     }
                     SessionMismatch session_mismatch = 1 [json_name = "session-mismatch"];
                     message IpoeService {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4 = 1;
                           Type_IPV6 = 2;
                        };
                        Type type = 1 [json_name = "type"];
                     }
                     IpoeService ipoe_service = 2 [json_name = "ipoe-service"];
                  }
                  DhcpAccess dhcp_access = 9 [json_name = "dhcp-access"];
                  message UserBandwidthAutoAdapt {
                     bool enable = 1 [json_name = "enable"];
                     bool type1 = 2 [json_name = "type1"];
                  }
                  UserBandwidthAutoAdapt user_bandwidth_auto_adapt = 10 [json_name = "user-bandwidth-auto-adapt"];
                  message DefaultPasswordTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultPasswordTemplate default_password_template = 11 [json_name = "default-password-template"];
                  message UserPolicyInterfaceDown {
                     enum Policy {
                        Policy_ONLINE = 0;
                        Policy_OFFLINE = 1;
                     };
                     Policy policy = 1 [json_name = "policy"];
                  }
                  UserPolicyInterfaceDown user_policy_interface_down = 12 [json_name = "user-policy-interface-down"];
                  message ClientOption60 {
                     enum ClientVendorClass {
                        INVALID_ENUM_VALUE_ClientVendorClass = 0;
                        ClientVendorClass_OPTION60 = 1;
                        ClientVendorClass_VENDORX_CLASS = 2;
                     };
                     ClientVendorClass client_vendor_class = 1 [json_name = "client-vendor-class"];
                  }
                  ClientOption60 client_option60 = 13 [json_name = "client-option60"];
                  message ClientOption38 {
                     bool enable = 1 [json_name = "enable"];
                     bool basinfo_insert_mac = 2 [json_name = "basinfo-insert-mac"];
                  }
                  ClientOption38 client_option38 = 14 [json_name = "client-option38"];
                  message Option82Identify {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Option82Identify option82_identify = 15 [json_name = "option82-identify"];
                  message Ssid {
                     string name = 1 [json_name = "name"];
                  }
                  Ssid ssid = 16 [json_name = "ssid"];
                  message NasLogic {
                     string system_name = 1 [json_name = "system-name"];
                     string ip_address = 2 [json_name = "ip-address"];
                     string interface_name = 3 [json_name = "interface-name"];
                  }
                  NasLogic nas_logic = 17 [json_name = "nas-logic"];
                  message AccessLineIdParseMode {
                     enum ParseType {
                        ParseType_OPTION82 = 0;
                        ParseType_ACCESSX_LINEX_ID = 1;
                     };
                     ParseType parse_type = 1 [json_name = "parse-type"];
                     enum ParseFormat {
                        INVALID_ENUM_VALUE_ParseFormat = 0;
                        ParseFormat_BINARY = 1;
                        ParseFormat_TRX_101 = 2;
                        ParseFormat_CN = 3;
                     };
                     ParseFormat parse_format = 2 [json_name = "parse-format"];
                  }
                  AccessLineIdParseMode access_line_id_parse_mode = 18 [json_name = "access-line-id-parse-mode"];
                  message DefaultUserNameTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultUserNameTemplate default_user_name_template = 19 [json_name = "default-user-name-template"];
                  message Dhcpv6Access {
                     message Option37RelayMode {
                        bool delete_enterprise_number_enable = 1 [json_name = "delete-enterprise-number-enable"];
                     }
                     Option37RelayMode option37_relay_mode = 1 [json_name = "option37-relay-mode"];
                  }
                  Dhcpv6Access dhcpv6_access = 20 [json_name = "dhcpv6-access"];
                  message Ppp {
                     message RoamDomain {
                        string name = 1 [json_name = "name"];
                     }
                     RoamDomain roam_domain = 1 [json_name = "roam-domain"];
                  }
                  Ppp ppp = 21 [json_name = "ppp"];
                  message AccessDelay {
                     message AccessDelay8_Global {
                        uint32 delay_time = 1 [json_name = "delay-time"];
                     }
                     oneof AccessDelay8 {
                        AccessDelay8_Global access_delay_global = 1 [json_name = "global"];
                     }
                  }
                  AccessDelay access_delay = 22 [json_name = "access-delay"];
               }
               Layer3Subscriber6 layer3_subscriber = 1 [json_name = "layer3-subscriber"];
            }
            message AccessType_Layer3Leaseline {
               message Layer3Leaseline6 {
                  message UserName_ByName {
                     string name = 1 [json_name = "name"];
                  }
                  message UserName_ByTemplate {
                     bool template = 1 [json_name = "template"];
                  }
                  oneof UserName {
                     UserName_ByName user_name_by_name = 1 [json_name = "by-name"];
                     UserName_ByTemplate user_name_by_template = 2 [json_name = "by-template"];
                  }
                  string password = 3 [json_name = "password"];
                  enum PasswordType {
                     INVALID_ENUM_VALUE_PasswordType = 0;
                     PasswordType_SIMPLE = 4;
                     PasswordType_CIPHER = 5;
                  };
                  PasswordType password_type = 4 [json_name = "password-type"];
                  message LeaselineBase {
                     string default_domain_name = 1 [json_name = "default-domain-name"];
                     string bas_interface_name = 2 [json_name = "bas-interface-name"];
                     string radius_server_name = 3 [json_name = "radius-server-name"];
                     enum NasPortType {
                        NasPortType_ASYNC = 0;
                        NasPortType_SYNC = 1;
                        NasPortType_ISDNX_SYNC = 2;
                        NasPortType_ISDNX_ASYNCX_V120 = 3;
                        NasPortType_ISDNX_ASYNCX_V110 = 4;
                        NasPortType_VIRTUAL = 5;
                        NasPortType_PIAFS = 6;
                        NasPortType_HDLC = 7;
                        NasPortType_XX_25 = 8;
                        NasPortType_XX_75 = 9;
                        NasPortType_GX_3X_FAX = 10;
                        NasPortType_SDSL = 11;
                        NasPortType_ADSLX_CAP = 12;
                        NasPortType_ADSLX_DMT = 13;
                        NasPortType_IDSL = 14;
                        NasPortType_ETHERNET = 15;
                        NasPortType_XDSL = 16;
                        NasPortType_CABLE = 17;
                        NasPortType_WIRELESSX_OTHER = 18;
                        NasPortType_X_802X_11 = 19;
                     };
                     NasPortType nas_port_type = 4 [json_name = "nas-port-type"];
                     string mac_address = 5 [json_name = "mac-address"];
                     string client_id = 6 [json_name = "client-id"];
                  }
                  LeaselineBase leaseline_base = 5 [json_name = "leaseline-base"];
                  message TrustAccessLineIdInsert {
                     enum InsertType {
                        INVALID_ENUM_VALUE_InsertType = 0;
                        InsertType_OPTION82 = 1;
                        InsertType_ACCESSX_LINEX_ID = 2;
                     };
                     InsertType insert_type = 1 [json_name = "insert-type"];
                     enum InsertVersion {
                        INVALID_ENUM_VALUE_InsertVersion = 0;
                        InsertVersion_CNX_TELECOM = 1;
                        InsertVersion_CLIENTX_VERSION1 = 2;
                        InsertVersion_CLIENTX_VERSION3 = 3;
                        InsertVersion_CNX_TELECOMX_VERSION2 = 4;
                     };
                     InsertVersion insert_version = 2 [json_name = "insert-version"];
                  }
                  TrustAccessLineIdInsert trust_access_line_id_insert = 6 [json_name = "trust-access-line-id-insert"];
                  message QosProfileApplys {
                     message QosProfileApply {
                        enum Direction {
                           Direction_INBOUND = 0;
                           Direction_OUTBOUND = 1;
                           Direction_ALL = 2;
                        };
                        Direction direction = 1 [json_name = "direction"];
                        string profile_name = 2 [json_name = "profile-name"];
                     }
                     repeated QosProfileApply qos_profile_apply = 1 [json_name = "qos-profile-apply"];
                  }
                  QosProfileApplys qos_profile_applys = 7 [json_name = "qos-profile-applys"];
                  message UserBandwidthAutoAdapt {
                     bool enable = 1 [json_name = "enable"];
                     bool type1 = 2 [json_name = "type1"];
                  }
                  UserBandwidthAutoAdapt user_bandwidth_auto_adapt = 8 [json_name = "user-bandwidth-auto-adapt"];
                  message UserPolicyInterfaceDown {
                     enum Policy {
                        Policy_ONLINE = 0;
                        Policy_OFFLINE = 1;
                     };
                     Policy policy = 1 [json_name = "policy"];
                  }
                  UserPolicyInterfaceDown user_policy_interface_down = 9 [json_name = "user-policy-interface-down"];
                  message Option82Identify {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Option82Identify option82_identify = 10 [json_name = "option82-identify"];
                  message VasPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  VasPolicy vas_policy = 11 [json_name = "vas-policy"];
                  message LinkAccountResolve {
                     bool enable = 1 [json_name = "enable"];
                  }
                  LinkAccountResolve link_account_resolve = 12 [json_name = "link-account-resolve"];
                  message DefaultUserNameTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultUserNameTemplate default_user_name_template = 13 [json_name = "default-user-name-template"];
                  message ReferenceTrafficPolicy {
                     string inbound = 1 [json_name = "inbound"];
                     string outbound = 2 [json_name = "outbound"];
                  }
                  ReferenceTrafficPolicy reference_traffic_policy = 14 [json_name = "reference-traffic-policy"];
               }
               Layer3Leaseline6 layer3_leaseline = 1 [json_name = "layer3-leaseline"];
            }
            message AccessType_L2VpnLeaseline {
               message L2VpnLeaseline6 {
                  string user_name = 1 [json_name = "user-name"];
                  string password = 2 [json_name = "password"];
                  enum PasswordType {
                     INVALID_ENUM_VALUE_PasswordType = 0;
                     PasswordType_SIMPLE = 4;
                     PasswordType_CIPHER = 5;
                  };
                  PasswordType password_type = 3 [json_name = "password-type"];
                  message LeaselineBase {
                     string default_domain_name = 1 [json_name = "default-domain-name"];
                     string bas_interface_name = 2 [json_name = "bas-interface-name"];
                     string radius_server_name = 3 [json_name = "radius-server-name"];
                     enum NasPortType {
                        NasPortType_ASYNC = 0;
                        NasPortType_SYNC = 1;
                        NasPortType_ISDNX_SYNC = 2;
                        NasPortType_ISDNX_ASYNCX_V120 = 3;
                        NasPortType_ISDNX_ASYNCX_V110 = 4;
                        NasPortType_VIRTUAL = 5;
                        NasPortType_PIAFS = 6;
                        NasPortType_HDLC = 7;
                        NasPortType_XX_25 = 8;
                        NasPortType_XX_75 = 9;
                        NasPortType_GX_3X_FAX = 10;
                        NasPortType_SDSL = 11;
                        NasPortType_ADSLX_CAP = 12;
                        NasPortType_ADSLX_DMT = 13;
                        NasPortType_IDSL = 14;
                        NasPortType_ETHERNET = 15;
                        NasPortType_XDSL = 16;
                        NasPortType_CABLE = 17;
                        NasPortType_WIRELESSX_OTHER = 18;
                        NasPortType_X_802X_11 = 19;
                     };
                     NasPortType nas_port_type = 4 [json_name = "nas-port-type"];
                  }
                  LeaselineBase leaseline_base = 4 [json_name = "leaseline-base"];
                  message NasPortType {
                     enum Type {
                        Type_ASYNC = 0;
                        Type_SYNC = 1;
                        Type_ISDNX_SYNC = 2;
                        Type_ISDNX_ASYNCX_V120 = 3;
                        Type_ISDNX_ASYNCX_V110 = 4;
                        Type_VIRTUAL = 5;
                        Type_PIAFS = 6;
                        Type_HDLC = 7;
                        Type_XX_25 = 8;
                        Type_XX_75 = 9;
                        Type_GX_3X_FAX = 10;
                        Type_SDSL = 11;
                        Type_ADSLX_CAP = 12;
                        Type_ADSLX_DMT = 13;
                        Type_IDSL = 14;
                        Type_ETHERNET = 15;
                        Type_XDSL = 16;
                        Type_CABLE = 17;
                        Type_WIRELESSX_OTHER = 18;
                        Type_X_802X_11 = 19;
                     };
                     Type type = 1 [json_name = "type"];
                  }
                  NasPortType nas_port_type = 5 [json_name = "nas-port-type"];
                  message AccessLineIdIdentifyType {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum IdentifyType {
                        IdentifyType_AUTO = 0;
                        IdentifyType_CONFIG = 1;
                     };
                     IdentifyType identify_type = 2 [json_name = "identify-type"];
                  }
                  AccessLineIdIdentifyType access_line_id_identify_type = 6 [json_name = "access-line-id-identify-type"];
                  message AccessLineIdTransmitMode {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     enum AgentCircuitIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentCircuitIdTransmitMode = 0;
                        AgentCircuitIdTransmitMode_HEX = 1;
                        AgentCircuitIdTransmitMode_STRING = 2;
                     };
                     AgentCircuitIdTransmitMode agent_circuit_id_transmit_mode = 2 [json_name = "agent-circuit-id-transmit-mode"];
                     enum AgentRemoteIdTransmitMode {
                        INVALID_ENUM_VALUE_AgentRemoteIdTransmitMode = 0;
                        AgentRemoteIdTransmitMode_HEX = 1;
                        AgentRemoteIdTransmitMode_STRING = 2;
                     };
                     AgentRemoteIdTransmitMode agent_remote_id_transmit_mode = 3 [json_name = "agent-remote-id-transmit-mode"];
                  }
                  AccessLineIdTransmitMode access_line_id_transmit_mode = 7 [json_name = "access-line-id-transmit-mode"];
                  message AccessLineIdParseValue {
                     enum AccessLineIdType {
                        INVALID_ENUM_VALUE_AccessLineIdType = 0;
                        AccessLineIdType_OPTION82 = 1;
                        AccessLineIdType_ACCESSX_LINEX_ID = 2;
                     };
                     AccessLineIdType access_line_id_type = 1 [json_name = "access-line-id-type"];
                     message ParseValue_All {
                        bool include_all_value = 1 [json_name = "include-all-value"];
                     }
                     message ParseValue_Spec {
                        bool agent_circuit_id = 1 [json_name = "agent-circuit-id"];
                        bool agent_remote_id = 2 [json_name = "agent-remote-id"];
                        string separator = 3 [json_name = "separator"];
                     }
                     oneof ParseValue {
                        ParseValue_All parse_value_all = 2 [json_name = "all"];
                        ParseValue_Spec parse_value_spec = 3 [json_name = "spec"];
                     }
                  }
                  AccessLineIdParseValue access_line_id_parse_value = 8 [json_name = "access-line-id-parse-value"];
                  message ServiceIdentifyPolicy {
                     string name = 1 [json_name = "name"];
                  }
                  ServiceIdentifyPolicy service_identify_policy = 9 [json_name = "service-identify-policy"];
                  message UserBandwidthAutoAdapt {
                     bool enable = 1 [json_name = "enable"];
                     bool type1 = 2 [json_name = "type1"];
                  }
                  UserBandwidthAutoAdapt user_bandwidth_auto_adapt = 10 [json_name = "user-bandwidth-auto-adapt"];
                  message DefaultPasswordTemplate {
                     string name = 1 [json_name = "name"];
                  }
                  DefaultPasswordTemplate default_password_template = 11 [json_name = "default-password-template"];
                  message UserPolicyInterfaceDown {
                     enum Policy {
                        Policy_ONLINE = 0;
                        Policy_OFFLINE = 1;
                     };
                     Policy policy = 1 [json_name = "policy"];
                  }
                  UserPolicyInterfaceDown user_policy_interface_down = 12 [json_name = "user-policy-interface-down"];
                  message Option82Identify {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Option82Identify option82_identify = 13 [json_name = "option82-identify"];
                  message Dhcpv6Access {
                     message Option37RelayMode {
                        bool delete_enterprise_number_enable = 1 [json_name = "delete-enterprise-number-enable"];
                     }
                     Option37RelayMode option37_relay_mode = 1 [json_name = "option37-relay-mode"];
                  }
                  Dhcpv6Access dhcpv6_access = 14 [json_name = "dhcpv6-access"];
                  message FilterPolicyAcl {
                     string dhcp_acl_number = 1 [json_name = "dhcp-acl-number"];
                     string ppp_acl_number = 2 [json_name = "ppp-acl-number"];
                  }
                  FilterPolicyAcl filter_policy_acl = 15 [json_name = "filter-policy-acl"];
               }
               L2VpnLeaseline6 l2vpn_leaseline = 1 [json_name = "l2vpn-leaseline"];
            }
            oneof AccessType {
               AccessType_Layer2Subscriber access_type_layer2_subscriber = 5 [json_name = "layer2-subscriber"];
               AccessType_Layer2Leaseline access_type_layer2_leaseline = 6 [json_name = "layer2-leaseline"];
               AccessType_Layer3Subscriber access_type_layer3_subscriber = 7 [json_name = "layer3-subscriber"];
               AccessType_Layer3Leaseline access_type_layer3_leaseline = 8 [json_name = "layer3-leaseline"];
               AccessType_L2VpnLeaseline access_type_l2vpn_leaseline = 9 [json_name = "l2vpn-leaseline"];
            }
         }
         Bas bas = 47 [json_name = "bas"];
         message Bras {
            message LoadBalanceMode {
               enum Mode {
                  Mode_USERX_MODE = 0;
                  Mode_FLOWX_MODE = 1;
                  Mode_REALX_FLOWX_MODE = 2;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            LoadBalanceMode load_balance_mode = 1 [json_name = "load-balance-mode"];
            message Multicast {
               message BandwidthLimitPolicy {
                  string name = 1 [json_name = "name"];
                  uint32 total = 2 [json_name = "total"];
                  uint32 level1 = 3 [json_name = "level1"];
               }
               BandwidthLimitPolicy bandwidth_limit_policy = 1 [json_name = "bandwidth-limit-policy"];
            }
            Multicast multicast = 2 [json_name = "multicast"];
            message BrasUserManage {
               message PortAccessLimit {
                  uint32 number7 = 1 [json_name = "number"];
               }
               PortAccessLimit port_access_limit = 1 [json_name = "port-access-limit"];
               message VpnFlowStatistics {
                  message VpnFlowStatistic {
                     string vpn_name = 1 [json_name = "vpn-name"];
                     uint32 online_user_number = 2 [json_name = "online-user-number"];
                     uint64 input_packet = 3 [json_name = "input-packet"];
                     uint64 input_byte = 4 [json_name = "input-byte"];
                     uint64 output_packet = 5 [json_name = "output-packet"];
                     uint64 output_byte = 6 [json_name = "output-byte"];
                     uint64 ipv4_input_packet = 7 [json_name = "ipv4-input-packet"];
                     uint64 ipv4_input_byte = 8 [json_name = "ipv4-input-byte"];
                     uint64 ipv4_output_packet = 9 [json_name = "ipv4-output-packet"];
                     uint64 ipv4_output_byte = 10 [json_name = "ipv4-output-byte"];
                     uint64 ipv6_input_packet = 11 [json_name = "ipv6-input-packet"];
                     uint64 ipv6_input_byte = 12 [json_name = "ipv6-input-byte"];
                     uint64 ipv6_output_packet = 13 [json_name = "ipv6-output-packet"];
                     uint64 ipv6_output_byte = 14 [json_name = "ipv6-output-byte"];
                  }
                  repeated VpnFlowStatistic vpn_flow_statistic = 1 [json_name = "vpn-flow-statistic"];
               }
               VpnFlowStatistics vpn_flow_statistics = 2 [json_name = "vpn-flow-statistics"];
            }
            BrasUserManage bras_user_manage = 3 [json_name = "bras-user-manage"];
            message Dhcpv6Access {
               message Options {
                  message Option {
                     uint32 code = 1 [json_name = "code"];
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_CNX_TELECOM = 1;
                     };
                     Mode mode = 2 [json_name = "mode"];
                     enum Version {
                        INVALID_ENUM_VALUE_Version = 0;
                        Version_VERSION2 = 2;
                     };
                     Version version = 3 [json_name = "version"];
                  }
                  repeated Option option = 1 [json_name = "option"];
               }
               Options options = 1 [json_name = "options"];
               message RelayOption {
                  enum RemoteIdType {
                     INVALID_ENUM_VALUE_RemoteIdType = 0;
                     RemoteIdType_NEBA = 1;
                     RemoteIdType_VULA = 2;
                  };
                  RemoteIdType remote_id_type = 1 [json_name = "remote-id-type"];
               }
               RelayOption relay_option = 2 [json_name = "relay-option"];
            }
            Dhcpv6Access dhcpv6_access = 4 [json_name = "dhcpv6-access"];
            message Dot1X {
               message Dot1X6_Authenticator {
                  message Authenticator7 {
                     enum PortControl {
                        PortControl_AUTO = 0;
                        PortControl_AUTHORIZEDFORCE = 1;
                        PortControl_UNAUTHORIZEDFORCE = 2;
                     };
                     PortControl port_control = 1 [json_name = "port-control"];
                     enum PortMethod {
                        PortMethod_MAC = 0;
                        PortMethod_PORT = 1;
                     };
                     PortMethod port_method = 2 [json_name = "port-method"];
                     string force_domain_name = 3 [json_name = "force-domain-name"];
                     uint32 max_user_number = 4 [json_name = "max-user-number"];
                     message MacAuthBypass {
                        uint32 delay_time = 1 [json_name = "delay-time"];
                        bool untagged = 2 [json_name = "untagged"];
                        uint32 access_vlan_id = 3 [json_name = "access-vlan-id"];
                        uint32 guest_vlan_id = 4 [json_name = "guest-vlan-id"];
                     }
                     MacAuthBypass mac_auth_bypass = 5 [json_name = "mac-auth-bypass"];
                  }
                  Authenticator7 authenticator7 = 1 [json_name = "authenticator"];
               }
               message Dot1X6_Supplicant {
                  message Supplicant7 {
                     uint32 index = 1 [json_name = "index"];
                  }
                  Supplicant7 supplicant7 = 1 [json_name = "supplicant"];
               }
               oneof Dot1X6 {
                  Dot1X6_Authenticator dot1x_authenticator = 1 [json_name = "authenticator"];
                  Dot1X6_Supplicant dot1x_supplicant = 2 [json_name = "supplicant"];
               }
            }
            Dot1X dot1x = 5 [json_name = "dot1x"];
         }
         Bras bras = 48 [json_name = "bras"];
         message BdifAttribute {
            uint32 damping_time = 1 [json_name = "damping-time"];
            message BandWidthType_BandWidthMbps {
               uint32 band_width = 1 [json_name = "band-width"];
            }
            message BandWidthType_BandWidthKbps {
               uint32 band_width_kbps = 1 [json_name = "band-width-kbps"];
            }
            oneof BandWidthType {
               BandWidthType_BandWidthMbps band_width_type_band_width_mbps = 2 [json_name = "band-width-mbps"];
               BandWidthType_BandWidthKbps band_width_type_band_width_kbps = 3 [json_name = "band-width-kbps"];
            }
         }
         BdifAttribute bdif_attribute = 49 [json_name = "bdif-attribute"];
         message ArpEntry {
            uint32 expire_time = 1 [json_name = "expire-time"];
            uint32 probe_interval = 2 [json_name = "probe-interval"];
            uint32 probe_times = 3 [json_name = "probe-times"];
            bool arp_learn_disable = 4 [json_name = "arp-learn-disable"];
            enum ArpLearnStrict {
               INVALID_ENUM_VALUE_ArpLearnStrict = 0;
               ArpLearnStrict_FORCEX_DISABLE = 1;
               ArpLearnStrict_FORCEX_ENABLE = 2;
               ArpLearnStrict_TRUST = 3;
            };
            ArpLearnStrict arp_learn_strict = 5 [json_name = "arp-learn-strict"];
            bool route_proxy_enable = 6 [json_name = "route-proxy-enable"];
            bool inner_proxy_enable = 7 [json_name = "inner-proxy-enable"];
            bool inter_proxy_enable = 8 [json_name = "inter-proxy-enable"];
            bool local_proxy_enable = 9 [json_name = "local-proxy-enable"];
            uint32 fake_expire_time = 10 [json_name = "fake-expire-time"];
            bool probe_unicast = 11 [json_name = "probe-unicast"];
            bool dest_mac_check = 12 [json_name = "dest-mac-check"];
            bool src_mac_check = 13 [json_name = "src-mac-check"];
            bool distribute_enable = 14 [json_name = "distribute-enable"];
            enum GratuitousSend {
               INVALID_ENUM_VALUE_GratuitousSend = 0;
               GratuitousSend_ENABLE = 1;
               GratuitousSend_ACCORDX_GLOBAL = 2;
               GratuitousSend_DISABLE = 3;
            };
            GratuitousSend gratuitous_send = 15 [json_name = "gratuitous-send"];
            bool host_collect_enable = 16 [json_name = "host-collect-enable"];
            bool generate_rdtbl_enable = 17 [json_name = "generate-rdtbl-enable"];
            uint32 broadcast_detect_interval = 18 [json_name = "broadcast-detect-interval"];
            uint32 broadcast_detect_times = 19 [json_name = "broadcast-detect-times"];
            bool broadcast_detect_enable = 20 [json_name = "broadcast-detect-enable"];
            uint32 fake_penalty_time = 21 [json_name = "fake-penalty-time"];
            bool gratuitous_arp_drop = 22 [json_name = "gratuitous-arp-drop"];
            uint32 broadcast_max_num = 23 [json_name = "broadcast-max-num"];
            bool smart_discover_enable = 24 [json_name = "smart-discover-enable"];
            uint32 miss_anti_limit = 25 [json_name = "miss-anti-limit"];
            uint32 gratuitous_interval = 26 [json_name = "gratuitous-interval"];
            enum ImportPolicy {
               ImportPolicy_NONE = 0;
               ImportPolicy_UNTRUST = 1;
            };
            ImportPolicy import_policy = 27 [json_name = "import-policy"];
            bool fast_delete = 28 [json_name = "fast-delete"];
            enum CheckType {
               CheckType_NOX_FIX = 0;
               CheckType_FIXX_ALL = 1;
               CheckType_FIXX_MAC = 2;
               CheckType_SENDX_ACK = 3;
            };
            CheckType check_type = 29 [json_name = "check-type"];
            bool gratuitous_drop = 30 [json_name = "gratuitous-drop"];
            bool l2proxy_isolate_enable = 31 [json_name = "l2proxy-isolate-enable"];
            enum MffportType {
               MffportType_NOX_CONFIG = 0;
               MffportType_NETWORKX_PORT = 1;
               MffportType_ISOLATEX_PORT = 2;
            };
            MffportType mffport_type = 32 [json_name = "mffport-type"];
            uint32 real_expire_time = 33 [json_name = "real-expire-time"];
            bool anyway_proxy_enable = 34 [json_name = "anyway-proxy-enable"];
            bool multicast_learning_enable = 35 [json_name = "multicast-learning-enable"];
            bool snooping_enable = 36 [json_name = "snooping-enable"];
            bool arp_miss_disable = 37 [json_name = "arp-miss-disable"];
         }
         ArpEntry arp_entry = 50 [json_name = "arp-entry"];
         message ArpStatusDetect {
            string ip_addr = 1 [json_name = "ip-addr"];
            enum Mode {
               Mode_LOOSE = 0;
               Mode_STRICT = 1;
            };
            Mode mode = 2 [json_name = "mode"];
            uint32 times = 3 [json_name = "times"];
            uint32 interval = 4 [json_name = "interval"];
         }
         ArpStatusDetect arp_status_detect = 51 [json_name = "arp-status-detect"];
         message ArpPortSecurity {
            message L2SubInterface {
               bool l2proxy_dyn_learn = 1 [json_name = "l2proxy-dyn-learn"];
               uint32 l2proxy_max_num = 2 [json_name = "l2proxy-max-num"];
            }
            L2SubInterface l2_sub_interface = 1 [json_name = "l2-sub-interface"];
         }
         ArpPortSecurity arp_port_security = 52 [json_name = "arp-port-security"];
         message BfdExt {
            bool transparent_tx_flag = 1 [json_name = "transparent-tx-flag"];
         }
         BfdExt bfd_ext = 53 [json_name = "bfd-ext"];
         message ArpSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
               Type_SINGLEX_SEND = 2;
            };
            Type type = 1 [json_name = "type"];
            uint32 expire_time = 2 [json_name = "expire-time"];
         }
         ArpSending arp_sending = 54 [json_name = "arp-sending"];
         message NdSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
            };
            Type type = 1 [json_name = "type"];
            uint32 expire_time = 2 [json_name = "expire-time"];
         }
         NdSending nd_sending = 55 [json_name = "nd-sending"];
         message Nve {
            message Attribute {
               string source_vtep_ip = 1 [json_name = "source-vtep-ip"];
               string source_vtep_ipv6 = 2 [json_name = "source-vtep-ipv6"];
               string phys_address = 3 [json_name = "phys-address"];
               string bypass_vtep_ip = 4 [json_name = "bypass-vtep-ip"];
               string bypass_vtep_ipv6 = 5 [json_name = "bypass-vtep-ipv6"];
            }
            Attribute attribute = 1 [json_name = "attribute"];
            message Pip {
               string source_ip = 1 [json_name = "source-ip"];
               string peer_ip = 2 [json_name = "peer-ip"];
            }
            Pip pip = 2 [json_name = "pip"];
            message PipIpv6 {
               string source_ipv6 = 1 [json_name = "source-ipv6"];
               string peer_ipv6 = 2 [json_name = "peer-ipv6"];
            }
            PipIpv6 pip_ipv6 = 3 [json_name = "pip-ipv6"];
         }
         Nve nve = 56 [json_name = "nve"];
         message Nvo3Gateway {
            bool vxlan_anycast_gateway = 1 [json_name = "vxlan-anycast-gateway"];
            bool common_anycast_gateway = 2 [json_name = "common-anycast-gateway"];
         }
         Nvo3Gateway nvo3_gateway = 57 [json_name = "nvo3-gateway"];
         message TrackMonitorGroup {
            string name = 1 [json_name = "name"];
            uint32 down_weight = 2 [json_name = "down-weight"];
            enum TriggerStatus {
               TriggerStatus_DOWN = 0;
               TriggerStatus_UP = 1;
               TriggerStatus_NORMAL = 255;
            };
            TriggerStatus trigger_status = 3 [json_name = "trigger-status"];
            string last_trigger_uptime = 4 [json_name = "last-trigger-uptime"];
            string last_trigger_downtime = 5 [json_name = "last-trigger-downtime"];
            enum ValidFlag {
               ValidFlag_INVALID = 0;
               ValidFlag_VALID = 1;
            };
            ValidFlag valid_flag = 6 [json_name = "valid-flag"];
         }
         TrackMonitorGroup track_monitor_group = 58 [json_name = "track-monitor-group"];
         message CuAgent {
            message UpVeTrack {
               bool up_ve_track_tunnel_enable = 1 [json_name = "up-ve-track-tunnel-enable"];
            }
            UpVeTrack up_ve_track = 1 [json_name = "up-ve-track"];
            message CuMulticastRbp {
               string name = 1 [json_name = "name"];
            }
            CuMulticastRbp cu_multicast_rbp = 2 [json_name = "cu-multicast-rbp"];
            message CuModeInterface {
               enum CuModeEnable {
                  INVALID_ENUM_VALUE_CuModeEnable = 0;
                  CuModeEnable_TRUE = 1;
               };
               CuModeEnable cu_mode_enable = 1 [json_name = "cu-mode-enable"];
               enum UserAccessType {
                  INVALID_ENUM_VALUE_UserAccessType = 0;
                  UserAccessType_LAYER2 = 2;
                  UserAccessType_LAYER3 = 3;
                  UserAccessType_LAYER3X_LEASEDX_LINE = 4;
               };
               UserAccessType user_access_type = 2 [json_name = "user-access-type"];
            }
            CuModeInterface cu_mode_interface = 3 [json_name = "cu-mode-interface"];
         }
         CuAgent cu_agent = 59 [json_name = "cu-agent"];
         message L2TpInterface {
            message VtInterface {
               message LnsPppEchoSlow {
                  bool echo_slow_enable = 1 [json_name = "echo-slow-enable"];
               }
               LnsPppEchoSlow lns_ppp_echo_slow = 1 [json_name = "lns-ppp-echo-slow"];
            }
            VtInterface vt_interface = 1 [json_name = "vt-interface"];
         }
         L2TpInterface l2tp_interface = 60 [json_name = "l2tp-interface"];
         message PppoeBindVt {
            string name = 1 [json_name = "name"];
         }
         PppoeBindVt pppoe_bind_vt = 61 [json_name = "pppoe-bind-vt"];
         message PppoeVt {
            enum AuthenModePriority {
               INVALID_ENUM_VALUE_AuthenModePriority = 0;
               AuthenModePriority_PAP = 1;
               AuthenModePriority_CHAP = 2;
               AuthenModePriority_MSCHAPV1 = 3;
               AuthenModePriority_MSCHAPV2 = 4;
            };
            repeated AuthenModePriority authen_mode_priority = 1 [json_name = "authen-mode-priority"];
            uint32 keep_alive_interval = 2 [json_name = "keep-alive-interval"];
            uint32 keep_alive_times = 3 [json_name = "keep-alive-times"];
            uint32 keep_alive_response_interval = 4 [json_name = "keep-alive-response-interval"];
            bool keep_alive_data_check = 5 [json_name = "keep-alive-data-check"];
            string motm = 6 [json_name = "motm"];
            string motm_delimiter = 7 [json_name = "motm-delimiter"];
            uint32 negotiate_interval = 8 [json_name = "negotiate-interval"];
            uint32 negotiate_times = 9 [json_name = "negotiate-times"];
            string ac_name = 10 [json_name = "ac-name"];
            repeated string service_name = 11 [json_name = "service-name"];
            bool exact_match = 12 [json_name = "exact-match"];
            enum PadnSend {
               INVALID_ENUM_VALUE_PadnSend = 0;
               PadnSend_IPCP = 1;
               PadnSend_IPV6CP = 2;
               PadnSend_FIRSTNCP = 3;
               PadnSend_LASTNCP = 4;
               PadnSend_ALLNCP = 5;
            };
            PadnSend padn_send = 13 [json_name = "padn-send"];
            enum PadmSend {
               INVALID_ENUM_VALUE_PadmSend = 0;
               PadmSend_IPCP = 1;
               PadmSend_IPV6CP = 2;
               PadmSend_FIRSTNCP = 3;
               PadmSend_LASTNCP = 4;
               PadmSend_ALLNCP = 5;
            };
            PadmSend padm_send = 14 [json_name = "padm-send"];
            bool keep_alive_adjust_system = 15 [json_name = "keep-alive-adjust-system"];
            bool keep_alive_adjust_retransmit = 16 [json_name = "keep-alive-adjust-retransmit"];
            uint32 mru = 17 [json_name = "mru"];
            bool lcp_delay = 18 [json_name = "lcp-delay"];
            bool lcp_delay_force = 19 [json_name = "lcp-delay-force"];
            string chap_user_name = 20 [json_name = "chap-user-name"];
            bool auto_authen_enable = 21 [json_name = "auto-authen-enable"];
            bool ppp_mschap_strict = 22 [json_name = "ppp-mschap-strict"];
         }
         PppoeVt pppoe_vt = 62 [json_name = "pppoe-vt"];
         message TcpMssValue {
            uint32 mss_value = 1 [json_name = "mss-value"];
         }
         TcpMssValue tcp_mss_value = 63 [json_name = "tcp-mss-value"];
         message Ipv4Urpf {
            bool strict_check = 1 [json_name = "strict-check"];
            bool subnet_check = 2 [json_name = "subnet-check"];
         }
         Ipv4Urpf ipv4_urpf = 64 [json_name = "ipv4-urpf"];
         message Ipv6Urpf {
            bool strict_check = 1 [json_name = "strict-check"];
            bool subnet_check = 2 [json_name = "subnet-check"];
         }
         Ipv6Urpf ipv6_urpf = 65 [json_name = "ipv6-urpf"];
         message RoamDomain {
            string roam_domain_name = 1 [json_name = "roam-domain-name"];
         }
         RoamDomain roam_domain = 66 [json_name = "roam-domain"];
         message PwveAccess {
            message PwveInterface {
               message PushVlanTag {
                  uint32 pe_vid = 1 [json_name = "pe-vid"];
                  uint32 ce_vid = 2 [json_name = "ce-vid"];
               }
               PushVlanTag push_vlan_tag = 1 [json_name = "push-vlan-tag"];
               message BindLocationGroup {
                  string name = 1 [json_name = "name"];
               }
               BindLocationGroup bind_location_group = 2 [json_name = "bind-location-group"];
               message BindScaleGroup {
                  string name = 1 [json_name = "name"];
               }
               BindScaleGroup bind_scale_group = 3 [json_name = "bind-scale-group"];
               message Carrier {
                  uint32 up_hold_time = 1 [json_name = "up-hold-time"];
               }
               Carrier carrier = 4 [json_name = "carrier"];
            }
            PwveInterface pwve_interface = 1 [json_name = "pwve-interface"];
            message Carrier {
               uint32 up_hold_time = 1 [json_name = "up-hold-time"];
            }
            Carrier carrier = 2 [json_name = "carrier"];
         }
         PwveAccess pwve_access = 67 [json_name = "pwve-access"];
         message Rbs {
            message BindRbp {
               string name = 1 [json_name = "name"];
            }
            BindRbp bind_rbp = 1 [json_name = "bind-rbp"];
         }
         Rbs rbs = 68 [json_name = "rbs"];
         message PtpPortSrcs {
            bool port_enable = 1 [json_name = "port-enable"];
            int32 port_num = 2 [json_name = "port-num"];
            enum PortState {
               PortState_SLAVE = 0;
               PortState_UNCALIBRATED = 1;
               PortState_PASSIVE = 2;
               PortState_MASTER = 3;
               PortState_PREMASTER = 4;
               PortState_LISTENING = 5;
               PortState_FAULTY = 6;
               PortState_DISABLED = 7;
               PortState_INITIALIZING = 8;
            };
            PortState port_state = 3 [json_name = "port-state"];
            string permit_dmac = 4 [json_name = "permit-dmac"];
            message PtpPortAdvance {
               uint32 port_domain = 1 [json_name = "port-domain"];
               enum PortTypeSet {
                  PortTypeSet_NONE = 0;
                  PortTypeSet_OC = 1;
                  PortTypeSet_BC = 2;
                  PortTypeSet_TC = 3;
                  PortTypeSet_TCOC = 4;
                  PortTypeSet_TX_BC = 5;
                  PortTypeSet_TX_TC = 6;
               };
               PortTypeSet port_type_set = 2 [json_name = "port-type-set"];
               enum PortType {
                  PortType_NONE = 0;
                  PortType_OC = 1;
                  PortType_BC = 2;
                  PortType_TC = 3;
                  PortType_TCOC = 4;
                  PortType_TX_BC = 5;
                  PortType_TX_TC = 6;
               };
               PortType port_type = 3 [json_name = "port-type"];
               enum DelayMechanism {
                  DelayMechanism_DELAY = 0;
                  DelayMechanism_PDELAY = 1;
               };
               DelayMechanism delay_mechanism = 4 [json_name = "delay-mechanism"];
               enum PortCfgState {
                  PortCfgState_SLAVE = 0;
                  PortCfgState_UNCALIBRATED = 1;
                  PortCfgState_PASSIVE = 2;
                  PortCfgState_MASTER = 3;
                  PortCfgState_PREMASTER = 4;
                  PortCfgState_LISTENING = 5;
                  PortCfgState_FAULTY = 6;
                  PortCfgState_DISABLED = 7;
                  PortCfgState_INITIALIZING = 8;
               };
               PortCfgState port_cfg_state = 5 [json_name = "port-cfg-state"];
               enum ClkStep {
                  ClkStep_ONESTEP = 0;
                  ClkStep_TWOSTEP = 1;
               };
               ClkStep clk_step = 6 [json_name = "clk-step"];
               bool not_slave = 7 [json_name = "not-slave"];
               int32 port_local_priority = 8 [json_name = "port-local-priority"];
               enum PortPreState {
                  INVALID_ENUM_VALUE_PortPreState = 0;
                  PortPreState_MASTER = 1;
                  PortPreState_SLAVE = 2;
               };
               PortPreState port_pre_state = 9 [json_name = "port-pre-state"];
            }
            PtpPortAdvance ptp_port_advance = 5 [json_name = "ptp-port-advance"];
            message PtpPktPack {
               enum PktPackType {
                  PktPackType_MAC = 0;
                  PktPackType_UDP = 1;
                  PktPackType_NONE = 2;
               };
               PktPackType pkt_pack_type = 1 [json_name = "pkt-pack-type"];
               message PtpPktMacPack {
                  string mac_egress_dest_mac = 1 [json_name = "mac-egress-dest-mac"];
                  int32 mac_egress_vlan_id = 2 [json_name = "mac-egress-vlan-id"];
                  int32 mac_egress_pkt_priority = 3 [json_name = "mac-egress-pkt-priority"];
               }
               PtpPktMacPack ptp_pkt_mac_pack = 2 [json_name = "ptp-pkt-mac-pack"];
               message PtpPktUdpPack {
                  string udp_egress_src_ip = 1 [json_name = "udp-egress-src-ip"];
                  string udp_egress_dest_ip = 2 [json_name = "udp-egress-dest-ip"];
                  int32 udp_egress_dscp = 3 [json_name = "udp-egress-dscp"];
                  int32 udp_egress_vlan_id = 4 [json_name = "udp-egress-vlan-id"];
                  int32 udp_egress_pkt_priority = 5 [json_name = "udp-egress-pkt-priority"];
                  string udp_egress_dest_mac = 6 [json_name = "udp-egress-dest-mac"];
               }
               PtpPktUdpPack ptp_pkt_udp_pack = 3 [json_name = "ptp-pkt-udp-pack"];
            }
            PtpPktPack ptp_pkt_pack = 6 [json_name = "ptp-pkt-pack"];
            message PtpPeerClock {
               string peer_port_clk_id = 1 [json_name = "peer-port-clk-id"];
               int32 peer_port_num = 2 [json_name = "peer-port-num"];
               int32 peer_announce_send_interval = 3 [json_name = "peer-announce-send-interval"];
            }
            PtpPeerClock ptp_peer_clock = 7 [json_name = "ptp-peer-clock"];
            message PtpPktControl {
               bool announce_drop = 1 [json_name = "announce-drop"];
               bool delay_req_send_disable = 2 [json_name = "delay-req-send-disable"];
               int32 announce_interval = 3 [json_name = "announce-interval"];
               int32 announce_receipt_timeout = 4 [json_name = "announce-receipt-timeout"];
               int32 sync_interval = 5 [json_name = "sync-interval"];
               int32 min_delay_req_interval = 6 [json_name = "min-delay-req-interval"];
               int32 min_pdelay_req_interval = 7 [json_name = "min-pdelay-req-interval"];
            }
            PtpPktControl ptp_pkt_control = 8 [json_name = "ptp-pkt-control"];
            message PtpAsymmetryCorrection {
               enum CorrectionFlag {
                  CorrectionFlag_NEGATIVE = 0;
                  CorrectionFlag_POSITIVE = 1;
               };
               CorrectionFlag correction_flag = 1 [json_name = "correction-flag"];
               int32 correction_value = 2 [json_name = "correction-value"];
            }
            PtpAsymmetryCorrection ptp_asymmetry_correction = 9 [json_name = "ptp-asymmetry-correction"];
            message PtpTcocStaticClockSrc {
               string tcoc_static_clk_id = 1 [json_name = "tcoc-static-clk-id"];
               int32 tcoc_static_clk_port_num = 2 [json_name = "tcoc-static-clk-port-num"];
            }
            PtpTcocStaticClockSrc ptp_tcoc_static_clock_src = 10 [json_name = "ptp-tcoc-static-clock-src"];
            message PtpRingFiberLengthChange {
               enum ChangeValueFlag {
                  ChangeValueFlag_NEGATIVE = 0;
                  ChangeValueFlag_POSITIVE = 1;
               };
               ChangeValueFlag change_value_flag = 1 [json_name = "change-value-flag"];
               uint32 change_value = 2 [json_name = "change-value"];
            }
            PtpRingFiberLengthChange ptp_ring_fiber_length_change = 11 [json_name = "ptp-ring-fiber-length-change"];
         }
         PtpPortSrcs ptp_port_srcs = 69 [json_name = "ptp-port-srcs"];
         message ClockCesacr {
            message MasterDomains {
               message MasterDomain {
                  uint32 domain_value = 1 [json_name = "domain-value"];
                  uint32 e1_number = 2 [json_name = "e1-number"];
               }
               repeated MasterDomain master_domain = 1 [json_name = "master-domain"];
            }
            MasterDomains master_domains = 1 [json_name = "master-domains"];
            message RecoveryDomains {
               message RecoveryDomain {
                  uint32 domain_value = 1 [json_name = "domain-value"];
                  uint32 e1_number = 2 [json_name = "e1-number"];
               }
               repeated RecoveryDomain recovery_domain = 1 [json_name = "recovery-domain"];
            }
            RecoveryDomains recovery_domains = 2 [json_name = "recovery-domains"];
            message RecoveryModes {
               enum ServiceMode {
                  INVALID_ENUM_VALUE_ServiceMode = 0;
                  ServiceMode_CESX_ACR = 1;
                  ServiceMode_CESX_DCR = 2;
               };
               ServiceMode service_mode = 1 [json_name = "service-mode"];
            }
            RecoveryModes recovery_modes = 3 [json_name = "recovery-modes"];
         }
         ClockCesacr clock_cesacr = 70 [json_name = "clock-cesacr"];
         message VinterLinks {
            string src_name = 1 [json_name = "src-name"];
         }
         VinterLinks vinter_links = 71 [json_name = "vinter-links"];
         message ClocksyncFlexe {
            message PhyPorts {
               message PhyPort {
                  string lgc_port_name = 1 [json_name = "lgc-port-name"];
               }
               PhyPort phy_port = 1 [json_name = "phy-port"];
            }
            PhyPorts phy_ports = 1 [json_name = "phy-ports"];
         }
         ClocksyncFlexe clocksync_flexe = 72 [json_name = "clocksync-flexe"];
         message GpsPortSrcs {
            message GpsPortSrc {
               int32 gps_sfp_ptp_priority1 = 1 [json_name = "gps-sfp-ptp-priority1"];
               int32 gps_sfp_ptp_priority2 = 2 [json_name = "gps-sfp-ptp-priority2"];
               int32 gps_sfp_ptp_domain = 3 [json_name = "gps-sfp-ptp-domain"];
               bool gps_sfp_recovery_enable = 4 [json_name = "gps-sfp-recovery-enable"];
               enum GnssModelPri1 {
                  INVALID_ENUM_VALUE_GnssModelPri1 = 0;
                  GnssModelPri1_GPS = 1;
                  GnssModelPri1_GLONASS = 2;
                  GnssModelPri1_BEIDOU = 3;
                  GnssModelPri1_GPSX_GLONASS = 4;
                  GnssModelPri1_GPSX_BEIDOU = 5;
               };
               GnssModelPri1 gnss_model_pri1 = 5 [json_name = "gnss-model-pri1"];
               enum GnssModelPri2 {
                  INVALID_ENUM_VALUE_GnssModelPri2 = 0;
                  GnssModelPri2_GPS = 1;
                  GnssModelPri2_GLONASS = 2;
                  GnssModelPri2_BEIDOU = 3;
                  GnssModelPri2_GPSX_GLONASS = 4;
                  GnssModelPri2_GPSX_BEIDOU = 5;
               };
               GnssModelPri2 gnss_model_pri2 = 6 [json_name = "gnss-model-pri2"];
               enum GnssModelPri3 {
                  INVALID_ENUM_VALUE_GnssModelPri3 = 0;
                  GnssModelPri3_GPS = 1;
                  GnssModelPri3_GLONASS = 2;
                  GnssModelPri3_BEIDOU = 3;
                  GnssModelPri3_GPSX_GLONASS = 4;
                  GnssModelPri3_GPSX_BEIDOU = 5;
               };
               GnssModelPri3 gnss_model_pri3 = 7 [json_name = "gnss-model-pri3"];
               enum GnssModelPri4 {
                  INVALID_ENUM_VALUE_GnssModelPri4 = 0;
                  GnssModelPri4_GPS = 1;
                  GnssModelPri4_GLONASS = 2;
                  GnssModelPri4_BEIDOU = 3;
                  GnssModelPri4_GPSX_GLONASS = 4;
                  GnssModelPri4_GPSX_BEIDOU = 5;
               };
               GnssModelPri4 gnss_model_pri4 = 8 [json_name = "gnss-model-pri4"];
               enum GnssModelPri5 {
                  INVALID_ENUM_VALUE_GnssModelPri5 = 0;
                  GnssModelPri5_GPS = 1;
                  GnssModelPri5_GLONASS = 2;
                  GnssModelPri5_BEIDOU = 3;
                  GnssModelPri5_GPSX_GLONASS = 4;
                  GnssModelPri5_GPSX_BEIDOU = 5;
               };
               GnssModelPri5 gnss_model_pri5 = 9 [json_name = "gnss-model-pri5"];
               int32 leap_manualmode_enable = 10 [json_name = "leap-manualmode-enable"];
               int32 cable_delay = 11 [json_name = "cable-delay"];
               bool gps_sfp_online = 12 [json_name = "gps-sfp-online"];
               message GpsSfpWorkStates {
                  bool gps_sfp_is_timelock = 1 [json_name = "gps-sfp-is-timelock"];
                  bool gps_sfp_is_freqlock = 2 [json_name = "gps-sfp-is-freqlock"];
                  bool gps_sfp_self_recoveryen = 3 [json_name = "gps-sfp-self-recoveryen"];
                  bool gps_sfp_is_self_recovering = 4 [json_name = "gps-sfp-is-self-recovering"];
               }
               GpsSfpWorkStates gps_sfp_work_states = 13 [json_name = "gps-sfp-work-states"];
               message GnssModule {
                  string gps_latitude = 1 [json_name = "gps-latitude"];
                  string gps_longitude = 2 [json_name = "gps-longitude"];
                  string gps_altitude = 3 [json_name = "gps-altitude"];
                  enum GpsWorkMode {
                     GpsWorkMode_POSITION = 0;
                     GpsWorkMode_HOLD = 1;
                     GpsWorkMode_AUTO = 2;
                  };
                  GpsWorkMode gps_work_mode = 4 [json_name = "gps-work-mode"];
                  int32 gps_satellite_number = 5 [json_name = "gps-satellite-number"];
                  int32 gps_leap_second = 6 [json_name = "gps-leap-second"];
                  string gps_satellite_cno = 7 [json_name = "gps-satellite-cno"];
                  int32 glonass_satellite_number = 8 [json_name = "glonass-satellite-number"];
                  string glonass_satellite_cno = 9 [json_name = "glonass-satellite-cno"];
                  int32 beidou_satellite_number = 10 [json_name = "beidou-satellite-number"];
                  string beidou_satellite_cno = 11 [json_name = "beidou-satellite-cno"];
                  string gps_time = 12 [json_name = "gps-time"];
                  enum GpsFixStatus {
                     GpsFixStatus_NOFIXSTATUS = 0;
                     GpsFixStatus_FIXSTATUS = 1;
                     GpsFixStatus_HOLDSTATUS = 2;
                     GpsFixStatus_WTRSTATUS = 3;
                     GpsFixStatus_HOLDOFFSTATUS = 4;
                  };
                  GpsFixStatus gps_fix_status = 13 [json_name = "gps-fix-status"];
                  enum GnssModel {
                     INVALID_ENUM_VALUE_GnssModel = 0;
                     GnssModel_GPS = 1;
                     GnssModel_GLONASS = 2;
                     GnssModel_BEIDOU = 3;
                     GnssModel_GPSX_GLONASS = 4;
                     GnssModel_GPSX_BEIDOU = 5;
                  };
                  GnssModel gnss_model = 14 [json_name = "gnss-model"];
                  string gnss_model_priority = 15 [json_name = "gnss-model-priority"];
                  enum LeapManualmodeEnStat {
                     LeapManualmodeEnStat_DISABLE = 0;
                     LeapManualmodeEnStat_ENABLE = 1;
                  };
                  LeapManualmodeEnStat leap_manualmode_en_stat = 16 [json_name = "leap-manualmode-en-stat"];
                  enum LeapAdjustdirStat {
                     INVALID_ENUM_VALUE_LeapAdjustdirStat = 0;
                     LeapAdjustdirStat_LEAP59 = 59;
                     LeapAdjustdirStat_LEAP61 = 61;
                  };
                  LeapAdjustdirStat leap_adjustdir_stat = 17 [json_name = "leap-adjustdir-stat"];
                  string leap_adjustdate_stat = 18 [json_name = "leap-adjustdate-stat"];
                  int32 cable_delay_stat = 19 [json_name = "cable-delay-stat"];
               }
               GnssModule gnss_module = 14 [json_name = "gnss-module"];
               message GpsSyncParameters {
                  int32 gps_sync_domain = 1 [json_name = "gps-sync-domain"];
                  int32 gps_sync_priority1 = 2 [json_name = "gps-sync-priority1"];
                  int32 gps_sync_priority2 = 3 [json_name = "gps-sync-priority2"];
                  enum GpsPtpDelayMechanism {
                     GpsPtpDelayMechanism_DELAY = 0;
                     GpsPtpDelayMechanism_PDELAY = 1;
                  };
                  GpsPtpDelayMechanism gps_ptp_delay_mechanism = 4 [json_name = "gps-ptp-delay-mechanism"];
                  uint32 gps_ptp_clk_class = 5 [json_name = "gps-ptp-clk-class"];
                  enum GpsPtpClkStep {
                     GpsPtpClkStep_ONESTEP = 0;
                     GpsPtpClkStep_TWOSTEP = 1;
                  };
                  GpsPtpClkStep gps_ptp_clk_step = 6 [json_name = "gps-ptp-clk-step"];
                  int32 gps_ptp_announce_interval = 7 [json_name = "gps-ptp-announce-interval"];
                  int32 gps_ptp_sync_interval = 8 [json_name = "gps-ptp-sync-interval"];
                  int32 gps_ptp_delayreq_interval = 9 [json_name = "gps-ptp-delayreq-interval"];
                  string gps_ptp_clkid = 10 [json_name = "gps-ptp-clkid"];
                  enum GpsClockSsm {
                     GpsClockSsm_UNK = 0;
                     GpsClockSsm_PRC = 2;
                     GpsClockSsm_SSUA = 4;
                     GpsClockSsm_SSUB = 8;
                     GpsClockSsm_SEC = 11;
                     GpsClockSsm_DNU = 15;
                     GpsClockSsm_NONE = 16;
                     GpsClockSsm_PRTC = 8194;
                  };
                  GpsClockSsm gps_clock_ssm = 11 [json_name = "gps-clock-ssm"];
               }
               GpsSyncParameters gps_sync_parameters = 15 [json_name = "gps-sync-parameters"];
               message GpsBoard {
                  string gps_board_version = 1 [json_name = "gps-board-version"];
                  string gps_mac_address = 2 [json_name = "gps-mac-address"];
               }
               GpsBoard gps_board = 16 [json_name = "gps-board"];
               message LeapSecType_LeapSecAdjust {
                  string leap_adjust_date = 1 [json_name = "leap-adjust-date"];
                  enum LeapAdjustDir {
                     INVALID_ENUM_VALUE_LeapAdjustDir = 0;
                     LeapAdjustDir_LEAP59 = 59;
                     LeapAdjustDir_LEAP61 = 61;
                  };
                  LeapAdjustDir leap_adjust_dir = 2 [json_name = "leap-adjust-dir"];
                  int32 current_leap_sec = 3 [json_name = "current-leap-sec"];
               }
               message LeapSecType_LeapSec {
                  int32 current_leap_sec_set = 1 [json_name = "current-leap-sec-set"];
               }
               oneof LeapSecType {
                  LeapSecType_LeapSecAdjust leap_sec_type_leap_sec_adjust = 17 [json_name = "leap-sec-adjust"];
                  LeapSecType_LeapSec leap_sec_type_leap_sec = 18 [json_name = "leap-sec"];
               }
               uint32 wtr_time = 19 [json_name = "wtr-time"];
               uint32 holdoff_time = 20 [json_name = "holdoff-time"];
            }
            GpsPortSrc gps_port_src = 1 [json_name = "gps-port-src"];
         }
         GpsPortSrcs gps_port_srcs = 73 [json_name = "gps-port-srcs"];
         message ClockPortSources {
            message Source {
               enum State {
                  State_INITIAL = 0;
                  State_NORMAL = 1;
                  State_ABNORMAL = 2;
                  State_WAITWTR = 3;
                  State_HOLDOFF = 4;
               };
               State state = 1 [json_name = "state"];
               bool sync_enable = 2 [json_name = "sync-enable"];
               bool esmc_send_disable = 3 [json_name = "esmc-send-disable"];
               bool reference_enable = 4 [json_name = "reference-enable"];
               bool slave_nego_enable = 5 [json_name = "slave-nego-enable"];
               enum PhyState {
                  PhyState_DOWN = 0;
                  PhyState_UP = 1;
                  PhyState_NA = 2;
               };
               PhyState phy_state = 6 [json_name = "phy-state"];
               enum E1Sabit {
                  INVALID_ENUM_VALUE_E1Sabit = 0;
                  E1Sabit_SA4 = 4;
                  E1Sabit_SA5 = 5;
                  E1Sabit_SA6 = 6;
                  E1Sabit_SA7 = 7;
                  E1Sabit_SA8 = 8;
               };
               E1Sabit e1_sabit = 7 [json_name = "e1-sabit"];
               bool e1_ais_enable = 8 [json_name = "e1-ais-enable"];
               bool cpos_ais_enable = 9 [json_name = "cpos-ais-enable"];
               bool cpos_exc_enable = 10 [json_name = "cpos-exc-enable"];
               message Priority {
                  int32 system = 1 [json_name = "system"];
                  int32 sync2m1 = 2 [json_name = "sync2m1"];
                  int32 sync2m2 = 3 [json_name = "sync2m2"];
               }
               Priority priority = 11 [json_name = "priority"];
               message SsmClass {
                  enum SsmConfigured {
                     SsmConfigured_UNK = 0;
                     SsmConfigured_PRC = 2;
                     SsmConfigured_SSUA = 4;
                     SsmConfigured_SSUB = 8;
                     SsmConfigured_SEC = 11;
                     SsmConfigured_DNU = 15;
                     SsmConfigured_NONE = 16;
                     SsmConfigured_PRTC = 8194;
                     SsmConfigured_EPRTC = 8450;
                     SsmConfigured_ESEC = 8715;
                     SsmConfigured_EPRC = 8962;
                  };
                  SsmConfigured ssm_configured = 1 [json_name = "ssm-configured"];
                  enum SsmLearn {
                     SsmLearn_UNK = 0;
                     SsmLearn_PRC = 2;
                     SsmLearn_SSUA = 4;
                     SsmLearn_SSUB = 8;
                     SsmLearn_SEC = 11;
                     SsmLearn_DNU = 15;
                     SsmLearn_NONE = 16;
                     SsmLearn_PRTC = 8194;
                     SsmLearn_EPRTC = 8450;
                     SsmLearn_ESEC = 8715;
                     SsmLearn_EPRC = 8962;
                  };
                  SsmLearn ssm_learn = 2 [json_name = "ssm-learn"];
                  enum SsmOutput {
                     SsmOutput_UNK = 0;
                     SsmOutput_PRC = 2;
                     SsmOutput_SSUA = 4;
                     SsmOutput_SSUB = 8;
                     SsmOutput_SEC = 11;
                     SsmOutput_DNU = 15;
                     SsmOutput_NONE = 16;
                     SsmOutput_PRTC = 8194;
                     SsmOutput_EPRTC = 8450;
                     SsmOutput_ESEC = 8715;
                     SsmOutput_EPRC = 8962;
                  };
                  SsmOutput ssm_output = 3 [json_name = "ssm-output"];
                  enum EnhSsmLearn {
                     EnhSsmLearn_UNK = 0;
                     EnhSsmLearn_PRC = 2;
                     EnhSsmLearn_SSUA = 4;
                     EnhSsmLearn_SSUB = 8;
                     EnhSsmLearn_SEC = 11;
                     EnhSsmLearn_DNU = 15;
                     EnhSsmLearn_NONE = 16;
                     EnhSsmLearn_PRTC = 8194;
                     EnhSsmLearn_EPRTC = 8450;
                     EnhSsmLearn_ESEC = 8715;
                     EnhSsmLearn_EPRC = 8962;
                  };
                  EnhSsmLearn enh_ssm_learn = 4 [json_name = "enh-ssm-learn"];
               }
               SsmClass ssm_class = 12 [json_name = "ssm-class"];
               message ClockId {
                  uint32 clock_id_configured = 1 [json_name = "clock-id-configured"];
                  uint32 clock_id_learn = 2 [json_name = "clock-id-learn"];
                  uint32 clock_id_out = 3 [json_name = "clock-id-out"];
                  string enh_clock_id_learn = 4 [json_name = "enh-clock-id-learn"];
               }
               ClockId clock_id = 13 [json_name = "clock-id"];
               int32 bundle_group = 14 [json_name = "bundle-group"];
               message EnhancedQltlv {
                  uint32 flag = 1 [json_name = "flag"];
                  uint32 cascade_esecs = 2 [json_name = "cascade-esecs"];
                  uint32 cascade_secs = 3 [json_name = "cascade-secs"];
               }
               EnhancedQltlv enhanced_qltlv = 15 [json_name = "enhanced-qltlv"];
            }
            Source source = 1 [json_name = "source"];
         }
         ClockPortSources clock_port_sources = 74 [json_name = "clock-port-sources"];
         message PtpaPorts {
            message PtpaPort {
               bool ptp_atr_en = 1 [json_name = "ptp-atr-en"];
            }
            PtpaPort ptpa_port = 1 [json_name = "ptpa-port"];
         }
         PtpaPorts ptpa_ports = 75 [json_name = "ptpa-ports"];
         message Cpudefend {
            message ArpSafeguards {
               bool arp_safeguard = 1 [json_name = "arp-safeguard"];
            }
            ArpSafeguards arp_safeguards = 1 [json_name = "arp-safeguards"];
            message HostCarQinqHashs {
               bool host_car_qinq_hash = 1 [json_name = "host-car-qinq-hash"];
            }
            HostCarQinqHashs host_car_qinq_hashs = 2 [json_name = "host-car-qinq-hashs"];
            message Ipv4Urpf {
               bool statistics_enable = 1 [json_name = "statistics-enable"];
               message Method_General {
                  enum Mode {
                     Mode_STRICT = 0;
                     Mode_LOOSE = 1;
                  };
                  Mode mode = 1 [json_name = "mode"];
                  bool default_route = 2 [json_name = "default-route"];
               }
               message Method_PeerBased {
                  uint32 peer_id = 1 [json_name = "peer-id"];
               }
               oneof Method {
                  Method_General method_general = 2 [json_name = "general"];
                  Method_PeerBased method_peer_based = 3 [json_name = "peer-based"];
               }
            }
            Ipv4Urpf ipv4_urpf = 3 [json_name = "ipv4-urpf"];
            message Ipv6Urpf {
               bool statistics_enable = 1 [json_name = "statistics-enable"];
               message Method_General {
                  enum Mode {
                     Mode_STRICT = 0;
                     Mode_LOOSE = 1;
                  };
                  Mode mode = 1 [json_name = "mode"];
                  bool default_route = 2 [json_name = "default-route"];
               }
               message Method_PeerBased {
                  uint32 peer_id = 1 [json_name = "peer-id"];
               }
               oneof Method {
                  Method_General method_general = 2 [json_name = "general"];
                  Method_PeerBased method_peer_based = 3 [json_name = "peer-based"];
               }
            }
            Ipv6Urpf ipv6_urpf = 4 [json_name = "ipv6-urpf"];
            message ArpVlanCar {
               uint32 rate_limit = 1 [json_name = "rate-limit"];
            }
            ArpVlanCar arp_vlan_car = 5 [json_name = "arp-vlan-car"];
            message NdVlanCars {
               message NdVlanCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_NA = 1;
                     Type_NSX_UNICAST = 2;
                     Type_NSX_MULTICAST = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  uint32 rate_limit = 2 [json_name = "rate-limit"];
               }
               repeated NdVlanCar nd_vlan_car = 1 [json_name = "nd-vlan-car"];
            }
            NdVlanCars nd_vlan_cars = 6 [json_name = "nd-vlan-cars"];
            message ProtocolPortCar {
               message RateLimits {
                  message RateLimit {
                     enum Protocol {
                        INVALID_ENUM_VALUE_Protocol = 0;
                        Protocol_ARP = 1;
                        Protocol_DHCP = 2;
                        Protocol_SNMP = 3;
                        Protocol_TELNET = 4;
                        Protocol_ICMP = 5;
                        Protocol_SSH = 6;
                        Protocol_ICMPX_ND = 7;
                        Protocol_ICMPV6 = 8;
                        Protocol_PORT = 9;
                     };
                     Protocol protocol = 1 [json_name = "protocol"];
                     uint32 cp_rate_limit = 2 [json_name = "cp-rate-limit"];
                  }
                  repeated RateLimit rate_limit = 1 [json_name = "rate-limit"];
               }
               RateLimits rate_limits = 1 [json_name = "rate-limits"];
               message Alarm {
                  bool enable = 1 [json_name = "enable"];
                  uint32 threshold = 2 [json_name = "threshold"];
                  uint32 interval = 3 [json_name = "interval"];
               }
               Alarm alarm = 2 [json_name = "alarm"];
            }
            ProtocolPortCar protocol_port_car = 7 [json_name = "protocol-port-car"];
            message ArpCheck {
               bool check_destination_ip = 1 [json_name = "check-destination-ip"];
            }
            ArpCheck arp_check = 8 [json_name = "arp-check"];
            message ArpFilter {
               bool filter_gratuitous = 1 [json_name = "filter-gratuitous"];
               bool filter_mac_illegal = 2 [json_name = "filter-mac-illegal"];
               bool filter_tha_filled_request = 3 [json_name = "filter-tha-filled-request"];
            }
            ArpFilter arp_filter = 9 [json_name = "arp-filter"];
            message CpRateLimit {
               message Igmp {
                  message General {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                     bool prior = 3 [json_name = "prior"];
                  }
                  General general = 1 [json_name = "general"];
                  message Dot1QTerminations {
                     message Dot1QTermination {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                        uint32 cir = 3 [json_name = "cir"];
                        uint32 cbs = 4 [json_name = "cbs"];
                        bool prior = 5 [json_name = "prior"];
                     }
                     repeated Dot1QTermination dot1q_termination = 1 [json_name = "dot1q-termination"];
                  }
                  Dot1QTerminations dot1q_terminations = 2 [json_name = "dot1q-terminations"];
                  message QinqTerminations {
                     message QinqTermination {
                        uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                        uint32 ce_vlan_begin = 2 [json_name = "ce-vlan-begin"];
                        uint32 ce_vlan_end = 3 [json_name = "ce-vlan-end"];
                        uint32 cir = 4 [json_name = "cir"];
                        uint32 cbs = 5 [json_name = "cbs"];
                        bool prior = 6 [json_name = "prior"];
                     }
                     repeated QinqTermination qinq_termination = 1 [json_name = "qinq-termination"];
                  }
                  QinqTerminations qinq_terminations = 3 [json_name = "qinq-terminations"];
               }
               Igmp igmp = 1 [json_name = "igmp"];
               message Ports {
                  message General {
                     message RateLimitMode_Port {
                        message Port9 {
                           uint32 cir = 1 [json_name = "cir"];
                           uint32 cbs = 2 [json_name = "cbs"];
                           bool prior = 3 [json_name = "prior"];
                        }
                        Port9 port9 = 1 [json_name = "port"];
                     }
                     message RateLimitMode_Protocol {
                        message Protocols {
                           message Protocol10 {
                              enum ProtocolType {
                                 INVALID_ENUM_VALUE_ProtocolType = 0;
                                 ProtocolType_RSVP = 7;
                                 ProtocolType_OSPF = 8;
                                 ProtocolType_RIP = 9;
                                 ProtocolType_ISIS = 10;
                                 ProtocolType_ICMP = 12;
                                 ProtocolType_PIM = 14;
                                 ProtocolType_DHCP = 17;
                                 ProtocolType_VRRP = 26;
                                 ProtocolType_LDPX_HELLO = 171;
                                 ProtocolType_DHCPV6 = 259;
                                 ProtocolType_RIPNG = 437;
                                 ProtocolType_OSPFV3 = 671;
                                 ProtocolType_ICMPV6 = 675;
                                 ProtocolType_PIMV6 = 677;
                                 ProtocolType_VRRPV6 = 1097;
                              };
                              ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                              uint32 cir = 2 [json_name = "cir"];
                              uint32 cbs = 3 [json_name = "cbs"];
                              bool prior = 4 [json_name = "prior"];
                           }
                           repeated Protocol10 protocol10 = 1 [json_name = "protocol"];
                        }
                        Protocols protocols = 1 [json_name = "protocols"];
                     }
                     oneof RateLimitMode {
                        RateLimitMode_Port rate_limit_mode_port = 1 [json_name = "port"];
                        RateLimitMode_Protocol rate_limit_mode_protocol = 2 [json_name = "protocol"];
                     }
                  }
                  General general = 1 [json_name = "general"];
                  message Dot1QTerminations {
                     message Dot1QTermination {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                        message RateLimitMode_Port {
                           message Port10 {
                              uint32 cir = 1 [json_name = "cir"];
                              uint32 cbs = 2 [json_name = "cbs"];
                              bool prior = 3 [json_name = "prior"];
                           }
                           Port10 port10 = 1 [json_name = "port"];
                        }
                        message RateLimitMode_Protocol {
                           message Protocols {
                              message Protocol11 {
                                 enum ProtocolType {
                                    INVALID_ENUM_VALUE_ProtocolType = 0;
                                    ProtocolType_RSVP = 7;
                                    ProtocolType_OSPF = 8;
                                    ProtocolType_RIP = 9;
                                    ProtocolType_ISIS = 10;
                                    ProtocolType_ICMP = 12;
                                    ProtocolType_PIM = 14;
                                    ProtocolType_DHCP = 17;
                                    ProtocolType_VRRP = 26;
                                    ProtocolType_LDPX_HELLO = 171;
                                    ProtocolType_DHCPV6 = 259;
                                    ProtocolType_RIPNG = 437;
                                    ProtocolType_OSPFV3 = 671;
                                    ProtocolType_ICMPV6 = 675;
                                    ProtocolType_PIMV6 = 677;
                                    ProtocolType_VRRPV6 = 1097;
                                 };
                                 ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                                 uint32 cir = 2 [json_name = "cir"];
                                 uint32 cbs = 3 [json_name = "cbs"];
                                 bool prior = 4 [json_name = "prior"];
                              }
                              repeated Protocol11 protocol11 = 1 [json_name = "protocol"];
                           }
                           Protocols protocols = 1 [json_name = "protocols"];
                        }
                        oneof RateLimitMode {
                           RateLimitMode_Port rate_limit_mode_port = 3 [json_name = "port"];
                           RateLimitMode_Protocol rate_limit_mode_protocol = 4 [json_name = "protocol"];
                        }
                     }
                     repeated Dot1QTermination dot1q_termination = 1 [json_name = "dot1q-termination"];
                  }
                  Dot1QTerminations dot1q_terminations = 2 [json_name = "dot1q-terminations"];
                  message QinqTerminations {
                     message QinqTermination {
                        uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                        uint32 ce_vlan_begin = 2 [json_name = "ce-vlan-begin"];
                        uint32 ce_vlan_end = 3 [json_name = "ce-vlan-end"];
                        message RateLimitMode_Port {
                           message Port10 {
                              uint32 cir = 1 [json_name = "cir"];
                              uint32 cbs = 2 [json_name = "cbs"];
                              bool prior = 3 [json_name = "prior"];
                           }
                           Port10 port10 = 1 [json_name = "port"];
                        }
                        message RateLimitMode_Protocol {
                           message Protocols {
                              message Protocol11 {
                                 enum ProtocolType {
                                    INVALID_ENUM_VALUE_ProtocolType = 0;
                                    ProtocolType_RSVP = 7;
                                    ProtocolType_OSPF = 8;
                                    ProtocolType_RIP = 9;
                                    ProtocolType_ISIS = 10;
                                    ProtocolType_ICMP = 12;
                                    ProtocolType_PIM = 14;
                                    ProtocolType_DHCP = 17;
                                    ProtocolType_VRRP = 26;
                                    ProtocolType_LDPX_HELLO = 171;
                                    ProtocolType_DHCPV6 = 259;
                                    ProtocolType_RIPNG = 437;
                                    ProtocolType_OSPFV3 = 671;
                                    ProtocolType_ICMPV6 = 675;
                                    ProtocolType_PIMV6 = 677;
                                    ProtocolType_VRRPV6 = 1097;
                                 };
                                 ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                                 uint32 cir = 2 [json_name = "cir"];
                                 uint32 cbs = 3 [json_name = "cbs"];
                                 bool prior = 4 [json_name = "prior"];
                              }
                              repeated Protocol11 protocol11 = 1 [json_name = "protocol"];
                           }
                           Protocols protocols = 1 [json_name = "protocols"];
                        }
                        oneof RateLimitMode {
                           RateLimitMode_Port rate_limit_mode_port = 4 [json_name = "port"];
                           RateLimitMode_Protocol rate_limit_mode_protocol = 5 [json_name = "protocol"];
                        }
                     }
                     repeated QinqTermination qinq_termination = 1 [json_name = "qinq-termination"];
                  }
                  QinqTerminations qinq_terminations = 3 [json_name = "qinq-terminations"];
               }
               Ports ports = 2 [json_name = "ports"];
               message Enhance {
                  message RateLimitMode_Port {
                     message Port8 {
                        uint32 cir = 1 [json_name = "cir"];
                        uint32 cbs = 2 [json_name = "cbs"];
                     }
                     Port8 port8 = 1 [json_name = "port"];
                  }
                  message RateLimitMode_Protocol {
                     message Protocols {
                        message Protocol9 {
                           enum ProtocolType {
                              INVALID_ENUM_VALUE_ProtocolType = 0;
                              ProtocolType_DHCP = 1;
                              ProtocolType_DHCPV6 = 2;
                              ProtocolType_ICMP = 3;
                              ProtocolType_ICMPV6 = 4;
                           };
                           ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                           uint32 cir = 2 [json_name = "cir"];
                           uint32 cbs = 3 [json_name = "cbs"];
                        }
                        repeated Protocol9 protocol9 = 1 [json_name = "protocol"];
                     }
                     Protocols protocols = 1 [json_name = "protocols"];
                  }
                  oneof RateLimitMode {
                     RateLimitMode_Port rate_limit_mode_port = 1 [json_name = "port"];
                     RateLimitMode_Protocol rate_limit_mode_protocol = 2 [json_name = "protocol"];
                  }
               }
               Enhance enhance = 3 [json_name = "enhance"];
            }
            CpRateLimit cp_rate_limit = 10 [json_name = "cp-rate-limit"];
            message MacFilter {
               bool whitelist_enable = 1 [json_name = "whitelist-enable"];
               bool blacklist_enable = 2 [json_name = "blacklist-enable"];
               message MacAddresss {
                  message MacAddress {
                     string mac = 1 [json_name = "mac"];
                  }
                  repeated MacAddress mac_address = 1 [json_name = "mac-address"];
               }
               MacAddresss mac_addresss = 3 [json_name = "mac-addresss"];
            }
            MacFilter mac_filter = 11 [json_name = "mac-filter"];
         }
         Cpudefend cpudefend = 76 [json_name = "cpudefend"];
         message Dcn {
            message Dcnv4 {
               bool default_port = 1 [json_name = "default-port"];
               bool enable = 2 [json_name = "enable"];
               uint32 vlan_id = 3 [json_name = "vlan-id"];
               string vlan_list = 4 [json_name = "vlan-list"];
            }
            Dcnv4 dcnv4 = 1 [json_name = "dcnv4"];
            message TcDcn {
               bool default_port = 1 [json_name = "default-port"];
               bool enable = 2 [json_name = "enable"];
            }
            TcDcn tc_dcn = 2 [json_name = "tc-dcn"];
            message Ospfv2Site {
               uint32 process_id = 1 [json_name = "process-id"];
               string area_id = 2 [json_name = "area-id"];
            }
            Ospfv2Site ospfv2_site = 3 [json_name = "ospfv2-site"];
            message Ospfv2 {
               uint32 hello_timer = 1 [json_name = "hello-timer"];
               uint32 dead_timer = 2 [json_name = "dead-timer"];
               uint32 poll_timer = 3 [json_name = "poll-timer"];
               uint32 retransmit_timer = 4 [json_name = "retransmit-timer"];
               uint32 trans_delay_timer = 5 [json_name = "trans-delay-timer"];
               enum AuthMode {
                  AuthMode_NONE = 0;
                  AuthMode_HMACX_SHA256 = 2;
                  AuthMode_NULL = 16;
                  AuthMode_SIMPLE = 32;
                  AuthMode_MD5 = 64;
                  AuthMode_HMACX_MD5 = 128;
               };
               AuthMode auth_mode = 6 [json_name = "auth-mode"];
               string auth_text_simple = 7 [json_name = "auth-text-simple"];
               uint32 auth_key_id = 8 [json_name = "auth-key-id"];
               string auth_text_md5 = 9 [json_name = "auth-text-md5"];
            }
            Ospfv2 ospfv2 = 4 [json_name = "ospfv2"];
         }
         Dcn dcn = 77 [json_name = "dcn"];
         message DhcpRelayAttribute {
            bool enable = 1 [json_name = "enable"];
            enum ReplyPacketPolicy {
               INVALID_ENUM_VALUE_ReplyPacketPolicy = 0;
               ReplyPacketPolicy_BROADCASTX_ALWAYS = 1;
            };
            ReplyPacketPolicy reply_packet_policy = 2 [json_name = "reply-packet-policy"];
            message Option82 {
               bool link_selection_enable = 1 [json_name = "link-selection-enable"];
               string link_selection_address = 2 [json_name = "link-selection-address"];
               bool vendor_specific_enable = 3 [json_name = "vendor-specific-enable"];
               bool subscriber_id_enable = 4 [json_name = "subscriber-id-enable"];
               enum SubscriberIdMode {
                  INVALID_ENUM_VALUE_SubscriberIdMode = 0;
                  SubscriberIdMode_SELFX_DEFINE = 1;
               };
               SubscriberIdMode subscriber_id_mode = 5 [json_name = "subscriber-id-mode"];
               string subscriber_id_self_define_text = 6 [json_name = "subscriber-id-self-define-text"];
               bool vss_control_enable = 7 [json_name = "vss-control-enable"];
               bool server_id_override_enable = 8 [json_name = "server-id-override-enable"];
            }
            Option82 option82 = 3 [json_name = "option82"];
            message ServerAddresses {
               message ServerAddress {
                  string address = 1 [json_name = "address"];
                  bool vendor = 2 [json_name = "vendor"];
                  uint32 option_code = 3 [json_name = "option-code"];
                  string vendor_class = 4 [json_name = "vendor-class"];
               }
               repeated ServerAddress server_address = 1 [json_name = "server-address"];
            }
            ServerAddresses server_addresses = 4 [json_name = "server-addresses"];
            message GatewayAddresses {
               message GatewayAddress {
                  bool vendor = 1 [json_name = "vendor"];
                  uint32 option_code = 2 [json_name = "option-code"];
                  string vendor_class = 3 [json_name = "vendor-class"];
                  string ip_address = 4 [json_name = "ip-address"];
               }
               repeated GatewayAddress gateway_address = 1 [json_name = "gateway-address"];
            }
            GatewayAddresses gateway_addresses = 5 [json_name = "gateway-addresses"];
            message RelaySourceAddress {
               string vpn_name = 1 [json_name = "vpn-name"];
               string source_address = 2 [json_name = "source-address"];
            }
            RelaySourceAddress relay_source_address = 6 [json_name = "relay-source-address"];
            message RelaySourceOptionAddresses {
               message RelaySourceOptionAddress {
                  bool vendor = 1 [json_name = "vendor"];
                  uint32 option_code = 2 [json_name = "option-code"];
                  string vendor_class = 3 [json_name = "vendor-class"];
                  string source_address = 4 [json_name = "source-address"];
               }
               repeated RelaySourceOptionAddress relay_source_option_address = 1 [json_name = "relay-source-option-address"];
            }
            RelaySourceOptionAddresses relay_source_option_addresses = 7 [json_name = "relay-source-option-addresses"];
            message Opt82VendorSpecifics {
               message Opt82VendorSpecific {
                  uint32 sub_option_number = 1 [json_name = "sub-option-number"];
                  enum SubOptionFormat {
                     SubOptionFormat_SOURCEX_IPX_ADDRESS = 0;
                  };
                  SubOptionFormat sub_option_format = 2 [json_name = "sub-option-format"];
                  string ip_address = 3 [json_name = "ip-address"];
               }
               repeated Opt82VendorSpecific opt82_vendor_specific = 1 [json_name = "opt82-vendor-specific"];
            }
            Opt82VendorSpecifics opt82_vendor_specifics = 8 [json_name = "opt82-vendor-specifics"];
            bool gateway_enable = 9 [json_name = "gateway-enable"];
            string server_group_name = 10 [json_name = "server-group-name"];
            bool undo_server_select = 11 [json_name = "undo-server-select"];
            bool vlan_broadcast_flag = 12 [json_name = "vlan-broadcast-flag"];
            bool giaddr_out_address = 13 [json_name = "giaddr-out-address"];
            string source_port = 14 [json_name = "source-port"];
            bool information = 15 [json_name = "information"];
            enum InformationStrategy {
               INVALID_ENUM_VALUE_InformationStrategy = 0;
               InformationStrategy_DROP = 1;
               InformationStrategy_KEEP = 2;
               InformationStrategy_REPLACE = 3;
            };
            InformationStrategy information_strategy = 16 [json_name = "information-strategy"];
            bool gateway_re_route = 17 [json_name = "gateway-re-route"];
            message DestinationAddresses {
               message DestinationAddress {
                  string ip_address = 1 [json_name = "ip-address"];
               }
               repeated DestinationAddress destination_address = 1 [json_name = "destination-address"];
            }
            DestinationAddresses destination_addresses = 18 [json_name = "destination-addresses"];
            message VpnServerAddresses {
               message VpnServerAddress {
                  string address = 1 [json_name = "address"];
                  string vpn_name = 2 [json_name = "vpn-name"];
               }
               repeated VpnServerAddress vpn_server_address = 1 [json_name = "vpn-server-address"];
            }
            VpnServerAddresses vpn_server_addresses = 19 [json_name = "vpn-server-addresses"];
            message GatewayIpAddresses {
               message GatewayIpAddress {
                  string ip_address = 1 [json_name = "ip-address"];
               }
               repeated GatewayIpAddress gateway_ip_address = 1 [json_name = "gateway-ip-address"];
            }
            GatewayIpAddresses gateway_ip_addresses = 20 [json_name = "gateway-ip-addresses"];
         }
         DhcpRelayAttribute dhcp_relay_attribute = 78 [json_name = "dhcp-relay-attribute"];
         message DhcpIf {
            message DhcpPacketSetting {
               uint32 ip_ttl = 1 [json_name = "ip-ttl"];
               uint32 dscp_outbound = 2 [json_name = "dscp-outbound"];
               enum ServerEnable {
                  INVALID_ENUM_VALUE_ServerEnable = 0;
                  ServerEnable_ENABLE = 1;
                  ServerEnable_DISABLE = 2;
               };
               ServerEnable server_enable = 3 [json_name = "server-enable"];
            }
            DhcpPacketSetting dhcp_packet_setting = 1 [json_name = "dhcp-packet-setting"];
            message Option82Formats {
               message Option82Format {
                  enum SubOptionType {
                     INVALID_ENUM_VALUE_SubOptionType = 0;
                     SubOptionType_CIRCUITX_ID = 1;
                     SubOptionType_REMOTEX_ID = 2;
                     SubOptionType_CIRCUITX_REMOTE = 3;
                  };
                  SubOptionType sub_option_type = 1 [json_name = "sub-option-type"];
                  string user_define_text = 3 [json_name = "user-define-text"];
                  enum Option82Format7 {
                     INVALID_ENUM_VALUE_Option82Format7 = 0;
                     Option82Format7_COMMON = 1;
                     Option82Format7_EXTEND = 2;
                     Option82Format7_USERX_DEFINED = 3;
                     Option82Format7_DEFAULT = 4;
                     Option82Format7_TYPE1 = 5;
                     Option82Format7_TYPE2 = 6;
                     Option82Format7_SELFX_DEFINE = 7;
                     Option82Format7_DEFAULTX_EXTRA = 8;
                     Option82Format7_CNX_TELECOM = 9;
                     Option82Format7_SELFX_DEFINEX_EXTRA = 10;
                     Option82Format7_INTRACOMX_VXLAN = 11;
                     Option82Format7_CNX_TELECOMX_INHERIT = 12;
                  };
                  Option82Format7 option82_format = 4 [json_name = "option82-format"];
               }
               repeated Option82Format option82_format = 1 [json_name = "option82-format"];
            }
            Option82Formats option82_formats = 2 [json_name = "option82-formats"];
            message Option82InsertSetting {
               message Option82InsertFormat_InsertFormat {
                  bool insert = 1 [json_name = "insert"];
               }
               message Option82InsertFormat_RebuildFormat {
                  bool rebuild = 1 [json_name = "rebuild"];
               }
               oneof Option82InsertFormat {
                  Option82InsertFormat_InsertFormat option82_insert_format_insert_format = 1 [json_name = "insert-format"];
                  Option82InsertFormat_RebuildFormat option82_insert_format_rebuild_format = 2 [json_name = "rebuild-format"];
               }
            }
            Option82InsertSetting option82_insert_setting = 3 [json_name = "option82-insert-setting"];
            message Option82VlanFormats {
               message Option82VlanFormat {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
                  uint32 cevlan_id = 2 [json_name = "cevlan-id"];
                  enum SubOptionType {
                     INVALID_ENUM_VALUE_SubOptionType = 0;
                     SubOptionType_CIRCUITX_ID = 1;
                     SubOptionType_REMOTEX_ID = 2;
                     SubOptionType_CIRCUITX_REMOTE = 3;
                  };
                  SubOptionType sub_option_type = 3 [json_name = "sub-option-type"];
                  enum Option82Format {
                     INVALID_ENUM_VALUE_Option82Format = 0;
                     Option82Format_COMMON = 1;
                     Option82Format_EXTEND = 2;
                     Option82Format_USERX_DEFINED = 3;
                     Option82Format_DEFAULT = 4;
                     Option82Format_TYPE1 = 5;
                     Option82Format_TYPE2 = 6;
                     Option82Format_SELFX_DEFINE = 7;
                     Option82Format_DEFAULTX_EXTRA = 8;
                     Option82Format_CNX_TELECOM = 9;
                     Option82Format_SELFX_DEFINEX_EXTRA = 10;
                     Option82Format_INTRACOMX_VXLAN = 11;
                     Option82Format_CNX_TELECOMX_INHERIT = 12;
                  };
                  Option82Format option82_format = 4 [json_name = "option82-format"];
                  string user_define_text = 5 [json_name = "user-define-text"];
               }
               repeated Option82VlanFormat option82_vlan_format = 1 [json_name = "option82-vlan-format"];
            }
            Option82VlanFormats option82_vlan_formats = 4 [json_name = "option82-vlan-formats"];
            message AppendVendorSpecific {
               bool enble = 1 [json_name = "enble"];
            }
            AppendVendorSpecific append_vendor_specific = 5 [json_name = "append-vendor-specific"];
            message Encapsulation {
               enum Suboption {
                  Suboption_CIRCUITX_ID = 0;
                  Suboption_REMOTEX_ID = 1;
                  Suboption_SUBSCRIBERX_ID = 2;
                  Suboption_VENDORX_SPECIFICX_ID = 3;
               };
               repeated Suboption suboption = 1 [json_name = "suboption"];
            }
            Encapsulation encapsulation = 6 [json_name = "encapsulation"];
            message SubscriberId {
               string ascii_text = 1 [json_name = "ascii-text"];
               string hex_text = 2 [json_name = "hex-text"];
               message SubscriberIdFormat_AsciiFormat {
                  string ascii_text = 1 [json_name = "ascii-text"];
               }
               message SubscriberIdFormat_HexFormat {
                  string hex_text = 1 [json_name = "hex-text"];
               }
               oneof SubscriberIdFormat {
                  SubscriberIdFormat_AsciiFormat subscriber_id_format_ascii_format = 3 [json_name = "ascii-format"];
                  SubscriberIdFormat_HexFormat subscriber_id_format_hex_format = 4 [json_name = "hex-format"];
               }
            }
            SubscriberId subscriber_id = 7 [json_name = "subscriber-id"];
            message AntiAttackCheck {
               bool magic_cookie = 1 [json_name = "magic-cookie"];
               bool udp_checksum = 2 [json_name = "udp-checksum"];
            }
            AntiAttackCheck anti_attack_check = 8 [json_name = "anti-attack-check"];
         }
         DhcpIf dhcp_if = 79 [json_name = "dhcp-if"];
         message DhcpClientIf {
            bool address_allocation = 1 [json_name = "address-allocation"];
            uint32 expected_lease = 2 [json_name = "expected-lease"];
            string option60 = 3 [json_name = "option60"];
            message ClientStatus {
               enum FsmState {
                  FsmState_INIT = 0;
                  FsmState_SELECTING = 1;
                  FsmState_REQUESTING = 2;
                  FsmState_BOUND = 3;
                  FsmState_RENEWING = 4;
                  FsmState_REBINDING = 5;
                  FsmState_WAITINGX_OFFER = 6;
                  FsmState_HALT = 7;
                  FsmState_INITX_REBOOT = 8;
                  FsmState_VERIFY = 9;
                  FsmState_REBOOTING = 10;
                  FsmState_VERIFYING = 11;
               };
               FsmState fsm_state = 1 [json_name = "fsm-state"];
               string mac_address = 2 [json_name = "mac-address"];
               string ip_address = 3 [json_name = "ip-address"];
               string ip_mask = 4 [json_name = "ip-mask"];
               string server_address = 5 [json_name = "server-address"];
               string lease_obtained_time = 6 [json_name = "lease-obtained-time"];
               string lease_expire_time = 7 [json_name = "lease-expire-time"];
               string lease_renew_time = 8 [json_name = "lease-renew-time"];
               string lease_rebind_time = 9 [json_name = "lease-rebind-time"];
            }
            ClientStatus client_status = 4 [json_name = "client-status"];
            message ClientStatistics {
               uint32 total_packets_received = 1 [json_name = "total-packets-received"];
               uint32 offer_packets_received = 2 [json_name = "offer-packets-received"];
               uint32 ack_packets_received = 3 [json_name = "ack-packets-received"];
               uint32 nak_packets_received = 4 [json_name = "nak-packets-received"];
               uint32 total_packets_send = 5 [json_name = "total-packets-send"];
               uint32 discovery_packets_send = 6 [json_name = "discovery-packets-send"];
               uint32 request_packets_send = 7 [json_name = "request-packets-send"];
               uint32 reboot_request_packets_send = 8 [json_name = "reboot-request-packets-send"];
               uint32 select_request_packets_send = 9 [json_name = "select-request-packets-send"];
               uint32 renew_request_packets_send = 10 [json_name = "renew-request-packets-send"];
               uint32 rebind_request_packets_send = 11 [json_name = "rebind-request-packets-send"];
               uint32 decline_packets_send = 12 [json_name = "decline-packets-send"];
               uint32 release_packets_send = 13 [json_name = "release-packets-send"];
               uint32 bootp_reply_packets_received = 14 [json_name = "bootp-reply-packets-received"];
               uint32 bootp_request_packets_send = 15 [json_name = "bootp-request-packets-send"];
            }
            ClientStatistics client_statistics = 5 [json_name = "client-statistics"];
            uint32 default_route_preference = 6 [json_name = "default-route-preference"];
            string client_id = 7 [json_name = "client-id"];
            string host_name = 8 [json_name = "host-name"];
            enum RequestOption {
               INVALID_ENUM_VALUE_RequestOption = 0;
               RequestOption_OPTION1 = 1;
               RequestOption_OPTION4 = 4;
               RequestOption_OPTION7 = 7;
               RequestOption_OPTION17 = 17;
               RequestOption_OPTION42 = 42;
               RequestOption_OPTION43 = 43;
               RequestOption_OPTION66 = 66;
               RequestOption_OPTION67 = 67;
               RequestOption_OPTION120 = 120;
               RequestOption_OPTION129 = 129;
               RequestOption_OPTION143 = 143;
               RequestOption_OPTION145 = 145;
               RequestOption_OPTION146 = 146;
               RequestOption_OPTION148 = 148;
               RequestOption_OPTION150 = 150;
            };
            repeated RequestOption request_option = 9 [json_name = "request-option"];
            enum RequestOptionExclude {
               INVALID_ENUM_VALUE_RequestOptionExclude = 0;
               RequestOptionExclude_OPTION3 = 3;
               RequestOptionExclude_OPTION6 = 6;
               RequestOptionExclude_OPTION15 = 15;
               RequestOptionExclude_OPTION28 = 28;
               RequestOptionExclude_OPTION33 = 33;
               RequestOptionExclude_OPTION44 = 44;
               RequestOptionExclude_OPTION121 = 121;
               RequestOptionExclude_OPTION184 = 184;
            };
            repeated RequestOptionExclude request_option_exclude = 10 [json_name = "request-option-exclude"];
            message BootpAlloc {
               bool enable = 1 [json_name = "enable"];
               bool unicast = 2 [json_name = "unicast"];
            }
            BootpAlloc bootp_alloc = 11 [json_name = "bootp-alloc"];
            message ClientTrack {
               message TrackType_BfdSession {
                  string bfd_session = 1 [json_name = "bfd-session"];
               }
               message TrackType_IpLink {
                  string ip_link = 1 [json_name = "ip-link"];
               }
               oneof TrackType {
                  TrackType_BfdSession track_type_bfd_session = 1 [json_name = "bfd-session"];
                  TrackType_IpLink track_type_ip_link = 2 [json_name = "ip-link"];
               }
            }
            ClientTrack client_track = 12 [json_name = "client-track"];
            message GatewayDetect {
               uint32 period = 1 [json_name = "period"];
               uint32 retransmit = 2 [json_name = "retransmit"];
               uint32 timeout = 3 [json_name = "timeout"];
            }
            GatewayDetect gateway_detect = 13 [json_name = "gateway-detect"];
         }
         DhcpClientIf dhcp_client_if = 80 [json_name = "dhcp-client-if"];
         message DhcpSnoopingIf {
            message BasicAttribute {
               bool enable = 1 [json_name = "enable"];
               bool trust_enable = 2 [json_name = "trust-enable"];
               bool check_arp_enable = 3 [json_name = "check-arp-enable"];
               bool alarm_arp_enable = 4 [json_name = "alarm-arp-enable"];
               uint32 alarm_arp_threshold = 5 [json_name = "alarm-arp-threshold"];
               bool check_ip_enable = 6 [json_name = "check-ip-enable"];
               bool alarm_ip_enable = 7 [json_name = "alarm-ip-enable"];
               uint32 alarm_ip_threshold = 8 [json_name = "alarm-ip-threshold"];
               bool alarm_reply_enable = 9 [json_name = "alarm-reply-enable"];
               uint32 alarm_reply_threshold = 10 [json_name = "alarm-reply-threshold"];
               bool check_mac_enable = 11 [json_name = "check-mac-enable"];
               bool alarm_mac_enable = 12 [json_name = "alarm-mac-enable"];
               uint32 alarm_mac_threshold = 13 [json_name = "alarm-mac-threshold"];
               bool check_user_bind_enable = 14 [json_name = "check-user-bind-enable"];
               bool alarm_user_bind_enable = 15 [json_name = "alarm-user-bind-enable"];
               uint32 alarm_user_bind_threshold = 16 [json_name = "alarm-user-bind-threshold"];
               uint32 max_user_number = 17 [json_name = "max-user-number"];
               bool alarm_user_limit_enable = 18 [json_name = "alarm-user-limit-enable"];
               uint32 alarm_user_limit_threshold = 19 [json_name = "alarm-user-limit-threshold"];
               uint32 rate_limit = 20 [json_name = "rate-limit"];
               bool check_rate_enable = 21 [json_name = "check-rate-enable"];
               bool alarm_rate_enable = 22 [json_name = "alarm-rate-enable"];
               uint32 alarm_rate_threshold = 23 [json_name = "alarm-rate-threshold"];
               bool sticky_mac_enable = 24 [json_name = "sticky-mac-enable"];
               bool no_user_binding = 25 [json_name = "no-user-binding"];
               bool exclude_dhcp_snooping = 26 [json_name = "exclude-dhcp-snooping"];
            }
            BasicAttribute basic_attribute = 1 [json_name = "basic-attribute"];
            message StaticBinds {
               message StaticBind {
                  string ip_address = 1 [json_name = "ip-address"];
                  uint32 vlan_id = 2 [json_name = "vlan-id"];
                  uint32 cevlan_id = 3 [json_name = "cevlan-id"];
                  string mac_address = 4 [json_name = "mac-address"];
               }
               repeated StaticBind static_bind = 1 [json_name = "static-bind"];
            }
            StaticBinds static_binds = 2 [json_name = "static-binds"];
            message CommittedAccessRate {
               uint32 car_cir = 1 [json_name = "car-cir"];
               uint32 car_cbs = 2 [json_name = "car-cbs"];
            }
            CommittedAccessRate committed_access_rate = 3 [json_name = "committed-access-rate"];
            message PacketsDiscardedStatistics {
               uint32 drop_arp_packets_count = 1 [json_name = "drop-arp-packets-count"];
               uint32 drop_ip_packets_count = 2 [json_name = "drop-ip-packets-count"];
               uint32 packet_drop_by_user_bind = 3 [json_name = "packet-drop-by-user-bind"];
               uint32 packet_drop_by_mac = 4 [json_name = "packet-drop-by-mac"];
               uint32 packet_drop_by_untrust_reply = 5 [json_name = "packet-drop-by-untrust-reply"];
               uint32 packet_drop_by_rate = 6 [json_name = "packet-drop-by-rate"];
            }
            PacketsDiscardedStatistics packets_discarded_statistics = 4 [json_name = "packets-discarded-statistics"];
         }
         DhcpSnoopingIf dhcp_snooping_if = 81 [json_name = "dhcp-snooping-if"];
         message Dhcpv6RelayAttribute {
            string source_address = 1 [json_name = "source-address"];
            string link_address = 2 [json_name = "link-address"];
            bool strict_check = 3 [json_name = "strict-check"];
            string server_group_name = 4 [json_name = "server-group-name"];
            message DestinationAddresses {
               message DestinationAddress {
                  string ipv6_address = 1 [json_name = "ipv6-address"];
                  message NetType_VpnInstance {
                     string vpn_instance = 1 [json_name = "vpn-instance"];
                  }
                  message NetType_PublicNet {
                     bool public_net = 1 [json_name = "public-net"];
                  }
                  oneof NetType {
                     NetType_VpnInstance net_type_vpn_instance = 2 [json_name = "vpn-instance"];
                     NetType_PublicNet net_type_public_net = 3 [json_name = "public-net"];
                  }
               }
               repeated DestinationAddress destination_address = 1 [json_name = "destination-address"];
            }
            DestinationAddresses destination_addresses = 5 [json_name = "destination-addresses"];
            message DestinationIfs {
               message DestinationIf {
                  string if_name = 1 [json_name = "if-name"];
               }
               repeated DestinationIf destination_if = 1 [json_name = "destination-if"];
            }
            DestinationIfs destination_ifs = 6 [json_name = "destination-ifs"];
            message RebuildOption {
               bool rebuild_interface_id = 1 [json_name = "rebuild-interface-id"];
               bool rebuild_remote_id = 2 [json_name = "rebuild-remote-id"];
            }
            RebuildOption rebuild_option = 7 [json_name = "rebuild-option"];
            message AccessLimitSetting {
               uint32 access_limit = 1 [json_name = "access-limit"];
               uint32 access_vlan_limit = 2 [json_name = "access-vlan-limit"];
            }
            AccessLimitSetting access_limit_setting = 8 [json_name = "access-limit-setting"];
            message PdRouteTrackVrrp {
               uint32 degrade_cost = 1 [json_name = "degrade-cost"];
            }
            PdRouteTrackVrrp pd_route_track_vrrp = 9 [json_name = "pd-route-track-vrrp"];
            string source_interface = 10 [json_name = "source-interface"];
            message Option {
               bool insert_subscriber_id = 1 [json_name = "insert-subscriber-id"];
               message InterfaceIdMode_CnTelecom {
                  bool cn_telecom_mode = 1 [json_name = "cn-telecom-mode"];
               }
               message InterfaceIdMode_CnTelecomInherit {
                  bool cn_telecom_inherit_mode = 1 [json_name = "cn-telecom-inherit-mode"];
               }
               message InterfaceIdMode_Tr101 {
                  bool tr_101_mode = 1 [json_name = "tr-101-mode"];
               }
               message InterfaceIdMode_UserDefined {
                  string interface_id_text = 1 [json_name = "interface-id-text"];
               }
               oneof InterfaceIdMode {
                  InterfaceIdMode_CnTelecom interface_id_mode_cn_telecom = 2 [json_name = "cn-telecom"];
                  InterfaceIdMode_CnTelecomInherit interface_id_mode_cn_telecom_inherit = 3 [json_name = "cn-telecom-inherit"];
                  InterfaceIdMode_Tr101 interface_id_mode_tr_101 = 4 [json_name = "tr-101"];
                  InterfaceIdMode_UserDefined interface_id_mode_user_defined = 5 [json_name = "user-defined"];
               }
               message RemoteIdMode_Default {
                  bool default_format = 1 [json_name = "default-format"];
               }
               message RemoteIdMode_UserDefined {
                  string remote_id_text = 1 [json_name = "remote-id-text"];
               }
               oneof RemoteIdMode {
                  RemoteIdMode_Default remote_id_mode_default = 6 [json_name = "default"];
                  RemoteIdMode_UserDefined remote_id_mode_user_defined = 7 [json_name = "user-defined"];
               }
               bool insert_remote_id = 8 [json_name = "insert-remote-id"];
               bool insert_prefix_exclude = 9 [json_name = "insert-prefix-exclude"];
            }
            Option option = 11 [json_name = "option"];
            message Dot1QAccessLimits {
               message Dot1QAccessLimit {
                  uint32 access_limit = 1 [json_name = "access-limit"];
                  string vlan_list = 2 [json_name = "vlan-list"];
               }
               repeated Dot1QAccessLimit dot1q_access_limit = 1 [json_name = "dot1q-access-limit"];
            }
            Dot1QAccessLimits dot1q_access_limits = 12 [json_name = "dot1q-access-limits"];
            message QinqAccessLimits {
               message QinqAccessLimit {
                  uint32 access_limit = 1 [json_name = "access-limit"];
                  uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
                  string ce_vlan_list = 3 [json_name = "ce-vlan-list"];
               }
               repeated QinqAccessLimit qinq_access_limit = 1 [json_name = "qinq-access-limit"];
            }
            QinqAccessLimits qinq_access_limits = 13 [json_name = "qinq-access-limits"];
            message QinqAnyAccessLimits {
               message QinqAnyAccessLimit {
                  uint32 pe_vlan_id = 1 [json_name = "pe-vlan-id"];
                  uint32 access_limit = 2 [json_name = "access-limit"];
               }
               repeated QinqAnyAccessLimit qinq_any_access_limit = 1 [json_name = "qinq-any-access-limit"];
            }
            QinqAnyAccessLimits qinq_any_access_limits = 14 [json_name = "qinq-any-access-limits"];
            bool gateway_switch_enable = 15 [json_name = "gateway-switch-enable"];
            string current_link_address = 16 [json_name = "current-link-address"];
            bool pd_route = 17 [json_name = "pd-route"];
            message DestinationVpnAddresses {
               message DestinationVpnAddress {
                  string address = 1 [json_name = "address"];
                  string vpn_name = 2 [json_name = "vpn-name"];
               }
               repeated DestinationVpnAddress destination_vpn_address = 1 [json_name = "destination-vpn-address"];
            }
            DestinationVpnAddresses destination_vpn_addresses = 18 [json_name = "destination-vpn-addresses"];
            message Option18 {
               bool insert_enable = 1 [json_name = "insert-enable"];
               bool rebuild_enable = 2 [json_name = "rebuild-enable"];
               message Formats {
                  message Format {
                     uint32 vlan = 1 [json_name = "vlan"];
                     uint32 ce_vlan = 2 [json_name = "ce-vlan"];
                     string user_defined = 3 [json_name = "user-defined"];
                  }
                  repeated Format format = 1 [json_name = "format"];
               }
               Formats formats = 3 [json_name = "formats"];
            }
            Option18 option18 = 19 [json_name = "option18"];
            message Option37 {
               bool insert_enable = 1 [json_name = "insert-enable"];
               bool rebuild_enable = 2 [json_name = "rebuild-enable"];
               message Formats {
                  message Format {
                     uint32 vlan = 1 [json_name = "vlan"];
                     uint32 ce_vlan = 2 [json_name = "ce-vlan"];
                     string user_defined = 3 [json_name = "user-defined"];
                  }
                  repeated Format format = 1 [json_name = "format"];
               }
               Formats formats = 3 [json_name = "formats"];
            }
            Option37 option37 = 20 [json_name = "option37"];
            message AccessVlans {
               message AccessVlan {
                  uint32 access_limit = 1 [json_name = "access-limit"];
                  uint32 pe_vlan = 2 [json_name = "pe-vlan"];
                  bool ce_vlan = 3 [json_name = "ce-vlan"];
                  string vlan_batch = 4 [json_name = "vlan-batch"];
               }
               repeated AccessVlan access_vlan = 1 [json_name = "access-vlan"];
            }
            AccessVlans access_vlans = 21 [json_name = "access-vlans"];
            message PacketStatistics {
               uint32 solicit_received_count = 1 [json_name = "solicit-received-count"];
               uint32 request_received_count = 2 [json_name = "request-received-count"];
               uint32 confirm_received_count = 3 [json_name = "confirm-received-count"];
               uint32 renew_received_count = 4 [json_name = "renew-received-count"];
               uint32 rebind_received_count = 5 [json_name = "rebind-received-count"];
               uint32 decline_received_count = 6 [json_name = "decline-received-count"];
               uint32 release_received_count = 7 [json_name = "release-received-count"];
               uint32 inform_received_count = 8 [json_name = "inform-received-count"];
               uint32 relay_forward_received_count = 9 [json_name = "relay-forward-received-count"];
               uint32 relay_reply_received_count = 10 [json_name = "relay-reply-received-count"];
               uint32 advertise_send_count = 11 [json_name = "advertise-send-count"];
               uint32 reply_send_count = 12 [json_name = "reply-send-count"];
               uint32 reconfig_send_count = 13 [json_name = "reconfig-send-count"];
               uint32 relay_forward_send_count = 14 [json_name = "relay-forward-send-count"];
               uint32 relay_reply_send_count = 15 [json_name = "relay-reply-send-count"];
               uint32 bad_packets_received_count = 16 [json_name = "bad-packets-received-count"];
               uint32 drop_packets_for_table_full = 17 [json_name = "drop-packets-for-table-full"];
               uint32 drop_packets_for_general_error = 18 [json_name = "drop-packets-for-general-error"];
               uint32 drop_packets_for_ipsec_authentication_fail = 19 [json_name = "drop-packets-for-ipsec-authentication-fail"];
            }
            PacketStatistics packet_statistics = 22 [json_name = "packet-statistics"];
         }
         Dhcpv6RelayAttribute dhcpv6_relay_attribute = 82 [json_name = "dhcpv6-relay-attribute"];
         message Efm {
            message Session {
               enum State {
                  State_DISABLE = 0;
                  State_ENABLE = 1;
               };
               State state = 1 [json_name = "state"];
               enum Mode {
                  Mode_PASSIVE = 0;
                  Mode_ACTIVE = 1;
               };
               Mode mode = 2 [json_name = "mode"];
               uint32 packet_max_size = 3 [json_name = "packet-max-size"];
               uint32 interval = 4 [json_name = "interval"];
               uint32 timeout = 5 [json_name = "timeout"];
               enum IgnoreLoopbackRequest {
                  IgnoreLoopbackRequest_DISABLE = 0;
                  IgnoreLoopbackRequest_ENABLE = 1;
               };
               IgnoreLoopbackRequest ignore_loopback_request = 6 [json_name = "ignore-loopback-request"];
               enum TriggerIfDown {
                  TriggerIfDown_DISABLE = 0;
                  TriggerIfDown_ENABLE = 1;
               };
               TriggerIfDown trigger_if_down = 7 [json_name = "trigger-if-down"];
               uint32 hold_up_time = 8 [json_name = "hold-up-time"];
               bool trigger_mac_renew = 9 [json_name = "trigger-mac-renew"];
               message ErrorFrame {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  enum PeriodUnit {
                     PeriodUnit_SECOND = 0;
                     PeriodUnit_MILLISECOND = 1;
                  };
                  PeriodUnit period_unit = 4 [json_name = "period-unit"];
                  uint64 errors = 5 [json_name = "errors"];
                  uint64 total_errors = 6 [json_name = "total-errors"];
                  uint32 total_events = 7 [json_name = "total-events"];
               }
               ErrorFrame error_frame = 10 [json_name = "error-frame"];
               message ErrorFrameSecond {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  uint64 errors = 4 [json_name = "errors"];
                  uint64 total_errors = 5 [json_name = "total-errors"];
                  uint32 total_events = 6 [json_name = "total-events"];
               }
               ErrorFrameSecond error_frame_second = 11 [json_name = "error-frame-second"];
               message ErrorCode {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  uint64 errors = 4 [json_name = "errors"];
                  uint64 total_errors = 5 [json_name = "total-errors"];
                  uint32 total_events = 6 [json_name = "total-events"];
               }
               ErrorCode error_code = 12 [json_name = "error-code"];
               message ErrorFramePeriod {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  uint64 errors = 4 [json_name = "errors"];
                  uint64 total_errors = 5 [json_name = "total-errors"];
                  uint32 total_events = 6 [json_name = "total-events"];
               }
               ErrorFramePeriod error_frame_period = 13 [json_name = "error-frame-period"];
               enum LocalState {
                  INVALID_ENUM_VALUE_LocalState = 0;
                  LocalState_DETECT = 1;
                  LocalState_DISCOVERY = 2;
                  LocalState_LOOPBACKX_CONTROL = 3;
                  LocalState_LOOPBACKX_CONTROLX_FORWARD = 4;
                  LocalState_LOOPBACKX_BEX_CONTROLLED = 5;
               };
               LocalState local_state = 14 [json_name = "local-state"];
               uint32 loopback_timeout = 15 [json_name = "loopback-timeout"];
               enum ParserAction {
                  ParserAction_FORWARD = 0;
                  ParserAction_LOOPBACK = 1;
                  ParserAction_DISCARD = 2;
                  ParserAction_RESERVE = 3;
               };
               ParserAction parser_action = 16 [json_name = "parser-action"];
               enum MultiplexerAction {
                  MultiplexerAction_FORWARD = 0;
                  MultiplexerAction_DISCARD = 1;
               };
               MultiplexerAction multiplexer_action = 17 [json_name = "multiplexer-action"];
               uint32 timeout_packets_number = 18 [json_name = "timeout-packets-number"];
               enum LinkEvent {
                  LinkEvent_DISABLE = 0;
                  LinkEvent_ENABLE = 1;
               };
               LinkEvent link_event = 19 [json_name = "link-event"];
               enum AcceptLoopbackRequest {
                  AcceptLoopbackRequest_DISABLE = 0;
                  AcceptLoopbackRequest_ENABLE = 1;
               };
               AcceptLoopbackRequest accept_loopback_request = 20 [json_name = "accept-loopback-request"];
               enum SelfLoopdetect {
                  SelfLoopdetect_DISABLE = 0;
                  SelfLoopdetect_ENABLE = 1;
               };
               SelfLoopdetect self_loopdetect = 21 [json_name = "self-loopdetect"];
               enum SelfLoopBlock {
                  SelfLoopBlock_DISABLE = 0;
                  SelfLoopBlock_ENABLE = 1;
               };
               SelfLoopBlock self_loop_block = 22 [json_name = "self-loop-block"];
               enum ExtendedInfoTransmitEnable {
                  ExtendedInfoTransmitEnable_DISABLE = 0;
                  ExtendedInfoTransmitEnable_ENABLE = 1;
               };
               ExtendedInfoTransmitEnable extended_info_transmit_enable = 23 [json_name = "extended-info-transmit-enable"];
               enum ExtendedInfoTransmit {
                  ExtendedInfoTransmit_RECEIVE = 0;
                  ExtendedInfoTransmit_SEND = 1;
                  ExtendedInfoTransmit_SENDX_ANDX_RECEIVE = 2;
               };
               ExtendedInfoTransmit extended_info_transmit = 24 [json_name = "extended-info-transmit"];
               enum LoopbackState {
                  LoopbackState_NONE = 0;
                  LoopbackState_LOOPBACKX_BEX_CONTROLLED = 1;
                  LoopbackState_LOOPBACKX_CONTROL = 2;
               };
               LoopbackState loopback_state = 25 [json_name = "loopback-state"];
               enum DiscoveryState {
                  DiscoveryState_FAULT = 0;
                  DiscoveryState_ACTIVEX_SENDX_LOCAL = 1;
                  DiscoveryState_PASSIVEX_WAIT = 2;
                  DiscoveryState_SENDX_LOCALX_REMOTE = 3;
                  DiscoveryState_SENDX_LOCALX_REMOTEX_OK = 4;
                  DiscoveryState_SENDX_ANY = 5;
               };
               DiscoveryState discovery_state = 26 [json_name = "discovery-state"];
            }
            Session session = 1 [json_name = "session"];
            message RemoteSession {
               string mac = 1 [json_name = "mac"];
               enum State {
                  State_DISABLE = 0;
                  State_ENABLE = 1;
               };
               State state = 2 [json_name = "state"];
               enum Mode {
                  Mode_PASSIVE = 0;
                  Mode_ACTIVE = 1;
               };
               Mode mode = 3 [json_name = "mode"];
               uint32 packet_max_size = 4 [json_name = "packet-max-size"];
               enum IgnoreLoopback {
                  IgnoreLoopback_DISABLE = 0;
                  IgnoreLoopback_ENABLE = 1;
               };
               IgnoreLoopback ignore_loopback = 5 [json_name = "ignore-loopback"];
               enum ParserAction {
                  ParserAction_FORWARD = 0;
                  ParserAction_LOOPBACK = 1;
                  ParserAction_DISCARD = 2;
                  ParserAction_RESERVE = 3;
               };
               ParserAction parser_action = 6 [json_name = "parser-action"];
               enum MultiplexerAction {
                  MultiplexerAction_FORWARD = 0;
                  MultiplexerAction_DISCARD = 1;
               };
               MultiplexerAction multiplexer_action = 7 [json_name = "multiplexer-action"];
               enum SessionState {
                  SessionState_DISABLE = 0;
                  SessionState_DISCOVERY = 1;
                  SessionState_DETECT = 2;
               };
               SessionState session_state = 8 [json_name = "session-state"];
               enum UnidirectionalOperationCapability {
                  UnidirectionalOperationCapability_DISABLE = 0;
                  UnidirectionalOperationCapability_ENABLE = 1;
               };
               UnidirectionalOperationCapability unidirectional_operation_capability = 9 [json_name = "unidirectional-operation-capability"];
               enum LinkEventCapability {
                  LinkEventCapability_DISABLE = 0;
                  LinkEventCapability_ENABLE = 1;
               };
               LinkEventCapability link_event_capability = 10 [json_name = "link-event-capability"];
            }
            RemoteSession remote_session = 2 [json_name = "remote-session"];
            message TestResult {
               uint32 send_packet_number = 1 [json_name = "send-packet-number"];
               uint32 receive_packet_number = 2 [json_name = "receive-packet-number"];
               uint32 drop_packet_number = 3 [json_name = "drop-packet-number"];
               uint32 send_packet_total = 4 [json_name = "send-packet-total"];
               uint32 receive_packet_total = 5 [json_name = "receive-packet-total"];
               uint32 drop_packet_total = 6 [json_name = "drop-packet-total"];
               string start_time = 7 [json_name = "start-time"];
               string stop_time = 8 [json_name = "stop-time"];
               enum Status {
                  Status_WORKING = 0;
                  Status_FINISHED = 1;
               };
               Status status = 9 [json_name = "status"];
            }
            TestResult test_result = 3 [json_name = "test-result"];
            message VariableResult {
               enum Status {
                  Status_TESTING = 0;
                  Status_FINISHED = 1;
                  Status_STOPPED = 2;
               };
               Status status = 1 [json_name = "status"];
               enum VariableErrorType {
                  VariableErrorType_OK = 0;
                  VariableErrorType_TIMEOUT = 1;
               };
               VariableErrorType variable_error_type = 2 [json_name = "variable-error-type"];
               message DetailDatas {
                  message DetailData {
                     enum Branch {
                        INVALID_ENUM_VALUE_Branch = 0;
                        Branch_MANAGEDX_OBJX_CLASS = 3;
                        Branch_ATTRIBUTE = 7;
                     };
                     Branch branch = 1 [json_name = "branch"];
                     enum Leaf {
                        INVALID_ENUM_VALUE_Leaf = 0;
                        Leaf_OAMX_OBJX_CLASS = 20;
                        Leaf_AOAMX_ID = 236;
                        Leaf_AOAMX_ADMINX_STATE = 237;
                        Leaf_AOAMX_MODE = 238;
                     };
                     Leaf leaf = 2 [json_name = "leaf"];
                     uint32 width = 3 [json_name = "width"];
                     string value = 4 [json_name = "value"];
                  }
                  repeated DetailData detail_data = 1 [json_name = "detail-data"];
               }
               DetailDatas detail_datas = 3 [json_name = "detail-datas"];
            }
            VariableResult variable_result = 4 [json_name = "variable-result"];
         }
         Efm efm = 83 [json_name = "efm"];
         message Evpn {
            string name = 1 [json_name = "name"];
            string pbb_source_mac = 2 [json_name = "pbb-source-mac"];
            string esi = 3 [json_name = "esi"];
            string esi_name = 4 [json_name = "esi-name"];
            uint32 es_recovery_timer = 5 [json_name = "es-recovery-timer"];
            string track_bfd_name = 6 [json_name = "track-bfd-name"];
            bool e_tree_leaf = 7 [json_name = "e-tree-leaf"];
            message ProtocolActions {
               message ProtocolAction {
                  enum ProtocolType {
                     INVALID_ENUM_VALUE_ProtocolType = 0;
                     ProtocolType_LACP = 1;
                     ProtocolType_LLDP = 2;
                     ProtocolType_BPDU = 4;
                     ProtocolType_CDP = 5;
                     ProtocolType_UDLD = 6;
                  };
                  ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                  enum Action {
                     INVALID_ENUM_VALUE_Action = 0;
                     Action_FORWARDING = 1;
                     Action_DISCARD = 2;
                     Action_TRANSPORT = 3;
                     Action_TRANSPORTX_TAGGED = 4;
                  };
                  Action action = 2 [json_name = "action"];
                  enum Mode {
                     Mode_NORMAL = 0;
                     Mode_UNTAG = 1;
                     Mode_UNTAGX_VLANX_CHECK = 2;
                  };
                  Mode mode = 3 [json_name = "mode"];
               }
               repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
            }
            ProtocolActions protocol_actions = 8 [json_name = "protocol-actions"];
            enum State {
               State_DOWN = 0;
               State_UP = 1;
            };
            State state = 9 [json_name = "state"];
            enum VcState {
               VcState_DOWN = 0;
               VcState_UP = 1;
            };
            VcState vc_state = 10 [json_name = "vc-state"];
            uint32 ring_id = 11 [json_name = "ring-id"];
            bool ignore_dynamic_esi = 12 [json_name = "ignore-dynamic-esi"];
         }
         Evpn evpn = 84 [json_name = "evpn"];
         message Fim {
            enum StatisticEnable {
               StatisticEnable_DISABLE = 0;
               StatisticEnable_ENABLE = 1;
            };
            StatisticEnable statistic_enable = 1 [json_name = "statistic-enable"];
            enum StatisticMode {
               StatisticMode_MAC = 0;
               StatisticMode_FORWARD = 1;
            };
            StatisticMode statistic_mode = 2 [json_name = "statistic-mode"];
            enum MacStatisticEnable {
               MacStatisticEnable_DISABLE = 0;
               MacStatisticEnable_ENABLE = 1;
            };
            MacStatisticEnable mac_statistic_enable = 3 [json_name = "mac-statistic-enable"];
         }
         Fim fim = 85 [json_name = "fim"];
         message FimIfmMru {
            uint32 mru = 1 [json_name = "mru"];
            enum MruStatisticEnable {
               MruStatisticEnable_DISABLE = 0;
               MruStatisticEnable_ENABLE = 1;
            };
            MruStatisticEnable mru_statistic_enable = 2 [json_name = "mru-statistic-enable"];
         }
         FimIfmMru fim_ifm_mru = 86 [json_name = "fim-ifm-mru"];
         message FimTcpMss {
            uint32 tcp_mss = 1 [json_name = "tcp-mss"];
         }
         FimTcpMss fim_tcp_mss = 87 [json_name = "fim-tcp-mss"];
         message FimIfmBdifint {
            bool vbdif_loopback_enable = 1 [json_name = "vbdif-loopback-enable"];
         }
         FimIfmBdifint fim_ifm_bdifint = 88 [json_name = "fim-ifm-bdifint"];
         message FimIfmVeint {
            enum VeForwardMode {
               VeForwardMode_LOOPBACK = 0;
               VeForwardMode_THROUGH = 1;
               VeForwardMode_HALFX_THROUGH = 3;
            };
            VeForwardMode ve_forward_mode = 1 [json_name = "ve-forward-mode"];
            string ve_slot_id = 2 [json_name = "ve-slot-id"];
         }
         FimIfmVeint fim_ifm_veint = 89 [json_name = "fim-ifm-veint"];
         message VeGroup {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_L2VE = 1;
               Type_L3VE = 2;
               Type_TERMINATEX_VE = 7;
            };
            Type type = 1 [json_name = "type"];
            uint32 id = 2 [json_name = "id"];
         }
         VeGroup ve_group = 90 [json_name = "ve-group"];
         message MruDiscardStatistic {
            uint64 packet = 1 [json_name = "packet"];
            uint64 byte = 2 [json_name = "byte"];
         }
         MruDiscardStatistic mru_discard_statistic = 91 [json_name = "mru-discard-statistic"];
         message MacmtuDiscardStat {
            uint64 mtu_ipv4 = 1 [json_name = "mtu-ipv4"];
            uint64 mtu_ipv6 = 2 [json_name = "mtu-ipv6"];
            uint64 mac_ipv4 = 3 [json_name = "mac-ipv4"];
            uint64 mac_ipv6 = 4 [json_name = "mac-ipv6"];
         }
         MacmtuDiscardStat macmtu_discard_stat = 92 [json_name = "macmtu-discard-stat"];
         message FlowRecognition {
            message FlowEnables {
               message FlowEnable {
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated FlowEnable flow_enable = 1 [json_name = "flow-enable"];
            }
            FlowEnables flow_enables = 1 [json_name = "flow-enables"];
         }
         FlowRecognition flow_recognition = 93 [json_name = "flow-recognition"];
         message FlowspecForward {
            message Refluence {
            }
            Refluence refluence = 1 [json_name = "refluence"];
            message TunnelPop {
            }
            TunnelPop tunnel_pop = 2 [json_name = "tunnel-pop"];
            message Disables {
               message Disable {
                  enum FlowType {
                     FlowType_ALL = 0;
                     FlowType_IPV4 = 1;
                     FlowType_IPV6 = 2;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  bool sub_port_exclude = 2 [json_name = "sub-port-exclude"];
               }
               repeated Disable disable = 1 [json_name = "disable"];
            }
            Disables disables = 3 [json_name = "disables"];
         }
         FlowspecForward flowspec_forward = 94 [json_name = "flowspec-forward"];
         message If8021PPriority {
            uint32 value = 1 [json_name = "value"];
         }
         If8021PPriority if_8021p_priority = 95 [json_name = "if-8021p-priority"];
         message ManagementPlaneDefendIf {
            uint32 policy_id = 1 [json_name = "policy-id"];
         }
         ManagementPlaneDefendIf management_plane_defend_if = 96 [json_name = "management-plane-defend-if"];
         message Bundle {
            uint32 up_member_num = 1 [json_name = "up-member-num"];
            message Members {
               message Member {
                  string name = 1 [json_name = "name"];
                  enum Status {
                     Status_DOWN = 0;
                     Status_UP = 1;
                  };
                  Status status = 2 [json_name = "status"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 2 [json_name = "members"];
         }
         Bundle bundle = 97 [json_name = "bundle"];
         message CposTrunk {
            enum ChannelMode {
               ChannelMode_VC12 = 0;
               ChannelMode_VC4 = 1;
            };
            ChannelMode channel_mode = 1 [json_name = "channel-mode"];
            uint32 up_member_num = 2 [json_name = "up-member-num"];
            message Members {
               message Member {
                  string name = 1 [json_name = "name"];
                  enum PortStatus {
                     PortStatus_DOWN = 0;
                     PortStatus_UP = 1;
                  };
                  PortStatus port_status = 2 [json_name = "port-status"];
                  enum ActiveStatus {
                     ActiveStatus_INVALID = 0;
                     ActiveStatus_ACTIVE = 1;
                     ActiveStatus_INACTIVE = 2;
                  };
                  ActiveStatus active_status = 3 [json_name = "active-status"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 3 [json_name = "members"];
            message E1T1S {
               message E1T1 {
                  uint32 number7 = 1 [json_name = "number"];
                  enum WorkMode {
                     WorkMode_FRAMED = 0;
                     WorkMode_UNFRAMED = 1;
                  };
                  WorkMode work_mode = 2 [json_name = "work-mode"];
                  message ChannelSets {
                     message ChannelSet {
                        uint32 number9 = 1 [json_name = "number"];
                        string timeslot_list = 2 [json_name = "timeslot-list"];
                     }
                     repeated ChannelSet channel_set = 1 [json_name = "channel-set"];
                  }
                  ChannelSets channel_sets = 3 [json_name = "channel-sets"];
               }
               repeated E1T1 e1t1 = 1 [json_name = "e1t1"];
            }
            E1T1S e1t1s = 4 [json_name = "e1t1s"];
         }
         CposTrunk cpos_trunk = 98 [json_name = "cpos-trunk"];
         message FrEncapsulation {
            enum Encapsulation {
               INVALID_ENUM_VALUE_Encapsulation = 0;
               Encapsulation_IETF = 19;
               Encapsulation_NONSTANDARD = 20;
            };
            Encapsulation encapsulation = 1 [json_name = "encapsulation"];
         }
         FrEncapsulation fr_encapsulation = 99 [json_name = "fr-encapsulation"];
         message PosTrunk {
            uint32 up_member_num = 1 [json_name = "up-member-num"];
            message Members {
               message Member {
                  string name = 1 [json_name = "name"];
                  enum PortStatus {
                     PortStatus_DOWN = 0;
                     PortStatus_UP = 1;
                  };
                  PortStatus port_status = 2 [json_name = "port-status"];
                  enum ActiveStatus {
                     ActiveStatus_INVALID = 0;
                     ActiveStatus_ACTIVE = 1;
                     ActiveStatus_INACTIVE = 2;
                  };
                  ActiveStatus active_status = 3 [json_name = "active-status"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 2 [json_name = "members"];
         }
         PosTrunk pos_trunk = 100 [json_name = "pos-trunk"];
         message IgmpSnooping {
            string learning_disable_vlans = 1 [json_name = "learning-disable-vlans"];
            string static_router_port_vlans = 2 [json_name = "static-router-port-vlans"];
            uint32 limit_max_entry = 3 [json_name = "limit-max-entry"];
            string except_acl = 4 [json_name = "except-acl"];
            message NumberLimits {
               message NumberLimit {
                  uint32 limit_max_entry = 1 [json_name = "limit-max-entry"];
                  uint32 vlan_id_begin = 2 [json_name = "vlan-id-begin"];
                  uint32 vlan_id_end = 3 [json_name = "vlan-id-end"];
                  string except_acl = 4 [json_name = "except-acl"];
               }
               repeated NumberLimit number_limit = 1 [json_name = "number-limit"];
            }
            NumberLimits number_limits = 5 [json_name = "number-limits"];
            message PortFastControl {
            }
            PortFastControl port_fast_control = 6 [json_name = "port-fast-control"];
            message StaticGroups {
               message StaticGroup {
                  string group_address = 1 [json_name = "group-address"];
                  string source_address = 2 [json_name = "source-address"];
                  string vlan_groups = 3 [json_name = "vlan-groups"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 7 [json_name = "static-groups"];
            message GroupPolicys {
               message GroupPolicy {
                  string acl = 1 [json_name = "acl"];
                  uint32 version = 2 [json_name = "version"];
                  string vlan_groups = 3 [json_name = "vlan-groups"];
               }
               repeated GroupPolicy group_policy = 1 [json_name = "group-policy"];
            }
            GroupPolicys group_policys = 8 [json_name = "group-policys"];
            message ProxyUplinkPorts {
               message ProxyUplinkPort {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
               }
               repeated ProxyUplinkPort proxy_uplink_port = 1 [json_name = "proxy-uplink-port"];
            }
            ProxyUplinkPorts proxy_uplink_ports = 9 [json_name = "proxy-uplink-ports"];
            message LimitStatisticss {
               message LimitStatistics {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
                  uint32 current_entry_count = 2 [json_name = "current-entry-count"];
               }
               repeated LimitStatistics limit_statistics = 1 [json_name = "limit-statistics"];
            }
            LimitStatisticss limit_statisticss = 10 [json_name = "limit-statisticss"];
         }
         IgmpSnooping igmp_snooping = 101 [json_name = "igmp-snooping"];
         message HwmcIfEnable {
            bool status = 1 [json_name = "status"];
         }
         HwmcIfEnable hwmc_if_enable = 102 [json_name = "hwmc-if-enable"];
         message ProtocolActions {
            message ProtocolAction {
               enum ProtocolType {
                  INVALID_ENUM_VALUE_ProtocolType = 0;
                  ProtocolType_CX_STP = 2;
                  ProtocolType_SX_STP = 3;
                  ProtocolType_ELMI = 4;
                  ProtocolType_LACP = 5;
                  ProtocolType_LAMP = 6;
                  ProtocolType_MRP = 7;
                  ProtocolType_EAPOL = 8;
                  ProtocolType_ESMC = 9;
                  ProtocolType_LLDP = 10;
                  ProtocolType_BPDU = 13;
                  ProtocolType_LINKX_OAM = 14;
                  ProtocolType_PTP = 15;
               };
               ProtocolType protocol_type = 1 [json_name = "protocol-type"];
               enum Action {
                  Action_TRANSPORT = 0;
                  Action_FORWARDING = 1;
                  Action_DISCARD = 2;
               };
               Action action = 2 [json_name = "action"];
            }
            repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
         }
         ProtocolActions protocol_actions = 103 [json_name = "protocol-actions"];
         message VllPwLoopCheck {
            uint32 time = 1 [json_name = "time"];
         }
         VllPwLoopCheck vll_pw_loop_check = 104 [json_name = "vll-pw-loop-check"];
         message EncapsulationVlan {
            bool vlan_pass = 1 [json_name = "vlan-pass"];
         }
         EncapsulationVlan encapsulation_vlan = 105 [json_name = "encapsulation-vlan"];
         message Lldp {
            message Session {
               enum AdminStatus {
                  INVALID_ENUM_VALUE_AdminStatus = 0;
                  AdminStatus_TXX_ONLY = 1;
                  AdminStatus_RXX_ONLY = 2;
                  AdminStatus_TXX_RX = 3;
                  AdminStatus_DISABLED = 4;
               };
               AdminStatus admin_status = 1 [json_name = "admin-status"];
               message TlvEnable {
                  bool management_address = 1 [json_name = "management-address"];
                  bool port_description = 2 [json_name = "port-description"];
                  bool system_capability = 3 [json_name = "system-capability"];
                  bool system_description = 4 [json_name = "system-description"];
                  bool system_name = 5 [json_name = "system-name"];
                  bool port_vlan_id = 6 [json_name = "port-vlan-id"];
                  bool protocol_vlan_id_enable = 7 [json_name = "protocol-vlan-id-enable"];
                  int32 protocol_vlan_id = 8 [json_name = "protocol-vlan-id"];
                  bool vlan_name_enable = 9 [json_name = "vlan-name-enable"];
                  int32 vlan_name_id = 10 [json_name = "vlan-name-id"];
                  bool protocol_identity = 11 [json_name = "protocol-identity"];
                  bool mac_physic = 12 [json_name = "mac-physic"];
                  bool link_aggregation = 13 [json_name = "link-aggregation"];
                  bool max_frame_size = 14 [json_name = "max-frame-size"];
                  bool ddp = 15 [json_name = "ddp"];
                  bool identity = 16 [json_name = "identity"];
                  message PowerTlv {
                     bool power = 1 [json_name = "power"];
                     enum Mode {
                        Mode_FIRSTX_802X_1ABX_THENX_AUTO = 0;
                        Mode_X_802X_1AB = 1;
                        Mode_X_802X_3AT = 2;
                        Mode_X_802X_3BTX_DRAFT = 3;
                        Mode_X_802X_3BTX_2018STANDARD = 4;
                     };
                     Mode mode = 2 [json_name = "mode"];
                  }
                  PowerTlv power_tlv = 17 [json_name = "power-tlv"];
                  message MedTlv {
                     bool capability = 1 [json_name = "capability"];
                     bool network_policy = 2 [json_name = "network-policy"];
                     message NetworkPolicyAttribute_Untag {
                        bool untagged = 1 [json_name = "untagged"];
                     }
                     message NetworkPolicyAttribute_VoiceVlan {
                        uint32 vlan_id = 1 [json_name = "vlan-id"];
                        uint32 cos = 2 [json_name = "cos"];
                        uint32 dscp = 3 [json_name = "dscp"];
                     }
                     message NetworkPolicyAttribute_PriorityTag {
                        bool priority_tagged = 1 [json_name = "priority-tagged"];
                        uint32 priority_tag_cos = 2 [json_name = "priority-tag-cos"];
                        uint32 priority_tag_dscp = 3 [json_name = "priority-tag-dscp"];
                     }
                     oneof NetworkPolicyAttribute {
                        NetworkPolicyAttribute_Untag network_policy_attribute_untag = 3 [json_name = "untag"];
                        NetworkPolicyAttribute_VoiceVlan network_policy_attribute_voice_vlan = 4 [json_name = "voice-vlan"];
                        NetworkPolicyAttribute_PriorityTag network_policy_attribute_priority_tag = 6 [json_name = "priority-tag"];
                     }
                     bool power_over_ethernet = 5 [json_name = "power-over-ethernet"];
                  }
                  MedTlv med_tlv = 18 [json_name = "med-tlv"];
               }
               TlvEnable tlv_enable = 2 [json_name = "tlv-enable"];
               message Neighbors {
                  message Neighbor {
                     uint32 index = 1 [json_name = "index"];
                     enum ChassisIdSubType {
                        ChassisIdSubType_OTHER = 0;
                        ChassisIdSubType_CHASSISX_COMPONENT = 1;
                        ChassisIdSubType_INTERFACEX_ALIAS = 2;
                        ChassisIdSubType_PORTX_COMPONENT = 3;
                        ChassisIdSubType_MACX_ADDRESS = 4;
                        ChassisIdSubType_NETWORKX_ADDRESS = 5;
                        ChassisIdSubType_INTERFACEX_NAME = 6;
                        ChassisIdSubType_LOCAL = 7;
                     };
                     ChassisIdSubType chassis_id_sub_type = 2 [json_name = "chassis-id-sub-type"];
                     string chassis_id = 3 [json_name = "chassis-id"];
                     enum PortIdSubType {
                        PortIdSubType_OTHER = 0;
                        PortIdSubType_INTERFACEX_ALIAS = 1;
                        PortIdSubType_PORTX_COMPONENT = 2;
                        PortIdSubType_MACX_ADDRESS = 3;
                        PortIdSubType_NETWORKX_ADDRESS = 4;
                        PortIdSubType_INTERFACEX_NAME = 5;
                        PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                        PortIdSubType_LOCAL = 7;
                     };
                     PortIdSubType port_id_sub_type = 4 [json_name = "port-id-sub-type"];
                     string port_id = 5 [json_name = "port-id"];
                     string port_description = 6 [json_name = "port-description"];
                     string system_name = 7 [json_name = "system-name"];
                     string system_description = 8 [json_name = "system-description"];
                     string system_capabilities_enabled = 9 [json_name = "system-capabilities-enabled"];
                     string system_capabilities_supported = 10 [json_name = "system-capabilities-supported"];
                     int32 expired_time = 11 [json_name = "expired-time"];
                     int32 port_vlan_id = 12 [json_name = "port-vlan-id"];
                     string protocol_identity = 13 [json_name = "protocol-identity"];
                     enum AutoNegotiationSupported {
                        AutoNegotiationSupported_NO = 0;
                        AutoNegotiationSupported_YES = 1;
                     };
                     AutoNegotiationSupported auto_negotiation_supported = 14 [json_name = "auto-negotiation-supported"];
                     enum AutoNegotiationEnabled {
                        AutoNegotiationEnabled_NO = 0;
                        AutoNegotiationEnabled_YES = 1;
                     };
                     AutoNegotiationEnabled auto_negotiation_enabled = 15 [json_name = "auto-negotiation-enabled"];
                     string auto_negotiation_capability = 16 [json_name = "auto-negotiation-capability"];
                     enum OperMauType {
                        OperMauType_UNKNOWN = 0;
                        OperMauType_DOT3X_MAUX_TYPEX_AUI = 1;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5 = 2;
                        OperMauType_DOT3X_MAUX_TYPEX_FOIRL = 3;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2 = 4;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T = 5;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP = 6;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB = 7;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL = 8;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36 = 9;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD = 10;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD = 11;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD = 12;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD = 13;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4 = 14;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD = 15;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD = 16;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD = 17;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD = 18;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD = 19;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD = 20;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD = 21;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD = 22;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD = 23;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD = 24;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD = 25;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD = 26;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD = 27;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD = 28;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD = 29;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD = 30;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X = 31;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4 = 32;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R = 33;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER = 34;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR = 35;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR = 36;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W = 37;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW = 38;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW = 39;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW = 40;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4 = 70;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4 = 71;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4 = 72;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR = 73;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4 = 74;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 = 75;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 = 76;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4 = 77;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4 = 78;
                     };
                     OperMauType oper_mau_type = 17 [json_name = "oper-mau-type"];
                     enum LinkAggregationSupported {
                        LinkAggregationSupported_NO = 0;
                        LinkAggregationSupported_YES = 1;
                     };
                     LinkAggregationSupported link_aggregation_supported = 18 [json_name = "link-aggregation-supported"];
                     enum LinkAggregationEnabled {
                        LinkAggregationEnabled_NO = 0;
                        LinkAggregationEnabled_YES = 1;
                     };
                     LinkAggregationEnabled link_aggregation_enabled = 19 [json_name = "link-aggregation-enabled"];
                     int32 aggregation_port_id = 20 [json_name = "aggregation-port-id"];
                     int32 maximum_frame_size = 21 [json_name = "maximum-frame-size"];
                     string discovered_time = 22 [json_name = "discovered-time"];
                     message ManagementAddresss {
                        message ManagementAddress {
                           enum Type {
                              Type_OTHER = 0;
                              Type_IPV4 = 1;
                              Type_IPV6 = 2;
                              Type_NSAP = 3;
                              Type_HDLC = 4;
                              Type_BBN1822 = 5;
                              Type_MAC = 6;
                              Type_E163 = 7;
                              Type_E164 = 8;
                              Type_F69 = 9;
                              Type_X121 = 10;
                              Type_IPX = 11;
                              Type_APPLEX_TALK = 12;
                              Type_DECNETX_IV = 13;
                              Type_BANYANX_VINES = 14;
                              Type_E164X_WITHX_NSAP = 15;
                              Type_DNS = 16;
                              Type_DISTINGUISHEDX_NAME = 17;
                              Type_ASX_NUMBER = 18;
                              Type_XTPX_OVERX_IPV4 = 19;
                              Type_XTPX_OVERX_IPV6 = 20;
                              Type_XTPX_NATIVEX_MODEX_XTP = 21;
                              Type_FIBREX_CHANNELX_WWPN = 22;
                              Type_FIBREX_CHANNELX_WWN = 23;
                              Type_GWID = 24;
                           };
                           Type type = 1 [json_name = "type"];
                           string value = 2 [json_name = "value"];
                           int32 length = 3 [json_name = "length"];
                           enum IfSubType {
                              IfSubType_OTHER = 0;
                              IfSubType_UNKNOWN = 1;
                              IfSubType_IFX_INDEX = 2;
                              IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                           };
                           IfSubType if_sub_type = 4 [json_name = "if-sub-type"];
                           int32 if_id = 5 [json_name = "if-id"];
                           string oid = 6 [json_name = "oid"];
                        }
                        repeated ManagementAddress management_address = 1 [json_name = "management-address"];
                     }
                     ManagementAddresss management_addresss = 23 [json_name = "management-addresss"];
                     message ProtocolVlans {
                        message ProtocolVlan {
                           int32 id = 1 [json_name = "id"];
                           enum Supported {
                              Supported_NO = 0;
                              Supported_YES = 1;
                           };
                           Supported supported = 2 [json_name = "supported"];
                           enum Enabled {
                              Enabled_NO = 0;
                              Enabled_YES = 1;
                           };
                           Enabled enabled = 3 [json_name = "enabled"];
                        }
                        repeated ProtocolVlan protocol_vlan = 1 [json_name = "protocol-vlan"];
                     }
                     ProtocolVlans protocol_vlans = 24 [json_name = "protocol-vlans"];
                     message VlanNames {
                        message VlanName {
                           int32 id = 1 [json_name = "id"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated VlanName vlan_name = 1 [json_name = "vlan-name"];
                     }
                     VlanNames vlan_names = 25 [json_name = "vlan-names"];
                     message UnknownTlvs {
                        message UnknownTlv {
                           int32 type = 1 [json_name = "type"];
                           string info = 2 [json_name = "info"];
                        }
                        repeated UnknownTlv unknown_tlv = 1 [json_name = "unknown-tlv"];
                     }
                     UnknownTlvs unknown_tlvs = 26 [json_name = "unknown-tlvs"];
                     message UnknownOrganizationallyDefinedTlvs {
                        message UnknownOrganizationallyDefinedTlv {
                           string oui = 1 [json_name = "oui"];
                           int32 sub_type = 2 [json_name = "sub-type"];
                           int32 index = 3 [json_name = "index"];
                           string info = 4 [json_name = "info"];
                        }
                        repeated UnknownOrganizationallyDefinedTlv unknown_organizationally_defined_tlv = 1 [json_name = "unknown-organizationally-defined-tlv"];
                     }
                     UnknownOrganizationallyDefinedTlvs unknown_organizationally_defined_tlvs = 27 [json_name = "unknown-organizationally-defined-tlvs"];
                     message DdpTlv {
                        string serial_number = 1 [json_name = "serial-number"];
                        uint32 if_index = 2 [json_name = "if-index"];
                        string ipv4_address = 3 [json_name = "ipv4-address"];
                        string mac_address = 4 [json_name = "mac-address"];
                     }
                     DdpTlv ddp_tlv = 28 [json_name = "ddp-tlv"];
                     message IdentityTlv {
                        string identity = 1 [json_name = "identity"];
                     }
                     IdentityTlv identity_tlv = 29 [json_name = "identity-tlv"];
                     message Power {
                        enum PortClass {
                           PortClass_PD = 0;
                           PortClass_PSE = 1;
                        };
                        PortClass port_class = 1 [json_name = "port-class"];
                        enum PseSupport {
                           PseSupport_NO = 0;
                           PseSupport_YES = 1;
                        };
                        PseSupport pse_support = 2 [json_name = "pse-support"];
                        enum PseState {
                           PseState_NO = 0;
                           PseState_YES = 1;
                        };
                        PseState pse_state = 3 [json_name = "pse-state"];
                        enum PsePairsControlAbility {
                           PsePairsControlAbility_NOTX_CONTROLLED = 0;
                           PsePairsControlAbility_CONTROLLED = 1;
                        };
                        PsePairsControlAbility pse_pairs_control_ability = 4 [json_name = "pse-pairs-control-ability"];
                        enum PsePairs {
                           INVALID_ENUM_VALUE_PsePairs = 0;
                           PsePairs_SIGNAL = 1;
                           PsePairs_SPARE = 2;
                           PsePairs_UNKNOWN = 255;
                        };
                        PsePairs pse_pairs = 5 [json_name = "pse-pairs"];
                        enum Classification {
                           Classification_CLASS0 = 0;
                           Classification_CLASS1 = 1;
                           Classification_CLASS2 = 2;
                           Classification_CLASS3 = 3;
                           Classification_CLASS4 = 4;
                           Classification_CLASS4X_ANDX_ABOVE = 99;
                           Classification_UNKNOWN = 255;
                        };
                        Classification classification = 6 [json_name = "classification"];
                        enum Type {
                           Type_TYPEX_2X_PSE = 0;
                           Type_TYPEX_2X_PD = 1;
                           Type_TYPEX_1X_PSE = 2;
                           Type_TYPEX_1X_PD = 3;
                        };
                        Type type = 7 [json_name = "type"];
                        enum PdSource {
                           PdSource_UNKNOWN = 0;
                           PdSource_PSE = 1;
                           PdSource_RESERVED = 2;
                           PdSource_PSEX_ANDX_LOCAL = 3;
                        };
                        PdSource pd_source = 8 [json_name = "pd-source"];
                        enum PseSource {
                           PseSource_UNKNOWN = 0;
                           PseSource_PRIMARY = 1;
                           PseSource_BACKUP = 2;
                           PseSource_RESERVED = 3;
                        };
                        PseSource pse_source = 9 [json_name = "pse-source"];
                        enum Priority {
                           Priority_UNKNOWN = 0;
                           Priority_CRITICAL = 1;
                           Priority_HIGH = 2;
                           Priority_LOW = 3;
                           Priority_RESERVED = 4;
                        };
                        Priority priority = 10 [json_name = "priority"];
                        string pd_requested_value = 11 [json_name = "pd-requested-value"];
                        string pse_allocated_value = 12 [json_name = "pse-allocated-value"];
                        string pd_requested_mode_a_value = 13 [json_name = "pd-requested-mode-a-value"];
                        string pd_requested_mode_b_value = 14 [json_name = "pd-requested-mode-b-value"];
                        string pse_allocated_mode_a_value = 15 [json_name = "pse-allocated-mode-a-value"];
                        string pse_allocated_mode_b_value = 16 [json_name = "pse-allocated-mode-b-value"];
                        enum PsePoweringStatus {
                           PsePoweringStatus_RESERVED = 0;
                           PsePoweringStatus_X_2X_PAIR = 1;
                           PsePoweringStatus_X_4X_PAIRX_SINGLE = 2;
                           PsePoweringStatus_X_4X_PAIRX_DUAL = 3;
                        };
                        PsePoweringStatus pse_powering_status = 17 [json_name = "pse-powering-status"];
                        enum PdPoweredStatus {
                           PdPoweredStatus_RESERVED = 0;
                           PdPoweredStatus_SINGLE = 1;
                           PdPoweredStatus_X_2X_PAIRX_DUAL = 2;
                           PdPoweredStatus_X_4X_PAIRX_DUAL = 3;
                        };
                        PdPoweredStatus pd_powered_status = 18 [json_name = "pd-powered-status"];
                        enum Pairsx {
                           Pairsx_RESERVED = 0;
                           Pairsx_ALTERNATIVEX_A = 1;
                           Pairsx_ALTERNATIVEX_B = 2;
                           Pairsx_BOTHX_ALTERNATIVES = 3;
                        };
                        Pairsx pairsx = 19 [json_name = "pairsx"];
                        enum Class {
                           Class_CLASS0 = 0;
                           Class_CLASS1 = 1;
                           Class_CLASS2 = 2;
                           Class_CLASS3 = 3;
                           Class_CLASS4 = 4;
                           Class_CLASS5 = 5;
                           Class_CLASS6 = 6;
                           Class_CLASS7 = 7;
                           Class_CLASS8 = 8;
                           Class_RESERVED = 255;
                        };
                        Class class = 20 [json_name = "class"];
                        enum ClassExtModeA {
                           ClassExtModeA_RESERVED = 0;
                           ClassExtModeA_CLASS1 = 1;
                           ClassExtModeA_CLASS2 = 2;
                           ClassExtModeA_CLASS3 = 3;
                           ClassExtModeA_CLASS4 = 4;
                           ClassExtModeA_CLASS5 = 5;
                           ClassExtModeA_SINGLEX_PDX_ORX_2PAIRX_PSE = 7;
                        };
                        ClassExtModeA class_ext_mode_a = 21 [json_name = "class-ext-mode-a"];
                        enum ClassExtModeB {
                           ClassExtModeB_RESERVED = 0;
                           ClassExtModeB_CLASS1 = 1;
                           ClassExtModeB_CLASS2 = 2;
                           ClassExtModeB_CLASS3 = 3;
                           ClassExtModeB_CLASS4 = 4;
                           ClassExtModeB_CLASS5 = 5;
                           ClassExtModeB_SINGLEX_PDX_ORX_2PAIRX_PSE = 7;
                        };
                        ClassExtModeB class_ext_mode_b = 22 [json_name = "class-ext-mode-b"];
                        enum ClassExt {
                           ClassExt_RESERVED = 0;
                           ClassExt_CLASS1 = 1;
                           ClassExt_CLASS2 = 2;
                           ClassExt_CLASS3 = 3;
                           ClassExt_CLASS4 = 4;
                           ClassExt_CLASS5 = 5;
                           ClassExt_CLASS6 = 6;
                           ClassExt_CLASS7 = 7;
                           ClassExt_CLASS8 = 8;
                           ClassExt_DUALX_SIGNATUREX_PD = 15;
                        };
                        ClassExt class_ext = 23 [json_name = "class-ext"];
                        enum Typex {
                           Typex_RESERVED = 0;
                           Typex_TYPEX_1X_PSE = 2;
                           Typex_TYPEX_1X_PD = 3;
                           Typex_TYPEX_2X_PSE = 4;
                           Typex_TYPEX_2X_PD = 5;
                           Typex_TYPEX_3X_PSE = 6;
                           Typex_TYPEX_3X_SINGLEX_PD = 7;
                           Typex_TYPEX_4X_PSE = 8;
                           Typex_TYPEX_4X_SINGLEX_PD = 9;
                           Typex_TYPEX_3X_DUALX_PD = 13;
                           Typex_TYPEX_4X_DUALX_PD = 15;
                        };
                        Typex typex = 24 [json_name = "typex"];
                        enum TypeExt {
                           TypeExt_TYPEX_3X_PSE = 0;
                           TypeExt_TYPEX_4X_PSE = 1;
                           TypeExt_TYPEX_3X_SINGLEX_PD = 2;
                           TypeExt_TYPEX_3X_DUALX_PD = 3;
                           TypeExt_TYPEX_4X_SINGLEX_PD = 4;
                           TypeExt_TYPEX_4X_DUALX_PD = 5;
                           TypeExt_RESERVED = 7;
                        };
                        TypeExt type_ext = 25 [json_name = "type-ext"];
                        enum Pd4Pid {
                           Pd4Pid_NOTX_SUPPORT = 0;
                           Pd4Pid_SUPPORT = 1;
                        };
                        Pd4Pid pd_4pid = 26 [json_name = "pd-4pid"];
                        enum PdLoad {
                           PdLoad_SINGLEX_ORX_DUAL = 0;
                           PdLoad_DUAL = 1;
                        };
                        PdLoad pd_load = 27 [json_name = "pd-load"];
                        string pse_max_available = 28 [json_name = "pse-max-available"];
                        enum PseAutoclassSupport {
                           PseAutoclassSupport_NOTX_SUPPORT = 0;
                           PseAutoclassSupport_SUPPORT = 1;
                        };
                        PseAutoclassSupport pse_autoclass_support = 29 [json_name = "pse-autoclass-support"];
                        enum AutoclassCompleted {
                           AutoclassCompleted_IDLE = 0;
                           AutoclassCompleted_COMPLETED = 1;
                        };
                        AutoclassCompleted autoclass_completed = 30 [json_name = "autoclass-completed"];
                        enum AutoclassRequest {
                           AutoclassRequest_IDLE = 0;
                           AutoclassRequest_REQUESTED = 1;
                        };
                        AutoclassRequest autoclass_request = 31 [json_name = "autoclass-request"];
                        bool power_down = 32 [json_name = "power-down"];
                        uint32 power_down_time = 33 [json_name = "power-down-time"];
                     }
                     Power power = 30 [json_name = "power"];
                     message MedTlv {
                        message Capability {
                           enum Capabilities {
                              Capabilities_CAPABILITIES = 0;
                              Capabilities_NETWORKX_POLICY = 1;
                              Capabilities_LOCATION = 2;
                              Capabilities_EXTENDEDX_POWERX_VIAX_PSE = 3;
                              Capabilities_EXTENDEDX_POWERX_VIAX_PD = 4;
                              Capabilities_INVENTORY = 5;
                              Capabilities_RESERVED = 6;
                           };
                           repeated Capabilities capabilities = 1 [json_name = "capabilities"];
                           enum DeviceType {
                              DeviceType_TYPEX_NOTX_DEFINED = 0;
                              DeviceType_ENDPOINTX_CLASSX_1 = 1;
                              DeviceType_ENDPOINTX_CLASSX_2 = 2;
                              DeviceType_ENDPOINTX_CLASSX_3 = 3;
                              DeviceType_NETWORKX_CONNECTIVITY = 4;
                              DeviceType_RESERVED = 5;
                           };
                           DeviceType device_type = 2 [json_name = "device-type"];
                        }
                        Capability capability = 1 [json_name = "capability"];
                        message NetworkPolicys {
                           message NetworkPolicy {
                              enum Type {
                                 Type_RESERVED = 0;
                                 Type_VOICE = 1;
                                 Type_VOICEX_SIGNALING = 2;
                                 Type_GUESTX_VOICE = 3;
                                 Type_GUESTX_VOICEX_SIGNALING = 4;
                                 Type_SOFTPHONEX_VOICE = 5;
                                 Type_VIDEOX_CONFERENCING = 6;
                                 Type_STREAMINGX_VIDEO = 7;
                                 Type_VIDEOX_SIGNALING = 8;
                              };
                              Type type = 1 [json_name = "type"];
                              enum UnknownPolicy {
                                 UnknownPolicy_DEFINED = 0;
                                 UnknownPolicy_UNKNOWN = 1;
                              };
                              UnknownPolicy unknown_policy = 2 [json_name = "unknown-policy"];
                              bool vlan_tagged = 3 [json_name = "vlan-tagged"];
                              uint32 vlan_id = 4 [json_name = "vlan-id"];
                              uint32 cos = 5 [json_name = "cos"];
                              uint32 dscp = 6 [json_name = "dscp"];
                           }
                           repeated NetworkPolicy network_policy = 1 [json_name = "network-policy"];
                        }
                        NetworkPolicys network_policys = 2 [json_name = "network-policys"];
                        message ExtendedPower {
                           enum Type {
                              Type_PSE = 0;
                              Type_PD = 1;
                              Type_RESERVED = 2;
                           };
                           Type type = 1 [json_name = "type"];
                           enum PseSource {
                              PseSource_UNKNOWN = 0;
                              PseSource_PRIMARY = 1;
                              PseSource_BACKUP = 2;
                              PseSource_RESERVED = 3;
                           };
                           PseSource pse_source = 2 [json_name = "pse-source"];
                           enum PdSource {
                              PdSource_UNKNOWN = 0;
                              PdSource_PSE = 1;
                              PdSource_LOCAL = 2;
                              PdSource_PSEX_ANDX_LOCAL = 3;
                           };
                           PdSource pd_source = 3 [json_name = "pd-source"];
                           enum Priority {
                              Priority_UNKNOWN = 0;
                              Priority_CRITICAL = 1;
                              Priority_HIGH = 2;
                              Priority_LOW = 3;
                              Priority_RESERVED = 4;
                           };
                           Priority priority = 4 [json_name = "priority"];
                           string value = 5 [json_name = "value"];
                        }
                        ExtendedPower extended_power = 3 [json_name = "extended-power"];
                     }
                     MedTlv med_tlv = 31 [json_name = "med-tlv"];
                     message LegacyPowerCapability {
                        enum Capability {
                           Capability_AF = 0;
                           Capability_AT = 1;
                           Capability_BTX_60 = 2;
                           Capability_BTX_90 = 3;
                        };
                        repeated Capability capability = 1 [json_name = "capability"];
                        enum Mode {
                           Mode_AF = 0;
                           Mode_AT = 1;
                           Mode_BTX_60 = 2;
                           Mode_BTX_90 = 3;
                        };
                        Mode mode = 2 [json_name = "mode"];
                     }
                     LegacyPowerCapability legacy_power_capability = 32 [json_name = "legacy-power-capability"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 3 [json_name = "neighbors"];
               enum PortMode {
                  PortMode_NORMALX_MODE = 0;
                  PortMode_VLANX_MODE = 1;
               };
               PortMode port_mode = 4 [json_name = "port-mode"];
               message LocalInfo {
                  enum PortIdSubType {
                     PortIdSubType_OTHER = 0;
                     PortIdSubType_INTERFACEX_ALIAS = 1;
                     PortIdSubType_PORTX_COMPONENT = 2;
                     PortIdSubType_MACX_ADDRESS = 3;
                     PortIdSubType_NETWORKX_ADDRESS = 4;
                     PortIdSubType_INTERFACEX_NAME = 5;
                     PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                     PortIdSubType_LOCAL = 7;
                  };
                  PortIdSubType port_id_sub_type = 1 [json_name = "port-id-sub-type"];
                  string port_id = 2 [json_name = "port-id"];
                  string port_description = 3 [json_name = "port-description"];
                  int32 port_vlan_id = 4 [json_name = "port-vlan-id"];
                  int32 protocol_vlan_id = 5 [json_name = "protocol-vlan-id"];
                  enum ProtocolVlanSupported {
                     ProtocolVlanSupported_NO = 0;
                     ProtocolVlanSupported_YES = 1;
                  };
                  ProtocolVlanSupported protocol_vlan_supported = 6 [json_name = "protocol-vlan-supported"];
                  enum ProtocolVlanEnable {
                     ProtocolVlanEnable_NO = 0;
                     ProtocolVlanEnable_YES = 1;
                  };
                  ProtocolVlanEnable protocol_vlan_enable = 7 [json_name = "protocol-vlan-enable"];
                  int32 vlan_name_id = 8 [json_name = "vlan-name-id"];
                  string vlan_name = 9 [json_name = "vlan-name"];
                  string protocol_identity = 10 [json_name = "protocol-identity"];
                  enum AutoNegotiationSupported {
                     AutoNegotiationSupported_NO = 0;
                     AutoNegotiationSupported_YES = 1;
                  };
                  AutoNegotiationSupported auto_negotiation_supported = 11 [json_name = "auto-negotiation-supported"];
                  enum AutoNegotiationEnabled {
                     AutoNegotiationEnabled_NO = 0;
                     AutoNegotiationEnabled_YES = 1;
                  };
                  AutoNegotiationEnabled auto_negotiation_enabled = 12 [json_name = "auto-negotiation-enabled"];
                  string auto_negotiation_capability = 13 [json_name = "auto-negotiation-capability"];
                  enum OperMauType {
                     OperMauType_UNKNOWN = 0;
                     OperMauType_DOT3X_MAUX_TYPEX_AUI = 1;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5 = 2;
                     OperMauType_DOT3X_MAUX_TYPEX_FOIRL = 3;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2 = 4;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T = 5;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP = 6;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB = 7;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL = 8;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36 = 9;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD = 10;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD = 11;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD = 12;
                     OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD = 13;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4 = 14;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD = 15;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD = 16;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD = 17;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD = 18;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD = 19;
                     OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD = 20;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD = 21;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD = 22;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD = 23;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD = 24;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD = 25;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD = 26;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD = 27;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD = 28;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD = 29;
                     OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD = 30;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X = 31;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4 = 32;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R = 33;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER = 34;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR = 35;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR = 36;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W = 37;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW = 38;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW = 39;
                     OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW = 40;
                     OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4 = 70;
                     OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4 = 71;
                     OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4 = 72;
                     OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR = 73;
                     OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4 = 74;
                     OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 = 75;
                     OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 = 76;
                     OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4 = 77;
                     OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4 = 78;
                  };
                  OperMauType oper_mau_type = 14 [json_name = "oper-mau-type"];
                  enum LinkAggregationSupported {
                     LinkAggregationSupported_NO = 0;
                     LinkAggregationSupported_YES = 1;
                  };
                  LinkAggregationSupported link_aggregation_supported = 15 [json_name = "link-aggregation-supported"];
                  enum LinkAggregationEnabled {
                     LinkAggregationEnabled_NO = 0;
                     LinkAggregationEnabled_YES = 1;
                  };
                  LinkAggregationEnabled link_aggregation_enabled = 16 [json_name = "link-aggregation-enabled"];
                  int32 aggregation_port_id = 17 [json_name = "aggregation-port-id"];
                  int32 maximum_frame_size = 18 [json_name = "maximum-frame-size"];
                  message ManagementAddresss {
                     message ManagementAddress {
                        enum Type {
                           Type_OTHER = 0;
                           Type_IPV4 = 1;
                           Type_IPV6 = 2;
                           Type_NSAP = 3;
                           Type_HDLC = 4;
                           Type_BBN1822 = 5;
                           Type_MAC = 6;
                           Type_E163 = 7;
                           Type_E164 = 8;
                           Type_F69 = 9;
                           Type_X121 = 10;
                           Type_IPX = 11;
                           Type_APPLEX_TALK = 12;
                           Type_DECNETX_IV = 13;
                           Type_BANYANX_VINES = 14;
                           Type_E164X_WITHX_NSAP = 15;
                           Type_DNS = 16;
                           Type_DISTINGUISHEDX_NAME = 17;
                           Type_ASX_NUMBER = 18;
                           Type_XTPX_OVERX_IPV4 = 19;
                           Type_XTPX_OVERX_IPV6 = 20;
                           Type_XTPX_NATIVEX_MODEX_XTP = 21;
                           Type_FIBREX_CHANNELX_WWPN = 22;
                           Type_FIBREX_CHANNELX_WWN = 23;
                           Type_GWID = 24;
                        };
                        Type type = 1 [json_name = "type"];
                        string value = 2 [json_name = "value"];
                        int32 length = 3 [json_name = "length"];
                        enum IfSubType {
                           IfSubType_OTHER = 0;
                           IfSubType_UNKNOWN = 1;
                           IfSubType_IFX_INDEX = 2;
                           IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                        };
                        IfSubType if_sub_type = 4 [json_name = "if-sub-type"];
                        int32 if_id = 5 [json_name = "if-id"];
                        string oid = 6 [json_name = "oid"];
                     }
                     repeated ManagementAddress management_address = 1 [json_name = "management-address"];
                  }
                  ManagementAddresss management_addresss = 19 [json_name = "management-addresss"];
                  message IdentityTlv {
                     string identity = 1 [json_name = "identity"];
                  }
                  IdentityTlv identity_tlv = 20 [json_name = "identity-tlv"];
                  message Power {
                     enum PortClass {
                        PortClass_PD = 0;
                        PortClass_PSE = 1;
                     };
                     PortClass port_class = 1 [json_name = "port-class"];
                     enum PseSupport {
                        PseSupport_NO = 0;
                        PseSupport_YES = 1;
                     };
                     PseSupport pse_support = 2 [json_name = "pse-support"];
                     enum PseState {
                        PseState_NO = 0;
                        PseState_YES = 1;
                     };
                     PseState pse_state = 3 [json_name = "pse-state"];
                     enum PsePairsControlAbility {
                        PsePairsControlAbility_NOTX_CONTROLLED = 0;
                        PsePairsControlAbility_CONTROLLED = 1;
                     };
                     PsePairsControlAbility pse_pairs_control_ability = 4 [json_name = "pse-pairs-control-ability"];
                     enum PsePairs {
                        INVALID_ENUM_VALUE_PsePairs = 0;
                        PsePairs_SIGNAL = 1;
                        PsePairs_SPARE = 2;
                        PsePairs_UNKNOWN = 255;
                     };
                     PsePairs pse_pairs = 5 [json_name = "pse-pairs"];
                     enum Classification {
                        Classification_CLASS0 = 0;
                        Classification_CLASS1 = 1;
                        Classification_CLASS2 = 2;
                        Classification_CLASS3 = 3;
                        Classification_CLASS4 = 4;
                        Classification_CLASS5 = 5;
                        Classification_CLASS6 = 6;
                        Classification_CLASS7 = 7;
                        Classification_CLASS8 = 8;
                        Classification_UNKNOWN = 255;
                     };
                     Classification classification = 6 [json_name = "classification"];
                     enum Mode {
                        Mode_FIRSTX_802X_1ABX_THENX_AUTO = 0;
                        Mode_X_802X_1AB = 1;
                        Mode_X_802X_3AT = 2;
                        Mode_X_802X_3BTX_DRAFT = 3;
                        Mode_X_802X_3BTX_2018STANDARD = 4;
                     };
                     Mode mode = 7 [json_name = "mode"];
                  }
                  Power power = 21 [json_name = "power"];
                  message MedTlv {
                     message NetworkPolicys {
                        message NetworkPolicy {
                           enum Type {
                              Type_RESERVED = 0;
                              Type_VOICE = 1;
                              Type_VOICEX_SIGNALING = 2;
                              Type_GUESTX_VOICE = 3;
                              Type_GUESTX_VOICEX_SIGNALING = 4;
                              Type_SOFTPHONEX_VOICE = 5;
                              Type_VIDEOX_CONFERENCING = 6;
                              Type_STREAMINGX_VIDEO = 7;
                              Type_VIDEOX_SIGNALING = 8;
                           };
                           Type type = 1 [json_name = "type"];
                           enum UnknownPolicy {
                              UnknownPolicy_DEFINED = 0;
                              UnknownPolicy_UNKNOWN = 1;
                           };
                           UnknownPolicy unknown_policy = 2 [json_name = "unknown-policy"];
                           bool vlan_tagged = 3 [json_name = "vlan-tagged"];
                           uint32 vlan_id = 4 [json_name = "vlan-id"];
                           uint32 cos = 5 [json_name = "cos"];
                           uint32 dscp = 6 [json_name = "dscp"];
                        }
                        repeated NetworkPolicy network_policy = 1 [json_name = "network-policy"];
                     }
                     NetworkPolicys network_policys = 1 [json_name = "network-policys"];
                     message ExtendedPower {
                        enum Type {
                           Type_PSE = 0;
                           Type_PD = 1;
                           Type_RESERVED = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        enum PseSource {
                           PseSource_UNKNOWN = 0;
                           PseSource_PRIMARY = 1;
                           PseSource_BACKUP = 2;
                           PseSource_RESERVED = 3;
                        };
                        PseSource pse_source = 2 [json_name = "pse-source"];
                        enum PdSource {
                           PdSource_UNKNOWN = 0;
                           PdSource_PSE = 1;
                           PdSource_LOCAL = 2;
                           PdSource_PSEX_ANDX_LOCAL = 3;
                        };
                        PdSource pd_source = 3 [json_name = "pd-source"];
                        enum Priority {
                           Priority_UNKNOWN = 0;
                           Priority_CRITICAL = 1;
                           Priority_HIGH = 2;
                           Priority_LOW = 3;
                           Priority_RESERVED = 4;
                        };
                        Priority priority = 4 [json_name = "priority"];
                        string value = 5 [json_name = "value"];
                     }
                     ExtendedPower extended_power = 2 [json_name = "extended-power"];
                  }
                  MedTlv med_tlv = 22 [json_name = "med-tlv"];
               }
               LocalInfo local_info = 5 [json_name = "local-info"];
               enum MdnStatus {
                  INVALID_ENUM_VALUE_MdnStatus = 0;
                  MdnStatus_RXX_ONLY = 2;
                  MdnStatus_DISABLED = 4;
               };
               MdnStatus mdn_status = 6 [json_name = "mdn-status"];
               message Statistics {
                  uint32 total_neighbors = 1 [json_name = "total-neighbors"];
                  uint32 transmitted_frames = 2 [json_name = "transmitted-frames"];
                  uint32 received_frames = 3 [json_name = "received-frames"];
                  uint32 discarded_frames = 4 [json_name = "discarded-frames"];
                  uint32 error_frames = 5 [json_name = "error-frames"];
                  uint32 discarded_tlvs = 6 [json_name = "discarded-tlvs"];
                  uint32 unrecognized_tlvs = 7 [json_name = "unrecognized-tlvs"];
                  uint32 expired_neighbors = 8 [json_name = "expired-neighbors"];
                  uint32 transmitted_dcbx_tlvs = 9 [json_name = "transmitted-dcbx-tlvs"];
                  uint32 received_dcbx_tlvs = 10 [json_name = "received-dcbx-tlvs"];
                  uint32 transmitted_med_tlvs = 11 [json_name = "transmitted-med-tlvs"];
                  uint32 received_med_tlvs = 12 [json_name = "received-med-tlvs"];
                  uint32 received_network_card_id_tlvs = 13 [json_name = "received-network-card-id-tlvs"];
                  string last_cleared_time = 14 [json_name = "last-cleared-time"];
               }
               Statistics statistics = 7 [json_name = "statistics"];
            }
            Session session = 1 [json_name = "session"];
         }
         Lldp lldp = 106 [json_name = "lldp"];
         message Loadbalance {
            message Ucmp {
            }
            Ucmp ucmp = 1 [json_name = "ucmp"];
            message Packet {
            }
            Packet packet = 2 [json_name = "packet"];
            message UcmpWeight {
               message Nexthops {
                  message Nexthop {
                     string address = 1 [json_name = "address"];
                     uint32 weight = 2 [json_name = "weight"];
                  }
                  repeated Nexthop nexthop = 1 [json_name = "nexthop"];
               }
               Nexthops nexthops = 1 [json_name = "nexthops"];
               uint32 weight = 2 [json_name = "weight"];
            }
            UcmpWeight ucmp_weight = 3 [json_name = "ucmp-weight"];
            message VxlanForward {
               enum UdpSourcePortHashType {
                  INVALID_ENUM_VALUE_UdpSourcePortHashType = 0;
                  UdpSourcePortHashType_SOURCEX_IP = 1;
               };
               UdpSourcePortHashType udp_source_port_hash_type = 1 [json_name = "udp-source-port-hash-type"];
            }
            VxlanForward vxlan_forward = 4 [json_name = "vxlan-forward"];
         }
         Loadbalance loadbalance = 107 [json_name = "loadbalance"];
         message Loopdetect {
            message MacWithdraw {
            }
            MacWithdraw mac_withdraw = 1 [json_name = "mac-withdraw"];
            message LoopbackDetect {
               uint32 block_time = 1 [json_name = "block-time"];
               bool enable = 2 [json_name = "enable"];
               enum Action {
                  INVALID_ENUM_VALUE_Action = 0;
                  Action_SHUTDOWN = 1;
                  Action_ALARM = 2;
                  Action_BLOCK = 3;
                  Action_NOLEARN = 4;
                  Action_QUITVLAN = 5;
               };
               Action action = 3 [json_name = "action"];
               string vid = 4 [json_name = "vid"];
            }
            LoopbackDetect loopback_detect = 2 [json_name = "loopback-detect"];
            message LoopDetect {
               enum BlockTimeType {
                  INVALID_ENUM_VALUE_BlockTimeType = 0;
                  BlockTimeType_PERPX_BLOCKX_TIME = 1;
                  BlockTimeType_NORMX_BLOCKX_TIME = 2;
               };
               BlockTimeType block_time_type = 1 [json_name = "block-time-type"];
               uint32 block_time_value = 2 [json_name = "block-time-value"];
               bool trigger_down = 3 [json_name = "trigger-down"];
               uint32 packet_priority = 4 [json_name = "packet-priority"];
               bool only_alarm = 5 [json_name = "only-alarm"];
            }
            LoopDetect loop_detect = 3 [json_name = "loop-detect"];
            message TriggerDetect {
               message Disable {
               }
               Disable disable = 1 [json_name = "disable"];
               message DetectVid {
                  string vid = 1 [json_name = "vid"];
               }
               DetectVid detect_vid = 2 [json_name = "detect-vid"];
            }
            TriggerDetect trigger_detect = 4 [json_name = "trigger-detect"];
         }
         Loopdetect loopdetect = 108 [json_name = "loopdetect"];
         message Macsec {
            message CknCaks {
               message CknCak {
                  string ckn = 1 [json_name = "ckn"];
                  enum CakType {
                     INVALID_ENUM_VALUE_CakType = 0;
                     CakType_SIMPLE = 1;
                     CakType_CIPHER = 2;
                  };
                  CakType cak_type = 2 [json_name = "cak-type"];
                  string cak = 3 [json_name = "cak"];
               }
               CknCak ckn_cak = 1 [json_name = "ckn-cak"];
            }
            CknCaks ckn_caks = 1 [json_name = "ckn-caks"];
            message ConfidentialityOffsets {
               message ConfidentialityOffset {
                  uint32 offset_value = 1 [json_name = "offset-value"];
               }
               ConfidentialityOffset confidentiality_offset = 1 [json_name = "confidentiality-offset"];
            }
            ConfidentialityOffsets confidentiality_offsets = 2 [json_name = "confidentiality-offsets"];
            message ReplayWindows {
               message ReplayWindow {
                  uint32 window_size = 1 [json_name = "window-size"];
               }
               ReplayWindow replay_window = 1 [json_name = "replay-window"];
            }
            ReplayWindows replay_windows = 3 [json_name = "replay-windows"];
            message KeyserverPrioritys {
               message KeyserverPriority {
                  uint32 priority = 1 [json_name = "priority"];
               }
               KeyserverPriority keyserver_priority = 1 [json_name = "keyserver-priority"];
            }
            KeyserverPrioritys keyserver_prioritys = 4 [json_name = "keyserver-prioritys"];
            message SakLifeTimes {
               message SakLifeTime {
                  uint32 life_time = 1 [json_name = "life-time"];
               }
               SakLifeTime sak_life_time = 1 [json_name = "sak-life-time"];
            }
            SakLifeTimes sak_life_times = 5 [json_name = "sak-life-times"];
            message EncryptModes {
               message EncryptMode {
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_NORMAL = 1;
                     Mode_INTEGRITYX_ONLY = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               EncryptMode encrypt_mode = 1 [json_name = "encrypt-mode"];
            }
            EncryptModes encrypt_modes = 6 [json_name = "encrypt-modes"];
            message CipherAlgorithmSuites {
               message CipherAlgorithmSuite {
                  enum Suite {
                     INVALID_ENUM_VALUE_Suite = 0;
                     Suite_GCMX_AESX_128 = 1;
                     Suite_GCMX_AESX_XPNX_128 = 2;
                     Suite_GCMX_AESX_XPNX_128X_COMPATIBLE = 3;
                     Suite_GCMX_AESX_256 = 4;
                     Suite_GCMX_AESX_XPNX_256 = 5;
                  };
                  Suite suite = 1 [json_name = "suite"];
               }
               CipherAlgorithmSuite cipher_algorithm_suite = 1 [json_name = "cipher-algorithm-suite"];
            }
            CipherAlgorithmSuites cipher_algorithm_suites = 7 [json_name = "cipher-algorithm-suites"];
            message VlanInClears {
               message VlanInClear {
                  enum ClearType {
                     INVALID_ENUM_VALUE_ClearType = 0;
                     ClearType_DOT1QX_INX_CLEAR = 1;
                     ClearType_QINQX_INX_CLEAR = 2;
                  };
                  ClearType clear_type = 1 [json_name = "clear-type"];
               }
               VlanInClear vlan_in_clear = 1 [json_name = "vlan-in-clear"];
            }
            VlanInClears vlan_in_clears = 8 [json_name = "vlan-in-clears"];
            message MacsecProfile {
               string name = 1 [json_name = "name"];
            }
            MacsecProfile macsec_profile = 9 [json_name = "macsec-profile"];
         }
         Macsec macsec = 109 [json_name = "macsec"];
         message Mirror {
            message PortMirrors {
               message PortMirror {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool cpu_packet = 2 [json_name = "cpu-packet"];
                  message Property_Vlan {
                     string cevlan = 1 [json_name = "cevlan"];
                  }
                  message Property_UserDefinedFilterRule {
                     uint32 filter_id = 1 [json_name = "filter-id"];
                  }
                  oneof Property {
                     Property_Vlan property_vlan = 3 [json_name = "vlan"];
                     Property_UserDefinedFilterRule property_user_defined_filter_rule = 4 [json_name = "user-defined-filter-rule"];
                  }
               }
               repeated PortMirror port_mirror = 1 [json_name = "port-mirror"];
            }
            PortMirrors port_mirrors = 1 [json_name = "port-mirrors"];
            message PortMirrorSlice {
               uint32 slice_size = 1 [json_name = "slice-size"];
            }
            PortMirrorSlice port_mirror_slice = 2 [json_name = "port-mirror-slice"];
            message WithoutHeader {
            }
            WithoutHeader without_header = 3 [json_name = "without-header"];
            message PortMirrorCar {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            PortMirrorCar port_mirror_car = 4 [json_name = "port-mirror-car"];
            message PortMirrorTo {
               string observe_index = 1 [json_name = "observe-index"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
                  Direction_BOTH = 2;
               };
               Direction direction = 2 [json_name = "direction"];
               uint32 erspan_id = 3 [json_name = "erspan-id"];
            }
            PortMirrorTo port_mirror_to = 5 [json_name = "port-mirror-to"];
            message PortFragments {
               message PortFragment {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated PortFragment port_fragment = 1 [json_name = "port-fragment"];
            }
            PortFragments port_fragments = 6 [json_name = "port-fragments"];
            message Integrateds {
               message Integrated {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool cpu_packet = 2 [json_name = "cpu-packet"];
                  uint32 filter_id = 3 [json_name = "filter-id"];
                  message ObservePort_PortNull0 {
                     bool null0 = 1 [json_name = "null0"];
                  }
                  message ObservePort_PortObserve {
                     string if_name = 1 [json_name = "if-name"];
                     uint32 observe_index = 2 [json_name = "observe-index"];
                  }
                  oneof ObservePort {
                     ObservePort_PortNull0 observe_port_port_null0 = 4 [json_name = "port-null0"];
                     ObservePort_PortObserve observe_port_port_observe = 5 [json_name = "port-observe"];
                  }
               }
               repeated Integrated integrated = 1 [json_name = "integrated"];
            }
            Integrateds integrateds = 7 [json_name = "integrateds"];
            message BasPortMirrors {
               message BasPortMirror {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pevlan_begin = 2 [json_name = "pevlan-begin"];
                  uint32 pevlan_end = 3 [json_name = "pevlan-end"];
                  uint32 cevlan_begin = 4 [json_name = "cevlan-begin"];
                  uint32 cevlan_end = 5 [json_name = "cevlan-end"];
               }
               repeated BasPortMirror bas_port_mirror = 1 [json_name = "bas-port-mirror"];
            }
            BasPortMirrors bas_port_mirrors = 8 [json_name = "bas-port-mirrors"];
            message EvcL2PortMirrors {
               message Pubs {
                  message Pub {
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                        Direction_BOTH = 2;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string instance_name = 2 [json_name = "instance-name"];
                     string group_name = 3 [json_name = "group-name"];
                  }
                  repeated Pub pub = 1 [json_name = "pub"];
               }
               Pubs pubs = 1 [json_name = "pubs"];
               message Dot1QTypes {
                  message Dot1QType {
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                        Direction_BOTH = 2;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     uint32 vlan_begin = 2 [json_name = "vlan-begin"];
                     uint32 vlan_end = 3 [json_name = "vlan-end"];
                     string instance_name = 4 [json_name = "instance-name"];
                     enum Identify {
                        Identify_NONE = 0;
                        Identify_PEX_VID = 1;
                        Identify_CEX_VID = 2;
                        Identify_PEX_CEX_VID = 3;
                     };
                     Identify identify = 5 [json_name = "identify"];
                     string group_name = 6 [json_name = "group-name"];
                  }
                  repeated Dot1QType dot1q_type = 1 [json_name = "dot1q-type"];
               }
               Dot1QTypes dot1q_types = 2 [json_name = "dot1q-types"];
               message QinqTypes {
                  message QinqType {
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                        Direction_BOTH = 2;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     uint32 pevlan = 2 [json_name = "pevlan"];
                     uint32 cevlan_begin = 3 [json_name = "cevlan-begin"];
                     uint32 cevlan_end = 4 [json_name = "cevlan-end"];
                     string instance_name = 5 [json_name = "instance-name"];
                     enum Identify {
                        Identify_NONE = 0;
                        Identify_PEX_VID = 1;
                        Identify_CEX_VID = 2;
                        Identify_PEX_CEX_VID = 3;
                     };
                     Identify identify = 6 [json_name = "identify"];
                     string group_name = 7 [json_name = "group-name"];
                  }
                  repeated QinqType qinq_type = 1 [json_name = "qinq-type"];
               }
               QinqTypes qinq_types = 3 [json_name = "qinq-types"];
            }
            EvcL2PortMirrors evc_l2_port_mirrors = 9 [json_name = "evc-l2-port-mirrors"];
            message PortObserve {
               uint32 observe_index = 1 [json_name = "observe-index"];
               enum WithoutFilter {
                  WithoutFilter_FALSE = 0;
                  WithoutFilter_TRUE = 1;
               };
               WithoutFilter without_filter = 2 [json_name = "without-filter"];
               string destination_mac = 3 [json_name = "destination-mac"];
               enum PopLabel {
                  INVALID_ENUM_VALUE_PopLabel = 0;
                  PopLabel_ONE = 1;
                  PopLabel_TWO = 2;
                  PopLabel_ALL = 3;
               };
               PopLabel pop_label = 4 [json_name = "pop-label"];
               bool sub_extend = 5 [json_name = "sub-extend"];
               enum WithLinklayerHeader {
                  WithLinklayerHeader_FALSE = 0;
                  WithLinklayerHeader_TRUE = 1;
               };
               WithLinklayerHeader with_linklayer_header = 6 [json_name = "with-linklayer-header"];
            }
            PortObserve port_observe = 10 [json_name = "port-observe"];
            message MirrorByDirections {
               message MirrorByDirection {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 observe_index = 2 [json_name = "observe-index"];
               }
               repeated MirrorByDirection mirror_by_direction = 1 [json_name = "mirror-by-direction"];
            }
            MirrorByDirections mirror_by_directions = 11 [json_name = "mirror-by-directions"];
            message MirrorToMultis {
               message MirrorToMulti {
                  uint32 observe_index = 1 [json_name = "observe-index"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated MirrorToMulti mirror_to_multi = 1 [json_name = "mirror-to-multi"];
            }
            MirrorToMultis mirror_to_multis = 12 [json_name = "mirror-to-multis"];
            message MirrorToNull0 {
            }
            MirrorToNull0 mirror_to_null0 = 13 [json_name = "mirror-to-null0"];
            message ObservePorts {
               message ObservePort {
                  uint32 observe_index = 1 [json_name = "observe-index"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated ObservePort observe_port = 1 [json_name = "observe-port"];
            }
            ObservePorts observe_ports = 14 [json_name = "observe-ports"];
            message ObserveGroups {
               message ObserveGroup {
                  uint32 group_id = 1 [json_name = "group-id"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_BOTH = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated ObserveGroup observe_group = 1 [json_name = "observe-group"];
            }
            ObserveGroups observe_groups = 15 [json_name = "observe-groups"];
         }
         Mirror mirror = 110 [json_name = "mirror"];
         message Deephashcfg {
            enum FragmentField {
               INVALID_ENUM_VALUE_FragmentField = 0;
               FragmentField_IP = 1;
               FragmentField_DISABLE = 3;
            };
            FragmentField fragment_field = 1 [json_name = "fragment-field"];
            enum Deepmplshash {
               INVALID_ENUM_VALUE_Deepmplshash = 0;
               Deepmplshash_L3 = 1;
            };
            Deepmplshash deepmplshash = 2 [json_name = "deepmplshash"];
         }
         Deephashcfg deephashcfg = 111 [json_name = "deephashcfg"];
         message IfPoisonReverse {
         }
         IfPoisonReverse if_poison_reverse = 112 [json_name = "if-poison-reverse"];
         message IfP2MpLoadBalance {
            enum LoadbanlanceEnable {
               LoadbanlanceEnable_DISABLE = 0;
               LoadbanlanceEnable_ENABLE = 1;
            };
            LoadbanlanceEnable loadbanlance_enable = 1 [json_name = "loadbanlance-enable"];
            enum RootLoadbanlanceEnable {
               RootLoadbanlanceEnable_DISABLE = 0;
               RootLoadbanlanceEnable_ENABLE = 1;
            };
            RootLoadbanlanceEnable root_loadbanlance_enable = 2 [json_name = "root-loadbanlance-enable"];
            enum RootLoadbanlanceSpmsidis {
               RootLoadbanlanceSpmsidis_DISABLE = 0;
               RootLoadbanlanceSpmsidis_ENABLE = 1;
            };
            RootLoadbanlanceSpmsidis root_loadbanlance_spmsidis = 3 [json_name = "root-loadbanlance-spmsidis"];
         }
         IfP2MpLoadBalance if_p2mp_load_balance = 113 [json_name = "if-p2mp-load-balance"];
         message BgpLocalifnetTraffic {
            enum LocalifnetEnable {
               LocalifnetEnable_DISABLE = 0;
               LocalifnetEnable_ENABLE = 1;
            };
            LocalifnetEnable localifnet_enable = 1 [json_name = "localifnet-enable"];
         }
         BgpLocalifnetTraffic bgp_localifnet_traffic = 114 [json_name = "bgp-localifnet-traffic"];
         message MulticastBas {
            bool copy_by_session_enable = 1 [json_name = "copy-by-session-enable"];
            bool copy_by_vlan_enable = 2 [json_name = "copy-by-vlan-enable"];
            bool authorization_enable = 3 [json_name = "authorization-enable"];
            bool igmp_query_auto_send_enable = 4 [json_name = "igmp-query-auto-send-enable"];
            message BindingVpnInstances {
               message BindingVpnInstance {
                  string name = 1 [json_name = "name"];
                  enum AddressFamily {
                     INVALID_ENUM_VALUE_AddressFamily = 0;
                     AddressFamily_IPV4X_UNICAST = 1;
                     AddressFamily_IPV6X_UNICAST = 2;
                  };
                  AddressFamily address_family = 2 [json_name = "address-family"];
               }
               repeated BindingVpnInstance binding_vpn_instance = 1 [json_name = "binding-vpn-instance"];
            }
            BindingVpnInstances binding_vpn_instances = 5 [json_name = "binding-vpn-instances"];
            message VlanType_Qinq {
               uint32 user_aggregation_pevlan = 1 [json_name = "user-aggregation-pevlan"];
               uint32 user_aggregation_cevlan = 2 [json_name = "user-aggregation-cevlan"];
            }
            message VlanType_Vlan {
               uint32 user_aggregation_vlan = 1 [json_name = "user-aggregation-vlan"];
            }
            oneof VlanType {
               VlanType_Qinq vlan_type_qinq = 6 [json_name = "qinq"];
               VlanType_Vlan vlan_type_vlan = 7 [json_name = "vlan"];
            }
            message PimSnoopingEnables {
               message PimSnoopingEnable {
                  enum AddressFamily {
                     INVALID_ENUM_VALUE_AddressFamily = 0;
                     AddressFamily_IPV4X_UNICAST = 1;
                     AddressFamily_IPV6X_UNICAST = 2;
                  };
                  AddressFamily address_family = 1 [json_name = "address-family"];
               }
               repeated PimSnoopingEnable pim_snooping_enable = 1 [json_name = "pim-snooping-enable"];
            }
            PimSnoopingEnables pim_snooping_enables = 8 [json_name = "pim-snooping-enables"];
         }
         MulticastBas multicast_bas = 115 [json_name = "multicast-bas"];
         message MulticastForward {
            message Shaping {
               bool shaping_enable = 1 [json_name = "shaping-enable"];
            }
            Shaping shaping = 1 [json_name = "shaping"];
            message HoldUp {
               uint32 time = 1 [json_name = "time"];
            }
            HoldUp hold_up = 2 [json_name = "hold-up"];
            message Backup {
               bool ipv4_enable = 1 [json_name = "ipv4-enable"];
               bool ipv6_enable = 2 [json_name = "ipv6-enable"];
            }
            Backup backup = 3 [json_name = "backup"];
            message TrunkBackUp {
               enum TrunkMulticastLoadBalance {
                  INVALID_ENUM_VALUE_TrunkMulticastLoadBalance = 0;
                  TrunkMulticastLoadBalance_L3MCV4 = 1;
                  TrunkMulticastLoadBalance_L3MCV6 = 2;
               };
               TrunkMulticastLoadBalance trunk_multicast_load_balance = 1 [json_name = "trunk-multicast-load-balance"];
            }
            TrunkBackUp trunk_back_up = 4 [json_name = "trunk-back-up"];
            message DenyVlan {
               string vlan_list = 1 [json_name = "vlan-list"];
            }
            DenyVlan deny_vlan = 5 [json_name = "deny-vlan"];
            message Options {
               bool vxlan_multicast_group = 1 [json_name = "vxlan-multicast-group"];
            }
            Options options = 6 [json_name = "options"];
         }
         MulticastForward multicast_forward = 116 [json_name = "multicast-forward"];
         message Netstream {
            message SamplerEnables {
               message SamplerEnable {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated SamplerEnable sampler_enable = 1 [json_name = "sampler-enable"];
            }
            SamplerEnables sampler_enables = 1 [json_name = "sampler-enables"];
            message SamplerRates {
               message SamplerRate {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  message SamplerType_FixPackets {
                     uint32 fix_packets_value = 1 [json_name = "fix-packets-value"];
                  }
                  message SamplerType_FixTime {
                     uint32 fix_time_value = 1 [json_name = "fix-time-value"];
                  }
                  message SamplerType_RandomPackets {
                     uint32 random_packets_value = 1 [json_name = "random-packets-value"];
                  }
                  oneof SamplerType {
                     SamplerType_FixPackets sampler_type_fix_packets = 3 [json_name = "fix-packets"];
                     SamplerType_FixTime sampler_type_fix_time = 4 [json_name = "fix-time"];
                     SamplerType_RandomPackets sampler_type_random_packets = 5 [json_name = "random-packets"];
                  }
               }
               repeated SamplerRate sampler_rate = 1 [json_name = "sampler-rate"];
            }
            SamplerRates sampler_rates = 2 [json_name = "sampler-rates"];
            message MplsExclude {
               enum MplsExclude6 {
                  INVALID_ENUM_VALUE_MplsExclude6 = 0;
                  MplsExclude6_EXCLUDE = 1;
               };
               MplsExclude6 mpls_exclude = 1 [json_name = "mpls-exclude"];
            }
            MplsExclude mpls_exclude = 3 [json_name = "mpls-exclude"];
            message ApplyFlexflowRecords {
               message ApplyFlexflowRecord {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  string record_name = 2 [json_name = "record-name"];
               }
               repeated ApplyFlexflowRecord apply_flexflow_record = 1 [json_name = "apply-flexflow-record"];
            }
            ApplyFlexflowRecords apply_flexflow_records = 4 [json_name = "apply-flexflow-records"];
            message SamplerRateAllFlows {
               message SamplerRateAllFlow {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  message SamplerType_RandomPackets {
                     uint32 random_packets_value = 1 [json_name = "random-packets-value"];
                  }
                  oneof SamplerType {
                     SamplerType_RandomPackets sampler_type_random_packets = 2 [json_name = "random-packets"];
                  }
               }
               repeated SamplerRateAllFlow sampler_rate_all_flow = 1 [json_name = "sampler-rate-all-flow"];
            }
            SamplerRateAllFlows sampler_rate_all_flows = 5 [json_name = "sampler-rate-all-flows"];
            message StatisticEnables {
               message StatisticEnable {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
               }
               repeated StatisticEnable statistic_enable = 1 [json_name = "statistic-enable"];
            }
            StatisticEnables statistic_enables = 6 [json_name = "statistic-enables"];
            message ApplyFlexflowRecordDirects {
               message ApplyFlexflowRecordDirect {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                     FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                     FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                     FlowType_ETHERNETX_FLOW = 4;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  string record_name = 2 [json_name = "record-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 3 [json_name = "direction"];
               }
               repeated ApplyFlexflowRecordDirect apply_flexflow_record_direct = 1 [json_name = "apply-flexflow-record-direct"];
            }
            ApplyFlexflowRecordDirects apply_flexflow_record_directs = 7 [json_name = "apply-flexflow-record-directs"];
            message StatisticsEnable {
               enum FlowType {
                  FlowType_IPX_FLOW = 0;
                  FlowType_IPV6X_FLOW = 1;
                  FlowType_VXLANX_INNERX_IPX_FLOW = 2;
                  FlowType_VXLANX_INNERX_IPV6X_FLOW = 3;
                  FlowType_ETHERNETX_FLOW = 4;
               };
               repeated FlowType flow_type = 1 [json_name = "flow-type"];
            }
            StatisticsEnable statistics_enable = 8 [json_name = "statistics-enable"];
         }
         Netstream netstream = 117 [json_name = "netstream"];
         message Nvo3VtepStatistics {
            message Nvo3VtepStatistic {
               uint32 vni = 1 [json_name = "vni"];
               string peer = 2 [json_name = "peer"];
               enum Mode {
                  Mode_L2 = 0;
                  Mode_L3 = 1;
                  Mode_BOTH = 2;
               };
               Mode mode = 3 [json_name = "mode"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
                  Direction_BIDIRECTION = 2;
               };
               Direction direction = 4 [json_name = "direction"];
               message Collections {
                  message Collection {
                     string source_addr = 1 [json_name = "source-addr"];
                     uint64 send_bits_rate = 2 [json_name = "send-bits-rate"];
                     uint64 send_pkts_rate = 3 [json_name = "send-pkts-rate"];
                     uint64 send_unicast_pkts = 4 [json_name = "send-unicast-pkts"];
                     uint64 send_multicast_pkts = 5 [json_name = "send-multicast-pkts"];
                     uint64 send_broadcast_pkts = 6 [json_name = "send-broadcast-pkts"];
                     uint64 send_total_bytes = 7 [json_name = "send-total-bytes"];
                     uint64 send_total_pkts = 8 [json_name = "send-total-pkts"];
                     uint64 receive_bits_rate = 9 [json_name = "receive-bits-rate"];
                     uint64 receive_pkts_rate = 10 [json_name = "receive-pkts-rate"];
                     uint64 receive_unicast_pkts = 11 [json_name = "receive-unicast-pkts"];
                     uint64 receive_multicast_pkts = 12 [json_name = "receive-multicast-pkts"];
                     uint64 receive_broadcast_pkts = 13 [json_name = "receive-broadcast-pkts"];
                     uint64 receive_total_bytes = 14 [json_name = "receive-total-bytes"];
                     uint64 receive_total_pkts = 15 [json_name = "receive-total-pkts"];
                     uint64 drop_unicast_pkts = 16 [json_name = "drop-unicast-pkts"];
                     uint64 drop_multicast_pkts = 17 [json_name = "drop-multicast-pkts"];
                     uint64 drop_broadcast_pkts = 18 [json_name = "drop-broadcast-pkts"];
                  }
                  repeated Collection collection = 1 [json_name = "collection"];
               }
               Collections collections = 5 [json_name = "collections"];
            }
            repeated Nvo3VtepStatistic nvo3_vtep_statistic = 1 [json_name = "nvo3-vtep-statistic"];
         }
         Nvo3VtepStatistics nvo3_vtep_statistics = 118 [json_name = "nvo3-vtep-statistics"];
         message IfIcmpSecuritys {
            message IfIcmpSecurity {
               enum Action {
                  Action_RECEIVEX_PKT = 0;
                  Action_SENDX_PKT = 1;
               };
               Action action = 1 [json_name = "action"];
               enum IcmpName {
                  IcmpName_USERX_DEFINED = 0;
                  IcmpName_ECHO = 1;
                  IcmpName_ECHOX_REPLY = 2;
                  IcmpName_FRAGMENTNEEDX_DFSET = 3;
                  IcmpName_HOSTX_REDIRECT = 4;
                  IcmpName_HOSTX_TOSX_REDIRECT = 5;
                  IcmpName_HOSTX_UNREACHABLE = 6;
                  IcmpName_INFORMATIONX_REPLY = 7;
                  IcmpName_INFORMATIONX_REQUEST = 8;
                  IcmpName_NETX_REDIRECT = 9;
                  IcmpName_NETX_TOSX_REDIRECT = 10;
                  IcmpName_NETX_UNREACHABLE = 11;
                  IcmpName_PARAMETERX_PROBLEM = 12;
                  IcmpName_PORTX_UNREACHABLE = 13;
                  IcmpName_PROTOCOLX_UNREACHABLE = 14;
                  IcmpName_REASSEMBLYX_TIMEOUT = 15;
                  IcmpName_SOURCEX_QUENCH = 16;
                  IcmpName_SOURCEX_ROUTEX_FAILED = 17;
                  IcmpName_TIMESTAMPX_REPLY = 18;
                  IcmpName_TIMESTAMPX_REQUEST = 19;
                  IcmpName_TTLX_EXCEEDED = 20;
               };
               IcmpName icmp_name = 2 [json_name = "icmp-name"];
               uint32 icmp_type = 3 [json_name = "icmp-type"];
               uint32 icmp_code = 4 [json_name = "icmp-code"];
               enum SwitchOperation {
                  SwitchOperation_ENABLE = 0;
                  SwitchOperation_DISABLE = 1;
               };
               SwitchOperation switch_operation = 5 [json_name = "switch-operation"];
            }
            repeated IfIcmpSecurity if_icmp_security = 1 [json_name = "if-icmp-security"];
         }
         IfIcmpSecuritys if_icmp_securitys = 119 [json_name = "if-icmp-securitys"];
         message IfIpOptSecuritys {
            message IfIpOptSecurity {
               enum OptionType {
                  OptionType_ROUTEX_ALERT = 0;
                  OptionType_ROUTEX_RECORD = 1;
                  OptionType_SOURCEX_ROUTE = 2;
                  OptionType_TIMEX_STAMP = 3;
               };
               OptionType option_type = 1 [json_name = "option-type"];
               enum Switch {
                  Switch_ENABLE = 0;
                  Switch_DISABLE = 1;
               };
               Switch switch = 2 [json_name = "switch"];
            }
            repeated IfIpOptSecurity if_ip_opt_security = 1 [json_name = "if-ip-opt-security"];
         }
         IfIpOptSecuritys if_ip_opt_securitys = 120 [json_name = "if-ip-opt-securitys"];
         message IpVerifySrcAddr {
         }
         IpVerifySrcAddr ip_verify_src_addr = 121 [json_name = "ip-verify-src-addr"];
         message IpFwdBroadcast {
            string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
         }
         IpFwdBroadcast ip_fwd_broadcast = 122 [json_name = "ip-fwd-broadcast"];
         message Vrrp {
            message BackupGroups {
               bool ttlcheck_flag = 1 [json_name = "ttlcheck-flag"];
               uint32 recover_delay = 2 [json_name = "recover-delay"];
               bool arpsend_simple = 3 [json_name = "arpsend-simple"];
               message AdvertiseSendMode_AllSubvlans {
                  bool sendmode_all = 1 [json_name = "sendmode-all"];
               }
               message AdvertiseSendMode_OneSubvlan {
                  uint32 send_subvlanid = 1 [json_name = "send-subvlanid"];
               }
               oneof AdvertiseSendMode {
                  AdvertiseSendMode_AllSubvlans advertise_send_mode_all_subvlans = 4 [json_name = "all-subvlans"];
                  AdvertiseSendMode_OneSubvlan advertise_send_mode_one_subvlan = 5 [json_name = "one-subvlan"];
               }
               message Statistics {
                  uint32 ip_protocol_errs = 1 [json_name = "ip-protocol-errs"];
                  uint32 dest_ip_errs = 2 [json_name = "dest-ip-errs"];
                  uint32 check_sum_errs = 3 [json_name = "check-sum-errs"];
                  uint32 version_errs = 4 [json_name = "version-errs"];
                  uint32 vrrpid_errs = 5 [json_name = "vrrpid-errs"];
               }
               Statistics statistics = 6 [json_name = "statistics"];
            }
            BackupGroups backup_groups = 1 [json_name = "backup-groups"];
            message TrackAdmins {
               message TrackAdmin {
                  uint32 id = 1 [json_name = "id"];
                  string if_name = 2 [json_name = "if-name"];
               }
               repeated TrackAdmin track_admin = 1 [json_name = "track-admin"];
            }
            TrackAdmins track_admins = 2 [json_name = "track-admins"];
            message BackupGroup6S {
               bool hoplimit_check = 1 [json_name = "hoplimit-check"];
               uint32 recover_delay = 2 [json_name = "recover-delay"];
               bool nd_send_simple = 3 [json_name = "nd-send-simple"];
               message AdvertiseSendMode_AllSubvlans {
                  bool sendmode_all = 1 [json_name = "sendmode-all"];
               }
               message AdvertiseSendMode_OneSubvlan {
                  uint32 send_subvlanid = 1 [json_name = "send-subvlanid"];
               }
               oneof AdvertiseSendMode {
                  AdvertiseSendMode_AllSubvlans advertise_send_mode_all_subvlans = 4 [json_name = "all-subvlans"];
                  AdvertiseSendMode_OneSubvlan advertise_send_mode_one_subvlan = 5 [json_name = "one-subvlan"];
               }
               message Statistics {
                  uint32 ip_protocol_errs = 1 [json_name = "ip-protocol-errs"];
                  uint32 dest_ip_errs = 2 [json_name = "dest-ip-errs"];
                  uint32 check_sum_errs = 3 [json_name = "check-sum-errs"];
                  uint32 version_errs = 4 [json_name = "version-errs"];
                  uint32 vrrpid_errs = 5 [json_name = "vrrpid-errs"];
               }
               Statistics statistics = 6 [json_name = "statistics"];
            }
            BackupGroup6S backup_group6s = 3 [json_name = "backup-group6s"];
         }
         Vrrp vrrp = 123 [json_name = "vrrp"];
         message UnicastForward {
            message PoisonReverse {
            }
            PoisonReverse poison_reverse = 1 [json_name = "poison-reverse"];
            message Ipv6Redirect {
            }
            Ipv6Redirect ipv6_redirect = 2 [json_name = "ipv6-redirect"];
            message Ipv6NaAntiAttack {
            }
            Ipv6NaAntiAttack ipv6_na_anti_attack = 3 [json_name = "ipv6-na-anti-attack"];
            message IpPrioritySelect {
               string if_name = 1 [json_name = "if-name"];
            }
            IpPrioritySelect ip_priority_select = 4 [json_name = "ip-priority-select"];
            message MacChangeNotifyArp {
               bool enable = 1 [json_name = "enable"];
            }
            MacChangeNotifyArp mac_change_notify_arp = 5 [json_name = "mac-change-notify-arp"];
            message MacChangeNotifyNdDisable {
            }
            MacChangeNotifyNdDisable mac_change_notify_nd_disable = 6 [json_name = "mac-change-notify-nd-disable"];
            message IpUrpfEnable {
               bool enable = 1 [json_name = "enable"];
            }
            IpUrpfEnable ip_urpf_enable = 7 [json_name = "ip-urpf-enable"];
            message IpUrpf {
               enum CheckMode {
                  CheckMode_LOOSE = 0;
                  CheckMode_STRICT = 1;
               };
               CheckMode check_mode = 1 [json_name = "check-mode"];
               bool allow_default_route = 2 [json_name = "allow-default-route"];
               string acl_number = 3 [json_name = "acl-number"];
            }
            IpUrpf ip_urpf = 8 [json_name = "ip-urpf"];
            message MtuCheckEnable {
               bool enable = 1 [json_name = "enable"];
            }
            MtuCheckEnable mtu_check_enable = 9 [json_name = "mtu-check-enable"];
            message TunnelPipeDscp {
               uint32 dscpvalue = 1 [json_name = "dscpvalue"];
            }
            TunnelPipeDscp tunnel_pipe_dscp = 10 [json_name = "tunnel-pipe-dscp"];
         }
         UnicastForward unicast_forward = 124 [json_name = "unicast-forward"];
         message UnknowUnicastThreshold {
            uint32 threshold = 1 [json_name = "threshold"];
         }
         UnknowUnicastThreshold unknow_unicast_threshold = 125 [json_name = "unknow-unicast-threshold"];
         message TrackPwState {
         }
         TrackPwState track_pw_state = 126 [json_name = "track-pw-state"];
         message L3VeDelayUp {
            uint32 time = 1 [json_name = "time"];
         }
         L3VeDelayUp l3ve_delay_up = 127 [json_name = "l3ve-delay-up"];
         message EvpnAttribute {
            message TrackPeers {
               message TrackPeer {
                  string es_track_address = 1 [json_name = "es-track-address"];
               }
               repeated TrackPeer track_peer = 1 [json_name = "track-peer"];
            }
            TrackPeers track_peers = 1 [json_name = "track-peers"];
         }
         EvpnAttribute evpn_attribute = 128 [json_name = "evpn-attribute"];
         message Y1731 {
            message ManualMip {
               uint32 level = 1 [json_name = "level"];
               string mac = 2 [json_name = "mac"];
               string md_name = 3 [json_name = "md-name"];
               uint32 id = 4 [json_name = "id"];
            }
            ManualMip manual_mip = 1 [json_name = "manual-mip"];
            message AutoMips {
               uint32 level = 1 [json_name = "level"];
               string mac = 2 [json_name = "mac"];
            }
            AutoMips auto_mips = 2 [json_name = "auto-mips"];
            message MeasureGranularity {
               enum MeasureGran {
                  INVALID_ENUM_VALUE_MeasureGran = 0;
                  MeasureGran_PORTX_VLAN = 1;
                  MeasureGran_PORT = 2;
               };
               MeasureGran measure_gran = 1 [json_name = "measure-gran"];
            }
            MeasureGranularity measure_granularity = 3 [json_name = "measure-granularity"];
            message TriggerIf {
               string md_name = 1 [json_name = "md-name"];
               string ma_name = 2 [json_name = "ma-name"];
               uint32 rmep_id = 3 [json_name = "rmep-id"];
               enum TriggerType {
                  INVALID_ENUM_VALUE_TriggerType = 0;
                  TriggerType_IFX_DOWN = 1;
                  TriggerType_IFX_LINKX_DOWN = 2;
               };
               TriggerType trigger_type = 4 [json_name = "trigger-type"];
            }
            TriggerIf trigger_if = 4 [json_name = "trigger-if"];
            message IfDownCcmSendStop {
               bool ccm_send_stop = 1 [json_name = "ccm-send-stop"];
            }
            IfDownCcmSendStop if_down_ccm_send_stop = 5 [json_name = "if-down-ccm-send-stop"];
         }
         Y1731 y1731 = 129 [json_name = "y1731"];
         message Esqm {
            message InterfaceSamplings {
               message InterfaceSampling {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated InterfaceSampling interface_sampling = 1 [json_name = "interface-sampling"];
            }
            InterfaceSamplings interface_samplings = 1 [json_name = "interface-samplings"];
         }
         Esqm esqm = 130 [json_name = "esqm"];
         message MldSnooping {
            string learning_disable_vlans = 1 [json_name = "learning-disable-vlans"];
            string static_router_port_vlans = 2 [json_name = "static-router-port-vlans"];
            message StaticGroups {
               message StaticGroup {
                  string group_address = 1 [json_name = "group-address"];
                  string source_address = 2 [json_name = "source-address"];
                  string vlan_groups = 3 [json_name = "vlan-groups"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 3 [json_name = "static-groups"];
            message GroupPolicys {
               message GroupPolicy {
                  string acl = 1 [json_name = "acl"];
                  uint32 version = 2 [json_name = "version"];
                  string vlan_groups = 3 [json_name = "vlan-groups"];
               }
               repeated GroupPolicy group_policy = 1 [json_name = "group-policy"];
            }
            GroupPolicys group_policys = 4 [json_name = "group-policys"];
            message ProxyUplinkPorts {
               message ProxyUplinkPort {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
               }
               repeated ProxyUplinkPort proxy_uplink_port = 1 [json_name = "proxy-uplink-port"];
            }
            ProxyUplinkPorts proxy_uplink_ports = 5 [json_name = "proxy-uplink-ports"];
            message LimitStatisticss {
               message LimitStatistics {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
                  uint32 current_entry_count = 2 [json_name = "current-entry-count"];
               }
               repeated LimitStatistics limit_statistics = 1 [json_name = "limit-statistics"];
            }
            LimitStatisticss limit_statisticss = 6 [json_name = "limit-statisticss"];
            message PortFastControl {
            }
            PortFastControl port_fast_control = 7 [json_name = "port-fast-control"];
         }
         MldSnooping mld_snooping = 131 [json_name = "mld-snooping"];
         message NdDynNbLimit {
            message VlanLimits {
               message VlanLimit {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
                  uint32 max_dyn_nb_num = 2 [json_name = "max-dyn-nb-num"];
               }
               repeated VlanLimit vlan_limit = 1 [json_name = "vlan-limit"];
            }
            VlanLimits vlan_limits = 1 [json_name = "vlan-limits"];
         }
         NdDynNbLimit nd_dyn_nb_limit = 132 [json_name = "nd-dyn-nb-limit"];
         message LacpForceUp {
            bool force_up = 1 [json_name = "force-up"];
            bool extension_enable = 2 [json_name = "extension-enable"];
         }
         LacpForceUp lacp_force_up = 133 [json_name = "lacp-force-up"];
         message SubInterfaceLldp {
            message Session {
               enum AdminStatus {
                  INVALID_ENUM_VALUE_AdminStatus = 0;
                  AdminStatus_TXX_ONLY = 1;
                  AdminStatus_RXX_ONLY = 2;
                  AdminStatus_TXX_RX = 3;
                  AdminStatus_DISABLED = 4;
               };
               AdminStatus admin_status = 1 [json_name = "admin-status"];
               message TlvEnable {
                  bool management_address = 1 [json_name = "management-address"];
                  bool port_description = 2 [json_name = "port-description"];
                  bool system_capability = 3 [json_name = "system-capability"];
                  bool system_description = 4 [json_name = "system-description"];
                  bool system_name = 5 [json_name = "system-name"];
               }
               TlvEnable tlv_enable = 2 [json_name = "tlv-enable"];
               message LocalInfo {
                  enum PortIdSubType {
                     PortIdSubType_OTHER = 0;
                     PortIdSubType_INTERFACEX_ALIAS = 1;
                     PortIdSubType_PORTX_COMPONENT = 2;
                     PortIdSubType_MACX_ADDRESS = 3;
                     PortIdSubType_NETWORKX_ADDRESS = 4;
                     PortIdSubType_INTERFACEX_NAME = 5;
                     PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                     PortIdSubType_LOCAL = 7;
                  };
                  PortIdSubType port_id_sub_type = 1 [json_name = "port-id-sub-type"];
                  string port_id = 2 [json_name = "port-id"];
                  string port_description = 3 [json_name = "port-description"];
                  message ManagementAddresss {
                     message ManagementAddress {
                        enum Type {
                           Type_OTHER = 0;
                           Type_IPV4 = 1;
                           Type_IPV6 = 2;
                           Type_NSAP = 3;
                           Type_HDLC = 4;
                           Type_BBN1822 = 5;
                           Type_MAC = 6;
                           Type_E163 = 7;
                           Type_E164 = 8;
                           Type_F69 = 9;
                           Type_X121 = 10;
                           Type_IPX = 11;
                           Type_APPLEX_TALK = 12;
                           Type_DECNETX_IV = 13;
                           Type_BANYANX_VINES = 14;
                           Type_E164X_WITHX_NSAP = 15;
                           Type_DNS = 16;
                           Type_DISTINGUISHEDX_NAME = 17;
                           Type_ASX_NUMBER = 18;
                           Type_XTPX_OVERX_IPV4 = 19;
                           Type_XTPX_OVERX_IPV6 = 20;
                           Type_XTPX_NATIVEX_MODEX_XTP = 21;
                           Type_FIBREX_CHANNELX_WWPN = 22;
                           Type_FIBREX_CHANNELX_WWN = 23;
                           Type_GWID = 24;
                        };
                        Type type = 1 [json_name = "type"];
                        string value = 2 [json_name = "value"];
                        int32 length = 3 [json_name = "length"];
                        enum IfSubType {
                           IfSubType_OTHER = 0;
                           IfSubType_UNKNOWN = 1;
                           IfSubType_IFX_INDEX = 2;
                           IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                        };
                        IfSubType if_sub_type = 4 [json_name = "if-sub-type"];
                        int32 if_id = 5 [json_name = "if-id"];
                        string oid = 6 [json_name = "oid"];
                     }
                     repeated ManagementAddress management_address = 1 [json_name = "management-address"];
                  }
                  ManagementAddresss management_addresss = 4 [json_name = "management-addresss"];
               }
               LocalInfo local_info = 3 [json_name = "local-info"];
               message Neighbors {
                  message Neighbor {
                     uint32 index = 1 [json_name = "index"];
                     enum ChassisIdSubType {
                        ChassisIdSubType_OTHER = 0;
                        ChassisIdSubType_CHASSISX_COMPONENT = 1;
                        ChassisIdSubType_INTERFACEX_ALIAS = 2;
                        ChassisIdSubType_PORTX_COMPONENT = 3;
                        ChassisIdSubType_MACX_ADDRESS = 4;
                        ChassisIdSubType_NETWORKX_ADDRESS = 5;
                        ChassisIdSubType_INTERFACEX_NAME = 6;
                        ChassisIdSubType_LOCAL = 7;
                     };
                     ChassisIdSubType chassis_id_sub_type = 2 [json_name = "chassis-id-sub-type"];
                     string chassis_id = 3 [json_name = "chassis-id"];
                     enum PortIdSubType {
                        PortIdSubType_OTHER = 0;
                        PortIdSubType_INTERFACEX_ALIAS = 1;
                        PortIdSubType_PORTX_COMPONENT = 2;
                        PortIdSubType_MACX_ADDRESS = 3;
                        PortIdSubType_NETWORKX_ADDRESS = 4;
                        PortIdSubType_INTERFACEX_NAME = 5;
                        PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                        PortIdSubType_LOCAL = 7;
                     };
                     PortIdSubType port_id_sub_type = 4 [json_name = "port-id-sub-type"];
                     string port_id = 5 [json_name = "port-id"];
                     string port_description = 6 [json_name = "port-description"];
                     string system_name = 7 [json_name = "system-name"];
                     string system_description = 8 [json_name = "system-description"];
                     string system_capabilities_enabled = 9 [json_name = "system-capabilities-enabled"];
                     string system_capabilities_supported = 10 [json_name = "system-capabilities-supported"];
                     int32 expired_time = 11 [json_name = "expired-time"];
                     int32 port_vlan_id = 12 [json_name = "port-vlan-id"];
                     string protocol_identity = 13 [json_name = "protocol-identity"];
                     enum AutoNegotiationSupported {
                        AutoNegotiationSupported_NO = 0;
                        AutoNegotiationSupported_YES = 1;
                     };
                     AutoNegotiationSupported auto_negotiation_supported = 14 [json_name = "auto-negotiation-supported"];
                     enum AutoNegotiationEnabled {
                        AutoNegotiationEnabled_NO = 0;
                        AutoNegotiationEnabled_YES = 1;
                     };
                     AutoNegotiationEnabled auto_negotiation_enabled = 15 [json_name = "auto-negotiation-enabled"];
                     string auto_negotiation_capability = 16 [json_name = "auto-negotiation-capability"];
                     enum OperMauType {
                        OperMauType_UNKNOWN = 0;
                        OperMauType_DOT3X_MAUX_TYPEX_AUI = 1;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5 = 2;
                        OperMauType_DOT3X_MAUX_TYPEX_FOIRL = 3;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2 = 4;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T = 5;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP = 6;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB = 7;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL = 8;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36 = 9;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD = 10;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD = 11;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD = 12;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD = 13;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4 = 14;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD = 15;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD = 16;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD = 17;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD = 18;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD = 19;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD = 20;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD = 21;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD = 22;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD = 23;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD = 24;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD = 25;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD = 26;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD = 27;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD = 28;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD = 29;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD = 30;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X = 31;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4 = 32;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R = 33;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER = 34;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR = 35;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR = 36;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W = 37;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW = 38;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW = 39;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW = 40;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4 = 70;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4 = 71;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4 = 72;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR = 73;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4 = 74;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 = 75;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 = 76;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4 = 77;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4 = 78;
                     };
                     OperMauType oper_mau_type = 17 [json_name = "oper-mau-type"];
                     enum LinkAggregationSupported {
                        LinkAggregationSupported_NO = 0;
                        LinkAggregationSupported_YES = 1;
                     };
                     LinkAggregationSupported link_aggregation_supported = 18 [json_name = "link-aggregation-supported"];
                     enum LinkAggregationEnabled {
                        LinkAggregationEnabled_NO = 0;
                        LinkAggregationEnabled_YES = 1;
                     };
                     LinkAggregationEnabled link_aggregation_enabled = 19 [json_name = "link-aggregation-enabled"];
                     int32 aggregation_port_id = 20 [json_name = "aggregation-port-id"];
                     int32 maximum_frame_size = 21 [json_name = "maximum-frame-size"];
                     string discovered_time = 22 [json_name = "discovered-time"];
                     message ManagementAddresss {
                        message ManagementAddress {
                           enum Type {
                              Type_OTHER = 0;
                              Type_IPV4 = 1;
                              Type_IPV6 = 2;
                              Type_NSAP = 3;
                              Type_HDLC = 4;
                              Type_BBN1822 = 5;
                              Type_MAC = 6;
                              Type_E163 = 7;
                              Type_E164 = 8;
                              Type_F69 = 9;
                              Type_X121 = 10;
                              Type_IPX = 11;
                              Type_APPLEX_TALK = 12;
                              Type_DECNETX_IV = 13;
                              Type_BANYANX_VINES = 14;
                              Type_E164X_WITHX_NSAP = 15;
                              Type_DNS = 16;
                              Type_DISTINGUISHEDX_NAME = 17;
                              Type_ASX_NUMBER = 18;
                              Type_XTPX_OVERX_IPV4 = 19;
                              Type_XTPX_OVERX_IPV6 = 20;
                              Type_XTPX_NATIVEX_MODEX_XTP = 21;
                              Type_FIBREX_CHANNELX_WWPN = 22;
                              Type_FIBREX_CHANNELX_WWN = 23;
                              Type_GWID = 24;
                           };
                           Type type = 1 [json_name = "type"];
                           string value = 2 [json_name = "value"];
                           int32 length = 3 [json_name = "length"];
                           enum IfSubType {
                              IfSubType_OTHER = 0;
                              IfSubType_UNKNOWN = 1;
                              IfSubType_IFX_INDEX = 2;
                              IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                           };
                           IfSubType if_sub_type = 4 [json_name = "if-sub-type"];
                           int32 if_id = 5 [json_name = "if-id"];
                           string oid = 6 [json_name = "oid"];
                        }
                        repeated ManagementAddress management_address = 1 [json_name = "management-address"];
                     }
                     ManagementAddresss management_addresss = 23 [json_name = "management-addresss"];
                     message ProtocolVlans {
                        message ProtocolVlan {
                           int32 id = 1 [json_name = "id"];
                           enum Supported {
                              Supported_NO = 0;
                              Supported_YES = 1;
                           };
                           Supported supported = 2 [json_name = "supported"];
                           enum Enabled {
                              Enabled_NO = 0;
                              Enabled_YES = 1;
                           };
                           Enabled enabled = 3 [json_name = "enabled"];
                        }
                        repeated ProtocolVlan protocol_vlan = 1 [json_name = "protocol-vlan"];
                     }
                     ProtocolVlans protocol_vlans = 24 [json_name = "protocol-vlans"];
                     message VlanNames {
                        message VlanName {
                           int32 id = 1 [json_name = "id"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated VlanName vlan_name = 1 [json_name = "vlan-name"];
                     }
                     VlanNames vlan_names = 25 [json_name = "vlan-names"];
                     message UnknownTlvs {
                        message UnknownTlv {
                           int32 type = 1 [json_name = "type"];
                           string info = 2 [json_name = "info"];
                        }
                        repeated UnknownTlv unknown_tlv = 1 [json_name = "unknown-tlv"];
                     }
                     UnknownTlvs unknown_tlvs = 26 [json_name = "unknown-tlvs"];
                     message UnknownOrganizationallyDefinedTlvs {
                        message UnknownOrganizationallyDefinedTlv {
                           string oui = 1 [json_name = "oui"];
                           int32 sub_type = 2 [json_name = "sub-type"];
                           int32 index = 3 [json_name = "index"];
                           string info = 4 [json_name = "info"];
                        }
                        repeated UnknownOrganizationallyDefinedTlv unknown_organizationally_defined_tlv = 1 [json_name = "unknown-organizationally-defined-tlv"];
                     }
                     UnknownOrganizationallyDefinedTlvs unknown_organizationally_defined_tlvs = 27 [json_name = "unknown-organizationally-defined-tlvs"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 4 [json_name = "neighbors"];
               message Statistics {
                  uint32 total_neighbors = 1 [json_name = "total-neighbors"];
                  uint32 transmitted_frames = 2 [json_name = "transmitted-frames"];
                  uint32 received_frames = 3 [json_name = "received-frames"];
                  uint32 discarded_frames = 4 [json_name = "discarded-frames"];
                  uint32 error_frames = 5 [json_name = "error-frames"];
                  uint32 discarded_tlvs = 6 [json_name = "discarded-tlvs"];
                  uint32 unrecognized_tlvs = 7 [json_name = "unrecognized-tlvs"];
                  uint32 expired_neighbors = 8 [json_name = "expired-neighbors"];
                  uint32 transmitted_dcbx_tlvs = 9 [json_name = "transmitted-dcbx-tlvs"];
                  uint32 received_dcbx_tlvs = 10 [json_name = "received-dcbx-tlvs"];
                  uint32 transmitted_med_tlvs = 11 [json_name = "transmitted-med-tlvs"];
                  uint32 received_med_tlvs = 12 [json_name = "received-med-tlvs"];
                  uint32 received_network_card_id_tlvs = 13 [json_name = "received-network-card-id-tlvs"];
                  string last_cleared_time = 14 [json_name = "last-cleared-time"];
               }
               Statistics statistics = 5 [json_name = "statistics"];
            }
            Session session = 1 [json_name = "session"];
         }
         SubInterfaceLldp sub_interface_lldp = 134 [json_name = "sub-interface-lldp"];
         message MacAccounting {
            message MacAccountingCounters {
               message MacAccountingCounter {
                  string mac_address = 1 [json_name = "mac-address"];
                  uint64 input_frames = 2 [json_name = "input-frames"];
                  uint64 input_bytes = 3 [json_name = "input-bytes"];
                  uint64 output_frames = 4 [json_name = "output-frames"];
                  uint64 output_bytes = 5 [json_name = "output-bytes"];
               }
               repeated MacAccountingCounter mac_accounting_counter = 1 [json_name = "mac-accounting-counter"];
            }
            MacAccountingCounters mac_accounting_counters = 1 [json_name = "mac-accounting-counters"];
         }
         MacAccounting mac_accounting = 135 [json_name = "mac-accounting"];
         message SliceCapabilitys {
            message SliceCapability {
               enum Capability {
                  Capability_FLEXX_PHYX_PORT = 0;
                  Capability_FLEXEX_PORT = 1;
                  Capability_CHANNELX_PHYX_PORT = 2;
                  Capability_CHANNELIZEDX_PHYX_PORT = 3;
                  Capability_FGX_CLIENTX_SLICEX_PORT = 4;
                  Capability_FLEXEX_CHANNELX_PHYX_PORT = 5;
               };
               Capability capability = 1 [json_name = "capability"];
            }
            repeated SliceCapability slice_capability = 1 [json_name = "slice-capability"];
         }
         SliceCapabilitys slice_capabilitys = 136 [json_name = "slice-capabilitys"];
         message NetSliceBinding {
            uint32 slice_id = 1 [json_name = "slice-id"];
         }
         NetSliceBinding net_slice_binding = 137 [json_name = "net-slice-binding"];
         message NetSlices {
            message NetSlice {
               uint32 slice_id = 1 [json_name = "slice-id"];
               message FlexChannelStatistics {
                  enum ServiceClass {
                     INVALID_ENUM_VALUE_ServiceClass = 0;
                     ServiceClass_BE = 1;
                     ServiceClass_AF1 = 2;
                     ServiceClass_AF2 = 3;
                     ServiceClass_AF3 = 4;
                     ServiceClass_AF4 = 5;
                     ServiceClass_EF = 6;
                     ServiceClass_CS6 = 7;
                     ServiceClass_CS7 = 8;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint64 passed_packets = 2 [json_name = "passed-packets"];
                  uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                  uint64 dropped_packets = 4 [json_name = "dropped-packets"];
                  uint64 dropped_bytes = 5 [json_name = "dropped-bytes"];
                  uint64 passed_pps = 6 [json_name = "passed-pps"];
                  uint64 passed_bps = 7 [json_name = "passed-bps"];
                  uint64 dropped_pps = 8 [json_name = "dropped-pps"];
                  uint64 dropped_bps = 9 [json_name = "dropped-bps"];
               }
               FlexChannelStatistics flex_channel_statistics = 2 [json_name = "flex-channel-statistics"];
               message Mode_DataPlaneMode {
                  bool data_plane = 1 [json_name = "data-plane"];
               }
               message Mode_FlexChannelMode {
                  uint32 flex_channel = 1 [json_name = "flex-channel"];
                  message ExclusivePirMode_FlexChannelPirMode {
                     uint32 flex_channel_pir = 1 [json_name = "flex-channel-pir"];
                  }
                  message ExclusivePirMode_ExclusiveMode {
                     bool exclusive = 1 [json_name = "exclusive"];
                  }
                  oneof ExclusivePirMode {
                     ExclusivePirMode_FlexChannelPirMode exclusive_pir_mode_flex_channel_pir_mode = 2 [json_name = "flex-channel-pir-mode"];
                     ExclusivePirMode_ExclusiveMode exclusive_pir_mode_exclusive_mode = 3 [json_name = "exclusive-mode"];
                  }
               }
               oneof Mode {
                  Mode_DataPlaneMode mode_data_plane_mode = 3 [json_name = "data-plane-mode"];
                  Mode_FlexChannelMode mode_flex_channel_mode = 4 [json_name = "flex-channel-mode"];
               }
               message FlexChannelStatisticss {
                  message FlexChannelStatistics {
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 1 [json_name = "service-class"];
                     uint64 passed_packets = 2 [json_name = "passed-packets"];
                     uint64 passed_bytes = 3 [json_name = "passed-bytes"];
                     uint64 dropped_packets = 4 [json_name = "dropped-packets"];
                     uint64 dropped_bytes = 5 [json_name = "dropped-bytes"];
                     uint64 passed_pps = 6 [json_name = "passed-pps"];
                     uint64 passed_bps = 7 [json_name = "passed-bps"];
                     uint64 dropped_pps = 8 [json_name = "dropped-pps"];
                     uint64 dropped_bps = 9 [json_name = "dropped-bps"];
                  }
                  repeated FlexChannelStatistics flex_channel_statistics = 1 [json_name = "flex-channel-statistics"];
               }
               FlexChannelStatisticss flex_channel_statisticss = 5 [json_name = "flex-channel-statisticss"];
            }
            repeated NetSlice net_slice = 1 [json_name = "net-slice"];
         }
         NetSlices net_slices = 138 [json_name = "net-slices"];
         message PppNet {
            message Ppp {
               message InterfaceLink {
                  uint32 time_interval = 1 [json_name = "time-interval"];
               }
               InterfaceLink interface_link = 1 [json_name = "interface-link"];
               message PppBase {
                  uint32 negotiation_timeout = 1 [json_name = "negotiation-timeout"];
                  uint32 dead_link_time = 2 [json_name = "dead-link-time"];
                  string peer_ip_address = 3 [json_name = "peer-ip-address"];
                  enum MruNegotiationType {
                     MruNegotiationType_IPV4 = 0;
                     MruNegotiationType_IPV6 = 1;
                  };
                  MruNegotiationType mru_negotiation_type = 4 [json_name = "mru-negotiation-type"];
                  enum MagicNumberCheckFlag {
                     MagicNumberCheckFlag_DISABLE = 0;
                     MagicNumberCheckFlag_ENABLE = 1;
                  };
                  MagicNumberCheckFlag magic_number_check_flag = 5 [json_name = "magic-number-check-flag"];
                  enum OsicpNegotiationFlag {
                     OsicpNegotiationFlag_DISABLE = 0;
                     OsicpNegotiationFlag_ENABLE = 1;
                  };
                  OsicpNegotiationFlag osicp_negotiation_flag = 6 [json_name = "osicp-negotiation-flag"];
                  enum MplscpNegotiationFlag {
                     MplscpNegotiationFlag_DISABLE = 0;
                     MplscpNegotiationFlag_ENABLE = 1;
                  };
                  MplscpNegotiationFlag mplscp_negotiation_flag = 7 [json_name = "mplscp-negotiation-flag"];
                  enum SuppressHostrouteFlag {
                     SuppressHostrouteFlag_DISABLE = 0;
                     SuppressHostrouteFlag_ENABLE = 1;
                  };
                  SuppressHostrouteFlag suppress_hostroute_flag = 8 [json_name = "suppress-hostroute-flag"];
                  enum AdmitAnyDns {
                     AdmitAnyDns_DISABLE = 0;
                     AdmitAnyDns_ENABLE = 1;
                  };
                  AdmitAnyDns admit_any_dns = 9 [json_name = "admit-any-dns"];
                  string primary_dns_address = 10 [json_name = "primary-dns-address"];
                  string second_dns_address = 11 [json_name = "second-dns-address"];
                  enum PapAuthenFlag {
                     PapAuthenFlag_DISABLE = 0;
                     PapAuthenFlag_ENABLE = 1;
                  };
                  PapAuthenFlag pap_authen_flag = 12 [json_name = "pap-authen-flag"];
                  enum ChapAuthenFlag {
                     ChapAuthenFlag_DISABLE = 0;
                     ChapAuthenFlag_ENABLE = 1;
                  };
                  ChapAuthenFlag chap_authen_flag = 13 [json_name = "chap-authen-flag"];
                  string pap_user_name = 14 [json_name = "pap-user-name"];
                  string pap_password = 15 [json_name = "pap-password"];
                  string chap_user_name = 16 [json_name = "chap-user-name"];
                  string chap_password = 17 [json_name = "chap-password"];
               }
               PppBase ppp_base = 2 [json_name = "ppp-base"];
               message PppLinkInfo {
                  enum LcpState {
                     LcpState_INITIAL = 0;
                     LcpState_STARTING = 1;
                     LcpState_CLOSED = 2;
                     LcpState_STOPPED = 3;
                     LcpState_CLOSING = 4;
                     LcpState_STOPPING = 5;
                     LcpState_REQUESTX_SENT = 6;
                     LcpState_ACKX_RECEIVED = 7;
                     LcpState_ACKX_SENT = 8;
                     LcpState_OPENED = 9;
                     LcpState_NONE = 10;
                  };
                  LcpState lcp_state = 1 [json_name = "lcp-state"];
                  enum IpcpState {
                     IpcpState_INITIAL = 0;
                     IpcpState_STARTING = 1;
                     IpcpState_CLOSED = 2;
                     IpcpState_STOPPED = 3;
                     IpcpState_CLOSING = 4;
                     IpcpState_STOPPING = 5;
                     IpcpState_REQUESTX_SENT = 6;
                     IpcpState_ACKX_RECEIVED = 7;
                     IpcpState_ACKX_SENT = 8;
                     IpcpState_OPENED = 9;
                     IpcpState_NONE = 10;
                  };
                  IpcpState ipcp_state = 2 [json_name = "ipcp-state"];
                  uint32 local_mru = 3 [json_name = "local-mru"];
                  uint32 peer_mru = 4 [json_name = "peer-mru"];
                  uint32 magic_number = 5 [json_name = "magic-number"];
                  uint32 negotiation_timeout = 6 [json_name = "negotiation-timeout"];
                  string peer_ip_address = 7 [json_name = "peer-ip-address"];
                  enum MplscpState {
                     MplscpState_INITIAL = 0;
                     MplscpState_STARTING = 1;
                     MplscpState_CLOSED = 2;
                     MplscpState_STOPPED = 3;
                     MplscpState_CLOSING = 4;
                     MplscpState_STOPPING = 5;
                     MplscpState_REQUESTX_SENT = 6;
                     MplscpState_ACKX_RECEIVED = 7;
                     MplscpState_ACKX_SENT = 8;
                     MplscpState_OPENED = 9;
                     MplscpState_NONE = 10;
                  };
                  MplscpState mplscp_state = 8 [json_name = "mplscp-state"];
                  enum OsicpState {
                     OsicpState_INITIAL = 0;
                     OsicpState_STARTING = 1;
                     OsicpState_CLOSED = 2;
                     OsicpState_STOPPED = 3;
                     OsicpState_CLOSING = 4;
                     OsicpState_STOPPING = 5;
                     OsicpState_REQUESTX_SENT = 6;
                     OsicpState_ACKX_RECEIVED = 7;
                     OsicpState_ACKX_SENT = 8;
                     OsicpState_OPENED = 9;
                     OsicpState_NONE = 10;
                  };
                  OsicpState osicp_state = 9 [json_name = "osicp-state"];
                  enum Ip6CpState {
                     Ip6CpState_INITIAL = 0;
                     Ip6CpState_STARTING = 1;
                     Ip6CpState_CLOSED = 2;
                     Ip6CpState_STOPPED = 3;
                     Ip6CpState_CLOSING = 4;
                     Ip6CpState_STOPPING = 5;
                     Ip6CpState_REQUESTX_SENT = 6;
                     Ip6CpState_ACKX_RECEIVED = 7;
                     Ip6CpState_ACKX_SENT = 8;
                     Ip6CpState_OPENED = 9;
                     Ip6CpState_NONE = 10;
                  };
                  Ip6CpState ip6cp_state = 10 [json_name = "ip6cp-state"];
                  uint32 reuse_time = 11 [json_name = "reuse-time"];
                  message DownEvents {
                     message DownEvent {
                        enum LinkType {
                           LinkType_LCP = 0;
                           LinkType_IPCP = 1;
                        };
                        LinkType link_type = 1 [json_name = "link-type"];
                        string down_time1 = 2 [json_name = "down-time1"];
                        string down_reason1 = 3 [json_name = "down-reason1"];
                        string down_time2 = 4 [json_name = "down-time2"];
                        string down_reason2 = 5 [json_name = "down-reason2"];
                        string down_time3 = 6 [json_name = "down-time3"];
                        string down_reason3 = 7 [json_name = "down-reason3"];
                        string down_time4 = 8 [json_name = "down-time4"];
                        string down_reason4 = 9 [json_name = "down-reason4"];
                        string down_time5 = 10 [json_name = "down-time5"];
                        string down_reason5 = 11 [json_name = "down-reason5"];
                        string down_time6 = 12 [json_name = "down-time6"];
                        string down_reason6 = 13 [json_name = "down-reason6"];
                        string down_time7 = 14 [json_name = "down-time7"];
                        string down_reason7 = 15 [json_name = "down-reason7"];
                        string down_time8 = 16 [json_name = "down-time8"];
                        string down_reason8 = 17 [json_name = "down-reason8"];
                        string down_time9 = 18 [json_name = "down-time9"];
                        string down_reason9 = 19 [json_name = "down-reason9"];
                        string down_time10 = 20 [json_name = "down-time10"];
                        string down_reason10 = 21 [json_name = "down-reason10"];
                     }
                     repeated DownEvent down_event = 1 [json_name = "down-event"];
                  }
                  DownEvents down_events = 12 [json_name = "down-events"];
               }
               PppLinkInfo ppp_link_info = 3 [json_name = "ppp-link-info"];
               message PppLink {
                  message PortAlarm {
                     bool crc_error_down = 1 [json_name = "crc-error-down"];
                     enum CrcWordLength {
                        INVALID_ENUM_VALUE_CrcWordLength = 0;
                        CrcWordLength_CRC16 = 16;
                        CrcWordLength_CRC32 = 32;
                     };
                     CrcWordLength crc_word_length = 2 [json_name = "crc-word-length"];
                     message AlarmType_HighLowThreshold {
                        message CrcErrorThreshold {
                           uint32 high_threshold = 1 [json_name = "high-threshold"];
                           uint32 low_threshold = 2 [json_name = "low-threshold"];
                           uint32 interval = 3 [json_name = "interval"];
                        }
                        CrcErrorThreshold crc_error_threshold = 1 [json_name = "crc-error-threshold"];
                     }
                     message AlarmType_BitErrorRatio {
                        message BitErrorRatio9 {
                           uint32 bit_alarm_coefficient = 1 [json_name = "bit-alarm-coefficient"];
                           uint32 bit_alarm_exponent = 2 [json_name = "bit-alarm-exponent"];
                           uint32 bit_resume_coefficient = 3 [json_name = "bit-resume-coefficient"];
                           uint32 bit_resume_exponent = 4 [json_name = "bit-resume-exponent"];
                        }
                        BitErrorRatio9 bit_error_ratio = 1 [json_name = "bit-error-ratio"];
                     }
                     message AlarmType_PacketErrorRatio {
                        message PacketErrorRatio9 {
                           uint32 packet_alarm_coefficient = 1 [json_name = "packet-alarm-coefficient"];
                           uint32 packet_alarm_exponent = 2 [json_name = "packet-alarm-exponent"];
                           uint32 packet_resume_coefficient = 3 [json_name = "packet-resume-coefficient"];
                           uint32 packet_resume_exponent = 4 [json_name = "packet-resume-exponent"];
                           message CrcSample {
                              uint32 sample_window_factor = 1 [json_name = "sample-window-factor"];
                              uint32 child_window_max_number = 2 [json_name = "child-window-max-number"];
                              uint32 child_window_alarm_number = 3 [json_name = "child-window-alarm-number"];
                              uint32 child_window_resume_number = 4 [json_name = "child-window-resume-number"];
                           }
                           CrcSample crc_sample = 5 [json_name = "crc-sample"];
                        }
                        PacketErrorRatio9 packet_error_ratio = 1 [json_name = "packet-error-ratio"];
                     }
                     oneof AlarmType {
                        AlarmType_HighLowThreshold alarm_type_high_low_threshold = 3 [json_name = "high-low-threshold"];
                        AlarmType_BitErrorRatio alarm_type_bit_error_ratio = 4 [json_name = "bit-error-ratio"];
                        AlarmType_PacketErrorRatio alarm_type_packet_error_ratio = 5 [json_name = "packet-error-ratio"];
                     }
                  }
                  PortAlarm port_alarm = 1 [json_name = "port-alarm"];
               }
               PppLink ppp_link = 4 [json_name = "ppp-link"];
            }
            Ppp ppp = 1 [json_name = "ppp"];
            message MultilinkPpp {
               message MpBase {
                  enum FragmentSize {
                     FragmentSize_FRAGMENTX_128 = 0;
                     FragmentSize_FRAGMENTX_256 = 1;
                     FragmentSize_FRAGMENTX_512 = 2;
                     FragmentSize_NOX_FRAGMENT = 3;
                     FragmentSize_FRAGMENTX_64 = 4;
                  };
                  FragmentSize fragment_size = 1 [json_name = "fragment-size"];
                  uint32 minimum_threshold = 2 [json_name = "minimum-threshold"];
                  uint32 mrru = 3 [json_name = "mrru"];
                  enum ShortSequence {
                     ShortSequence_DISABLE = 0;
                     ShortSequence_ENABLE = 1;
                  };
                  ShortSequence short_sequence = 4 [json_name = "short-sequence"];
                  enum Discriminator {
                     Discriminator_DISABLE = 0;
                     Discriminator_ENABLE = 1;
                  };
                  Discriminator discriminator = 5 [json_name = "discriminator"];
                  message TimeDelayDetect {
                     enum DetectEnable {
                        DetectEnable_DISABLE = 0;
                        DetectEnable_ENABLE = 1;
                     };
                     DetectEnable detect_enable = 1 [json_name = "detect-enable"];
                     uint32 detect_threshold = 2 [json_name = "detect-threshold"];
                  }
                  TimeDelayDetect time_delay_detect = 6 [json_name = "time-delay-detect"];
                  message QosAttribute {
                     uint32 drop_timeout = 1 [json_name = "drop-timeout"];
                     enum DynamicBandwidthEnable {
                        DynamicBandwidthEnable_DISABLE = 0;
                        DynamicBandwidthEnable_ENABLE = 1;
                     };
                     DynamicBandwidthEnable dynamic_bandwidth_enable = 2 [json_name = "dynamic-bandwidth-enable"];
                     enum LowLatencyEnable {
                        LowLatencyEnable_DISABLE = 0;
                        LowLatencyEnable_ENABLE = 1;
                     };
                     LowLatencyEnable low_latency_enable = 3 [json_name = "low-latency-enable"];
                     enum PacketPriority {
                        PacketPriority_NORMAL = 0;
                        PacketPriority_HIGH = 1;
                     };
                     PacketPriority packet_priority = 4 [json_name = "packet-priority"];
                     enum PacketQueueDepth {
                        PacketQueueDepth_DEPTH256 = 0;
                        PacketQueueDepth_DEPTH512 = 1;
                        PacketQueueDepth_DEPTH1024 = 2;
                        PacketQueueDepth_DEPTH2048 = 3;
                        PacketQueueDepth_DEPTH4096 = 4;
                     };
                     PacketQueueDepth packet_queue_depth = 5 [json_name = "packet-queue-depth"];
                  }
                  QosAttribute qos_attribute = 7 [json_name = "qos-attribute"];
                  message CrcTrapThreshold {
                     uint32 alarm_coefficient = 1 [json_name = "alarm-coefficient"];
                     uint32 alarm_exponent = 2 [json_name = "alarm-exponent"];
                     uint32 resume_coefficient = 3 [json_name = "resume-coefficient"];
                     uint32 resume_exponent = 4 [json_name = "resume-exponent"];
                     enum TriggerService {
                        INVALID_ENUM_VALUE_TriggerService = 0;
                        TriggerService_LSP = 1;
                        TriggerService_SECTION = 2;
                     };
                     TriggerService trigger_service = 5 [json_name = "trigger-service"];
                  }
                  CrcTrapThreshold crc_trap_threshold = 8 [json_name = "crc-trap-threshold"];
                  message LospktTrapThreshold {
                     uint32 alarm_coefficient = 1 [json_name = "alarm-coefficient"];
                     uint32 alarm_exponent = 2 [json_name = "alarm-exponent"];
                     uint32 resume_coefficient = 3 [json_name = "resume-coefficient"];
                     uint32 resume_exponent = 4 [json_name = "resume-exponent"];
                  }
                  LospktTrapThreshold lospkt_trap_threshold = 9 [json_name = "lospkt-trap-threshold"];
               }
               MpBase mp_base = 1 [json_name = "mp-base"];
               message Damping {
                  uint32 detect_time = 1 [json_name = "detect-time"];
                  uint32 flap_count = 2 [json_name = "flap-count"];
                  uint32 damping_time = 3 [json_name = "damping-time"];
               }
               Damping damping = 2 [json_name = "damping"];
               message MpMembers {
                  message MpMember {
                     string member_interface = 1 [json_name = "member-interface"];
                     enum PhysicalStatus {
                        PhysicalStatus_DOWN = 0;
                        PhysicalStatus_UP = 1;
                        PhysicalStatus_ADMINX_SHUTDOWN = 2;
                     };
                     PhysicalStatus physical_status = 2 [json_name = "physical-status"];
                     enum ProtocolStatus {
                        ProtocolStatus_DOWN = 0;
                        ProtocolStatus_UP = 1;
                        ProtocolStatus_DAMPING = 2;
                     };
                     ProtocolStatus protocol_status = 3 [json_name = "protocol-status"];
                     message TimeDelay {
                        uint32 max_time_delay = 1 [json_name = "max-time-delay"];
                        uint32 last_record_1 = 2 [json_name = "last-record-1"];
                        uint32 last_record_2 = 3 [json_name = "last-record-2"];
                        uint32 last_record_3 = 4 [json_name = "last-record-3"];
                     }
                     TimeDelay time_delay = 4 [json_name = "time-delay"];
                  }
                  repeated MpMember mp_member = 1 [json_name = "mp-member"];
               }
               MpMembers mp_members = 3 [json_name = "mp-members"];
               message MpGroupInfo {
                  uint32 valid_member_links = 1 [json_name = "valid-member-links"];
                  uint32 valid_member_slots = 2 [json_name = "valid-member-slots"];
                  uint32 lost_fragments = 3 [json_name = "lost-fragments"];
                  uint32 reordered_fragments = 4 [json_name = "reordered-fragments"];
                  uint32 unassigned_fragments = 5 [json_name = "unassigned-fragments"];
                  uint32 interleaved_fragments = 6 [json_name = "interleaved-fragments"];
                  uint32 received_sequences = 7 [json_name = "received-sequences"];
                  uint32 sent_sequences = 8 [json_name = "sent-sequences"];
               }
               MpGroupInfo mp_group_info = 4 [json_name = "mp-group-info"];
            }
            MultilinkPpp multilink_ppp = 2 [json_name = "multilink-ppp"];
            message CrcTrapThreshold {
               message TrapType_HighLowThreshold {
                  uint32 high_threshold = 1 [json_name = "high-threshold"];
                  uint32 low_threshold = 2 [json_name = "low-threshold"];
                  uint32 interval = 3 [json_name = "interval"];
               }
               message TrapType_BitErrorRatio {
                  uint32 bit_alarm_coefficient = 1 [json_name = "bit-alarm-coefficient"];
                  uint32 bit_alarm_exponent = 2 [json_name = "bit-alarm-exponent"];
                  uint32 bit_resume_coefficient = 3 [json_name = "bit-resume-coefficient"];
                  uint32 bit_resume_exponent = 4 [json_name = "bit-resume-exponent"];
               }
               message TrapType_PacketErrorRatio {
                  uint32 packet_alarm_coefficient = 1 [json_name = "packet-alarm-coefficient"];
                  uint32 packet_alarm_exponent = 2 [json_name = "packet-alarm-exponent"];
                  uint32 packet_resume_coefficient = 3 [json_name = "packet-resume-coefficient"];
                  uint32 packet_resume_exponent = 4 [json_name = "packet-resume-exponent"];
                  uint32 sample_window_factor = 5 [json_name = "sample-window-factor"];
                  uint32 child_window_max_number = 6 [json_name = "child-window-max-number"];
                  uint32 child_window_alarm_number = 7 [json_name = "child-window-alarm-number"];
                  uint32 child_window_resume_number = 8 [json_name = "child-window-resume-number"];
               }
               oneof TrapType {
                  TrapType_HighLowThreshold trap_type_high_low_threshold = 1 [json_name = "high-low-threshold"];
                  TrapType_BitErrorRatio trap_type_bit_error_ratio = 2 [json_name = "bit-error-ratio"];
                  TrapType_PacketErrorRatio trap_type_packet_error_ratio = 3 [json_name = "packet-error-ratio"];
               }
               enum CrcErrorDown {
                  CrcErrorDown_DISABLE = 0;
                  CrcErrorDown_ENABLE = 1;
               };
               CrcErrorDown crc_error_down = 4 [json_name = "crc-error-down"];
               enum CrcWordLength {
                  INVALID_ENUM_VALUE_CrcWordLength = 0;
                  CrcWordLength_CRC16 = 16;
                  CrcWordLength_CRC32 = 32;
               };
               CrcWordLength crc_word_length = 5 [json_name = "crc-word-length"];
            }
            CrcTrapThreshold crc_trap_threshold = 3 [json_name = "crc-trap-threshold"];
            message CrcStatistics {
               uint64 input_short_packets = 1 [json_name = "input-short-packets"];
               uint64 input_long_packets = 2 [json_name = "input-long-packets"];
               uint64 input_crc_packets = 3 [json_name = "input-crc-packets"];
               uint64 input_lost_packets = 4 [json_name = "input-lost-packets"];
               uint64 output_lost_packets = 5 [json_name = "output-lost-packets"];
               uint64 output_overrun_packets = 6 [json_name = "output-overrun-packets"];
               uint64 output_underrun_packets = 7 [json_name = "output-underrun-packets"];
            }
            CrcStatistics crc_statistics = 4 [json_name = "crc-statistics"];
            message TransmissionAlarmDown {
               enum Pais {
                  Pais_DISABLE = 0;
                  Pais_ENABLE = 1;
               };
               Pais pais = 1 [json_name = "pais"];
               enum Prdi {
                  Prdi_DISABLE = 0;
                  Prdi_ENABLE = 1;
               };
               Prdi prdi = 2 [json_name = "prdi"];
               enum Oof {
                  Oof_DISABLE = 0;
                  Oof_ENABLE = 1;
               };
               Oof oof = 3 [json_name = "oof"];
            }
            TransmissionAlarmDown transmission_alarm_down = 5 [json_name = "transmission-alarm-down"];
         }
         PppNet ppp_net = 139 [json_name = "ppp-net"];
         message BandwidthType_BandwidthMbps {
            uint32 bandwidth = 1 [json_name = "bandwidth"];
         }
         message BandwidthType_BandwidthKbps {
            uint32 bandwidth_kbps = 1 [json_name = "bandwidth-kbps"];
         }
         oneof BandwidthType {
            BandwidthType_BandwidthMbps bandwidth_type_bandwidth_mbps = 141 [json_name = "bandwidth-mbps"];
            BandwidthType_BandwidthKbps bandwidth_type_bandwidth_kbps = 142 [json_name = "bandwidth-kbps"];
         }
         message Damping_IgnoreDamp {
            message IgnoreDamp5 {
               bool ignore_global_damp = 1 [json_name = "ignore-global-damp"];
            }
            IgnoreDamp5 ignore_damp = 1 [json_name = "ignore-damp"];
         }
         message Damping_Damp {
            message Damp5 {
               bool tx_off = 1 [json_name = "tx-off"];
               message Level_Auto {
                  message Auto7 {
                     enum Level {
                        Level_LIGHT = 0;
                        Level_MIDDLE = 1;
                        Level_HEAVY = 2;
                     };
                     Level level = 1 [json_name = "level"];
                  }
                  Auto7 auto7 = 1 [json_name = "auto"];
               }
               message Level_Manual {
                  message Manual7 {
                     uint32 suppress = 1 [json_name = "suppress"];
                     uint32 reuse = 2 [json_name = "reuse"];
                     uint32 max_suppress_time = 3 [json_name = "max-suppress-time"];
                     uint32 half_life_period = 4 [json_name = "half-life-period"];
                  }
                  Manual7 manual7 = 1 [json_name = "manual"];
               }
               oneof Level {
                  Level_Auto level_auto = 2 [json_name = "auto"];
                  Level_Manual level_manual = 3 [json_name = "manual"];
               }
            }
            Damp5 damp5 = 1 [json_name = "damp"];
         }
         oneof Damping {
            Damping_IgnoreDamp damping_ignore_damp = 143 [json_name = "ignore-damp"];
            Damping_Damp damping_damp = 144 [json_name = "damp"];
         }
         message VirtualPosition {
            string vnfc_name = 1 [json_name = "vnfc-name"];
            uint32 board_id = 2 [json_name = "board-id"];
            uint32 port_id = 3 [json_name = "port-id"];
         }
         VirtualPosition virtual_position = 145 [json_name = "virtual-position"];
         message Emdi {
            repeated string emdi_channel_name = 1 [json_name = "emdi-channel-name"];
         }
         Emdi emdi = 146 [json_name = "emdi"];
         message Ifit {
            message Mappings {
               message Mapping {
                  enum MappingType {
                     INVALID_ENUM_VALUE_MappingType = 0;
                     MappingType_INGRESS = 1;
                     MappingType_EGRESS = 2;
                  };
                  MappingType mapping_type = 1 [json_name = "mapping-type"];
               }
               repeated Mapping mapping = 1 [json_name = "mapping"];
            }
            Mappings mappings = 1 [json_name = "mappings"];
            message MappingColorFlagEgress {
               bool mapping_color_flag_egress = 1 [json_name = "mapping-color-flag-egress"];
            }
            MappingColorFlagEgress mapping_color_flag_egress = 2 [json_name = "mapping-color-flag-egress"];
         }
         Ifit ifit = 147 [json_name = "ifit"];
         message Nvo3Ipv6VtepStatistics {
            message Nvo3Ipv6VtepStatistic {
               uint32 vni = 1 [json_name = "vni"];
               string peer = 2 [json_name = "peer"];
               enum Mode {
                  Mode_L2 = 0;
                  Mode_L3 = 1;
                  Mode_BOTH = 2;
               };
               Mode mode = 3 [json_name = "mode"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
                  Direction_BIDIRECTION = 2;
               };
               Direction direction = 4 [json_name = "direction"];
               message Collections {
                  message Collection {
                     string source_addr = 1 [json_name = "source-addr"];
                     uint64 send_bits_rate = 2 [json_name = "send-bits-rate"];
                     uint64 send_pkts_rate = 3 [json_name = "send-pkts-rate"];
                     uint64 send_unicast_pkts = 4 [json_name = "send-unicast-pkts"];
                     uint64 send_multicast_pkts = 5 [json_name = "send-multicast-pkts"];
                     uint64 send_broadcast_pkts = 6 [json_name = "send-broadcast-pkts"];
                     uint64 send_total_bytes = 7 [json_name = "send-total-bytes"];
                     uint64 send_total_pkts = 8 [json_name = "send-total-pkts"];
                     uint64 receive_bits_rate = 9 [json_name = "receive-bits-rate"];
                     uint64 receive_pkts_rate = 10 [json_name = "receive-pkts-rate"];
                     uint64 receive_unicast_pkts = 11 [json_name = "receive-unicast-pkts"];
                     uint64 receive_multicast_pkts = 12 [json_name = "receive-multicast-pkts"];
                     uint64 receive_broadcast_pkts = 13 [json_name = "receive-broadcast-pkts"];
                     uint64 receive_total_bytes = 14 [json_name = "receive-total-bytes"];
                     uint64 receive_total_pkts = 15 [json_name = "receive-total-pkts"];
                     uint64 drop_unicast_pkts = 16 [json_name = "drop-unicast-pkts"];
                     uint64 drop_multicast_pkts = 17 [json_name = "drop-multicast-pkts"];
                     uint64 drop_broadcast_pkts = 18 [json_name = "drop-broadcast-pkts"];
                  }
                  repeated Collection collection = 1 [json_name = "collection"];
               }
               Collections collections = 5 [json_name = "collections"];
            }
            repeated Nvo3Ipv6VtepStatistic nvo3_ipv6_vtep_statistic = 1 [json_name = "nvo3-ipv6-vtep-statistic"];
         }
         Nvo3Ipv6VtepStatistics nvo3_ipv6_vtep_statistics = 148 [json_name = "nvo3-ipv6-vtep-statistics"];
         message Nvo3TunnelStatistics {
            message Nvo3TunnelStatistic {
               uint32 vni = 1 [json_name = "vni"];
               string source = 2 [json_name = "source"];
               string peer = 3 [json_name = "peer"];
               uint64 send_bits_rate = 4 [json_name = "send-bits-rate"];
               uint64 send_pkts_rate = 5 [json_name = "send-pkts-rate"];
               uint64 send_unicast_pkts = 6 [json_name = "send-unicast-pkts"];
               uint64 send_multicast_pkts = 7 [json_name = "send-multicast-pkts"];
               uint64 send_broadcast_pkts = 8 [json_name = "send-broadcast-pkts"];
               uint64 send_total_bytes = 9 [json_name = "send-total-bytes"];
               uint64 send_total_pkts = 10 [json_name = "send-total-pkts"];
               uint64 receive_bits_rate = 11 [json_name = "receive-bits-rate"];
               uint64 receive_pkts_rate = 12 [json_name = "receive-pkts-rate"];
               uint64 receive_unicast_pkts = 13 [json_name = "receive-unicast-pkts"];
               uint64 receive_multicast_pkts = 14 [json_name = "receive-multicast-pkts"];
               uint64 receive_broadcast_pkts = 15 [json_name = "receive-broadcast-pkts"];
               uint64 receive_total_bytes = 16 [json_name = "receive-total-bytes"];
               uint64 receive_total_pkts = 17 [json_name = "receive-total-pkts"];
               uint64 drop_unicast_pkts = 18 [json_name = "drop-unicast-pkts"];
               uint64 drop_multicast_pkts = 19 [json_name = "drop-multicast-pkts"];
               uint64 drop_broadcast_pkts = 20 [json_name = "drop-broadcast-pkts"];
            }
            repeated Nvo3TunnelStatistic nvo3_tunnel_statistic = 1 [json_name = "nvo3-tunnel-statistic"];
         }
         Nvo3TunnelStatistics nvo3_tunnel_statistics = 149 [json_name = "nvo3-tunnel-statistics"];
         message Sflow {
            message BindCollectors {
               message BindCollector {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 collector_id = 2 [json_name = "collector-id"];
                  uint32 secondary_collector_id = 3 [json_name = "secondary-collector-id"];
                  uint32 flow_sampling_rate = 4 [json_name = "flow-sampling-rate"];
               }
               repeated BindCollector bind_collector = 1 [json_name = "bind-collector"];
            }
            BindCollectors bind_collectors = 1 [json_name = "bind-collectors"];
            message Sampling {
               uint32 collector_id = 1 [json_name = "collector-id"];
               uint32 secondary_collector_id = 2 [json_name = "secondary-collector-id"];
               uint32 flow_sampling_rate = 3 [json_name = "flow-sampling-rate"];
               bool inbound_direction = 4 [json_name = "inbound-direction"];
               bool outbound_direction = 5 [json_name = "outbound-direction"];
            }
            Sampling sampling = 2 [json_name = "sampling"];
            message Counter {
               uint32 collector_id = 1 [json_name = "collector-id"];
               uint32 secondary_collector_id = 2 [json_name = "secondary-collector-id"];
               uint32 interval = 3 [json_name = "interval"];
            }
            Counter counter = 3 [json_name = "counter"];
         }
         Sflow sflow = 150 [json_name = "sflow"];
         message DhcpRelayIf {
            bool is_enable = 1 [json_name = "is-enable"];
            enum ReplyPacketPolicy {
               INVALID_ENUM_VALUE_ReplyPacketPolicy = 0;
               ReplyPacketPolicy_BROADCASTX_ALWAYS = 1;
            };
            ReplyPacketPolicy reply_packet_policy = 2 [json_name = "reply-packet-policy"];
            message Option82 {
               bool subscriber_id_enable = 1 [json_name = "subscriber-id-enable"];
               enum SubscriberIdMode {
                  INVALID_ENUM_VALUE_SubscriberIdMode = 0;
                  SubscriberIdMode_SELFX_DEFINE = 1;
               };
               SubscriberIdMode subscriber_id_mode = 2 [json_name = "subscriber-id-mode"];
               string subscriber_id_self_define_text = 3 [json_name = "subscriber-id-self-define-text"];
            }
            Option82 option82 = 3 [json_name = "option82"];
            message ServerAddresses {
               message ServerAddress {
                  string address = 1 [json_name = "address"];
                  bool is_vendor = 2 [json_name = "is-vendor"];
                  uint32 option_code = 3 [json_name = "option-code"];
                  string vendor_class = 4 [json_name = "vendor-class"];
               }
               repeated ServerAddress server_address = 1 [json_name = "server-address"];
            }
            ServerAddresses server_addresses = 4 [json_name = "server-addresses"];
         }
         DhcpRelayIf dhcp_relay_if = 151 [json_name = "dhcp-relay-if"];
         message InterfaceIpPool {
            message SelectType_Global {
               bool select_global = 1 [json_name = "select-global"];
            }
            message SelectType_Interface5 {
               message SelectInterface {
                  bool arpbind = 1 [json_name = "arpbind"];
                  message BootfileType_Plain {
                     string bootfile = 1 [json_name = "bootfile"];
                  }
                  message BootfileType_Cipher {
                     string bootfile_cipher = 1 [json_name = "bootfile-cipher"];
                  }
                  oneof BootfileType {
                     BootfileType_Plain bootfile_type_plain = 2 [json_name = "plain"];
                     BootfileType_Cipher bootfile_type_cipher = 3 [json_name = "cipher"];
                  }
                  string server_name = 4 [json_name = "server-name"];
                  string domain_name = 5 [json_name = "domain-name"];
                  enum NetbiosType {
                     INVALID_ENUM_VALUE_NetbiosType = 0;
                     NetbiosType_BX_NODE = 1;
                     NetbiosType_HX_NODE = 2;
                     NetbiosType_MX_NODE = 3;
                     NetbiosType_PX_NODE = 4;
                  };
                  NetbiosType netbios_type = 6 [json_name = "netbios-type"];
                  string next_server = 7 [json_name = "next-server"];
                  bool reserved_ip = 8 [json_name = "reserved-ip"];
                  enum Logging {
                     INVALID_ENUM_VALUE_Logging = 0;
                     Logging_ALLOCATIONX_FAIL = 1;
                     Logging_ALLOCATIONX_SUCCESS = 2;
                     Logging_RELEASE = 3;
                     Logging_RENEWX_FAIL = 4;
                     Logging_RENEWX_SUCCESS = 5;
                     Logging_DETECTX_CONFLICT = 6;
                     Logging_RECYCLEX_CONFLICT = 7;
                  };
                  repeated Logging logging = 9 [json_name = "logging"];
                  repeated string nbns_list = 10 [json_name = "nbns-list"];
                  repeated string gateway_list = 11 [json_name = "gateway-list"];
                  repeated uint32 force_insert_option = 12 [json_name = "force-insert-option"];
                  message Mask {
                     message MaskType_Mask8 {
                        string mask9 = 1 [json_name = "mask"];
                     }
                     message MaskType_Masklen {
                        uint32 masklen9 = 1 [json_name = "masklen"];
                     }
                     oneof MaskType {
                        MaskType_Mask8 mask_type_mask8 = 1 [json_name = "mask"];
                        MaskType_Masklen mask_type_masklen = 2 [json_name = "masklen"];
                     }
                  }
                  Mask mask = 13 [json_name = "mask"];
                  message Lease {
                     message TimeType_Limited {
                        uint32 day = 1 [json_name = "day"];
                        uint32 hour = 2 [json_name = "hour"];
                        uint32 minute = 3 [json_name = "minute"];
                     }
                     message TimeType_Unlimited {
                        bool unlimited9 = 1 [json_name = "unlimited"];
                     }
                     oneof TimeType {
                        TimeType_Limited time_type_limited = 1 [json_name = "limited"];
                        TimeType_Unlimited time_type_unlimited = 2 [json_name = "unlimited"];
                     }
                  }
                  Lease lease = 14 [json_name = "lease"];
                  message DnsList {
                     string interface_name = 1 [json_name = "interface-name"];
                     repeated string ip_address = 2 [json_name = "ip-address"];
                  }
                  DnsList dns_list = 15 [json_name = "dns-list"];
                  message IpRange {
                     string start_ip_address = 1 [json_name = "start-ip-address"];
                     string end_ip_address = 2 [json_name = "end-ip-address"];
                  }
                  IpRange ip_range = 16 [json_name = "ip-range"];
                  message SipServer {
                     message SipServerFormat_IpFormat {
                        string sip_server_ip1 = 1 [json_name = "sip-server-ip1"];
                        string sip_server_ip2 = 2 [json_name = "sip-server-ip2"];
                     }
                     message SipServerFormat_StringFormat {
                        string sip_server_name1 = 1 [json_name = "sip-server-name1"];
                        string sip_server_name2 = 2 [json_name = "sip-server-name2"];
                     }
                     oneof SipServerFormat {
                        SipServerFormat_IpFormat sip_server_format_ip_format = 1 [json_name = "ip-format"];
                        SipServerFormat_StringFormat sip_server_format_string_format = 2 [json_name = "string-format"];
                     }
                  }
                  SipServer sip_server = 17 [json_name = "sip-server"];
                  message AlarmIpUsed {
                     uint32 alarm_resume_percentage = 1 [json_name = "alarm-resume-percentage"];
                     uint32 alarm_percentage = 2 [json_name = "alarm-percentage"];
                  }
                  AlarmIpUsed alarm_ip_used = 18 [json_name = "alarm-ip-used"];
                  message ExcludedIpAddresses {
                     message ExcludedIpAddress {
                        string start_ip_address = 1 [json_name = "start-ip-address"];
                        string end_ip_address = 2 [json_name = "end-ip-address"];
                     }
                     repeated ExcludedIpAddress excluded_ip_address = 1 [json_name = "excluded-ip-address"];
                  }
                  ExcludedIpAddresses excluded_ip_addresses = 19 [json_name = "excluded-ip-addresses"];
                  message StaticBinds {
                     message StaticBind {
                        string static_bind_ip = 1 [json_name = "static-bind-ip"];
                        string static_bind_mac = 2 [json_name = "static-bind-mac"];
                        string description = 3 [json_name = "description"];
                     }
                     repeated StaticBind static_bind = 1 [json_name = "static-bind"];
                  }
                  StaticBinds static_binds = 20 [json_name = "static-binds"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        message OptionFormat_IpFormat {
                           repeated string ip_addresses = 1 [json_name = "ip-addresses"];
                        }
                        message OptionFormat_AsciiFormat {
                           string ascii_string = 1 [json_name = "ascii-string"];
                        }
                        message OptionFormat_HexFormat {
                           string hex_string = 1 [json_name = "hex-string"];
                        }
                        message OptionFormat_CipherFormat {
                           string cipher_string = 1 [json_name = "cipher-string"];
                        }
                        message OptionFormat_SubOptionsFormat {
                           message SubOptions {
                              message SubOption {
                                 uint32 sub_option_code = 1 [json_name = "sub-option-code"];
                                 message OptionFormat_SubIpFormat {
                                    repeated string ip_addresses = 1 [json_name = "ip-addresses"];
                                 }
                                 message OptionFormat_SubAsciiFormat {
                                    string ascii_string = 1 [json_name = "ascii-string"];
                                 }
                                 message OptionFormat_SubHexFormat {
                                    string hex_string = 1 [json_name = "hex-string"];
                                 }
                                 message OptionFormat_SubCipherFormat {
                                    string cipher_string = 1 [json_name = "cipher-string"];
                                 }
                                 oneof OptionFormat {
                                    OptionFormat_SubIpFormat option_format_sub_ip_format = 2 [json_name = "sub-ip-format"];
                                    OptionFormat_SubAsciiFormat option_format_sub_ascii_format = 3 [json_name = "sub-ascii-format"];
                                    OptionFormat_SubHexFormat option_format_sub_hex_format = 4 [json_name = "sub-hex-format"];
                                    OptionFormat_SubCipherFormat option_format_sub_cipher_format = 5 [json_name = "sub-cipher-format"];
                                 }
                              }
                              repeated SubOption sub_option = 1 [json_name = "sub-option"];
                           }
                           SubOptions sub_options = 1 [json_name = "sub-options"];
                        }
                        oneof OptionFormat {
                           OptionFormat_IpFormat option_format_ip_format = 2 [json_name = "ip-format"];
                           OptionFormat_AsciiFormat option_format_ascii_format = 3 [json_name = "ascii-format"];
                           OptionFormat_HexFormat option_format_hex_format = 4 [json_name = "hex-format"];
                           OptionFormat_CipherFormat option_format_cipher_format = 5 [json_name = "cipher-format"];
                           OptionFormat_SubOptionsFormat option_format_sub_options_format = 6 [json_name = "sub-options-format"];
                        }
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 21 [json_name = "options"];
                  message Option121S {
                     message Option121 {
                        string destination_ip = 1 [json_name = "destination-ip"];
                        uint32 mask = 2 [json_name = "mask"];
                        string gateway_address = 3 [json_name = "gateway-address"];
                     }
                     repeated Option121 option121 = 1 [json_name = "option121"];
                  }
                  Option121S option121s = 22 [json_name = "option121s"];
                  message Option184 {
                     string as_ip = 1 [json_name = "as-ip"];
                     string ncp_ip = 2 [json_name = "ncp-ip"];
                     uint32 voice_vlan = 3 [json_name = "voice-vlan"];
                     message Failover {
                        string failover_ip = 1 [json_name = "failover-ip"];
                        string dial_string = 2 [json_name = "dial-string"];
                     }
                     Failover failover = 4 [json_name = "failover"];
                  }
                  Option184 option184 = 23 [json_name = "option184"];
                  message AutoRecycle {
                     uint32 day = 1 [json_name = "day"];
                     uint32 hour = 2 [json_name = "hour"];
                     uint32 minute = 3 [json_name = "minute"];
                  }
                  AutoRecycle auto_recycle = 24 [json_name = "auto-recycle"];
                  message IpPoolStatistics {
                     uint32 used_ip_count = 1 [json_name = "used-ip-count"];
                     uint32 idle_ip_count = 2 [json_name = "idle-ip-count"];
                     uint32 expired_ip_count = 3 [json_name = "expired-ip-count"];
                     uint32 conflict_ip_count = 4 [json_name = "conflict-ip-count"];
                     uint32 disable_ip_count = 5 [json_name = "disable-ip-count"];
                     uint32 total_ip_count = 6 [json_name = "total-ip-count"];
                     string start_ip = 7 [json_name = "start-ip"];
                     string end_ip = 8 [json_name = "end-ip"];
                  }
                  IpPoolStatistics ip_pool_statistics = 25 [json_name = "ip-pool-statistics"];
               }
               SelectInterface select_interface = 1 [json_name = "select-interface"];
               bool arpbind = 2 [json_name = "arpbind"];
               string bootfile = 3 [json_name = "bootfile"];
               string sname = 4 [json_name = "sname"];
               string domain_name = 5 [json_name = "domain-name"];
               enum NetbiosType {
                  INVALID_ENUM_VALUE_NetbiosType = 0;
                  NetbiosType_BX_NODE = 1;
                  NetbiosType_HX_NODE = 2;
                  NetbiosType_MX_NODE = 3;
                  NetbiosType_PX_NODE = 4;
               };
               NetbiosType netbios_type = 6 [json_name = "netbios-type"];
               string next_server = 7 [json_name = "next-server"];
               bool reserved_ip = 8 [json_name = "reserved-ip"];
               enum Logging {
                  INVALID_ENUM_VALUE_Logging = 0;
                  Logging_ALLOCATIONX_FAIL = 1;
                  Logging_ALLOCATIONX_SUCCESS = 2;
                  Logging_RELEASE = 3;
                  Logging_RENEWX_FAIL = 4;
                  Logging_RENEWX_SUCCESS = 5;
                  Logging_DETECTX_CONFLICT = 6;
                  Logging_RECYCLEX_CONFLICT = 7;
               };
               repeated Logging logging = 9 [json_name = "logging"];
               repeated string nbns_list = 10 [json_name = "nbns-list"];
               repeated string gateway_list = 11 [json_name = "gateway-list"];
               repeated uint32 force_insert_option = 12 [json_name = "force-insert-option"];
               message Mask {
                  message MaskType_Mask7 {
                     string mask8 = 1 [json_name = "mask"];
                  }
                  message MaskType_Masklen {
                     uint32 masklen8 = 1 [json_name = "masklen"];
                  }
                  oneof MaskType {
                     MaskType_Mask7 mask_type_mask7 = 1 [json_name = "mask"];
                     MaskType_Masklen mask_type_masklen = 2 [json_name = "masklen"];
                  }
               }
               Mask mask = 13 [json_name = "mask"];
               message Lease {
                  message TimeType_Limited {
                     uint32 day = 1 [json_name = "day"];
                     uint32 hour = 2 [json_name = "hour"];
                     uint32 minute = 3 [json_name = "minute"];
                  }
                  message TimeType_Unlimited {
                     bool unlimited8 = 1 [json_name = "unlimited"];
                  }
                  oneof TimeType {
                     TimeType_Limited time_type_limited = 1 [json_name = "limited"];
                     TimeType_Unlimited time_type_unlimited = 2 [json_name = "unlimited"];
                  }
               }
               Lease lease = 14 [json_name = "lease"];
               message DnsList {
                  string interface_name = 1 [json_name = "interface-name"];
                  repeated string ip_address = 2 [json_name = "ip-address"];
               }
               DnsList dns_list = 15 [json_name = "dns-list"];
               message IpRange {
                  string start_ip_address = 1 [json_name = "start-ip-address"];
                  string end_ip_address = 2 [json_name = "end-ip-address"];
               }
               IpRange ip_range = 16 [json_name = "ip-range"];
               message SipServer {
                  message SipServerFormat_IpFormat {
                     string sip_server_ip1 = 1 [json_name = "sip-server-ip1"];
                     string sip_server_ip2 = 2 [json_name = "sip-server-ip2"];
                  }
                  message SipServerFormat_StringFormat {
                     string sip_server_name1 = 1 [json_name = "sip-server-name1"];
                     string sip_server_name2 = 2 [json_name = "sip-server-name2"];
                  }
                  oneof SipServerFormat {
                     SipServerFormat_IpFormat sip_server_format_ip_format = 1 [json_name = "ip-format"];
                     SipServerFormat_StringFormat sip_server_format_string_format = 2 [json_name = "string-format"];
                  }
               }
               SipServer sip_server = 17 [json_name = "sip-server"];
               message AlarmIpUsed {
                  uint32 alarm_resume_percentage = 1 [json_name = "alarm-resume-percentage"];
                  uint32 alarm_percentage = 2 [json_name = "alarm-percentage"];
               }
               AlarmIpUsed alarm_ip_used = 18 [json_name = "alarm-ip-used"];
               message ExcludedIpAddresses {
                  message ExcludedIpAddress {
                     string start_ip_address = 1 [json_name = "start-ip-address"];
                     string end_ip_address = 2 [json_name = "end-ip-address"];
                  }
                  repeated ExcludedIpAddress excluded_ip_address = 1 [json_name = "excluded-ip-address"];
               }
               ExcludedIpAddresses excluded_ip_addresses = 19 [json_name = "excluded-ip-addresses"];
               message StaticBinds {
                  message StaticBind {
                     string static_bind_ip = 1 [json_name = "static-bind-ip"];
                     string static_bind_mac = 2 [json_name = "static-bind-mac"];
                     string description = 3 [json_name = "description"];
                  }
                  repeated StaticBind static_bind = 1 [json_name = "static-bind"];
               }
               StaticBinds static_binds = 20 [json_name = "static-binds"];
               message Options {
                  message Option {
                     uint32 option_code = 1 [json_name = "option-code"];
                     message OptionFormat_IpFormat {
                        repeated string ip_addresses = 1 [json_name = "ip-addresses"];
                     }
                     message OptionFormat_AsciiFormat {
                        string ascii_string = 1 [json_name = "ascii-string"];
                     }
                     message OptionFormat_HexFormat {
                        string hex_string = 1 [json_name = "hex-string"];
                     }
                     message OptionFormat_CipherFormat {
                        string cipher_string = 1 [json_name = "cipher-string"];
                     }
                     message OptionFormat_SubOptionsFormat {
                        message SubOptions {
                           message SubOption {
                              uint32 sub_option_code = 1 [json_name = "sub-option-code"];
                              message OptionFormat_SubIpFormat {
                                 repeated string ip_addresses = 1 [json_name = "ip-addresses"];
                              }
                              message OptionFormat_SubAsciiFormat {
                                 string ascii_string = 1 [json_name = "ascii-string"];
                              }
                              message OptionFormat_SubHexFormat {
                                 string hex_string = 1 [json_name = "hex-string"];
                              }
                              message OptionFormat_SubCipherFormat {
                                 string cipher_string = 1 [json_name = "cipher-string"];
                              }
                              oneof OptionFormat {
                                 OptionFormat_SubIpFormat option_format_sub_ip_format = 2 [json_name = "sub-ip-format"];
                                 OptionFormat_SubAsciiFormat option_format_sub_ascii_format = 3 [json_name = "sub-ascii-format"];
                                 OptionFormat_SubHexFormat option_format_sub_hex_format = 4 [json_name = "sub-hex-format"];
                                 OptionFormat_SubCipherFormat option_format_sub_cipher_format = 5 [json_name = "sub-cipher-format"];
                              }
                           }
                           repeated SubOption sub_option = 1 [json_name = "sub-option"];
                        }
                        SubOptions sub_options = 1 [json_name = "sub-options"];
                     }
                     oneof OptionFormat {
                        OptionFormat_IpFormat option_format_ip_format = 2 [json_name = "ip-format"];
                        OptionFormat_AsciiFormat option_format_ascii_format = 3 [json_name = "ascii-format"];
                        OptionFormat_HexFormat option_format_hex_format = 4 [json_name = "hex-format"];
                        OptionFormat_CipherFormat option_format_cipher_format = 5 [json_name = "cipher-format"];
                        OptionFormat_SubOptionsFormat option_format_sub_options_format = 6 [json_name = "sub-options-format"];
                     }
                  }
                  repeated Option option = 1 [json_name = "option"];
               }
               Options options = 21 [json_name = "options"];
               message Option121S {
                  message Option121 {
                     string destination_ip = 1 [json_name = "destination-ip"];
                     uint32 mask = 2 [json_name = "mask"];
                     string gateway_address = 3 [json_name = "gateway-address"];
                  }
                  repeated Option121 option121 = 1 [json_name = "option121"];
               }
               Option121S option121s = 22 [json_name = "option121s"];
               message Option184 {
                  string as_ip = 1 [json_name = "as-ip"];
                  string ncp_ip = 2 [json_name = "ncp-ip"];
                  uint32 voice_vlan = 3 [json_name = "voice-vlan"];
                  message Failover {
                     string failover_ip = 1 [json_name = "failover-ip"];
                     string dial_string = 2 [json_name = "dial-string"];
                  }
                  Failover failover = 4 [json_name = "failover"];
               }
               Option184 option184 = 23 [json_name = "option184"];
               message AutoRecycle {
                  uint32 day = 1 [json_name = "day"];
                  uint32 hour = 2 [json_name = "hour"];
                  uint32 minute = 3 [json_name = "minute"];
               }
               AutoRecycle auto_recycle = 24 [json_name = "auto-recycle"];
            }
            oneof SelectType {
               SelectType_Global select_type_global = 1 [json_name = "global"];
               SelectType_Interface5 select_type_interface5 = 2 [json_name = "interface"];
            }
         }
         InterfaceIpPool interface_ip_pool = 152 [json_name = "interface-ip-pool"];
         message PortAiFabric {
            message Iqcn {
               bool enable = 1 [json_name = "enable"];
            }
            Iqcn iqcn = 1 [json_name = "iqcn"];
            message Npcc {
               bool enable = 1 [json_name = "enable"];
            }
            Npcc npcc = 2 [json_name = "npcc"];
            message LongDistanceDetection {
               enum Mode {
                  Mode_LEVELX_1 = 0;
                  Mode_LEVELX_10 = 1;
                  Mode_LEVELX_25 = 2;
                  Mode_LEVELX_50 = 3;
                  Mode_LEVELX_100 = 4;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            LongDistanceDetection long_distance_detection = 3 [json_name = "long-distance-detection"];
            message MiceElephantFlow {
               bool enable = 1 [json_name = "enable"];
            }
            MiceElephantFlow mice_elephant_flow = 4 [json_name = "mice-elephant-flow"];
            message AbsPfc {
               message AbsPfcQueues {
                  message AbsPfcQueue {
                     uint32 priority = 1 [json_name = "priority"];
                     uint32 threshold = 2 [json_name = "threshold"];
                  }
                  repeated AbsPfcQueue abs_pfc_queue = 1 [json_name = "abs-pfc-queue"];
               }
               AbsPfcQueues abs_pfc_queues = 1 [json_name = "abs-pfc-queues"];
            }
            AbsPfc abs_pfc = 5 [json_name = "abs-pfc"];
            message AbsPfcStatisticss {
               message AbsPfcStatistics {
                  uint32 priority = 1 [json_name = "priority"];
                  uint64 received_pause_pkts = 2 [json_name = "received-pause-pkts"];
                  uint64 transmitted_pause_pkts = 3 [json_name = "transmitted-pause-pkts"];
                  uint64 deadlock_detect_count = 4 [json_name = "deadlock-detect-count"];
                  uint64 deadlock_recovery_count = 5 [json_name = "deadlock-recovery-count"];
               }
               repeated AbsPfcStatistics abs_pfc_statistics = 1 [json_name = "abs-pfc-statistics"];
            }
            AbsPfcStatisticss abs_pfc_statisticss = 6 [json_name = "abs-pfc-statisticss"];
            message AbsPfcStatuses {
               message AbsPfcStatus {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 rtt = 2 [json_name = "rtt"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  uint32 speed = 4 [json_name = "speed"];
                  bool enable = 5 [json_name = "enable"];
               }
               repeated AbsPfcStatus abs_pfc_status = 1 [json_name = "abs-pfc-status"];
               enum CurrentBufferOptimizationMode {
                  CurrentBufferOptimizationMode_NORMAL = 0;
                  CurrentBufferOptimizationMode_LONGX_DISTANCE = 1;
                  CurrentBufferOptimizationMode_ENHANCEDX_LONGX_DISTANCE = 2;
               };
               CurrentBufferOptimizationMode current_buffer_optimization_mode = 2 [json_name = "current-buffer-optimization-mode"];
            }
            AbsPfcStatuses abs_pfc_statuses = 7 [json_name = "abs-pfc-statuses"];
            message AbsPfcStatistics {
               message AbsPfcStatistic {
                  uint32 priority = 1 [json_name = "priority"];
                  uint64 received_pause_pkts = 2 [json_name = "received-pause-pkts"];
                  uint64 transmitted_pause_pkts = 3 [json_name = "transmitted-pause-pkts"];
                  uint64 deadlock_detect_count = 4 [json_name = "deadlock-detect-count"];
                  uint64 deadlock_recovery_count = 5 [json_name = "deadlock-recovery-count"];
               }
               repeated AbsPfcStatistic abs_pfc_statistic = 1 [json_name = "abs-pfc-statistic"];
            }
            AbsPfcStatistics abs_pfc_statistics = 8 [json_name = "abs-pfc-statistics"];
            message Ipv6Npcc {
               bool enable = 1 [json_name = "enable"];
            }
            Ipv6Npcc ipv6_npcc = 9 [json_name = "ipv6-npcc"];
         }
         PortAiFabric port_ai_fabric = 153 [json_name = "port-ai-fabric"];
         message BufferOptimizationStatistics {
            uint32 port_id = 1 [json_name = "port-id"];
            uint32 chip_id = 2 [json_name = "chip-id"];
            uint32 pipe_id = 3 [json_name = "pipe-id"];
            uint32 detect_hdrm_result = 4 [json_name = "detect-hdrm-result"];
            uint32 required_hdrm_result = 5 [json_name = "required-hdrm-result"];
         }
         BufferOptimizationStatistics buffer_optimization_statistics = 154 [json_name = "buffer-optimization-statistics"];
         message ArpLimits {
            message ArpLimit {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
               uint32 limit_num = 2 [json_name = "limit-num"];
               uint32 learned_num = 3 [json_name = "learned-num"];
               uint32 threshold_value = 4 [json_name = "threshold-value"];
            }
            repeated ArpLimit arp_limit = 1 [json_name = "arp-limit"];
         }
         ArpLimits arp_limits = 155 [json_name = "arp-limits"];
         message ArpStatistics {
            uint32 recv_req_packets = 1 [json_name = "recv-req-packets"];
            uint32 recv_reply_packets = 2 [json_name = "recv-reply-packets"];
            uint32 recv_gratis_packets = 3 [json_name = "recv-gratis-packets"];
            uint32 send_req_packets = 4 [json_name = "send-req-packets"];
            uint32 send_reply_packets = 5 [json_name = "send-reply-packets"];
            uint32 send_gratis_packets = 6 [json_name = "send-gratis-packets"];
            bool exceed_flag = 7 [json_name = "exceed-flag"];
            enum BatchState {
               INVALID_ENUM_VALUE_BatchState = 0;
               BatchState_BATCH = 1;
               BatchState_REAL = 2;
            };
            BatchState batch_state = 8 [json_name = "batch-state"];
         }
         ArpStatistics arp_statistics = 156 [json_name = "arp-statistics"];
         message ArpMissEnable {
            bool enable = 1 [json_name = "enable"];
         }
         ArpMissEnable arp_miss_enable = 157 [json_name = "arp-miss-enable"];
         message SecurityZone {
            string zone = 1 [json_name = "zone"];
         }
         SecurityZone security_zone = 158 [json_name = "security-zone"];
         message DhcpRelay {
            uint32 dhcp_server_group_id = 1 [json_name = "dhcp-server-group-id"];
            enum Mode {
               INVALID_ENUM_VALUE_Mode = 0;
               Mode_LAYER2 = 1;
               Mode_LAYER3X_STANDARD = 2;
               Mode_LAYER3X_OPTION60 = 3;
               Mode_LAYER3X_MACRANGE = 4;
            };
            Mode mode = 2 [json_name = "mode"];
         }
         DhcpRelay dhcp_relay = 159 [json_name = "dhcp-relay"];
         message Routing {
            message StaticRouting {
               message LdpSyncParameter {
                  uint32 hold_down_time = 1 [json_name = "hold-down-time"];
                  bool infinite = 2 [json_name = "infinite"];
               }
               LdpSyncParameter ldp_sync_parameter = 1 [json_name = "ldp-sync-parameter"];
               message LdpSyncRoutes {
                  string sync_state = 1 [json_name = "sync-state"];
                  message RouteInfos {
                     message RouteInfo {
                        string prefix = 1 [json_name = "prefix"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string next_hop = 3 [json_name = "next-hop"];
                        string vpn_instance_name = 4 [json_name = "vpn-instance-name"];
                     }
                     repeated RouteInfo route_info = 1 [json_name = "route-info"];
                  }
                  RouteInfos route_infos = 2 [json_name = "route-infos"];
               }
               LdpSyncRoutes ldp_sync_routes = 2 [json_name = "ldp-sync-routes"];
               message LdpSync {
                  message SetTimer_HoldDownTimes {
                     uint32 hold_down_time = 1 [json_name = "hold-down-time"];
                  }
                  message SetTimer_Infinite {
                     bool infinite_enable = 1 [json_name = "infinite-enable"];
                  }
                  oneof SetTimer {
                     SetTimer_HoldDownTimes set_timer_hold_down_times = 1 [json_name = "hold-down-times"];
                     SetTimer_Infinite set_timer_infinite = 2 [json_name = "infinite"];
                  }
               }
               LdpSync ldp_sync = 3 [json_name = "ldp-sync"];
            }
            StaticRouting static_routing = 1 [json_name = "static-routing"];
         }
         Routing routing = 160 [json_name = "routing"];
         message Ipv6SidEndBier {
            string sid = 1 [json_name = "sid"];
            uint32 mask_len = 2 [json_name = "mask-len"];
         }
         Ipv6SidEndBier ipv6_sid_end_bier = 161 [json_name = "ipv6-sid-end-bier"];
         message Dhcpv6ServerIf {
            string pool_name = 1 [json_name = "pool-name"];
            bool is_allow_hint = 2 [json_name = "is-allow-hint"];
            uint32 preference = 3 [json_name = "preference"];
            bool is_rapid = 4 [json_name = "is-rapid"];
            bool is_unicast = 5 [json_name = "is-unicast"];
            message PacketStatistics {
               uint32 solicit_number = 1 [json_name = "solicit-number"];
               uint32 request_number = 2 [json_name = "request-number"];
               uint32 confirm_number = 3 [json_name = "confirm-number"];
               uint32 renew_number = 4 [json_name = "renew-number"];
               uint32 rebind_number = 5 [json_name = "rebind-number"];
               uint32 release_number = 6 [json_name = "release-number"];
               uint32 decline_number = 7 [json_name = "decline-number"];
               uint32 information_request_number = 8 [json_name = "information-request-number"];
               uint32 relay_forward_number = 9 [json_name = "relay-forward-number"];
               uint32 lease_query_number = 10 [json_name = "lease-query-number"];
               uint32 unknown_type_number = 11 [json_name = "unknown-type-number"];
               uint32 advertise_number = 12 [json_name = "advertise-number"];
               uint32 reply_number = 13 [json_name = "reply-number"];
               uint32 relay_reply_number = 14 [json_name = "relay-reply-number"];
               uint32 lease_reply_number = 15 [json_name = "lease-reply-number"];
               uint32 reconfigure_number = 16 [json_name = "reconfigure-number"];
            }
            PacketStatistics packet_statistics = 6 [json_name = "packet-statistics"];
         }
         Dhcpv6ServerIf dhcpv6_server_if = 162 [json_name = "dhcpv6-server-if"];
         message Dhcpv6ClientIf {
            bool enable = 1 [json_name = "enable"];
            message ClientType {
               message ClientType6_Inform {
                  bool inform_request = 1 [json_name = "inform-request"];
               }
               message ClientType6_AddressAndPrefix {
                  bool address_request = 1 [json_name = "address-request"];
                  string hint_address = 2 [json_name = "hint-address"];
                  bool prefix_request = 3 [json_name = "prefix-request"];
                  string prefix_name = 4 [json_name = "prefix-name"];
                  string hint_prefix = 5 [json_name = "hint-prefix"];
                  bool rapid_commit = 6 [json_name = "rapid-commit"];
                  bool unicast = 7 [json_name = "unicast"];
                  bool union_mode = 8 [json_name = "union-mode"];
               }
               oneof ClientType6 {
                  ClientType6_Inform client_type_inform = 1 [json_name = "inform"];
                  ClientType6_AddressAndPrefix client_type_address_and_prefix = 2 [json_name = "address-and-prefix"];
               }
            }
            ClientType client_type = 4 [json_name = "client-type"];
            message Option16 {
               message Option16Format_Ascii {
                  string ascii_string = 1 [json_name = "ascii-string"];
               }
               message Option16Format_Hex {
                  string hex_string = 1 [json_name = "hex-string"];
               }
               oneof Option16Format {
                  Option16Format_Ascii option16_format_ascii = 1 [json_name = "ascii"];
                  Option16Format_Hex option16_format_hex = 2 [json_name = "hex"];
               }
            }
            Option16 option16 = 5 [json_name = "option16"];
            message RequestOptions {
               enum RequestOption {
                  INVALID_ENUM_VALUE_RequestOption = 0;
                  RequestOption_OPTION17 = 17;
                  RequestOption_OPTION59 = 59;
               };
               repeated RequestOption request_option = 1 [json_name = "request-option"];
            }
            RequestOptions request_options = 6 [json_name = "request-options"];
         }
         Dhcpv6ClientIf dhcpv6_client_if = 163 [json_name = "dhcpv6-client-if"];
         message Dhcpv6If {
            bool is_enable = 1 [json_name = "is-enable"];
            message Option {
               bool insert_interface_id = 1 [json_name = "insert-interface-id"];
               bool insert_remote_id = 2 [json_name = "insert-remote-id"];
               bool insert_option79 = 3 [json_name = "insert-option79"];
               bool insert_vss = 4 [json_name = "insert-vss"];
               bool insert_client_lla = 5 [json_name = "insert-client-lla"];
            }
            Option option = 2 [json_name = "option"];
         }
         Dhcpv6If dhcpv6_if = 164 [json_name = "dhcpv6-if"];
         message Dhcpv6RelayIf {
            string source_address = 1 [json_name = "source-address"];
            string link_address = 2 [json_name = "link-address"];
            bool strict_check = 3 [json_name = "strict-check"];
            string server_group_name = 4 [json_name = "server-group-name"];
         }
         Dhcpv6RelayIf dhcpv6_relay_if = 165 [json_name = "dhcpv6-relay-if"];
         message Cellular {
            bool ip_address_alloc = 1 [json_name = "ip-address-alloc"];
            message CellularProfiles {
               message CellularProfile {
                  string name = 1 [json_name = "name"];
               }
               repeated CellularProfile cellular_profile = 1 [json_name = "cellular-profile"];
            }
            CellularProfiles cellular_profiles = 2 [json_name = "cellular-profiles"];
            message ApnProfiles {
               message ApnProfile {
                  string name = 1 [json_name = "name"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               repeated ApnProfile apn_profile = 1 [json_name = "apn-profile"];
            }
            ApnProfiles apn_profiles = 3 [json_name = "apn-profiles"];
            message ModemEvent {
               message DialFailed {
                  uint32 fail_times = 1 [json_name = "fail-times"];
                  enum Action {
                     INVALID_ENUM_VALUE_Action = 0;
                     Action_NONE = 1;
                     Action_MODEMX_REBOOT = 2;
                  };
                  Action action = 2 [json_name = "action"];
                  uint32 retry_times = 3 [json_name = "retry-times"];
               }
               DialFailed dial_failed = 1 [json_name = "dial-failed"];
               message DetectEvent {
                  string ipv4_address = 1 [json_name = "ipv4-address"];
                  uint32 interval = 2 [json_name = "interval"];
                  uint32 fail_times = 3 [json_name = "fail-times"];
                  enum Action {
                     INVALID_ENUM_VALUE_Action = 0;
                     Action_REDIAL = 1;
                     Action_MODEMX_REBOOT = 2;
                  };
                  Action action = 4 [json_name = "action"];
                  uint32 retry_times = 5 [json_name = "retry-times"];
                  message Ipv4Addresses {
                     message Ipv4Address {
                        string ipv4_address = 1 [json_name = "ipv4-address"];
                     }
                     repeated Ipv4Address ipv4_address = 1 [json_name = "ipv4-address"];
                  }
                  Ipv4Addresses ipv4_addresses = 6 [json_name = "ipv4-addresses"];
               }
               DetectEvent detect_event = 2 [json_name = "detect-event"];
            }
            ModemEvent modem_event = 4 [json_name = "modem-event"];
            message DialerEnable {
               bool ip_address_alloc = 1 [json_name = "ip-address-alloc"];
            }
            DialerEnable dialer_enable = 5 [json_name = "dialer-enable"];
         }
         Cellular cellular = 166 [json_name = "cellular"];
         message CellularState {
            enum ModemStatus {
               INVALID_ENUM_VALUE_ModemStatus = 0;
               ModemStatus_ONLINE = 1;
               ModemStatus_OFFLINE = 2;
               ModemStatus_INVALID = 3;
            };
            ModemStatus modem_status = 1 [json_name = "modem-status"];
            message Hardware {
               string modem_name = 1 [json_name = "modem-name"];
               string modem_type = 2 [json_name = "modem-type"];
               string imei = 3 [json_name = "imei"];
               string firmware_version = 4 [json_name = "firmware-version"];
            }
            Hardware hardware = 2 [json_name = "hardware"];
            message Sims {
               message Sim {
                  uint32 sim_id = 1 [json_name = "sim-id"];
                  enum SimStatus {
                     INVALID_ENUM_VALUE_SimStatus = 0;
                     SimStatus_NORMAL = 1;
                     SimStatus_INVALID = 2;
                     SimStatus_NOTX_INSERT = 3;
                     SimStatus_LOCKX_ENABLE = 4;
                     SimStatus_LOCKX_AUTOX_VERIFY = 5;
                  };
                  SimStatus sim_status = 2 [json_name = "sim-status"];
                  string iccid = 3 [json_name = "iccid"];
                  string imsi = 4 [json_name = "imsi"];
                  message Network {
                     enum ServiceStatus {
                        INVALID_ENUM_VALUE_ServiceStatus = 0;
                        ServiceStatus_SERVICEX_AVAILABLE = 1;
                        ServiceStatus_NOX_SERVICE = 2;
                        ServiceStatus_EMERGENCY = 3;
                        ServiceStatus_REGIONX_EMERGENCY = 4;
                        ServiceStatus_SAVINGX_STATUS = 5;
                     };
                     ServiceStatus service_status = 1 [json_name = "service-status"];
                     enum PacketServiceStatus {
                        INVALID_ENUM_VALUE_PacketServiceStatus = 0;
                        PacketServiceStatus_ATTACHED = 1;
                        PacketServiceStatus_DETACHED = 2;
                     };
                     PacketServiceStatus packet_service_status = 2 [json_name = "packet-service-status"];
                     enum NetworkMode {
                        INVALID_ENUM_VALUE_NetworkMode = 0;
                        NetworkMode_WCDMA = 1;
                        NetworkMode_LTE = 2;
                        NetworkMode_X_5GX_NSA = 3;
                        NetworkMode_X_5GX_SA = 4;
                        NetworkMode_INVALID = 5;
                     };
                     NetworkMode network_mode = 3 [json_name = "network-mode"];
                     uint32 country_code = 4 [json_name = "country-code"];
                     uint32 network_code = 5 [json_name = "network-code"];
                     string operator = 6 [json_name = "operator"];
                     uint32 area_code = 7 [json_name = "area-code"];
                     uint64 cell_id = 8 [json_name = "cell-id"];
                     string band = 9 [json_name = "band"];
                     string ber = 10 [json_name = "ber"];
                     string arfcn = 11 [json_name = "arfcn"];
                  }
                  Network network = 5 [json_name = "network"];
                  message Radio {
                     int32 rssi = 1 [json_name = "rssi"];
                     int32 rscp = 2 [json_name = "rscp"];
                     int32 ecio = 3 [json_name = "ecio"];
                     int32 rsrp = 4 [json_name = "rsrp"];
                     int32 rsrq = 5 [json_name = "rsrq"];
                     int32 sinr = 6 [json_name = "sinr"];
                     int32 nr_rsrp = 7 [json_name = "nr-rsrp"];
                     int32 nr_rsrq = 8 [json_name = "nr-rsrq"];
                     int32 nr_sinr = 9 [json_name = "nr-sinr"];
                  }
                  Radio radio = 6 [json_name = "radio"];
               }
               repeated Sim sim = 1 [json_name = "sim"];
            }
            Sims sims = 3 [json_name = "sims"];
            message CurrentApns {
               message CurrentApn {
                  uint32 channel_id = 1 [json_name = "channel-id"];
                  string apn_name = 2 [json_name = "apn-name"];
                  enum PacketSessionState {
                     INVALID_ENUM_VALUE_PacketSessionState = 0;
                     PacketSessionState_ACTIVE = 1;
                     PacketSessionState_INACTIVE = 2;
                  };
                  PacketSessionState packet_session_state = 3 [json_name = "packet-session-state"];
               }
               repeated CurrentApn current_apn = 1 [json_name = "current-apn"];
            }
            CurrentApns current_apns = 4 [json_name = "current-apns"];
         }
         CellularState cellular_state = 167 [json_name = "cellular-state"];
         message Dcb {
            message Pfc {
               string profile_name = 1 [json_name = "profile-name"];
               enum Mode {
                  Mode_MANUAL = 0;
                  Mode_AUTO = 1;
               };
               Mode mode = 2 [json_name = "mode"];
               enum DeadlockTrigger {
                  DeadlockTrigger_TURNX_OFF = 0;
                  DeadlockTrigger_ERRORX_DOWN = 1;
               };
               DeadlockTrigger deadlock_trigger = 3 [json_name = "deadlock-trigger"];
               message Thresholds {
                  message Threshold {
                     uint32 priority = 1 [json_name = "priority"];
                     message OnOffModes_Static {
                        uint32 xon = 1 [json_name = "xon"];
                        uint32 xoff = 2 [json_name = "xoff"];
                     }
                     message OnOffModes_Dynamic {
                        uint32 xon_alpha = 1 [json_name = "xon-alpha"];
                        uint32 xoff_alpha = 2 [json_name = "xoff-alpha"];
                     }
                     oneof OnOffModes {
                        OnOffModes_Static on_off_modes_static = 2 [json_name = "static"];
                        OnOffModes_Dynamic on_off_modes_dynamic = 3 [json_name = "dynamic"];
                     }
                  }
                  repeated Threshold threshold = 1 [json_name = "threshold"];
               }
               Thresholds thresholds = 4 [json_name = "thresholds"];
               message Statisticss {
                  message Statistics {
                     uint32 priority = 1 [json_name = "priority"];
                     uint64 received_pause_pkts = 2 [json_name = "received-pause-pkts"];
                     uint64 transmitted_pause_pkts = 3 [json_name = "transmitted-pause-pkts"];
                     uint64 deadlock_detect_count = 4 [json_name = "deadlock-detect-count"];
                     uint64 deadlock_recovery_count = 5 [json_name = "deadlock-recovery-count"];
                  }
                  repeated Statistics statistics = 1 [json_name = "statistics"];
               }
               Statisticss statisticss = 5 [json_name = "statisticss"];
               message PfcEnable {
                  string profile_name = 1 [json_name = "profile-name"];
                  enum Mode {
                     Mode_MANUAL = 0;
                     Mode_AUTO = 1;
                  };
                  Mode mode = 2 [json_name = "mode"];
               }
               PfcEnable pfc_enable = 6 [json_name = "pfc-enable"];
            }
            Pfc pfc = 1 [json_name = "pfc"];
            message Ets {
               string profile_name = 1 [json_name = "profile-name"];
            }
            Ets ets = 2 [json_name = "ets"];
            message App {
               string profile_name = 1 [json_name = "profile-name"];
               bool enable = 2 [json_name = "enable"];
            }
            App app = 3 [json_name = "app"];
            message Version {
               enum Version6 {
                  Version6_IEEE = 0;
                  Version6_INTEL = 1;
               };
               Version6 version6 = 1 [json_name = "version"];
            }
            Version version = 4 [json_name = "version"];
            message NegotiationStatus {
               string pfc_profile_name = 1 [json_name = "pfc-profile-name"];
               enum PfcStatus {
                  PfcStatus_UNCONFIG = 0;
                  PfcStatus_SUCCEED = 1;
                  PfcStatus_FAILED = 2;
                  PfcStatus_MANUAL = 3;
               };
               PfcStatus pfc_status = 2 [json_name = "pfc-status"];
               string ets_profile_name = 3 [json_name = "ets-profile-name"];
               enum EtsStatus {
                  EtsStatus_UNCONFIG = 0;
                  EtsStatus_SUCCEED = 1;
                  EtsStatus_FAILED = 2;
                  EtsStatus_MANUAL = 3;
               };
               EtsStatus ets_status = 4 [json_name = "ets-status"];
               string app_profile_name = 5 [json_name = "app-profile-name"];
            }
            NegotiationStatus negotiation_status = 5 [json_name = "negotiation-status"];
            message FailedReasons {
               message FailedReason {
                  uint32 reason_index = 1 [json_name = "reason-index"];
                  string reason = 2 [json_name = "reason"];
               }
               repeated FailedReason failed_reason = 1 [json_name = "failed-reason"];
            }
            FailedReasons failed_reasons = 6 [json_name = "failed-reasons"];
            message LocalPeerRecord {
               message PfcRecord {
                  string local_pfc = 1 [json_name = "local-pfc"];
                  string remote_pfc = 2 [json_name = "remote-pfc"];
               }
               PfcRecord pfc_record = 1 [json_name = "pfc-record"];
               message EtsRecords {
                  message EtsRecord {
                     uint32 priority_group_number = 1 [json_name = "priority-group-number"];
                     string local_priority = 2 [json_name = "local-priority"];
                     string remote_priority = 3 [json_name = "remote-priority"];
                     uint32 local_weight = 4 [json_name = "local-weight"];
                     uint32 remote_weight = 5 [json_name = "remote-weight"];
                  }
                  repeated EtsRecord ets_record = 1 [json_name = "ets-record"];
               }
               EtsRecords ets_records = 2 [json_name = "ets-records"];
               message AppRecords {
                  message AppRecord {
                     string app_name = 1 [json_name = "app-name"];
                     uint32 local_priority = 2 [json_name = "local-priority"];
                     uint32 remote_priority = 3 [json_name = "remote-priority"];
                  }
                  repeated AppRecord app_record = 1 [json_name = "app-record"];
               }
               AppRecords app_records = 3 [json_name = "app-records"];
            }
            LocalPeerRecord local_peer_record = 7 [json_name = "local-peer-record"];
         }
         Dcb dcb = 168 [json_name = "dcb"];
         message VlinkRoutes {
            message VlinkRoute {
               enum AddressFamily {
                  AddressFamily_IPV4UNI = 0;
                  AddressFamily_IPV6UNI = 1;
               };
               AddressFamily address_family = 1 [json_name = "address-family"];
               string route_policy_name = 2 [json_name = "route-policy-name"];
               bool probe_by_virtual_ipaddress_enable = 3 [json_name = "probe-by-virtual-ipaddress-enable"];
               uint32 tag = 4 [json_name = "tag"];
               uint32 preference = 5 [json_name = "preference"];
            }
            repeated VlinkRoute vlink_route = 1 [json_name = "vlink-route"];
         }
         VlinkRoutes vlink_routes = 169 [json_name = "vlink-routes"];
         message VlinkExtendConfiguration {
            bool link_local_advertise_enable = 1 [json_name = "link-local-advertise-enable"];
            uint32 ipv6_delay_time = 2 [json_name = "ipv6-delay-time"];
            uint32 ipv4_delay_time = 3 [json_name = "ipv4-delay-time"];
         }
         VlinkExtendConfiguration vlink_extend_configuration = 170 [json_name = "vlink-extend-configuration"];
         message VlinkPrefixLengths {
            message VlinkPrefixLength {
               string ipv6_address = 1 [json_name = "ipv6-address"];
               uint32 prefix_length = 2 [json_name = "prefix-length"];
            }
            repeated VlinkPrefixLength vlink_prefix_length = 1 [json_name = "vlink-prefix-length"];
         }
         VlinkPrefixLengths vlink_prefix_lengths = 171 [json_name = "vlink-prefix-lengths"];
         message VlinkConfiguration {
            uint32 preference = 1 [json_name = "preference"];
         }
         VlinkConfiguration vlink_configuration = 172 [json_name = "vlink-configuration"];
         message ServiceSecurityBindings {
            message ServiceSecurityBinding {
               enum Family {
                  INVALID_ENUM_VALUE_Family = 0;
                  Family_IPV4 = 1;
                  Family_IPV6 = 2;
               };
               Family family = 1 [json_name = "family"];
               string ipv4_policy_name = 2 [json_name = "ipv4-policy-name"];
               string ipv6_policy_name = 3 [json_name = "ipv6-policy-name"];
            }
            repeated ServiceSecurityBinding service_security_binding = 1 [json_name = "service-security-binding"];
         }
         ServiceSecurityBindings service_security_bindings = 173 [json_name = "service-security-bindings"];
         message HostProtocolIfSwitch {
         }
         HostProtocolIfSwitch host_protocol_if_switch = 174 [json_name = "host-protocol-if-switch"];
         message FrIf {
            enum LmiType {
               LmiType_ANSI = 0;
               LmiType_Q933A = 1;
               LmiType_NONSTANDARD = 2;
            };
            LmiType lmi_type = 1 [json_name = "lmi-type"];
            enum FrType {
               INVALID_ENUM_VALUE_FrType = 0;
               FrType_DTE = 1;
               FrType_DCE = 2;
               FrType_NNI = 3;
            };
            FrType fr_type = 2 [json_name = "fr-type"];
            uint32 n391_dte = 3 [json_name = "n391-dte"];
            uint64 n392_dce = 4 [json_name = "n392-dce"];
            uint64 n392_dte = 5 [json_name = "n392-dte"];
            uint64 n393_dce = 6 [json_name = "n393-dce"];
            uint32 n393_dte = 7 [json_name = "n393-dte"];
            uint64 t392_dce = 8 [json_name = "t392-dce"];
            message Dlcis {
               uint32 dlci = 1 [json_name = "dlci"];
            }
            Dlcis dlcis = 9 [json_name = "dlcis"];
            message Link {
               uint32 time_internal = 1 [json_name = "time-internal"];
            }
            Link link = 10 [json_name = "link"];
         }
         FrIf fr_if = 175 [json_name = "fr-if"];
         message HdlcIf {
            bool down_when_loop = 1 [json_name = "down-when-loop"];
            message Link {
               uint32 time_interval = 1 [json_name = "time-interval"];
            }
            Link link = 2 [json_name = "link"];
            message CrcTrapThreshold {
               message TrapType_HighLowThreshold {
                  uint32 high_threshold = 1 [json_name = "high-threshold"];
                  uint32 low_threshold = 2 [json_name = "low-threshold"];
                  uint32 interval = 3 [json_name = "interval"];
               }
               message TrapType_BitErrorRatio {
                  uint32 bit_alarm_coefficient = 1 [json_name = "bit-alarm-coefficient"];
                  uint32 bit_alarm_exponent = 2 [json_name = "bit-alarm-exponent"];
                  uint32 bit_resume_coefficient = 3 [json_name = "bit-resume-coefficient"];
                  uint32 bit_resume_exponent = 4 [json_name = "bit-resume-exponent"];
               }
               message TrapType_PacketErrorRatio {
                  uint32 packet_alarm_coefficient = 1 [json_name = "packet-alarm-coefficient"];
                  uint32 packet_alarm_exponent = 2 [json_name = "packet-alarm-exponent"];
                  uint32 packet_resume_coefficient = 3 [json_name = "packet-resume-coefficient"];
                  uint32 packet_resume_exponent = 4 [json_name = "packet-resume-exponent"];
                  uint32 sample_window_factor = 5 [json_name = "sample-window-factor"];
                  uint32 child_window_max_number = 6 [json_name = "child-window-max-number"];
                  uint32 child_window_alarm_number = 7 [json_name = "child-window-alarm-number"];
                  uint32 child_window_resume_number = 8 [json_name = "child-window-resume-number"];
               }
               oneof TrapType {
                  TrapType_HighLowThreshold trap_type_high_low_threshold = 1 [json_name = "high-low-threshold"];
                  TrapType_BitErrorRatio trap_type_bit_error_ratio = 2 [json_name = "bit-error-ratio"];
                  TrapType_PacketErrorRatio trap_type_packet_error_ratio = 3 [json_name = "packet-error-ratio"];
               }
               enum CrcErrorDown {
                  CrcErrorDown_DISABLE = 0;
                  CrcErrorDown_ENABLE = 1;
               };
               CrcErrorDown crc_error_down = 4 [json_name = "crc-error-down"];
               enum CrcWordLength {
                  INVALID_ENUM_VALUE_CrcWordLength = 0;
                  CrcWordLength_CRC16 = 16;
                  CrcWordLength_CRC32 = 32;
               };
               CrcWordLength crc_word_length = 5 [json_name = "crc-word-length"];
            }
            CrcTrapThreshold crc_trap_threshold = 3 [json_name = "crc-trap-threshold"];
            message CrcStatistics {
               uint64 input_short_packets = 1 [json_name = "input-short-packets"];
               uint64 input_long_packets = 2 [json_name = "input-long-packets"];
               uint64 input_crc_packets = 3 [json_name = "input-crc-packets"];
               uint64 input_lost_packets = 4 [json_name = "input-lost-packets"];
               uint64 output_lost_packets = 5 [json_name = "output-lost-packets"];
               uint64 output_overrun_packets = 6 [json_name = "output-overrun-packets"];
               uint64 output_underrun_packets = 7 [json_name = "output-underrun-packets"];
            }
            CrcStatistics crc_statistics = 4 [json_name = "crc-statistics"];
         }
         HdlcIf hdlc_if = 176 [json_name = "hdlc-if"];
         message IpStatisticsEnable {
            message IpStatisticsMode_IndependentMode {
               message IndependentMode6 {
                  enum Ipv4Enable {
                     Ipv4Enable_DISABLE = 0;
                     Ipv4Enable_ENABLE = 1;
                  };
                  Ipv4Enable ipv4_enable = 1 [json_name = "ipv4-enable"];
                  enum Ipv4Direction {
                     Ipv4Direction_INX_BOUND = 0;
                     Ipv4Direction_OUTX_BOUND = 1;
                     Ipv4Direction_BOTH = 2;
                  };
                  Ipv4Direction ipv4_direction = 2 [json_name = "ipv4-direction"];
                  enum Ipv6Enable {
                     Ipv6Enable_DISABLE = 0;
                     Ipv6Enable_ENABLE = 1;
                  };
                  Ipv6Enable ipv6_enable = 3 [json_name = "ipv6-enable"];
                  enum Ipv6Direction {
                     Ipv6Direction_INX_BOUND = 0;
                     Ipv6Direction_OUTX_BOUND = 1;
                     Ipv6Direction_BOTH = 2;
                  };
                  Ipv6Direction ipv6_direction = 4 [json_name = "ipv6-direction"];
               }
               IndependentMode6 independent_mode = 1 [json_name = "independent-mode"];
            }
            message IpStatisticsMode_UnifiedMode {
               message UnifiedMode6 {
                  enum IpEnable {
                     IpEnable_DISABLE = 0;
                     IpEnable_ENABLE = 1;
                  };
                  IpEnable ip_enable = 1 [json_name = "ip-enable"];
               }
               UnifiedMode6 unified_mode = 1 [json_name = "unified-mode"];
            }
            oneof IpStatisticsMode {
               IpStatisticsMode_IndependentMode ip_statistics_mode_independent_mode = 1 [json_name = "independent-mode"];
               IpStatisticsMode_UnifiedMode ip_statistics_mode_unified_mode = 2 [json_name = "unified-mode"];
            }
         }
         IpStatisticsEnable ip_statistics_enable = 177 [json_name = "ip-statistics-enable"];
         message IpStatistics {
            uint64 receive_ip_byte = 1 [json_name = "receive-ip-byte"];
            uint64 send_ip_byte = 2 [json_name = "send-ip-byte"];
            uint64 receive_ip_packet = 3 [json_name = "receive-ip-packet"];
            uint64 send_ip_packet = 4 [json_name = "send-ip-packet"];
            uint64 receive_ip_bit_rate = 5 [json_name = "receive-ip-bit-rate"];
            uint64 send_ip_bit_rate = 6 [json_name = "send-ip-bit-rate"];
            uint64 receive_ip_packet_rate = 7 [json_name = "receive-ip-packet-rate"];
            uint64 send_ip_packet_rate = 8 [json_name = "send-ip-packet-rate"];
            uint64 receive_ipv4_byte = 9 [json_name = "receive-ipv4-byte"];
            uint64 send_ipv4_byte = 10 [json_name = "send-ipv4-byte"];
            uint64 receive_ipv4_packet = 11 [json_name = "receive-ipv4-packet"];
            uint64 send_ipv4_packet = 12 [json_name = "send-ipv4-packet"];
            uint64 receive_ipv4_bit_rate = 13 [json_name = "receive-ipv4-bit-rate"];
            uint64 send_ipv4_bit_rate = 14 [json_name = "send-ipv4-bit-rate"];
            uint64 receive_ipv4_packet_rate = 15 [json_name = "receive-ipv4-packet-rate"];
            uint64 send_ipv4_packet_rate = 16 [json_name = "send-ipv4-packet-rate"];
            uint64 receive_ipv6_byte = 17 [json_name = "receive-ipv6-byte"];
            uint64 send_ipv6_byte = 18 [json_name = "send-ipv6-byte"];
            uint64 receive_ipv6_packet = 19 [json_name = "receive-ipv6-packet"];
            uint64 send_ipv6_packet = 20 [json_name = "send-ipv6-packet"];
            uint64 receive_ipv6_bit_rate = 21 [json_name = "receive-ipv6-bit-rate"];
            uint64 send_ipv6_bit_rate = 22 [json_name = "send-ipv6-bit-rate"];
            uint64 receive_ipv6_packet_rate = 23 [json_name = "receive-ipv6-packet-rate"];
            uint64 send_ipv6_packet_rate = 24 [json_name = "send-ipv6-packet-rate"];
         }
         IpStatistics ip_statistics = 178 [json_name = "ip-statistics"];
         message IpStatisticsPeak {
            uint64 receive_peak_bit = 1 [json_name = "receive-peak-bit"];
            string receive_peak_time = 2 [json_name = "receive-peak-time"];
            uint64 send_peak_bit = 3 [json_name = "send-peak-bit"];
            string send_peak_time = 4 [json_name = "send-peak-time"];
         }
         IpStatisticsPeak ip_statistics_peak = 179 [json_name = "ip-statistics-peak"];
         message IoamProfileApplys {
            string profile = 1 [json_name = "profile"];
         }
         IoamProfileApplys ioam_profile_applys = 180 [json_name = "ioam-profile-applys"];
         message IpsecP2Mp {
            string ipsec_p2mp_policy = 1 [json_name = "ipsec-p2mp-policy"];
         }
         IpsecP2Mp ipsec_p2mp = 181 [json_name = "ipsec-p2mp"];
         message Lad {
            bool port_enable = 1 [json_name = "port-enable"];
            message Neighbors {
               message Neighbor {
                  string rx_ne_id = 1 [json_name = "rx-ne-id"];
                  uint32 rx_vlan_or_vc12_id = 2 [json_name = "rx-vlan-or-vc12-id"];
                  string tx_ne_id = 3 [json_name = "tx-ne-id"];
                  string tx_if_name = 4 [json_name = "tx-if-name"];
                  uint32 tx_vlan_or_vc12_id = 5 [json_name = "tx-vlan-or-vc12-id"];
                  uint32 tx_vc4_id = 6 [json_name = "tx-vc4-id"];
                  string rx_if_name = 7 [json_name = "rx-if-name"];
                  uint32 rx_vc4_id = 8 [json_name = "rx-vc4-id"];
                  uint32 rx_slot_id = 9 [json_name = "rx-slot-id"];
                  uint32 rx_card_id = 10 [json_name = "rx-card-id"];
                  uint32 rx_port_id = 11 [json_name = "rx-port-id"];
                  uint32 rx_port_type = 12 [json_name = "rx-port-type"];
                  uint32 tx_port_type = 13 [json_name = "tx-port-type"];
                  uint32 tx_slot_id = 14 [json_name = "tx-slot-id"];
               }
               repeated Neighbor neighbor = 1 [json_name = "neighbor"];
            }
            Neighbors neighbors = 2 [json_name = "neighbors"];
         }
         Lad lad = 182 [json_name = "lad"];
         message Lmsp {
            uint32 group_id = 1 [json_name = "group-id"];
            enum ChassisLmsp {
               INVALID_ENUM_VALUE_ChassisLmsp = 0;
               ChassisLmsp_SINGLEX_CHASSISX_MODE = 1;
               ChassisLmsp_MULTIX_CHASSISX_MODE = 2;
            };
            ChassisLmsp chassis_lmsp = 2 [json_name = "chassis-lmsp"];
            message SingleChassis {
               enum PortMode {
                  INVALID_ENUM_VALUE_PortMode = 0;
                  PortMode_WORKING = 1;
                  PortMode_PROTECTION = 2;
               };
               PortMode port_mode = 1 [json_name = "port-mode"];
               message ProtectionAttributes {
                  enum ProtectionMode {
                     INVALID_ENUM_VALUE_ProtectionMode = 0;
                     ProtectionMode_ONEX_PLUSX_ONE = 1;
                     ProtectionMode_ONEX_TOX_ONE = 2;
                  };
                  ProtectionMode protection_mode = 1 [json_name = "protection-mode"];
                  enum SwitchMode {
                     INVALID_ENUM_VALUE_SwitchMode = 0;
                     SwitchMode_UNIDIRECTION = 1;
                     SwitchMode_BIDIRECTION = 2;
                  };
                  SwitchMode switch_mode = 2 [json_name = "switch-mode"];
                  enum RevertFlag {
                     INVALID_ENUM_VALUE_RevertFlag = 0;
                     RevertFlag_DISABLE = 1;
                     RevertFlag_ENABLE = 2;
                  };
                  RevertFlag revert_flag = 3 [json_name = "revert-flag"];
                  uint32 revert_time = 4 [json_name = "revert-time"];
                  enum LockoutMode {
                     LockoutMode_UNLOCKED = 0;
                     LockoutMode_LOCKED = 1;
                  };
                  LockoutMode lockout_mode = 5 [json_name = "lockout-mode"];
                  enum FaultSignalRequestPriority {
                     FaultSignalRequestPriority_HIGH = 0;
                     FaultSignalRequestPriority_LOW = 1;
                  };
                  FaultSignalRequestPriority fault_signal_request_priority = 6 [json_name = "fault-signal-request-priority"];
               }
               ProtectionAttributes protection_attributes = 2 [json_name = "protection-attributes"];
            }
            SingleChassis single_chassis = 3 [json_name = "single-chassis"];
            message MultiChassis {
               string peer_ip = 1 [json_name = "peer-ip"];
               string local_ip = 2 [json_name = "local-ip"];
               enum PortMode {
                  INVALID_ENUM_VALUE_PortMode = 0;
                  PortMode_WORKING = 1;
                  PortMode_PROTECTION = 2;
               };
               PortMode port_mode = 3 [json_name = "port-mode"];
               uint32 keep_alive_time = 4 [json_name = "keep-alive-time"];
               uint32 hold_time = 5 [json_name = "hold-time"];
               enum TrackBfdSession {
                  TrackBfdSession_NO = 0;
                  TrackBfdSession_YES = 1;
               };
               TrackBfdSession track_bfd_session = 6 [json_name = "track-bfd-session"];
               string bfd_session_name = 7 [json_name = "bfd-session-name"];
               enum AuthenticationMode {
                  AuthenticationMode_NONE = 0;
                  AuthenticationMode_SIMPLE = 1;
                  AuthenticationMode_CIPHER = 2;
                  AuthenticationMode_CIPHERSHA2 = 4;
                  AuthenticationMode_CIPHERHMAC = 5;
               };
               AuthenticationMode authentication_mode = 8 [json_name = "authentication-mode"];
               string authentication_key = 9 [json_name = "authentication-key"];
               enum AntiReplay {
                  AntiReplay_DISABLE = 0;
                  AntiReplay_ENABLE = 1;
               };
               AntiReplay anti_replay = 10 [json_name = "anti-replay"];
               message ProtectionAttributes {
                  enum ProtectionMode {
                     INVALID_ENUM_VALUE_ProtectionMode = 0;
                     ProtectionMode_ONEX_PLUSX_ONE = 1;
                     ProtectionMode_ONEX_TOX_ONE = 2;
                  };
                  ProtectionMode protection_mode = 1 [json_name = "protection-mode"];
                  enum SwitchMode {
                     INVALID_ENUM_VALUE_SwitchMode = 0;
                     SwitchMode_UNIDIRECTION = 1;
                     SwitchMode_BIDIRECTION = 2;
                  };
                  SwitchMode switch_mode = 2 [json_name = "switch-mode"];
                  enum RevertFlag {
                     INVALID_ENUM_VALUE_RevertFlag = 0;
                     RevertFlag_DISABLE = 1;
                     RevertFlag_ENABLE = 2;
                  };
                  RevertFlag revert_flag = 3 [json_name = "revert-flag"];
                  uint32 revert_time = 4 [json_name = "revert-time"];
                  enum LockoutMode {
                     LockoutMode_UNLOCKED = 0;
                     LockoutMode_LOCKED = 1;
                  };
                  LockoutMode lockout_mode = 5 [json_name = "lockout-mode"];
                  enum FaultSignalRequestPriority {
                     FaultSignalRequestPriority_HIGH = 0;
                     FaultSignalRequestPriority_LOW = 1;
                  };
                  FaultSignalRequestPriority fault_signal_request_priority = 6 [json_name = "fault-signal-request-priority"];
               }
               ProtectionAttributes protection_attributes = 11 [json_name = "protection-attributes"];
            }
            MultiChassis multi_chassis = 4 [json_name = "multi-chassis"];
         }
         Lmsp lmsp = 183 [json_name = "lmsp"];
         message PppMp {
            enum FragmentSize {
               FragmentSize_FRAGMENT128 = 0;
               FragmentSize_FRAGMENT256 = 1;
               FragmentSize_FRAGMENT512 = 2;
               FragmentSize_NOFRAGMENT = 3;
            };
            FragmentSize fragment_size = 1 [json_name = "fragment-size"];
            uint32 threshold_least = 2 [json_name = "threshold-least"];
            uint32 mrru = 3 [json_name = "mrru"];
            bool ssnhf = 4 [json_name = "ssnhf"];
            bool discriminator = 5 [json_name = "discriminator"];
            message Damp {
               uint32 detect_time = 1 [json_name = "detect-time"];
               uint32 flap_count = 2 [json_name = "flap-count"];
               uint32 damp_time = 3 [json_name = "damp-time"];
            }
            Damp damp = 6 [json_name = "damp"];
            message MpMembers {
               message MpMember {
                  string interface_name = 1 [json_name = "interface-name"];
                  enum PhysicalStatus {
                     PhysicalStatus_UP = 0;
                     PhysicalStatus_DOWN = 1;
                     PhysicalStatus_ADMINX_SHUTX_DOWN = 3;
                  };
                  PhysicalStatus physical_status = 2 [json_name = "physical-status"];
                  enum ProtocolStatus {
                     ProtocolStatus_UP = 0;
                     ProtocolStatus_DOWN = 1;
                     ProtocolStatus_DAMP = 2;
                  };
                  ProtocolStatus protocol_status = 3 [json_name = "protocol-status"];
                  message TimeDelayStatus {
                     uint32 max_time_delay = 1 [json_name = "max-time-delay"];
                     uint32 last_record_1 = 2 [json_name = "last-record-1"];
                     uint32 last_record_2 = 3 [json_name = "last-record-2"];
                     uint32 last_record_3 = 4 [json_name = "last-record-3"];
                  }
                  TimeDelayStatus time_delay_status = 4 [json_name = "time-delay-status"];
               }
               repeated MpMember mp_member = 1 [json_name = "mp-member"];
            }
            MpMembers mp_members = 7 [json_name = "mp-members"];
            message TimeDelayDetect {
               enum DetectMode {
                  DetectMode_DISABLE = 0;
                  DetectMode_ENABLE = 1;
               };
               DetectMode detect_mode = 1 [json_name = "detect-mode"];
               uint32 detect_threshold = 2 [json_name = "detect-threshold"];
            }
            TimeDelayDetect time_delay_detect = 8 [json_name = "time-delay-detect"];
            message DropTimeoutQosAttribute {
               uint32 drop_timeout = 1 [json_name = "drop-timeout"];
               enum DynamicBandwidthMode {
                  DynamicBandwidthMode_DISABLE = 0;
                  DynamicBandwidthMode_ENABLE = 1;
               };
               DynamicBandwidthMode dynamic_bandwidth_mode = 2 [json_name = "dynamic-bandwidth-mode"];
               enum LowLatencyMode {
                  LowLatencyMode_DISABLE = 0;
                  LowLatencyMode_ENABLE = 1;
               };
               LowLatencyMode low_latency_mode = 3 [json_name = "low-latency-mode"];
               enum PacketPriority {
                  PacketPriority_NORMAL = 0;
                  PacketPriority_HIGH = 1;
               };
               PacketPriority packet_priority = 4 [json_name = "packet-priority"];
               enum PacketQueueDepth {
                  PacketQueueDepth_DEPTH256 = 0;
                  PacketQueueDepth_DEPTH512 = 1;
                  PacketQueueDepth_DEPTH1024 = 2;
                  PacketQueueDepth_DEPTH2048 = 3;
                  PacketQueueDepth_DEPTH4096 = 4;
               };
               PacketQueueDepth packet_queue_depth = 5 [json_name = "packet-queue-depth"];
            }
            DropTimeoutQosAttribute drop_timeout_qos_attribute = 9 [json_name = "drop-timeout-qos-attribute"];
            message CrcTrapThreshold {
               enum CrcDetect {
                  CrcDetect_DISABLE = 0;
                  CrcDetect_ENABLE = 1;
               };
               CrcDetect crc_detect = 1 [json_name = "crc-detect"];
               uint32 alarm_coefficient = 2 [json_name = "alarm-coefficient"];
               uint32 alarm_exponent = 3 [json_name = "alarm-exponent"];
               uint32 resume_coefficient = 4 [json_name = "resume-coefficient"];
               uint32 resume_exponent = 5 [json_name = "resume-exponent"];
               enum TriggerService {
                  TriggerService_NULL = 0;
                  TriggerService_LSP = 1;
                  TriggerService_SECTION = 2;
               };
               TriggerService trigger_service = 6 [json_name = "trigger-service"];
               enum AlarmTrapState {
                  AlarmTrapState_DISABLE = 0;
                  AlarmTrapState_ENABLE = 1;
               };
               AlarmTrapState alarm_trap_state = 7 [json_name = "alarm-trap-state"];
               enum AlarmStatus {
                  AlarmStatus_NO = 0;
                  AlarmStatus_YES = 1;
                  AlarmStatus_NULL = 2;
               };
               AlarmStatus alarm_status = 8 [json_name = "alarm-status"];
               string current_ratio = 9 [json_name = "current-ratio"];
               string alarm_threshold = 10 [json_name = "alarm-threshold"];
               string resume_threshold = 11 [json_name = "resume-threshold"];
            }
            CrcTrapThreshold crc_trap_threshold = 10 [json_name = "crc-trap-threshold"];
            message LospktTrapThreshold {
               uint32 alarm_coefficient = 1 [json_name = "alarm-coefficient"];
               uint32 alarm_exponent = 2 [json_name = "alarm-exponent"];
               uint32 resume_coefficient = 3 [json_name = "resume-coefficient"];
               uint32 resume_exponent = 4 [json_name = "resume-exponent"];
            }
            LospktTrapThreshold lospkt_trap_threshold = 11 [json_name = "lospkt-trap-threshold"];
         }
         PppMp ppp_mp = 184 [json_name = "ppp-mp"];
         message Tdm {
            enum RmlBitTransfer {
               RmlBitTransfer_DISABLE = 0;
               RmlBitTransfer_ENABLE = 1;
            };
            RmlBitTransfer rml_bit_transfer = 1 [json_name = "rml-bit-transfer"];
            enum SohTransport {
               SohTransport_DISABLE = 0;
               SohTransport_ENABLE = 1;
            };
            SohTransport soh_transport = 2 [json_name = "soh-transport"];
            uint32 underrun_checktimes = 3 [json_name = "underrun-checktimes"];
            enum FastAlarmDetect {
               FastAlarmDetect_DISABLE = 0;
               FastAlarmDetect_ENABLE = 1;
            };
            FastAlarmDetect fast_alarm_detect = 4 [json_name = "fast-alarm-detect"];
            message TrapThreshold {
               uint32 lospkt_trigger_threshold = 1 [json_name = "lospkt-trigger-threshold"];
               uint32 lospkt_resume_threshold = 2 [json_name = "lospkt-resume-threshold"];
               uint32 misorderpkt_trigger_threshold = 3 [json_name = "misorderpkt-trigger-threshold"];
               uint32 misorderpkt_resume_threshold = 4 [json_name = "misorderpkt-resume-threshold"];
               uint32 straypkt_trigger_threshold = 5 [json_name = "straypkt-trigger-threshold"];
               uint32 straypkt_resume_threshold = 6 [json_name = "straypkt-resume-threshold"];
               uint32 malpkt_trigger_threshold = 7 [json_name = "malpkt-trigger-threshold"];
               uint32 malpkt_resume_threshold = 8 [json_name = "malpkt-resume-threshold"];
               uint32 jtrudr_trigger_threshold = 9 [json_name = "jtrudr-trigger-threshold"];
               uint32 jtrudr_resume_threshold = 10 [json_name = "jtrudr-resume-threshold"];
               uint32 jtrovr_trigger_threshold = 11 [json_name = "jtrovr-trigger-threshold"];
               uint32 jtrovr_resume_threshold = 12 [json_name = "jtrovr-resume-threshold"];
               uint32 lops_trigger_threshold = 13 [json_name = "lops-trigger-threshold"];
               uint32 lops_resume_threshold = 14 [json_name = "lops-resume-threshold"];
            }
            TrapThreshold trap_threshold = 5 [json_name = "trap-threshold"];
            message Statistics {
               uint64 input_packets = 1 [json_name = "input-packets"];
               uint64 output_packets = 2 [json_name = "output-packets"];
               uint64 los_packets = 3 [json_name = "los-packets"];
               uint64 misorder_packets = 4 [json_name = "misorder-packets"];
               uint64 malformed_packets = 5 [json_name = "malformed-packets"];
               uint64 dummy_packets = 6 [json_name = "dummy-packets"];
               uint64 underrun_count = 7 [json_name = "underrun-count"];
               uint64 overrun_count = 8 [json_name = "overrun-count"];
               uint64 es = 9 [json_name = "es"];
               uint64 ses = 10 [json_name = "ses"];
               uint64 uas = 11 [json_name = "uas"];
            }
            Statistics statistics = 6 [json_name = "statistics"];
            message ChannelSerial {
               enum PwCtrlWordRmlBit {
                  PwCtrlWordRmlBit_DISABLE = 0;
                  PwCtrlWordRmlBit_ENABLE = 1;
               };
               PwCtrlWordRmlBit pw_ctrl_word_rml_bit = 1 [json_name = "pw-ctrl-word-rml-bit"];
               enum CepSohTransport {
                  CepSohTransport_DISABLE = 0;
                  CepSohTransport_ENABLE = 1;
               };
               CepSohTransport cep_soh_transport = 2 [json_name = "cep-soh-transport"];
               uint32 underrun_checktimes = 3 [json_name = "underrun-checktimes"];
               enum FastAlarmDetect {
                  FastAlarmDetect_DISABLE = 0;
                  FastAlarmDetect_ENABLE = 1;
               };
               FastAlarmDetect fast_alarm_detect = 4 [json_name = "fast-alarm-detect"];
               message AlarmThreshold {
                  uint32 lost_pkt_trigger_threshold = 1 [json_name = "lost-pkt-trigger-threshold"];
                  uint32 lost_pkt_resume_threshold = 2 [json_name = "lost-pkt-resume-threshold"];
                  uint32 misorder_pkt_trigger_threshold = 3 [json_name = "misorder-pkt-trigger-threshold"];
                  uint32 misorder_pkt_resume_threshold = 4 [json_name = "misorder-pkt-resume-threshold"];
                  uint32 stray_pkt_trigger_threshold = 5 [json_name = "stray-pkt-trigger-threshold"];
                  uint32 stray_pkt_resume_threshold = 6 [json_name = "stray-pkt-resume-threshold"];
                  uint32 malformed_pkt_trigger_threshold = 7 [json_name = "malformed-pkt-trigger-threshold"];
                  uint32 malformed_pkt_resume_threshold = 8 [json_name = "malformed-pkt-resume-threshold"];
                  uint32 jitter_buffer_under_trigger_threshold = 9 [json_name = "jitter-buffer-under-trigger-threshold"];
                  uint32 jitter_buffer_under_resume_threshold = 10 [json_name = "jitter-buffer-under-resume-threshold"];
                  uint32 jitter_buffer_over_trigger_threshold = 11 [json_name = "jitter-buffer-over-trigger-threshold"];
                  uint32 jitter_buffer_over_resume_threshold = 12 [json_name = "jitter-buffer-over-resume-threshold"];
                  uint32 continuous_loss_pkt_trigger_threshold = 13 [json_name = "continuous-loss-pkt-trigger-threshold"];
                  uint32 continuous_loss_pkt_resume_threshold = 14 [json_name = "continuous-loss-pkt-resume-threshold"];
               }
               AlarmThreshold alarm_threshold = 5 [json_name = "alarm-threshold"];
               message StreamSelectState {
                  enum ActivePw {
                     INVALID_ENUM_VALUE_ActivePw = 0;
                     ActivePw_MASTER = 1;
                     ActivePw_SECONDARY = 2;
                  };
                  ActivePw active_pw = 1 [json_name = "active-pw"];
                  enum MasterPwState {
                     MasterPwState_NORMAL = 0;
                     MasterPwState_ABNORMAL = 1;
                  };
                  MasterPwState master_pw_state = 2 [json_name = "master-pw-state"];
                  enum SecondaryPwState {
                     SecondaryPwState_NORMAL = 0;
                     SecondaryPwState_ABNORMAL = 1;
                  };
                  SecondaryPwState secondary_pw_state = 3 [json_name = "secondary-pw-state"];
               }
               StreamSelectState stream_select_state = 6 [json_name = "stream-select-state"];
            }
            ChannelSerial channel_serial = 7 [json_name = "channel-serial"];
            message PhySerial {
               message TimeDelayCompensation {
                  message TimeDelayCompensationAttr {
                     enum BlockAcState {
                        INVALID_ENUM_VALUE_BlockAcState = 0;
                        BlockAcState_BLOCK = 1;
                     };
                     BlockAcState block_ac_state = 1 [json_name = "block-ac-state"];
                     uint32 main_pw_delay_value = 2 [json_name = "main-pw-delay-value"];
                     uint32 second_pw_delay_value = 3 [json_name = "second-pw-delay-value"];
                  }
                  TimeDelayCompensationAttr time_delay_compensation_attr = 1 [json_name = "time-delay-compensation-attr"];
                  message TimeDelayCompensationState {
                     enum BlockAcState {
                        BlockAcState_ACTIVE = 0;
                        BlockAcState_BLOCK = 1;
                     };
                     BlockAcState block_ac_state = 1 [json_name = "block-ac-state"];
                     enum BlockAcReason {
                        BlockAcReason_BLOCKX_ACX_OUTBOUNDX_CONFIGURED = 0;
                        BlockAcReason_CLOCKX_OUTX_OFX_LOCK = 1;
                        BlockAcReason_IMPROPERX_DELAYX_COMPENSATIONX_VALUE = 2;
                     };
                     BlockAcReason block_ac_reason = 2 [json_name = "block-ac-reason"];
                     uint32 pw_delay_real_time_sample_1 = 3 [json_name = "pw-delay-real-time-sample-1"];
                     uint32 pw_delay_real_time_sample_2 = 4 [json_name = "pw-delay-real-time-sample-2"];
                     uint32 pw_delay_real_time_sample_3 = 5 [json_name = "pw-delay-real-time-sample-3"];
                  }
                  TimeDelayCompensationState time_delay_compensation_state = 2 [json_name = "time-delay-compensation-state"];
                  message TimeDelayResults {
                     string test_time = 1 [json_name = "test-time"];
                     enum ActivePw {
                        ActivePw_MAIN = 0;
                        ActivePw_SECOND = 1;
                     };
                     ActivePw active_pw = 2 [json_name = "active-pw"];
                     enum MainPwFailed {
                        INVALID_ENUM_VALUE_MainPwFailed = 0;
                        MainPwFailed_PWX_PROTECTX_GROUPX_NOTX_BOUND = 1;
                        MainPwFailed_PWX_APSX_NOTX_REQUESTX_STATE = 2;
                        MainPwFailed_INACTIVEX_PWX_DOWN = 3;
                        MainPwFailed_SWITCHINGX_TIMEOUT = 4;
                        MainPwFailed_OTHER = 5;
                     };
                     MainPwFailed main_pw_failed = 3 [json_name = "main-pw-failed"];
                     uint32 main_pw_delay_sample_1 = 4 [json_name = "main-pw-delay-sample-1"];
                     uint32 main_pw_delay_sample_2 = 5 [json_name = "main-pw-delay-sample-2"];
                     uint32 main_pw_delay_sample_3 = 6 [json_name = "main-pw-delay-sample-3"];
                     enum SecondaryPwFailed {
                        INVALID_ENUM_VALUE_SecondaryPwFailed = 0;
                        SecondaryPwFailed_PWX_PROTECTX_GROUPX_NOTX_BOUND = 1;
                        SecondaryPwFailed_PWX_APSX_NOTX_REQUESTX_STATE = 2;
                        SecondaryPwFailed_INACTIVEX_PWX_DOWN = 3;
                        SecondaryPwFailed_SWITCHINGX_TIMEOUT = 4;
                        SecondaryPwFailed_OTHER = 5;
                     };
                     SecondaryPwFailed secondary_pw_failed = 7 [json_name = "secondary-pw-failed"];
                     uint32 secondary_pw_delay_sample_1 = 8 [json_name = "secondary-pw-delay-sample-1"];
                     uint32 secondary_pw_delay_sample_2 = 9 [json_name = "secondary-pw-delay-sample-2"];
                     uint32 secondary_pw_delay_sample_3 = 10 [json_name = "secondary-pw-delay-sample-3"];
                  }
                  TimeDelayResults time_delay_results = 3 [json_name = "time-delay-results"];
               }
               TimeDelayCompensation time_delay_compensation = 1 [json_name = "time-delay-compensation"];
            }
            PhySerial phy_serial = 8 [json_name = "phy-serial"];
         }
         Tdm tdm = 185 [json_name = "tdm"];
         message MLag {
            message DfsGroups {
               message DfsGroup {
                  uint32 group_id = 1 [json_name = "group-id"];
                  uint32 m_lag_id = 2 [json_name = "m-lag-id"];
                  enum MLagType {
                     MLagType_ACTIVEX_ACTIVE = 0;
                     MLagType_ACTIVEX_STANDBY = 1;
                  };
                  MLagType m_lag_type = 3 [json_name = "m-lag-type"];
               }
               repeated DfsGroup dfs_group = 1 [json_name = "dfs-group"];
            }
            DfsGroups dfs_groups = 1 [json_name = "dfs-groups"];
            message PeerLink {
               uint32 peer_link_id = 1 [json_name = "peer-link-id"];
               string exclude_vlan = 2 [json_name = "exclude-vlan"];
               enum PeerLinkType {
                  PeerLinkType_PHYSICAL = 0;
                  PeerLinkType_VIRTUAL = 1;
               };
               PeerLinkType peer_link_type = 3 [json_name = "peer-link-type"];
            }
            PeerLink peer_link = 2 [json_name = "peer-link"];
            message ErrorDownPort {
               enum Port {
                  INVALID_ENUM_VALUE_Port = 0;
                  Port_RESERVED = 1;
                  Port_SUSPEND = 2;
               };
               Port port = 1 [json_name = "port"];
            }
            ErrorDownPort error_down_port = 3 [json_name = "error-down-port"];
            message RoutingAddr {
               string routing_ipv4_addr = 1 [json_name = "routing-ipv4-addr"];
               string ipv4_wild = 2 [json_name = "ipv4-wild"];
               string routing_ipv6_addr = 3 [json_name = "routing-ipv6-addr"];
               string routing_addr_linklocal = 4 [json_name = "routing-addr-linklocal"];
            }
            RoutingAddr routing_addr = 4 [json_name = "routing-addr"];
            message UplinkPort {
               enum UplinkPort6 {
                  INVALID_ENUM_VALUE_UplinkPort6 = 0;
                  UplinkPort6_UPLINKX_PORTX_ENABLE = 1;
               };
               UplinkPort6 uplink_port = 1 [json_name = "uplink-port"];
            }
            UplinkPort uplink_port = 5 [json_name = "uplink-port"];
            message DfsPortGroups {
               message DfsPortGroup {
                  uint32 port_group = 1 [json_name = "port-group"];
                  uint32 group_id = 2 [json_name = "group-id"];
               }
               repeated DfsPortGroup dfs_port_group = 1 [json_name = "dfs-port-group"];
            }
            DfsPortGroups dfs_port_groups = 6 [json_name = "dfs-port-groups"];
         }
         MLag m_lag = 186 [json_name = "m-lag"];
         message NacPolicyAssociation {
            message ControlPoint {
               bool enable = 1 [json_name = "enable"];
               bool open = 2 [json_name = "open"];
            }
            ControlPoint control_point = 1 [json_name = "control-point"];
            message UserSync {
               bool enable = 1 [json_name = "enable"];
               uint32 interval = 2 [json_name = "interval"];
               uint32 retry_times = 3 [json_name = "retry-times"];
            }
            UserSync user_sync = 2 [json_name = "user-sync"];
            message ControlDownOffline {
               message ControlDownOffline6_Delay {
                  uint32 delay7 = 1 [json_name = "delay"];
               }
               message ControlDownOffline6_Unlimited {
                  bool unlimited7 = 1 [json_name = "unlimited"];
               }
               oneof ControlDownOffline6 {
                  ControlDownOffline6_Delay control_down_offline_delay = 1 [json_name = "delay"];
                  ControlDownOffline6_Unlimited control_down_offline_unlimited = 2 [json_name = "unlimited"];
               }
            }
            ControlDownOffline control_down_offline = 3 [json_name = "control-down-offline"];
         }
         NacPolicyAssociation nac_policy_association = 187 [json_name = "nac-policy-association"];
         message Nac {
            message AuthenticationProfile {
               string authentication_profile_name = 1 [json_name = "authentication-profile-name"];
            }
            AuthenticationProfile authentication_profile = 1 [json_name = "authentication-profile"];
         }
         Nac nac = 188 [json_name = "nac"];
         message Nat {
            bool nat_enable = 1 [json_name = "nat-enable"];
            bool nat64_enable = 2 [json_name = "nat64-enable"];
         }
         Nat nat = 189 [json_name = "nat"];
         message Pbr {
            message PolicyBasedRoute {
               string policy_name = 1 [json_name = "policy-name"];
            }
            PolicyBasedRoute policy_based_route = 1 [json_name = "policy-based-route"];
            message PolicyBasedRouteApply {
               string policy_name = 1 [json_name = "policy-name"];
            }
            PolicyBasedRouteApply policy_based_route_apply = 2 [json_name = "policy-based-route-apply"];
         }
         Pbr pbr = 190 [json_name = "pbr"];
         message PnpIf {
            message Ipv4NetworkProvisionInfo {
               string address = 1 [json_name = "address"];
               string mask = 2 [json_name = "mask"];
               string server_address = 3 [json_name = "server-address"];
               string tftp_server_address = 4 [json_name = "tftp-server-address"];
               string tftp_server_name = 5 [json_name = "tftp-server-name"];
               string domain_name = 6 [json_name = "domain-name"];
               string boot_file_name = 7 [json_name = "boot-file-name"];
               enum ClientState {
                  ClientState_INIT = 0;
                  ClientState_DISCOVER = 1;
                  ClientState_REQUEST = 2;
                  ClientState_ACK = 3;
                  ClientState_BOUND = 4;
               };
               ClientState client_state = 8 [json_name = "client-state"];
               bool success_flag = 9 [json_name = "success-flag"];
               bool stop_flag = 10 [json_name = "stop-flag"];
               message GatewayLists {
                  message GatewayList {
                     string gateway = 1 [json_name = "gateway"];
                  }
                  repeated GatewayList gateway_list = 1 [json_name = "gateway-list"];
               }
               GatewayLists gateway_lists = 11 [json_name = "gateway-lists"];
               message DnsLists {
                  message DnsList {
                     string dns = 1 [json_name = "dns"];
                  }
                  repeated DnsList dns_list = 1 [json_name = "dns-list"];
               }
               DnsLists dns_lists = 12 [json_name = "dns-lists"];
               message LogServerLists {
                  message LogServerList {
                     string log_server = 1 [json_name = "log-server"];
                  }
                  repeated LogServerList log_server_list = 1 [json_name = "log-server-list"];
               }
               LogServerLists log_server_lists = 13 [json_name = "log-server-lists"];
            }
            Ipv4NetworkProvisionInfo ipv4_network_provision_info = 1 [json_name = "ipv4-network-provision-info"];
            message Ipv6NetworkProvisionInfo {
               string address = 1 [json_name = "address"];
               uint32 mask = 2 [json_name = "mask"];
               string boot_file_name = 3 [json_name = "boot-file-name"];
               bool stop_flag = 4 [json_name = "stop-flag"];
               message GatewayLists {
                  message GatewayList {
                     string gateway = 1 [json_name = "gateway"];
                  }
                  repeated GatewayList gateway_list = 1 [json_name = "gateway-list"];
               }
               GatewayLists gateway_lists = 5 [json_name = "gateway-lists"];
               message DnsLists {
                  message DnsList {
                     string dns = 1 [json_name = "dns"];
                  }
                  repeated DnsList dns_list = 1 [json_name = "dns-list"];
               }
               DnsLists dns_lists = 6 [json_name = "dns-lists"];
            }
            Ipv6NetworkProvisionInfo ipv6_network_provision_info = 2 [json_name = "ipv6-network-provision-info"];
         }
         PnpIf pnp_if = 191 [json_name = "pnp-if"];
         message IcmpRedirect {
            bool if_receive_enable = 1 [json_name = "if-receive-enable"];
         }
         IcmpRedirect icmp_redirect = 192 [json_name = "icmp-redirect"];
         message PreClassify {
            bool pre_classify = 1 [json_name = "pre-classify"];
         }
         PreClassify pre_classify = 193 [json_name = "pre-classify"];
         message RmonStatistic {
            bool enable_flag = 1 [json_name = "enable-flag"];
         }
         RmonStatistic rmon_statistic = 194 [json_name = "rmon-statistic"];
         message Sac {
            bool enable = 1 [json_name = "enable"];
            bool statistic_enable = 2 [json_name = "statistic-enable"];
            enum PortType {
               INVALID_ENUM_VALUE_PortType = 0;
               PortType_UNI = 1;
               PortType_NNI = 2;
               PortType_INI = 3;
            };
            PortType port_type = 3 [json_name = "port-type"];
            bool aggregation_conn_enable = 4 [json_name = "aggregation-conn-enable"];
         }
         Sac sac = 195 [json_name = "sac"];
         message StormControl {
            message StormRates {
               message StormRate {
                  enum PacketType {
                     INVALID_ENUM_VALUE_PacketType = 0;
                     PacketType_BROADCAST = 1;
                     PacketType_UNKNOWNX_MULTICAST = 2;
                     PacketType_UNICAST = 3;
                     PacketType_UNKNOWNX_UNICAST = 4;
                     PacketType_FLOOD = 5;
                  };
                  PacketType packet_type = 1 [json_name = "packet-type"];
                  message RateType_Packet {
                     uint32 pps_min_rate = 1 [json_name = "pps-min-rate"];
                     uint32 pps_max_rate = 2 [json_name = "pps-max-rate"];
                  }
                  message RateType_Cir {
                     uint32 cir_min_rate = 1 [json_name = "cir-min-rate"];
                     uint32 cir_max_rate = 2 [json_name = "cir-max-rate"];
                  }
                  message RateType_Percent {
                     uint32 per_min_rate = 1 [json_name = "per-min-rate"];
                     uint32 per_max_rate = 2 [json_name = "per-max-rate"];
                  }
                  oneof RateType {
                     RateType_Packet rate_type_packet = 2 [json_name = "packet"];
                     RateType_Cir rate_type_cir = 3 [json_name = "cir"];
                     RateType_Percent rate_type_percent = 4 [json_name = "percent"];
                  }
               }
               repeated StormRate storm_rate = 1 [json_name = "storm-rate"];
            }
            StormRates storm_rates = 1 [json_name = "storm-rates"];
            message StormControlAction {
               enum Action {
                  INVALID_ENUM_VALUE_Action = 0;
                  Action_ERRORX_DOWN = 1;
                  Action_BLOCK = 2;
                  Action_SUPPRESS = 3;
               };
               Action action = 1 [json_name = "action"];
               bool log = 2 [json_name = "log"];
               bool trap = 3 [json_name = "trap"];
               uint32 interval = 4 [json_name = "interval"];
            }
            StormControlAction storm_control_action = 2 [json_name = "storm-control-action"];
            message StormControlState {
               enum PacketType {
                  INVALID_ENUM_VALUE_PacketType = 0;
                  PacketType_BROADCAST = 1;
                  PacketType_UNKNOWNX_MULTICAST = 2;
                  PacketType_UNICAST = 3;
                  PacketType_UNKNOWNX_UNICAST = 4;
                  PacketType_FLOOD = 5;
               };
               PacketType packet_type = 1 [json_name = "packet-type"];
               enum Punish {
                  INVALID_ENUM_VALUE_Punish = 0;
                  Punish_NORMAL = 1;
                  Punish_ERRX_DOWN = 2;
                  Punish_BLOCK = 3;
                  Punish_SUPPRESS = 4;
               };
               Punish punish = 2 [json_name = "punish"];
               string last_punish_time = 3 [json_name = "last-punish-time"];
               enum Mode {
                  INVALID_ENUM_VALUE_Mode = 0;
                  Mode_PPS = 1;
                  Mode_PER = 2;
                  Mode_KBPS = 3;
               };
               Mode mode = 4 [json_name = "mode"];
               string port_name = 5 [json_name = "port-name"];
               uint32 min_rate = 6 [json_name = "min-rate"];
               uint32 max_rate = 7 [json_name = "max-rate"];
               enum ActionState {
                  INVALID_ENUM_VALUE_ActionState = 0;
                  ActionState_ERRORX_DOWN = 1;
                  ActionState_BLOCK = 2;
                  ActionState_SUPPRESS = 3;
               };
               ActionState action_state = 8 [json_name = "action-state"];
               enum TrapState {
                  TrapState_OFF = 0;
                  TrapState_ON = 1;
               };
               TrapState trap_state = 9 [json_name = "trap-state"];
               enum LogState {
                  LogState_OFF = 0;
                  LogState_ON = 1;
               };
               LogState log_state = 10 [json_name = "log-state"];
               uint32 interval = 11 [json_name = "interval"];
            }
            StormControlState storm_control_state = 3 [json_name = "storm-control-state"];
         }
         StormControl storm_control = 196 [json_name = "storm-control"];
         message StormSuppress {
            message StormRates {
               message StormRate {
                  enum PacketType {
                     INVALID_ENUM_VALUE_PacketType = 0;
                     PacketType_BROADCAST = 1;
                     PacketType_UNKNOWNX_MULTICAST = 2;
                     PacketType_UNICAST = 3;
                     PacketType_UNKNOWNX_UNICAST = 4;
                     PacketType_FLOOD = 5;
                  };
                  PacketType packet_type = 1 [json_name = "packet-type"];
                  message RateType_Packet {
                     uint32 pps = 1 [json_name = "pps"];
                  }
                  message RateType_Rate {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                  }
                  message RateType_Percent {
                     uint32 percent8 = 1 [json_name = "percent"];
                  }
                  oneof RateType {
                     RateType_Packet rate_type_packet = 2 [json_name = "packet"];
                     RateType_Rate rate_type_rate = 3 [json_name = "rate"];
                     RateType_Percent rate_type_percent = 4 [json_name = "percent"];
                  }
               }
               repeated StormRate storm_rate = 1 [json_name = "storm-rate"];
            }
            StormRates storm_rates = 1 [json_name = "storm-rates"];
         }
         StormSuppress storm_suppress = 197 [json_name = "storm-suppress"];
         message Tcpfpm {
            bool enable = 1 [json_name = "enable"];
         }
         Tcpfpm tcpfpm = 198 [json_name = "tcpfpm"];
         message VoiceVlan {
            uint32 voice_vlan_id = 1 [json_name = "voice-vlan-id"];
            bool include_untagged = 2 [json_name = "include-untagged"];
            bool include_tag0 = 3 [json_name = "include-tag0"];
            enum RemarkMode {
               RemarkMode_VLAN = 0;
               RemarkMode_MACX_ADDRESS = 1;
            };
            RemarkMode remark_mode = 4 [json_name = "remark-mode"];
            enum Security {
               Security_DISABLE = 0;
               Security_ENABLE = 1;
            };
            Security security = 5 [json_name = "security"];
            enum Mode {
               Mode_AUTO = 0;
               Mode_MANUAL = 1;
            };
            Mode mode = 6 [json_name = "mode"];
            enum Legacy {
               Legacy_ENABLE = 0;
               Legacy_DISABLE = 1;
            };
            Legacy legacy = 7 [json_name = "legacy"];
         }
         VoiceVlan voice_vlan = 199 [json_name = "voice-vlan"];
         message ForceDecapsulation {
            bool enable = 1 [json_name = "enable"];
         }
         ForceDecapsulation force_decapsulation = 200 [json_name = "force-decapsulation"];
         message L2SubifDot1QEgrVids {
            uint32 vid = 1 [json_name = "vid"];
         }
         L2SubifDot1QEgrVids l2subif_dot1q_egr_vids = 201 [json_name = "l2subif-dot1q-egr-vids"];
         message FloodProxy {
            string proxy_ip = 1 [json_name = "proxy-ip"];
         }
         FloodProxy flood_proxy = 202 [json_name = "flood-proxy"];
         message VniReserved {
            uint32 vni = 1 [json_name = "vni"];
         }
         VniReserved vni_reserved = 203 [json_name = "vni-reserved"];
         message ArpSnooping {
            bool enable = 1 [json_name = "enable"];
         }
         ArpSnooping arp_snooping = 204 [json_name = "arp-snooping"];
         message Dai {
            bool enable = 1 [json_name = "enable"];
            message CheckItems {
               bool ip_check = 1 [json_name = "ip-check"];
               bool mac_check = 2 [json_name = "mac-check"];
               bool vlan_check = 3 [json_name = "vlan-check"];
            }
            CheckItems check_items = 2 [json_name = "check-items"];
            bool alarm_enable = 3 [json_name = "alarm-enable"];
            uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
         }
         Dai dai = 205 [json_name = "dai"];
         message Ipsg {
            bool ipv4_check_enable = 1 [json_name = "ipv4-check-enable"];
            bool ipv6_check_enable = 2 [json_name = "ipv6-check-enable"];
            bool alarm_enable = 3 [json_name = "alarm-enable"];
            uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
            message CheckItems {
               bool ip_check = 1 [json_name = "ip-check"];
               bool mac_check = 2 [json_name = "mac-check"];
               bool vlan_check = 3 [json_name = "vlan-check"];
            }
            CheckItems check_items = 5 [json_name = "check-items"];
         }
         Ipsg ipsg = 206 [json_name = "ipsg"];
         message Nvo3Ipv6TunnelStatistics {
            message Nvo3Ipv6TunnelStatistic {
               uint32 vni = 1 [json_name = "vni"];
               string source = 2 [json_name = "source"];
               string peer = 3 [json_name = "peer"];
               uint64 send_bits_rate = 4 [json_name = "send-bits-rate"];
               uint64 send_pkts_rate = 5 [json_name = "send-pkts-rate"];
               uint64 send_unicast_pkts = 6 [json_name = "send-unicast-pkts"];
               uint64 send_multicast_pkts = 7 [json_name = "send-multicast-pkts"];
               uint64 send_broadcast_pkts = 8 [json_name = "send-broadcast-pkts"];
               uint64 send_total_bytes = 9 [json_name = "send-total-bytes"];
               uint64 send_total_pkts = 10 [json_name = "send-total-pkts"];
               uint64 receive_bits_rate = 11 [json_name = "receive-bits-rate"];
               uint64 receive_pkts_rate = 12 [json_name = "receive-pkts-rate"];
               uint64 receive_unicast_pkts = 13 [json_name = "receive-unicast-pkts"];
               uint64 receive_multicast_pkts = 14 [json_name = "receive-multicast-pkts"];
               uint64 receive_broadcast_pkts = 15 [json_name = "receive-broadcast-pkts"];
               uint64 receive_total_bytes = 16 [json_name = "receive-total-bytes"];
               uint64 receive_total_pkts = 17 [json_name = "receive-total-pkts"];
               uint64 drop_unicast_pkts = 18 [json_name = "drop-unicast-pkts"];
               uint64 drop_multicast_pkts = 19 [json_name = "drop-multicast-pkts"];
               uint64 drop_broadcast_pkts = 20 [json_name = "drop-broadcast-pkts"];
            }
            repeated Nvo3Ipv6TunnelStatistic nvo3_ipv6_tunnel_statistic = 1 [json_name = "nvo3-ipv6-tunnel-statistic"];
         }
         Nvo3Ipv6TunnelStatistics nvo3_ipv6_tunnel_statistics = 207 [json_name = "nvo3-ipv6-tunnel-statistics"];
         message Dhcpv6SnoopingAttribute {
            message BasicAttribute {
               bool enable = 1 [json_name = "enable"];
               bool alarm_ipv6_enable = 2 [json_name = "alarm-ipv6-enable"];
               uint32 alarm_ipv6_threshold = 3 [json_name = "alarm-ipv6-threshold"];
               bool check_ipv6_enable = 4 [json_name = "check-ipv6-enable"];
               bool nomatch_packet_forward_policy = 5 [json_name = "nomatch-packet-forward-policy"];
               uint64 ipv6_packet_discarded_count = 6 [json_name = "ipv6-packet-discarded-count"];
            }
            BasicAttribute basic_attribute = 1 [json_name = "basic-attribute"];
            message StaticBinds {
               message StaticBind {
                  string ipv6_address = 1 [json_name = "ipv6-address"];
                  uint32 ipv6_mask = 2 [json_name = "ipv6-mask"];
                  uint32 vlan_id = 3 [json_name = "vlan-id"];
                  uint32 cevlan_id = 4 [json_name = "cevlan-id"];
                  string mac_address = 5 [json_name = "mac-address"];
               }
               repeated StaticBind static_bind = 1 [json_name = "static-bind"];
            }
            StaticBinds static_binds = 2 [json_name = "static-binds"];
         }
         Dhcpv6SnoopingAttribute dhcpv6_snooping_attribute = 209 [json_name = "dhcpv6-snooping-attribute"];
         message FimTcp6Mss {
            uint32 tcp6_mss = 1 [json_name = "tcp6-mss"];
         }
         FimTcp6Mss fim_tcp6_mss = 210 [json_name = "fim-tcp6-mss"];
         message Atm {
            enum InterfaceType {
               INVALID_ENUM_VALUE_InterfaceType = 0;
               InterfaceType_UNI = 1;
               InterfaceType_NNI = 2;
            };
            InterfaceType interface_type = 1 [json_name = "interface-type"];
            uint32 max_pvc = 2 [json_name = "max-pvc"];
            enum LinkCheck {
               LinkCheck_DISABLE = 0;
               LinkCheck_ENABLE = 1;
            };
            LinkCheck link_check = 3 [json_name = "link-check"];
            enum CellTrans {
               CellTrans_DISABLE = 0;
               CellTrans_ENABLE = 1;
            };
            CellTrans cell_trans = 4 [json_name = "cell-trans"];
            uint32 bandwidth_overload = 5 [json_name = "bandwidth-overload"];
            uint32 interfase_priority = 6 [json_name = "interfase-priority"];
            message Pvcs {
               message Pvc {
                  uint32 vpi = 1 [json_name = "vpi"];
                  uint32 vci = 2 [json_name = "vci"];
                  string pvc_name = 3 [json_name = "pvc-name"];
                  enum InterfaceState {
                     InterfaceState_UP = 0;
                     InterfaceState_DOWN = 1;
                  };
                  InterfaceState interface_state = 4 [json_name = "interface-state"];
                  enum PvcState {
                     PvcState_UP = 0;
                     PvcState_DOWN = 1;
                  };
                  PvcState pvc_state = 5 [json_name = "pvc-state"];
                  enum Bidirectional {
                     INVALID_ENUM_VALUE_Bidirectional = 0;
                     Bidirectional_DIRECTIONAL = 1;
                     Bidirectional_BIDIRECTIONAL = 2;
                  };
                  Bidirectional bidirectional = 6 [json_name = "bidirectional"];
                  uint32 map_vpi = 7 [json_name = "map-vpi"];
                  uint32 map_vci = 8 [json_name = "map-vci"];
                  string intf_service_name = 9 [json_name = "intf-service-name"];
                  string out_service_name = 10 [json_name = "out-service-name"];
                  enum Encapsulation {
                     Encapsulation_NONE = 0;
                     Encapsulation_AAL5SNAP = 1;
                     Encapsulation_AAL5MUX = 2;
                     Encapsulation_AAL5NLPID = 3;
                     Encapsulation_AAL5NLPIDIETF = 4;
                  };
                  Encapsulation encapsulation = 11 [json_name = "encapsulation"];
                  string description = 12 [json_name = "description"];
                  enum Shutdown {
                     Shutdown_UP = 0;
                     Shutdown_DOWN = 1;
                  };
                  Shutdown shutdown = 13 [json_name = "shutdown"];
                  uint32 priority = 14 [json_name = "priority"];
                  message MapIpStats {
                     message MapIpStat {
                        string ip_address = 1 [json_name = "ip-address"];
                        enum Broadcast {
                           Broadcast_DISABLE = 0;
                           Broadcast_ENABLE = 1;
                        };
                        Broadcast broadcast = 2 [json_name = "broadcast"];
                        enum MapState {
                           MapState_UP = 0;
                           MapState_DOWN = 1;
                        };
                        MapState map_state = 3 [json_name = "map-state"];
                     }
                     repeated MapIpStat map_ip_stat = 1 [json_name = "map-ip-stat"];
                  }
                  MapIpStats map_ip_stats = 15 [json_name = "map-ip-stats"];
                  message InarpMapIp {
                     string ip_address = 1 [json_name = "ip-address"];
                     enum InarpEnable {
                        InarpEnable_DISABLE = 0;
                        InarpEnable_ENABLE = 1;
                     };
                     InarpEnable inarp_enable = 2 [json_name = "inarp-enable"];
                     uint32 minutes = 3 [json_name = "minutes"];
                     enum Broadcast {
                        Broadcast_DISABLE = 0;
                        Broadcast_ENABLE = 1;
                     };
                     Broadcast broadcast = 4 [json_name = "broadcast"];
                     enum MapState {
                        MapState_UP = 0;
                        MapState_DOWN = 1;
                     };
                     MapState map_state = 5 [json_name = "map-state"];
                  }
                  InarpMapIp inarp_map_ip = 16 [json_name = "inarp-map-ip"];
                  string in_service_name = 17 [json_name = "in-service-name"];
                  message MapIpStatics {
                     message MapIpStatic {
                        string ip_address = 1 [json_name = "ip-address"];
                        enum Broadcast {
                           Broadcast_DISABLE = 0;
                           Broadcast_ENABLE = 1;
                        };
                        Broadcast broadcast = 2 [json_name = "broadcast"];
                        enum MapState {
                           MapState_UP = 0;
                           MapState_DOWN = 1;
                        };
                        MapState map_state = 3 [json_name = "map-state"];
                     }
                     repeated MapIpStatic map_ip_static = 1 [json_name = "map-ip-static"];
                  }
                  MapIpStatics map_ip_statics = 18 [json_name = "map-ip-statics"];
               }
               repeated Pvc pvc = 1 [json_name = "pvc"];
            }
            Pvcs pvcs = 7 [json_name = "pvcs"];
            message Pvps {
               message Pvp {
                  uint32 vpi = 1 [json_name = "vpi"];
                  enum InterfaceState {
                     InterfaceState_UP = 0;
                     InterfaceState_DOWN = 1;
                  };
                  InterfaceState interface_state = 2 [json_name = "interface-state"];
                  enum PvpState {
                     PvpState_UP = 0;
                     PvpState_DOWN = 1;
                  };
                  PvpState pvp_state = 3 [json_name = "pvp-state"];
                  enum Bidirectional {
                     INVALID_ENUM_VALUE_Bidirectional = 0;
                     Bidirectional_DIRECTIONAL = 1;
                     Bidirectional_BIDIRECTIONAL = 2;
                  };
                  Bidirectional bidirectional = 4 [json_name = "bidirectional"];
                  uint32 map_pvp = 5 [json_name = "map-pvp"];
                  string intf_service_name = 6 [json_name = "intf-service-name"];
                  string out_service_name = 7 [json_name = "out-service-name"];
                  enum Shutdown {
                     Shutdown_UP = 0;
                     Shutdown_DOWN = 1;
                  };
                  Shutdown shutdown = 8 [json_name = "shutdown"];
                  uint32 priority = 9 [json_name = "priority"];
                  string in_service_name = 10 [json_name = "in-service-name"];
               }
               repeated Pvp pvp = 1 [json_name = "pvp"];
            }
            Pvps pvps = 8 [json_name = "pvps"];
            uint32 interface_priority = 9 [json_name = "interface-priority"];
         }
         Atm atm = 211 [json_name = "atm"];
         message Ima {
            message ImaGroup {
               uint32 min_active = 1 [json_name = "min-active"];
               enum FrameLen {
                  INVALID_ENUM_VALUE_FrameLen = 0;
                  FrameLen_FRAMEX_LENGTHX_32 = 32;
                  FrameLen_FRAMEX_LENGTHX_64 = 64;
                  FrameLen_FRAMEX_LENGTHX_128 = 128;
                  FrameLen_FRAMEX_LENGTHX_256 = 256;
               };
               FrameLen frame_len = 2 [json_name = "frame-len"];
               uint32 diff_delay = 3 [json_name = "diff-delay"];
               enum ClockMode {
                  ClockMode_CTC = 0;
                  ClockMode_ITC = 1;
               };
               ClockMode clock_mode = 4 [json_name = "clock-mode"];
               message Members {
                  message Member {
                     string member_name = 1 [json_name = "member-name"];
                  }
                  repeated Member member = 1 [json_name = "member"];
               }
               Members members = 5 [json_name = "members"];
            }
            ImaGroup ima_group = 1 [json_name = "ima-group"];
         }
         Ima ima = 212 [json_name = "ima"];
         message Mdn {
            message Session {
               enum MdnStatus {
                  INVALID_ENUM_VALUE_MdnStatus = 0;
                  MdnStatus_RXX_ONLY = 2;
                  MdnStatus_TXRX = 3;
                  MdnStatus_DISABLED = 4;
                  MdnStatus_DEFAULT = 5;
               };
               MdnStatus mdn_status = 1 [json_name = "mdn-status"];
               message Neighbors {
                  message Neighbor {
                     uint32 index = 1 [json_name = "index"];
                     string system_mac_address = 2 [json_name = "system-mac-address"];
                     string discovered_time = 3 [json_name = "discovered-time"];
                     string device_id = 4 [json_name = "device-id"];
                     string port_id = 5 [json_name = "port-id"];
                     string system_version = 6 [json_name = "system-version"];
                     string system_platform = 7 [json_name = "system-platform"];
                     string system_capabilities = 8 [json_name = "system-capabilities"];
                     uint32 expired_time = 9 [json_name = "expired-time"];
                     uint32 power_drawn = 10 [json_name = "power-drawn"];
                     uint32 power_request_id = 11 [json_name = "power-request-id"];
                     uint32 power_management_id = 12 [json_name = "power-management-id"];
                     uint32 power_request_first = 13 [json_name = "power-request-first"];
                     uint32 power_request_second = 14 [json_name = "power-request-second"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
               message Statistics {
                  uint32 total_neighbors = 1 [json_name = "total-neighbors"];
                  uint32 transmitted_frames = 2 [json_name = "transmitted-frames"];
                  uint32 received_frames = 3 [json_name = "received-frames"];
                  uint32 discarded_frames = 4 [json_name = "discarded-frames"];
                  uint32 error_frames = 5 [json_name = "error-frames"];
                  uint32 checksum_error_frames = 6 [json_name = "checksum-error-frames"];
                  string last_cleared_time = 7 [json_name = "last-cleared-time"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            Session session = 1 [json_name = "session"];
         }
         Mdn mdn = 213 [json_name = "mdn"];
         message LatestIncrementalStatistics {
            uint32 stati_interval = 1 [json_name = "stati-interval"];
            uint64 receive_byte = 2 [json_name = "receive-byte"];
            uint64 send_byte = 3 [json_name = "send-byte"];
            uint64 receive_packet = 4 [json_name = "receive-packet"];
            uint64 send_packet = 5 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 6 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 7 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 8 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 9 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 10 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 11 [json_name = "send-broad-packet"];
            uint64 receive_drop_packet = 12 [json_name = "receive-drop-packet"];
            uint64 send_drop_packet = 13 [json_name = "send-drop-packet"];
            uint64 crc_error_packet = 14 [json_name = "crc-error-packet"];
         }
         LatestIncrementalStatistics latest_incremental_statistics = 214 [json_name = "latest-incremental-statistics"];
         message BindNat {
            string acl = 1 [json_name = "acl"];
            string nat_instance = 2 [json_name = "nat-instance"];
            enum DenyAction {
               DenyAction_DROP = 0;
               DenyAction_FORWARD = 1;
            };
            DenyAction deny_action = 3 [json_name = "deny-action"];
            uint32 precedence = 4 [json_name = "precedence"];
         }
         BindNat bind_nat = 215 [json_name = "bind-nat"];
         message HdlcLink {
            message PortAlarm {
               bool crc_error_down = 1 [json_name = "crc-error-down"];
               enum CrcWordLength {
                  INVALID_ENUM_VALUE_CrcWordLength = 0;
                  CrcWordLength_CRC16 = 16;
                  CrcWordLength_CRC32 = 32;
               };
               CrcWordLength crc_word_length = 2 [json_name = "crc-word-length"];
               message AlarmType_HighLowThreshold {
                  message CrcErrorThreshold {
                     uint32 high_threshold = 1 [json_name = "high-threshold"];
                     uint32 low_threshold = 2 [json_name = "low-threshold"];
                     uint32 interval = 3 [json_name = "interval"];
                  }
                  CrcErrorThreshold crc_error_threshold = 1 [json_name = "crc-error-threshold"];
               }
               message AlarmType_BitErrorRatio {
                  message BitErrorRatio7 {
                     uint32 bit_alarm_coefficient = 1 [json_name = "bit-alarm-coefficient"];
                     uint32 bit_alarm_exponent = 2 [json_name = "bit-alarm-exponent"];
                     uint32 bit_resume_coefficient = 3 [json_name = "bit-resume-coefficient"];
                     uint32 bit_resume_exponent = 4 [json_name = "bit-resume-exponent"];
                  }
                  BitErrorRatio7 bit_error_ratio = 1 [json_name = "bit-error-ratio"];
               }
               message AlarmType_PacketErrorRatio {
                  message PacketErrorRatio7 {
                     uint32 packet_alarm_coefficient = 1 [json_name = "packet-alarm-coefficient"];
                     uint32 packet_alarm_exponent = 2 [json_name = "packet-alarm-exponent"];
                     uint32 packet_resume_coefficient = 3 [json_name = "packet-resume-coefficient"];
                     uint32 packet_resume_exponent = 4 [json_name = "packet-resume-exponent"];
                     message CrcSample {
                        uint32 sample_window_factor = 1 [json_name = "sample-window-factor"];
                        uint32 child_window_max_number = 2 [json_name = "child-window-max-number"];
                        uint32 child_window_alarm_number = 3 [json_name = "child-window-alarm-number"];
                        uint32 child_window_resume_number = 4 [json_name = "child-window-resume-number"];
                     }
                     CrcSample crc_sample = 5 [json_name = "crc-sample"];
                  }
                  PacketErrorRatio7 packet_error_ratio = 1 [json_name = "packet-error-ratio"];
               }
               oneof AlarmType {
                  AlarmType_HighLowThreshold alarm_type_high_low_threshold = 3 [json_name = "high-low-threshold"];
                  AlarmType_BitErrorRatio alarm_type_bit_error_ratio = 4 [json_name = "bit-error-ratio"];
                  AlarmType_PacketErrorRatio alarm_type_packet_error_ratio = 5 [json_name = "packet-error-ratio"];
               }
            }
            PortAlarm port_alarm = 1 [json_name = "port-alarm"];
         }
         HdlcLink hdlc_link = 216 [json_name = "hdlc-link"];
         message ModeFlexe {
            uint32 bandwidth = 1 [json_name = "bandwidth"];
         }
         ModeFlexe mode_flexe = 217 [json_name = "mode-flexe"];
         message DecapEnable {
            bool decap_enable = 1 [json_name = "decap-enable"];
         }
         DecapEnable decap_enable = 218 [json_name = "decap-enable"];
         message SliceMain {
            uint32 remain_bandwidth = 1 [json_name = "remain-bandwidth"];
            uint64 remain_in_bit_rate = 2 [json_name = "remain-in-bit-rate"];
            uint64 remain_out_bit_rate = 3 [json_name = "remain-out-bit-rate"];
         }
         SliceMain slice_main = 219 [json_name = "slice-main"];
         message ModeChannel {
            enum ModeChannelEnable {
               ModeChannelEnable_DISABLE = 0;
               ModeChannelEnable_ENABLE = 1;
            };
            ModeChannelEnable mode_channel_enable = 1 [json_name = "mode-channel-enable"];
            uint32 bandwidth = 2 [json_name = "bandwidth"];
         }
         ModeChannel mode_channel = 220 [json_name = "mode-channel"];
         message LsPortQueue {
            enum WfqMode {
               WfqMode_CIRX_MODE = 0;
               WfqMode_WEIGHTX_MODE = 1;
            };
            WfqMode wfq_mode = 1 [json_name = "wfq-mode"];
            message PortQueues {
               message PortQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  message Schedule_Wfq {
                     message WfqWeightMode_WfqCir {
                        message WfqCirType_Value {
                           uint32 wfq_cir_value = 1 [json_name = "wfq-cir-value"];
                        }
                        message WfqCirType_Percentage {
                           uint32 wfq_cir_percentage = 1 [json_name = "wfq-cir-percentage"];
                        }
                        oneof WfqCirType {
                           WfqCirType_Value wfq_cir_type_value = 1 [json_name = "value"];
                           WfqCirType_Percentage wfq_cir_type_percentage = 2 [json_name = "percentage"];
                        }
                        message WfqPirType_Value {
                           uint32 wfq_pir_value = 1 [json_name = "wfq-pir-value"];
                        }
                        message WfqPirType_Percentage {
                           uint32 wfq_pir_percentage = 1 [json_name = "wfq-pir-percentage"];
                        }
                        oneof WfqPirType {
                           WfqPirType_Value wfq_pir_type_value = 3 [json_name = "value"];
                           WfqPirType_Percentage wfq_pir_type_percentage = 4 [json_name = "percentage"];
                        }
                     }
                     message WfqWeightMode_WfqWeight {
                        uint32 wfq_weight_value = 1 [json_name = "wfq-weight-value"];
                        message WfqWeightPirType_Value {
                           uint32 wfq_shaping_value = 1 [json_name = "wfq-shaping-value"];
                        }
                        message WfqWeightPirType_Percentage {
                           uint32 wfq_shaping_percentage = 1 [json_name = "wfq-shaping-percentage"];
                        }
                        oneof WfqWeightPirType {
                           WfqWeightPirType_Value wfq_weight_pir_type_value = 2 [json_name = "value"];
                           WfqWeightPirType_Percentage wfq_weight_pir_type_percentage = 3 [json_name = "percentage"];
                        }
                     }
                     oneof WfqWeightMode {
                        WfqWeightMode_WfqCir wfq_weight_mode_wfq_cir = 1 [json_name = "wfq-cir"];
                        WfqWeightMode_WfqWeight wfq_weight_mode_wfq_weight = 2 [json_name = "wfq-weight"];
                     }
                  }
                  message Schedule_Pq {
                     message PqPirType_Value {
                        uint32 pq_pir_value = 1 [json_name = "pq-pir-value"];
                     }
                     message PqPirType_Percentage {
                        uint32 pq_pir_percentage = 1 [json_name = "pq-pir-percentage"];
                     }
                     oneof PqPirType {
                        PqPirType_Value pq_pir_type_value = 1 [json_name = "value"];
                        PqPirType_Percentage pq_pir_type_percentage = 2 [json_name = "percentage"];
                     }
                  }
                  oneof Schedule {
                     Schedule_Wfq schedule_wfq = 2 [json_name = "wfq"];
                     Schedule_Pq schedule_pq = 3 [json_name = "pq"];
                  }
                  uint32 max_buffer_time = 4 [json_name = "max-buffer-time"];
                  message Statistic {
                     uint32 queue_usage = 1 [json_name = "queue-usage"];
                     uint64 total_pass_packets = 2 [json_name = "total-pass-packets"];
                     uint64 total_pass_bytes = 3 [json_name = "total-pass-bytes"];
                     uint64 total_pass_packet_rate = 4 [json_name = "total-pass-packet-rate"];
                     uint64 total_pass_bit_rate = 5 [json_name = "total-pass-bit-rate"];
                     uint64 drop_packets = 6 [json_name = "drop-packets"];
                     uint64 drop_packet_rate = 7 [json_name = "drop-packet-rate"];
                     uint64 drop_bytes = 8 [json_name = "drop-bytes"];
                     uint64 drop_bit_rate = 9 [json_name = "drop-bit-rate"];
                     string last_clear_time = 10 [json_name = "last-clear-time"];
                     uint64 tail_drop_packets = 11 [json_name = "tail-drop-packets"];
                     uint64 tail_drop_packet_rate = 12 [json_name = "tail-drop-packet-rate"];
                     uint64 buffer_drop_packets = 13 [json_name = "buffer-drop-packets"];
                     uint64 buffer_drop_packet_rate = 14 [json_name = "buffer-drop-packet-rate"];
                     uint64 mtu_drop_packets = 15 [json_name = "mtu-drop-packets"];
                     uint64 mtu_drop_packet_rate = 16 [json_name = "mtu-drop-packet-rate"];
                  }
                  Statistic statistic = 5 [json_name = "statistic"];
               }
               repeated PortQueue port_queue = 1 [json_name = "port-queue"];
            }
            PortQueues port_queues = 2 [json_name = "port-queues"];
         }
         LsPortQueue ls_port_queue = 221 [json_name = "ls-port-queue"];
         message AdaptiveRouting {
            enum DragonflyRole {
               INVALID_ENUM_VALUE_DragonflyRole = 0;
               DragonflyRole_GLOBAL = 1;
               DragonflyRole_LOCAL = 2;
            };
            DragonflyRole dragonfly_role = 1 [json_name = "dragonfly-role"];
         }
         AdaptiveRouting adaptive_routing = 222 [json_name = "adaptive-routing"];
         message TrafficFilterApplys {
            message TrafficFilterApply {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INBOUND = 1;
                  Direction_OUTBOUND = 2;
               };
               Direction direction = 1 [json_name = "direction"];
               message AclInstances {
                  message AclInstance {
                     string acl = 1 [json_name = "acl"];
                     bool ipv6 = 2 [json_name = "ipv6"];
                     bool enable_statistic = 3 [json_name = "enable-statistic"];
                     message Statistics {
                        message Statistic {
                           string rule = 1 [json_name = "rule"];
                           string slot = 2 [json_name = "slot"];
                           enum ApplyStatus {
                              INVALID_ENUM_VALUE_ApplyStatus = 0;
                              ApplyStatus_SUCCESS = 1;
                              ApplyStatus_FAILURE = 2;
                           };
                           ApplyStatus apply_status = 3 [json_name = "apply-status"];
                           uint64 match_permit_packet = 4 [json_name = "match-permit-packet"];
                           uint64 match_permit_byte = 5 [json_name = "match-permit-byte"];
                           uint64 match_discarded_packet = 6 [json_name = "match-discarded-packet"];
                           uint64 match_discarded_byte = 7 [json_name = "match-discarded-byte"];
                        }
                        repeated Statistic statistic = 1 [json_name = "statistic"];
                     }
                     Statistics statistics = 4 [json_name = "statistics"];
                  }
                  repeated AclInstance acl_instance = 1 [json_name = "acl-instance"];
               }
               AclInstances acl_instances = 2 [json_name = "acl-instances"];
            }
            repeated TrafficFilterApply traffic_filter_apply = 1 [json_name = "traffic-filter-apply"];
         }
         TrafficFilterApplys traffic_filter_applys = 224 [json_name = "traffic-filter-applys"];
         message TrafficRemarkApplys {
            message TrafficRemarkApply {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INBOUND = 1;
                  Direction_OUTBOUND = 2;
               };
               Direction direction = 1 [json_name = "direction"];
               message AclInstances {
                  message AclInstance {
                     string acl = 1 [json_name = "acl"];
                     bool ipv6 = 2 [json_name = "ipv6"];
                     uint32 dot1p_value = 3 [json_name = "dot1p-value"];
                     uint32 dot11e_value = 4 [json_name = "dot11e-value"];
                     uint32 dscp_value = 5 [json_name = "dscp-value"];
                     message Statuses {
                        message Status {
                           string rule = 1 [json_name = "rule"];
                           string slot = 2 [json_name = "slot"];
                           enum ApplyStatus {
                              INVALID_ENUM_VALUE_ApplyStatus = 0;
                              ApplyStatus_SUCCESS = 1;
                              ApplyStatus_FAILURE = 2;
                           };
                           ApplyStatus apply_status = 3 [json_name = "apply-status"];
                        }
                        repeated Status status = 1 [json_name = "status"];
                     }
                     Statuses statuses = 6 [json_name = "statuses"];
                  }
                  repeated AclInstance acl_instance = 1 [json_name = "acl-instance"];
               }
               AclInstances acl_instances = 2 [json_name = "acl-instances"];
            }
            repeated TrafficRemarkApply traffic_remark_apply = 1 [json_name = "traffic-remark-apply"];
         }
         TrafficRemarkApplys traffic_remark_applys = 225 [json_name = "traffic-remark-applys"];
         message TrafficLimitApplys {
            message TrafficLimitApply {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INBOUND = 1;
                  Direction_OUTBOUND = 2;
               };
               Direction direction = 1 [json_name = "direction"];
               message AclInstances {
                  message AclInstance {
                     string acl = 1 [json_name = "acl"];
                     bool ipv6 = 2 [json_name = "ipv6"];
                     uint32 cir = 3 [json_name = "cir"];
                     uint32 pir = 4 [json_name = "pir"];
                     uint32 cbs = 5 [json_name = "cbs"];
                     uint32 pbs = 6 [json_name = "pbs"];
                     message Green {
                        message Action_Drop {
                           message Drop10 {
                           }
                           Drop10 drop10 = 1 [json_name = "drop"];
                        }
                        message Action_Pass {
                           message Pass10 {
                              uint32 remark_dscp = 1 [json_name = "remark-dscp"];
                           }
                           Pass10 pass10 = 1 [json_name = "pass"];
                        }
                        oneof Action {
                           Action_Drop action_drop = 1 [json_name = "drop"];
                           Action_Pass action_pass = 2 [json_name = "pass"];
                        }
                     }
                     Green green = 7 [json_name = "green"];
                     message Yellow {
                        message Action_Drop {
                           message Drop10 {
                           }
                           Drop10 drop10 = 1 [json_name = "drop"];
                        }
                        message Action_Pass {
                           message Pass10 {
                              uint32 remark_dscp = 1 [json_name = "remark-dscp"];
                           }
                           Pass10 pass10 = 1 [json_name = "pass"];
                        }
                        oneof Action {
                           Action_Drop action_drop = 1 [json_name = "drop"];
                           Action_Pass action_pass = 2 [json_name = "pass"];
                        }
                     }
                     Yellow yellow = 8 [json_name = "yellow"];
                     message Red {
                        message Action_Drop {
                           message Drop10 {
                           }
                           Drop10 drop10 = 1 [json_name = "drop"];
                        }
                        message Action_Pass {
                           message Pass10 {
                              uint32 remark_dscp = 1 [json_name = "remark-dscp"];
                           }
                           Pass10 pass10 = 1 [json_name = "pass"];
                        }
                        oneof Action {
                           Action_Drop action_drop = 1 [json_name = "drop"];
                           Action_Pass action_pass = 2 [json_name = "pass"];
                        }
                     }
                     Red red = 9 [json_name = "red"];
                     message Statuses {
                        message Status {
                           string rule = 1 [json_name = "rule"];
                           string slot = 2 [json_name = "slot"];
                           enum ApplyStatus {
                              INVALID_ENUM_VALUE_ApplyStatus = 0;
                              ApplyStatus_SUCCESS = 1;
                              ApplyStatus_FAILURE = 2;
                           };
                           ApplyStatus apply_status = 3 [json_name = "apply-status"];
                        }
                        repeated Status status = 1 [json_name = "status"];
                     }
                     Statuses statuses = 10 [json_name = "statuses"];
                  }
                  repeated AclInstance acl_instance = 1 [json_name = "acl-instance"];
               }
               AclInstances acl_instances = 2 [json_name = "acl-instances"];
            }
            repeated TrafficLimitApply traffic_limit_apply = 1 [json_name = "traffic-limit-apply"];
         }
         TrafficLimitApplys traffic_limit_applys = 226 [json_name = "traffic-limit-applys"];
         message TrafficRedirectApplys {
            message TrafficRedirectApply {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INBOUND = 1;
                  Direction_OUTBOUND = 2;
               };
               Direction direction = 1 [json_name = "direction"];
               message AclInstances {
                  message AclInstance {
                     string acl = 1 [json_name = "acl"];
                     bool ipv6 = 2 [json_name = "ipv6"];
                     message Direction_Cpu {
                        bool cpu9 = 1 [json_name = "cpu"];
                     }
                     message Direction_Interface8 {
                        string interface_name = 1 [json_name = "interface-name"];
                     }
                     message Direction_Nexthop {
                        string vpn_instance_name = 1 [json_name = "vpn-instance-name"];
                        string ip_nexthop = 2 [json_name = "ip-nexthop"];
                     }
                     message Direction_Ipv6LinkLocal {
                        string link_local_address = 1 [json_name = "link-local-address"];
                     }
                     oneof Direction {
                        Direction_Cpu direction_cpu = 3 [json_name = "cpu"];
                        Direction_Interface8 direction_interface8 = 4 [json_name = "interface"];
                        Direction_Nexthop direction_nexthop = 5 [json_name = "nexthop"];
                        Direction_Ipv6LinkLocal direction_ipv6_link_local = 6 [json_name = "ipv6-link-local"];
                     }
                     message Statuses {
                        message Status {
                           string rule = 1 [json_name = "rule"];
                           string slot = 2 [json_name = "slot"];
                           enum ApplyStatus {
                              INVALID_ENUM_VALUE_ApplyStatus = 0;
                              ApplyStatus_SUCCESS = 1;
                              ApplyStatus_FAILURE = 2;
                           };
                           ApplyStatus apply_status = 3 [json_name = "apply-status"];
                        }
                        repeated Status status = 1 [json_name = "status"];
                     }
                     Statuses statuses = 7 [json_name = "statuses"];
                  }
                  repeated AclInstance acl_instance = 1 [json_name = "acl-instance"];
               }
               AclInstances acl_instances = 2 [json_name = "acl-instances"];
               message RedirectInterface {
                  string interface7 = 1 [json_name = "interface"];
               }
               RedirectInterface redirect_interface = 3 [json_name = "redirect-interface"];
            }
            repeated TrafficRedirectApply traffic_redirect_apply = 1 [json_name = "traffic-redirect-apply"];
         }
         TrafficRedirectApplys traffic_redirect_applys = 227 [json_name = "traffic-redirect-applys"];
         message Apn {
            message ApnIpv6Isolation {
               string isolation_group_name = 1 [json_name = "isolation-group-name"];
            }
            ApnIpv6Isolation apn_ipv6_isolation = 1 [json_name = "apn-ipv6-isolation"];
         }
         Apn apn = 228 [json_name = "apn"];
         message L2VpnMigration {
            enum TrafficForwarding {
               INVALID_ENUM_VALUE_TrafficForwarding = 0;
               TrafficForwarding_VPWS = 1;
               TrafficForwarding_EVPNX_VPWS = 2;
            };
            TrafficForwarding traffic_forwarding = 1 [json_name = "traffic-forwarding"];
         }
         L2VpnMigration l2vpn_migration = 229 [json_name = "l2vpn-migration"];
         message QosEthBn {
            message EthBnGroupApply {
               string group_name = 1 [json_name = "group-name"];
            }
            EthBnGroupApply eth_bn_group_apply = 1 [json_name = "eth-bn-group-apply"];
         }
         QosEthBn qos_eth_bn = 230 [json_name = "qos-eth-bn"];
         message TrafficMirrorApplys {
            message TrafficMirrorApply {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_INBOUND = 1;
                  Direction_OUTBOUND = 2;
               };
               Direction direction = 1 [json_name = "direction"];
               message AclInstances {
                  message AclInstance {
                     uint32 observe_index = 1 [json_name = "observe-index"];
                     string acl = 2 [json_name = "acl"];
                     bool ipv6 = 3 [json_name = "ipv6"];
                     message Statuses {
                        message Status {
                           string rule = 1 [json_name = "rule"];
                           string slot = 2 [json_name = "slot"];
                           enum ApplyStatus {
                              INVALID_ENUM_VALUE_ApplyStatus = 0;
                              ApplyStatus_SUCCESS = 1;
                              ApplyStatus_FAILURE = 2;
                           };
                           ApplyStatus apply_status = 3 [json_name = "apply-status"];
                        }
                        repeated Status status = 1 [json_name = "status"];
                     }
                     Statuses statuses = 4 [json_name = "statuses"];
                  }
                  repeated AclInstance acl_instance = 1 [json_name = "acl-instance"];
               }
               AclInstances acl_instances = 2 [json_name = "acl-instances"];
            }
            repeated TrafficMirrorApply traffic_mirror_apply = 1 [json_name = "traffic-mirror-apply"];
         }
         TrafficMirrorApplys traffic_mirror_applys = 232 [json_name = "traffic-mirror-applys"];
         message MacNotification {
            bool learning = 1 [json_name = "learning"];
            bool aging = 2 [json_name = "aging"];
         }
         MacNotification mac_notification = 233 [json_name = "mac-notification"];
         message Urpf {
            message IpUrpf {
               enum CheckMode {
                  INVALID_ENUM_VALUE_CheckMode = 0;
                  CheckMode_LOOSE = 1;
                  CheckMode_STRICT = 2;
               };
               CheckMode check_mode = 1 [json_name = "check-mode"];
               bool allow_default_route = 2 [json_name = "allow-default-route"];
               string acl_number = 3 [json_name = "acl-number"];
            }
            IpUrpf ip_urpf = 1 [json_name = "ip-urpf"];
            message Ipv6Urpf {
               enum CheckMode {
                  INVALID_ENUM_VALUE_CheckMode = 0;
                  CheckMode_LOOSE = 1;
                  CheckMode_STRICT = 2;
               };
               CheckMode check_mode = 1 [json_name = "check-mode"];
               bool allow_default_route = 2 [json_name = "allow-default-route"];
               string acl6_number = 3 [json_name = "acl6-number"];
            }
            Ipv6Urpf ipv6_urpf = 2 [json_name = "ipv6-urpf"];
         }
         Urpf urpf = 235 [json_name = "urpf"];
         bool bandwidth_config_effect_service = 236 [json_name = "bandwidth-config-effect-service"];
         message Dhcpv6ClientQuery {
            string client_state = 1 [json_name = "client-state"];
            repeated string address = 2 [json_name = "address"];
            string pd_client_state = 3 [json_name = "pd-client-state"];
            repeated string prefix = 4 [json_name = "prefix"];
            repeated string dns_server_ip = 5 [json_name = "dns-server-ip"];
            message Option17 {
               string sub_option1 = 1 [json_name = "sub-option1"];
               string sub_option2 = 2 [json_name = "sub-option2"];
            }
            Option17 option17 = 6 [json_name = "option17"];
            string option59 = 7 [json_name = "option59"];
         }
         Dhcpv6ClientQuery dhcpv6_client_query = 237 [json_name = "dhcpv6-client-query"];
         message Dhcpv6SnoopingIf {
            uint32 packet_discard_alarm_threshold = 1 [json_name = "packet-discard-alarm-threshold"];
            bool packet_discard_alarm = 2 [json_name = "packet-discard-alarm"];
            uint32 packet_rate_threshold = 3 [json_name = "packet-rate-threshold"];
            bool check_packet_rate = 4 [json_name = "check-packet-rate"];
            bool check_request_mac = 5 [json_name = "check-request-mac"];
            bool check_relay_forward = 6 [json_name = "check-relay-forward"];
            message Option18InsertSetting {
               message Option18InsertFormat_InsertFormat {
                  bool insert = 1 [json_name = "insert"];
               }
               message Option18InsertFormat_RebuildFormat {
                  bool rebuild = 1 [json_name = "rebuild"];
               }
               oneof Option18InsertFormat {
                  Option18InsertFormat_InsertFormat option18_insert_format_insert_format = 1 [json_name = "insert-format"];
                  Option18InsertFormat_RebuildFormat option18_insert_format_rebuild_format = 2 [json_name = "rebuild-format"];
               }
            }
            Option18InsertSetting option18_insert_setting = 7 [json_name = "option18-insert-setting"];
            message Option18Format {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
               uint32 cevlan_id = 2 [json_name = "cevlan-id"];
               string user_defind_text = 3 [json_name = "user-defind-text"];
            }
            Option18Format option18_format = 8 [json_name = "option18-format"];
            message Option37InsertSetting {
               message Option37InsertFormat_InsertFormat {
                  bool insert = 1 [json_name = "insert"];
               }
               message Option37InsertFormat_RebuildFormat {
                  bool rebuild = 1 [json_name = "rebuild"];
               }
               oneof Option37InsertFormat {
                  Option37InsertFormat_InsertFormat option37_insert_format_insert_format = 1 [json_name = "insert-format"];
                  Option37InsertFormat_RebuildFormat option37_insert_format_rebuild_format = 2 [json_name = "rebuild-format"];
               }
            }
            Option37InsertSetting option37_insert_setting = 9 [json_name = "option37-insert-setting"];
            message Option37Format {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
               uint32 cevlan_id = 2 [json_name = "cevlan-id"];
               string user_defind_text = 3 [json_name = "user-defind-text"];
            }
            Option37Format option37_format = 10 [json_name = "option37-format"];
         }
         Dhcpv6SnoopingIf dhcpv6_snooping_if = 238 [json_name = "dhcpv6-snooping-if"];
         message PppoeClient {
            uint32 dialer = 1 [json_name = "dialer"];
            uint32 ppp_max_payload = 2 [json_name = "ppp-max-payload"];
            string service_name = 3 [json_name = "service-name"];
         }
         PppoeClient pppoe_client = 239 [json_name = "pppoe-client"];
         message PackPolicy {
            string name = 1 [json_name = "name"];
         }
         PackPolicy pack_policy = 240 [json_name = "pack-policy"];
         message PppoeClientSessionSummarys {
            message PppoeClientSessionSummary {
               uint32 session_id = 1 [json_name = "session-id"];
               string if_name = 2 [json_name = "if-name"];
               string client_mac = 3 [json_name = "client-mac"];
               string server_mac = 4 [json_name = "server-mac"];
               enum State {
                  State_IDLE = 0;
                  State_PADI = 1;
                  State_PADR = 2;
                  State_UP = 3;
               };
               State state = 5 [json_name = "state"];
            }
            repeated PppoeClientSessionSummary pppoe_client_session_summary = 1 [json_name = "pppoe-client-session-summary"];
         }
         PppoeClientSessionSummarys pppoe_client_session_summarys = 241 [json_name = "pppoe-client-session-summarys"];
         message DeterministicIp {
            message DeterministicIpEnable {
            }
            DeterministicIpEnable deterministic_ip_enable = 1 [json_name = "deterministic-ip-enable"];
         }
         DeterministicIp deterministic_ip = 242 [json_name = "deterministic-ip"];
         message Dldp {
            message Dldp5 {
               bool compatible_mode = 1 [json_name = "compatible-mode"];
               string compatible_local_mac = 2 [json_name = "compatible-local-mac"];
               enum PortState {
                  PortState_INITIAL = 0;
                  PortState_INACTIVE = 1;
                  PortState_ACTIVE = 2;
                  PortState_ADVERTISEMENT = 3;
                  PortState_PROBE = 4;
                  PortState_DISABLE = 5;
                  PortState_DELAYDOWN = 6;
               };
               PortState port_state = 3 [json_name = "port-state"];
               enum LinkState {
                  LinkState_DOWN = 0;
                  LinkState_UP = 1;
               };
               LinkState link_state = 4 [json_name = "link-state"];
               uint32 local_port_index = 5 [json_name = "local-port-index"];
               uint32 neighbor_number = 6 [json_name = "neighbor-number"];
               message Neighbors {
                  message Neighbor {
                     uint32 index = 1 [json_name = "index"];
                     string mac_address = 2 [json_name = "mac-address"];
                     enum State {
                        INVALID_ENUM_VALUE_State = 0;
                        State_UNKNOWN = 1;
                        State_ONEWAY = 2;
                        State_TWOWAY = 3;
                     };
                     State state = 3 [json_name = "state"];
                     uint32 aged_time = 4 [json_name = "aged-time"];
                     string created_time = 5 [json_name = "created-time"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 7 [json_name = "neighbors"];
               message Statistics {
                  uint32 packets_sent_total = 1 [json_name = "packets-sent-total"];
                  uint32 packets_received_total = 2 [json_name = "packets-received-total"];
                  uint32 packets_received_invalid_version = 3 [json_name = "packets-received-invalid-version"];
                  uint32 packets_received_invalid_interval = 4 [json_name = "packets-received-invalid-interval"];
                  uint32 packets_received_invalid_authentication = 5 [json_name = "packets-received-invalid-authentication"];
                  uint32 packets_received_invalid_operation = 6 [json_name = "packets-received-invalid-operation"];
                  uint32 packets_received_loop = 7 [json_name = "packets-received-loop"];
                  string last_clear_time = 8 [json_name = "last-clear-time"];
               }
               Statistics statistics = 8 [json_name = "statistics"];
               bool compatible_mode_enable = 9 [json_name = "compatible-mode-enable"];
            }
            Dldp5 dldp5 = 1 [json_name = "dldp"];
         }
         Dldp dldp = 243 [json_name = "dldp"];
         message SystemController {
            message Pnp {
               message StartupVlan {
                  bool send_enable = 1 [json_name = "send-enable"];
               }
               StartupVlan startup_vlan = 1 [json_name = "startup-vlan"];
               message StartupLinkAggregation {
                  bool send_enable = 1 [json_name = "send-enable"];
               }
               StartupLinkAggregation startup_link_aggregation = 2 [json_name = "startup-link-aggregation"];
            }
            Pnp pnp = 1 [json_name = "pnp"];
         }
         SystemController system_controller = 245 [json_name = "system-controller"];
         message Gre {
            message PreemptEnable {
               uint32 delay = 1 [json_name = "delay"];
            }
            PreemptEnable preempt_enable = 1 [json_name = "preempt-enable"];
         }
         Gre gre = 246 [json_name = "gre"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 2 [json_name = "interfaces"];
   message Damp {
      bool tx_off = 1 [json_name = "tx-off"];
      message Level_Auto {
         message Auto4 {
            enum Level {
               Level_LIGHT = 0;
               Level_MIDDLE = 1;
               Level_HEAVY = 2;
            };
            Level level = 1 [json_name = "level"];
         }
         Auto4 auto4 = 1 [json_name = "auto"];
      }
      message Level_Manual {
         message Manual4 {
            uint32 suppress = 1 [json_name = "suppress"];
            uint32 reuse = 2 [json_name = "reuse"];
            uint32 max_suppress_time = 3 [json_name = "max-suppress-time"];
            uint32 half_life_period = 4 [json_name = "half-life-period"];
         }
         Manual4 manual4 = 1 [json_name = "manual"];
      }
      oneof Level {
         Level_Auto level_auto = 2 [json_name = "auto"];
         Level_Manual level_manual = 3 [json_name = "manual"];
      }
   }
   Damp damp = 3 [json_name = "damp"];
   message AutoRecoveryTimes {
      message AutoRecoveryTime {
         enum ErrorDownType {
            ErrorDownType_BPDUX_PROTECTION = 0;
            ErrorDownType_AUTOX_DEFEND = 1;
            ErrorDownType_MONITORX_LINK = 2;
            ErrorDownType_PORTSECX_REACHEDX_LIMIT = 65;
            ErrorDownType_STORMX_CONTROL = 66;
            ErrorDownType_LOOPBACKX_DETECT = 67;
            ErrorDownType_DUALX_ACTIVE = 68;
            ErrorDownType_MACX_ADDRESSX_FLAPPING = 69;
            ErrorDownType_NOX_STACKX_LINK = 70;
            ErrorDownType_CRCX_STATISTICS = 71;
            ErrorDownType_TRANSCEIVERX_POWERX_LOW = 72;
            ErrorDownType_LINKX_FLAP = 73;
            ErrorDownType_L2X_LOOPX_OCCURED = 74;
            ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
            ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
            ErrorDownType_RESOURCEX_MISMATCH = 77;
            ErrorDownType_LEAFX_MSTP = 78;
            ErrorDownType_MX_LAG = 79;
            ErrorDownType_FABRICX_UPLINKX_THRESHOLD = 80;
            ErrorDownType_STACKX_CONFIGX_CONFLICT = 81;
            ErrorDownType_SPINEX_TYPEX_UNSUPPORTED = 82;
            ErrorDownType_STACKX_PACKETX_DEFENSIVE = 83;
            ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
            ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
            ErrorDownType_FABRICX_LINKX_FAILURE = 87;
            ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK = 88;
            ErrorDownType_PFCX_DEADLOCK = 89;
            ErrorDownType_REMOTEX_UNITX_LINK = 90;
            ErrorDownType_REMOTEX_UNITX_MISCONFIG = 91;
         };
         ErrorDownType error_down_type = 1 [json_name = "error-down-type"];
         uint32 time_value = 2 [json_name = "time-value"];
      }
      repeated AutoRecoveryTime auto_recovery_time = 1 [json_name = "auto-recovery-time"];
   }
   AutoRecoveryTimes auto_recovery_times = 4 [json_name = "auto-recovery-times"];
   message StaticDimensionRanges {
      message StaticDimensionRange {
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPX_GE = 114;
            Type_FLEXEX_400G = 115;
            Type_VIRTUALX_IF = 116;
            Type_CELLULAR = 117;
            Type_MULTIGE = 124;
            Type_FLEXEX_10G = 125;
            Type_OPTICALAMPLIFIER = 126;
            Type_DIALER = 128;
            Type_X_1200GE = 129;
         };
         Type type = 1 [json_name = "type"];
         string chassis_range = 2 [json_name = "chassis-range"];
         string slot_range = 3 [json_name = "slot-range"];
         string card_range = 4 [json_name = "card-range"];
         string port_range = 5 [json_name = "port-range"];
      }
      repeated StaticDimensionRange static_dimension_range = 1 [json_name = "static-dimension-range"];
   }
   StaticDimensionRanges static_dimension_ranges = 5 [json_name = "static-dimension-ranges"];
   message Ipv4InterfaceCount {
      uint32 physical_up_count = 1 [json_name = "physical-up-count"];
      uint32 physical_down_count = 2 [json_name = "physical-down-count"];
      uint32 protocol_up_count = 3 [json_name = "protocol-up-count"];
      uint32 protocol_down_count = 4 [json_name = "protocol-down-count"];
   }
   Ipv4InterfaceCount ipv4_interface_count = 6 [json_name = "ipv4-interface-count"];
   message RemoteInterfaces {
      message RemoteInterface {
         string name = 1 [json_name = "name"];
         uint32 index = 2 [json_name = "index"];
         message RemoteStatisticsState {
            string last_cleared_time = 1 [json_name = "last-cleared-time"];
            uint64 in_bit_rate = 2 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 3 [json_name = "in-packet-rate"];
            uint64 in_peak_bit_rate = 4 [json_name = "in-peak-bit-rate"];
            string in_peak_bit_rate_record_time = 5 [json_name = "in-peak-bit-rate-record-time"];
            uint64 out_bit_rate = 6 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 7 [json_name = "out-packet-rate"];
            uint64 out_peak_bit_rate = 8 [json_name = "out-peak-bit-rate"];
            string out_peak_bit_rate_record_time = 9 [json_name = "out-peak-bit-rate-record-time"];
            string in_use_rate = 10 [json_name = "in-use-rate"];
            string out_use_rate = 11 [json_name = "out-use-rate"];
         }
         RemoteStatisticsState remote_statistics_state = 3 [json_name = "remote-statistics-state"];
      }
      repeated RemoteInterface remote_interface = 1 [json_name = "remote-interface"];
   }
   RemoteInterfaces remote_interfaces = 7 [json_name = "remote-interfaces"];
   message HdlcDamp {
      bool enable = 1 [json_name = "enable"];
      enum DampLevel {
         DampLevel_LIGHT = 0;
         DampLevel_MIDDLE = 1;
         DampLevel_HEAVY = 2;
         DampLevel_MANUAL = 3;
      };
      DampLevel damp_level = 2 [json_name = "damp-level"];
      uint32 suppress = 3 [json_name = "suppress"];
      uint32 reuse = 4 [json_name = "reuse"];
      uint32 max_suppress_time = 5 [json_name = "max-suppress-time"];
      uint32 half_lifeperiod = 6 [json_name = "half-lifeperiod"];
   }
   HdlcDamp hdlc_damp = 8 [json_name = "hdlc-damp"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-26 20:20:18
// ProtoYang-version 1
// module huawei-wlan-ssid-profile
// revision 2022-09-09
// revision 2022-09-02
// revision 2022-08-19
// revision 2022-07-15
// revision 2022-06-15
// revision 2022-04-11
// namespace urn:huawei:yang:huawei-wlan-ssid-profile

package huawei_wlan_ssid_profile;

message WlanSsidProfile {
   message SsidProfiles {
      message SsidProfile {
         string profile_name = 1 [json_name = "profile-name"];
         string ssid = 2 [json_name = "ssid"];
         uint32 max_sta_number = 3 [json_name = "max-sta-number"];
         message BeaconRate {
            enum Rate2G {
               Rate2G_X_1MBPS = 0;
               Rate2G_X_2MBPS = 1;
               Rate2G_X_5X_5MBPS = 2;
               Rate2G_X_6MBPS = 3;
               Rate2G_X_9MBPS = 4;
               Rate2G_X_11MBPS = 5;
               Rate2G_X_12MBPS = 6;
               Rate2G_X_18MBPS = 7;
               Rate2G_X_24MBPS = 8;
               Rate2G_X_36MBPS = 9;
               Rate2G_X_48MBPS = 10;
               Rate2G_X_54MBPS = 11;
            };
            Rate2G rate_2g = 1 [json_name = "rate-2g"];
            enum Rate5G {
               INVALID_ENUM_VALUE_Rate5G = 0;
               Rate5G_X_6MBPS = 1;
               Rate5G_X_9MBPS = 2;
               Rate5G_X_12MBPS = 3;
               Rate5G_X_18MBPS = 4;
               Rate5G_X_24MBPS = 5;
               Rate5G_X_36MBPS = 6;
               Rate5G_X_48MBPS = 7;
               Rate5G_X_54MBPS = 8;
            };
            Rate5G rate_5g = 2 [json_name = "rate-5g"];
            enum Rate6G {
               INVALID_ENUM_VALUE_Rate6G = 0;
               Rate6G_X_6MBPS = 1;
               Rate6G_X_9MBPS = 2;
               Rate6G_X_12MBPS = 3;
               Rate6G_X_18MBPS = 4;
               Rate6G_X_24MBPS = 5;
               Rate6G_X_36MBPS = 6;
               Rate6G_X_48MBPS = 7;
               Rate6G_X_54MBPS = 8;
            };
            Rate6G rate_6g = 3 [json_name = "rate-6g"];
         }
         BeaconRate beacon_rate = 4 [json_name = "beacon-rate"];
         bool mimo_switch = 5 [json_name = "mimo-switch"];
         bool advertise_ap_name = 6 [json_name = "advertise-ap-name"];
         bool server_mode = 7 [json_name = "server-mode"];
         bool ssid_hide = 8 [json_name = "ssid-hide"];
         bool beamforming_switch = 9 [json_name = "beamforming-switch"];
         uint32 association_timeout = 10 [json_name = "association-timeout"];
         enum UApsdSwitch {
            UApsdSwitch_DISABLE = 0;
            UApsdSwitch_ENABLE = 1;
         };
         UApsdSwitch u_apsd_switch = 11 [json_name = "u-apsd-switch"];
         uint32 probe_response_retry = 12 [json_name = "probe-response-retry"];
         bool deny_broadcast_probe = 13 [json_name = "deny-broadcast-probe"];
         message HeMcsMap {
            uint32 tx_nss = 1 [json_name = "tx-nss"];
            uint32 tx_mcs = 2 [json_name = "tx-mcs"];
            uint32 rx_nss = 3 [json_name = "rx-nss"];
            uint32 rx_mcs = 4 [json_name = "rx-mcs"];
         }
         HeMcsMap he_mcs_map = 14 [json_name = "he-mcs-map"];
         message VhtMcsMap {
            uint32 tx_nss = 1 [json_name = "tx-nss"];
            uint32 tx_mcs = 2 [json_name = "tx-mcs"];
            uint32 rx_nss = 3 [json_name = "rx-nss"];
            uint32 xx_mcs = 4 [json_name = "xx-mcs"];
            uint32 rx_mcs = 5 [json_name = "rx-mcs"];
         }
         VhtMcsMap vht_mcs_map = 15 [json_name = "vht-mcs-map"];
         uint32 dtim_interval = 16 [json_name = "dtim-interval"];
         message Dot11R {
            bool dot11r_switch = 1 [json_name = "dot11r-switch"];
            enum Dot11RMode {
               Dot11RMode_OVERX_THEX_AIR = 0;
               Dot11RMode_OVERX_THEX_DS = 1;
            };
            Dot11RMode dot11r_mode = 2 [json_name = "dot11r-mode"];
         }
         Dot11R dot11r = 17 [json_name = "dot11r"];
         message WmmEdcaClientAcvo {
            uint32 aifsn = 1 [json_name = "aifsn"];
            uint32 ecwmin = 2 [json_name = "ecwmin"];
            uint32 ecwmax = 3 [json_name = "ecwmax"];
            uint32 txoplimit = 4 [json_name = "txoplimit"];
         }
         WmmEdcaClientAcvo wmm_edca_client_acvo = 18 [json_name = "wmm-edca-client-acvo"];
         message WmmEdcaClientAcvi {
            uint32 aifsn = 1 [json_name = "aifsn"];
            uint32 ecwmin = 2 [json_name = "ecwmin"];
            uint32 ecwmax = 3 [json_name = "ecwmax"];
            uint32 txoplimit = 4 [json_name = "txoplimit"];
         }
         WmmEdcaClientAcvi wmm_edca_client_acvi = 19 [json_name = "wmm-edca-client-acvi"];
         message WmmEdcaClientAcbe {
            uint32 aifsn = 1 [json_name = "aifsn"];
            uint32 ecwmin = 2 [json_name = "ecwmin"];
            uint32 ecwmax = 3 [json_name = "ecwmax"];
            uint32 txoplimit = 4 [json_name = "txoplimit"];
         }
         WmmEdcaClientAcbe wmm_edca_client_acbe = 20 [json_name = "wmm-edca-client-acbe"];
         message WmmEdcaClientAcbk {
            uint32 aifsn = 1 [json_name = "aifsn"];
            uint32 ecwmin = 2 [json_name = "ecwmin"];
            uint32 ecwmax = 3 [json_name = "ecwmax"];
            uint32 txoplimit = 4 [json_name = "txoplimit"];
         }
         WmmEdcaClientAcbk wmm_edca_client_acbk = 21 [json_name = "wmm-edca-client-acbk"];
      }
      repeated SsidProfile ssid_profile = 1 [json_name = "ssid-profile"];
   }
   SsidProfiles ssid_profiles = 1 [json_name = "ssid-profiles"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-26 17:56:41
// ProtoYang-version 1
// module huawei-evpl
// revision 2022-08-27
// revision 2022-05-20
// revision 2020-07-21
// revision 2019-03-01
// namespace urn:huawei:yang:huawei-evpl

package huawei_evpl;

message Evpl {
   message Instances {
      message Instance {
         uint32 id = 1 [json_name = "id"];
         enum Mode {
            Mode_VXLANX_MODE = 0;
            Mode_MPLSX_MODE = 1;
            Mode_SRV6X_MODE = 2;
            Mode_NONE = 3;
            Mode_STATICX_MODE = 4;
         };
         Mode mode = 2 [json_name = "mode"];
         message Interfaces {
            message Interface {
               string name = 1 [json_name = "name"];
               bool ignore_ac_state = 2 [json_name = "ignore-ac-state"];
               message ProtocolActions {
                  message ProtocolAction {
                     enum ProtocolType {
                        INVALID_ENUM_VALUE_ProtocolType = 0;
                        ProtocolType_LACP = 1;
                        ProtocolType_LLDP = 2;
                        ProtocolType_BPDU = 4;
                        ProtocolType_CDP = 5;
                        ProtocolType_UDLD = 6;
                     };
                     ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                     enum Action {
                        INVALID_ENUM_VALUE_Action = 0;
                        Action_FORWARDING = 1;
                        Action_DISCARD = 2;
                        Action_TRANSPORT = 3;
                        Action_TRANSPORTX_TAGGED = 4;
                     };
                     Action action = 2 [json_name = "action"];
                     enum Mode {
                        Mode_NORMAL = 0;
                        Mode_UNTAG = 1;
                        Mode_UNTAGX_VLANX_CHECK = 2;
                     };
                     Mode mode = 3 [json_name = "mode"];
                  }
                  repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
               }
               ProtocolActions protocol_actions = 3 [json_name = "protocol-actions"];
            }
            repeated Interface interface = 1 [json_name = "interface"];
         }
         Interfaces interfaces = 3 [json_name = "interfaces"];
         message Peers {
            message Peer {
               string name = 1 [json_name = "name"];
               string peer_ip = 2 [json_name = "peer-ip"];
            }
            repeated Peer peer = 1 [json_name = "peer"];
         }
         Peers peers = 4 [json_name = "peers"];
         message Evpn {
            string name = 1 [json_name = "name"];
            uint32 local_service_id = 2 [json_name = "local-service-id"];
            uint32 remote_service_id = 3 [json_name = "remote-service-id"];
            bool ignore_match_mtu = 4 [json_name = "ignore-match-mtu"];
            message Locators {
               message Locator {
                  string name = 1 [json_name = "name"];
                  bool auto_sid_disable = 2 [json_name = "auto-sid-disable"];
               }
               repeated Locator locator = 1 [json_name = "locator"];
            }
            Locators locators = 5 [json_name = "locators"];
            bool balancing_ignore_esi = 6 [json_name = "balancing-ignore-esi"];
            bool control_word = 7 [json_name = "control-word"];
            message EvplInfo {
               string ac_interface = 1 [json_name = "ac-interface"];
               enum EvplState {
                  EvplState_DOWN = 0;
                  EvplState_UP = 1;
               };
               EvplState evpl_state = 2 [json_name = "evpl-state"];
               bool local_ctrl_word = 3 [json_name = "local-ctrl-word"];
               uint32 local_mtu = 4 [json_name = "local-mtu"];
               enum LocalReduancyMode {
                  LocalReduancyMode_ALLX_ACTIVE = 0;
                  LocalReduancyMode_SINGLEX_ACTIVE = 1;
               };
               LocalReduancyMode local_reduancy_mode = 5 [json_name = "local-reduancy-mode"];
               enum LocalDfState {
                  LocalDfState_PRIMARY = 0;
                  LocalDfState_BACKUP = 1;
                  LocalDfState_NONE = 2;
               };
               LocalDfState local_df_state = 6 [json_name = "local-df-state"];
               enum RemoteReduancyMode {
                  RemoteReduancyMode_ALLX_ACTIVE = 0;
                  RemoteReduancyMode_SINGLEX_ACTIVE = 1;
               };
               RemoteReduancyMode remote_reduancy_mode = 7 [json_name = "remote-reduancy-mode"];
               uint32 remote_pri_df_num = 8 [json_name = "remote-pri-df-num"];
               uint32 remote_back_df_num = 9 [json_name = "remote-back-df-num"];
               uint32 remote_none_df_num = 10 [json_name = "remote-none-df-num"];
               enum TunnelType {
                  TunnelType_VXLAN = 0;
                  TunnelType_MPLS = 1;
                  TunnelType_NATIVEX_IPV6 = 2;
                  TunnelType_NONE = 3;
                  TunnelType_STATIC = 4;
               };
               TunnelType tunnel_type = 11 [json_name = "tunnel-type"];
               enum EvplType {
                  EvplType_VXLANX_MODE = 0;
                  EvplType_MPLSX_MODE = 1;
                  EvplType_SRV6X_MODE = 2;
                  EvplType_NONE = 3;
                  EvplType_STATICX_MODE = 4;
               };
               EvplType evpl_type = 12 [json_name = "evpl-type"];
               string if_last_up_time = 13 [json_name = "if-last-up-time"];
               string last_pri_time = 14 [json_name = "last-pri-time"];
               string last_backup_time = 15 [json_name = "last-backup-time"];
               enum LocalDfElecType {
                  LocalDfElecType_NONE = 0;
                  LocalDfElecType_EX_TRUNK = 1;
                  LocalDfElecType_DF = 2;
                  LocalDfElecType_VRRP = 3;
               };
               LocalDfElecType local_df_elec_type = 16 [json_name = "local-df-elec-type"];
               string out_interface = 17 [json_name = "out-interface"];
               enum InterfaceState {
                  InterfaceState_DOWN = 0;
                  InterfaceState_UP = 1;
               };
               InterfaceState interface_state = 18 [json_name = "interface-state"];
               enum OutInterfaceState {
                  OutInterfaceState_DOWN = 0;
                  OutInterfaceState_UP = 1;
               };
               OutInterfaceState out_interface_state = 19 [json_name = "out-interface-state"];
               string out_if_last_up_time = 20 [json_name = "out-if-last-up-time"];
            }
            EvplInfo evpl_info = 8 [json_name = "evpl-info"];
            message EvplPeerInfo {
               string peer_ip = 1 [json_name = "peer-ip"];
               string nexthop_ip = 2 [json_name = "nexthop-ip"];
               enum RemoteDfState {
                  RemoteDfState_PRIMARY = 0;
                  RemoteDfState_BACKUP = 1;
                  RemoteDfState_NONE = 2;
               };
               RemoteDfState remote_df_state = 3 [json_name = "remote-df-state"];
               uint32 remote_mtu = 4 [json_name = "remote-mtu"];
               bool remote_ctrl_word = 5 [json_name = "remote-ctrl-word"];
               string remote_esi = 6 [json_name = "remote-esi"];
               enum ElineRole {
                  INVALID_ENUM_VALUE_ElineRole = 0;
                  ElineRole_PRIMARY = 1;
                  ElineRole_BACKUP = 2;
                  ElineRole_BYPASS = 4;
               };
               ElineRole eline_role = 7 [json_name = "eline-role"];
            }
            EvplPeerInfo evpl_peer_info = 9 [json_name = "evpl-peer-info"];
            message EvplPeerInfos {
               message EvplPeerInfo {
                  string peer_ip = 1 [json_name = "peer-ip"];
                  string nexthop_ip = 2 [json_name = "nexthop-ip"];
                  enum RemoteDfState {
                     RemoteDfState_PRIMARY = 0;
                     RemoteDfState_BACKUP = 1;
                     RemoteDfState_NONE = 2;
                  };
                  RemoteDfState remote_df_state = 3 [json_name = "remote-df-state"];
                  uint32 remote_mtu = 4 [json_name = "remote-mtu"];
                  bool remote_ctrl_word = 5 [json_name = "remote-ctrl-word"];
                  string remote_esi = 6 [json_name = "remote-esi"];
                  enum ElineRole {
                     INVALID_ENUM_VALUE_ElineRole = 0;
                     ElineRole_PRIMARY = 1;
                     ElineRole_BACKUP = 2;
                     ElineRole_BYPASS = 4;
                  };
                  ElineRole eline_role = 7 [json_name = "eline-role"];
                  message TunnelInfos {
                     message TunnelInfo {
                        string id = 1 [json_name = "id"];
                        enum Type {
                           Type_INVALID = 0;
                           Type_LDP = 1;
                           Type_BGP = 2;
                           Type_TE = 3;
                           Type_SRX_TE = 4;
                           Type_SRX_BE = 5;
                           Type_SRTEX_POLICY = 6;
                           Type_SRV6X_BE = 7;
                           Type_VXLAN = 8;
                           Type_SRV6X_TEX_POLICY = 9;
                           Type_MPLSX_LOCALX_IFNET = 10;
                           Type_FLEXX_ALGOX_LSP = 11;
                           Type_VXLAN6 = 12;
                           Type_SRV6X_TEX_FLOWX_GROUP = 13;
                        };
                        Type type = 2 [json_name = "type"];
                     }
                     repeated TunnelInfo tunnel_info = 1 [json_name = "tunnel-info"];
                  }
                  TunnelInfos tunnel_infos = 8 [json_name = "tunnel-infos"];
                  string srv6_sid = 9 [json_name = "srv6-sid"];
               }
               repeated EvplPeerInfo evpl_peer_info = 1 [json_name = "evpl-peer-info"];
            }
            EvplPeerInfos evpl_peer_infos = 10 [json_name = "evpl-peer-infos"];
            message LabelStacks {
               message LabelStack {
                  uint32 label_stack = 1 [json_name = "label-stack"];
                  uint32 level = 2 [json_name = "level"];
                  string type = 3 [json_name = "type"];
                  string label = 4 [json_name = "label"];
                  string out_interface = 5 [json_name = "out-interface"];
               }
               repeated LabelStack label_stack = 1 [json_name = "label-stack"];
            }
            LabelStacks label_stacks = 11 [json_name = "label-stacks"];
            message Vrrp {
               uint32 id = 1 [json_name = "id"];
               string interface_name = 2 [json_name = "interface-name"];
               enum Version {
                  Version_VRRP = 0;
                  Version_VRRP6 = 1;
               };
               Version version = 3 [json_name = "version"];
            }
            Vrrp vrrp = 12 [json_name = "vrrp"];
            message BfdDetect {
               uint32 min_rx_interval = 1 [json_name = "min-rx-interval"];
               uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
               uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
               bool track_interface = 4 [json_name = "track-interface"];
            }
            BfdDetect bfd_detect = 13 [json_name = "bfd-detect"];
            bool l2vpn_migrate = 14 [json_name = "l2vpn-migrate"];
            message BindingSids {
               message BindingSid {
                  string sid = 1 [json_name = "sid"];
                  string peer_ip = 2 [json_name = "peer-ip"];
                  uint32 color = 3 [json_name = "color"];
                  enum Preference {
                     INVALID_ENUM_VALUE_Preference = 0;
                     Preference_PRIMARY = 1;
                     Preference_SECONDARY = 2;
                     Preference_BYPASS = 3;
                  };
                  Preference preference = 4 [json_name = "preference"];
               }
               repeated BindingSid binding_sid = 1 [json_name = "binding-sid"];
            }
            BindingSids binding_sids = 15 [json_name = "binding-sids"];
         }
         Evpn evpn = 5 [json_name = "evpn"];
         message EvplStatistics {
            bool statistics_enable = 1 [json_name = "statistics-enable"];
         }
         EvplStatistics evpl_statistics = 6 [json_name = "evpl-statistics"];
         message Nvo3 {
            message Attribute {
               string vtep_ip = 1 [json_name = "vtep-ip"];
            }
            Attribute attribute = 1 [json_name = "attribute"];
            message VniLists {
               message VniList {
                  uint32 vni = 1 [json_name = "vni"];
               }
               repeated VniList vni_list = 1 [json_name = "vni-list"];
            }
            VniLists vni_lists = 2 [json_name = "vni-lists"];
         }
         Nvo3 nvo3 = 7 [json_name = "nvo3"];
         message Pipe {
            bool split_mode = 1 [json_name = "split-mode"];
            enum PipeMode {
               INVALID_ENUM_VALUE_PipeMode = 0;
               PipeMode_PIPE = 1;
               PipeMode_SHORTPIPE = 2;
               PipeMode_UNIFORM = 3;
            };
            PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
            enum IngressPipeMode {
               INVALID_ENUM_VALUE_IngressPipeMode = 0;
               IngressPipeMode_PIPE = 1;
               IngressPipeMode_SHORTPIPE = 2;
               IngressPipeMode_UNIFORM = 3;
            };
            IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
            enum EgressPipeMode {
               INVALID_ENUM_VALUE_EgressPipeMode = 0;
               EgressPipeMode_PIPE = 1;
               EgressPipeMode_SHORTPIPE = 2;
               EgressPipeMode_UNIFORM = 3;
            };
            EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 5 [json_name = "service-class"];
            enum Color {
               Color_GREEN = 0;
               Color_YELLOW = 1;
               Color_RED = 2;
            };
            Color color = 6 [json_name = "color"];
            string domain_name = 7 [json_name = "domain-name"];
            enum TrustType {
               TrustType_OUTPRI = 0;
               TrustType_INPRI = 1;
               TrustType_IPDSCP = 2;
            };
            TrustType trust_type = 8 [json_name = "trust-type"];
         }
         Pipe pipe = 8 [json_name = "pipe"];
         message VxlanModePhb {
            string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
         }
         VxlanModePhb vxlan_mode_phb = 9 [json_name = "vxlan-mode-phb"];
         message Ccc {
            string interface = 1 [json_name = "interface"];
            string out_interface = 2 [json_name = "out-interface"];
         }
         Ccc ccc = 10 [json_name = "ccc"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 1 [json_name = "instances"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module openconfig-qos
// revision 2016-12-16
// namespace http://openconfig.net/yang/qos

package openconfig_qos;

message Qos {
   message Config {
   }
   Config config = 1 [json_name = "config"];
   message State {
   }
   State state = 2 [json_name = "state"];
   message Interfaces {
      message Interface {
         string interface_id = 1 [json_name = "interface-id"];
         message Config {
            string interface_id = 1 [json_name = "interface-id"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string interface_id = 1 [json_name = "interface-id"];
         }
         State state = 3 [json_name = "state"];
         message InterfaceRef {
            message Config {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            State state = 2 [json_name = "state"];
         }
         InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
         message Input {
            message Config {
            }
            Config config = 1 [json_name = "config"];
            message State {
            }
            State state = 2 [json_name = "state"];
            message Classifers {
               message Classifier {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_IPV4 = 4;
                     Type_IPV6 = 6;
                     Type_MPLS = 7;
                  };
                  Type type = 1 [json_name = "type"];
                  message Config {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4 = 4;
                        Type_IPV6 = 6;
                        Type_MPLS = 7;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4 = 4;
                        Type_IPV6 = 6;
                        Type_MPLS = 7;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  State state = 3 [json_name = "state"];
                  message Terms {
                     message Term {
                        string id = 1 [json_name = "id"];
                        message Config {
                           string id = 1 [json_name = "id"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string id = 1 [json_name = "id"];
                           uint64 matched_packets = 2 [json_name = "matched-packets"];
                           uint64 matched_octets = 3 [json_name = "matched-octets"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated Term term = 1 [json_name = "term"];
                  }
                  Terms terms = 4 [json_name = "terms"];
               }
               repeated Classifier classifier = 1 [json_name = "classifier"];
            }
            Classifers classifers = 3 [json_name = "classifers"];
            message Queues {
               message Queue {
                  string name = 1 [json_name = "name"];
                  message Config {
                     string name = 1 [json_name = "name"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                     uint64 max_queue_len = 2 [json_name = "max-queue-len"];
                     uint64 avg_queue_len = 3 [json_name = "avg-queue-len"];
                     uint64 transmit_pkts = 4 [json_name = "transmit-pkts"];
                     uint64 transmit_octets = 5 [json_name = "transmit-octets"];
                     uint64 dropped_pkts = 6 [json_name = "dropped-pkts"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated Queue queue = 1 [json_name = "queue"];
            }
            Queues queues = 4 [json_name = "queues"];
            message SchedulerPolicy {
               message Config {
                  string name = 1 [json_name = "name"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  string name = 1 [json_name = "name"];
               }
               State state = 2 [json_name = "state"];
               message Schedulers {
                  message Scheduler {
                     uint32 sequence = 1 [json_name = "sequence"];
                     message State {
                        uint32 sequence = 1 [json_name = "sequence"];
                        uint64 conforming_pkts = 2 [json_name = "conforming-pkts"];
                        uint64 conforming_octets = 3 [json_name = "conforming-octets"];
                        uint64 exceeding_pkts = 4 [json_name = "exceeding-pkts"];
                        uint64 exceeding_octets = 5 [json_name = "exceeding-octets"];
                        uint64 violating_pkts = 6 [json_name = "violating-pkts"];
                        uint64 violating_octets = 7 [json_name = "violating-octets"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated Scheduler scheduler = 1 [json_name = "scheduler"];
               }
               Schedulers schedulers = 3 [json_name = "schedulers"];
            }
            SchedulerPolicy scheduler_policy = 5 [json_name = "scheduler-policy"];
            message VirtualOutputQueues {
               message VoqInterface {
                  string name = 1 [json_name = "name"];
                  message Config {
                     string name = 1 [json_name = "name"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                  }
                  State state = 3 [json_name = "state"];
                  message Queues {
                     message Queue {
                        string name = 1 [json_name = "name"];
                        message Config {
                           string name = 1 [json_name = "name"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string name = 1 [json_name = "name"];
                           uint64 max_queue_len = 2 [json_name = "max-queue-len"];
                           uint64 avg_queue_len = 3 [json_name = "avg-queue-len"];
                           uint64 transmit_pkts = 4 [json_name = "transmit-pkts"];
                           uint64 transmit_octets = 5 [json_name = "transmit-octets"];
                           uint64 dropped_pkts = 6 [json_name = "dropped-pkts"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated Queue queue = 1 [json_name = "queue"];
                  }
                  Queues queues = 4 [json_name = "queues"];
               }
               repeated VoqInterface voq_interface = 1 [json_name = "voq-interface"];
            }
            VirtualOutputQueues virtual_output_queues = 6 [json_name = "virtual-output-queues"];
         }
         Input input = 5 [json_name = "input"];
         message Output {
            message Config {
            }
            Config config = 1 [json_name = "config"];
            message State {
            }
            State state = 2 [json_name = "state"];
            message InterfaceRef {
               message Config {
                  string interface7 = 1 [json_name = "interface"];
                  uint32 subinterface = 2 [json_name = "subinterface"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  string interface7 = 1 [json_name = "interface"];
                  uint32 subinterface = 2 [json_name = "subinterface"];
               }
               State state = 2 [json_name = "state"];
            }
            InterfaceRef interface_ref = 3 [json_name = "interface-ref"];
            message Classifers {
               message Classifier {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_IPV4 = 4;
                     Type_IPV6 = 6;
                     Type_MPLS = 7;
                  };
                  Type type = 1 [json_name = "type"];
                  message Config {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4 = 4;
                        Type_IPV6 = 6;
                        Type_MPLS = 7;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4 = 4;
                        Type_IPV6 = 6;
                        Type_MPLS = 7;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  State state = 3 [json_name = "state"];
                  message Terms {
                     message Term {
                        string id = 1 [json_name = "id"];
                        message Config {
                           string id = 1 [json_name = "id"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string id = 1 [json_name = "id"];
                           uint64 matched_packets = 2 [json_name = "matched-packets"];
                           uint64 matched_octets = 3 [json_name = "matched-octets"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated Term term = 1 [json_name = "term"];
                  }
                  Terms terms = 4 [json_name = "terms"];
               }
               repeated Classifier classifier = 1 [json_name = "classifier"];
            }
            Classifers classifers = 4 [json_name = "classifers"];
            message Queues {
               message Queue {
                  string name = 1 [json_name = "name"];
                  message Config {
                     string name = 1 [json_name = "name"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                     uint64 max_queue_len = 2 [json_name = "max-queue-len"];
                     uint64 avg_queue_len = 3 [json_name = "avg-queue-len"];
                     uint64 transmit_pkts = 4 [json_name = "transmit-pkts"];
                     uint64 transmit_octets = 5 [json_name = "transmit-octets"];
                     uint64 dropped_pkts = 6 [json_name = "dropped-pkts"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated Queue queue = 1 [json_name = "queue"];
            }
            Queues queues = 5 [json_name = "queues"];
            message SchedulerPolicy {
               message Config {
                  string name = 1 [json_name = "name"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  string name = 1 [json_name = "name"];
               }
               State state = 2 [json_name = "state"];
               message Schedulers {
                  message Scheduler {
                     uint32 sequence = 1 [json_name = "sequence"];
                     message State {
                        uint32 sequence = 1 [json_name = "sequence"];
                        uint64 conforming_pkts = 2 [json_name = "conforming-pkts"];
                        uint64 conforming_octets = 3 [json_name = "conforming-octets"];
                        uint64 exceeding_pkts = 4 [json_name = "exceeding-pkts"];
                        uint64 exceeding_octets = 5 [json_name = "exceeding-octets"];
                        uint64 violating_pkts = 6 [json_name = "violating-pkts"];
                        uint64 violating_octets = 7 [json_name = "violating-octets"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated Scheduler scheduler = 1 [json_name = "scheduler"];
               }
               Schedulers schedulers = 3 [json_name = "schedulers"];
            }
            SchedulerPolicy scheduler_policy = 6 [json_name = "scheduler-policy"];
         }
         Output output = 6 [json_name = "output"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 3 [json_name = "interfaces"];
   message Classifiers {
      message Classifier {
         string name = 1 [json_name = "name"];
         message Config {
            string name = 1 [json_name = "name"];
            enum Type {
               Type_IPV4 = 0;
               Type_IPV6 = 1;
               Type_MPLS = 2;
               Type_ETHERNET = 3;
            };
            Type type = 2 [json_name = "type"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string name = 1 [json_name = "name"];
            enum Type {
               Type_IPV4 = 0;
               Type_IPV6 = 1;
               Type_MPLS = 2;
               Type_ETHERNET = 3;
            };
            Type type = 2 [json_name = "type"];
         }
         State state = 3 [json_name = "state"];
         message Terms {
            message Term {
               string id = 1 [json_name = "id"];
               message Config {
                  string id = 1 [json_name = "id"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string id = 1 [json_name = "id"];
               }
               State state = 3 [json_name = "state"];
               message Conditions {
                  message L2 {
                     message Config {
                        string source_mac = 1 [json_name = "source-mac"];
                        string source_mac_mask = 2 [json_name = "source-mac-mask"];
                        string destination_mac = 3 [json_name = "destination-mac"];
                        string destination_mac_mask = 4 [json_name = "destination-mac-mask"];
                        string ethertype = 5 [json_name = "ethertype"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string source_mac = 1 [json_name = "source-mac"];
                        string source_mac_mask = 2 [json_name = "source-mac-mask"];
                        string destination_mac = 3 [json_name = "destination-mac"];
                        string destination_mac_mask = 4 [json_name = "destination-mac-mask"];
                        string ethertype = 5 [json_name = "ethertype"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  L2 l2 = 1 [json_name = "l2"];
                  message Ipv4 {
                     message Config {
                        string source_address = 1 [json_name = "source-address"];
                        string destination_address = 2 [json_name = "destination-address"];
                        uint32 dscp = 3 [json_name = "dscp"];
                        string protocol = 4 [json_name = "protocol"];
                        uint32 hop_limit = 5 [json_name = "hop-limit"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string source_address = 1 [json_name = "source-address"];
                        string destination_address = 2 [json_name = "destination-address"];
                        uint32 dscp = 3 [json_name = "dscp"];
                        string protocol = 4 [json_name = "protocol"];
                        uint32 hop_limit = 5 [json_name = "hop-limit"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ipv4 ipv4 = 2 [json_name = "ipv4"];
                  message Ipv6 {
                     message Config {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 source_flow_label = 2 [json_name = "source-flow-label"];
                        string destination_address = 3 [json_name = "destination-address"];
                        uint32 destination_flow_label = 4 [json_name = "destination-flow-label"];
                        uint32 dscp = 5 [json_name = "dscp"];
                        string protocol = 6 [json_name = "protocol"];
                        uint32 hop_limit = 7 [json_name = "hop-limit"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 source_flow_label = 2 [json_name = "source-flow-label"];
                        string destination_address = 3 [json_name = "destination-address"];
                        uint32 destination_flow_label = 4 [json_name = "destination-flow-label"];
                        uint32 dscp = 5 [json_name = "dscp"];
                        string protocol = 6 [json_name = "protocol"];
                        uint32 hop_limit = 7 [json_name = "hop-limit"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ipv6 ipv6 = 3 [json_name = "ipv6"];
                  message Transport {
                     message Config {
                        string source_port = 1 [json_name = "source-port"];
                        string destination_port = 2 [json_name = "destination-port"];
                        repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string source_port = 1 [json_name = "source-port"];
                        string destination_port = 2 [json_name = "destination-port"];
                        repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Transport transport = 4 [json_name = "transport"];
                  message Mpls {
                     message Config {
                        uint32 traffic_class = 1 [json_name = "traffic-class"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 traffic_class = 1 [json_name = "traffic-class"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Mpls mpls = 5 [json_name = "mpls"];
               }
               Conditions conditions = 4 [json_name = "conditions"];
               message Actions {
                  message Config {
                     string target_group = 1 [json_name = "target-group"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string target_group = 1 [json_name = "target-group"];
                  }
                  State state = 2 [json_name = "state"];
                  message Remark {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Remark remark = 3 [json_name = "remark"];
               }
               Actions actions = 5 [json_name = "actions"];
            }
            repeated Term term = 1 [json_name = "term"];
         }
         Terms terms = 4 [json_name = "terms"];
      }
      repeated Classifier classifier = 1 [json_name = "classifier"];
   }
   Classifiers classifiers = 4 [json_name = "classifiers"];
   message ForwardingGroups {
      message ForwardingGroup {
         string name = 1 [json_name = "name"];
         message Config {
            string name = 1 [json_name = "name"];
            uint32 fabric_priority = 2 [json_name = "fabric-priority"];
            string output_queue = 3 [json_name = "output-queue"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string name = 1 [json_name = "name"];
            uint32 fabric_priority = 2 [json_name = "fabric-priority"];
            string output_queue = 3 [json_name = "output-queue"];
         }
         State state = 3 [json_name = "state"];
      }
      repeated ForwardingGroup forwarding_group = 1 [json_name = "forwarding-group"];
   }
   ForwardingGroups forwarding_groups = 5 [json_name = "forwarding-groups"];
   message Queues {
      message Queue {
         string name = 1 [json_name = "name"];
         message Config {
            string name = 1 [json_name = "name"];
            string queue_type = 2 [json_name = "queue-type"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string name = 1 [json_name = "name"];
            string queue_type = 2 [json_name = "queue-type"];
         }
         State state = 3 [json_name = "state"];
         message Red {
            message Config {
               uint64 minth = 1 [json_name = "minth"];
               uint64 maxth = 2 [json_name = "maxth"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               uint64 minth = 1 [json_name = "minth"];
               uint64 maxth = 2 [json_name = "maxth"];
            }
            State state = 2 [json_name = "state"];
         }
         Red red = 4 [json_name = "red"];
         message Wred {
            message Config {
            }
            Config config = 1 [json_name = "config"];
            message State {
            }
            State state = 2 [json_name = "state"];
         }
         Wred wred = 5 [json_name = "wred"];
      }
      repeated Queue queue = 1 [json_name = "queue"];
   }
   Queues queues = 6 [json_name = "queues"];
   message SchedulerPolicies {
      message SchedulerPolicy {
         string name = 1 [json_name = "name"];
         message Config {
            string name = 1 [json_name = "name"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string name = 1 [json_name = "name"];
         }
         State state = 3 [json_name = "state"];
         message Schedulers {
            message Scheduler {
               uint32 sequence = 1 [json_name = "sequence"];
               message Config {
                  uint32 sequence = 1 [json_name = "sequence"];
                  string type = 2 [json_name = "type"];
                  enum Priority {
                     Priority_STRICT = 0;
                  };
                  Priority priority = 3 [json_name = "priority"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  uint32 sequence = 1 [json_name = "sequence"];
                  string type = 2 [json_name = "type"];
                  enum Priority {
                     Priority_STRICT = 0;
                  };
                  Priority priority = 3 [json_name = "priority"];
               }
               State state = 3 [json_name = "state"];
               message Inputs {
                  message Input {
                     string id = 1 [json_name = "id"];
                     message Config {
                        string id = 1 [json_name = "id"];
                        enum InputType {
                           InputType_QUEUE = 0;
                           InputType_IN_PROFILE = 1;
                           InputType_OUT_PROFILE = 2;
                        };
                        InputType input_type = 2 [json_name = "input-type"];
                        string queue = 3 [json_name = "queue"];
                        uint64 weight = 4 [json_name = "weight"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string id = 1 [json_name = "id"];
                        enum InputType {
                           InputType_QUEUE = 0;
                           InputType_IN_PROFILE = 1;
                           InputType_OUT_PROFILE = 2;
                        };
                        InputType input_type = 2 [json_name = "input-type"];
                        string queue = 3 [json_name = "queue"];
                        uint64 weight = 4 [json_name = "weight"];
                     }
                     State state = 3 [json_name = "state"];
                  }
                  repeated Input input = 1 [json_name = "input"];
               }
               Inputs inputs = 4 [json_name = "inputs"];
               message Output {
                  message Config {
                     enum OutputType {
                        OutputType_SCHEDULER = 0;
                        OutputType_FWD_GROUP = 1;
                        OutputType_INTERFACE = 2;
                     };
                     OutputType output_type = 1 [json_name = "output-type"];
                     string child_scheduler = 2 [json_name = "child-scheduler"];
                     string output_fwd_group = 3 [json_name = "output-fwd-group"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum OutputType {
                        OutputType_SCHEDULER = 0;
                        OutputType_FWD_GROUP = 1;
                        OutputType_INTERFACE = 2;
                     };
                     OutputType output_type = 1 [json_name = "output-type"];
                     string child_scheduler = 2 [json_name = "child-scheduler"];
                     string output_fwd_group = 3 [json_name = "output-fwd-group"];
                  }
                  State state = 2 [json_name = "state"];
               }
               Output output = 5 [json_name = "output"];
               message OneRateTwoColor {
                  message Config {
                     uint64 cir = 1 [json_name = "cir"];
                     uint32 cir_pct = 2 [json_name = "cir-pct"];
                     uint32 cir_pct_remaining = 3 [json_name = "cir-pct-remaining"];
                     uint32 bc = 4 [json_name = "bc"];
                     enum QueuingBehavior {
                        QueuingBehavior_SHAPE = 0;
                        QueuingBehavior_POLICE = 1;
                     };
                     QueuingBehavior queuing_behavior = 5 [json_name = "queuing-behavior"];
                     uint32 max_queue_depth_bytes = 6 [json_name = "max-queue-depth-bytes"];
                     uint32 max_queue_depth_packets = 7 [json_name = "max-queue-depth-packets"];
                     uint32 max_queue_depth_percent = 8 [json_name = "max-queue-depth-percent"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint64 cir = 1 [json_name = "cir"];
                     uint32 cir_pct = 2 [json_name = "cir-pct"];
                     uint32 cir_pct_remaining = 3 [json_name = "cir-pct-remaining"];
                     uint32 bc = 4 [json_name = "bc"];
                     enum QueuingBehavior {
                        QueuingBehavior_SHAPE = 0;
                        QueuingBehavior_POLICE = 1;
                     };
                     QueuingBehavior queuing_behavior = 5 [json_name = "queuing-behavior"];
                     uint32 max_queue_depth_bytes = 6 [json_name = "max-queue-depth-bytes"];
                     uint32 max_queue_depth_packets = 7 [json_name = "max-queue-depth-packets"];
                     uint32 max_queue_depth_percent = 8 [json_name = "max-queue-depth-percent"];
                  }
                  State state = 2 [json_name = "state"];
                  message ConformAction {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ConformAction conform_action = 3 [json_name = "conform-action"];
                  message ExceedAction {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ExceedAction exceed_action = 4 [json_name = "exceed-action"];
               }
               OneRateTwoColor one_rate_two_color = 6 [json_name = "one-rate-two-color"];
               message TwoRateThreeColor {
                  message Config {
                     uint64 cir = 1 [json_name = "cir"];
                     uint32 cir_pct = 2 [json_name = "cir-pct"];
                     uint32 cir_pct_remaining = 3 [json_name = "cir-pct-remaining"];
                     uint64 pir = 4 [json_name = "pir"];
                     uint32 pir_pct = 5 [json_name = "pir-pct"];
                     uint32 pir_pct_remaining = 6 [json_name = "pir-pct-remaining"];
                     uint32 bc = 7 [json_name = "bc"];
                     uint32 be = 8 [json_name = "be"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint64 cir = 1 [json_name = "cir"];
                     uint32 cir_pct = 2 [json_name = "cir-pct"];
                     uint32 cir_pct_remaining = 3 [json_name = "cir-pct-remaining"];
                     uint64 pir = 4 [json_name = "pir"];
                     uint32 pir_pct = 5 [json_name = "pir-pct"];
                     uint32 pir_pct_remaining = 6 [json_name = "pir-pct-remaining"];
                     uint32 bc = 7 [json_name = "bc"];
                     uint32 be = 8 [json_name = "be"];
                  }
                  State state = 2 [json_name = "state"];
                  message ConformAction {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ConformAction conform_action = 3 [json_name = "conform-action"];
                  message ExceedAction {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ExceedAction exceed_action = 4 [json_name = "exceed-action"];
                  message ViolateAction {
                     message Config {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 set_dscp = 1 [json_name = "set-dscp"];
                        uint32 set_dot1p = 2 [json_name = "set-dot1p"];
                        uint32 set_mpls_tc = 3 [json_name = "set-mpls-tc"];
                        bool drop = 4 [json_name = "drop"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ViolateAction violate_action = 5 [json_name = "violate-action"];
               }
               TwoRateThreeColor two_rate_three_color = 7 [json_name = "two-rate-three-color"];
            }
            repeated Scheduler scheduler = 1 [json_name = "scheduler"];
         }
         Schedulers schedulers = 4 [json_name = "schedulers"];
      }
      repeated SchedulerPolicy scheduler_policy = 1 [json_name = "scheduler-policy"];
   }
   SchedulerPolicies scheduler_policies = 7 [json_name = "scheduler-policies"];
}


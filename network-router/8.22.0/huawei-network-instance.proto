syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-24 15:43:22
// ProtoYang-version 1
// module huawei-network-instance
// revision 2022-09-08
// revision 2020-03-10
// revision 2019-04-28
// namespace urn:huawei:yang:huawei-network-instance

package huawei_network_instance;

message NetworkInstance {
   message Instances {
      message Instance {
         string name = 1 [json_name = "name"];
         string description = 2 [json_name = "description"];
         message Afs {
            message Af {
               enum Type {
                  INVALID_ENUM_VALUE_Type = 0;
                  Type_IPV4X_UNICAST = 1;
                  Type_IPV6X_UNICAST = 5;
               };
               Type type = 1 [json_name = "type"];
               string route_distinguisher = 2 [json_name = "route-distinguisher"];
               enum LabelMode {
                  LabelMode_PERX_ROUTE = 0;
                  LabelMode_PERX_INSTANCE = 1;
                  LabelMode_PERX_NEXTHOP = 2;
               };
               LabelMode label_mode = 5 [json_name = "label-mode"];
               bool vpn_frr = 6 [json_name = "vpn-frr"];
               string tunnel_policy = 7 [json_name = "tunnel-policy"];
               message VpnTargets {
                  message VpnTarget {
                     string value = 1 [json_name = "value"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_EXPORTX_EXTCOMMUNITY = 2;
                        Type_IMPORTX_EXTCOMMUNITY = 3;
                     };
                     Type type = 2 [json_name = "type"];
                  }
                  repeated VpnTarget vpn_target = 1 [json_name = "vpn-target"];
               }
               VpnTargets vpn_targets = 8 [json_name = "vpn-targets"];
               message Routing {
                  message RoutingManage {
                     message Topologys {
                        message Topology {
                           string name = 1 [json_name = "name"];
                           message Routes {
                              message Ipv4UnicastRoutes {
                                 message Ipv4UnicastRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    enum SubProtocolType {
                                       SubProtocolType_NOX_SUBX_PROTOCOL = 0;
                                       SubProtocolType_INTRAX_AREA = 1;
                                       SubProtocolType_INTERX_AREA = 2;
                                       SubProtocolType_EXTERNAL1 = 3;
                                       SubProtocolType_EXTERNAL2 = 4;
                                       SubProtocolType_NSSA1 = 5;
                                       SubProtocolType_NSSA2 = 6;
                                       SubProtocolType_LEVEL1 = 7;
                                       SubProtocolType_LEVEL2 = 8;
                                       SubProtocolType_IBGP = 9;
                                       SubProtocolType_EBGP = 10;
                                       SubProtocolType_VLINK = 11;
                                       SubProtocolType_UNRX_IPPOOL = 12;
                                       SubProtocolType_UNRX_HOST = 13;
                                       SubProtocolType_UNRX_IPSEC = 14;
                                       SubProtocolType_UNRX_FRAMED = 15;
                                       SubProtocolType_VLINKX_TRM = 19;
                                       SubProtocolType_UNRX_AAAX_DOWNLOAD = 20;
                                    };
                                    SubProtocolType sub_protocol_type = 21 [json_name = "sub-protocol-type"];
                                    enum TunnelType {
                                       TunnelType_INVALID = 0;
                                       TunnelType_LDP = 1;
                                       TunnelType_BGP = 2;
                                       TunnelType_TE = 3;
                                       TunnelType_STATICX_LSP = 4;
                                       TunnelType_GRE = 5;
                                       TunnelType_UNI = 6;
                                       TunnelType_TNLX_GROUP = 7;
                                       TunnelType_SUBX_TE = 8;
                                       TunnelType_SUBX_GROUP = 9;
                                       TunnelType_X_6OVER4 = 10;
                                       TunnelType_X_6TO4 = 11;
                                       TunnelType_MPLSX_LOCALX_IFNET = 12;
                                       TunnelType_LDP6 = 13;
                                       TunnelType_NVGRE = 15;
                                       TunnelType_P2MPX_LDP = 16;
                                       TunnelType_VXLAN = 23;
                                       TunnelType_IPSEC = 24;
                                       TunnelType_P2MPX_TE = 32;
                                       TunnelType_VXLANX_NVO3 = 39;
                                       TunnelType_GRE6 = 40;
                                       TunnelType_SRBEX_LSP = 41;
                                       TunnelType_VXLAN6X_NVO3 = 42;
                                       TunnelType_SRV6 = 43;
                                       TunnelType_X_4OVER6 = 44;
                                       TunnelType_X_6RD = 45;
                                       TunnelType_SRX_TE = 47;
                                       TunnelType_SRX_TEX_POLICY = 50;
                                       TunnelType_SRX_TEX_POLICYX_GROUP = 51;
                                       TunnelType_SRV6X_TEX_POLICY = 52;
                                       TunnelType_SRV6X_TEX_FLOWX_GROUP = 55;
                                       TunnelType_SDX_WAN = 56;
                                       TunnelType_P2MPX_GRE = 64;
                                       TunnelType_FLEXX_ALGOX_LSP = 147;
                                       TunnelType_COLOREDX_SRX_TE = 148;
                                       TunnelType_LDPX_LSP = 255;
                                    };
                                    TunnelType tunnel_type = 22 [json_name = "tunnel-type"];
                                    string tunnel_id = 23 [json_name = "tunnel-id"];
                                    string nexthop_vrf_name = 24 [json_name = "nexthop-vrf-name"];
                                    string relay_nexthop = 25 [json_name = "relay-nexthop"];
                                    uint32 route_color = 26 [json_name = "route-color"];
                                    message TunnelTypes_MplsTunnel {
                                       uint32 out_label = 1 [json_name = "out-label"];
                                       string label_stack = 2 [json_name = "label-stack"];
                                    }
                                    message TunnelTypes_SrPolicy {
                                       uint32 group_id = 1 [json_name = "group-id"];
                                       string endpoint = 2 [json_name = "endpoint"];
                                       uint32 color = 3 [json_name = "color"];
                                       string policy_name = 4 [json_name = "policy-name"];
                                    }
                                    message TunnelTypes_Vxlan {
                                       uint32 vni = 1 [json_name = "vni"];
                                       string gateway = 2 [json_name = "gateway"];
                                    }
                                    oneof TunnelTypes {
                                       TunnelTypes_MplsTunnel tunnel_types_mpls_tunnel = 27 [json_name = "mpls-tunnel"];
                                       TunnelTypes_SrPolicy tunnel_types_sr_policy = 28 [json_name = "sr-policy"];
                                       TunnelTypes_Vxlan tunnel_types_vxlan = 29 [json_name = "vxlan"];
                                    }
                                    string instance13 = 30 [json_name = "instance"];
                                    string bgp_instance = 31 [json_name = "bgp-instance"];
                                    string nexthop_interface_name = 32 [json_name = "nexthop-interface-name"];
                                 }
                                 repeated Ipv4UnicastRoute ipv4_unicast_route = 1 [json_name = "ipv4-unicast-route"];
                              }
                              Ipv4UnicastRoutes ipv4_unicast_routes = 1 [json_name = "ipv4-unicast-routes"];
                              message Ipv6UnicastRoutes {
                                 message Ipv6UnicastRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_OSPFV3 = 7;
                                       ProtocolType_RIPNG = 8;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                       ProtocolType_ND = 24;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    enum SubProtocolType {
                                       SubProtocolType_NOX_SUBX_PROTOCOL = 0;
                                       SubProtocolType_INTRAX_AREA = 1;
                                       SubProtocolType_INTERX_AREA = 2;
                                       SubProtocolType_EXTERNAL1 = 3;
                                       SubProtocolType_EXTERNAL2 = 4;
                                       SubProtocolType_NSSA1 = 5;
                                       SubProtocolType_NSSA2 = 6;
                                       SubProtocolType_LEVEL1 = 7;
                                       SubProtocolType_LEVEL2 = 8;
                                       SubProtocolType_IBGP = 9;
                                       SubProtocolType_EBGP = 10;
                                       SubProtocolType_VLINK = 11;
                                       SubProtocolType_UNRX_IPPOOL = 12;
                                       SubProtocolType_UNRX_HOST = 13;
                                       SubProtocolType_UNRX_IPSEC = 14;
                                       SubProtocolType_UNRX_FRAMED = 15;
                                       SubProtocolType_VLINKX_TRM = 19;
                                       SubProtocolType_UNRX_AAAX_DOWNLOAD = 20;
                                    };
                                    SubProtocolType sub_protocol_type = 21 [json_name = "sub-protocol-type"];
                                    enum TunnelType {
                                       TunnelType_INVALID = 0;
                                       TunnelType_LDP = 1;
                                       TunnelType_BGP = 2;
                                       TunnelType_TE = 3;
                                       TunnelType_STATICX_LSP = 4;
                                       TunnelType_GRE = 5;
                                       TunnelType_UNI = 6;
                                       TunnelType_TNLX_GROUP = 7;
                                       TunnelType_SUBX_TE = 8;
                                       TunnelType_SUBX_GROUP = 9;
                                       TunnelType_X_6OVER4 = 10;
                                       TunnelType_X_6TO4 = 11;
                                       TunnelType_MPLSX_LOCALX_IFNET = 12;
                                       TunnelType_LDP6 = 13;
                                       TunnelType_NVGRE = 15;
                                       TunnelType_P2MPX_LDP = 16;
                                       TunnelType_VXLAN = 23;
                                       TunnelType_IPSEC = 24;
                                       TunnelType_P2MPX_TE = 32;
                                       TunnelType_VXLANX_NVO3 = 39;
                                       TunnelType_GRE6 = 40;
                                       TunnelType_SRBEX_LSP = 41;
                                       TunnelType_VXLAN6X_NVO3 = 42;
                                       TunnelType_SRV6 = 43;
                                       TunnelType_X_4OVER6 = 44;
                                       TunnelType_X_6RD = 45;
                                       TunnelType_SRX_TE = 47;
                                       TunnelType_SRX_TEX_POLICY = 50;
                                       TunnelType_SRX_TEX_POLICYX_GROUP = 51;
                                       TunnelType_SRV6X_TEX_POLICY = 52;
                                       TunnelType_SRV6X_TEX_FLOWX_GROUP = 55;
                                       TunnelType_SDX_WAN = 56;
                                       TunnelType_P2MPX_GRE = 64;
                                       TunnelType_FLEXX_ALGOX_LSP = 147;
                                       TunnelType_COLOREDX_SRX_TE = 148;
                                       TunnelType_LDPX_LSP = 255;
                                    };
                                    TunnelType tunnel_type = 22 [json_name = "tunnel-type"];
                                    string tunnel_id = 23 [json_name = "tunnel-id"];
                                    string nexthop_vrf_name = 24 [json_name = "nexthop-vrf-name"];
                                    string relay_nexthop = 25 [json_name = "relay-nexthop"];
                                    uint32 route_color = 26 [json_name = "route-color"];
                                    message TunnelTypes_Vxlan {
                                       uint32 vni = 1 [json_name = "vni"];
                                       string gateway = 2 [json_name = "gateway"];
                                    }
                                    oneof TunnelTypes {
                                       TunnelTypes_Vxlan tunnel_types_vxlan = 27 [json_name = "vxlan"];
                                    }
                                 }
                                 repeated Ipv6UnicastRoute ipv6_unicast_route = 1 [json_name = "ipv6-unicast-route"];
                              }
                              Ipv6UnicastRoutes ipv6_unicast_routes = 2 [json_name = "ipv6-unicast-routes"];
                              message Ipv4RouteStatistics {
                                 message Ipv4RouteStatistic {
                                    enum ProtocolType {
                                       INVALID_ENUM_VALUE_ProtocolType = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_STATIC = 2;
                                       ProtocolType_RIP = 3;
                                       ProtocolType_OSPF = 5;
                                       ProtocolType_ISIS = 7;
                                       ProtocolType_BGP = 8;
                                       ProtocolType_UNR = 9;
                                       ProtocolType_OPR = 11;
                                       ProtocolType_TOTAL = 12;
                                    };
                                    ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                                    uint32 total_num = 2 [json_name = "total-num"];
                                    uint32 active_num = 3 [json_name = "active-num"];
                                    uint32 added_num = 4 [json_name = "added-num"];
                                    uint32 deleted_num = 5 [json_name = "deleted-num"];
                                    uint32 freed_num = 6 [json_name = "freed-num"];
                                 }
                                 repeated Ipv4RouteStatistic ipv4_route_statistic = 1 [json_name = "ipv4-route-statistic"];
                              }
                              Ipv4RouteStatistics ipv4_route_statistics = 3 [json_name = "ipv4-route-statistics"];
                              message Ipv6RouteStatistics {
                                 message Ipv6RouteStatistic {
                                    enum ProtocolType {
                                       INVALID_ENUM_VALUE_ProtocolType = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_STATIC = 2;
                                       ProtocolType_RIPNG = 4;
                                       ProtocolType_OSPFV3 = 6;
                                       ProtocolType_ISIS = 7;
                                       ProtocolType_BGP = 8;
                                       ProtocolType_UNR = 9;
                                       ProtocolType_OPR = 11;
                                       ProtocolType_TOTAL = 12;
                                    };
                                    ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                                    uint32 total_num = 2 [json_name = "total-num"];
                                    uint32 active_num = 3 [json_name = "active-num"];
                                    uint32 added_num = 4 [json_name = "added-num"];
                                    uint32 deleted_num = 5 [json_name = "deleted-num"];
                                    uint32 freed_num = 6 [json_name = "freed-num"];
                                 }
                                 repeated Ipv6RouteStatistic ipv6_route_statistic = 1 [json_name = "ipv6-route-statistic"];
                              }
                              Ipv6RouteStatistics ipv6_route_statistics = 4 [json_name = "ipv6-route-statistics"];
                              message Ipv4VpnLabelStacks {
                                 message Ipv4VpnLabelStack {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    uint32 stack = 3 [json_name = "stack"];
                                    uint32 level = 4 [json_name = "level"];
                                    string out_interface = 5 [json_name = "out-interface"];
                                    string type = 6 [json_name = "type"];
                                    string label = 7 [json_name = "label"];
                                 }
                                 repeated Ipv4VpnLabelStack ipv4_vpn_label_stack = 1 [json_name = "ipv4-vpn-label-stack"];
                              }
                              Ipv4VpnLabelStacks ipv4_vpn_label_stacks = 5 [json_name = "ipv4-vpn-label-stacks"];
                              message Ipv4LocalmtRoutes {
                                 message Ipv4LocalmtRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    string relay_nexthop = 21 [json_name = "relay-nexthop"];
                                 }
                                 repeated Ipv4LocalmtRoute ipv4_localmt_route = 1 [json_name = "ipv4-localmt-route"];
                              }
                              Ipv4LocalmtRoutes ipv4_localmt_routes = 6 [json_name = "ipv4-localmt-routes"];
                              message Ipv4PrefixStatistics {
                                 uint32 unicast_route = 1 [json_name = "unicast-route"];
                              }
                              Ipv4PrefixStatistics ipv4_prefix_statistics = 7 [json_name = "ipv4-prefix-statistics"];
                              message Ipv6PrefixStatistics {
                                 uint32 unicast_route = 1 [json_name = "unicast-route"];
                              }
                              Ipv6PrefixStatistics ipv6_prefix_statistics = 8 [json_name = "ipv6-prefix-statistics"];
                              message Ipv4LocalmtRouteStatistics {
                                 message Ipv4LocalmtRouteStatistic {
                                    enum ProtocolType {
                                       INVALID_ENUM_VALUE_ProtocolType = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_STATIC = 2;
                                       ProtocolType_RIP = 3;
                                       ProtocolType_OSPF = 5;
                                       ProtocolType_ISIS = 7;
                                       ProtocolType_BGP = 8;
                                       ProtocolType_UNR = 9;
                                       ProtocolType_OPR = 11;
                                       ProtocolType_TOTAL = 12;
                                    };
                                    ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                                    uint32 total_num = 2 [json_name = "total-num"];
                                    uint32 active_num = 3 [json_name = "active-num"];
                                    uint32 added_num = 4 [json_name = "added-num"];
                                    uint32 deleted_num = 5 [json_name = "deleted-num"];
                                    uint32 freed_num = 6 [json_name = "freed-num"];
                                 }
                                 repeated Ipv4LocalmtRouteStatistic ipv4_localmt_route_statistic = 1 [json_name = "ipv4-localmt-route-statistic"];
                              }
                              Ipv4LocalmtRouteStatistics ipv4_localmt_route_statistics = 9 [json_name = "ipv4-localmt-route-statistics"];
                              message Ipv4MsrRoutes {
                                 message Ipv4MsrRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    string relay_nexthop = 21 [json_name = "relay-nexthop"];
                                 }
                                 repeated Ipv4MsrRoute ipv4_msr_route = 1 [json_name = "ipv4-msr-route"];
                              }
                              Ipv4MsrRoutes ipv4_msr_routes = 10 [json_name = "ipv4-msr-routes"];
                              message Ipv4MsrRouteStatistic {
                                 uint32 total_num = 1 [json_name = "total-num"];
                                 uint32 active_num = 2 [json_name = "active-num"];
                                 uint32 added_num = 3 [json_name = "added-num"];
                                 uint32 deleted_num = 4 [json_name = "deleted-num"];
                              }
                              Ipv4MsrRouteStatistic ipv4_msr_route_statistic = 11 [json_name = "ipv4-msr-route-statistic"];
                              message Ipv4MbgpRoutes {
                                 message Ipv4MbgpRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    string relay_nexthop = 21 [json_name = "relay-nexthop"];
                                    string tunnel_id = 22 [json_name = "tunnel-id"];
                                 }
                                 repeated Ipv4MbgpRoute ipv4_mbgp_route = 1 [json_name = "ipv4-mbgp-route"];
                              }
                              Ipv4MbgpRoutes ipv4_mbgp_routes = 12 [json_name = "ipv4-mbgp-routes"];
                              message Ipv4MbgpRouteStatistic {
                                 uint32 total_num = 1 [json_name = "total-num"];
                                 uint32 active_num = 2 [json_name = "active-num"];
                                 uint32 added_num = 3 [json_name = "added-num"];
                                 uint32 deleted_num = 4 [json_name = "deleted-num"];
                              }
                              Ipv4MbgpRouteStatistic ipv4_mbgp_route_statistic = 13 [json_name = "ipv4-mbgp-route-statistic"];
                              message Ipv4FlowspecRoutes {
                                 message Ipv4FlowspecRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_OSPF = 2;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_RIP = 5;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    string relay_nexthop = 21 [json_name = "relay-nexthop"];
                                    string tunnel_id = 22 [json_name = "tunnel-id"];
                                 }
                                 repeated Ipv4FlowspecRoute ipv4_flowspec_route = 1 [json_name = "ipv4-flowspec-route"];
                              }
                              Ipv4FlowspecRoutes ipv4_flowspec_routes = 14 [json_name = "ipv4-flowspec-routes"];
                              message Ipv4FlowspecRouteStatistic {
                                 uint32 total_num = 1 [json_name = "total-num"];
                                 uint32 active_num = 2 [json_name = "active-num"];
                                 uint32 added_num = 3 [json_name = "added-num"];
                                 uint32 deleted_num = 4 [json_name = "deleted-num"];
                              }
                              Ipv4FlowspecRouteStatistic ipv4_flowspec_route_statistic = 15 [json_name = "ipv4-flowspec-route-statistic"];
                              message Ipv6FlowspecRoutes {
                                 message Ipv6FlowspecRoute {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 mask_length = 2 [json_name = "mask-length"];
                                    enum ProtocolType {
                                       ProtocolType_INIT = 0;
                                       ProtocolType_DIRECT = 1;
                                       ProtocolType_ISIS = 3;
                                       ProtocolType_STATIC = 4;
                                       ProtocolType_BGP = 6;
                                       ProtocolType_OSPFV3 = 7;
                                       ProtocolType_RIPNG = 8;
                                       ProtocolType_TOTAL = 9;
                                       ProtocolType_UNR = 11;
                                       ProtocolType_OPR = 14;
                                       ProtocolType_ND = 24;
                                    };
                                    ProtocolType protocol_type = 3 [json_name = "protocol-type"];
                                    string interface_name = 4 [json_name = "interface-name"];
                                    uint32 process_id = 5 [json_name = "process-id"];
                                    string direct_nexthop = 6 [json_name = "direct-nexthop"];
                                    string nexthop = 7 [json_name = "nexthop"];
                                    enum FrrType {
                                       FrrType_PRIMARY = 0;
                                       FrrType_BACKUP = 1;
                                    };
                                    FrrType frr_type = 8 [json_name = "frr-type"];
                                    uint32 preference = 9 [json_name = "preference"];
                                    uint32 cost = 10 [json_name = "cost"];
                                    enum Flag {
                                       Flag_INVALID = 0;
                                       Flag_D = 1;
                                       Flag_RD = 2;
                                       Flag_R = 3;
                                       Flag_T = 4;
                                       Flag_DT = 5;
                                       Flag_RDT = 6;
                                       Flag_RT = 7;
                                       Flag_DB = 8;
                                       Flag_RDB = 9;
                                       Flag_RB = 10;
                                       Flag_TB = 11;
                                       Flag_DTB = 12;
                                       Flag_RDTB = 13;
                                       Flag_RTB = 14;
                                       Flag_B = 15;
                                    };
                                    Flag flag = 11 [json_name = "flag"];
                                    string qos_id = 12 [json_name = "qos-id"];
                                    bool active = 13 [json_name = "active"];
                                    uint32 tag = 14 [json_name = "tag"];
                                    enum Priority {
                                       INVALID_ENUM_VALUE_Priority = 0;
                                       Priority_CRITICAL = 1;
                                       Priority_HIGH = 2;
                                       Priority_MEDIUM = 3;
                                       Priority_LOW = 4;
                                    };
                                    Priority priority = 15 [json_name = "priority"];
                                    uint32 label = 16 [json_name = "label"];
                                    string indirect_id = 17 [json_name = "indirect-id"];
                                    enum State {
                                       State_INVALID = 0;
                                       State_ACTIVEX_ADV = 1;
                                       State_ACTIVEX_NOADV = 2;
                                       State_INACTIVEX_ADV = 3;
                                       State_ACTIVEX_ADVX_RELIED = 4;
                                       State_INVALIDX_ADV = 5;
                                       State_ACTIVEX_NOADVX_RELIED = 6;
                                       State_INVALIDX_NOADV = 7;
                                       State_INACTIVEX_NOADV = 8;
                                       State_INACTIVEX_ADVX_RELIED = 9;
                                       State_INACTIVEX_NOADVX_RELIED = 10;
                                    };
                                    State state = 18 [json_name = "state"];
                                    string neighbour = 19 [json_name = "neighbour"];
                                    string age = 20 [json_name = "age"];
                                    string relay_nexthop = 21 [json_name = "relay-nexthop"];
                                    string tunnel_id = 22 [json_name = "tunnel-id"];
                                 }
                                 repeated Ipv6FlowspecRoute ipv6_flowspec_route = 1 [json_name = "ipv6-flowspec-route"];
                              }
                              Ipv6FlowspecRoutes ipv6_flowspec_routes = 16 [json_name = "ipv6-flowspec-routes"];
                              message Ipv6FlowspecRouteStatistic {
                                 uint32 total_num = 1 [json_name = "total-num"];
                                 uint32 active_num = 2 [json_name = "active-num"];
                                 uint32 added_num = 3 [json_name = "added-num"];
                                 uint32 deleted_num = 4 [json_name = "deleted-num"];
                              }
                              Ipv6FlowspecRouteStatistic ipv6_flowspec_route_statistic = 17 [json_name = "ipv6-flowspec-route-statistic"];
                           }
                           Routes routes = 2 [json_name = "routes"];
                        }
                        repeated Topology topology = 1 [json_name = "topology"];
                     }
                     Topologys topologys = 1 [json_name = "topologys"];
                     message Option {
                        bool frr_enable = 1 [json_name = "frr-enable"];
                        uint32 prefix_limit_number = 2 [json_name = "prefix-limit-number"];
                        uint32 route_limit_number = 4 [json_name = "route-limit-number"];
                        message PrefixAlertType_Percent {
                           uint32 prefix_alert_percent = 1 [json_name = "prefix-alert-percent"];
                           bool route_unchanged = 2 [json_name = "route-unchanged"];
                        }
                        message PrefixAlertType_Alert {
                           bool prefix_simply_alert = 1 [json_name = "prefix-simply-alert"];
                        }
                        oneof PrefixAlertType {
                           PrefixAlertType_Percent prefix_alert_type_percent = 6 [json_name = "percent"];
                           PrefixAlertType_Alert prefix_alert_type_alert = 7 [json_name = "alert"];
                        }
                        message RouteAlertType_Percent {
                           uint32 route_alert_percent = 1 [json_name = "route-alert-percent"];
                        }
                        message RouteAlertType_Alert {
                           bool route_simply_alert = 1 [json_name = "route-simply-alert"];
                        }
                        oneof RouteAlertType {
                           RouteAlertType_Percent route_alert_type_percent = 8 [json_name = "percent"];
                           RouteAlertType_Alert route_alert_type_alert = 9 [json_name = "alert"];
                        }
                     }
                     Option option = 2 [json_name = "option"];
                  }
                  RoutingManage routing_manage = 1 [json_name = "routing-manage"];
                  message StaticRouting {
                     message UnicastRoutes {
                        message UnicastRoute {
                           string topology_name = 1 [json_name = "topology-name"];
                           string prefix = 2 [json_name = "prefix"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           string interface_name = 4 [json_name = "interface-name"];
                           string vpn_destination_name = 5 [json_name = "vpn-destination-name"];
                           string next_hop = 6 [json_name = "next-hop"];
                           int32 preference = 7 [json_name = "preference"];
                           string description = 8 [json_name = "description"];
                           uint32 tag = 9 [json_name = "tag"];
                           uint32 cost = 10 [json_name = "cost"];
                           bool inherit_cost = 11 [json_name = "inherit-cost"];
                           bool permanent = 12 [json_name = "permanent"];
                           bool no_advertise = 13 [json_name = "no-advertise"];
                           bool no_install = 14 [json_name = "no-install"];
                           bool relay_host_route = 15 [json_name = "relay-host-route"];
                           bool dhcp_enable = 16 [json_name = "dhcp-enable"];
                           bool ldp_sync = 17 [json_name = "ldp-sync"];
                           bool inter_protocol_ecmp = 18 [json_name = "inter-protocol-ecmp"];
                           bool bfd_enable = 20 [json_name = "bfd-enable"];
                           bool relay_arp_vlink_route = 21 [json_name = "relay-arp-vlink-route"];
                           message TrackSetting_Bfd {
                              string session_name = 1 [json_name = "session-name"];
                           }
                           message TrackSetting_Efm {
                              string name = 1 [json_name = "name"];
                           }
                           message TrackSetting_Nqa {
                              string admin_name = 1 [json_name = "admin-name"];
                              string test_name = 2 [json_name = "test-name"];
                           }
                           oneof TrackSetting {
                              TrackSetting_Bfd track_setting_bfd = 22 [json_name = "bfd"];
                              TrackSetting_Efm track_setting_efm = 23 [json_name = "efm"];
                              TrackSetting_Nqa track_setting_nqa = 24 [json_name = "nqa"];
                           }
                        }
                        repeated UnicastRoute unicast_route = 1 [json_name = "unicast-route"];
                     }
                     UnicastRoutes unicast_routes = 1 [json_name = "unicast-routes"];
                     message ImportRibs {
                        message ImportRib {
                           string source_vpn = 1 [json_name = "source-vpn"];
                           bool valid_route = 2 [json_name = "valid-route"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                           }
                        }
                        repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                     }
                     ImportRibs import_ribs = 2 [json_name = "import-ribs"];
                     message RouteFrrSet {
                        bool unicast_route_frr_enable = 1 [json_name = "unicast-route-frr-enable"];
                        bool multicast_route_frr_enable = 2 [json_name = "multicast-route-frr-enable"];
                     }
                     RouteFrrSet route_frr_set = 3 [json_name = "route-frr-set"];
                     message Ipv4MulticastRoutes {
                        message Ipv4MulticastRoute {
                           string prefix = 1 [json_name = "prefix"];
                           uint32 mask_length = 2 [json_name = "mask-length"];
                           string next_hop = 3 [json_name = "next-hop"];
                           string interface_name = 4 [json_name = "interface-name"];
                           uint32 preference = 5 [json_name = "preference"];
                           string interface_state = 6 [json_name = "interface-state"];
                           string bfd_detect = 7 [json_name = "bfd-detect"];
                           string state = 8 [json_name = "state"];
                           string indirect_id = 9 [json_name = "indirect-id"];
                           string local_address = 10 [json_name = "local-address"];
                           string remote_ip = 11 [json_name = "remote-ip"];
                           string relay_nexthop = 12 [json_name = "relay-nexthop"];
                           string relay_interface = 13 [json_name = "relay-interface"];
                           string tunnel_id = 14 [json_name = "tunnel-id"];
                        }
                        repeated Ipv4MulticastRoute ipv4_multicast_route = 1 [json_name = "ipv4-multicast-route"];
                     }
                     Ipv4MulticastRoutes ipv4_multicast_routes = 4 [json_name = "ipv4-multicast-routes"];
                     message BfdTemplates {
                        message BfdTemplate {
                           string interface_name = 1 [json_name = "interface-name"];
                           string nexthop = 2 [json_name = "nexthop"];
                           string local_address = 3 [json_name = "local-address"];
                           uint32 min_tx_interval = 4 [json_name = "min-tx-interval"];
                           uint32 min_rx_interval = 5 [json_name = "min-rx-interval"];
                           uint32 multiplier = 6 [json_name = "multiplier"];
                           bool dhcp_enable = 7 [json_name = "dhcp-enable"];
                        }
                        repeated BfdTemplate bfd_template = 1 [json_name = "bfd-template"];
                     }
                     BfdTemplates bfd_templates = 5 [json_name = "bfd-templates"];
                     message Ipv4Routes {
                        message Ipv4Route {
                           string topology_name = 1 [json_name = "topology-name"];
                           string prefix = 2 [json_name = "prefix"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           string interface_name = 4 [json_name = "interface-name"];
                           string vpn_destination_name = 5 [json_name = "vpn-destination-name"];
                           string next_hop = 6 [json_name = "next-hop"];
                           string relay_next_hop = 7 [json_name = "relay-next-hop"];
                           string relay_interface_name = 8 [json_name = "relay-interface-name"];
                           string tunnel_id = 9 [json_name = "tunnel-id"];
                           uint32 preference = 10 [json_name = "preference"];
                           uint32 cost = 11 [json_name = "cost"];
                           uint32 tag = 12 [json_name = "tag"];
                           string interface_state = 13 [json_name = "interface-state"];
                           string state = 14 [json_name = "state"];
                           string indirect_id = 15 [json_name = "indirect-id"];
                           string local_address = 16 [json_name = "local-address"];
                           string remote_ip = 17 [json_name = "remote-ip"];
                           bool inherit_cost = 18 [json_name = "inherit-cost"];
                           uint32 label = 19 [json_name = "label"];
                           bool permanent = 20 [json_name = "permanent"];
                           bool no_advertise = 21 [json_name = "no-advertise"];
                           bool no_install = 22 [json_name = "no-install"];
                           string bfd_type = 23 [json_name = "bfd-type"];
                           string bfd_session_name = 24 [json_name = "bfd-session-name"];
                           string bfd_detect = 25 [json_name = "bfd-detect"];
                           string efm_interface_name = 26 [json_name = "efm-interface-name"];
                           string efm_detect = 27 [json_name = "efm-detect"];
                           string nqa_detect = 28 [json_name = "nqa-detect"];
                           string nqa_admin_name = 29 [json_name = "nqa-admin-name"];
                           string nqa_test_name = 30 [json_name = "nqa-test-name"];
                           uint32 color = 31 [json_name = "color"];
                           string nqa_group_name = 32 [json_name = "nqa-group-name"];
                        }
                        repeated Ipv4Route ipv4_route = 1 [json_name = "ipv4-route"];
                     }
                     Ipv4Routes ipv4_routes = 6 [json_name = "ipv4-routes"];
                     message Ipv6Routes {
                        message Ipv6Route {
                           string topology_name = 1 [json_name = "topology-name"];
                           string prefix = 2 [json_name = "prefix"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           string interface_name = 4 [json_name = "interface-name"];
                           string vpn_destination_name = 5 [json_name = "vpn-destination-name"];
                           string next_hop = 6 [json_name = "next-hop"];
                           string relay_next_hop = 7 [json_name = "relay-next-hop"];
                           string relay_interface_name = 8 [json_name = "relay-interface-name"];
                           string tunnel_id = 9 [json_name = "tunnel-id"];
                           uint32 preference = 10 [json_name = "preference"];
                           uint32 cost = 11 [json_name = "cost"];
                           uint32 tag = 12 [json_name = "tag"];
                           string interface_state = 13 [json_name = "interface-state"];
                           string state = 14 [json_name = "state"];
                           string indirect_id = 15 [json_name = "indirect-id"];
                           string local_address = 16 [json_name = "local-address"];
                           string remote_ip = 17 [json_name = "remote-ip"];
                           bool inherit_cost = 18 [json_name = "inherit-cost"];
                           uint32 label = 19 [json_name = "label"];
                           bool permanent = 20 [json_name = "permanent"];
                           bool no_advertise = 21 [json_name = "no-advertise"];
                           bool no_install = 22 [json_name = "no-install"];
                           string bfd_type = 23 [json_name = "bfd-type"];
                           string bfd_session_name = 24 [json_name = "bfd-session-name"];
                           string bfd_detect = 25 [json_name = "bfd-detect"];
                           string efm_interface_name = 26 [json_name = "efm-interface-name"];
                           string efm_detect = 27 [json_name = "efm-detect"];
                           string nqa_detect = 28 [json_name = "nqa-detect"];
                           string nqa_admin_name = 29 [json_name = "nqa-admin-name"];
                           string nqa_test_name = 30 [json_name = "nqa-test-name"];
                           string nqa_group_name = 31 [json_name = "nqa-group-name"];
                        }
                        repeated Ipv6Route ipv6_route = 1 [json_name = "ipv6-route"];
                     }
                     Ipv6Routes ipv6_routes = 7 [json_name = "ipv6-routes"];
                     message UnicastRoute2S {
                        message UnicastRoute2 {
                           string topology_name = 1 [json_name = "topology-name"];
                           string prefix = 2 [json_name = "prefix"];
                           uint32 mask_length = 3 [json_name = "mask-length"];
                           message NexthopInterfaces {
                              message NexthopInterface {
                                 string interface_name = 1 [json_name = "interface-name"];
                                 int32 preference = 2 [json_name = "preference"];
                                 string description = 3 [json_name = "description"];
                                 uint32 tag = 4 [json_name = "tag"];
                                 uint32 cost = 5 [json_name = "cost"];
                                 bool permanent = 6 [json_name = "permanent"];
                                 bool no_advertise = 7 [json_name = "no-advertise"];
                                 bool no_install = 8 [json_name = "no-install"];
                                 bool dhcp_enable = 9 [json_name = "dhcp-enable"];
                                 bool ldp_sync = 10 [json_name = "ldp-sync"];
                                 bool inter_protocol_ecmp = 11 [json_name = "inter-protocol-ecmp"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Efm {
                                    string efm_interface_name = 1 [json_name = "efm-interface-name"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 12 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 13 [json_name = "bfd-enable"];
                                    TrackSetting_Efm track_setting_efm = 14 [json_name = "efm"];
                                    TrackSetting_Nqa track_setting_nqa = 15 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 16 [json_name = "nqa-group"];
                                 }
                              }
                              repeated NexthopInterface nexthop_interface = 1 [json_name = "nexthop-interface"];
                           }
                           NexthopInterfaces nexthop_interfaces = 4 [json_name = "nexthop-interfaces"];
                           message NexthopInterfaceAddresses {
                              message NexthopInterfaceAddress {
                                 string interface_name = 1 [json_name = "interface-name"];
                                 string address = 2 [json_name = "address"];
                                 int32 preference = 3 [json_name = "preference"];
                                 string description = 4 [json_name = "description"];
                                 uint32 tag = 5 [json_name = "tag"];
                                 uint32 cost = 6 [json_name = "cost"];
                                 bool permanent = 7 [json_name = "permanent"];
                                 bool no_advertise = 8 [json_name = "no-advertise"];
                                 bool no_install = 9 [json_name = "no-install"];
                                 bool ldp_sync = 10 [json_name = "ldp-sync"];
                                 bool inter_protocol_ecmp = 11 [json_name = "inter-protocol-ecmp"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Efm {
                                    string efm_interface_name = 1 [json_name = "efm-interface-name"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 12 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 13 [json_name = "bfd-enable"];
                                    TrackSetting_Efm track_setting_efm = 14 [json_name = "efm"];
                                    TrackSetting_Nqa track_setting_nqa = 15 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 16 [json_name = "nqa-group"];
                                 }
                              }
                              repeated NexthopInterfaceAddress nexthop_interface_address = 1 [json_name = "nexthop-interface-address"];
                           }
                           NexthopInterfaceAddresses nexthop_interface_addresses = 5 [json_name = "nexthop-interface-addresses"];
                           message NexthopAddresses {
                              message NexthopAddress {
                                 string address = 1 [json_name = "address"];
                                 int32 preference = 2 [json_name = "preference"];
                                 string description = 3 [json_name = "description"];
                                 uint32 tag = 4 [json_name = "tag"];
                                 bool inherit_cost = 5 [json_name = "inherit-cost"];
                                 bool permanent = 6 [json_name = "permanent"];
                                 bool no_advertise = 7 [json_name = "no-advertise"];
                                 bool no_install = 8 [json_name = "no-install"];
                                 bool relay_host_route = 9 [json_name = "relay-host-route"];
                                 bool inter_protocol_ecmp = 10 [json_name = "inter-protocol-ecmp"];
                                 bool relay_arp_vlink_route = 11 [json_name = "relay-arp-vlink-route"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Efm {
                                    string efm_interface_name = 1 [json_name = "efm-interface-name"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 12 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 13 [json_name = "bfd-enable"];
                                    TrackSetting_Efm track_setting_efm = 14 [json_name = "efm"];
                                    TrackSetting_Nqa track_setting_nqa = 15 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 16 [json_name = "nqa-group"];
                                 }
                              }
                              repeated NexthopAddress nexthop_address = 1 [json_name = "nexthop-address"];
                           }
                           NexthopAddresses nexthop_addresses = 6 [json_name = "nexthop-addresses"];
                           message NexthopSdwans {
                              message NexthopSdwan {
                                 uint32 color = 1 [json_name = "color"];
                                 int32 preference = 2 [json_name = "preference"];
                                 string description = 3 [json_name = "description"];
                                 uint32 tag = 4 [json_name = "tag"];
                              }
                              repeated NexthopSdwan nexthop_sdwan = 1 [json_name = "nexthop-sdwan"];
                           }
                           NexthopSdwans nexthop_sdwans = 7 [json_name = "nexthop-sdwans"];
                           message NexthopVrfAddresses {
                              message NexthopVrfAddress {
                                 string vpn_destination_name = 1 [json_name = "vpn-destination-name"];
                                 string address = 2 [json_name = "address"];
                                 int32 preference = 3 [json_name = "preference"];
                                 string description = 4 [json_name = "description"];
                                 uint32 tag = 5 [json_name = "tag"];
                                 bool inherit_cost = 6 [json_name = "inherit-cost"];
                                 bool permanent = 7 [json_name = "permanent"];
                                 bool no_advertise = 8 [json_name = "no-advertise"];
                                 bool no_install = 9 [json_name = "no-install"];
                                 bool relay_host_route = 10 [json_name = "relay-host-route"];
                                 bool inter_protocol_ecmp = 11 [json_name = "inter-protocol-ecmp"];
                                 bool relay_arp_vlink_route = 12 [json_name = "relay-arp-vlink-route"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Efm {
                                    string efm_interface_name = 1 [json_name = "efm-interface-name"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 13 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 14 [json_name = "bfd-enable"];
                                    TrackSetting_Efm track_setting_efm = 15 [json_name = "efm"];
                                    TrackSetting_Nqa track_setting_nqa = 16 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 17 [json_name = "nqa-group"];
                                 }
                              }
                              repeated NexthopVrfAddress nexthop_vrf_address = 1 [json_name = "nexthop-vrf-address"];
                           }
                           NexthopVrfAddresses nexthop_vrf_addresses = 8 [json_name = "nexthop-vrf-addresses"];
                           message NexthopVrfSdwans {
                              message NexthopVrfSdwan {
                                 string vpn_destination_name = 1 [json_name = "vpn-destination-name"];
                                 uint32 color = 2 [json_name = "color"];
                                 int32 preference = 3 [json_name = "preference"];
                                 string description = 4 [json_name = "description"];
                                 uint32 tag = 5 [json_name = "tag"];
                                 uint32 vn_id = 6 [json_name = "vn-id"];
                              }
                              repeated NexthopVrfSdwan nexthop_vrf_sdwan = 1 [json_name = "nexthop-vrf-sdwan"];
                           }
                           NexthopVrfSdwans nexthop_vrf_sdwans = 9 [json_name = "nexthop-vrf-sdwans"];
                           message NexthopVrfOnlys {
                              message NexthopVrfOnly {
                                 string vpn_destination_name = 1 [json_name = "vpn-destination-name"];
                                 int32 preference = 2 [json_name = "preference"];
                                 string description = 3 [json_name = "description"];
                                 uint32 tag = 4 [json_name = "tag"];
                                 bool no_advertise = 5 [json_name = "no-advertise"];
                                 bool no_install = 6 [json_name = "no-install"];
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_Nqa track_setting_nqa = 7 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 8 [json_name = "nqa-group"];
                                 }
                              }
                              repeated NexthopVrfOnly nexthop_vrf_only = 1 [json_name = "nexthop-vrf-only"];
                           }
                           NexthopVrfOnlys nexthop_vrf_onlys = 10 [json_name = "nexthop-vrf-onlys"];
                           message V4ViaV6InterfaceAddresses {
                              message V4ViaV6InterfaceAddress {
                                 string interface_name = 1 [json_name = "interface-name"];
                                 string address = 2 [json_name = "address"];
                                 int32 preference = 3 [json_name = "preference"];
                                 string description = 4 [json_name = "description"];
                                 uint32 tag = 5 [json_name = "tag"];
                                 bool no_advertise = 6 [json_name = "no-advertise"];
                                 bool no_install = 7 [json_name = "no-install"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 8 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 9 [json_name = "bfd-enable"];
                                    TrackSetting_Nqa track_setting_nqa = 10 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 11 [json_name = "nqa-group"];
                                 }
                              }
                              repeated V4ViaV6InterfaceAddress v4_via_v6_interface_address = 1 [json_name = "v4-via-v6-interface-address"];
                           }
                           V4ViaV6InterfaceAddresses v4_via_v6_interface_addresses = 11 [json_name = "v4-via-v6-interface-addresses"];
                           message V4ViaV6Addresses {
                              message V4ViaV6Address {
                                 string address = 1 [json_name = "address"];
                                 int32 preference = 2 [json_name = "preference"];
                                 string description = 3 [json_name = "description"];
                                 uint32 tag = 4 [json_name = "tag"];
                                 bool no_advertise = 5 [json_name = "no-advertise"];
                                 bool no_install = 6 [json_name = "no-install"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 7 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 8 [json_name = "bfd-enable"];
                                    TrackSetting_Nqa track_setting_nqa = 9 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 10 [json_name = "nqa-group"];
                                 }
                              }
                              repeated V4ViaV6Address v4_via_v6_address = 1 [json_name = "v4-via-v6-address"];
                           }
                           V4ViaV6Addresses v4_via_v6_addresses = 12 [json_name = "v4-via-v6-addresses"];
                           message V4ViaV6VrfAddresses {
                              message V4ViaV6VrfAddress {
                                 string vpn_destination_name = 1 [json_name = "vpn-destination-name"];
                                 string address = 2 [json_name = "address"];
                                 int32 preference = 3 [json_name = "preference"];
                                 string description = 4 [json_name = "description"];
                                 uint32 tag = 5 [json_name = "tag"];
                                 bool no_advertise = 6 [json_name = "no-advertise"];
                                 bool no_install = 7 [json_name = "no-install"];
                                 message TrackSetting_BfdSession {
                                    string bfd_session_name = 1 [json_name = "bfd-session-name"];
                                 }
                                 message TrackSetting_BfdEnable {
                                    bool bfd_enable = 1 [json_name = "bfd-enable"];
                                 }
                                 message TrackSetting_Nqa {
                                    string nqa_admin_name = 1 [json_name = "nqa-admin-name"];
                                    string nqa_test_name = 2 [json_name = "nqa-test-name"];
                                 }
                                 message TrackSetting_NqaGroup {
                                    string nqa_group_name = 1 [json_name = "nqa-group-name"];
                                 }
                                 oneof TrackSetting {
                                    TrackSetting_BfdSession track_setting_bfd_session = 8 [json_name = "bfd-session"];
                                    TrackSetting_BfdEnable track_setting_bfd_enable = 9 [json_name = "bfd-enable"];
                                    TrackSetting_Nqa track_setting_nqa = 10 [json_name = "nqa"];
                                    TrackSetting_NqaGroup track_setting_nqa_group = 11 [json_name = "nqa-group"];
                                 }
                              }
                              repeated V4ViaV6VrfAddress v4_via_v6_vrf_address = 1 [json_name = "v4-via-v6-vrf-address"];
                           }
                           V4ViaV6VrfAddresses v4_via_v6_vrf_addresses = 13 [json_name = "v4-via-v6-vrf-addresses"];
                        }
                        repeated UnicastRoute2 unicast_route2 = 1 [json_name = "unicast-route2"];
                     }
                     UnicastRoute2S unicast_route2s = 8 [json_name = "unicast-route2s"];
                     message QppbSwitch {
                        string route_policy_ref = 1 [json_name = "route-policy-ref"];
                     }
                     QppbSwitch qppb_switch = 9 [json_name = "qppb-switch"];
                     message Ipv4VpnRouteStatistics {
                        uint32 active_num = 1 [json_name = "active-num"];
                        uint32 total_num = 2 [json_name = "total-num"];
                     }
                     Ipv4VpnRouteStatistics ipv4_vpn_route_statistics = 10 [json_name = "ipv4-vpn-route-statistics"];
                     message Ipv6VpnRouteStatistics {
                        uint32 active_num = 1 [json_name = "active-num"];
                        uint32 total_num = 2 [json_name = "total-num"];
                     }
                     Ipv6VpnRouteStatistics ipv6_vpn_route_statistics = 11 [json_name = "ipv6-vpn-route-statistics"];
                  }
                  StaticRouting static_routing = 2 [json_name = "static-routing"];
                  message DirectRouting {
                     message ImportRibs {
                        message ImportRib {
                           string source_vpn = 1 [json_name = "source-vpn"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                           }
                        }
                        repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                     }
                     ImportRibs import_ribs = 1 [json_name = "import-ribs"];
                     message Interfaces {
                        message Interface {
                           string name = 1 [json_name = "name"];
                           uint32 cost = 2 [json_name = "cost"];
                           message BindingTopologys {
                              message BindingTopology {
                                 string topology_name = 1 [json_name = "topology-name"];
                              }
                              repeated BindingTopology binding_topology = 1 [json_name = "binding-topology"];
                           }
                           BindingTopologys binding_topologys = 3 [json_name = "binding-topologys"];
                           uint32 degrade_cost = 4 [json_name = "degrade-cost"];
                        }
                        repeated Interface interface = 1 [json_name = "interface"];
                     }
                     Interfaces interfaces = 2 [json_name = "interfaces"];
                  }
                  DirectRouting direct_routing = 3 [json_name = "direct-routing"];
               }
               Routing routing = 9 [json_name = "routing"];
               bool export_policy_add_ert_first = 10 [json_name = "export-policy-add-ert-first"];
               bool transit_vpn = 11 [json_name = "transit-vpn"];
               enum LspOperation {
                  LspOperation_POP = 0;
                  LspOperation_POPX_GO = 1;
               };
               LspOperation lsp_operation = 12 [json_name = "lsp-operation"];
               message State {
                  string create_time = 1 [json_name = "create-time"];
                  uint32 up_time = 2 [json_name = "up-time"];
                  uint32 label = 3 [json_name = "label"];
                  enum Status {
                     INVALID_ENUM_VALUE_Status = 0;
                     Status_UP = 1;
                     Status_DOWN = 2;
                  };
                  Status status = 4 [json_name = "status"];
               }
               State state = 13 [json_name = "state"];
               message Mvpn {
                  string mvpn_id = 1 [json_name = "mvpn-id"];
                  message MvpnType_NgMvpn {
                     message Ng {
                        enum SignalingMode {
                           SignalingMode_INVALID = 0;
                           SignalingMode_BGP = 2;
                        };
                        SignalingMode signaling_mode = 1 [json_name = "signaling-mode"];
                        bool is_sender_site = 2 [json_name = "is-sender-site"];
                        bool is_ipv6_underlay = 3 [json_name = "is-ipv6-underlay"];
                        message SrcDtAddress_Srv6Locator {
                           message Srv6Locator10 {
                              string locator = 1 [json_name = "locator"];
                              string src_dt_sid = 2 [json_name = "src-dt-sid"];
                              bool auto_sid = 3 [json_name = "auto-sid"];
                              enum SignalFormat {
                                 INVALID_ENUM_VALUE_SignalFormat = 0;
                                 SignalFormat_MSID = 1;
                              };
                              SignalFormat signal_format = 4 [json_name = "signal-format"];
                           }
                           Srv6Locator10 srv6_locator = 1 [json_name = "srv6-locator"];
                        }
                        oneof SrcDtAddress {
                           SrcDtAddress_Srv6Locator src_dt_address_srv6_locator = 4 [json_name = "srv6-locator"];
                        }
                        enum RptSptMode {
                           RptSptMode_NONE = 0;
                           RptSptMode_SPTX_MODE = 1;
                           RptSptMode_RPTX_SPTX_MODE = 2;
                        };
                        RptSptMode rpt_spt_mode = 6 [json_name = "rpt-spt-mode"];
                        bool is_inter_as = 7 [json_name = "is-inter-as"];
                        bool is_c_multicast_frr = 8 [json_name = "is-c-multicast-frr"];
                        string frr_acl_name6 = 9 [json_name = "frr-acl-name6"];
                        string frr_acl_name = 10 [json_name = "frr-acl-name"];
                        string frr_flow_based_acl_name = 11 [json_name = "frr-flow-based-acl-name"];
                        string frr_flow_based_acl_name6 = 12 [json_name = "frr-flow-based-acl-name6"];
                        bool is_compatible_draft = 13 [json_name = "is-compatible-draft"];
                        bool is_export_msdp = 14 [json_name = "is-export-msdp"];
                        bool is_import_msdp = 15 [json_name = "is-import-msdp"];
                        uint32 spmsi_tnl_detect_delay = 16 [json_name = "spmsi-tnl-detect-delay"];
                        uint32 rpt_prune_delay = 17 [json_name = "rpt-prune-delay"];
                        bool inter_area_seg_enable = 18 [json_name = "inter-area-seg-enable"];
                        enum UmhSelectType {
                           UmhSelectType_UNICAST = 0;
                           UmhSelectType_HIGHESTX_IP = 1;
                        };
                        UmhSelectType umh_select_type = 19 [json_name = "umh-select-type"];
                        enum BierEntropyMode {
                           BierEntropyMode_INVALID = 0;
                           BierEntropyMode_SGX_HASH = 1;
                        };
                        BierEntropyMode bier_entropy_mode = 20 [json_name = "bier-entropy-mode"];
                        bool ipmsi_to_spmsi_switch_immediately = 21 [json_name = "ipmsi-to-spmsi-switch-immediately"];
                        message RouteTargets {
                           message RouteTarget {
                              enum RtType {
                                 INVALID_ENUM_VALUE_RtType = 0;
                                 RtType_EXPORTX_EXTCOMMUNITY = 2;
                                 RtType_IMPORTX_EXTCOMMUNITY = 3;
                              };
                              RtType rt_type = 1 [json_name = "rt-type"];
                              string rt_value = 2 [json_name = "rt-value"];
                           }
                           repeated RouteTarget route_target = 1 [json_name = "route-target"];
                        }
                        RouteTargets route_targets = 22 [json_name = "route-targets"];
                        message IpmsiTunnel {
                           enum TunnelMode {
                              TunnelMode_INVALID = 0;
                              TunnelMode_PIMX_SM = 1;
                              TunnelMode_PIMX_SSM = 2;
                              TunnelMode_P2MPX_TE = 3;
                              TunnelMode_P2MPX_MLDP = 4;
                              TunnelMode_MP2MPX_MLDP = 5;
                              TunnelMode_VXLANX_STATIC = 6;
                              TunnelMode_BIER = 7;
                              TunnelMode_BIERX_IPV6 = 8;
                           };
                           TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
                           message TunnelAttribute_RsvpTeP2Mp {
                              string rsvp_te_p2mp_template = 1 [json_name = "rsvp-te-p2mp-template"];
                           }
                           message TunnelAttribute_Bier {
                              uint32 sub_domain_id = 1 [json_name = "sub-domain-id"];
                              enum Bsl {
                                 Bsl_X_0X_BIT = 0;
                                 Bsl_X_64X_BIT = 1;
                                 Bsl_X_128X_BIT = 2;
                                 Bsl_X_256X_BIT = 3;
                              };
                              Bsl bsl = 2 [json_name = "bsl"];
                           }
                           message TunnelAttribute_BierIpv6 {
                              uint32 sub_domain_id_ipv6 = 1 [json_name = "sub-domain-id-ipv6"];
                              enum BslIpv6 {
                                 BslIpv6_X_0X_BIT = 0;
                                 BslIpv6_X_64X_BIT = 1;
                                 BslIpv6_X_128X_BIT = 2;
                                 BslIpv6_X_256X_BIT = 3;
                              };
                              BslIpv6 bsl_ipv6 = 2 [json_name = "bsl-ipv6"];
                           }
                           oneof TunnelAttribute {
                              TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 2 [json_name = "rsvp-te-p2mp"];
                              TunnelAttribute_Bier tunnel_attribute_bier = 3 [json_name = "bier"];
                              TunnelAttribute_BierIpv6 tunnel_attribute_bier_ipv6 = 4 [json_name = "bier-ipv6"];
                           }
                        }
                        IpmsiTunnel ipmsi_tunnel = 23 [json_name = "ipmsi-tunnel"];
                        message IpmsiInfos {
                           message TeTunnels {
                              message TeTunnel {
                                 string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                                 uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                                 string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
                                 message Tunnels {
                                    message Tunnel {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                    }
                                    repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                 }
                                 Tunnels tunnels = 4 [json_name = "tunnels"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 5 [json_name = "sgs"];
                              }
                              repeated TeTunnel te_tunnel = 1 [json_name = "te-tunnel"];
                           }
                           TeTunnels te_tunnels = 1 [json_name = "te-tunnels"];
                           message LdpTunnels {
                              message LdpTunnel {
                                 string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                                 string opaque_value = 2 [json_name = "opaque-value"];
                                 message Tunnels {
                                    message Tunnel {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                    }
                                    repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                 }
                                 Tunnels tunnels = 3 [json_name = "tunnels"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 4 [json_name = "sgs"];
                              }
                              repeated LdpTunnel ldp_tunnel = 1 [json_name = "ldp-tunnel"];
                           }
                           LdpTunnels ldp_tunnels = 2 [json_name = "ldp-tunnels"];
                           message BierTunnels {
                              message BierTunnel {
                                 uint32 tunnel_id = 1 [json_name = "tunnel-id"];
                                 string root_ip = 2 [json_name = "root-ip"];
                                 uint32 vpn_label = 3 [json_name = "vpn-label"];
                                 uint32 sub_domain_id = 4 [json_name = "sub-domain-id"];
                                 message RootLeafs {
                                    message RootLeaf {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                       uint32 bfr_id = 3 [json_name = "bfr-id"];
                                       string bfr_prefix = 4 [json_name = "bfr-prefix"];
                                    }
                                    repeated RootLeaf root_leaf = 1 [json_name = "root-leaf"];
                                 }
                                 RootLeafs root_leafs = 5 [json_name = "root-leafs"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 6 [json_name = "sgs"];
                              }
                              repeated BierTunnel bier_tunnel = 1 [json_name = "bier-tunnel"];
                           }
                           BierTunnels bier_tunnels = 3 [json_name = "bier-tunnels"];
                           message BierIpv6Tunnels {
                              message BierIpv6Tunnel {
                                 uint32 tunnel_id = 1 [json_name = "tunnel-id"];
                                 string root_ip = 2 [json_name = "root-ip"];
                                 message SrcDtSid_PrefixSid {
                                    string prefix_sid = 1 [json_name = "prefix-sid"];
                                 }
                                 message SrcDtSid_MulticastSid {
                                    string multicast_sid = 1 [json_name = "multicast-sid"];
                                    uint32 prefix_len = 2 [json_name = "prefix-len"];
                                    uint32 msid_len = 3 [json_name = "msid-len"];
                                 }
                                 oneof SrcDtSid {
                                    SrcDtSid_PrefixSid src_dt_sid_prefix_sid = 3 [json_name = "prefix-sid"];
                                    SrcDtSid_MulticastSid src_dt_sid_multicast_sid = 8 [json_name = "multicast-sid"];
                                 }
                                 uint32 sub_domain_id = 5 [json_name = "sub-domain-id"];
                                 message RootLeafs {
                                    message RootLeaf {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                       uint32 bfr_id = 3 [json_name = "bfr-id"];
                                       string bfr_prefix = 4 [json_name = "bfr-prefix"];
                                    }
                                    repeated RootLeaf root_leaf = 1 [json_name = "root-leaf"];
                                 }
                                 RootLeafs root_leafs = 6 [json_name = "root-leafs"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                       uint32 flow_label = 3 [json_name = "flow-label"];
                                       uint32 slice_id = 4 [json_name = "slice-id"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 7 [json_name = "sgs"];
                              }
                              repeated BierIpv6Tunnel bier_ipv6_tunnel = 1 [json_name = "bier-ipv6-tunnel"];
                           }
                           BierIpv6Tunnels bier_ipv6_tunnels = 4 [json_name = "bier-ipv6-tunnels"];
                        }
                        IpmsiInfos ipmsi_infos = 24 [json_name = "ipmsi-infos"];
                        message SpmsiTunnels {
                           uint32 switch_delay_time = 1 [json_name = "switch-delay-time"];
                           uint32 switch_back_holddown_time = 2 [json_name = "switch-back-holddown-time"];
                           uint32 spmsi_tunnel_withdraw_delay_time = 3 [json_name = "spmsi-tunnel-withdraw-delay-time"];
                           message Spmsis {
                              message StarStar {
                                 enum TunnelMode {
                                    TunnelMode_INVALID = 0;
                                    TunnelMode_PIMX_SM = 1;
                                    TunnelMode_PIMX_SSM = 2;
                                    TunnelMode_P2MPX_TE = 3;
                                    TunnelMode_P2MPX_MLDP = 4;
                                    TunnelMode_MP2MPX_MLDP = 5;
                                    TunnelMode_VXLANX_STATIC = 6;
                                    TunnelMode_BIER = 7;
                                    TunnelMode_BIERX_IPV6 = 8;
                                 };
                                 TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
                                 message TunnelAttribute_RsvpTeP2Mp {
                                    string rsvp_te_p2mp_template = 1 [json_name = "rsvp-te-p2mp-template"];
                                 }
                                 message TunnelAttribute_Bier {
                                    uint32 sub_domain_id = 1 [json_name = "sub-domain-id"];
                                    enum Bsl {
                                       Bsl_X_0X_BIT = 0;
                                       Bsl_X_64X_BIT = 1;
                                       Bsl_X_128X_BIT = 2;
                                       Bsl_X_256X_BIT = 3;
                                    };
                                    Bsl bsl = 2 [json_name = "bsl"];
                                 }
                                 message TunnelAttribute_BierIpv6 {
                                    uint32 sub_domain_id_ipv6 = 1 [json_name = "sub-domain-id-ipv6"];
                                    enum BslIpv6 {
                                       BslIpv6_X_0X_BIT = 0;
                                       BslIpv6_X_64X_BIT = 1;
                                       BslIpv6_X_128X_BIT = 2;
                                       BslIpv6_X_256X_BIT = 3;
                                    };
                                    BslIpv6 bsl_ipv6 = 2 [json_name = "bsl-ipv6"];
                                 }
                                 oneof TunnelAttribute {
                                    TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 2 [json_name = "rsvp-te-p2mp"];
                                    TunnelAttribute_Bier tunnel_attribute_bier = 3 [json_name = "bier"];
                                    TunnelAttribute_BierIpv6 tunnel_attribute_bier_ipv6 = 4 [json_name = "bier-ipv6"];
                                 }
                                 uint32 switch_threshold = 5 [json_name = "switch-threshold"];
                                 uint32 per_item_tunnel_limit = 6 [json_name = "per-item-tunnel-limit"];
                              }
                              StarStar star_star = 1 [json_name = "star-star"];
                              message StarGrps {
                                 message StarGrp {
                                    string group_addr = 1 [json_name = "group-addr"];
                                    uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                                    enum TunnelMode {
                                       TunnelMode_INVALID = 0;
                                       TunnelMode_PIMX_SM = 1;
                                       TunnelMode_PIMX_SSM = 2;
                                       TunnelMode_P2MPX_TE = 3;
                                       TunnelMode_P2MPX_MLDP = 4;
                                       TunnelMode_MP2MPX_MLDP = 5;
                                       TunnelMode_VXLANX_STATIC = 6;
                                       TunnelMode_BIER = 7;
                                       TunnelMode_BIERX_IPV6 = 8;
                                    };
                                    TunnelMode tunnel_mode = 3 [json_name = "tunnel-mode"];
                                    uint32 per_item_tunnel_limit = 4 [json_name = "per-item-tunnel-limit"];
                                    message TunnelAttribute_RsvpTeP2Mp {
                                       string rsvp_te_p2mp_template = 1 [json_name = "rsvp-te-p2mp-template"];
                                    }
                                    message TunnelAttribute_Bier {
                                       uint32 sub_domain_id = 1 [json_name = "sub-domain-id"];
                                       enum Bsl {
                                          Bsl_X_0X_BIT = 0;
                                          Bsl_X_64X_BIT = 1;
                                          Bsl_X_128X_BIT = 2;
                                          Bsl_X_256X_BIT = 3;
                                       };
                                       Bsl bsl = 2 [json_name = "bsl"];
                                    }
                                    message TunnelAttribute_BierIpv6 {
                                       uint32 sub_domain_id_ipv6 = 1 [json_name = "sub-domain-id-ipv6"];
                                       enum BslIpv6 {
                                          BslIpv6_X_0X_BIT = 0;
                                          BslIpv6_X_64X_BIT = 1;
                                          BslIpv6_X_128X_BIT = 2;
                                          BslIpv6_X_256X_BIT = 3;
                                       };
                                       BslIpv6 bsl_ipv6 = 2 [json_name = "bsl-ipv6"];
                                    }
                                    oneof TunnelAttribute {
                                       TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 5 [json_name = "rsvp-te-p2mp"];
                                       TunnelAttribute_Bier tunnel_attribute_bier = 6 [json_name = "bier"];
                                       TunnelAttribute_BierIpv6 tunnel_attribute_bier_ipv6 = 7 [json_name = "bier-ipv6"];
                                    }
                                    uint32 switch_threshold = 8 [json_name = "switch-threshold"];
                                 }
                                 repeated StarGrp star_grp = 1 [json_name = "star-grp"];
                              }
                              StarGrps star_grps = 2 [json_name = "star-grps"];
                              message SrcGrps {
                                 message SrcGrp {
                                    string group_addr = 1 [json_name = "group-addr"];
                                    uint32 group_mask_length = 2 [json_name = "group-mask-length"];
                                    string source_addr = 3 [json_name = "source-addr"];
                                    uint32 source_mask_length = 4 [json_name = "source-mask-length"];
                                    enum TunnelMode {
                                       TunnelMode_INVALID = 0;
                                       TunnelMode_PIMX_SM = 1;
                                       TunnelMode_PIMX_SSM = 2;
                                       TunnelMode_P2MPX_TE = 3;
                                       TunnelMode_P2MPX_MLDP = 4;
                                       TunnelMode_MP2MPX_MLDP = 5;
                                       TunnelMode_VXLANX_STATIC = 6;
                                       TunnelMode_BIER = 7;
                                       TunnelMode_BIERX_IPV6 = 8;
                                    };
                                    TunnelMode tunnel_mode = 5 [json_name = "tunnel-mode"];
                                    uint32 switch_threshold = 6 [json_name = "switch-threshold"];
                                    uint32 per_item_tunnel_limit = 7 [json_name = "per-item-tunnel-limit"];
                                    message TunnelAttribute_RsvpTeP2Mp {
                                       string rsvp_te_p2mp_template = 1 [json_name = "rsvp-te-p2mp-template"];
                                    }
                                    message TunnelAttribute_Bier {
                                       uint32 sub_domain_id = 1 [json_name = "sub-domain-id"];
                                       enum Bsl {
                                          Bsl_X_0X_BIT = 0;
                                          Bsl_X_64X_BIT = 1;
                                          Bsl_X_128X_BIT = 2;
                                          Bsl_X_256X_BIT = 3;
                                       };
                                       Bsl bsl = 2 [json_name = "bsl"];
                                    }
                                    message TunnelAttribute_BierIpv6 {
                                       uint32 sub_domain_id_ipv6 = 1 [json_name = "sub-domain-id-ipv6"];
                                       enum BslIpv6 {
                                          BslIpv6_X_0X_BIT = 0;
                                          BslIpv6_X_64X_BIT = 1;
                                          BslIpv6_X_128X_BIT = 2;
                                          BslIpv6_X_256X_BIT = 3;
                                       };
                                       BslIpv6 bsl_ipv6 = 2 [json_name = "bsl-ipv6"];
                                    }
                                    oneof TunnelAttribute {
                                       TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 8 [json_name = "rsvp-te-p2mp"];
                                       TunnelAttribute_Bier tunnel_attribute_bier = 9 [json_name = "bier"];
                                       TunnelAttribute_BierIpv6 tunnel_attribute_bier_ipv6 = 10 [json_name = "bier-ipv6"];
                                    }
                                 }
                                 repeated SrcGrp src_grp = 1 [json_name = "src-grp"];
                              }
                              SrcGrps src_grps = 3 [json_name = "src-grps"];
                           }
                           Spmsis spmsis = 4 [json_name = "spmsis"];
                        }
                        SpmsiTunnels spmsi_tunnels = 25 [json_name = "spmsi-tunnels"];
                        message Spmsis {
                           message TeTunnels {
                              message TeTunnel {
                                 string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                                 uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                                 string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
                                 message Tunnels {
                                    message Tunnel {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                    }
                                    repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                 }
                                 Tunnels tunnels = 4 [json_name = "tunnels"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 5 [json_name = "sgs"];
                              }
                              repeated TeTunnel te_tunnel = 1 [json_name = "te-tunnel"];
                           }
                           TeTunnels te_tunnels = 1 [json_name = "te-tunnels"];
                           message LdpTunnels {
                              message LdpTunnel {
                                 string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                                 string opaque_value = 2 [json_name = "opaque-value"];
                                 message Tunnels {
                                    message Tunnel {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                    }
                                    repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                                 }
                                 Tunnels tunnels = 3 [json_name = "tunnels"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 4 [json_name = "sgs"];
                              }
                              repeated LdpTunnel ldp_tunnel = 1 [json_name = "ldp-tunnel"];
                           }
                           LdpTunnels ldp_tunnels = 2 [json_name = "ldp-tunnels"];
                           message BierTunnels {
                              message BierTunnel {
                                 uint32 tunnel_id = 1 [json_name = "tunnel-id"];
                                 string root_ip = 2 [json_name = "root-ip"];
                                 uint32 vpn_label = 3 [json_name = "vpn-label"];
                                 uint32 sub_domain_id = 4 [json_name = "sub-domain-id"];
                                 message RootLeafs {
                                    message RootLeaf {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                       uint32 bfr_id = 3 [json_name = "bfr-id"];
                                       string bfr_prefix = 4 [json_name = "bfr-prefix"];
                                    }
                                    repeated RootLeaf root_leaf = 1 [json_name = "root-leaf"];
                                 }
                                 RootLeafs root_leafs = 5 [json_name = "root-leafs"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 6 [json_name = "sgs"];
                              }
                              repeated BierTunnel bier_tunnel = 1 [json_name = "bier-tunnel"];
                           }
                           BierTunnels bier_tunnels = 3 [json_name = "bier-tunnels"];
                           message BierIpv6Tunnels {
                              message BierIpv6Tunnel {
                                 uint32 tunnel_id = 1 [json_name = "tunnel-id"];
                                 string root_ip = 2 [json_name = "root-ip"];
                                 message SrcDtSid_PrefixSid {
                                    string prefix_sid = 1 [json_name = "prefix-sid"];
                                 }
                                 message SrcDtSid_MulticastSid {
                                    string multicast_sid = 1 [json_name = "multicast-sid"];
                                    uint32 prefix_len = 2 [json_name = "prefix-len"];
                                    uint32 msid_len = 3 [json_name = "msid-len"];
                                 }
                                 oneof SrcDtSid {
                                    SrcDtSid_PrefixSid src_dt_sid_prefix_sid = 3 [json_name = "prefix-sid"];
                                    SrcDtSid_MulticastSid src_dt_sid_multicast_sid = 8 [json_name = "multicast-sid"];
                                 }
                                 uint32 sub_domain_id = 5 [json_name = "sub-domain-id"];
                                 message RootLeafs {
                                    message RootLeaf {
                                       string address = 1 [json_name = "address"];
                                       string role = 2 [json_name = "role"];
                                       uint32 bfr_id = 3 [json_name = "bfr-id"];
                                       string bfr_prefix = 4 [json_name = "bfr-prefix"];
                                    }
                                    repeated RootLeaf root_leaf = 1 [json_name = "root-leaf"];
                                 }
                                 RootLeafs root_leafs = 6 [json_name = "root-leafs"];
                                 message Sgs {
                                    message Sg {
                                       string source_addr = 1 [json_name = "source-addr"];
                                       string group_addr = 2 [json_name = "group-addr"];
                                       uint32 flow_label = 3 [json_name = "flow-label"];
                                       uint32 slice_id = 4 [json_name = "slice-id"];
                                    }
                                    repeated Sg sg = 1 [json_name = "sg"];
                                 }
                                 Sgs sgs = 7 [json_name = "sgs"];
                              }
                              repeated BierIpv6Tunnel bier_ipv6_tunnel = 1 [json_name = "bier-ipv6-tunnel"];
                           }
                           BierIpv6Tunnels bier_ipv6_tunnels = 4 [json_name = "bier-ipv6-tunnels"];
                        }
                        Spmsis spmsis = 26 [json_name = "spmsis"];
                        message MulticastWtr {
                           uint32 wtr = 1 [json_name = "wtr"];
                        }
                        MulticastWtr multicast_wtr = 27 [json_name = "multicast-wtr"];
                        message ExtranetRpfs {
                           message ExtranetRpf {
                              string group_addr = 1 [json_name = "group-addr"];
                              uint32 group_addr_mask_length = 2 [json_name = "group-addr-mask-length"];
                              string src_vrf_name = 3 [json_name = "src-vrf-name"];
                           }
                           repeated ExtranetRpf extranet_rpf = 1 [json_name = "extranet-rpf"];
                        }
                        ExtranetRpfs extranet_rpfs = 28 [json_name = "extranet-rpfs"];
                        message FlowStatisticsEnable {
                           message BierIpv6 {
                              message Global {
                                 bool enable = 1 [json_name = "enable"];
                              }
                              Global global = 1 [json_name = "global"];
                              message Sgs {
                                 message Sg {
                                    string group_addr = 1 [json_name = "group-addr"];
                                    string source_addr = 2 [json_name = "source-addr"];
                                 }
                                 repeated Sg sg = 1 [json_name = "sg"];
                              }
                              Sgs sgs = 2 [json_name = "sgs"];
                           }
                           BierIpv6 bier_ipv6 = 1 [json_name = "bier-ipv6"];
                        }
                        FlowStatisticsEnable flow_statistics_enable = 29 [json_name = "flow-statistics-enable"];
                        message FlowLabelStatic {
                           message BierIpv6 {
                              message Sgs {
                                 message Sg {
                                    string group_addr = 1 [json_name = "group-addr"];
                                    string source_addr = 2 [json_name = "source-addr"];
                                    uint32 label = 3 [json_name = "label"];
                                 }
                                 repeated Sg sg = 1 [json_name = "sg"];
                              }
                              Sgs sgs = 1 [json_name = "sgs"];
                           }
                           BierIpv6 bier_ipv6 = 1 [json_name = "bier-ipv6"];
                        }
                        FlowLabelStatic flow_label_static = 30 [json_name = "flow-label-static"];
                        bool is_ipv6_underlay_compatible_style = 31 [json_name = "is-ipv6-underlay-compatible-style"];
                        message NetworkSlice {
                           message BierIpv6 {
                              message Global {
                                 uint32 slice_id = 1 [json_name = "slice-id"];
                              }
                              Global global = 1 [json_name = "global"];
                              message Sgs {
                                 message Sg {
                                    string group_addr = 1 [json_name = "group-addr"];
                                    string source_addr = 2 [json_name = "source-addr"];
                                    uint32 slice_id = 3 [json_name = "slice-id"];
                                 }
                                 repeated Sg sg = 1 [json_name = "sg"];
                              }
                              Sgs sgs = 2 [json_name = "sgs"];
                           }
                           BierIpv6 bier_ipv6 = 1 [json_name = "bier-ipv6"];
                        }
                        NetworkSlice network_slice = 32 [json_name = "network-slice"];
                     }
                     Ng ng = 1 [json_name = "ng"];
                  }
                  message MvpnType_RosenMvpn {
                     message Rosen {
                        message ShareGroup {
                           string address = 1 [json_name = "address"];
                           uint32 mtunnel_number = 2 [json_name = "mtunnel-number"];
                           message MtunnelIpConfiguration_UseExistInterfaceIp {
                              string unnumbered_if_name = 1 [json_name = "unnumbered-if-name"];
                           }
                           message MtunnelIpConfiguration_SpecifyMtunnelIp {
                              string ip_address = 1 [json_name = "ip-address"];
                              uint32 ip_mask_length = 2 [json_name = "ip-mask-length"];
                           }
                           oneof MtunnelIpConfiguration {
                              MtunnelIpConfiguration_UseExistInterfaceIp mtunnel_ip_configuration_use_exist_interface_ip = 3 [json_name = "use-exist-interface-ip"];
                              MtunnelIpConfiguration_SpecifyMtunnelIp mtunnel_ip_configuration_specify_mtunnel_ip = 4 [json_name = "specify-mtunnel-ip"];
                           }
                           message Remotes {
                              message Remote {
                                 string address = 1 [json_name = "address"];
                                 string peer_address = 2 [json_name = "peer-address"];
                              }
                              repeated Remote remote = 1 [json_name = "remote"];
                           }
                           Remotes remotes = 5 [json_name = "remotes"];
                           message DiffservMode {
                              message Mode_Pipe {
                                 enum ServiceClass {
                                    ServiceClass_BE = 0;
                                    ServiceClass_AF1 = 1;
                                    ServiceClass_AF2 = 2;
                                    ServiceClass_AF3 = 3;
                                    ServiceClass_AF4 = 4;
                                    ServiceClass_EF = 5;
                                    ServiceClass_CS6 = 6;
                                    ServiceClass_CS7 = 7;
                                 };
                                 ServiceClass service_class = 1 [json_name = "service-class"];
                                 enum Color {
                                    Color_GREEN = 0;
                                    Color_YELLOW = 1;
                                    Color_RED = 2;
                                 };
                                 Color color = 2 [json_name = "color"];
                              }
                              message Mode_Uniform {
                                 bool uniform12 = 1 [json_name = "uniform"];
                              }
                              oneof Mode {
                                 Mode_Pipe mode_pipe = 1 [json_name = "pipe"];
                                 Mode_Uniform mode_uniform = 2 [json_name = "uniform"];
                              }
                           }
                           DiffservMode diffserv_mode = 6 [json_name = "diffserv-mode"];
                        }
                        ShareGroup share_group = 1 [json_name = "share-group"];
                        message Attributes {
                           enum AutoDiscoveryMode {
                              AutoDiscoveryMode_NONE = 0;
                              AutoDiscoveryMode_MDT = 1;
                           };
                           AutoDiscoveryMode auto_discovery_mode = 1 [json_name = "auto-discovery-mode"];
                           bool is_switch_without_register = 2 [json_name = "is-switch-without-register"];
                           string ad_import_policy_name = 3 [json_name = "ad-import-policy-name"];
                           string source_interface_name = 4 [json_name = "source-interface-name"];
                        }
                        Attributes attributes = 2 [json_name = "attributes"];
                        message ExtranetRpfs {
                           message ExtranetRpf {
                              string group_addr = 1 [json_name = "group-addr"];
                              uint32 group_addr_mask_length = 2 [json_name = "group-addr-mask-length"];
                              string src_vrf_name = 3 [json_name = "src-vrf-name"];
                           }
                           repeated ExtranetRpf extranet_rpf = 1 [json_name = "extranet-rpf"];
                        }
                        ExtranetRpfs extranet_rpfs = 3 [json_name = "extranet-rpfs"];
                        message SwitchGroup {
                           uint32 switch_delay_time = 1 [json_name = "switch-delay-time"];
                           uint32 switch_back_holddown_time = 2 [json_name = "switch-back-holddown-time"];
                           message Groups {
                              message Group {
                                 string pool_addr = 1 [json_name = "pool-addr"];
                                 uint32 pool_mask_length = 2 [json_name = "pool-mask-length"];
                                 string acl_name = 3 [json_name = "acl-name"];
                                 uint32 threshold_value = 4 [json_name = "threshold-value"];
                                 uint32 tunnel_limit = 5 [json_name = "tunnel-limit"];
                                 bool is_reuse_log = 6 [json_name = "is-reuse-log"];
                              }
                              repeated Group group = 1 [json_name = "group"];
                           }
                           Groups groups = 3 [json_name = "groups"];
                           bool is_reuse_log = 4 [json_name = "is-reuse-log"];
                           message Group {
                              string pool_addr = 1 [json_name = "pool-addr"];
                              uint32 pool_mask_length = 2 [json_name = "pool-mask-length"];
                              string acl_name = 3 [json_name = "acl-name"];
                              uint32 threshold_value = 4 [json_name = "threshold-value"];
                           }
                           Group group = 5 [json_name = "group"];
                        }
                        SwitchGroup switch_group = 4 [json_name = "switch-group"];
                        message SwitchGroupSends {
                           message SwitchGroupSend {
                              string switch_group_addr = 1 [json_name = "switch-group-addr"];
                              uint32 reference_count = 2 [json_name = "reference-count"];
                              message Sgs {
                                 message Sg {
                                    string source_addr = 1 [json_name = "source-addr"];
                                    string group_addr = 2 [json_name = "group-addr"];
                                    uint32 switch_time = 3 [json_name = "switch-time"];
                                 }
                                 repeated Sg sg = 1 [json_name = "sg"];
                              }
                              Sgs sgs = 3 [json_name = "sgs"];
                           }
                           repeated SwitchGroupSend switch_group_send = 1 [json_name = "switch-group-send"];
                        }
                        SwitchGroupSends switch_group_sends = 5 [json_name = "switch-group-sends"];
                        message SwitchGroupRecvs {
                           message SwitchGroupRecv {
                              string group_addr = 1 [json_name = "group-addr"];
                              uint32 reference_count = 2 [json_name = "reference-count"];
                              uint32 active_count = 3 [json_name = "active-count"];
                              message Senders {
                                 message Sender {
                                    string address = 1 [json_name = "address"];
                                    uint32 active_count = 2 [json_name = "active-count"];
                                    message Sgs {
                                       message Sg {
                                          string source_addr = 1 [json_name = "source-addr"];
                                          string group_addr = 2 [json_name = "group-addr"];
                                          uint32 expire_time = 3 [json_name = "expire-time"];
                                          bool is_active = 4 [json_name = "is-active"];
                                          uint32 up_time = 5 [json_name = "up-time"];
                                       }
                                       repeated Sg sg = 1 [json_name = "sg"];
                                    }
                                    Sgs sgs = 3 [json_name = "sgs"];
                                 }
                                 repeated Sender sender = 1 [json_name = "sender"];
                              }
                              Senders senders = 4 [json_name = "senders"];
                           }
                           repeated SwitchGroupRecv switch_group_recv = 1 [json_name = "switch-group-recv"];
                        }
                        SwitchGroupRecvs switch_group_recvs = 6 [json_name = "switch-group-recvs"];
                        message SwitchInvalidPacketStates {
                           uint32 packet_length = 1 [json_name = "packet-length"];
                           uint32 msg_type = 2 [json_name = "msg-type"];
                           uint32 source_address = 3 [json_name = "source-address"];
                           uint32 group_address = 4 [json_name = "group-address"];
                           uint32 switch_group_addr = 5 [json_name = "switch-group-addr"];
                        }
                        SwitchInvalidPacketStates switch_invalid_packet_states = 7 [json_name = "switch-invalid-packet-states"];
                        message SwitchInvalidPacketStatistics {
                           uint32 packet_length = 1 [json_name = "packet-length"];
                           uint32 msg_type = 2 [json_name = "msg-type"];
                           uint32 source_address = 3 [json_name = "source-address"];
                           uint32 group_address = 4 [json_name = "group-address"];
                           uint32 switch_group_addr = 5 [json_name = "switch-group-addr"];
                        }
                        SwitchInvalidPacketStatistics switch_invalid_packet_statistics = 8 [json_name = "switch-invalid-packet-statistics"];
                        message ControlMessageCounters {
                           message ControlMessageCounter {
                              enum MsgType {
                                 INVALID_ENUM_VALUE_MsgType = 0;
                                 MsgType_SWITCH = 1;
                              };
                              MsgType msg_type = 1 [json_name = "msg-type"];
                              uint32 rcvd_msg_num = 2 [json_name = "rcvd-msg-num"];
                              uint32 send_msg_num = 3 [json_name = "send-msg-num"];
                              uint32 invalid_msg_num = 4 [json_name = "invalid-msg-num"];
                           }
                           repeated ControlMessageCounter control_message_counter = 1 [json_name = "control-message-counter"];
                        }
                        ControlMessageCounters control_message_counters = 9 [json_name = "control-message-counters"];
                     }
                     Rosen rosen = 1 [json_name = "rosen"];
                  }
                  oneof MvpnType {
                     MvpnType_NgMvpn mvpn_type_ng_mvpn = 3 [json_name = "ng-mvpn"];
                     MvpnType_RosenMvpn mvpn_type_rosen_mvpn = 4 [json_name = "rosen-mvpn"];
                  }
                  uint32 local_admin_id = 5 [json_name = "local-admin-id"];
               }
               Mvpn mvpn = 14 [json_name = "mvpn"];
               message Evpn {
                  string import_policy_name = 1 [json_name = "import-policy-name"];
                  string export_policy_name = 2 [json_name = "export-policy-name"];
                  bool mpls_routing = 3 [json_name = "mpls-routing"];
                  string tunnel_policy_name = 4 [json_name = "tunnel-policy-name"];
                  enum Irb2Ip {
                     Irb2Ip_DEFAULT = 0;
                     Irb2Ip_ENABLE = 1;
                     Irb2Ip_DISABLE = 2;
                  };
                  Irb2Ip irb2ip = 5 [json_name = "irb2ip"];
                  message ExtendVpnTargets {
                     message ExtendVpnTarget {
                        string vrf_rt_value = 1 [json_name = "vrf-rt-value"];
                        enum VrfRtType {
                           INVALID_ENUM_VALUE_VrfRtType = 0;
                           VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                           VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                        };
                        VrfRtType vrf_rt_type = 2 [json_name = "vrf-rt-type"];
                     }
                     repeated ExtendVpnTarget extend_vpn_target = 1 [json_name = "extend-vpn-target"];
                  }
                  ExtendVpnTargets extend_vpn_targets = 6 [json_name = "extend-vpn-targets"];
                  message State {
                     uint32 label = 1 [json_name = "label"];
                  }
                  State state = 7 [json_name = "state"];
                  uint32 default_color = 8 [json_name = "default-color"];
                  enum LabelMode {
                     LabelMode_PERX_INSTANCE = 0;
                     LabelMode_PERX_ROUTE = 1;
                  };
                  LabelMode label_mode = 9 [json_name = "label-mode"];
               }
               Evpn evpn = 15 [json_name = "evpn"];
               string effect_route_distinguisher = 16 [json_name = "effect-route-distinguisher"];
               uint32 default_color = 17 [json_name = "default-color"];
               message TunnelInfos {
                  message TunnelInfo {
                     enum Type {
                        Type_INVALID = 0;
                        Type_LDP = 1;
                        Type_BGP = 2;
                        Type_TE = 3;
                        Type_STATICX_LSP = 4;
                        Type_GRE = 5;
                        Type_UNI = 6;
                        Type_TNLX_GROUP = 7;
                        Type_SUBX_TE = 8;
                        Type_SUBX_GROUP = 9;
                        Type_X_6OVER4 = 10;
                        Type_X_6TO4 = 11;
                        Type_MPLSX_LOCALX_IFNET = 12;
                        Type_LDP6 = 13;
                        Type_NVGRE = 15;
                        Type_P2MPX_LDP = 16;
                        Type_VXLAN = 23;
                        Type_IPSEC = 24;
                        Type_P2MPX_TE = 32;
                        Type_VXLANX_NVO3 = 39;
                        Type_GRE6 = 40;
                        Type_SRBEX_LSP = 41;
                        Type_VXLAN6X_NVO3 = 42;
                        Type_SRV6 = 43;
                        Type_X_4OVER6 = 44;
                        Type_X_6RD = 45;
                        Type_SRX_TE = 47;
                        Type_SRX_TEX_POLICY = 50;
                        Type_SRX_TEX_POLICYX_GROUP = 51;
                        Type_SRV6X_TEX_POLICY = 52;
                        Type_SRV6X_TEX_FLOWX_GROUP = 55;
                        Type_SDX_WAN = 56;
                        Type_P2MPX_GRE = 64;
                        Type_FLEXX_ALGOX_LSP = 147;
                        Type_COLOREDX_SRX_TE = 148;
                        Type_LDPX_LSP = 255;
                     };
                     Type type = 1 [json_name = "type"];
                     string peer_ip = 2 [json_name = "peer-ip"];
                     uint32 id = 3 [json_name = "id"];
                     uint32 color = 4 [json_name = "color"];
                     string name = 5 [json_name = "name"];
                     uint32 iid = 6 [json_name = "iid"];
                  }
                  repeated TunnelInfo tunnel_info = 1 [json_name = "tunnel-info"];
               }
               TunnelInfos tunnel_infos = 18 [json_name = "tunnel-infos"];
               message IsisImportRts {
                  message IsisImportRt {
                     string src_vrf = 1 [json_name = "src-vrf"];
                     uint32 process_id = 2 [json_name = "process-id"];
                     bool valid_route = 3 [json_name = "valid-route"];
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_RoutePolicy policy_type_route_policy = 4 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 5 [json_name = "route-filter"];
                     }
                  }
                  repeated IsisImportRt isis_import_rt = 1 [json_name = "isis-import-rt"];
               }
               IsisImportRts isis_import_rts = 19 [json_name = "isis-import-rts"];
               message OspfImportRts {
                  message OspfImportRt {
                     string src_vrf = 1 [json_name = "src-vrf"];
                     uint32 process_id = 2 [json_name = "process-id"];
                     bool valid_route = 3 [json_name = "valid-route"];
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_RoutePolicy policy_type_route_policy = 4 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 5 [json_name = "route-filter"];
                     }
                  }
                  repeated OspfImportRt ospf_import_rt = 1 [json_name = "ospf-import-rt"];
               }
               OspfImportRts ospf_import_rts = 20 [json_name = "ospf-import-rts"];
               message Bas {
                  message Ipv4AddressManage {
                     message WarningThreshold {
                        uint32 percent_value = 1 [json_name = "percent-value"];
                     }
                     WarningThreshold warning_threshold = 1 [json_name = "warning-threshold"];
                  }
                  Ipv4AddressManage ipv4_address_manage = 1 [json_name = "ipv4-address-manage"];
                  message Ipv6AddressManage {
                     message WarningThreshold {
                        uint32 value = 1 [json_name = "value"];
                     }
                     WarningThreshold warning_threshold = 1 [json_name = "warning-threshold"];
                  }
                  Ipv6AddressManage ipv6_address_manage = 2 [json_name = "ipv6-address-manage"];
                  message BrasUserManage {
                     message Urpf {
                        enum Enable {
                           Enable_DISABLE = 0;
                           Enable_ENABLE = 1;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        enum StrictMode {
                           StrictMode_STRICT = 0;
                        };
                        StrictMode strict_mode = 2 [json_name = "strict-mode"];
                        bool subnet_check = 3 [json_name = "subnet-check"];
                     }
                     Urpf urpf = 1 [json_name = "urpf"];
                     message Ipv6Urpf {
                        enum Enable {
                           Enable_DISABLE = 0;
                           Enable_ENABLE = 1;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        enum StrictMode {
                           StrictMode_STRICT = 0;
                        };
                        StrictMode strict_mode = 2 [json_name = "strict-mode"];
                        bool subnet_check = 3 [json_name = "subnet-check"];
                     }
                     Ipv6Urpf ipv6_urpf = 2 [json_name = "ipv6-urpf"];
                  }
                  BrasUserManage bras_user_manage = 3 [json_name = "bras-user-manage"];
               }
               Bas bas = 21 [json_name = "bas"];
               message Vrfpipe {
                  bool split_mode = 1 [json_name = "split-mode"];
                  enum PipeMode {
                     INVALID_ENUM_VALUE_PipeMode = 0;
                     PipeMode_PIPE = 1;
                     PipeMode_SHORTPIPE = 2;
                     PipeMode_UNIFORM = 3;
                  };
                  PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
                  enum IngressPipeMode {
                     INVALID_ENUM_VALUE_IngressPipeMode = 0;
                     IngressPipeMode_PIPE = 1;
                     IngressPipeMode_SHORTPIPE = 2;
                     IngressPipeMode_UNIFORM = 3;
                  };
                  IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 4 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 5 [json_name = "color"];
                  enum EgressPipeMode {
                     INVALID_ENUM_VALUE_EgressPipeMode = 0;
                     EgressPipeMode_PIPE = 1;
                     EgressPipeMode_SHORTPIPE = 2;
                     EgressPipeMode_UNIFORM = 3;
                  };
                  EgressPipeMode egress_pipe_mode = 6 [json_name = "egress-pipe-mode"];
                  string domain_name = 7 [json_name = "domain-name"];
               }
               Vrfpipe vrfpipe = 22 [json_name = "vrfpipe"];
               message VpnTtlmode {
                  enum Ttlmode {
                     INVALID_ENUM_VALUE_Ttlmode = 0;
                     Ttlmode_PIPE = 1;
                     Ttlmode_UNIFORM = 3;
                  };
                  Ttlmode ttlmode = 1 [json_name = "ttlmode"];
               }
               VpnTtlmode vpn_ttlmode = 23 [json_name = "vpn-ttlmode"];
               uint32 static_label = 24 [json_name = "static-label"];
               message ImportPolicyType_RtpRef {
                  string import_policy = 1 [json_name = "import-policy"];
               }
               message ImportPolicyType_XplRef {
                  message ImportFilter {
                     string name = 1 [json_name = "name"];
                     string parameter = 2 [json_name = "parameter"];
                  }
                  ImportFilter import_filter = 1 [json_name = "import-filter"];
               }
               oneof ImportPolicyType {
                  ImportPolicyType_RtpRef import_policy_type_rtp_ref = 25 [json_name = "rtp-ref"];
                  ImportPolicyType_XplRef import_policy_type_xpl_ref = 26 [json_name = "xpl-ref"];
               }
               message ExportPolicyType_RtpRef {
                  string export_policy = 1 [json_name = "export-policy"];
               }
               message ExportPolicyType_XplRef {
                  message ExportFilter {
                     string name = 1 [json_name = "name"];
                     string parameter = 2 [json_name = "parameter"];
                  }
                  ExportFilter export_filter = 1 [json_name = "export-filter"];
               }
               oneof ExportPolicyType {
                  ExportPolicyType_RtpRef export_policy_type_rtp_ref = 27 [json_name = "rtp-ref"];
                  ExportPolicyType_XplRef export_policy_type_xpl_ref = 28 [json_name = "xpl-ref"];
               }
               message Vlink {
                  bool single_active_redirect_filter_enable = 1 [json_name = "single-active-redirect-filter-enable"];
               }
               Vlink vlink = 29 [json_name = "vlink"];
            }
            repeated Af af = 1 [json_name = "af"];
         }
         Afs afs = 3 [json_name = "afs"];
         message Vrrp {
            message Groups {
               message Group {
                  uint32 id = 1 [json_name = "id"];
                  string if_name = 2 [json_name = "if-name"];
                  uint32 priority = 3 [json_name = "priority"];
                  bool preempt_mode = 4 [json_name = "preempt-mode"];
                  uint32 delay_time = 5 [json_name = "delay-time"];
                  enum Type {
                     Type_NORMAL = 0;
                     Type_ADMIN = 1;
                     Type_MEMBER = 2;
                     Type_LBRG = 3;
                     Type_LBRGX_MEM = 4;
                     Type_MEMX_LBRG = 5;
                     Type_MEMX_LBRGX_MEM = 6;
                     Type_UNICAST = 7;
                  };
                  Type type = 7 [json_name = "type"];
                  enum State {
                     State_INITIALIZE = 0;
                     State_BACKUP = 1;
                     State_MASTER = 2;
                  };
                  State state = 8 [json_name = "state"];
                  string create_time = 9 [json_name = "create-time"];
                  string last_change_time = 10 [json_name = "last-change-time"];
                  message VirtualIps {
                     message VirtualIp {
                        string address = 1 [json_name = "address"];
                     }
                     repeated VirtualIp virtual_ip = 1 [json_name = "virtual-ip"];
                  }
                  VirtualIps virtual_ips = 11 [json_name = "virtual-ips"];
                  message TrackBfds {
                     message TrackBfd {
                        string session_name = 1 [json_name = "session-name"];
                        enum SessionType {
                           SessionType_NORMAL = 0;
                           SessionType_LINK = 1;
                           SessionType_PEER = 2;
                        };
                        SessionType session_type = 2 [json_name = "session-type"];
                        enum TrackMode {
                           TrackMode_INCREASE = 0;
                           TrackMode_REDUCE = 1;
                        };
                        TrackMode track_mode = 3 [json_name = "track-mode"];
                        uint32 priority_change = 4 [json_name = "priority-change"];
                        uint32 session_id = 5 [json_name = "session-id"];
                        enum SessionState {
                           SessionState_DOWN = 0;
                           SessionState_UP = 1;
                           SessionState_ADMINX_DOWN = 2;
                           SessionState_UNKNOW = 3;
                        };
                        SessionState session_state = 6 [json_name = "session-state"];
                     }
                     repeated TrackBfd track_bfd = 1 [json_name = "track-bfd"];
                  }
                  TrackBfds track_bfds = 12 [json_name = "track-bfds"];
                  uint32 adver_interval = 13 [json_name = "adver-interval"];
                  bool isplain = 14 [json_name = "isplain"];
                  string authentication_key = 15 [json_name = "authentication-key"];
                  enum AuthenticationMode {
                     AuthenticationMode_NONE = 0;
                     AuthenticationMode_SIMPLE = 1;
                     AuthenticationMode_MD5 = 2;
                     AuthenticationMode_HMACX_SHA256 = 3;
                  };
                  AuthenticationMode authentication_mode = 16 [json_name = "authentication-mode"];
                  uint32 hold_multi = 17 [json_name = "hold-multi"];
                  bool backup_forward = 18 [json_name = "backup-forward"];
                  bool fast_resume = 19 [json_name = "fast-resume"];
                  enum V3Sendmode {
                     V3Sendmode_V3X_ONLY = 0;
                     V3Sendmode_V2V3X_BOTH = 1;
                     V3Sendmode_V2X_ONLY = 2;
                  };
                  V3Sendmode v3_sendmode = 20 [json_name = "v3-sendmode"];
                  message TrackInterfaces {
                     message TrackInterface {
                        string ifname = 1 [json_name = "ifname"];
                        enum TrackMode {
                           TrackMode_INCREASE = 0;
                           TrackMode_REDUCE = 1;
                        };
                        TrackMode track_mode = 2 [json_name = "track-mode"];
                        uint32 priority_change = 3 [json_name = "priority-change"];
                     }
                     repeated TrackInterface track_interface = 1 [json_name = "track-interface"];
                  }
                  TrackInterfaces track_interfaces = 21 [json_name = "track-interfaces"];
                  message VrrpType_MemberVrrp {
                     uint32 admin_id = 1 [json_name = "admin-id"];
                     string admin_if_name = 2 [json_name = "admin-if-name"];
                  }
                  message VrrpType_AdminVrrp {
                     bool admin_flag = 1 [json_name = "admin-flag"];
                     bool admin_ignore_ifdown = 2 [json_name = "admin-ignore-ifdown"];
                  }
                  oneof VrrpType {
                     VrrpType_MemberVrrp vrrp_type_member_vrrp = 22 [json_name = "member-vrrp"];
                     VrrpType_AdminVrrp vrrp_type_admin_vrrp = 23 [json_name = "admin-vrrp"];
                  }
               }
               repeated Group group = 1 [json_name = "group"];
            }
            Groups groups = 1 [json_name = "groups"];
         }
         Vrrp vrrp = 4 [json_name = "vrrp"];
         message Mpls {
            message Common {
               message MplsInterfaces {
                  message MplsInterface {
                     string name = 1 [json_name = "name"];
                     uint32 mtu_value = 2 [json_name = "mtu-value"];
                     bool ldp_enable = 3 [json_name = "ldp-enable"];
                     bool te_enable = 4 [json_name = "te-enable"];
                     bool rsvp_te_enable = 5 [json_name = "rsvp-te-enable"];
                     message Statistics {
                        uint32 fragmented_packet_count = 1 [json_name = "fragmented-packet-count"];
                     }
                     Statistics statistics = 6 [json_name = "statistics"];
                  }
                  repeated MplsInterface mpls_interface = 1 [json_name = "mpls-interface"];
               }
               MplsInterfaces mpls_interfaces = 1 [json_name = "mpls-interfaces"];
            }
            Common common = 1 [json_name = "common"];
            message Ldp {
               message Instance6 {
                  string lsr_id = 1 [json_name = "lsr-id"];
                  uint32 igp_sync_delay_time = 2 [json_name = "igp-sync-delay-time"];
                  bool graceful_delete_enable = 3 [json_name = "graceful-delete-enable"];
                  uint32 graceful_delete_time = 4 [json_name = "graceful-delete-time"];
                  bool no_mapping_enable = 5 [json_name = "no-mapping-enable"];
                  bool auto_dod_request_enable = 6 [json_name = "auto-dod-request-enable"];
                  bool split_horizon = 7 [json_name = "split-horizon"];
                  bool send_all_loopback = 8 [json_name = "send-all-loopback"];
                  bool longest_match = 9 [json_name = "longest-match"];
                  bool loop_detect = 10 [json_name = "loop-detect"];
                  enum LabelCtrlMode {
                     LabelCtrlMode_ORDERED = 0;
                     LabelCtrlMode_INDEPENDENT = 1;
                  };
                  LabelCtrlMode label_ctrl_mode = 11 [json_name = "label-ctrl-mode"];
                  uint32 auto_remote_keep_alive_hold = 12 [json_name = "auto-remote-keep-alive-hold"];
                  enum TrafficStatisticMode {
                     TrafficStatisticMode_NONE = 0;
                     TrafficStatisticMode_HOST = 1;
                     TrafficStatisticMode_HOSTX_IPX_PREFIX = 2;
                  };
                  TrafficStatisticMode traffic_statistic_mode = 13 [json_name = "traffic-statistic-mode"];
                  string traffic_statistic_ip_prefix_name = 14 [json_name = "traffic-statistic-ip-prefix-name"];
                  message Authentication {
                     enum AuthMode {
                        INVALID_ENUM_VALUE_AuthMode = 0;
                        AuthMode_MD5 = 1;
                        AuthMode_KEYCHAIN = 2;
                     };
                     AuthMode auth_mode = 1 [json_name = "auth-mode"];
                     enum Md5Type {
                        INVALID_ENUM_VALUE_Md5Type = 0;
                        Md5Type_MD5X_CIPER = 1;
                        Md5Type_MD5X_PLAIN = 3;
                     };
                     Md5Type md5_type = 2 [json_name = "md5-type"];
                     string md5_password = 3 [json_name = "md5-password"];
                     string keychain_name = 4 [json_name = "keychain-name"];
                  }
                  Authentication authentication = 15 [json_name = "authentication"];
                  message Interfaces {
                     message Interface {
                        string name = 1 [json_name = "name"];
                        uint32 hello_send_time = 2 [json_name = "hello-send-time"];
                        uint32 hello_hold_time = 3 [json_name = "hello-hold-time"];
                        uint32 keep_alive_send_time = 4 [json_name = "keep-alive-send-time"];
                        uint32 keep_alive_hold_time = 5 [json_name = "keep-alive-hold-time"];
                        uint32 igp_sync_delay_time = 6 [json_name = "igp-sync-delay-time"];
                        bool mldp_p2mp_disable = 7 [json_name = "mldp-p2mp-disable"];
                        string transport_address = 8 [json_name = "transport-address"];
                        string local_lsr_id_address = 9 [json_name = "local-lsr-id-address"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                        };
                        LabelAdvertiseMode label_advertise_mode = 10 [json_name = "label-advertise-mode"];
                        message Status {
                           enum IfState {
                              IfState_ACTIVE = 0;
                              IfState_INACTIVE = 1;
                           };
                           IfState if_state = 1 [json_name = "if-state"];
                           enum LabelDistributionMode {
                              LabelDistributionMode_DU = 0;
                              LabelDistributionMode_DOD = 1;
                              LabelDistributionMode_UNAVAILABLE = 2;
                           };
                           LabelDistributionMode label_distribution_mode = 2 [json_name = "label-distribution-mode"];
                           uint32 negotiated_hello_hold_time = 3 [json_name = "negotiated-hello-hold-time"];
                           uint32 effective_mtu = 4 [json_name = "effective-mtu"];
                           enum AutoTriggerType {
                              AutoTriggerType_DEFAULT = 0;
                              AutoTriggerType_ISIS = 1;
                              AutoTriggerType_OSPF = 2;
                              AutoTriggerType_ISISX_OSPF = 3;
                           };
                           AutoTriggerType auto_trigger_type = 5 [json_name = "auto-trigger-type"];
                        }
                        Status status = 11 [json_name = "status"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 16 [json_name = "interfaces"];
                  message RemotePeers {
                     message RemotePeer {
                        string name = 1 [json_name = "name"];
                        string remote_ip = 2 [json_name = "remote-ip"];
                        string description = 3 [json_name = "description"];
                        enum NoMapping {
                           NoMapping_DEFAULT = 0;
                           NoMapping_ENABLE = 1;
                           NoMapping_DISABLE = 2;
                        };
                        NoMapping no_mapping = 4 [json_name = "no-mapping"];
                        enum AutoDodRequestMode {
                           AutoDodRequestMode_DEFAULT = 0;
                           AutoDodRequestMode_ENABLE = 1;
                           AutoDodRequestMode_BLOCK = 2;
                        };
                        AutoDodRequestMode auto_dod_request_mode = 5 [json_name = "auto-dod-request-mode"];
                        uint32 hello_send_time = 6 [json_name = "hello-send-time"];
                        uint32 hello_hold_time = 7 [json_name = "hello-hold-time"];
                        uint32 keep_alive_send_time = 8 [json_name = "keep-alive-send-time"];
                        uint32 keep_alive_hold_time = 9 [json_name = "keep-alive-hold-time"];
                        uint32 igp_sync_delay_time = 10 [json_name = "igp-sync-delay-time"];
                        string local_lsr_id_address = 11 [json_name = "local-lsr-id-address"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                        };
                        LabelAdvertiseMode label_advertise_mode = 12 [json_name = "label-advertise-mode"];
                        message Status {
                           enum RemoteNeighborState {
                              RemoteNeighborState_ACTIVE = 0;
                              RemoteNeighborState_INACTIVE = 1;
                           };
                           RemoteNeighborState remote_neighbor_state = 1 [json_name = "remote-neighbor-state"];
                           uint32 negotiated_hello_hold_time = 2 [json_name = "negotiated-hello-hold-time"];
                           bool manual_configuration_effect = 3 [json_name = "manual-configuration-effect"];
                           message AutoCreateType {
                              enum L2Vpn {
                                 L2Vpn_DEFAULT = 0;
                                 L2Vpn_L2VPN = 1;
                              };
                              L2Vpn l2vpn = 1 [json_name = "l2vpn"];
                              enum SessionProtection {
                                 SessionProtection_DEFAULT = 0;
                                 SessionProtection_SESSIONX_PROTECT = 1;
                              };
                              SessionProtection session_protection = 2 [json_name = "session-protection"];
                              enum Rlfa {
                                 Rlfa_DEFAULT = 0;
                                 Rlfa_RLFA = 1;
                              };
                              Rlfa rlfa = 3 [json_name = "rlfa"];
                              enum AutoAcceptFunction {
                                 AutoAcceptFunction_DEFAULT = 0;
                                 AutoAcceptFunction_AUTOX_ACCEPT = 1;
                              };
                              AutoAcceptFunction auto_accept_function = 4 [json_name = "auto-accept-function"];
                           }
                           AutoCreateType auto_create_type = 4 [json_name = "auto-create-type"];
                        }
                        Status status = 13 [json_name = "status"];
                     }
                     repeated RemotePeer remote_peer = 1 [json_name = "remote-peer"];
                  }
                  RemotePeers remote_peers = 17 [json_name = "remote-peers"];
                  message AuthPeers {
                     message AuthPeer {
                        string id = 1 [json_name = "id"];
                        bool authen_exclude = 2 [json_name = "authen-exclude"];
                        bool authen_enable = 3 [json_name = "authen-enable"];
                        enum AuthenMode {
                           INVALID_ENUM_VALUE_AuthenMode = 0;
                           AuthenMode_MD5 = 1;
                           AuthenMode_KEYCHAIN = 2;
                           AuthenMode_TCPX_AO = 3;
                        };
                        AuthenMode authen_mode = 4 [json_name = "authen-mode"];
                        enum Md5Type {
                           INVALID_ENUM_VALUE_Md5Type = 0;
                           Md5Type_MD5X_CIPER = 1;
                           Md5Type_MD5X_PLAIN = 3;
                        };
                        Md5Type md5_type = 5 [json_name = "md5-type"];
                        string md5_password = 6 [json_name = "md5-password"];
                        string keychain_name = 7 [json_name = "keychain-name"];
                        string tcp_ao_name = 8 [json_name = "tcp-ao-name"];
                        bool out_bound = 9 [json_name = "out-bound"];
                     }
                     repeated AuthPeer auth_peer = 1 [json_name = "auth-peer"];
                  }
                  AuthPeers auth_peers = 18 [json_name = "auth-peers"];
                  message AuthPeerGroups {
                     message AuthPeerGroup {
                        uint32 preference = 1 [json_name = "preference"];
                        string name = 2 [json_name = "name"];
                        enum AuthenMode {
                           INVALID_ENUM_VALUE_AuthenMode = 0;
                           AuthenMode_MD5 = 1;
                           AuthenMode_KEYCHAIN = 2;
                           AuthenMode_TCPX_AO = 3;
                        };
                        AuthenMode authen_mode = 3 [json_name = "authen-mode"];
                        enum Md5Type {
                           INVALID_ENUM_VALUE_Md5Type = 0;
                           Md5Type_MD5X_CIPER = 1;
                           Md5Type_MD5X_PLAIN = 3;
                        };
                        Md5Type md5_type = 4 [json_name = "md5-type"];
                        string md5_password = 5 [json_name = "md5-password"];
                        string keychain_name = 6 [json_name = "keychain-name"];
                     }
                     repeated AuthPeerGroup auth_peer_group = 1 [json_name = "auth-peer-group"];
                  }
                  AuthPeerGroups auth_peer_groups = 19 [json_name = "auth-peer-groups"];
                  message Gtsms {
                     message Gtsm {
                        string peer_transport_address = 1 [json_name = "peer-transport-address"];
                        uint32 hops = 2 [json_name = "hops"];
                     }
                     repeated Gtsm gtsm = 1 [json_name = "gtsm"];
                  }
                  Gtsms gtsms = 20 [json_name = "gtsms"];
                  message SessionProtection {
                     enum Mode {
                        Mode_ALL = 0;
                        Mode_PEERX_GROUP = 1;
                     };
                     Mode mode = 1 [json_name = "mode"];
                     string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                     enum DurationType {
                        DurationType_FIXEDX_DURATION = 0;
                        DurationType_FOREVER = 1;
                     };
                     DurationType duration_type = 3 [json_name = "duration-type"];
                     uint32 duration = 4 [json_name = "duration"];
                  }
                  SessionProtection session_protection = 21 [json_name = "session-protection"];
                  message AcceptTargetHello {
                     enum Mode {
                        Mode_NONE = 0;
                        Mode_ALL = 1;
                        Mode_PEERX_GROUP = 2;
                     };
                     Mode mode = 1 [json_name = "mode"];
                     string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                  }
                  AcceptTargetHello accept_target_hello = 22 [json_name = "accept-target-hello"];
                  message TopologyInstances {
                     message TopologyInstance {
                        uint32 topology_id = 1 [json_name = "topology-id"];
                        uint32 ip_family = 2 [json_name = "ip-family"];
                        string topology_name = 3 [json_name = "topology-name"];
                        string lsp_transit_policy_name = 4 [json_name = "lsp-transit-policy-name"];
                        enum AutoFrrLspTriggerMode {
                           AutoFrrLspTriggerMode_ALL = 0;
                           AutoFrrLspTriggerMode_HOST = 1;
                           AutoFrrLspTriggerMode_NONE = 2;
                           AutoFrrLspTriggerMode_IPX_PREFIX = 3;
                        };
                        AutoFrrLspTriggerMode auto_frr_lsp_trigger_mode = 5 [json_name = "auto-frr-lsp-trigger-mode"];
                        string auto_frr_lsp_ip_prefix_name = 6 [json_name = "auto-frr-lsp-ip-prefix-name"];
                        message EntropyLabelNegotiatePrimaryOnly {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ALL = 1;
                              Mode_IPX_PREFIX = 2;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                        }
                        EntropyLabelNegotiatePrimaryOnly entropy_label_negotiate_primary_only = 7 [json_name = "entropy-label-negotiate-primary-only"];
                        message Outbound {
                           message FecPeerAll {
                              enum FecPolicyMode {
                                 INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                 FecPolicyMode_HOST = 1;
                                 FecPolicyMode_NONE = 2;
                                 FecPolicyMode_IPX_PREFIX = 3;
                              };
                              FecPolicyMode fec_policy_mode = 1 [json_name = "fec-policy-mode"];
                              string fec_ip_prefix_name = 2 [json_name = "fec-ip-prefix-name"];
                           }
                           FecPeerAll fec_peer_all = 1 [json_name = "fec-peer-all"];
                           message BgpPeerAll {
                              enum BgpPolicyMode {
                                 INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                 BgpPolicyMode_NONE = 2;
                                 BgpPolicyMode_IPX_PREFIX = 3;
                              };
                              BgpPolicyMode bgp_policy_mode = 1 [json_name = "bgp-policy-mode"];
                              string bgp_ip_prefix_name = 2 [json_name = "bgp-ip-prefix-name"];
                           }
                           BgpPeerAll bgp_peer_all = 2 [json_name = "bgp-peer-all"];
                           message FecPeerGroups {
                              message FecPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeerGroup fec_peer_group = 1 [json_name = "fec-peer-group"];
                           }
                           FecPeerGroups fec_peer_groups = 3 [json_name = "fec-peer-groups"];
                           message BgpPeerGroups {
                              message BgpPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum BgpPolicyMode {
                                    INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                    BgpPolicyMode_NONE = 2;
                                    BgpPolicyMode_IPX_PREFIX = 3;
                                 };
                                 BgpPolicyMode bgp_policy_mode = 2 [json_name = "bgp-policy-mode"];
                                 string bgp_ip_prefix_name = 3 [json_name = "bgp-ip-prefix-name"];
                              }
                              repeated BgpPeerGroup bgp_peer_group = 1 [json_name = "bgp-peer-group"];
                           }
                           BgpPeerGroups bgp_peer_groups = 4 [json_name = "bgp-peer-groups"];
                           message FecPeers {
                              message FecPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeer fec_peer = 1 [json_name = "fec-peer"];
                           }
                           FecPeers fec_peers = 5 [json_name = "fec-peers"];
                           message BgpPeers {
                              message BgpPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum BgpPolicyMode {
                                    INVALID_ENUM_VALUE_BgpPolicyMode = 0;
                                    BgpPolicyMode_NONE = 2;
                                    BgpPolicyMode_IPX_PREFIX = 3;
                                 };
                                 BgpPolicyMode bgp_policy_mode = 2 [json_name = "bgp-policy-mode"];
                                 string bgp_ip_prefix_name = 3 [json_name = "bgp-ip-prefix-name"];
                              }
                              repeated BgpPeer bgp_peer = 1 [json_name = "bgp-peer"];
                           }
                           BgpPeers bgp_peers = 6 [json_name = "bgp-peers"];
                        }
                        Outbound outbound = 8 [json_name = "outbound"];
                        message Inbound {
                           message FecPeerAll {
                              enum FecPolicyMode {
                                 INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                 FecPolicyMode_HOST = 1;
                                 FecPolicyMode_NONE = 2;
                                 FecPolicyMode_IPX_PREFIX = 3;
                              };
                              FecPolicyMode fec_policy_mode = 1 [json_name = "fec-policy-mode"];
                              string fec_ip_prefix_name = 2 [json_name = "fec-ip-prefix-name"];
                           }
                           FecPeerAll fec_peer_all = 1 [json_name = "fec-peer-all"];
                           message FecPeerGroups {
                              message FecPeerGroup {
                                 string peer_group_name = 1 [json_name = "peer-group-name"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeerGroup fec_peer_group = 1 [json_name = "fec-peer-group"];
                           }
                           FecPeerGroups fec_peer_groups = 2 [json_name = "fec-peer-groups"];
                           message FecPeers {
                              message FecPeer {
                                 string peer_id = 1 [json_name = "peer-id"];
                                 enum FecPolicyMode {
                                    INVALID_ENUM_VALUE_FecPolicyMode = 0;
                                    FecPolicyMode_HOST = 1;
                                    FecPolicyMode_NONE = 2;
                                    FecPolicyMode_IPX_PREFIX = 3;
                                 };
                                 FecPolicyMode fec_policy_mode = 2 [json_name = "fec-policy-mode"];
                                 string fec_ip_prefix_name = 3 [json_name = "fec-ip-prefix-name"];
                              }
                              repeated FecPeer fec_peer = 1 [json_name = "fec-peer"];
                           }
                           FecPeers fec_peers = 3 [json_name = "fec-peers"];
                        }
                        Inbound inbound = 9 [json_name = "inbound"];
                        message LspEngressPolicy {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ALL = 1;
                              Mode_HOST = 2;
                              Mode_IPX_PREFIX = 4;
                              Mode_NONE = 8;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                        }
                        LspEngressPolicy lsp_engress_policy = 10 [json_name = "lsp-engress-policy"];
                        message LspTriggerPolicy {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ALL = 1;
                              Mode_HOST = 2;
                              Mode_IPX_PREFIX = 4;
                              Mode_NONE = 8;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string ip_prefix_name = 2 [json_name = "ip-prefix-name"];
                        }
                        LspTriggerPolicy lsp_trigger_policy = 11 [json_name = "lsp-trigger-policy"];
                     }
                     repeated TopologyInstance topology_instance = 1 [json_name = "topology-instance"];
                  }
                  TopologyInstances topology_instances = 23 [json_name = "topology-instances"];
                  message Adjacencys {
                     message Adjacency {
                        string peer_id = 1 [json_name = "peer-id"];
                        string type = 2 [json_name = "type"];
                        string src_address = 3 [json_name = "src-address"];
                        string create_date = 4 [json_name = "create-date"];
                        string create_time = 5 [json_name = "create-time"];
                        string age_time = 6 [json_name = "age-time"];
                        string discovery_source_name = 7 [json_name = "discovery-source-name"];
                        uint32 udp_socket_id = 8 [json_name = "udp-socket-id"];
                        uint32 cfg_hello_hold_time = 9 [json_name = "cfg-hello-hold-time"];
                        uint32 sequence_no = 10 [json_name = "sequence-no"];
                        uint32 received_hello = 11 [json_name = "received-hello"];
                        string crc_error_rate = 12 [json_name = "crc-error-rate"];
                     }
                     repeated Adjacency adjacency = 1 [json_name = "adjacency"];
                  }
                  Adjacencys adjacencys = 24 [json_name = "adjacencys"];
                  message PeerInfos {
                     message PeerInfo {
                        string lsr_id = 1 [json_name = "lsr-id"];
                        enum LabelAdvertiseMode {
                           LabelAdvertiseMode_DU = 0;
                           LabelAdvertiseMode_DOD = 1;
                           LabelAdvertiseMode_UNAVAILABLE = 2;
                        };
                        LabelAdvertiseMode label_advertise_mode = 2 [json_name = "label-advertise-mode"];
                        uint32 max_pdu_len = 3 [json_name = "max-pdu-len"];
                        bool loop_detect = 4 [json_name = "loop-detect"];
                        bool support_ft_flag = 5 [json_name = "support-ft-flag"];
                        string transport_address = 6 [json_name = "transport-address"];
                        uint32 path_vector_limit = 7 [json_name = "path-vector-limit"];
                        uint32 keep_alive_send_time = 8 [json_name = "keep-alive-send-time"];
                        uint32 recovery_timer = 9 [json_name = "recovery-timer"];
                        uint32 reconnect_timer = 10 [json_name = "reconnect-timer"];
                        bool announcement_capability = 11 [json_name = "announcement-capability"];
                        bool mldp_p2mp_capability = 12 [json_name = "mldp-p2mp-capability"];
                        bool mldp_mbb_capability = 13 [json_name = "mldp-mbb-capability"];
                        repeated string discovery_source = 14 [json_name = "discovery-source"];
                        bool iccp_capability = 15 [json_name = "iccp-capability"];
                     }
                     repeated PeerInfo peer_info = 1 [json_name = "peer-info"];
                  }
                  PeerInfos peer_infos = 25 [json_name = "peer-infos"];
                  message Sessions {
                     message Session {
                        string peer_lsr_id = 1 [json_name = "peer-lsr-id"];
                        string local_lsr_id = 2 [json_name = "local-lsr-id"];
                        string tcp_source_address = 3 [json_name = "tcp-source-address"];
                        string tcp_dest_address = 4 [json_name = "tcp-dest-address"];
                        enum State {
                           State_NONX_EXISTENT = 0;
                           State_INITIALIZED = 1;
                           State_OPENREC = 2;
                           State_OPENSENT = 3;
                           State_OPERATIONAL = 4;
                        };
                        State state = 5 [json_name = "state"];
                        enum Role {
                           Role_ACTIVE = 0;
                           Role_PASSIVE = 1;
                        };
                        Role role = 6 [json_name = "role"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_LOCAL = 1;
                           Type_REMOTE = 2;
                           Type_LOCALX_REMOTE = 3;
                        };
                        Type type = 7 [json_name = "type"];
                        uint32 negotiate_keep_alive_hold_time = 8 [json_name = "negotiate-keep-alive-hold-time"];
                        uint32 keep_alive_sent = 9 [json_name = "keep-alive-sent"];
                        uint32 keep_alive_received = 10 [json_name = "keep-alive-received"];
                        enum DistributeMode {
                           DistributeMode_DU = 0;
                           DistributeMode_DOD = 1;
                           DistributeMode_UNAVAILABLE = 2;
                        };
                        DistributeMode distribute_mode = 11 [json_name = "distribute-mode"];
                        enum PeerLabelState {
                           PeerLabelState_AVAILABLE = 0;
                           PeerLabelState_UNAVAILABLE = 1;
                        };
                        PeerLabelState peer_label_state = 12 [json_name = "peer-label-state"];
                        bool ft_flag = 13 [json_name = "ft-flag"];
                        bool md5_flag = 14 [json_name = "md5-flag"];
                        uint32 reconnect_time = 15 [json_name = "reconnect-time"];
                        uint32 recovery_time = 16 [json_name = "recovery-time"];
                        string age = 17 [json_name = "age"];
                        bool announcement_capability = 18 [json_name = "announcement-capability"];
                        bool mldp_p2mp_capability = 19 [json_name = "mldp-p2mp-capability"];
                        bool mldp_mbb_capability = 20 [json_name = "mldp-mbb-capability"];
                        uint32 msg_count_in_last_period = 21 [json_name = "msg-count-in-last-period"];
                        uint32 over_run_period_count = 22 [json_name = "over-run-period-count"];
                        bool iccp_capability = 23 [json_name = "iccp-capability"];
                     }
                     repeated Session session = 1 [json_name = "session"];
                  }
                  Sessions sessions = 26 [json_name = "sessions"];
                  message Lsps {
                     message Lsp {
                        string address = 1 [json_name = "address"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        uint32 index = 3 [json_name = "index"];
                        enum Type {
                           Type_INGRESS = 0;
                           Type_TRANSIT = 1;
                           Type_EGRESS = 2;
                           Type_INGRESSX_TRANSIT = 3;
                           Type_BUD = 4;
                        };
                        Type type = 4 [json_name = "type"];
                        string out_interface_name = 5 [json_name = "out-interface-name"];
                        string next_hop = 6 [json_name = "next-hop"];
                        bool is_frr_lsp = 7 [json_name = "is-frr-lsp"];
                        bool is_rlfa_lsp = 8 [json_name = "is-rlfa-lsp"];
                        bool is_tilfa_lsp = 9 [json_name = "is-tilfa-lsp"];
                        uint32 mtu = 10 [json_name = "mtu"];
                        uint32 time_stamp = 11 [json_name = "time-stamp"];
                        uint32 in_label = 12 [json_name = "in-label"];
                        uint32 out_label = 13 [json_name = "out-label"];
                        string entropy_label_capability = 14 [json_name = "entropy-label-capability"];
                     }
                     repeated Lsp lsp = 1 [json_name = "lsp"];
                  }
                  Lsps lsps = 27 [json_name = "lsps"];
                  message Fecs {
                     message Fec {
                        string address = 1 [json_name = "address"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        string out_interface_name = 3 [json_name = "out-interface-name"];
                        string next_hop = 4 [json_name = "next-hop"];
                        enum RouteType {
                           RouteType_UNKNOWN = 0;
                           RouteType_IGP = 1;
                           RouteType_EGP = 2;
                           RouteType_RLFA = 5;
                        };
                        RouteType route_type = 5 [json_name = "route-type"];
                        enum State {
                           State_IDLE = 0;
                           State_SETTINGX_UP = 1;
                           State_UP = 2;
                        };
                        State state = 6 [json_name = "state"];
                        uint32 lsp = 7 [json_name = "lsp"];
                     }
                     repeated Fec fec = 1 [json_name = "fec"];
                  }
                  Fecs fecs = 28 [json_name = "fecs"];
                  message Flows {
                     message Flow {
                        string ipv4_dest_address = 1 [json_name = "ipv4-dest-address"];
                        uint32 ipv4_masklen = 2 [json_name = "ipv4-masklen"];
                        string out_interface_name = 3 [json_name = "out-interface-name"];
                        string next_hop = 4 [json_name = "next-hop"];
                        enum LsrType {
                           LsrType_INGRESS = 0;
                           LsrType_TRANSIT = 1;
                           LsrType_EGRESS = 2;
                           LsrType_INGRESSX_TRANSIT = 3;
                           LsrType_BUD = 4;
                        };
                        LsrType lsr_type = 5 [json_name = "lsr-type"];
                        uint32 in_label = 6 [json_name = "in-label"];
                        uint32 out_label = 7 [json_name = "out-label"];
                        uint32 flow_period = 8 [json_name = "flow-period"];
                        uint64 last_period_byte_rate = 9 [json_name = "last-period-byte-rate"];
                        uint64 last_period_packet_rate = 10 [json_name = "last-period-packet-rate"];
                        uint64 display_interval = 11 [json_name = "display-interval"];
                        uint64 interval_byte_rate = 12 [json_name = "interval-byte-rate"];
                        uint64 interval_packet_rate = 13 [json_name = "interval-packet-rate"];
                        uint64 total_byte = 14 [json_name = "total-byte"];
                        uint64 total_packet = 15 [json_name = "total-packet"];
                     }
                     repeated Flow flow = 1 [json_name = "flow"];
                  }
                  Flows flows = 29 [json_name = "flows"];
                  message AutoConfigInterfaces {
                     message AutoConfigInterface {
                        string name = 1 [json_name = "name"];
                        enum State {
                           State_ACTIVE = 0;
                           State_INACTIVE = 1;
                        };
                        State state = 2 [json_name = "state"];
                        uint32 negotiated_hello_hold_time = 3 [json_name = "negotiated-hello-hold-time"];
                        enum AutoTriggerType {
                           AutoTriggerType_DEFAULT = 0;
                           AutoTriggerType_ISIS = 1;
                           AutoTriggerType_OSPF = 2;
                           AutoTriggerType_ISISX_OSPF = 3;
                        };
                        AutoTriggerType auto_trigger_type = 4 [json_name = "auto-trigger-type"];
                     }
                     repeated AutoConfigInterface auto_config_interface = 1 [json_name = "auto-config-interface"];
                  }
                  AutoConfigInterfaces auto_config_interfaces = 30 [json_name = "auto-config-interfaces"];
                  message AutoConfigRemotePeers {
                     message AutoConfigRemotePeer {
                        string remote_ip = 1 [json_name = "remote-ip"];
                        string remote_peer_name = 2 [json_name = "remote-peer-name"];
                        enum PeerState {
                           PeerState_ACTIVE = 0;
                           PeerState_INACTIVE = 1;
                        };
                        PeerState peer_state = 3 [json_name = "peer-state"];
                        uint32 negotiated_hello_hold_time = 4 [json_name = "negotiated-hello-hold-time"];
                        message AutoConfigType {
                           enum L2Vpn {
                              L2Vpn_DEFAULT = 0;
                              L2Vpn_L2VPN = 1;
                           };
                           L2Vpn l2vpn = 1 [json_name = "l2vpn"];
                           enum SessionProtection {
                              SessionProtection_DEFAULT = 0;
                              SessionProtection_SESSIONX_PROTECT = 1;
                           };
                           SessionProtection session_protection = 2 [json_name = "session-protection"];
                           enum Rlfa {
                              Rlfa_DEFAULT = 0;
                              Rlfa_RLFA = 1;
                           };
                           Rlfa rlfa = 3 [json_name = "rlfa"];
                           enum AutoAcceptFunction {
                              AutoAcceptFunction_DEFAULT = 0;
                              AutoAcceptFunction_AUTOX_ACCEPT = 1;
                           };
                           AutoAcceptFunction auto_accept_function = 4 [json_name = "auto-accept-function"];
                        }
                        AutoConfigType auto_config_type = 5 [json_name = "auto-config-type"];
                     }
                     repeated AutoConfigRemotePeer auto_config_remote_peer = 1 [json_name = "auto-config-remote-peer"];
                  }
                  AutoConfigRemotePeers auto_config_remote_peers = 31 [json_name = "auto-config-remote-peers"];
                  message InstanceStatus {
                     enum LabelDistMode {
                        LabelDistMode_DUDOD = 0;
                        LabelDistMode_DU = 1;
                     };
                     LabelDistMode label_dist_mode = 1 [json_name = "label-dist-mode"];
                     enum LabelRetentionMode {
                        LabelRetentionMode_LIBERALX_CONSERVATIVE = 0;
                        LabelRetentionMode_LIBERAL = 1;
                     };
                     LabelRetentionMode label_retention_mode = 2 [json_name = "label-retention-mode"];
                     uint32 lsp_number = 3 [json_name = "lsp-number"];
                     uint32 session_number = 4 [json_name = "session-number"];
                     uint32 adjacency_number = 5 [json_name = "adjacency-number"];
                     uint32 interface_number = 6 [json_name = "interface-number"];
                     uint32 fec_number = 7 [json_name = "fec-number"];
                  }
                  InstanceStatus instance_status = 32 [json_name = "instance-status"];
                  message UdpAuthPeers {
                     message UdpAuthPeer {
                        string id = 1 [json_name = "id"];
                        string keychain_name = 2 [json_name = "keychain-name"];
                     }
                     repeated UdpAuthPeer udp_auth_peer = 1 [json_name = "udp-auth-peer"];
                  }
                  UdpAuthPeers udp_auth_peers = 33 [json_name = "udp-auth-peers"];
               }
               Instance6 instance6 = 1 [json_name = "instance"];
            }
            Ldp ldp = 2 [json_name = "ldp"];
            message Te {
               message RsvpInterfaces {
                  message RsvpInterface {
                     string name = 1 [json_name = "name"];
                     bool hello_enable = 2 [json_name = "hello-enable"];
                     bool graceful_shutdown_enable = 3 [json_name = "graceful-shutdown-enable"];
                     bool srefresh_compatible_enable = 4 [json_name = "srefresh-compatible-enable"];
                     message Authentication {
                        bool enable = 1 [json_name = "enable"];
                        enum Type {
                           Type_MD5 = 0;
                           Type_MD5X_PLAIN = 1;
                           Type_KEYCHAIN = 2;
                        };
                        Type type = 2 [json_name = "type"];
                        string keychain_name = 3 [json_name = "keychain-name"];
                        string md5_key = 4 [json_name = "md5-key"];
                        uint32 life_time = 5 [json_name = "life-time"];
                        bool handshake_enable = 6 [json_name = "handshake-enable"];
                        uint32 window_size = 7 [json_name = "window-size"];
                     }
                     Authentication authentication = 5 [json_name = "authentication"];
                     message Bfd {
                        enum Ability {
                           INVALID_ENUM_VALUE_Ability = 0;
                           Ability_ENABLE = 1;
                           Ability_BLOCK = 2;
                        };
                        Ability ability = 1 [json_name = "ability"];
                        uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                        uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
                        uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                        bool set_bfd_pst = 5 [json_name = "set-bfd-pst"];
                        uint32 tos_exp = 6 [json_name = "tos-exp"];
                     }
                     Bfd bfd = 6 [json_name = "bfd"];
                     enum AutoFrrMode {
                        AutoFrrMode_DEFAULT = 0;
                        AutoFrrMode_LINK = 1;
                        AutoFrrMode_NODE = 2;
                        AutoFrrMode_SELFX_ADAPTING = 3;
                        AutoFrrMode_DISABLE = 4;
                     };
                     AutoFrrMode auto_frr_mode = 7 [json_name = "auto-frr-mode"];
                     message Statistics {
                        uint32 psb_count = 1 [json_name = "psb-count"];
                        uint32 rsb_count = 2 [json_name = "rsb-count"];
                        uint32 psb_cleanup_timeout_count = 3 [json_name = "psb-cleanup-timeout-count"];
                        uint32 rsb_cleanup_timeout_count = 4 [json_name = "rsb-cleanup-timeout-count"];
                        uint32 send_packet_count = 5 [json_name = "send-packet-count"];
                        uint32 receive_packet_count = 6 [json_name = "receive-packet-count"];
                        uint32 send_path_count = 7 [json_name = "send-path-count"];
                        uint32 receive_path_count = 8 [json_name = "receive-path-count"];
                        uint32 send_refresh_path_count = 9 [json_name = "send-refresh-path-count"];
                        uint32 receive_refresh_path_count = 10 [json_name = "receive-refresh-path-count"];
                        uint32 send_resv_count = 11 [json_name = "send-resv-count"];
                        uint32 receive_resv_count = 12 [json_name = "receive-resv-count"];
                        uint32 send_refresh_resv_count = 13 [json_name = "send-refresh-resv-count"];
                        uint32 receive_refresh_resv_count = 14 [json_name = "receive-refresh-resv-count"];
                        uint32 send_resv_conf_count = 15 [json_name = "send-resv-conf-count"];
                        uint32 receive_resv_conf_count = 16 [json_name = "receive-resv-conf-count"];
                        uint32 send_hello_count = 17 [json_name = "send-hello-count"];
                        uint32 receive_hello_count = 18 [json_name = "receive-hello-count"];
                        uint32 send_ack_count = 19 [json_name = "send-ack-count"];
                        uint32 receive_ack_count = 20 [json_name = "receive-ack-count"];
                        uint32 send_path_error_count = 21 [json_name = "send-path-error-count"];
                        uint32 receive_path_error_count = 22 [json_name = "receive-path-error-count"];
                        uint32 send_resv_error_count = 23 [json_name = "send-resv-error-count"];
                        uint32 receive_resv_error_count = 24 [json_name = "receive-resv-error-count"];
                        uint32 send_path_tear_count = 25 [json_name = "send-path-tear-count"];
                        uint32 receive_path_tear_count = 26 [json_name = "receive-path-tear-count"];
                        uint32 send_resv_tear_count = 27 [json_name = "send-resv-tear-count"];
                        uint32 receive_resv_tear_count = 28 [json_name = "receive-resv-tear-count"];
                        uint32 send_srefresh_count = 29 [json_name = "send-srefresh-count"];
                        uint32 receive_srefresh_count = 30 [json_name = "receive-srefresh-count"];
                        uint32 send_ack_msg_count = 31 [json_name = "send-ack-msg-count"];
                        uint32 receive_ack_msg_count = 32 [json_name = "receive-ack-msg-count"];
                        uint32 send_challenge_msg_count = 33 [json_name = "send-challenge-msg-count"];
                        uint32 receive_challenge_msg_count = 34 [json_name = "receive-challenge-msg-count"];
                        uint32 send_response_msg_count = 35 [json_name = "send-response-msg-count"];
                        uint32 receive_response_msg_count = 36 [json_name = "receive-response-msg-count"];
                        uint32 send_error_msg_count = 37 [json_name = "send-error-msg-count"];
                        uint32 receive_error_msg_count = 38 [json_name = "receive-error-msg-count"];
                        uint32 send_recovery_path_msg_count = 39 [json_name = "send-recovery-path-msg-count"];
                        uint32 receive_recovery_path_msg_count = 40 [json_name = "receive-recovery-path-msg-count"];
                        uint32 send_gr_path_msg_count = 41 [json_name = "send-gr-path-msg-count"];
                        uint32 receive_gr_path_msg_count = 42 [json_name = "receive-gr-path-msg-count"];
                        uint32 send_notify_msg_count = 43 [json_name = "send-notify-msg-count"];
                        uint32 receive_notify_msg_count = 44 [json_name = "receive-notify-msg-count"];
                        uint32 resource_fault_count = 45 [json_name = "resource-fault-count"];
                        uint32 neighbor_count = 46 [json_name = "neighbor-count"];
                        uint32 bfd_session_count = 47 [json_name = "bfd-session-count"];
                        uint32 retransmit_packet_count = 48 [json_name = "retransmit-packet-count"];
                        uint32 response_packet_count = 49 [json_name = "response-packet-count"];
                        uint32 retransmit_path_count = 50 [json_name = "retransmit-path-count"];
                        uint32 response_path_count = 51 [json_name = "response-path-count"];
                        uint32 retransmit_resv_count = 52 [json_name = "retransmit-resv-count"];
                        uint32 response_resv_count = 53 [json_name = "response-resv-count"];
                        uint32 retransmit_resv_conf_count = 54 [json_name = "retransmit-resv-conf-count"];
                        uint32 response_resv_conf_count = 55 [json_name = "response-resv-conf-count"];
                        uint32 retransmit_path_error_count = 56 [json_name = "retransmit-path-error-count"];
                        uint32 response_path_error_count = 57 [json_name = "response-path-error-count"];
                        uint32 retransmit_resv_error_count = 58 [json_name = "retransmit-resv-error-count"];
                        uint32 response_resv_error_count = 59 [json_name = "response-resv-error-count"];
                        uint32 retransmit_path_tear_count = 60 [json_name = "retransmit-path-tear-count"];
                        uint32 response_path_tear_count = 61 [json_name = "response-path-tear-count"];
                        uint32 retransmit_resv_tear_count = 62 [json_name = "retransmit-resv-tear-count"];
                        uint32 response_resv_tear_count = 63 [json_name = "response-resv-tear-count"];
                        uint32 retransmit_srefresh_count = 64 [json_name = "retransmit-srefresh-count"];
                        uint32 response_srefresh_count = 65 [json_name = "response-srefresh-count"];
                        uint32 retransmit_recovery_path_msg_count = 66 [json_name = "retransmit-recovery-path-msg-count"];
                        uint32 response_recovery_path_msg_count = 67 [json_name = "response-recovery-path-msg-count"];
                        uint32 retransmit_gr_path_msg_count = 68 [json_name = "retransmit-gr-path-msg-count"];
                        uint32 response_gr_path_msg_count = 69 [json_name = "response-gr-path-msg-count"];
                        uint32 retransmit_notify_msg_count = 70 [json_name = "retransmit-notify-msg-count"];
                        uint32 response_notify_msg_count = 71 [json_name = "response-notify-msg-count"];
                     }
                     Statistics statistics = 8 [json_name = "statistics"];
                     string distribute_inst_name = 9 [json_name = "distribute-inst-name"];
                  }
                  repeated RsvpInterface rsvp_interface = 1 [json_name = "rsvp-interface"];
               }
               RsvpInterfaces rsvp_interfaces = 1 [json_name = "rsvp-interfaces"];
               message RsvpLoopbacks {
                  message RsvpLoopback {
                     string name = 1 [json_name = "name"];
                     string address = 2 [json_name = "address"];
                     enum SubscribeStatus {
                        SubscribeStatus_IDLE = 0;
                        SubscribeStatus_SUBSCRIBING = 1;
                        SubscribeStatus_SUBSCRIBEX_OK = 2;
                        SubscribeStatus_UNSUBSCRIBE = 3;
                        SubscribeStatus_CREATEX_OK = 4;
                     };
                     SubscribeStatus subscribe_status = 3 [json_name = "subscribe-status"];
                  }
                  repeated RsvpLoopback rsvp_loopback = 1 [json_name = "rsvp-loopback"];
               }
               RsvpLoopbacks rsvp_loopbacks = 2 [json_name = "rsvp-loopbacks"];
            }
            Te te = 3 [json_name = "te"];
            message BgpMplsLsp {
               message Bfd {
                  message Parameters {
                     bool enable = 1 [json_name = "enable"];
                     uint32 min_tx_interval = 2 [json_name = "min-tx-interval"];
                     uint32 min_rx_interval = 3 [json_name = "min-rx-interval"];
                     uint32 detection_multiplier = 4 [json_name = "detection-multiplier"];
                     enum Trigger {
                        Trigger_NONE = 0;
                        Trigger_HOST = 1;
                        Trigger_IPX_PREFIX = 2;
                     };
                     Trigger trigger = 5 [json_name = "trigger"];
                     string trigger_ip_prefix_name = 6 [json_name = "trigger-ip-prefix-name"];
                  }
                  Parameters parameters = 1 [json_name = "parameters"];
               }
               Bfd bfd = 1 [json_name = "bfd"];
               message BgpTtlMode {
                  enum TtlMode {
                     INVALID_ENUM_VALUE_TtlMode = 0;
                     TtlMode_UNIFORM = 1;
                     TtlMode_PIPE = 2;
                  };
                  TtlMode ttl_mode = 1 [json_name = "ttl-mode"];
               }
               BgpTtlMode bgp_ttl_mode = 2 [json_name = "bgp-ttl-mode"];
            }
            BgpMplsLsp bgp_mpls_lsp = 4 [json_name = "bgp-mpls-lsp"];
         }
         Mpls mpls = 5 [json_name = "mpls"];
         message Multicast {
            message Ipv4 {
               message Global {
                  bool longest_match = 1 [json_name = "longest-match"];
                  enum LoadSplitting {
                     LoadSplitting_NONE = 0;
                     LoadSplitting_SOURCE = 1;
                     LoadSplitting_GROUP = 2;
                     LoadSplitting_SOURCEX_GROUP = 3;
                     LoadSplitting_BALANCE = 4;
                     LoadSplitting_BALANCEX_UCMP = 5;
                  };
                  LoadSplitting load_splitting = 2 [json_name = "load-splitting"];
                  bool cpu_fwd_disable = 3 [json_name = "cpu-fwd-disable"];
                  bool recursive_lookup_local_mt_enable = 4 [json_name = "recursive-lookup-local-mt-enable"];
               }
               Global global = 1 [json_name = "global"];
               message RpfMultiTopology {
                  message TopologyRuleList {
                     repeated string name = 1 [json_name = "name"];
                  }
                  TopologyRuleList topology_rule_list = 1 [json_name = "topology-rule-list"];
               }
               RpfMultiTopology rpf_multi_topology = 2 [json_name = "rpf-multi-topology"];
               message InterfaceMinTtls {
                  message InterfaceMinTtl {
                     string name = 1 [json_name = "name"];
                     uint32 minimum_ttl = 2 [json_name = "minimum-ttl"];
                  }
                  repeated InterfaceMinTtl interface_min_ttl = 1 [json_name = "interface-min-ttl"];
               }
               InterfaceMinTtls interface_min_ttls = 3 [json_name = "interface-min-ttls"];
               message InterfaceTrackVrrps {
                  message InterfaceTrackVrrp {
                     string name = 1 [json_name = "name"];
                     uint32 vrrp_id = 2 [json_name = "vrrp-id"];
                     bool is_admin = 3 [json_name = "is-admin"];
                     string track_interface = 4 [json_name = "track-interface"];
                  }
                  repeated InterfaceTrackVrrp interface_track_vrrp = 1 [json_name = "interface-track-vrrp"];
               }
               InterfaceTrackVrrps interface_track_vrrps = 4 [json_name = "interface-track-vrrps"];
               message InterfaceBoundarys {
                  message InterfaceBoundary {
                     string name = 1 [json_name = "name"];
                     string group_address = 2 [json_name = "group-address"];
                     uint32 mask_length = 3 [json_name = "mask-length"];
                  }
                  repeated InterfaceBoundary interface_boundary = 1 [json_name = "interface-boundary"];
               }
               InterfaceBoundarys interface_boundarys = 5 [json_name = "interface-boundarys"];
               message Limits {
                  message Limit {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_PIMX_SMX_STARX_GROUP = 1;
                        Type_PIMX_SMX_SOURCEX_GROUP = 2;
                        Type_PIMX_DMX_STARX_GROUP = 3;
                        Type_PIMX_DMX_SOURCEX_GROUP = 4;
                        Type_BIDIRX_PIMX_STARX_GROUP = 5;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 value = 2 [json_name = "value"];
                     uint32 upper_threshold = 3 [json_name = "upper-threshold"];
                     uint32 lower_threshold = 4 [json_name = "lower-threshold"];
                     uint32 current_count = 5 [json_name = "current-count"];
                  }
                  repeated Limit limit = 1 [json_name = "limit"];
               }
               Limits limits = 6 [json_name = "limits"];
            }
            Ipv4 ipv4 = 1 [json_name = "ipv4"];
            message Ipv6 {
               message Global {
                  enum LoadSplitting {
                     LoadSplitting_NONE = 0;
                     LoadSplitting_SOURCE = 1;
                     LoadSplitting_GROUP = 2;
                     LoadSplitting_SOURCEX_GROUP = 3;
                     LoadSplitting_BALANCE = 4;
                     LoadSplitting_BALANCEX_UCMP = 5;
                  };
                  LoadSplitting load_splitting = 1 [json_name = "load-splitting"];
                  bool cpu_fwd_disable = 2 [json_name = "cpu-fwd-disable"];
               }
               Global global = 1 [json_name = "global"];
               message RpfMultiTopology {
                  message TopologyRuleList {
                     repeated string name = 1 [json_name = "name"];
                  }
                  TopologyRuleList topology_rule_list = 1 [json_name = "topology-rule-list"];
               }
               RpfMultiTopology rpf_multi_topology = 2 [json_name = "rpf-multi-topology"];
               message InterfaceMinTtls {
                  message InterfaceMinTtl {
                     string name = 1 [json_name = "name"];
                     uint32 minimum_ttl = 2 [json_name = "minimum-ttl"];
                  }
                  repeated InterfaceMinTtl interface_min_ttl = 1 [json_name = "interface-min-ttl"];
               }
               InterfaceMinTtls interface_min_ttls = 3 [json_name = "interface-min-ttls"];
               message InterfaceBoundarys {
                  message InterfaceBoundary {
                     string name = 1 [json_name = "name"];
                     string group_address = 2 [json_name = "group-address"];
                     uint32 mask_length = 3 [json_name = "mask-length"];
                  }
                  repeated InterfaceBoundary interface_boundary = 1 [json_name = "interface-boundary"];
               }
               InterfaceBoundarys interface_boundarys = 4 [json_name = "interface-boundarys"];
               message Limits {
                  message Limit {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_PIMX_SMX_STARX_GROUP = 1;
                        Type_PIMX_SMX_SOURCEX_GROUP = 2;
                        Type_PIMX_DMX_STARX_GROUP = 3;
                        Type_PIMX_DMX_SOURCEX_GROUP = 4;
                        Type_BIDIRX_PIMX_STARX_GROUP = 5;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 value = 2 [json_name = "value"];
                     uint32 upper_threshold = 3 [json_name = "upper-threshold"];
                     uint32 lower_threshold = 4 [json_name = "lower-threshold"];
                     uint32 current_count = 5 [json_name = "current-count"];
                  }
                  repeated Limit limit = 1 [json_name = "limit"];
               }
               Limits limits = 5 [json_name = "limits"];
               message InterfaceTrackVrrps {
                  message InterfaceTrackVrrp {
                     string name = 1 [json_name = "name"];
                     uint32 vrrp_id = 2 [json_name = "vrrp-id"];
                     bool is_admin = 3 [json_name = "is-admin"];
                     string track_interface = 4 [json_name = "track-interface"];
                  }
                  repeated InterfaceTrackVrrp interface_track_vrrp = 1 [json_name = "interface-track-vrrp"];
               }
               InterfaceTrackVrrps interface_track_vrrps = 6 [json_name = "interface-track-vrrps"];
            }
            Ipv6 ipv6 = 2 [json_name = "ipv6"];
         }
         Multicast multicast = 6 [json_name = "multicast"];
         message Bgp {
            message BaseProcess {
               string router_id = 1 [json_name = "router-id"];
               message Afs {
                  message Af {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNI = 1;
                        Type_IPV4MULTI = 2;
                        Type_IPV4VPN = 3;
                        Type_IPV4LABELUNI = 4;
                        Type_IPV6UNI = 5;
                        Type_IPV6VPN = 6;
                        Type_IPV4FLOW = 7;
                        Type_L2VPNAD = 8;
                        Type_EVPN = 9;
                        Type_MVPN = 10;
                        Type_VPNTARGET = 11;
                        Type_IPV4VPNMCAST = 12;
                        Type_LS = 13;
                        Type_MDT = 14;
                        Type_IPV6FLOW = 15;
                        Type_MVPNV6 = 16;
                        Type_VPNV4FLOW = 17;
                        Type_VPNV6FLOW = 18;
                        Type_RPD = 19;
                        Type_IPV4SRPOLICY = 20;
                        Type_IPV6SRPOLICY = 21;
                        Type_IPV4SDWAN = 22;
                     };
                     Type type = 1 [json_name = "type"];
                     message Ipv4Unicast {
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_UNR = 11;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              uint32 med = 4 [json_name = "med"];
                              bool non_relay_tunnel = 5 [json_name = "non-relay-tunnel"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 1 [json_name = "import-routes"];
                        message AggregateRoutes {
                           message AggregateRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool as_set = 3 [json_name = "as-set"];
                              bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                              message PolicyType_RtpRef {
                                 string attribute_policy = 1 [json_name = "attribute-policy"];
                                 string origin_policy = 2 [json_name = "origin-policy"];
                                 string suppress_policy = 3 [json_name = "suppress-policy"];
                              }
                              message PolicyType_XplRef {
                                 string attribute_filter_name = 1 [json_name = "attribute-filter-name"];
                                 string attribute_filter_parameter = 2 [json_name = "attribute-filter-parameter"];
                                 string origin_filter_name = 3 [json_name = "origin-filter-name"];
                                 string origin_filter_parameter = 4 [json_name = "origin-filter-parameter"];
                                 string suppress_filter_name = 5 [json_name = "suppress-filter-name"];
                                 string suppress_filter_parameter = 6 [json_name = "suppress-filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                        }
                        AggregateRoutes aggregate_routes = 2 [json_name = "aggregate-routes"];
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           string tunnel_selector_name = 2 [json_name = "tunnel-selector-name"];
                           uint32 route_select_delay = 3 [json_name = "route-select-delay"];
                           bool reflect_change_path = 5 [json_name = "reflect-change-path"];
                           uint32 maximum_load_balancing_ibgp = 6 [json_name = "maximum-load-balancing-ibgp"];
                           uint32 maximum_load_balancing_ebgp = 7 [json_name = "maximum-load-balancing-ebgp"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                           bool nexthop_resolve_aigp = 9 [json_name = "nexthop-resolve-aigp"];
                           bool always_compare_med = 10 [json_name = "always-compare-med"];
                           uint32 default_med = 11 [json_name = "default-med"];
                           bool summary_automatic = 12 [json_name = "summary-automatic"];
                           bool nexthop_third_party = 13 [json_name = "nexthop-third-party"];
                           bool best_route_bit_error_detection = 14 [json_name = "best-route-bit-error-detection"];
                           bool supernet_unicast_advertise = 15 [json_name = "supernet-unicast-advertise"];
                           bool supernet_label_advertise = 16 [json_name = "supernet-label-advertise"];
                           uint32 lsp_mtu = 17 [json_name = "lsp-mtu"];
                           uint32 label_free_delay = 18 [json_name = "label-free-delay"];
                           bool bestroute_med_confederation = 19 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 20 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 21 [json_name = "determin-med"];
                           bool best_external = 22 [json_name = "best-external"];
                           uint32 add_path_select_num = 23 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 24 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 25 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 26 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 27 [json_name = "default-local-preference"];
                           bool default_route_import = 28 [json_name = "default-route-import"];
                           bool routerid_neglect = 29 [json_name = "routerid-neglect"];
                           uint32 maximum_load_balancing = 30 [json_name = "maximum-load-balancing"];
                           bool nexthop_inherit_ip_cost = 31 [json_name = "nexthop-inherit-ip-cost"];
                           bool attribute_set_enable = 32 [json_name = "attribute-set-enable"];
                           enum AttributeSetMode {
                              INVALID_ENUM_VALUE_AttributeSetMode = 0;
                              AttributeSetMode_RECEIVE = 1;
                              AttributeSetMode_SEND = 2;
                              AttributeSetMode_BOTH = 3;
                           };
                           AttributeSetMode attribute_set_mode = 33 [json_name = "attribute-set-mode"];
                           bool reflect_between_client = 34 [json_name = "reflect-between-client"];
                           bool import_rib_nexthop_invariable = 35 [json_name = "import-rib-nexthop-invariable"];
                           bool route_relay_tunnel = 36 [json_name = "route-relay-tunnel"];
                           string route_relay_tunnel_selector = 37 [json_name = "route-relay-tunnel-selector"];
                           bool bestroute_med_plus_igp = 38 [json_name = "bestroute-med-plus-igp"];
                           uint32 bestroute_med_multiplier = 39 [json_name = "bestroute-med-multiplier"];
                           uint32 bestroute_igp_multiplier = 40 [json_name = "bestroute-igp-multiplier"];
                           bool bestroute_igp_metric_ignore = 41 [json_name = "bestroute-igp-metric-ignore"];
                           bool bestroute_router_id_prior_clusterlist = 42 [json_name = "bestroute-router-id-prior-clusterlist"];
                           bool bestroute_med_none_as_maximum = 43 [json_name = "bestroute-med-none-as-maximum"];
                           bool ebgp_ecmp_nexthop_changed = 44 [json_name = "ebgp-ecmp-nexthop-changed"];
                           bool ibgp_ecmp_nexthop_changed = 45 [json_name = "ibgp-ecmp-nexthop-changed"];
                           bool ecmp_nexthop_changed = 46 [json_name = "ecmp-nexthop-changed"];
                           uint32 maximum_load_balancing_eibgp = 47 [json_name = "maximum-load-balancing-eibgp"];
                           bool eibgp_ecmp_nexthop_changed = 48 [json_name = "eibgp-ecmp-nexthop-changed"];
                           bool load_balancing_eibgp_enable = 49 [json_name = "load-balancing-eibgp-enable"];
                           bool ext_community_change = 50 [json_name = "ext-community-change"];
                           bool active_route_advertise = 51 [json_name = "active-route-advertise"];
                           enum NexthopPriority {
                              INVALID_ENUM_VALUE_NexthopPriority = 0;
                              NexthopPriority_IPV4 = 1;
                              NexthopPriority_IPV6 = 2;
                           };
                           NexthopPriority nexthop_priority = 52 [json_name = "nexthop-priority"];
                           bool tunnel_selector_all = 53 [json_name = "tunnel-selector-all"];
                           string route_relay_tunnel_v6_selector = 54 [json_name = "route-relay-tunnel-v6-selector"];
                           bool bestroute_rd_large_first = 55 [json_name = "bestroute-rd-large-first"];
                           bool ebgp_interface_sensitive = 56 [json_name = "ebgp-interface-sensitive"];
                           bool prefix_origin_as_validation = 57 [json_name = "prefix-origin-as-validation"];
                           bool bestroute_origin_as_validation = 58 [json_name = "bestroute-origin-as-validation"];
                           bool bestroute_allow_invalid_as = 59 [json_name = "bestroute-allow-invalid-as"];
                           enum AdvertiseRouteMode {
                              AdvertiseRouteMode_ALL = 0;
                              AdvertiseRouteMode_BEST = 1;
                              AdvertiseRouteMode_VALID = 2;
                           };
                           AdvertiseRouteMode advertise_route_mode = 60 [json_name = "advertise-route-mode"];
                           bool reoriginate_route = 61 [json_name = "reoriginate-route"];
                           uint32 rpd_policy_change_delay = 62 [json_name = "rpd-policy-change-delay"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 63 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 64 [json_name = "id"];
                           }
                           bool load_balancing_ucmp = 65 [json_name = "load-balancing-ucmp"];
                           uint32 maximum_load_balancing_mixed = 66 [json_name = "maximum-load-balancing-mixed"];
                           bool load_balancing_local_learn_cross = 67 [json_name = "load-balancing-local-learn-cross"];
                           message BestrouteNexthopPriority_Enable {
                              enum NexthopPriority {
                                 INVALID_ENUM_VALUE_NexthopPriority = 0;
                                 NexthopPriority_IPV4 = 1;
                                 NexthopPriority_IPV6 = 2;
                              };
                              NexthopPriority nexthop_priority = 1 [json_name = "nexthop-priority"];
                              bool nexthop_priority_high_level = 2 [json_name = "nexthop-priority-high-level"];
                           }
                           message BestrouteNexthopPriority_Disable {
                              bool nexthop_priority_disable = 1 [json_name = "nexthop-priority-disable"];
                           }
                           oneof BestrouteNexthopPriority {
                              BestrouteNexthopPriority_Enable bestroute_nexthop_priority_enable = 68 [json_name = "enable"];
                              BestrouteNexthopPriority_Disable bestroute_nexthop_priority_disable = 69 [json_name = "disable"];
                           }
                           bool prefix_validation_source_all = 70 [json_name = "prefix-validation-source-all"];
                           bool original_attributes = 71 [json_name = "original-attributes"];
                        }
                        Common common = 3 [json_name = "common"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool non_relay_tunnel = 4 [json_name = "non-relay-tunnel"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                              }
                              uint32 label_index = 7 [json_name = "label-index"];
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 4 [json_name = "network-routes"];
                        message AdvertiseRouteToEvpns {
                           message AdvertiseRouteToEvpn {
                              enum Protocol {
                                 Protocol_ALL = 0;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              bool import_multipath = 2 [json_name = "import-multipath"];
                              enum AdvertiseRouteMode {
                                 AdvertiseRouteMode_ALL = 0;
                                 AdvertiseRouteMode_BEST = 1;
                                 AdvertiseRouteMode_VALID = 2;
                              };
                              AdvertiseRouteMode advertise_route_mode = 3 [json_name = "advertise-route-mode"];
                              bool include_local_cross = 4 [json_name = "include-local-cross"];
                           }
                           repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                        }
                        AdvertiseRouteToEvpns advertise_route_to_evpns = 5 [json_name = "advertise-route-to-evpns"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4UNI = 1;
                                 SourceAddressFamily_IPV4LABELUNI = 4;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 6 [json_name = "import-ribs"];
                        message LspOptions {
                           bool ingress_protect_mode_bgp_frr = 1 [json_name = "ingress-protect-mode-bgp-frr"];
                           uint32 maximum_load_balancing_ingress = 2 [json_name = "maximum-load-balancing-ingress"];
                           uint32 maximum_load_balancing_transit = 3 [json_name = "maximum-load-balancing-transit"];
                           bool unicast_rt_label_advertise = 4 [json_name = "unicast-rt-label-advertise"];
                           bool unicast_rt_label_advertise_popgo = 5 [json_name = "unicast-rt-label-advertise-popgo"];
                           enum LspOperation {
                              LspOperation_POP = 0;
                              LspOperation_POPX_GO = 1;
                           };
                           LspOperation lsp_operation = 6 [json_name = "lsp-operation"];
                           message IngressTriggerPolicy_TriggerRoutePolicyRef {
                              string trigger_route_policy = 1 [json_name = "trigger-route-policy"];
                           }
                           message IngressTriggerPolicy_TriggerXplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof IngressTriggerPolicy {
                              IngressTriggerPolicy_TriggerRoutePolicyRef ingress_trigger_policy_trigger_route_policy_ref = 7 [json_name = "trigger-route-policy-ref"];
                              IngressTriggerPolicy_TriggerXplRef ingress_trigger_policy_trigger_xpl_ref = 8 [json_name = "trigger-xpl-ref"];
                           }
                        }
                        LspOptions lsp_options = 7 [json_name = "lsp-options"];
                        message Preference {
                           message SetValueOrPolicy_SetValue {
                              uint32 external = 1 [json_name = "external"];
                              uint32 internal = 2 [json_name = "internal"];
                              uint32 local = 3 [json_name = "local"];
                           }
                           message SetValueOrPolicy_RtpRef {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message SetValueOrPolicy_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof SetValueOrPolicy {
                              SetValueOrPolicy_SetValue set_value_or_policy_set_value = 1 [json_name = "set-value"];
                              SetValueOrPolicy_RtpRef set_value_or_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                              SetValueOrPolicy_XplRef set_value_or_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        Preference preference = 8 [json_name = "preference"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              bool default_route = 2 [json_name = "default-route"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 9 [json_name = "nexthop-recursive-lookup"];
                        message AggregateDefaultRoute {
                           string origin_ip_prefix = 1 [json_name = "origin-ip-prefix"];
                           string attribute_policy = 2 [json_name = "attribute-policy"];
                        }
                        AggregateDefaultRoute aggregate_default_route = 10 [json_name = "aggregate-default-route"];
                        message ImportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 11 [json_name = "import-filter-policy"];
                        message ExportFilterPolicys {
                           message ExportFilterPolicy {
                              enum Protocol {
                                 Protocol_NOPROTOCOL = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message Ipv4FilterProtocolPolicyType_AclRef {
                                 string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                              }
                              message Ipv4FilterProtocolPolicyType_IpPrefixRef {
                                 string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                              }
                              message Ipv4FilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv4FilterProtocolPolicyType {
                                 Ipv4FilterProtocolPolicyType_AclRef ipv4_filter_protocol_policy_type_acl_ref = 3 [json_name = "acl-ref"];
                                 Ipv4FilterProtocolPolicyType_IpPrefixRef ipv4_filter_protocol_policy_type_ip_prefix_ref = 4 [json_name = "ip-prefix-ref"];
                                 Ipv4FilterProtocolPolicyType_XplRef ipv4_filter_protocol_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ExportFilterPolicy export_filter_policy = 1 [json_name = "export-filter-policy"];
                        }
                        ExportFilterPolicys export_filter_policys = 12 [json_name = "export-filter-policys"];
                        message SegmentRoutingIpv6 {
                           bool srv6_best_effort_enable = 1 [json_name = "srv6-best-effort-enable"];
                           bool srv6_traffic_engineer_enable = 2 [json_name = "srv6-traffic-engineer-enable"];
                        }
                        SegmentRoutingIpv6 segment_routing_ipv6 = 13 [json_name = "segment-routing-ipv6"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 14 [json_name = "dampening-routes"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 15 [json_name = "slow-peer"];
                        message RoutingTableRibOnly {
                           bool enable = 1 [json_name = "enable"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        RoutingTableRibOnly routing_table_rib_only = 16 [json_name = "routing-table-rib-only"];
                        message Evpn {
                           message Srv6 {
                              enum Mode {
                                 INVALID_ENUM_VALUE_Mode = 0;
                                 Mode_BE = 1;
                                 Mode_TE = 2;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              bool down_switch = 2 [json_name = "down-switch"];
                           }
                           Srv6 srv6 = 1 [json_name = "srv6"];
                           message Common {
                              bool reoriginate_disable = 1 [json_name = "reoriginate-disable"];
                              bool original_attributes = 2 [json_name = "original-attributes"];
                           }
                           Common common = 2 [json_name = "common"];
                           message LocalCross {
                              bool remote_cross_route_enable = 1 [json_name = "remote-cross-route-enable"];
                           }
                           LocalCross local_cross = 3 [json_name = "local-cross"];
                           message IrbAsymmetric {
                              bool irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                              string policy_name = 2 [json_name = "policy-name"];
                           }
                           IrbAsymmetric irb_asymmetric = 4 [json_name = "irb-asymmetric"];
                           message Locators {
                              message Locator {
                                 string name = 1 [json_name = "name"];
                                 bool advertise_sbfd_discriminator = 2 [json_name = "advertise-sbfd-discriminator"];
                              }
                              repeated Locator locator = 1 [json_name = "locator"];
                           }
                           Locators locators = 5 [json_name = "locators"];
                           message ApplySidMode {
                              enum Mode {
                                 Mode_PERX_INSTANCE = 0;
                                 Mode_PERX_NEXTHOPX_ALL = 1;
                                 Mode_PERX_NEXTHOPX_SPECIFY = 2;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              message SpecifyNexthops {
                                 message SpecifyNexthop {
                                    string nexthop_address = 1 [json_name = "nexthop-address"];
                                    string interface_name = 2 [json_name = "interface-name"];
                                 }
                                 repeated SpecifyNexthop specify_nexthop = 1 [json_name = "specify-nexthop"];
                              }
                              SpecifyNexthops specify_nexthops = 2 [json_name = "specify-nexthops"];
                           }
                           ApplySidMode apply_sid_mode = 6 [json_name = "apply-sid-mode"];
                        }
                        Evpn evpn = 17 [json_name = "evpn"];
                        message Locators {
                           message Locator {
                              string name = 1 [json_name = "name"];
                              bool auto_sid = 2 [json_name = "auto-sid"];
                              enum ApplySidMode {
                                 ApplySidMode_PERX_INSTANCE = 0;
                                 ApplySidMode_PERX_NEXTHOP = 1;
                              };
                              ApplySidMode apply_sid_mode = 3 [json_name = "apply-sid-mode"];
                              bool advertise_sbfd_discriminator = 4 [json_name = "advertise-sbfd-discriminator"];
                           }
                           repeated Locator locator = 1 [json_name = "locator"];
                        }
                        Locators locators = 18 [json_name = "locators"];
                        message Qos {
                           message LocalIdPolicy_Value {
                              uint32 local_id = 1 [json_name = "local-id"];
                           }
                           message LocalIdPolicy_RtpRef {
                              string local_id_policy_name = 1 [json_name = "local-id-policy-name"];
                           }
                           message LocalIdPolicy_XplRef {
                              string local_id_filter_name = 1 [json_name = "local-id-filter-name"];
                              string local_id_filter_parameter = 2 [json_name = "local-id-filter-parameter"];
                           }
                           oneof LocalIdPolicy {
                              LocalIdPolicy_Value local_id_policy_value = 1 [json_name = "value"];
                              LocalIdPolicy_RtpRef local_id_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                              LocalIdPolicy_XplRef local_id_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        Qos qos = 19 [json_name = "qos"];
                        message HierarchyConvergence {
                           message Common {
                              bool enable = 1 [json_name = "enable"];
                           }
                           Common common = 1 [json_name = "common"];
                           message HierarchyConvergenceRoutes {
                              message HierarchyConvergenceRoute {
                                 string base_route_address = 1 [json_name = "base-route-address"];
                                 uint32 base_route_mask_length = 2 [json_name = "base-route-mask-length"];
                                 message HierarchyRoute_All {
                                    bool all_route = 1 [json_name = "all-route"];
                                 }
                                 message HierarchyRoute_RoutePolicy {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 oneof HierarchyRoute {
                                    HierarchyRoute_All hierarchy_route_all = 3 [json_name = "all"];
                                    HierarchyRoute_RoutePolicy hierarchy_route_route_policy = 4 [json_name = "route-policy"];
                                 }
                              }
                              repeated HierarchyConvergenceRoute hierarchy_convergence_route = 1 [json_name = "hierarchy-convergence-route"];
                           }
                           HierarchyConvergenceRoutes hierarchy_convergence_routes = 2 [json_name = "hierarchy-convergence-routes"];
                        }
                        HierarchyConvergence hierarchy_convergence = 20 [json_name = "hierarchy-convergence"];
                        message InstanceImportRibs {
                           message InstanceImportRib {
                              string source_instance = 1 [json_name = "source-instance"];
                              string source_vpn = 2 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4UNI = 1;
                              };
                              SourceAddressFamily source_address_family = 3 [json_name = "source-address-family"];
                              bool valid_route = 4 [json_name = "valid-route"];
                              bool include_label_route = 5 [json_name = "include-label-route"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated InstanceImportRib instance_import_rib = 1 [json_name = "instance-import-rib"];
                        }
                        InstanceImportRibs instance_import_ribs = 21 [json_name = "instance-import-ribs"];
                        message RegionValidation {
                           bool region_confederation_check_strict = 1 [json_name = "region-confederation-check-strict"];
                           enum Bestroute {
                              INVALID_ENUM_VALUE_Bestroute = 0;
                              Bestroute_ALLOWX_ONLYX_VALID = 1;
                              Bestroute_ALLOWX_INVALID = 2;
                           };
                           Bestroute bestroute = 2 [json_name = "bestroute"];
                        }
                        RegionValidation region_validation = 22 [json_name = "region-validation"];
                        message BestrouteAddressFamilyPriority {
                           enum AddressFamilyPriority {
                              INVALID_ENUM_VALUE_AddressFamilyPriority = 0;
                              AddressFamilyPriority_VPNV4 = 1;
                              AddressFamilyPriority_EVPNV4 = 2;
                           };
                           AddressFamilyPriority address_family_priority = 1 [json_name = "address-family-priority"];
                           bool address_family_priority_disable = 2 [json_name = "address-family-priority-disable"];
                        }
                        BestrouteAddressFamilyPriority bestroute_address_family_priority = 23 [json_name = "bestroute-address-family-priority"];
                        message BestrouteNexthopRecursivePriority {
                           bool nexthop_recursive_srv6_te_policy = 1 [json_name = "nexthop-recursive-srv6-te-policy"];
                        }
                        BestrouteNexthopRecursivePriority bestroute_nexthop_recursive_priority = 24 [json_name = "bestroute-nexthop-recursive-priority"];
                        message LoadBalancing {
                           bool med_ignore = 1 [json_name = "med-ignore"];
                           bool adaptive_routing = 2 [json_name = "adaptive-routing"];
                        }
                        LoadBalancing load_balancing = 25 [json_name = "load-balancing"];
                        message Option {
                           enum AdvertiseCommunityGracefulShutdown {
                              INVALID_ENUM_VALUE_AdvertiseCommunityGracefulShutdown = 0;
                              AdvertiseCommunityGracefulShutdown_IBGP = 1;
                              AdvertiseCommunityGracefulShutdown_EBGP = 2;
                              AdvertiseCommunityGracefulShutdown_ALL = 3;
                           };
                           AdvertiseCommunityGracefulShutdown advertise_community_graceful_shutdown = 1 [json_name = "advertise-community-graceful-shutdown"];
                        }
                        Option option = 26 [json_name = "option"];
                     }
                     Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                     message Ipv6Unicast {
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_UNR = 11;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              uint32 med = 4 [json_name = "med"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 1 [json_name = "import-routes"];
                        message AggregateRoutes {
                           message AggregateRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool as_set = 3 [json_name = "as-set"];
                              bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                              message PolicyType_RtpRef {
                                 string attribute_policy = 1 [json_name = "attribute-policy"];
                                 string origin_policy = 2 [json_name = "origin-policy"];
                                 string suppress_policy = 3 [json_name = "suppress-policy"];
                              }
                              message PolicyType_XplRef {
                                 string attribute_filter_name = 1 [json_name = "attribute-filter-name"];
                                 string attribute_filter_parameter = 2 [json_name = "attribute-filter-parameter"];
                                 string origin_filter_name = 3 [json_name = "origin-filter-name"];
                                 string origin_filter_parameter = 4 [json_name = "origin-filter-parameter"];
                                 string suppress_filter_name = 5 [json_name = "suppress-filter-name"];
                                 string suppress_filter_parameter = 6 [json_name = "suppress-filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                        }
                        AggregateRoutes aggregate_routes = 2 [json_name = "aggregate-routes"];
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           uint32 route_select_delay = 2 [json_name = "route-select-delay"];
                           bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                           uint32 maximum_load_balancing_ibgp = 5 [json_name = "maximum-load-balancing-ibgp"];
                           uint32 maximum_load_balancing_ebgp = 6 [json_name = "maximum-load-balancing-ebgp"];
                           bool explicit_null = 7 [json_name = "explicit-null"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                           bool nexthop_resolve_aigp = 9 [json_name = "nexthop-resolve-aigp"];
                           bool always_compare_med = 10 [json_name = "always-compare-med"];
                           uint32 default_med = 11 [json_name = "default-med"];
                           bool nexthop_third_party = 12 [json_name = "nexthop-third-party"];
                           bool supernet_unicast_advertise = 13 [json_name = "supernet-unicast-advertise"];
                           bool bestroute_med_confederation = 14 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 15 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 16 [json_name = "determin-med"];
                           bool best_external = 17 [json_name = "best-external"];
                           uint32 add_path_select_num = 18 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 19 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 20 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 21 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 22 [json_name = "default-local-preference"];
                           bool default_route_import = 23 [json_name = "default-route-import"];
                           bool routerid_neglect = 24 [json_name = "routerid-neglect"];
                           enum LspOperation {
                              LspOperation_POP = 0;
                              LspOperation_POPX_GO = 1;
                           };
                           LspOperation lsp_operation = 25 [json_name = "lsp-operation"];
                           bool nexthop_inherit_ip_cost = 26 [json_name = "nexthop-inherit-ip-cost"];
                           bool attribute_set_enable = 27 [json_name = "attribute-set-enable"];
                           enum AttributeSetMode {
                              INVALID_ENUM_VALUE_AttributeSetMode = 0;
                              AttributeSetMode_RECEIVE = 1;
                              AttributeSetMode_SEND = 2;
                              AttributeSetMode_BOTH = 3;
                           };
                           AttributeSetMode attribute_set_mode = 28 [json_name = "attribute-set-mode"];
                           uint32 maximum_load_balancing = 29 [json_name = "maximum-load-balancing"];
                           bool reflect_between_client = 30 [json_name = "reflect-between-client"];
                           bool best_route_bit_error_detection = 31 [json_name = "best-route-bit-error-detection"];
                           bool import_rib_nexthop_invariable = 32 [json_name = "import-rib-nexthop-invariable"];
                           bool route_relay_tunnel_v4 = 33 [json_name = "route-relay-tunnel-v4"];
                           string route_relay_tunnel_v4_selector = 34 [json_name = "route-relay-tunnel-v4-selector"];
                           bool bestroute_med_plus_igp = 35 [json_name = "bestroute-med-plus-igp"];
                           uint32 bestroute_med_multiplier = 36 [json_name = "bestroute-med-multiplier"];
                           uint32 bestroute_igp_multiplier = 37 [json_name = "bestroute-igp-multiplier"];
                           bool bestroute_igp_metric_ignore = 38 [json_name = "bestroute-igp-metric-ignore"];
                           bool bestroute_router_id_prior_clusterlist = 39 [json_name = "bestroute-router-id-prior-clusterlist"];
                           bool bestroute_med_none_as_maximum = 40 [json_name = "bestroute-med-none-as-maximum"];
                           enum NexthopPriority {
                              INVALID_ENUM_VALUE_NexthopPriority = 0;
                              NexthopPriority_IPV4 = 1;
                              NexthopPriority_IPV6 = 2;
                           };
                           NexthopPriority nexthop_priority = 41 [json_name = "nexthop-priority"];
                           bool ebgp_ecmp_nexthop_changed = 42 [json_name = "ebgp-ecmp-nexthop-changed"];
                           bool ibgp_ecmp_nexthop_changed = 43 [json_name = "ibgp-ecmp-nexthop-changed"];
                           bool ecmp_nexthop_changed = 44 [json_name = "ecmp-nexthop-changed"];
                           uint32 maximum_load_balancing_eibgp = 45 [json_name = "maximum-load-balancing-eibgp"];
                           bool eibgp_ecmp_nexthop_changed = 46 [json_name = "eibgp-ecmp-nexthop-changed"];
                           bool load_balancing_eibgp_enable = 47 [json_name = "load-balancing-eibgp-enable"];
                           bool ext_community_change = 48 [json_name = "ext-community-change"];
                           bool active_route_advertise = 49 [json_name = "active-route-advertise"];
                           string route_relay_tunnel_v6_selector = 50 [json_name = "route-relay-tunnel-v6-selector"];
                           bool bestroute_rd_large_first = 51 [json_name = "bestroute-rd-large-first"];
                           bool ebgp_interface_sensitive = 52 [json_name = "ebgp-interface-sensitive"];
                           bool prefix_origin_as_validation = 53 [json_name = "prefix-origin-as-validation"];
                           bool bestroute_origin_as_validation = 54 [json_name = "bestroute-origin-as-validation"];
                           bool bestroute_allow_invalid_as = 55 [json_name = "bestroute-allow-invalid-as"];
                           enum AdvertiseRouteMode {
                              AdvertiseRouteMode_ALL = 0;
                              AdvertiseRouteMode_BEST = 1;
                              AdvertiseRouteMode_VALID = 2;
                           };
                           AdvertiseRouteMode advertise_route_mode = 56 [json_name = "advertise-route-mode"];
                           bool router_id_auto_select = 57 [json_name = "router-id-auto-select"];
                           string router_id = 58 [json_name = "router-id"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 59 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 60 [json_name = "id"];
                           }
                           bool load_balancing_ucmp = 61 [json_name = "load-balancing-ucmp"];
                           uint32 maximum_load_balancing_mixed = 62 [json_name = "maximum-load-balancing-mixed"];
                           bool load_balancing_local_learn_cross = 63 [json_name = "load-balancing-local-learn-cross"];
                           message BestrouteNexthopPriority_Enable {
                              enum NexthopPriority {
                                 INVALID_ENUM_VALUE_NexthopPriority = 0;
                                 NexthopPriority_IPV4 = 1;
                                 NexthopPriority_IPV6 = 2;
                              };
                              NexthopPriority nexthop_priority = 1 [json_name = "nexthop-priority"];
                              bool nexthop_priority_high_level = 2 [json_name = "nexthop-priority-high-level"];
                           }
                           message BestrouteNexthopPriority_Disable {
                              bool nexthop_priority_disable = 1 [json_name = "nexthop-priority-disable"];
                           }
                           oneof BestrouteNexthopPriority {
                              BestrouteNexthopPriority_Enable bestroute_nexthop_priority_enable = 64 [json_name = "enable"];
                              BestrouteNexthopPriority_Disable bestroute_nexthop_priority_disable = 65 [json_name = "disable"];
                           }
                           bool prefix_validation_source_all = 66 [json_name = "prefix-validation-source-all"];
                           bool reoriginate_route = 67 [json_name = "reoriginate-route"];
                           bool original_attributes = 68 [json_name = "original-attributes"];
                        }
                        Common common = 3 [json_name = "common"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 4 [json_name = "network-routes"];
                        message AdvertiseRouteToEvpns {
                           message AdvertiseRouteToEvpn {
                              enum Protocol {
                                 Protocol_ALL = 0;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              bool import_multipath = 2 [json_name = "import-multipath"];
                              enum AdvertiseRouteMode {
                                 AdvertiseRouteMode_ALL = 0;
                                 AdvertiseRouteMode_BEST = 1;
                                 AdvertiseRouteMode_VALID = 2;
                              };
                              AdvertiseRouteMode advertise_route_mode = 3 [json_name = "advertise-route-mode"];
                              bool include_local_cross = 4 [json_name = "include-local-cross"];
                           }
                           repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                        }
                        AdvertiseRouteToEvpns advertise_route_to_evpns = 5 [json_name = "advertise-route-to-evpns"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV6UNI = 5;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 6 [json_name = "import-ribs"];
                        message Preference {
                           message SetValueOrPolicy_SetValue {
                              uint32 external = 1 [json_name = "external"];
                              uint32 internal = 2 [json_name = "internal"];
                              uint32 local = 3 [json_name = "local"];
                           }
                           message SetValueOrPolicy_RtpRef {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message SetValueOrPolicy_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof SetValueOrPolicy {
                              SetValueOrPolicy_SetValue set_value_or_policy_set_value = 1 [json_name = "set-value"];
                              SetValueOrPolicy_RtpRef set_value_or_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                              SetValueOrPolicy_XplRef set_value_or_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        Preference preference = 7 [json_name = "preference"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              bool default_route = 2 [json_name = "default-route"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 8 [json_name = "nexthop-recursive-lookup"];
                        message AggregateDefaultRoute {
                           string origin_ipv6_prefix = 1 [json_name = "origin-ipv6-prefix"];
                           string attribute_policy = 2 [json_name = "attribute-policy"];
                        }
                        AggregateDefaultRoute aggregate_default_route = 9 [json_name = "aggregate-default-route"];
                        message SegmentRoutingIpv6 {
                           bool srv6_best_effort_enable = 1 [json_name = "srv6-best-effort-enable"];
                           bool srv6_traffic_engineer_enable = 2 [json_name = "srv6-traffic-engineer-enable"];
                        }
                        SegmentRoutingIpv6 segment_routing_ipv6 = 10 [json_name = "segment-routing-ipv6"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 11 [json_name = "dampening-routes"];
                        message ImportFilterPolicy {
                           message Ipv6ImportFilterProtocolPolicyType_Acl6Ref {
                              string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef {
                              string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv6ImportFilterProtocolPolicyType {
                              Ipv6ImportFilterProtocolPolicyType_Acl6Ref ipv6_import_filter_protocol_policy_type_acl6_ref = 1 [json_name = "acl6-ref"];
                              Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef ipv6_import_filter_protocol_policy_type_ipv6_prefix_ref = 2 [json_name = "ipv6-prefix-ref"];
                              Ipv6ImportFilterProtocolPolicyType_XplRef ipv6_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 12 [json_name = "import-filter-policy"];
                        message ExportFilterPolicys {
                           message ExportFilterPolicy {
                              enum Protocol {
                                 Protocol_NOPROTOCOL = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message Ipv6FilterProtocolPolicyType_Acl6Ref {
                                 string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                              }
                              message Ipv6FilterProtocolPolicyType_Ipv6PrefixRef {
                                 string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                              }
                              message Ipv6FilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv6FilterProtocolPolicyType {
                                 Ipv6FilterProtocolPolicyType_Acl6Ref ipv6_filter_protocol_policy_type_acl6_ref = 3 [json_name = "acl6-ref"];
                                 Ipv6FilterProtocolPolicyType_Ipv6PrefixRef ipv6_filter_protocol_policy_type_ipv6_prefix_ref = 4 [json_name = "ipv6-prefix-ref"];
                                 Ipv6FilterProtocolPolicyType_XplRef ipv6_filter_protocol_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ExportFilterPolicy export_filter_policy = 1 [json_name = "export-filter-policy"];
                        }
                        ExportFilterPolicys export_filter_policys = 13 [json_name = "export-filter-policys"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 14 [json_name = "slow-peer"];
                        message RoutingTableRibOnly {
                           bool enable = 1 [json_name = "enable"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        RoutingTableRibOnly routing_table_rib_only = 15 [json_name = "routing-table-rib-only"];
                        message Evpn {
                           message Srv6 {
                              enum Mode {
                                 INVALID_ENUM_VALUE_Mode = 0;
                                 Mode_BE = 1;
                                 Mode_TE = 2;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              bool down_switch = 2 [json_name = "down-switch"];
                           }
                           Srv6 srv6 = 1 [json_name = "srv6"];
                           message Common {
                              bool reoriginate_disable = 1 [json_name = "reoriginate-disable"];
                              bool original_attributes = 2 [json_name = "original-attributes"];
                           }
                           Common common = 2 [json_name = "common"];
                           message LocalCross {
                              bool remote_cross_route_enable = 1 [json_name = "remote-cross-route-enable"];
                           }
                           LocalCross local_cross = 3 [json_name = "local-cross"];
                           message IrbAsymmetric {
                              bool irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                              string policy_name = 2 [json_name = "policy-name"];
                           }
                           IrbAsymmetric irb_asymmetric = 4 [json_name = "irb-asymmetric"];
                           message Locators {
                              message Locator {
                                 string name = 1 [json_name = "name"];
                                 bool advertise_sbfd_discriminator = 2 [json_name = "advertise-sbfd-discriminator"];
                              }
                              repeated Locator locator = 1 [json_name = "locator"];
                           }
                           Locators locators = 5 [json_name = "locators"];
                           message ApplySidMode {
                              enum Mode {
                                 Mode_PERX_INSTANCE = 0;
                                 Mode_PERX_NEXTHOPX_ALL = 1;
                                 Mode_PERX_NEXTHOPX_SPECIFY = 2;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              message SpecifyNexthops {
                                 message SpecifyNexthop {
                                    string nexthop_address = 1 [json_name = "nexthop-address"];
                                    string interface_name = 2 [json_name = "interface-name"];
                                 }
                                 repeated SpecifyNexthop specify_nexthop = 1 [json_name = "specify-nexthop"];
                              }
                              SpecifyNexthops specify_nexthops = 2 [json_name = "specify-nexthops"];
                           }
                           ApplySidMode apply_sid_mode = 6 [json_name = "apply-sid-mode"];
                        }
                        Evpn evpn = 16 [json_name = "evpn"];
                        message Locators {
                           message Locator {
                              string name = 1 [json_name = "name"];
                              bool advertise_sbfd_discriminator = 2 [json_name = "advertise-sbfd-discriminator"];
                              enum ApplySidMode {
                                 ApplySidMode_PERX_INSTANCE = 0;
                                 ApplySidMode_PERX_NEXTHOP = 1;
                              };
                              ApplySidMode apply_sid_mode = 3 [json_name = "apply-sid-mode"];
                           }
                           repeated Locator locator = 1 [json_name = "locator"];
                        }
                        Locators locators = 17 [json_name = "locators"];
                        message Qos {
                           bool ipv6_qppb = 1 [json_name = "ipv6-qppb"];
                           message LocalIdPolicy_Value {
                              uint32 local_id = 1 [json_name = "local-id"];
                           }
                           message LocalIdPolicy_RtpRef {
                              string local_id_policy_name = 1 [json_name = "local-id-policy-name"];
                           }
                           message LocalIdPolicy_XplRef {
                              string local_id_filter_name = 1 [json_name = "local-id-filter-name"];
                              string local_id_filter_parameter = 2 [json_name = "local-id-filter-parameter"];
                           }
                           oneof LocalIdPolicy {
                              LocalIdPolicy_Value local_id_policy_value = 2 [json_name = "value"];
                              LocalIdPolicy_RtpRef local_id_policy_rtp_ref = 3 [json_name = "rtp-ref"];
                              LocalIdPolicy_XplRef local_id_policy_xpl_ref = 4 [json_name = "xpl-ref"];
                           }
                        }
                        Qos qos = 18 [json_name = "qos"];
                        message HierarchyConvergence {
                           message Common {
                              bool enable = 1 [json_name = "enable"];
                           }
                           Common common = 1 [json_name = "common"];
                           message HierarchyConvergenceRoutes {
                              message HierarchyConvergenceRoute {
                                 string base_route_address = 1 [json_name = "base-route-address"];
                                 uint32 base_route_mask_length = 2 [json_name = "base-route-mask-length"];
                                 message HierarchyRoute_All {
                                    bool all_route = 1 [json_name = "all-route"];
                                 }
                                 message HierarchyRoute_RoutePolicy {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 oneof HierarchyRoute {
                                    HierarchyRoute_All hierarchy_route_all = 3 [json_name = "all"];
                                    HierarchyRoute_RoutePolicy hierarchy_route_route_policy = 4 [json_name = "route-policy"];
                                 }
                              }
                              repeated HierarchyConvergenceRoute hierarchy_convergence_route = 1 [json_name = "hierarchy-convergence-route"];
                           }
                           HierarchyConvergenceRoutes hierarchy_convergence_routes = 2 [json_name = "hierarchy-convergence-routes"];
                        }
                        HierarchyConvergence hierarchy_convergence = 19 [json_name = "hierarchy-convergence"];
                        message LocatorRoutes {
                           message LocatorRoute {
                              string locator_name = 1 [json_name = "locator-name"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           repeated LocatorRoute locator_route = 1 [json_name = "locator-route"];
                        }
                        LocatorRoutes locator_routes = 20 [json_name = "locator-routes"];
                        message RegionValidation {
                           bool region_confederation_check_strict = 1 [json_name = "region-confederation-check-strict"];
                           enum Bestroute {
                              INVALID_ENUM_VALUE_Bestroute = 0;
                              Bestroute_ALLOWX_ONLYX_VALID = 1;
                              Bestroute_ALLOWX_INVALID = 2;
                           };
                           Bestroute bestroute = 2 [json_name = "bestroute"];
                        }
                        RegionValidation region_validation = 21 [json_name = "region-validation"];
                        message BestrouteAddressFamilyPriority {
                           enum AddressFamilyPriority {
                              INVALID_ENUM_VALUE_AddressFamilyPriority = 0;
                              AddressFamilyPriority_VPNV6 = 1;
                              AddressFamilyPriority_EVPNV6 = 2;
                           };
                           AddressFamilyPriority address_family_priority = 1 [json_name = "address-family-priority"];
                           bool address_family_priority_disable = 2 [json_name = "address-family-priority-disable"];
                        }
                        BestrouteAddressFamilyPriority bestroute_address_family_priority = 22 [json_name = "bestroute-address-family-priority"];
                        message BestrouteNexthopRecursivePriority {
                           bool nexthop_recursive_srv6_te_policy = 1 [json_name = "nexthop-recursive-srv6-te-policy"];
                        }
                        BestrouteNexthopRecursivePriority bestroute_nexthop_recursive_priority = 23 [json_name = "bestroute-nexthop-recursive-priority"];
                        message LoadBalancing {
                           bool med_ignore = 1 [json_name = "med-ignore"];
                        }
                        LoadBalancing load_balancing = 24 [json_name = "load-balancing"];
                        message Option {
                           enum AdvertiseCommunityGracefulShutdown {
                              INVALID_ENUM_VALUE_AdvertiseCommunityGracefulShutdown = 0;
                              AdvertiseCommunityGracefulShutdown_IBGP = 1;
                              AdvertiseCommunityGracefulShutdown_EBGP = 2;
                              AdvertiseCommunityGracefulShutdown_ALL = 3;
                           };
                           AdvertiseCommunityGracefulShutdown advertise_community_graceful_shutdown = 1 [json_name = "advertise-community-graceful-shutdown"];
                        }
                        Option option = 25 [json_name = "option"];
                     }
                     Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                     message Ipv4Vpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                        bool reflect_change_path = 3 [json_name = "reflect-change-path"];
                        bool auto_frr = 4 [json_name = "auto-frr"];
                        string tunnel_selector_name = 5 [json_name = "tunnel-selector-name"];
                        uint32 route_select_delay = 6 [json_name = "route-select-delay"];
                        enum ApplyLabelMode {
                           ApplyLabelMode_PERX_ROUTE = 0;
                           ApplyLabelMode_PERX_NEXTHOP = 1;
                        };
                        ApplyLabelMode apply_label_mode = 7 [json_name = "apply-label-mode"];
                        enum NexthopSelectDependType {
                           INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                           NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                           NexthopSelectDependType_DEPENDX_IP = 2;
                           NexthopSelectDependType_DEPENDX_NONE = 3;
                        };
                        NexthopSelectDependType nexthop_select_depend_type = 8 [json_name = "nexthop-select-depend-type"];
                        uint32 default_med = 9 [json_name = "default-med"];
                        bool best_external = 10 [json_name = "best-external"];
                        uint32 label_free_delay = 11 [json_name = "label-free-delay"];
                        uint32 add_path_select_num = 12 [json_name = "add-path-select-num"];
                        uint32 default_local_preference = 13 [json_name = "default-local-preference"];
                        bool bestroute_med_plus_igp = 14 [json_name = "bestroute-med-plus-igp"];
                        uint32 bestroute_med_multiplier = 15 [json_name = "bestroute-med-multiplier"];
                        uint32 bestroute_igp_multiplier = 16 [json_name = "bestroute-igp-multiplier"];
                        bool bestroute_igp_metric_ignore = 17 [json_name = "bestroute-igp-metric-ignore"];
                        bool bestroute_router_id_prior_clusterlist = 18 [json_name = "bestroute-router-id-prior-clusterlist"];
                        bool reflect_between_client = 19 [json_name = "reflect-between-client"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 20 [json_name = "dampening-routes"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              bool default_route = 2 [json_name = "default-route"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                           message BitErrorDetection {
                              bool enable = 1 [json_name = "enable"];
                              uint32 med = 2 [json_name = "med"];
                              uint32 local_preference = 3 [json_name = "local-preference"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           BitErrorDetection bit_error_detection = 3 [json_name = "bit-error-detection"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 21 [json_name = "nexthop-recursive-lookup"];
                        message ImportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 22 [json_name = "import-filter-policy"];
                        message ExportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ExportFilterPolicy export_filter_policy = 23 [json_name = "export-filter-policy"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 24 [json_name = "slow-peer"];
                        bool activate_route_tag = 25 [json_name = "activate-route-tag"];
                        string route_reflector_ext_community_filter = 26 [json_name = "route-reflector-ext-community-filter"];
                        message ReflectorType_Address {
                           string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                        }
                        message ReflectorType_Id {
                           uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                        }
                        oneof ReflectorType {
                           ReflectorType_Address reflector_type_address = 27 [json_name = "address"];
                           ReflectorType_Id reflector_type_id = 28 [json_name = "id"];
                        }
                        bool load_balancing_eibgp_enable = 29 [json_name = "load-balancing-eibgp-enable"];
                        bool load_balanc_igp_metric_ignore = 30 [json_name = "load-balanc-igp-metric-ignore"];
                        bool load_balanc_as_path_ignore = 31 [json_name = "load-balanc-as-path-ignore"];
                        bool load_balanc_as_path_relax = 32 [json_name = "load-balanc-as-path-relax"];
                        message Evpn {
                           message ImportEvpnRibs {
                              message ImportEvpnRib {
                                 enum NexthopType {
                                    INVALID_ENUM_VALUE_NexthopType = 0;
                                    NexthopType_MPLS = 1;
                                    NexthopType_SRV6 = 2;
                                 };
                                 NexthopType nexthop_type = 1 [json_name = "nexthop-type"];
                                 enum RouteType {
                                    INVALID_ENUM_VALUE_RouteType = 0;
                                    RouteType_IPX_PREFIX = 1;
                                 };
                                 RouteType route_type = 2 [json_name = "route-type"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 }
                              }
                              repeated ImportEvpnRib import_evpn_rib = 1 [json_name = "import-evpn-rib"];
                           }
                           ImportEvpnRibs import_evpn_ribs = 1 [json_name = "import-evpn-ribs"];
                           message LoadBalancing {
                              uint32 maximum_load_balancing_import_rib = 1 [json_name = "maximum-load-balancing-import-rib"];
                           }
                           LoadBalancing load_balancing = 2 [json_name = "load-balancing"];
                        }
                        Evpn evpn = 33 [json_name = "evpn"];
                        message BestrouteNexthopPriority {
                           enum NexthopType {
                              INVALID_ENUM_VALUE_NexthopType = 0;
                              NexthopType_IPV4 = 1;
                              NexthopType_IPV6 = 2;
                           };
                           NexthopType nexthop_type = 1 [json_name = "nexthop-type"];
                        }
                        BestrouteNexthopPriority bestroute_nexthop_priority = 34 [json_name = "bestroute-nexthop-priority"];
                        bool vpn_orf_enable = 35 [json_name = "vpn-orf-enable"];
                     }
                     Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                     message Ipv6Vpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                        string reflector_cluster_ipv4 = 2 [json_name = "reflector-cluster-ipv4"];
                        bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                        bool auto_frr = 5 [json_name = "auto-frr"];
                        string tunnel_selector_name = 6 [json_name = "tunnel-selector-name"];
                        uint32 route_select_delay = 7 [json_name = "route-select-delay"];
                        enum ApplyLabelMode {
                           ApplyLabelMode_PERX_ROUTE = 0;
                           ApplyLabelMode_PERX_NEXTHOP = 1;
                        };
                        ApplyLabelMode apply_label_mode = 8 [json_name = "apply-label-mode"];
                        enum NexthopSelectDependType {
                           INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                           NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                           NexthopSelectDependType_DEPENDX_IP = 2;
                           NexthopSelectDependType_DEPENDX_NONE = 3;
                        };
                        NexthopSelectDependType nexthop_select_depend_type = 9 [json_name = "nexthop-select-depend-type"];
                        uint32 default_med = 10 [json_name = "default-med"];
                        bool best_external = 11 [json_name = "best-external"];
                        uint32 add_path_select_num = 12 [json_name = "add-path-select-num"];
                        uint32 default_local_preference = 13 [json_name = "default-local-preference"];
                        bool bestroute_med_plus_igp = 14 [json_name = "bestroute-med-plus-igp"];
                        uint32 bestroute_med_multiplier = 15 [json_name = "bestroute-med-multiplier"];
                        uint32 bestroute_igp_multiplier = 16 [json_name = "bestroute-igp-multiplier"];
                        bool bestroute_igp_metric_ignore = 17 [json_name = "bestroute-igp-metric-ignore"];
                        bool bestroute_router_id_prior_clusterlist = 18 [json_name = "bestroute-router-id-prior-clusterlist"];
                        bool reflect_between_client = 19 [json_name = "reflect-between-client"];
                        uint32 label_free_delay = 20 [json_name = "label-free-delay"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              bool default_route = 2 [json_name = "default-route"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                           message BitErrorDetection {
                              bool enable = 1 [json_name = "enable"];
                              uint32 med = 2 [json_name = "med"];
                              uint32 local_preference = 3 [json_name = "local-preference"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           BitErrorDetection bit_error_detection = 3 [json_name = "bit-error-detection"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 21 [json_name = "nexthop-recursive-lookup"];
                        message ImportFilterPolicy {
                           message Ipv6ImportFilterProtocolPolicyType_Acl6Ref {
                              string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef {
                              string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv6ImportFilterProtocolPolicyType {
                              Ipv6ImportFilterProtocolPolicyType_Acl6Ref ipv6_import_filter_protocol_policy_type_acl6_ref = 1 [json_name = "acl6-ref"];
                              Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef ipv6_import_filter_protocol_policy_type_ipv6_prefix_ref = 2 [json_name = "ipv6-prefix-ref"];
                              Ipv6ImportFilterProtocolPolicyType_XplRef ipv6_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 22 [json_name = "import-filter-policy"];
                        message ExportFilterPolicy {
                           message Ipv6ImportFilterProtocolPolicyType_Acl6Ref {
                              string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef {
                              string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                           }
                           message Ipv6ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv6ImportFilterProtocolPolicyType {
                              Ipv6ImportFilterProtocolPolicyType_Acl6Ref ipv6_import_filter_protocol_policy_type_acl6_ref = 1 [json_name = "acl6-ref"];
                              Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef ipv6_import_filter_protocol_policy_type_ipv6_prefix_ref = 2 [json_name = "ipv6-prefix-ref"];
                              Ipv6ImportFilterProtocolPolicyType_XplRef ipv6_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ExportFilterPolicy export_filter_policy = 23 [json_name = "export-filter-policy"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 24 [json_name = "slow-peer"];
                        string route_reflector_ext_community_filter = 25 [json_name = "route-reflector-ext-community-filter"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 26 [json_name = "dampening-routes"];
                        message ReflectorType_Address {
                           string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                        }
                        message ReflectorType_Id {
                           uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                        }
                        oneof ReflectorType {
                           ReflectorType_Address reflector_type_address = 27 [json_name = "address"];
                           ReflectorType_Id reflector_type_id = 28 [json_name = "id"];
                        }
                        bool load_balancing_eibgp_enable = 29 [json_name = "load-balancing-eibgp-enable"];
                        bool load_balanc_igp_metric_ignore = 30 [json_name = "load-balanc-igp-metric-ignore"];
                        bool load_balanc_as_path_ignore = 31 [json_name = "load-balanc-as-path-ignore"];
                        bool load_balanc_as_path_relax = 32 [json_name = "load-balanc-as-path-relax"];
                        message Evpn {
                           message ImportEvpnRibs {
                              message ImportEvpnRib {
                                 enum NexthopType {
                                    INVALID_ENUM_VALUE_NexthopType = 0;
                                    NexthopType_MPLS = 1;
                                    NexthopType_SRV6 = 2;
                                 };
                                 NexthopType nexthop_type = 1 [json_name = "nexthop-type"];
                                 enum RouteType {
                                    INVALID_ENUM_VALUE_RouteType = 0;
                                    RouteType_IPX_PREFIX = 1;
                                 };
                                 RouteType route_type = 2 [json_name = "route-type"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 }
                              }
                              repeated ImportEvpnRib import_evpn_rib = 1 [json_name = "import-evpn-rib"];
                           }
                           ImportEvpnRibs import_evpn_ribs = 1 [json_name = "import-evpn-ribs"];
                           message LoadBalancing {
                              uint32 maximum_load_balancing_import_rib = 1 [json_name = "maximum-load-balancing-import-rib"];
                           }
                           LoadBalancing load_balancing = 2 [json_name = "load-balancing"];
                        }
                        Evpn evpn = 33 [json_name = "evpn"];
                        message BestrouteNexthopPriority {
                           enum NexthopType {
                              INVALID_ENUM_VALUE_NexthopType = 0;
                              NexthopType_IPV4 = 1;
                              NexthopType_IPV6 = 2;
                           };
                           NexthopType nexthop_type = 1 [json_name = "nexthop-type"];
                        }
                        BestrouteNexthopPriority bestroute_nexthop_priority = 34 [json_name = "bestroute-nexthop-priority"];
                        bool vpn_orf_enable = 35 [json_name = "vpn-orf-enable"];
                     }
                     Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                     message Ipv4Labeluni {
                        message Common {
                           bool auto_frr = 1 [json_name = "auto-frr"];
                           string tunnel_selector_name = 2 [json_name = "tunnel-selector-name"];
                           bool tunnel_selector_all = 3 [json_name = "tunnel-selector-all"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 4 [json_name = "nexthop-select-depend-type"];
                           bool always_compare_med = 5 [json_name = "always-compare-med"];
                           uint32 default_med = 6 [json_name = "default-med"];
                           bool best_route_bit_error_detection = 7 [json_name = "best-route-bit-error-detection"];
                           bool supernet_label_advertise = 8 [json_name = "supernet-label-advertise"];
                           uint32 lsp_mtu = 9 [json_name = "lsp-mtu"];
                           uint32 label_free_delay = 10 [json_name = "label-free-delay"];
                           bool bestroute_med_confederation = 11 [json_name = "bestroute-med-confederation"];
                           bool bestroute_as_path_ignore = 12 [json_name = "bestroute-as-path-ignore"];
                           bool determin_med = 13 [json_name = "determin-med"];
                           bool best_external = 14 [json_name = "best-external"];
                           uint32 add_path_select_num = 15 [json_name = "add-path-select-num"];
                           bool load_balanc_igp_metric_ignore = 16 [json_name = "load-balanc-igp-metric-ignore"];
                           bool load_balanc_as_path_ignore = 17 [json_name = "load-balanc-as-path-ignore"];
                           bool load_balanc_as_path_relax = 18 [json_name = "load-balanc-as-path-relax"];
                           uint32 default_local_preference = 19 [json_name = "default-local-preference"];
                           bool default_route_import = 20 [json_name = "default-route-import"];
                           bool routerid_neglect = 21 [json_name = "routerid-neglect"];
                           uint32 route_select_delay = 22 [json_name = "route-select-delay"];
                           bool reflect_change_path = 23 [json_name = "reflect-change-path"];
                           bool nexthop_inherit_ip_cost = 24 [json_name = "nexthop-inherit-ip-cost"];
                           bool import_rib_nexthop_invariable = 25 [json_name = "import-rib-nexthop-invariable"];
                           bool reflect_between_client = 26 [json_name = "reflect-between-client"];
                           bool bestroute_med_plus_igp = 27 [json_name = "bestroute-med-plus-igp"];
                           uint32 bestroute_med_multiplier = 28 [json_name = "bestroute-med-multiplier"];
                           uint32 bestroute_igp_multiplier = 29 [json_name = "bestroute-igp-multiplier"];
                           bool bestroute_igp_metric_ignore = 30 [json_name = "bestroute-igp-metric-ignore"];
                           bool bestroute_router_id_prior_clusterlist = 31 [json_name = "bestroute-router-id-prior-clusterlist"];
                           bool bestroute_med_none_as_maximum = 32 [json_name = "bestroute-med-none-as-maximum"];
                           bool ext_community_change = 33 [json_name = "ext-community-change"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 34 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 35 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_UNR = 11;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              uint32 med = 4 [json_name = "med"];
                              bool non_relay_tunnel = 5 [json_name = "non-relay-tunnel"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 2 [json_name = "import-routes"];
                        message ImportRibs {
                           message ImportRib {
                              string source_vpn = 1 [json_name = "source-vpn"];
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4UNI = 1;
                                 SourceAddressFamily_IPV4LABELUNI = 4;
                              };
                              SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                              bool valid_route = 3 [json_name = "valid-route"];
                              bool include_label_route = 4 [json_name = "include-label-route"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                        }
                        ImportRibs import_ribs = 3 [json_name = "import-ribs"];
                        message LspOptions {
                           bool ingress_protect_mode_bgp_frr = 1 [json_name = "ingress-protect-mode-bgp-frr"];
                           uint32 maximum_load_balancing_ingress = 2 [json_name = "maximum-load-balancing-ingress"];
                           uint32 maximum_load_balancing_transit = 3 [json_name = "maximum-load-balancing-transit"];
                           bool unicast_rt_label_advertise_popgo = 4 [json_name = "unicast-rt-label-advertise-popgo"];
                           enum LspOperation {
                              LspOperation_POP = 0;
                              LspOperation_POPX_GO = 1;
                           };
                           LspOperation lsp_operation = 5 [json_name = "lsp-operation"];
                           message IngressTriggerPolicy_TriggerRoutePolicyRef {
                              string trigger_route_policy = 1 [json_name = "trigger-route-policy"];
                           }
                           message IngressTriggerPolicy_TriggerXplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof IngressTriggerPolicy {
                              IngressTriggerPolicy_TriggerRoutePolicyRef ingress_trigger_policy_trigger_route_policy_ref = 6 [json_name = "trigger-route-policy-ref"];
                              IngressTriggerPolicy_TriggerXplRef ingress_trigger_policy_trigger_xpl_ref = 7 [json_name = "trigger-xpl-ref"];
                           }
                        }
                        LspOptions lsp_options = 4 [json_name = "lsp-options"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 5 [json_name = "nexthop-recursive-lookup"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool non_relay_tunnel = 3 [json_name = "non-relay-tunnel"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                              uint32 label_index = 6 [json_name = "label-index"];
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 6 [json_name = "network-routes"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 7 [json_name = "dampening-routes"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 8 [json_name = "slow-peer"];
                     }
                     Ipv4Labeluni ipv4_labeluni = 6 [json_name = "ipv4-labeluni"];
                     message Ipv4Multicast {
                        message Common {
                           bool always_compare_med = 1 [json_name = "always-compare-med"];
                           uint32 default_med = 2 [json_name = "default-med"];
                           bool summary_automatic = 3 [json_name = "summary-automatic"];
                           bool bestroute_med_confederation = 4 [json_name = "bestroute-med-confederation"];
                           uint32 default_local_preference = 5 [json_name = "default-local-preference"];
                           bool default_route_import = 6 [json_name = "default-route-import"];
                           bool routerid_neglect = 7 [json_name = "routerid-neglect"];
                           uint32 route_select_delay = 8 [json_name = "route-select-delay"];
                           bool reflect_change_path = 9 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 10 [json_name = "reflect-between-client"];
                           bool determin_med = 11 [json_name = "determin-med"];
                           bool bestroute_med_plus_igp = 12 [json_name = "bestroute-med-plus-igp"];
                           uint32 bestroute_med_multiplier = 13 [json_name = "bestroute-med-multiplier"];
                           uint32 bestroute_igp_multiplier = 14 [json_name = "bestroute-igp-multiplier"];
                           bool bestroute_igp_metric_ignore = 15 [json_name = "bestroute-igp-metric-ignore"];
                           bool bestroute_router_id_prior_clusterlist = 16 [json_name = "bestroute-router-id-prior-clusterlist"];
                           bool bestroute_as_path_ignore = 17 [json_name = "bestroute-as-path-ignore"];
                           bool bestroute_med_none_as_maximum = 18 [json_name = "bestroute-med-none-as-maximum"];
                           uint32 maximum_load_balancing = 19 [json_name = "maximum-load-balancing"];
                           uint32 maximum_load_balancing_ibgp = 20 [json_name = "maximum-load-balancing-ibgp"];
                           uint32 maximum_load_balancing_ebgp = 21 [json_name = "maximum-load-balancing-ebgp"];
                           bool ext_community_change = 22 [json_name = "ext-community-change"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 23 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 24 [json_name = "id"];
                           }
                           bool auto_frr = 25 [json_name = "auto-frr"];
                        }
                        Common common = 1 [json_name = "common"];
                        message NexthopRecursiveLookup {
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 1 [json_name = "delay"];
                           message Common {
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                              }
                           }
                           Common common = 2 [json_name = "common"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 2 [json_name = "nexthop-recursive-lookup"];
                        message Preference {
                           message SetValueOrPolicy_SetValue {
                              uint32 external = 1 [json_name = "external"];
                              uint32 internal = 2 [json_name = "internal"];
                              uint32 local = 3 [json_name = "local"];
                           }
                           message SetValueOrPolicy_RtpRef {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message SetValueOrPolicy_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof SetValueOrPolicy {
                              SetValueOrPolicy_SetValue set_value_or_policy_set_value = 1 [json_name = "set-value"];
                              SetValueOrPolicy_RtpRef set_value_or_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                              SetValueOrPolicy_XplRef set_value_or_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        Preference preference = 3 [json_name = "preference"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 4 [json_name = "dampening-routes"];
                        message NetworkRoutes {
                           message NetworkRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                           }
                           repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                        }
                        NetworkRoutes network_routes = 5 [json_name = "network-routes"];
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              uint32 med = 3 [json_name = "med"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 6 [json_name = "import-routes"];
                        message AggregateRoutes {
                           message AggregateRoute {
                              string address = 1 [json_name = "address"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              bool as_set = 3 [json_name = "as-set"];
                              bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                              message PolicyType_RtpRef {
                                 string attribute_policy = 1 [json_name = "attribute-policy"];
                                 string origin_policy = 2 [json_name = "origin-policy"];
                                 string suppress_policy = 3 [json_name = "suppress-policy"];
                              }
                              message PolicyType_XplRef {
                                 string attribute_filter_name = 1 [json_name = "attribute-filter-name"];
                                 string attribute_filter_parameter = 2 [json_name = "attribute-filter-parameter"];
                                 string origin_filter_name = 3 [json_name = "origin-filter-name"];
                                 string origin_filter_parameter = 4 [json_name = "origin-filter-parameter"];
                                 string suppress_filter_name = 5 [json_name = "suppress-filter-name"];
                                 string suppress_filter_parameter = 6 [json_name = "suppress-filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                              }
                           }
                           repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                        }
                        AggregateRoutes aggregate_routes = 7 [json_name = "aggregate-routes"];
                        message ImportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 8 [json_name = "import-filter-policy"];
                        message ExportFilterPolicys {
                           message ExportFilterPolicy {
                              enum Protocol {
                                 Protocol_NOPROTOCOL = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_OPX_ROUTE = 14;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              message Ipv4FilterProtocolPolicyType_AclRef {
                                 string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                              }
                              message Ipv4FilterProtocolPolicyType_IpPrefixRef {
                                 string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                              }
                              message Ipv4FilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv4FilterProtocolPolicyType {
                                 Ipv4FilterProtocolPolicyType_AclRef ipv4_filter_protocol_policy_type_acl_ref = 3 [json_name = "acl-ref"];
                                 Ipv4FilterProtocolPolicyType_IpPrefixRef ipv4_filter_protocol_policy_type_ip_prefix_ref = 4 [json_name = "ip-prefix-ref"];
                                 Ipv4FilterProtocolPolicyType_XplRef ipv4_filter_protocol_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                              }
                           }
                           repeated ExportFilterPolicy export_filter_policy = 1 [json_name = "export-filter-policy"];
                        }
                        ExportFilterPolicys export_filter_policys = 9 [json_name = "export-filter-policys"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 10 [json_name = "slow-peer"];
                        message Qos {
                           message LocalIdPolicy_Value {
                              uint32 local_id = 1 [json_name = "local-id"];
                           }
                           message LocalIdPolicy_RtpRef {
                              string local_id_policy_name = 1 [json_name = "local-id-policy-name"];
                           }
                           message LocalIdPolicy_XplRef {
                              string local_id_filter_name = 1 [json_name = "local-id-filter-name"];
                              string local_id_filter_parameter = 2 [json_name = "local-id-filter-parameter"];
                           }
                           oneof LocalIdPolicy {
                              LocalIdPolicy_Value local_id_policy_value = 1 [json_name = "value"];
                              LocalIdPolicy_RtpRef local_id_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                              LocalIdPolicy_XplRef local_id_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        Qos qos = 11 [json_name = "qos"];
                     }
                     Ipv4Multicast ipv4_multicast = 7 [json_name = "ipv4-multicast"];
                     message L2Vpnad {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool vpls_ad_disable = 2 [json_name = "vpls-ad-disable"];
                           bool vpws_enable = 3 [json_name = "vpws-enable"];
                           bool vpls_enable = 4 [json_name = "vpls-enable"];
                           bool multi_homing_nonstand = 5 [json_name = "multi-homing-nonstand"];
                           bool vpn_orf_enable = 6 [json_name = "vpn-orf-enable"];
                           uint32 route_select_delay = 7 [json_name = "route-select-delay"];
                           bool reflect_change_path = 8 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 9 [json_name = "reflect-between-client"];
                           uint32 default_local_preference = 10 [json_name = "default-local-preference"];
                           bool bestroute_router_id_prior_clusterlist = 11 [json_name = "bestroute-router-id-prior-clusterlist"];
                           string tunnel_selector_name = 12 [json_name = "tunnel-selector-name"];
                           string route_reflector_ext_community_filter = 13 [json_name = "route-reflector-ext-community-filter"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 14 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 15 [json_name = "id"];
                           }
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                              NexthopSelectDependType_DEPENDX_NONE = 3;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 16 [json_name = "nexthop-select-depend-type"];
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     L2Vpnad l2vpnad = 8 [json_name = "l2vpnad"];
                     message Ipv4Flow {
                        message Common {
                           bool route_match_destination = 1 [json_name = "route-match-destination"];
                           bool validation_mode_as = 2 [json_name = "validation-mode-as"];
                           bool redirect_ip_relay_tnl_enable = 3 [json_name = "redirect-ip-relay-tnl-enable"];
                           string redirect_ipv6_relay_tnl_sel_name = 4 [json_name = "redirect-ipv6-relay-tnl-sel-name"];
                           bool reflect_between_client = 5 [json_name = "reflect-between-client"];
                           string redirect_ip_relay_tunnel_selector_name = 6 [json_name = "redirect-ip-relay-tunnel-selector-name"];
                           bool check_origin_as_enable = 7 [json_name = "check-origin-as-enable"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 8 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 9 [json_name = "id"];
                           }
                           bool redirect_load_balancing = 10 [json_name = "redirect-load-balancing"];
                           string local_redirect_ipv6_relay_tunnel_seletor = 11 [json_name = "local-redirect-ipv6-relay-tunnel-seletor"];
                        }
                        Common common = 1 [json_name = "common"];
                        message RoutingTableRibOnly {
                           bool enable = 1 [json_name = "enable"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        RoutingTableRibOnly routing_table_rib_only = 2 [json_name = "routing-table-rib-only"];
                     }
                     Ipv4Flow ipv4_flow = 9 [json_name = "ipv4-flow"];
                     message Ipv6Flow {
                        message Common {
                           bool route_match_destination = 1 [json_name = "route-match-destination"];
                           bool validation_mode_as = 2 [json_name = "validation-mode-as"];
                           bool reflect_between_client = 3 [json_name = "reflect-between-client"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 4 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 5 [json_name = "id"];
                           }
                           bool local_redirect_ipv6_relay_ip = 6 [json_name = "local-redirect-ipv6-relay-ip"];
                           string local_redirect_ipv6_relay_tunnel_seletor = 7 [json_name = "local-redirect-ipv6-relay-tunnel-seletor"];
                           bool redirect_load_balancing = 8 [json_name = "redirect-load-balancing"];
                           bool check_origin_as_enable = 9 [json_name = "check-origin-as-enable"];
                        }
                        Common common = 1 [json_name = "common"];
                        message RoutingTableRibOnly {
                           bool enable = 1 [json_name = "enable"];
                           message PolicyType_RtpRef {
                              string policy_name = 1 [json_name = "policy-name"];
                           }
                           message PolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof PolicyType {
                              PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                              PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        RoutingTableRibOnly routing_table_rib_only = 2 [json_name = "routing-table-rib-only"];
                     }
                     Ipv6Flow ipv6_flow = 10 [json_name = "ipv6-flow"];
                     message Vpntarget {
                        message Common {
                           uint32 external_path_num = 1 [json_name = "external-path-num"];
                           bool rt_filter_disable = 2 [json_name = "rt-filter-disable"];
                           uint32 timer_for_end_of_rib = 3 [json_name = "timer-for-end-of-rib"];
                           uint32 route_select_delay = 4 [json_name = "route-select-delay"];
                           uint32 default_med = 5 [json_name = "default-med"];
                           bool reflect_change_path = 6 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 7 [json_name = "reflect-between-client"];
                           uint32 default_local_preference = 8 [json_name = "default-local-preference"];
                           bool bestroute_router_id_prior_clusterlist = 9 [json_name = "bestroute-router-id-prior-clusterlist"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 10 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 11 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Vpntarget vpntarget = 11 [json_name = "vpntarget"];
                     message Ipv4Srpolicy {
                        message Common {
                           bool routerid_neglect = 1 [json_name = "routerid-neglect"];
                           bool reflect_change_path = 2 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 3 [json_name = "reflect-between-client"];
                           bool router_id_filter = 4 [json_name = "router-id-filter"];
                           uint32 default_local_preference = 5 [json_name = "default-local-preference"];
                           bool bestroute_as_path_ignore = 6 [json_name = "bestroute-as-path-ignore"];
                           enum NexthopSelectDependType {
                              NexthopSelectDependType_NULL = 0;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 7 [json_name = "nexthop-select-depend-type"];
                           bool advertise_ebgp = 8 [json_name = "advertise-ebgp"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 9 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 10 [json_name = "id"];
                           }
                           bool route_target_orf_enable = 11 [json_name = "route-target-orf-enable"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv4Srpolicy ipv4_srpolicy = 12 [json_name = "ipv4-srpolicy"];
                     message L2VpnEvpn {
                        bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                        uint32 add_path_select_num = 2 [json_name = "add-path-select-num"];
                        uint32 label_free_delay = 3 [json_name = "label-free-delay"];
                        uint32 route_select_delay = 4 [json_name = "route-select-delay"];
                        bool exclusive_eviad_enable = 5 [json_name = "exclusive-eviad-enable"];
                        enum LabelPerNexthop {
                           LabelPerNexthop_PERX_ROUTE = 0;
                           LabelPerNexthop_PERX_NEXTHOP = 1;
                        };
                        LabelPerNexthop label_per_nexthop = 6 [json_name = "label-per-nexthop"];
                        bool auto_frr = 7 [json_name = "auto-frr"];
                        uint32 detection_threshold = 8 [json_name = "detection-threshold"];
                        uint32 absolute_detection_threshold = 9 [json_name = "absolute-detection-threshold"];
                        string tunnel_selector = 10 [json_name = "tunnel-selector"];
                        bool vpn_orf_enable = 11 [json_name = "vpn-orf-enable"];
                        enum NexthopSelectDependType {
                           INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                           NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                           NexthopSelectDependType_DEPENDX_IP = 2;
                           NexthopSelectDependType_DEPENDX_NONE = 3;
                        };
                        NexthopSelectDependType nexthop_select_depend_type = 12 [json_name = "nexthop-select-depend-type"];
                        bool reflect_change_path = 13 [json_name = "reflect-change-path"];
                        string rr_ext_community_filter = 14 [json_name = "rr-ext-community-filter"];
                        uint32 time_df_delay = 15 [json_name = "time-df-delay"];
                        message NexthopRecursiveLookup {
                           message Common {
                              bool restrain = 1 [json_name = "restrain"];
                              bool default_route = 2 [json_name = "default-route"];
                           }
                           Common common = 1 [json_name = "common"];
                           message Delay {
                              uint32 time = 1 [json_name = "time"];
                              uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                           }
                           Delay delay = 2 [json_name = "delay"];
                           message BitErrorDetection {
                              bool enable = 1 [json_name = "enable"];
                              uint32 med = 2 [json_name = "med"];
                              uint32 local_preference = 3 [json_name = "local-preference"];
                              string route_policy = 4 [json_name = "route-policy"];
                           }
                           BitErrorDetection bit_error_detection = 3 [json_name = "bit-error-detection"];
                        }
                        NexthopRecursiveLookup nexthop_recursive_lookup = 16 [json_name = "nexthop-recursive-lookup"];
                        bool reflect_between_client = 17 [json_name = "reflect-between-client"];
                        bool bestroute_igp_metric_ignore = 18 [json_name = "bestroute-igp-metric-ignore"];
                        message DampeningRoutes {
                           message DampeningRoute {
                              enum PeerType {
                                 PeerType_EBGP = 0;
                                 PeerType_IBGP = 1;
                              };
                              PeerType peer_type = 1 [json_name = "peer-type"];
                              uint32 half_life_time = 2 [json_name = "half-life-time"];
                              uint32 reuse = 3 [json_name = "reuse"];
                              uint32 suppress = 4 [json_name = "suppress"];
                              uint32 ceiling = 5 [json_name = "ceiling"];
                              bool update_standard = 6 [json_name = "update-standard"];
                              message PolicyType_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                           }
                           repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                        }
                        DampeningRoutes dampening_routes = 19 [json_name = "dampening-routes"];
                        message ReflectorType_Address {
                           string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                        }
                        message ReflectorType_Id {
                           uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                        }
                        oneof ReflectorType {
                           ReflectorType_Address reflector_type_address = 20 [json_name = "address"];
                           ReflectorType_Id reflector_type_id = 21 [json_name = "id"];
                        }
                        bool load_balancing_eibgp_enable = 22 [json_name = "load-balancing-eibgp-enable"];
                        bool load_balanc_igp_metric_ignore = 23 [json_name = "load-balanc-igp-metric-ignore"];
                        bool load_balanc_as_path_ignore = 24 [json_name = "load-balanc-as-path-ignore"];
                        bool load_balanc_as_path_relax = 25 [json_name = "load-balanc-as-path-relax"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 26 [json_name = "slow-peer"];
                        message LoadBalancing {
                           uint32 maximum_load_balancing_import_rib = 1 [json_name = "maximum-load-balancing-import-rib"];
                           message InterworkingRibs {
                              message InterworkingRib {
                                 enum RouteType {
                                    INVALID_ENUM_VALUE_RouteType = 0;
                                    RouteType_IPX_PREFIX = 1;
                                 };
                                 RouteType route_type = 1 [json_name = "route-type"];
                                 uint32 maximum = 2 [json_name = "maximum"];
                              }
                              repeated InterworkingRib interworking_rib = 1 [json_name = "interworking-rib"];
                           }
                           InterworkingRibs interworking_ribs = 2 [json_name = "interworking-ribs"];
                        }
                        LoadBalancing load_balancing = 27 [json_name = "load-balancing"];
                        message ImportVpnRibs {
                           message ImportVpnRib {
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4VPN = 3;
                                 SourceAddressFamily_IPV6VPN = 6;
                              };
                              SourceAddressFamily source_address_family = 1 [json_name = "source-address-family"];
                              enum NexthopType {
                                 INVALID_ENUM_VALUE_NexthopType = 0;
                                 NexthopType_MPLS = 1;
                                 NexthopType_SRV6 = 2;
                              };
                              NexthopType nexthop_type = 2 [json_name = "nexthop-type"];
                              message PolicyType_RtpRef {
                                 string policy_name = 1 [json_name = "policy-name"];
                              }
                              oneof PolicyType {
                                 PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                              }
                           }
                           repeated ImportVpnRib import_vpn_rib = 1 [json_name = "import-vpn-rib"];
                        }
                        ImportVpnRibs import_vpn_ribs = 28 [json_name = "import-vpn-ribs"];
                        message Locators {
                           message Locator {
                              string name = 1 [json_name = "name"];
                           }
                           repeated Locator locator = 1 [json_name = "locator"];
                        }
                        Locators locators = 29 [json_name = "locators"];
                        message ApplySidImportVpnRibs {
                           message ApplySidImportVpnRib {
                              enum SourceAddressFamily {
                                 INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                 SourceAddressFamily_IPV4VPN = 3;
                                 SourceAddressFamily_IPV6VPN = 6;
                              };
                              SourceAddressFamily source_address_family = 1 [json_name = "source-address-family"];
                              enum Mode {
                                 INVALID_ENUM_VALUE_Mode = 0;
                                 Mode_PERX_ROUTE = 1;
                                 Mode_PERX_NEXTHOP = 2;
                              };
                              Mode mode = 2 [json_name = "mode"];
                           }
                           repeated ApplySidImportVpnRib apply_sid_import_vpn_rib = 1 [json_name = "apply-sid-import-vpn-rib"];
                        }
                        ApplySidImportVpnRibs apply_sid_import_vpn_ribs = 30 [json_name = "apply-sid-import-vpn-ribs"];
                        bool inclusive_mac_enable = 31 [json_name = "inclusive-mac-enable"];
                        message BestrouteNexthopPriority {
                           enum NexthopType {
                              INVALID_ENUM_VALUE_NexthopType = 0;
                              NexthopType_IPV4 = 1;
                              NexthopType_IPV6 = 2;
                           };
                           NexthopType nexthop_type = 1 [json_name = "nexthop-type"];
                        }
                        BestrouteNexthopPriority bestroute_nexthop_priority = 32 [json_name = "bestroute-nexthop-priority"];
                        message Interworkings {
                           message Interworking {
                              enum TunnelCombination {
                                 INVALID_ENUM_VALUE_TunnelCombination = 0;
                                 TunnelCombination_SRV6X_MPLS = 1;
                              };
                              TunnelCombination tunnel_combination = 1 [json_name = "tunnel-combination"];
                              enum RouteType {
                                 INVALID_ENUM_VALUE_RouteType = 0;
                                 RouteType_IPX_PREFIX = 1;
                              };
                              RouteType route_type = 2 [json_name = "route-type"];
                           }
                           repeated Interworking interworking = 1 [json_name = "interworking"];
                        }
                        Interworkings interworkings = 33 [json_name = "interworkings"];
                        message ApplySidEvpnRibs {
                           message ApplySidEvpnRib {
                              enum EncapType {
                                 INVALID_ENUM_VALUE_EncapType = 0;
                                 EncapType_MPLS = 1;
                              };
                              EncapType encap_type = 1 [json_name = "encap-type"];
                              enum RouteType {
                                 INVALID_ENUM_VALUE_RouteType = 0;
                                 RouteType_IPX_PREFIX = 1;
                              };
                              RouteType route_type = 2 [json_name = "route-type"];
                              enum Mode {
                                 INVALID_ENUM_VALUE_Mode = 0;
                                 Mode_PERX_ROUTE = 1;
                                 Mode_PERX_NEXTHOP = 2;
                              };
                              Mode mode = 3 [json_name = "mode"];
                           }
                           repeated ApplySidEvpnRib apply_sid_evpn_rib = 1 [json_name = "apply-sid-evpn-rib"];
                        }
                        ApplySidEvpnRibs apply_sid_evpn_ribs = 34 [json_name = "apply-sid-evpn-ribs"];
                        message BestrouteNexthopRecursivePriority {
                           bool nexthop_recursive_srv6_te_policy = 1 [json_name = "nexthop-recursive-srv6-te-policy"];
                        }
                        BestrouteNexthopRecursivePriority bestroute_nexthop_recursive_priority = 35 [json_name = "bestroute-nexthop-recursive-priority"];
                        bool nexthop_resolve_aigp = 36 [json_name = "nexthop-resolve-aigp"];
                        message Option {
                           enum AdvertiseCommunityGracefulShutdown {
                              INVALID_ENUM_VALUE_AdvertiseCommunityGracefulShutdown = 0;
                              AdvertiseCommunityGracefulShutdown_IBGP = 1;
                              AdvertiseCommunityGracefulShutdown_EBGP = 2;
                              AdvertiseCommunityGracefulShutdown_ALL = 3;
                           };
                           AdvertiseCommunityGracefulShutdown advertise_community_graceful_shutdown = 1 [json_name = "advertise-community-graceful-shutdown"];
                        }
                        Option option = 37 [json_name = "option"];
                     }
                     L2VpnEvpn l2vpn_evpn = 13 [json_name = "l2vpn-evpn"];
                     message Ipv4Mvpn {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool vpn_orf_enable = 2 [json_name = "vpn-orf-enable"];
                           uint32 route_select_delay = 3 [json_name = "route-select-delay"];
                           bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 5 [json_name = "reflect-between-client"];
                           uint32 add_path_select_num = 6 [json_name = "add-path-select-num"];
                           string route_reflector_ext_community_filter = 7 [json_name = "route-reflector-ext-community-filter"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 8 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 9 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     Ipv4Mvpn ipv4_mvpn = 14 [json_name = "ipv4-mvpn"];
                     message Ipv6Mvpn {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           uint32 route_select_delay = 2 [json_name = "route-select-delay"];
                           bool reflect_change_path = 3 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 4 [json_name = "reflect-between-client"];
                           uint32 add_path_select_num = 5 [json_name = "add-path-select-num"];
                           string route_reflector_ext_community_filter = 6 [json_name = "route-reflector-ext-community-filter"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 7 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 8 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     Ipv6Mvpn ipv6_mvpn = 15 [json_name = "ipv6-mvpn"];
                     message LinkStateUnicast {
                        message Common {
                           bool reflect_between_client = 1 [json_name = "reflect-between-client"];
                           string domain_as = 2 [json_name = "domain-as"];
                           string domain_identifier = 3 [json_name = "domain-identifier"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 4 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 5 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     LinkStateUnicast link_state_unicast = 16 [json_name = "link-state-unicast"];
                     message Ipv6Srpolicy {
                        message Common {
                           bool reflect_change_path = 1 [json_name = "reflect-change-path"];
                           enum NexthopSelectDependType {
                              NexthopSelectDependType_DEFAULT = 0;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 2 [json_name = "nexthop-select-depend-type"];
                           bool bestroute_as_path_ignore = 3 [json_name = "bestroute-as-path-ignore"];
                           uint32 default_local_preference = 4 [json_name = "default-local-preference"];
                           bool routerid_neglect = 5 [json_name = "routerid-neglect"];
                           bool reflect_between_client = 6 [json_name = "reflect-between-client"];
                           bool advertise_ebgp = 7 [json_name = "advertise-ebgp"];
                           bool router_id_filter = 8 [json_name = "router-id-filter"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 9 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 10 [json_name = "id"];
                           }
                           bool route_target_orf_enable = 11 [json_name = "route-target-orf-enable"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Ipv6Srpolicy ipv6_srpolicy = 17 [json_name = "ipv6-srpolicy"];
                     message Mdt {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool reflect_between_client = 2 [json_name = "reflect-between-client"];
                           bool bestroute_igp_metric_ignore = 3 [json_name = "bestroute-igp-metric-ignore"];
                           bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                           uint32 route_select_delay = 5 [json_name = "route-select-delay"];
                           string route_reflector_ext_community_filter = 6 [json_name = "route-reflector-ext-community-filter"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 7 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 8 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                        message ImportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ImportFilterPolicy import_filter_policy = 3 [json_name = "import-filter-policy"];
                        message ExportFilterPolicy {
                           message Ipv4ImportFilterProtocolPolicyType_AclRef {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                              string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                           }
                           message Ipv4ImportFilterProtocolPolicyType_XplRef {
                              string filter_name = 1 [json_name = "filter-name"];
                              string filter_parameter = 2 [json_name = "filter-parameter"];
                           }
                           oneof Ipv4ImportFilterProtocolPolicyType {
                              Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                              Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                              Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                           }
                        }
                        ExportFilterPolicy export_filter_policy = 4 [json_name = "export-filter-policy"];
                     }
                     Mdt mdt = 18 [json_name = "mdt"];
                     message Ipv4VpnMulticast {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool reflect_between_client = 2 [json_name = "reflect-between-client"];
                           bool reflect_change_path = 3 [json_name = "reflect-change-path"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 4 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 5 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     Ipv4VpnMulticast ipv4_vpn_multicast = 19 [json_name = "ipv4-vpn-multicast"];
                     message Vpnv4Flow {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool reflect_between_client = 2 [json_name = "reflect-between-client"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 3 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 4 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Vpnv4Flow vpnv4_flow = 20 [json_name = "vpnv4-flow"];
                     message Vpnv6Flow {
                        message Common {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool reflect_between_client = 2 [json_name = "reflect-between-client"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 3 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 4 [json_name = "id"];
                           }
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Vpnv6Flow vpnv6_flow = 21 [json_name = "vpnv6-flow"];
                     message Rpd {
                        message Common {
                           bool router_id_filter = 1 [json_name = "router-id-filter"];
                        }
                        Common common = 1 [json_name = "common"];
                     }
                     Rpd rpd = 22 [json_name = "rpd"];
                     message Ipv4SdWan {
                        message Common {
                           bool routerid_neglect = 1 [json_name = "routerid-neglect"];
                           bool reflect_change_path = 2 [json_name = "reflect-change-path"];
                           bool reflect_between_client = 3 [json_name = "reflect-between-client"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 4 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 5 [json_name = "id"];
                           }
                           bool bestroute_as_path_ignore = 6 [json_name = "bestroute-as-path-ignore"];
                        }
                        Common common = 1 [json_name = "common"];
                        message SlowPeer {
                           bool detection = 1 [json_name = "detection"];
                           uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                           bool absolute_detection = 3 [json_name = "absolute-detection"];
                           uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                        }
                        SlowPeer slow_peer = 2 [json_name = "slow-peer"];
                     }
                     Ipv4SdWan ipv4_sd_wan = 23 [json_name = "ipv4-sd-wan"];
                  }
                  repeated Af af = 1 [json_name = "af"];
               }
               Afs afs = 2 [json_name = "afs"];
               message PeerGroups {
                  message PeerGroup {
                     string name = 1 [json_name = "name"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_EBGP = 1;
                        Type_IBGP = 2;
                     };
                     Type type = 2 [json_name = "type"];
                     string local_if_name = 3 [json_name = "local-if-name"];
                     enum PasswordType {
                        PasswordType_NULL = 0;
                        PasswordType_CIPHER = 1;
                        PasswordType_SIMPLE = 2;
                     };
                     PasswordType password_type = 4 [json_name = "password-type"];
                     string password_text = 5 [json_name = "password-text"];
                     string description = 6 [json_name = "description"];
                     message Afs {
                        message Af {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_IPV4UNI = 1;
                              Type_IPV4MULTI = 2;
                              Type_IPV4VPN = 3;
                              Type_IPV4LABELUNI = 4;
                              Type_IPV6UNI = 5;
                              Type_IPV6VPN = 6;
                              Type_L2VPNAD = 8;
                              Type_EVPN = 9;
                              Type_MVPN = 10;
                              Type_VPNTARGET = 11;
                              Type_IPV4VPNMCAST = 12;
                              Type_LS = 13;
                              Type_MDT = 14;
                              Type_MVPNV6 = 16;
                              Type_IPV6SRPOLICY = 21;
                              Type_IPV4SDWAN = 22;
                           };
                           Type type = 1 [json_name = "type"];
                           message Ipv4Unicast {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum OrfType {
                                 OrfType_NULL = 0;
                                 OrfType_IPX_PREFIX = 64;
                                 OrfType_NONSTANDARDX_COMPATIBLE = 128;
                              };
                              OrfType orf_type = 5 [json_name = "orf-type"];
                              enum OrfMode {
                                 OrfMode_NULL = 0;
                                 OrfMode_RECEIVE = 1;
                                 OrfMode_SEND = 2;
                                 OrfMode_BOTH = 3;
                              };
                              OrfMode orf_mode = 6 [json_name = "orf-mode"];
                              bool label_route_capability = 7 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 8 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 9 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 10 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 11 [json_name = "allow-as-loop"];
                              bool aigp = 12 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 13 [json_name = "add-path-mode"];
                              string import_ip_prefix = 14 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 15 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 16 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 17 [json_name = "export-as-path-filter"];
                              bool default_route_advertise = 18 [json_name = "default-route-advertise"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 20 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 21 [json_name = "public-as-only"];
                              bool check_tunnel_reachable = 22 [json_name = "check-tunnel-reachable"];
                              bool check_withdraw_type = 23 [json_name = "check-withdraw-type"];
                              enum DefaultRouteMatchMode {
                                 DefaultRouteMatchMode_NULL = 0;
                                 DefaultRouteMatchMode_MATCHALL = 1;
                                 DefaultRouteMatchMode_MATCHANY = 2;
                              };
                              DefaultRouteMatchMode default_route_match_mode = 24 [json_name = "default-route-match-mode"];
                              uint32 route_update_interval = 25 [json_name = "route-update-interval"];
                              uint32 preferred_value = 26 [json_name = "preferred-value"];
                              uint32 add_path_number = 27 [json_name = "add-path-number"];
                              bool substitute_as_enable = 28 [json_name = "substitute-as-enable"];
                              string soo = 29 [json_name = "soo"];
                              bool keep_all_routes = 30 [json_name = "keep-all-routes"];
                              enum ExpMode {
                                 ExpMode_NULL = 0;
                                 ExpMode_PIPE = 1;
                                 ExpMode_UNIFORM = 2;
                              };
                              ExpMode exp_mode = 31 [json_name = "exp-mode"];
                              bool advertise_best_external = 32 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 33 [json_name = "load-balancing-enable"];
                              bool prefix_sid = 34 [json_name = "prefix-sid"];
                              bool advertise_large_community = 35 [json_name = "advertise-large-community"];
                              message DefaultRouteMatchConditions {
                                 message DefaultRouteMatchCondition {
                                    string address = 1 [json_name = "address"];
                                    uint32 mask = 2 [json_name = "mask"];
                                 }
                                 repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                              }
                              DefaultRouteMatchConditions default_route_match_conditions = 36 [json_name = "default-route-match-conditions"];
                              message EntropyLabelParameter {
                                 bool advertise_entropy_label = 1 [json_name = "advertise-entropy-label"];
                                 string padding = 2 [json_name = "padding"];
                                 enum AttributeType {
                                    INVALID_ENUM_VALUE_AttributeType = 0;
                                    AttributeType_ELC = 1;
                                 };
                                 AttributeType attribute_type = 3 [json_name = "attribute-type"];
                                 bool entropy_label = 4 [json_name = "entropy-label"];
                              }
                              EntropyLabelParameter entropy_label_parameter = 37 [json_name = "entropy-label-parameter"];
                              bool origin_as_validation = 38 [json_name = "origin-as-validation"];
                              string import_acl_name_or_num = 39 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 40 [json_name = "export-acl-name-or-num"];
                              bool update_group_independent = 41 [json_name = "update-group-independent"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 42 [json_name = "public-as-only-import"];
                              message AdvertiseDependentFilter {
                                 string dependent_filter = 1 [json_name = "dependent-filter"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 2 [json_name = "dependent-filter-type"];
                                 string condition_filter = 3 [json_name = "condition-filter"];
                                 message ConditionFiterType_ConditionFilter {
                                    string condition_filter = 1 [json_name = "condition-filter"];
                                 }
                                 message ConditionFiterType_IpPrefixFilter {
                                    string ip_prefix_filter = 1 [json_name = "ip-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter condition_fiter_type_condition_filter = 4 [json_name = "condition-filter"];
                                    ConditionFiterType_IpPrefixFilter condition_fiter_type_ip_prefix_filter = 5 [json_name = "ip-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilter advertise_dependent_filter = 43 [json_name = "advertise-dependent-filter"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 44 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 45 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 46 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 47 [json_name = "xpl-ref"];
                              }
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 48 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 57 [json_name = "xpl-ref"];
                              }
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 49 [json_name = "sid-type5"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 51 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 52 [json_name = "same-length-as-attribute"];
                              }
                              message RouteServer {
                                 bool route_server_client = 1 [json_name = "route-server-client"];
                              }
                              RouteServer route_server = 53 [json_name = "route-server"];
                              message HierarchyConvergence {
                                 bool advertise_hierarchy_convergence = 1 [json_name = "advertise-hierarchy-convergence"];
                              }
                              HierarchyConvergence hierarchy_convergence = 54 [json_name = "hierarchy-convergence"];
                              bool static_route_nexthop_invariable = 55 [json_name = "static-route-nexthop-invariable"];
                              bool unicast_route_nexthop_invariable = 56 [json_name = "unicast-route-nexthop-invariable"];
                              message Option {
                                 enum ExportOriginAsValidation {
                                    ExportOriginAsValidation_DISABLE = 0;
                                    ExportOriginAsValidation_ENABLE = 1;
                                 };
                                 ExportOriginAsValidation export_origin_as_validation = 1 [json_name = "export-origin-as-validation"];
                                 bool include_not_found = 2 [json_name = "include-not-found"];
                                 bool external = 3 [json_name = "external"];
                              }
                              Option option = 58 [json_name = "option"];
                              message LinkBandwidth {
                                 enum Advertise {
                                    Advertise_DISABLE = 0;
                                    Advertise_ENABLE = 1;
                                 };
                                 Advertise advertise = 1 [json_name = "advertise"];
                                 enum Transitive {
                                    Transitive_DISABLE = 0;
                                    Transitive_ENABLE = 1;
                                 };
                                 Transitive transitive = 2 [json_name = "transitive"];
                                 enum Generate {
                                    Generate_DISABLE = 0;
                                    Generate_ENABLE = 1;
                                 };
                                 Generate generate = 3 [json_name = "generate"];
                              }
                              LinkBandwidth link_bandwidth = 59 [json_name = "link-bandwidth"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 60 [json_name = "peer-as-check"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 61 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 62 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 63 [json_name = "sub-type"];
                              }
                           }
                           Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              bool label_route_capability = 5 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 7 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 8 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 9 [json_name = "allow-as-loop"];
                              bool aigp = 10 [json_name = "aigp"];
                              bool default_route_advertise = 11 [json_name = "default-route-advertise"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 13 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 14 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 15 [json_name = "export-ipv6-prefix"];
                              string import_as_path_filter = 16 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 17 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 18 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 19 [json_name = "public-as-only"];
                              enum DefaultRouteMatchMode {
                                 DefaultRouteMatchMode_NULL = 0;
                                 DefaultRouteMatchMode_MATCHALL = 1;
                                 DefaultRouteMatchMode_MATCHANY = 2;
                              };
                              DefaultRouteMatchMode default_route_match_mode = 20 [json_name = "default-route-match-mode"];
                              uint32 route_update_interval = 21 [json_name = "route-update-interval"];
                              uint32 preferred_value = 22 [json_name = "preferred-value"];
                              uint32 add_path_number = 23 [json_name = "add-path-number"];
                              bool substitute_as_enable = 24 [json_name = "substitute-as-enable"];
                              string soo = 25 [json_name = "soo"];
                              bool keep_all_routes = 26 [json_name = "keep-all-routes"];
                              bool advertise_best_external = 27 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 28 [json_name = "load-balancing-enable"];
                              bool prefix_sid = 29 [json_name = "prefix-sid"];
                              bool advertise_large_community = 30 [json_name = "advertise-large-community"];
                              message DefaultRouteMatchConditions {
                                 message DefaultRouteMatchCondition {
                                    string address = 1 [json_name = "address"];
                                    uint32 mask = 2 [json_name = "mask"];
                                 }
                                 repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                              }
                              DefaultRouteMatchConditions default_route_match_conditions = 31 [json_name = "default-route-match-conditions"];
                              bool origin_as_validation = 32 [json_name = "origin-as-validation"];
                              string import_acl6_name_or_num = 33 [json_name = "import-acl6-name-or-num"];
                              string export_acl6_name_or_num = 34 [json_name = "export-acl6-name-or-num"];
                              bool update_group_independent = 35 [json_name = "update-group-independent"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 36 [json_name = "public-as-only-import"];
                              message AdvertiseDependentFilter6 {
                                 string dependent_filter6 = 1 [json_name = "dependent-filter6"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 2 [json_name = "dependent-filter-type"];
                                 string condition_filter6 = 3 [json_name = "condition-filter6"];
                                 message ConditionFiterType_ConditionFilter6 {
                                    string condition_filter6 = 1 [json_name = "condition-filter6"];
                                 }
                                 message ConditionFiterType_Ipv6PrefixFilter {
                                    string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter6 condition_fiter_type_condition_filter6 = 4 [json_name = "condition-filter6"];
                                    ConditionFiterType_Ipv6PrefixFilter condition_fiter_type_ipv6_prefix_filter = 5 [json_name = "ipv6-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilter6 advertise_dependent_filter6 = 37 [json_name = "advertise-dependent-filter6"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 38 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 39 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 40 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 41 [json_name = "xpl-ref"];
                              }
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 42 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 51 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 43 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 44 [json_name = "same-length-as-attribute"];
                              }
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 45 [json_name = "sid-type5"];
                              }
                              message RouteServer {
                                 bool route_server_client = 1 [json_name = "route-server-client"];
                              }
                              RouteServer route_server = 47 [json_name = "route-server"];
                              message HierarchyConvergence {
                                 bool advertise_hierarchy_convergence = 1 [json_name = "advertise-hierarchy-convergence"];
                              }
                              HierarchyConvergence hierarchy_convergence = 48 [json_name = "hierarchy-convergence"];
                              bool static_route_nexthop_invariable = 49 [json_name = "static-route-nexthop-invariable"];
                              bool unicast_route_nexthop_invariable = 50 [json_name = "unicast-route-nexthop-invariable"];
                              message Option {
                                 enum ExportOriginAsValidation {
                                    ExportOriginAsValidation_DISABLE = 0;
                                    ExportOriginAsValidation_ENABLE = 1;
                                 };
                                 ExportOriginAsValidation export_origin_as_validation = 1 [json_name = "export-origin-as-validation"];
                                 bool include_not_found = 2 [json_name = "include-not-found"];
                                 bool external = 3 [json_name = "external"];
                                 enum LabelRouteCapabilityOnly {
                                    LabelRouteCapabilityOnly_DISABLE = 0;
                                    LabelRouteCapabilityOnly_ENABLE = 1;
                                 };
                                 LabelRouteCapabilityOnly label_route_capability_only = 4 [json_name = "label-route-capability-only"];
                              }
                              Option option = 52 [json_name = "option"];
                              message LinkBandwidth {
                                 enum Advertise {
                                    Advertise_DISABLE = 0;
                                    Advertise_ENABLE = 1;
                                 };
                                 Advertise advertise = 1 [json_name = "advertise"];
                                 enum Transitive {
                                    Transitive_DISABLE = 0;
                                    Transitive_ENABLE = 1;
                                 };
                                 Transitive transitive = 2 [json_name = "transitive"];
                                 enum Generate {
                                    Generate_DISABLE = 0;
                                    Generate_ENABLE = 1;
                                 };
                                 Generate generate = 3 [json_name = "generate"];
                              }
                              LinkBandwidth link_bandwidth = 53 [json_name = "link-bandwidth"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 54 [json_name = "peer-as-check"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 55 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 56 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 57 [json_name = "sub-type"];
                              }
                           }
                           Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                           message Ipv4Vpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 5 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool aigp = 7 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 8 [json_name = "add-path-mode"];
                              string import_ip_prefix = 9 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 10 [json_name = "export-ip-prefix"];
                              bool reoriginate_route_enable = 11 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ip_enable = 12 [json_name = "reoriginate-ip-enable"];
                              bool reoriginate_mac_ip_enable = 13 [json_name = "reoriginate-mac-ip-enable"];
                              string import_as_path_filter = 14 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 15 [json_name = "export-as-path-filter"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 16 [json_name = "default-route-originates"];
                              bool reoriginate_vpnv4_route_enable = 17 [json_name = "reoriginate-vpnv4-route-enable"];
                              uint32 route_update_interval = 18 [json_name = "route-update-interval"];
                              uint32 preferred_value = 19 [json_name = "preferred-value"];
                              uint32 add_path_number = 20 [json_name = "add-path-number"];
                              bool upe = 21 [json_name = "upe"];
                              bool advertise_best_external = 22 [json_name = "advertise-best-external"];
                              bool advertise_large_community = 23 [json_name = "advertise-large-community"];
                              bool keep_all_routes = 24 [json_name = "keep-all-routes"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 25 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 26 [json_name = "public-as-only"];
                              bool ignore_bit_error = 27 [json_name = "ignore-bit-error"];
                              string import_acl_name_or_num = 28 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 29 [json_name = "export-acl-name-or-num"];
                              bool update_group_independent = 30 [json_name = "update-group-independent"];
                              bool origin_as_validation = 31 [json_name = "origin-as-validation"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 32 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 33 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 34 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 35 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 36 [json_name = "xpl-ref"];
                              }
                              bool high_priority = 37 [json_name = "high-priority"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 38 [json_name = "peer-as-check"];
                              bool prefix_sid = 39 [json_name = "prefix-sid"];
                              message PrefixSidPacket_SidType5 {
                                 bool sid_type5 = 1 [json_name = "sid-type5"];
                                 bool advertise_srv6_locator = 2 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 40 [json_name = "sid-type5"];
                              }
                           }
                           Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                           message Ipv6Vpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 4 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 5 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool aigp = 7 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 8 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 9 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 10 [json_name = "export-ipv6-prefix"];
                              bool reoriginate_route_enable = 11 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ipv6_enable = 12 [json_name = "reoriginate-ipv6-enable"];
                              bool reoriginate_mac_ipv6_enable = 13 [json_name = "reoriginate-mac-ipv6-enable"];
                              string import_as_path_filter = 14 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 15 [json_name = "export-as-path-filter"];
                              uint32 route_update_interval = 16 [json_name = "route-update-interval"];
                              uint32 preferred_value = 17 [json_name = "preferred-value"];
                              uint32 add_path_number = 18 [json_name = "add-path-number"];
                              bool advertise_best_external = 19 [json_name = "advertise-best-external"];
                              bool advertise_large_community = 20 [json_name = "advertise-large-community"];
                              bool keep_all_routes = 21 [json_name = "keep-all-routes"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 22 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 23 [json_name = "public-as-only"];
                              bool ignore_bit_error = 24 [json_name = "ignore-bit-error"];
                              string import_acl6_name_or_num = 25 [json_name = "import-acl6-name-or-num"];
                              string export_acl6_name_or_num = 26 [json_name = "export-acl6-name-or-num"];
                              bool update_group_independent = 27 [json_name = "update-group-independent"];
                              bool origin_as_validation = 28 [json_name = "origin-as-validation"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 29 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 30 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 31 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 32 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 33 [json_name = "xpl-ref"];
                              }
                              bool high_priority = 34 [json_name = "high-priority"];
                              bool prefix_sid = 35 [json_name = "prefix-sid"];
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 36 [json_name = "sid-type5"];
                              }
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 37 [json_name = "peer-as-check"];
                              bool upe = 38 [json_name = "upe"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 39 [json_name = "default-route-originates"];
                              bool reoriginate_vpnv6_route_enable = 40 [json_name = "reoriginate-vpnv6-route-enable"];
                           }
                           Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                           message Ipv4Labeluni {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool advertise_ext_community = 5 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 6 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 12 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 13 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 14 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 15 [json_name = "public-as-only"];
                              bool check_tunnel_reachable = 16 [json_name = "check-tunnel-reachable"];
                              uint32 route_update_interval = 17 [json_name = "route-update-interval"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 18 [json_name = "nexthop-configure"];
                              uint32 preferred_value = 19 [json_name = "preferred-value"];
                              uint32 add_path_number = 20 [json_name = "add-path-number"];
                              bool substitute_as_enable = 21 [json_name = "substitute-as-enable"];
                              string soo = 22 [json_name = "soo"];
                              bool advertise_best_external = 23 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 24 [json_name = "load-balancing-enable"];
                              bool advertise_large_community = 25 [json_name = "advertise-large-community"];
                              message EntropyLabelParameter {
                                 bool advertise_entropy_label = 1 [json_name = "advertise-entropy-label"];
                                 string padding = 2 [json_name = "padding"];
                                 enum AttributeType {
                                    INVALID_ENUM_VALUE_AttributeType = 0;
                                    AttributeType_ELC = 1;
                                 };
                                 AttributeType attribute_type = 3 [json_name = "attribute-type"];
                                 bool entropy_label = 4 [json_name = "entropy-label"];
                              }
                              EntropyLabelParameter entropy_label_parameter = 26 [json_name = "entropy-label-parameter"];
                              string import_acl_name_or_num = 27 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 28 [json_name = "export-acl-name-or-num"];
                              enum ExpMode {
                                 ExpMode_NULL = 0;
                                 ExpMode_PIPE = 1;
                                 ExpMode_UNIFORM = 2;
                              };
                              ExpMode exp_mode = 29 [json_name = "exp-mode"];
                              bool update_group_independent = 30 [json_name = "update-group-independent"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 31 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 32 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 33 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 34 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 35 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 36 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 37 [json_name = "same-length-as-attribute"];
                              }
                              bool prefix_sid = 38 [json_name = "prefix-sid"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 39 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 40 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 41 [json_name = "sub-type"];
                              }
                           }
                           Ipv4Labeluni ipv4_labeluni = 6 [json_name = "ipv4-labeluni"];
                           message Ipv4Multicast {
                              bool default_route_advertise = 1 [json_name = "default-route-advertise"];
                              string import_ip_prefix = 3 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 4 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 5 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 6 [json_name = "export-as-path-filter"];
                              bool advertise_ext_community = 7 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 8 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 9 [json_name = "allow-as-loop"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 10 [json_name = "nexthop-configure"];
                              bool advertise_community = 11 [json_name = "advertise-community"];
                              bool keep_all_routes = 12 [json_name = "keep-all-routes"];
                              bool reflect_client = 13 [json_name = "reflect-client"];
                              bool advertise_large_community = 14 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 15 [json_name = "route-update-interval"];
                              uint32 preferred_value = 16 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 17 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 18 [json_name = "public-as-only"];
                              string import_acl_name_or_num = 19 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 20 [json_name = "export-acl-name-or-num"];
                              bool load_balancing_enable = 21 [json_name = "load-balancing-enable"];
                              bool update_group_independent = 22 [json_name = "update-group-independent"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 23 [json_name = "public-as-only-import"];
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 24 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 31 [json_name = "xpl-ref"];
                              }
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 25 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 26 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 27 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 28 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 29 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 30 [json_name = "same-length-as-attribute"];
                              }
                           }
                           Ipv4Multicast ipv4_multicast = 7 [json_name = "ipv4-multicast"];
                           message L2Vpnad {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              uint32 allow_as_loop = 3 [json_name = "allow-as-loop"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 4 [json_name = "nexthop-configure"];
                              bool advertise_large_community = 5 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 6 [json_name = "route-update-interval"];
                              uint32 preferred_value = 7 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 8 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 9 [json_name = "public-as-only"];
                              bool vpls_ad_disable = 10 [json_name = "vpls-ad-disable"];
                              bool vpws_enable = 11 [json_name = "vpws-enable"];
                              bool vpls_enable = 12 [json_name = "vpls-enable"];
                              bool update_group_independent = 13 [json_name = "update-group-independent"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 14 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 15 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 16 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 17 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 18 [json_name = "xpl-ref"];
                              }
                           }
                           L2Vpnad l2vpnad = 8 [json_name = "l2vpnad"];
                           message Vpntarget {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool default_route_advertise = 3 [json_name = "default-route-advertise"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool advertise_large_community = 7 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 8 [json_name = "route-update-interval"];
                              uint32 preferred_value = 9 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 10 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 11 [json_name = "public-as-only"];
                              message PublicAsOnlyImport {
                                 bool enable = 1 [json_name = "enable"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 12 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 13 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 15 [json_name = "rtp-ref"];
                              }
                           }
                           Vpntarget vpntarget = 9 [json_name = "vpntarget"];
                           message L2VpnEvpn {
                              bool reflect_client = 1 [json_name = "reflect-client"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool advertise_suppressed_route = 3 [json_name = "advertise-suppressed-route"];
                              enum AddPathMode {
                                 INVALID_ENUM_VALUE_AddPathMode = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 4 [json_name = "add-path-mode"];
                              uint32 advertise_add_path_num = 5 [json_name = "advertise-add-path-num"];
                              bool es_ad_compatible = 6 [json_name = "es-ad-compatible"];
                              string split_group_name = 7 [json_name = "split-group-name"];
                              bool vpn_orf_disable = 8 [json_name = "vpn-orf-disable"];
                              bool upe_enable = 9 [json_name = "upe-enable"];
                              enum NextHopMode {
                                 NextHopMode_NULL = 0;
                                 NextHopMode_LOCAL = 1;
                                 NextHopMode_INVARIABLE = 2;
                              };
                              NextHopMode next_hop_mode = 10 [json_name = "next-hop-mode"];
                              bool advertise_large_community = 11 [json_name = "advertise-large-community"];
                              bool advertise_arp = 12 [json_name = "advertise-arp"];
                              bool advertise_irb = 13 [json_name = "advertise-irb"];
                              bool advertise_irbv6 = 14 [json_name = "advertise-irbv6"];
                              bool advertise_nd = 15 [json_name = "advertise-nd"];
                              enum AdvertiseEncapType {
                                 INVALID_ENUM_VALUE_AdvertiseEncapType = 0;
                                 AdvertiseEncapType_VXLAN = 1;
                                 AdvertiseEncapType_MPLS = 2;
                                 AdvertiseEncapType_SRV6 = 4;
                                 AdvertiseEncapType_SDX_WAN = 5;
                              };
                              AdvertiseEncapType advertise_encap_type = 16 [json_name = "advertise-encap-type"];
                              enum AdvertiseAddPathMode {
                                 INVALID_ENUM_VALUE_AdvertiseAddPathMode = 0;
                                 AdvertiseAddPathMode_RECEIVE = 1;
                                 AdvertiseAddPathMode_SEND = 2;
                                 AdvertiseAddPathMode_BOTH = 3;
                              };
                              AdvertiseAddPathMode advertise_add_path_mode = 17 [json_name = "advertise-add-path-mode"];
                              bool all_route_limit = 18 [json_name = "all-route-limit"];
                              bool mac_route_limit = 19 [json_name = "mac-route-limit"];
                              uint32 route_limit = 20 [json_name = "route-limit"];
                              uint32 route_limit_percent = 21 [json_name = "route-limit-percent"];
                              enum RouteLimitType {
                                 RouteLimitType_NOPARAMETER = 0;
                                 RouteLimitType_ALERTX_ONLY = 1;
                                 RouteLimitType_IDLEX_FOREVER = 2;
                                 RouteLimitType_IDLEX_TIMEOUT = 3;
                              };
                              RouteLimitType route_limit_type = 22 [json_name = "route-limit-type"];
                              uint32 route_limit_idle_timeout = 23 [json_name = "route-limit-idle-timeout"];
                              uint32 route_update_interval = 24 [json_name = "route-update-interval"];
                              bool reoriginated_route_enable = 25 [json_name = "reoriginated-route-enable"];
                              bool reoriginated_mac_route = 26 [json_name = "reoriginated-mac-route"];
                              bool reoriginated_mac_ip_route = 27 [json_name = "reoriginated-mac-ip-route"];
                              bool reoriginated_mac_ipv6_route = 28 [json_name = "reoriginated-mac-ipv6-route"];
                              bool reoriginated_ip_route = 29 [json_name = "reoriginated-ip-route"];
                              bool reoriginated_ipv6_route = 30 [json_name = "reoriginated-ipv6-route"];
                              bool reoriginated_vpnv4_route = 31 [json_name = "reoriginated-vpnv4-route"];
                              bool reoriginated_vpnv6_route = 32 [json_name = "reoriginated-vpnv6-route"];
                              bool high_priority = 33 [json_name = "high-priority"];
                              uint32 preferred_value = 34 [json_name = "preferred-value"];
                              bool mac_detail_route_only = 35 [json_name = "mac-detail-route-only"];
                              bool advertise_srv6_locator = 36 [json_name = "advertise-srv6-locator"];
                              uint32 allow_as_loop = 37 [json_name = "allow-as-loop"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 38 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 40 [json_name = "rtp-ref"];
                              }
                              bool transit_med_to_ebgp = 42 [json_name = "transit-med-to-ebgp"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 43 [json_name = "peer-as-check"];
                              message Option {
                                 bool srv6_label_compatible = 1 [json_name = "srv6-label-compatible"];
                              }
                              Option option = 44 [json_name = "option"];
                           }
                           L2VpnEvpn l2vpn_evpn = 10 [json_name = "l2vpn-evpn"];
                           message Ipv4Mvpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              string import_as_path_filter = 3 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 4 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 5 [json_name = "advertise-c-multicast-route"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              bool advertise_large_community = 7 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 8 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 9 [json_name = "route-limit"];
                              bool nexthop_effective = 10 [json_name = "nexthop-effective"];
                              bool update_group_independent = 11 [json_name = "update-group-independent"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 12 [json_name = "add-path-mode"];
                              uint32 add_path_number = 13 [json_name = "add-path-number"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 14 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 15 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 16 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 17 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv4Mvpn ipv4_mvpn = 11 [json_name = "ipv4-mvpn"];
                           message Ipv6Mvpn {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              string import_as_path_filter = 3 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 4 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 5 [json_name = "advertise-c-multicast-route"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              bool advertise_large_community = 7 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 8 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 9 [json_name = "route-limit"];
                              bool nexthop_effective = 10 [json_name = "nexthop-effective"];
                              bool update_group_independent = 11 [json_name = "update-group-independent"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 12 [json_name = "add-path-mode"];
                              uint32 add_path_number = 13 [json_name = "add-path-number"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 14 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 15 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 16 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 17 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv6Mvpn ipv6_mvpn = 12 [json_name = "ipv6-mvpn"];
                           message LinkStateUnicast {
                              bool reflect_client = 1 [json_name = "reflect-client"];
                              uint32 route_update_interval = 2 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 3 [json_name = "route-limit"];
                              bool update_group_independent = 4 [json_name = "update-group-independent"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                              }
                              uint32 allow_as_loop = 8 [json_name = "allow-as-loop"];
                           }
                           LinkStateUnicast link_state_unicast = 13 [json_name = "link-state-unicast"];
                           message Mdt {
                              bool advertise_large_community = 1 [json_name = "advertise-large-community"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              uint32 route_update_interval = 3 [json_name = "route-update-interval"];
                              string import_acl_name_or_num = 4 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 5 [json_name = "export-acl-name-or-num"];
                              bool update_group_independent = 6 [json_name = "update-group-independent"];
                              string import_ip_prefix = 7 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 8 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 9 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 10 [json_name = "export-as-path-filter"];
                              bool reflect_client = 11 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 12 [json_name = "nexthop-configure"];
                              bool nexthop_effective = 13 [json_name = "nexthop-effective"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 14 [json_name = "route-limit"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 15 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 16 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 17 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 18 [json_name = "xpl-ref"];
                              }
                           }
                           Mdt mdt = 14 [json_name = "mdt"];
                           message Ipv4VpnMulticast {
                              uint32 route_update_interval = 1 [json_name = "route-update-interval"];
                              bool advertise_large_community = 2 [json_name = "advertise-large-community"];
                              bool advertise_community = 3 [json_name = "advertise-community"];
                              bool update_group_independent = 4 [json_name = "update-group-independent"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              bool update_packet_standard_compatible = 6 [json_name = "update-packet-standard-compatible"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 7 [json_name = "route-limit"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 8 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 9 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 11 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv4VpnMulticast ipv4_vpn_multicast = 15 [json_name = "ipv4-vpn-multicast"];
                           message Ipv4SdWan {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool advertise_ext_community = 2 [json_name = "advertise-ext-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              uint32 route_update_interval = 4 [json_name = "route-update-interval"];
                              uint32 allow_as_loop = 5 [json_name = "allow-as-loop"];
                              bool discard_ext_community = 6 [json_name = "discard-ext-community"];
                              string import_as_path_filter = 7 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 8 [json_name = "export-as-path-filter"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 9 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                              }
                              bool safi_non_standard_compabile = 11 [json_name = "safi-non-standard-compabile"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 12 [json_name = "route-limit"];
                           }
                           Ipv4SdWan ipv4_sd_wan = 16 [json_name = "ipv4-sd-wan"];
                           message Ipv6Srpolicy {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                              }
                              bool advertise_ext_community = 7 [json_name = "advertise-ext-community"];
                              uint32 allow_as_loop = 8 [json_name = "allow-as-loop"];
                              uint32 route_update_interval = 9 [json_name = "route-update-interval"];
                              bool advertise_large_community = 10 [json_name = "advertise-large-community"];
                              string import_as_path_filter = 11 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 12 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 13 [json_name = "route-limit"];
                              bool high_priority = 14 [json_name = "high-priority"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 15 [json_name = "nexthop-configure"];
                              bool nexthop_effective = 16 [json_name = "nexthop-effective"];
                              bool route_target_orf_disable = 17 [json_name = "route-target-orf-disable"];
                           }
                           Ipv6Srpolicy ipv6_srpolicy = 17 [json_name = "ipv6-srpolicy"];
                        }
                        repeated Af af = 1 [json_name = "af"];
                     }
                     Afs afs = 7 [json_name = "afs"];
                     string key_chain_name = 8 [json_name = "key-chain-name"];
                     string group_as = 9 [json_name = "group-as"];
                     string local_if_address = 10 [json_name = "local-if-address"];
                     uint32 tcp_mss = 11 [json_name = "tcp-mss"];
                     uint32 ebgp_max_hop = 12 [json_name = "ebgp-max-hop"];
                     uint32 valid_ttl_hops = 13 [json_name = "valid-ttl-hops"];
                     bool tracking_enable = 14 [json_name = "tracking-enable"];
                     uint32 tracking_delay_time = 15 [json_name = "tracking-delay-time"];
                     bool conventional = 16 [json_name = "conventional"];
                     bool route_refresh = 17 [json_name = "route-refresh"];
                     bool four_byte_as = 18 [json_name = "four-byte-as"];
                     bool ignore = 19 [json_name = "ignore"];
                     enum ConnectMode {
                        INVALID_ENUM_VALUE_ConnectMode = 0;
                        ConnectMode_LISTENX_ONLY = 1;
                        ConnectMode_CONNECTX_ONLY = 2;
                        ConnectMode_NULL = 3;
                     };
                     ConnectMode connect_mode = 20 [json_name = "connect-mode"];
                     bool log_change = 21 [json_name = "log-change"];
                     bool path_mtu_auto_discovery = 22 [json_name = "path-mtu-auto-discovery"];
                     bool local_ifnet_disable = 23 [json_name = "local-ifnet-disable"];
                     enum CheckFirstAs {
                        CheckFirstAs_DEFAULT = 0;
                        CheckFirstAs_ENABLE = 1;
                        CheckFirstAs_DISABLE = 2;
                     };
                     CheckFirstAs check_first_as = 24 [json_name = "check-first-as"];
                     message FakeAsParameter {
                        string fake_as = 1 [json_name = "fake-as"];
                        bool dual_as = 2 [json_name = "dual-as"];
                        bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                        bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                     }
                     FakeAsParameter fake_as_parameter = 25 [json_name = "fake-as-parameter"];
                     message Timer {
                        uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                        uint32 hold_time = 2 [json_name = "hold-time"];
                        uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                        uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                     }
                     Timer timer = 26 [json_name = "timer"];
                     message BfdParameter {
                        bool enable = 1 [json_name = "enable"];
                        uint32 multiplier = 3 [json_name = "multiplier"];
                        uint32 min_rx_interval = 4 [json_name = "min-rx-interval"];
                        uint32 min_tx_interval = 5 [json_name = "min-tx-interval"];
                        uint32 valid_ttl_hops = 6 [json_name = "valid-ttl-hops"];
                        message ModeType_Single {
                           bool single_hop = 1 [json_name = "single-hop"];
                           bool compatible = 2 [json_name = "compatible"];
                        }
                        message ModeType_Link {
                           bool per_link_echo = 1 [json_name = "per-link-echo"];
                        }
                        message ModeType_OneArmEcho {
                           bool one_arm_echo = 1 [json_name = "one-arm-echo"];
                        }
                        oneof ModeType {
                           ModeType_Single mode_type_single = 7 [json_name = "single"];
                           ModeType_Link mode_type_link = 8 [json_name = "link"];
                           ModeType_OneArmEcho mode_type_one_arm_echo = 9 [json_name = "one-arm-echo"];
                        }
                     }
                     BfdParameter bfd_parameter = 27 [json_name = "bfd-parameter"];
                     message Members {
                        message Member {
                           string peer_address = 1 [json_name = "peer-address"];
                        }
                        repeated Member member = 1 [json_name = "member"];
                     }
                     Members members = 28 [json_name = "members"];
                     enum MemoryPriority {
                        MemoryPriority_LOW = 0;
                        MemoryPriority_MEDIUM = 1;
                        MemoryPriority_HIGH = 2;
                     };
                     MemoryPriority memory_priority = 29 [json_name = "memory-priority"];
                     message GracefulRestart {
                        bool enable = 1 [json_name = "enable"];
                        uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                        uint32 restart_time = 3 [json_name = "restart-time"];
                        bool peer_reset = 4 [json_name = "peer-reset"];
                     }
                     GracefulRestart graceful_restart = 30 [json_name = "graceful-restart"];
                     message LocalGracefulRestart {
                        bool enable = 1 [json_name = "enable"];
                        uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                        uint32 restart_time = 3 [json_name = "restart-time"];
                     }
                     LocalGracefulRestart local_graceful_restart = 31 [json_name = "local-graceful-restart"];
                     bool oscillation_dampening = 32 [json_name = "oscillation-dampening"];
                     enum PeerEstablishMode {
                        INVALID_ENUM_VALUE_PeerEstablishMode = 0;
                        PeerEstablishMode_STATIC = 1;
                        PeerEstablishMode_DYNAMIC = 2;
                        PeerEstablishMode_UNNUMBERED = 3;
                     };
                     PeerEstablishMode peer_establish_mode = 33 [json_name = "peer-establish-mode"];
                     enum AsNumberType {
                        INVALID_ENUM_VALUE_AsNumberType = 0;
                        AsNumberType_DYNAMICX_NEIGHBOR = 1;
                        AsNumberType_CONFEDERATION = 2;
                     };
                     AsNumberType as_number_type = 34 [json_name = "as-number-type"];
                     repeated string listen_as = 35 [json_name = "listen-as"];
                     message ListenAsSegments {
                        message ListenAsSegment {
                           string begin_as = 1 [json_name = "begin-as"];
                           string end_as = 2 [json_name = "end-as"];
                        }
                        repeated ListenAsSegment listen_as_segment = 1 [json_name = "listen-as-segment"];
                     }
                     ListenAsSegments listen_as_segments = 36 [json_name = "listen-as-segments"];
                     message SslPolicy {
                        string name = 1 [json_name = "name"];
                        enum Role {
                           INVALID_ENUM_VALUE_Role = 0;
                           Role_CLIENT = 1;
                           Role_SERVER = 2;
                        };
                        Role role = 2 [json_name = "role"];
                        bool server_certificate = 3 [json_name = "server-certificate"];
                     }
                     SslPolicy ssl_policy = 37 [json_name = "ssl-policy"];
                     string tcp_ao_name = 38 [json_name = "tcp-ao-name"];
                     message GracefulShutdown {
                        bool enable = 1 [json_name = "enable"];
                        message Attribute_SetAsPrepend {
                           uint32 as_prepend = 1 [json_name = "as-prepend"];
                        }
                        message Attribute_SetLocalPreference {
                           uint32 local_preference = 1 [json_name = "local-preference"];
                        }
                        oneof Attribute {
                           Attribute_SetAsPrepend attribute_set_as_prepend = 2 [json_name = "set-as-prepend"];
                           Attribute_SetLocalPreference attribute_set_local_preference = 3 [json_name = "set-local-preference"];
                        }
                        bool manual_activate = 4 [json_name = "manual-activate"];
                     }
                     GracefulShutdown graceful_shutdown = 39 [json_name = "graceful-shutdown"];
                  }
                  repeated PeerGroup peer_group = 1 [json_name = "peer-group"];
               }
               PeerGroups peer_groups = 3 [json_name = "peer-groups"];
               message Peers {
                  message Peer {
                     string address = 1 [json_name = "address"];
                     string remote_as = 2 [json_name = "remote-as"];
                     string group_name = 3 [json_name = "group-name"];
                     string local_if_name = 4 [json_name = "local-if-name"];
                     enum PasswordType {
                        PasswordType_NULL = 0;
                        PasswordType_CIPHER = 1;
                        PasswordType_SIMPLE = 2;
                     };
                     PasswordType password_type = 5 [json_name = "password-type"];
                     string password_text = 6 [json_name = "password-text"];
                     string description = 7 [json_name = "description"];
                     message Afs {
                        message Af {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_IPV4UNI = 1;
                              Type_IPV4MULTI = 2;
                              Type_IPV4VPN = 3;
                              Type_IPV4LABELUNI = 4;
                              Type_IPV6UNI = 5;
                              Type_IPV6VPN = 6;
                              Type_IPV4FLOW = 7;
                              Type_L2VPNAD = 8;
                              Type_EVPN = 9;
                              Type_MVPN = 10;
                              Type_VPNTARGET = 11;
                              Type_IPV4VPNMCAST = 12;
                              Type_LS = 13;
                              Type_MDT = 14;
                              Type_IPV6FLOW = 15;
                              Type_MVPNV6 = 16;
                              Type_VPNV4FLOW = 17;
                              Type_VPNV6FLOW = 18;
                              Type_RPD = 19;
                              Type_IPV4SRPOLICY = 20;
                              Type_IPV6SRPOLICY = 21;
                              Type_IPV4SDWAN = 22;
                           };
                           Type type = 1 [json_name = "type"];
                           message Ipv4Unicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum OrfType {
                                 OrfType_NULL = 0;
                                 OrfType_IPX_PREFIX = 64;
                                 OrfType_NONSTANDARDX_COMPATIBLE = 128;
                              };
                              OrfType orf_type = 6 [json_name = "orf-type"];
                              enum OrfMode {
                                 OrfMode_NULL = 0;
                                 OrfMode_RECEIVE = 1;
                                 OrfMode_SEND = 2;
                                 OrfMode_BOTH = 3;
                              };
                              OrfMode orf_mode = 7 [json_name = "orf-mode"];
                              bool label_route_capability = 8 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 9 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 10 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 11 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 12 [json_name = "allow-as-loop"];
                              bool aigp = 13 [json_name = "aigp"];
                              bool default_route_advertise = 14 [json_name = "default-route-advertise"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 16 [json_name = "add-path-mode"];
                              string import_ip_prefix = 17 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 18 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 19 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 20 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 21 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 22 [json_name = "public-as-only"];
                              bool check_tunnel_reachable = 23 [json_name = "check-tunnel-reachable"];
                              bool check_withdraw_type = 24 [json_name = "check-withdraw-type"];
                              enum DefaultRouteMatchMode {
                                 DefaultRouteMatchMode_NULL = 0;
                                 DefaultRouteMatchMode_MATCHALL = 1;
                                 DefaultRouteMatchMode_MATCHANY = 2;
                              };
                              DefaultRouteMatchMode default_route_match_mode = 25 [json_name = "default-route-match-mode"];
                              uint32 route_update_interval = 26 [json_name = "route-update-interval"];
                              uint32 preferred_value = 27 [json_name = "preferred-value"];
                              uint32 add_path_number = 28 [json_name = "add-path-number"];
                              bool substitute_as_enable = 29 [json_name = "substitute-as-enable"];
                              string soo = 30 [json_name = "soo"];
                              bool keep_all_routes = 31 [json_name = "keep-all-routes"];
                              enum ExpMode {
                                 ExpMode_NULL = 0;
                                 ExpMode_PIPE = 1;
                                 ExpMode_UNIFORM = 2;
                              };
                              ExpMode exp_mode = 32 [json_name = "exp-mode"];
                              bool advertise_best_external = 33 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 34 [json_name = "load-balancing-enable"];
                              enum PrefixSid {
                                 PrefixSid_DEFAULT = 0;
                                 PrefixSid_ENABLE = 1;
                                 PrefixSid_DISABLE = 2;
                              };
                              PrefixSid prefix_sid = 35 [json_name = "prefix-sid"];
                              bool prefix_sid_state = 36 [json_name = "prefix-sid-state"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 37 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 38 [json_name = "advertise-large-community-state"];
                              message DefaultRouteMatchConditions {
                                 message DefaultRouteMatchCondition {
                                    string address = 1 [json_name = "address"];
                                    uint32 mask = 2 [json_name = "mask"];
                                 }
                                 repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                              }
                              DefaultRouteMatchConditions default_route_match_conditions = 39 [json_name = "default-route-match-conditions"];
                              message EntropyLabelParameter {
                                 enum AdvertiseEntropyLabel {
                                    AdvertiseEntropyLabel_DEFAULT = 0;
                                    AdvertiseEntropyLabel_ENABLE = 1;
                                    AdvertiseEntropyLabel_DISABLE = 2;
                                 };
                                 AdvertiseEntropyLabel advertise_entropy_label = 1 [json_name = "advertise-entropy-label"];
                                 string padding = 2 [json_name = "padding"];
                                 enum AttributeType {
                                    INVALID_ENUM_VALUE_AttributeType = 0;
                                    AttributeType_ELC = 1;
                                 };
                                 AttributeType attribute_type = 3 [json_name = "attribute-type"];
                                 enum EntropyLabel {
                                    EntropyLabel_DEFAULT = 0;
                                    EntropyLabel_ENABLE = 1;
                                    EntropyLabel_DISABLE = 2;
                                 };
                                 EntropyLabel entropy_label = 4 [json_name = "entropy-label"];
                                 bool effect_advertise_entropy_label = 5 [json_name = "effect-advertise-entropy-label"];
                                 string effect_padding = 6 [json_name = "effect-padding"];
                                 enum EffectAttributeType {
                                    INVALID_ENUM_VALUE_EffectAttributeType = 0;
                                    EffectAttributeType_ELC = 1;
                                 };
                                 EffectAttributeType effect_attribute_type = 7 [json_name = "effect-attribute-type"];
                                 bool effect_entropy_label = 8 [json_name = "effect-entropy-label"];
                              }
                              EntropyLabelParameter entropy_label_parameter = 40 [json_name = "entropy-label-parameter"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 41 [json_name = "path-attribute-treats"];
                              bool origin_as_validation = 42 [json_name = "origin-as-validation"];
                              string import_acl_name_or_num = 43 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 44 [json_name = "export-acl-name-or-num"];
                              message EffectState {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              EffectState effect_state = 45 [json_name = "effect-state"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 46 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 47 [json_name = "update-group-independent-state"];
                              enum RpdPolicyExport {
                                 RpdPolicyExport_DEFAULT = 0;
                                 RpdPolicyExport_ENABLE = 1;
                              };
                              RpdPolicyExport rpd_policy_export = 48 [json_name = "rpd-policy-export"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 49 [json_name = "public-as-only-import"];
                              message AdvertiseDependentFilter {
                                 enum DependentFilterSwitch {
                                    DependentFilterSwitch_DISABLE = 0;
                                    DependentFilterSwitch_ENABLE = 1;
                                 };
                                 DependentFilterSwitch dependent_filter_switch = 1 [json_name = "dependent-filter-switch"];
                                 string dependent_filter = 2 [json_name = "dependent-filter"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 3 [json_name = "dependent-filter-type"];
                                 string condition_filter = 4 [json_name = "condition-filter"];
                                 message ConditionFiterType_ConditionFilter {
                                    string condition_filter = 1 [json_name = "condition-filter"];
                                 }
                                 message ConditionFiterType_IpPrefixFilter {
                                    string ip_prefix_filter = 1 [json_name = "ip-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter condition_fiter_type_condition_filter = 5 [json_name = "condition-filter"];
                                    ConditionFiterType_IpPrefixFilter condition_fiter_type_ip_prefix_filter = 6 [json_name = "ip-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilter advertise_dependent_filter = 50 [json_name = "advertise-dependent-filter"];
                              message AdvertiseDependentFilterState {
                                 string dependent_filter = 1 [json_name = "dependent-filter"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 2 [json_name = "dependent-filter-type"];
                                 string condition_filter = 3 [json_name = "condition-filter"];
                                 message ConditionFiterType_ConditionFilter {
                                    string condition_filter = 1 [json_name = "condition-filter"];
                                 }
                                 message ConditionFiterType_IpPrefixFilter {
                                    string ip_prefix_filter = 1 [json_name = "ip-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter condition_fiter_type_condition_filter = 4 [json_name = "condition-filter"];
                                    ConditionFiterType_IpPrefixFilter condition_fiter_type_ip_prefix_filter = 5 [json_name = "ip-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilterState advertise_dependent_filter_state = 51 [json_name = "advertise-dependent-filter-state"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 52 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 53 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 54 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 55 [json_name = "xpl-ref"];
                              }
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 56 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 65 [json_name = "xpl-ref"];
                              }
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 57 [json_name = "sid-type5"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 59 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 60 [json_name = "same-length-as-attribute"];
                              }
                              message RouteServer {
                                 enum RouteServerClient {
                                    RouteServerClient_DISABLE = 0;
                                    RouteServerClient_ENABLE = 1;
                                 };
                                 RouteServerClient route_server_client = 1 [json_name = "route-server-client"];
                              }
                              RouteServer route_server = 61 [json_name = "route-server"];
                              message HierarchyConvergence {
                                 enum AdvertiseHierarchyConvergence {
                                    AdvertiseHierarchyConvergence_DISABLE = 0;
                                    AdvertiseHierarchyConvergence_ENABLE = 1;
                                 };
                                 AdvertiseHierarchyConvergence advertise_hierarchy_convergence = 1 [json_name = "advertise-hierarchy-convergence"];
                                 bool effect_advertise_hierarchy_convergence = 2 [json_name = "effect-advertise-hierarchy-convergence"];
                              }
                              HierarchyConvergence hierarchy_convergence = 62 [json_name = "hierarchy-convergence"];
                              bool static_route_nexthop_invariable = 63 [json_name = "static-route-nexthop-invariable"];
                              bool unicast_route_nexthop_invariable = 64 [json_name = "unicast-route-nexthop-invariable"];
                              message Option {
                                 enum ExportOriginAsValidation {
                                    ExportOriginAsValidation_DISABLE = 0;
                                    ExportOriginAsValidation_ENABLE = 1;
                                 };
                                 ExportOriginAsValidation export_origin_as_validation = 1 [json_name = "export-origin-as-validation"];
                                 bool include_not_found = 2 [json_name = "include-not-found"];
                                 bool external = 3 [json_name = "external"];
                              }
                              Option option = 66 [json_name = "option"];
                              message LinkBandwidth {
                                 enum Advertise {
                                    Advertise_DISABLE = 0;
                                    Advertise_ENABLE = 1;
                                 };
                                 Advertise advertise = 1 [json_name = "advertise"];
                                 enum Transitive {
                                    Transitive_DISABLE = 0;
                                    Transitive_ENABLE = 1;
                                 };
                                 Transitive transitive = 2 [json_name = "transitive"];
                                 enum Generate {
                                    Generate_DISABLE = 0;
                                    Generate_ENABLE = 1;
                                 };
                                 Generate generate = 3 [json_name = "generate"];
                              }
                              LinkBandwidth link_bandwidth = 67 [json_name = "link-bandwidth"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 68 [json_name = "peer-as-check"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 69 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 70 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 71 [json_name = "sub-type"];
                              }
                           }
                           Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              bool label_route_capability = 6 [json_name = "label-route-capability"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 7 [json_name = "nexthop-configure"];
                              bool advertise_ext_community = 8 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 9 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 10 [json_name = "allow-as-loop"];
                              bool aigp = 11 [json_name = "aigp"];
                              bool default_route_advertise = 12 [json_name = "default-route-advertise"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 14 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 15 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 16 [json_name = "export-ipv6-prefix"];
                              string import_as_path_filter = 17 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 18 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 19 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 20 [json_name = "public-as-only"];
                              enum DefaultRouteMatchMode {
                                 DefaultRouteMatchMode_NULL = 0;
                                 DefaultRouteMatchMode_MATCHALL = 1;
                                 DefaultRouteMatchMode_MATCHANY = 2;
                              };
                              DefaultRouteMatchMode default_route_match_mode = 21 [json_name = "default-route-match-mode"];
                              uint32 route_update_interval = 22 [json_name = "route-update-interval"];
                              uint32 preferred_value = 23 [json_name = "preferred-value"];
                              uint32 add_path_number = 24 [json_name = "add-path-number"];
                              bool substitute_as_enable = 25 [json_name = "substitute-as-enable"];
                              string soo = 26 [json_name = "soo"];
                              bool keep_all_routes = 27 [json_name = "keep-all-routes"];
                              bool advertise_best_external = 28 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 29 [json_name = "load-balancing-enable"];
                              string tunnel_policy = 30 [json_name = "tunnel-policy"];
                              enum PrefixSid {
                                 PrefixSid_DEFAULT = 0;
                                 PrefixSid_ENABLE = 1;
                                 PrefixSid_DISABLE = 2;
                              };
                              PrefixSid prefix_sid = 31 [json_name = "prefix-sid"];
                              bool prefix_sid_state = 32 [json_name = "prefix-sid-state"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 33 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 34 [json_name = "advertise-large-community-state"];
                              message DefaultRouteMatchConditions {
                                 message DefaultRouteMatchCondition {
                                    string address = 1 [json_name = "address"];
                                    uint32 mask = 2 [json_name = "mask"];
                                 }
                                 repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                              }
                              DefaultRouteMatchConditions default_route_match_conditions = 35 [json_name = "default-route-match-conditions"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 36 [json_name = "path-attribute-treats"];
                              bool origin_as_validation = 37 [json_name = "origin-as-validation"];
                              string import_acl6_name_or_num = 38 [json_name = "import-acl6-name-or-num"];
                              string export_acl6_name_or_num = 39 [json_name = "export-acl6-name-or-num"];
                              message EffectState {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              EffectState effect_state = 40 [json_name = "effect-state"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 41 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 42 [json_name = "update-group-independent-state"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 43 [json_name = "public-as-only-import"];
                              message AdvertiseDependentFilter6 {
                                 enum DependentFilterSwitch {
                                    DependentFilterSwitch_DISABLE = 0;
                                    DependentFilterSwitch_ENABLE = 1;
                                 };
                                 DependentFilterSwitch dependent_filter_switch = 1 [json_name = "dependent-filter-switch"];
                                 string dependent_filter6 = 2 [json_name = "dependent-filter6"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 3 [json_name = "dependent-filter-type"];
                                 string condition_filter6 = 4 [json_name = "condition-filter6"];
                                 message ConditionFiterType_ConditionFilter6 {
                                    string condition_filter6 = 1 [json_name = "condition-filter6"];
                                 }
                                 message ConditionFiterType_Ipv6PrefixFilter {
                                    string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter6 condition_fiter_type_condition_filter6 = 5 [json_name = "condition-filter6"];
                                    ConditionFiterType_Ipv6PrefixFilter condition_fiter_type_ipv6_prefix_filter = 6 [json_name = "ipv6-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilter6 advertise_dependent_filter6 = 44 [json_name = "advertise-dependent-filter6"];
                              message AdvertiseDependentFilter6State {
                                 string dependent_filter6 = 1 [json_name = "dependent-filter6"];
                                 enum DependentFilterType {
                                    INVALID_ENUM_VALUE_DependentFilterType = 0;
                                    DependentFilterType_MATCHX_ALL = 1;
                                    DependentFilterType_MATCHX_ONE = 2;
                                    DependentFilterType_MATCHX_NONE = 3;
                                 };
                                 DependentFilterType dependent_filter_type = 2 [json_name = "dependent-filter-type"];
                                 string condition_filter6 = 3 [json_name = "condition-filter6"];
                                 message ConditionFiterType_ConditionFilter6 {
                                    string condition_filter6 = 1 [json_name = "condition-filter6"];
                                 }
                                 message ConditionFiterType_Ipv6PrefixFilter {
                                    string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                                 }
                                 oneof ConditionFiterType {
                                    ConditionFiterType_ConditionFilter6 condition_fiter_type_condition_filter6 = 4 [json_name = "condition-filter6"];
                                    ConditionFiterType_Ipv6PrefixFilter condition_fiter_type_ipv6_prefix_filter = 5 [json_name = "ipv6-prefix-filter"];
                                 }
                              }
                              AdvertiseDependentFilter6State advertise_dependent_filter6_state = 45 [json_name = "advertise-dependent-filter6-state"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 46 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 47 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 48 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 49 [json_name = "xpl-ref"];
                              }
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 50 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 59 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 51 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 52 [json_name = "same-length-as-attribute"];
                              }
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 53 [json_name = "sid-type5"];
                              }
                              message RouteServer {
                                 enum RouteServerClient {
                                    RouteServerClient_DISABLE = 0;
                                    RouteServerClient_ENABLE = 1;
                                 };
                                 RouteServerClient route_server_client = 1 [json_name = "route-server-client"];
                              }
                              RouteServer route_server = 55 [json_name = "route-server"];
                              message HierarchyConvergence {
                                 enum AdvertiseHierarchyConvergence {
                                    AdvertiseHierarchyConvergence_DISABLE = 0;
                                    AdvertiseHierarchyConvergence_ENABLE = 1;
                                 };
                                 AdvertiseHierarchyConvergence advertise_hierarchy_convergence = 1 [json_name = "advertise-hierarchy-convergence"];
                                 bool effect_advertise_hierarchy_convergence = 2 [json_name = "effect-advertise-hierarchy-convergence"];
                              }
                              HierarchyConvergence hierarchy_convergence = 56 [json_name = "hierarchy-convergence"];
                              bool static_route_nexthop_invariable = 57 [json_name = "static-route-nexthop-invariable"];
                              bool unicast_route_nexthop_invariable = 58 [json_name = "unicast-route-nexthop-invariable"];
                              message Option {
                                 enum ExportOriginAsValidation {
                                    ExportOriginAsValidation_DISABLE = 0;
                                    ExportOriginAsValidation_ENABLE = 1;
                                 };
                                 ExportOriginAsValidation export_origin_as_validation = 1 [json_name = "export-origin-as-validation"];
                                 bool include_not_found = 2 [json_name = "include-not-found"];
                                 bool external = 3 [json_name = "external"];
                                 enum LabelRouteCapabilityOnly {
                                    LabelRouteCapabilityOnly_DISABLE = 0;
                                    LabelRouteCapabilityOnly_ENABLE = 1;
                                 };
                                 LabelRouteCapabilityOnly label_route_capability_only = 4 [json_name = "label-route-capability-only"];
                              }
                              Option option = 60 [json_name = "option"];
                              message LinkBandwidth {
                                 enum Advertise {
                                    Advertise_DISABLE = 0;
                                    Advertise_ENABLE = 1;
                                 };
                                 Advertise advertise = 1 [json_name = "advertise"];
                                 enum Transitive {
                                    Transitive_DISABLE = 0;
                                    Transitive_ENABLE = 1;
                                 };
                                 Transitive transitive = 2 [json_name = "transitive"];
                                 enum Generate {
                                    Generate_DISABLE = 0;
                                    Generate_ENABLE = 1;
                                 };
                                 Generate generate = 3 [json_name = "generate"];
                              }
                              LinkBandwidth link_bandwidth = 61 [json_name = "link-bandwidth"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 62 [json_name = "peer-as-check"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 63 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 64 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 65 [json_name = "sub-type"];
                              }
                           }
                           Ipv6Unicast ipv6_unicast = 3 [json_name = "ipv6-unicast"];
                           message Ipv4Vpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                              bool reoriginate_route_enable = 12 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ip_enable = 13 [json_name = "reoriginate-ip-enable"];
                              bool reoriginate_mac_ip_enable = 14 [json_name = "reoriginate-mac-ip-enable"];
                              string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 17 [json_name = "default-route-originates"];
                              bool reoriginate_vpnv4_route_enable = 18 [json_name = "reoriginate-vpnv4-route-enable"];
                              uint32 route_update_interval = 19 [json_name = "route-update-interval"];
                              uint32 preferred_value = 20 [json_name = "preferred-value"];
                              uint32 add_path_number = 21 [json_name = "add-path-number"];
                              bool upe = 22 [json_name = "upe"];
                              enum HighPriority {
                                 HighPriority_DEFAULT = 0;
                                 HighPriority_ENABLE = 1;
                                 HighPriority_DISABLE = 2;
                              };
                              HighPriority high_priority = 23 [json_name = "high-priority"];
                              enum PrefixSid {
                                 PrefixSid_DEFAULT = 0;
                                 PrefixSid_ENABLE = 1;
                                 PrefixSid_DISABLE = 2;
                              };
                              PrefixSid prefix_sid = 24 [json_name = "prefix-sid"];
                              bool advertise_best_external = 25 [json_name = "advertise-best-external"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 26 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 27 [json_name = "advertise-large-community-state"];
                              bool keep_all_routes = 28 [json_name = "keep-all-routes"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 29 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 30 [json_name = "public-as-only"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 31 [json_name = "path-attribute-treats"];
                              bool ignore_bit_error = 32 [json_name = "ignore-bit-error"];
                              string import_acl_name_or_num = 33 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 34 [json_name = "export-acl-name-or-num"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 35 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 36 [json_name = "update-group-independent-state"];
                              bool origin_as_validation = 37 [json_name = "origin-as-validation"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 38 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 39 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 40 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 41 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 42 [json_name = "xpl-ref"];
                              }
                              message PrefixSidPacket_SidType5 {
                                 bool sid_type5 = 1 [json_name = "sid-type5"];
                                 bool advertise_srv6_locator = 2 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 43 [json_name = "sid-type5"];
                              }
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 44 [json_name = "peer-as-check"];
                           }
                           Ipv4Vpn ipv4_vpn = 4 [json_name = "ipv4-vpn"];
                           message Ipv6Vpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 5 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 6 [json_name = "nexthop-configure"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              bool aigp = 8 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 9 [json_name = "add-path-mode"];
                              string import_ipv6_prefix = 10 [json_name = "import-ipv6-prefix"];
                              string export_ipv6_prefix = 11 [json_name = "export-ipv6-prefix"];
                              bool reoriginate_route_enable = 12 [json_name = "reoriginate-route-enable"];
                              bool reoriginate_ipv6_enable = 13 [json_name = "reoriginate-ipv6-enable"];
                              bool reoriginate_mac_ipv6_enable = 14 [json_name = "reoriginate-mac-ipv6-enable"];
                              string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                              uint32 route_update_interval = 17 [json_name = "route-update-interval"];
                              uint32 preferred_value = 18 [json_name = "preferred-value"];
                              uint32 add_path_number = 19 [json_name = "add-path-number"];
                              bool advertise_best_external = 20 [json_name = "advertise-best-external"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 21 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 22 [json_name = "advertise-large-community-state"];
                              bool keep_all_routes = 23 [json_name = "keep-all-routes"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 24 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 25 [json_name = "public-as-only"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 26 [json_name = "path-attribute-treats"];
                              bool ignore_bit_error = 27 [json_name = "ignore-bit-error"];
                              string import_acl6_name_or_num = 28 [json_name = "import-acl6-name-or-num"];
                              string export_acl6_name_or_num = 29 [json_name = "export-acl6-name-or-num"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 30 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 31 [json_name = "update-group-independent-state"];
                              bool origin_as_validation = 32 [json_name = "origin-as-validation"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 33 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 34 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 35 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 36 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 37 [json_name = "xpl-ref"];
                              }
                              enum HighPriority {
                                 HighPriority_DEFAULT = 0;
                                 HighPriority_ENABLE = 1;
                                 HighPriority_DISABLE = 2;
                              };
                              HighPriority high_priority = 38 [json_name = "high-priority"];
                              enum PrefixSid {
                                 PrefixSid_DEFAULT = 0;
                                 PrefixSid_ENABLE = 1;
                                 PrefixSid_DISABLE = 2;
                              };
                              PrefixSid prefix_sid = 39 [json_name = "prefix-sid"];
                              bool prefix_sid_state = 40 [json_name = "prefix-sid-state"];
                              message PrefixSidPacket_SidType5 {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                              }
                              oneof PrefixSidPacket {
                                 PrefixSidPacket_SidType5 prefix_sid_packet_sid_type5 = 41 [json_name = "sid-type5"];
                              }
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 42 [json_name = "peer-as-check"];
                              bool upe = 43 [json_name = "upe"];
                              message DefaultRouteOriginates {
                                 message DefaultRouteOriginate {
                                    string vpn_name = 1 [json_name = "vpn-name"];
                                 }
                                 repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                              }
                              DefaultRouteOriginates default_route_originates = 44 [json_name = "default-route-originates"];
                              bool reoriginate_vpnv6_route_enable = 45 [json_name = "reoriginate-vpnv6-route-enable"];
                           }
                           Ipv6Vpn ipv6_vpn = 5 [json_name = "ipv6-vpn"];
                           message State {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_EBGP = 1;
                                 Type_IBGP = 2;
                                 Type_CONFEDX_EBGP = 3;
                                 Type_CONFEDX_IBGP = 4;
                              };
                              Type type = 1 [json_name = "type"];
                              uint32 version = 2 [json_name = "version"];
                              string remote_router_id = 3 [json_name = "remote-router-id"];
                              enum CurrentState {
                                 INVALID_ENUM_VALUE_CurrentState = 0;
                                 CurrentState_IDLE = 1;
                                 CurrentState_CONNECT = 2;
                                 CurrentState_ACTIVE = 3;
                                 CurrentState_OPENSENT = 4;
                                 CurrentState_OPENCONFIRM = 5;
                                 CurrentState_ESTABLISHED = 6;
                                 CurrentState_IDLEX_ADMIN = 7;
                                 CurrentState_IDLEX_OVLMT = 8;
                                 CurrentState_NOX_NEG = 9;
                              };
                              CurrentState current_state = 4 [json_name = "current-state"];
                              uint32 local_port = 5 [json_name = "local-port"];
                              uint32 remote_port = 6 [json_name = "remote-port"];
                              string current_event = 7 [json_name = "current-event"];
                              enum LastState {
                                 INVALID_ENUM_VALUE_LastState = 0;
                                 LastState_IDLE = 1;
                                 LastState_CONNECT = 2;
                                 LastState_ACTIVE = 3;
                                 LastState_OPENSENT = 4;
                                 LastState_OPENCONFIRM = 5;
                                 LastState_ESTABLISHED = 6;
                                 LastState_IDLEX_ADMIN = 7;
                                 LastState_IDLEX_OVLMT = 8;
                                 LastState_NOX_NEG = 9;
                              };
                              LastState last_state = 8 [json_name = "last-state"];
                              string up_down_duration = 9 [json_name = "up-down-duration"];
                              uint32 send_message = 10 [json_name = "send-message"];
                              enum RpdCapability {
                                 RpdCapability_NULL = 0;
                                 RpdCapability_RECEIVE = 1;
                                 RpdCapability_SEND = 2;
                                 RpdCapability_BOTH = 3;
                              };
                              RpdCapability rpd_capability = 11 [json_name = "rpd-capability"];
                              enum LocalRpdCapability {
                                 LocalRpdCapability_NULL = 0;
                                 LocalRpdCapability_RECEIVE = 1;
                                 LocalRpdCapability_SEND = 2;
                                 LocalRpdCapability_BOTH = 3;
                              };
                              LocalRpdCapability local_rpd_capability = 12 [json_name = "local-rpd-capability"];
                              enum NegotiateRpdCapability {
                                 NegotiateRpdCapability_NULL = 0;
                                 NegotiateRpdCapability_RECEIVE = 1;
                                 NegotiateRpdCapability_SEND = 2;
                                 NegotiateRpdCapability_BOTH = 3;
                              };
                              NegotiateRpdCapability negotiate_rpd_capability = 13 [json_name = "negotiate-rpd-capability"];
                              uint32 receive_message = 14 [json_name = "receive-message"];
                              uint32 out_queue = 15 [json_name = "out-queue"];
                              uint32 receive_hold_time = 16 [json_name = "receive-hold-time"];
                              string receive_last_keepalive_time = 17 [json_name = "receive-last-keepalive-time"];
                              uint32 negotiate_hold_time = 18 [json_name = "negotiate-hold-time"];
                              uint32 negotiate_keepalive_time = 19 [json_name = "negotiate-keepalive-time"];
                              uint32 receive_update_count = 20 [json_name = "receive-update-count"];
                              uint32 receive_open_count = 21 [json_name = "receive-open-count"];
                              uint32 receive_keepalive_count = 22 [json_name = "receive-keepalive-count"];
                              uint32 receive_notification_count = 23 [json_name = "receive-notification-count"];
                              uint32 receive_route_refresh_count = 24 [json_name = "receive-route-refresh-count"];
                              uint32 send_update_count = 25 [json_name = "send-update-count"];
                              uint32 send_open_count = 26 [json_name = "send-open-count"];
                              uint32 send_keepalive_count = 27 [json_name = "send-keepalive-count"];
                              uint32 send_notification_count = 28 [json_name = "send-notification-count"];
                              uint32 send_route_refresh_count = 29 [json_name = "send-route-refresh-count"];
                              bool send_graceful_restart_capability = 30 [json_name = "send-graceful-restart-capability"];
                              bool receive_refresh_capability = 31 [json_name = "receive-refresh-capability"];
                              bool receive_four_byte_as_capability = 32 [json_name = "receive-four-byte-as-capability"];
                              bool receive_multi_protocol_capability = 33 [json_name = "receive-multi-protocol-capability"];
                              bool receive_graceful_restart_capability = 34 [json_name = "receive-graceful-restart-capability"];
                              string receive_add_path = 35 [json_name = "receive-add-path"];
                              string negotiate_add_path = 36 [json_name = "negotiate-add-path"];
                              string receive_label_add_path = 37 [json_name = "receive-label-add-path"];
                              string negotiate_label_add_path = 38 [json_name = "negotiate-label-add-path"];
                              uint32 receive_prefix = 39 [json_name = "receive-prefix"];
                              uint32 receive_active_prefix = 40 [json_name = "receive-active-prefix"];
                              uint32 advertise_prefix = 41 [json_name = "advertise-prefix"];
                              string discard_attribute = 42 [json_name = "discard-attribute"];
                              enum CheckFirstAs {
                                 INVALID_ENUM_VALUE_CheckFirstAs = 0;
                                 CheckFirstAs_ENABLE = 1;
                                 CheckFirstAs_DISABLE = 2;
                              };
                              CheckFirstAs check_first_as = 43 [json_name = "check-first-as"];
                              bool extend_nexthop_capability = 44 [json_name = "extend-nexthop-capability"];
                              bool egress_engineer_capability = 45 [json_name = "egress-engineer-capability"];
                              bool orf_capability = 46 [json_name = "orf-capability"];
                              bool rely_interface_capability = 47 [json_name = "rely-interface-capability"];
                              string remote_as = 48 [json_name = "remote-as"];
                              enum MemoryPriority {
                                 MemoryPriority_LOW = 0;
                                 MemoryPriority_MEDIUM = 1;
                                 MemoryPriority_HIGH = 2;
                              };
                              MemoryPriority memory_priority = 49 [json_name = "memory-priority"];
                              uint32 region_id = 50 [json_name = "region-id"];
                              uint32 region_confederation_id = 51 [json_name = "region-confederation-id"];
                           }
                           State state = 6 [json_name = "state"];
                           message Ipv4Labeluni {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              bool advertise_ext_community = 6 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 7 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 8 [json_name = "allow-as-loop"];
                              bool aigp = 9 [json_name = "aigp"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 10 [json_name = "add-path-mode"];
                              string import_ip_prefix = 11 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 12 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 13 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 14 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 bool accept_prefix = 2 [json_name = "accept-prefix"];
                                 uint32 percent = 3 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 4 [json_name = "type"];
                                 uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 15 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 3 [json_name = "replace"];
                                 bool no_skip_as = 4 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 5 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 6 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 16 [json_name = "public-as-only"];
                              bool check_tunnel_reachable = 17 [json_name = "check-tunnel-reachable"];
                              uint32 route_update_interval = 18 [json_name = "route-update-interval"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 19 [json_name = "nexthop-configure"];
                              uint32 preferred_value = 20 [json_name = "preferred-value"];
                              uint32 add_path_number = 21 [json_name = "add-path-number"];
                              bool substitute_as_enable = 22 [json_name = "substitute-as-enable"];
                              string soo = 23 [json_name = "soo"];
                              bool advertise_best_external = 24 [json_name = "advertise-best-external"];
                              bool load_balancing_enable = 25 [json_name = "load-balancing-enable"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 26 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 27 [json_name = "advertise-large-community-state"];
                              message EntropyLabelParameter {
                                 enum AdvertiseEntropyLabel {
                                    AdvertiseEntropyLabel_DEFAULT = 0;
                                    AdvertiseEntropyLabel_ENABLE = 1;
                                    AdvertiseEntropyLabel_DISABLE = 2;
                                 };
                                 AdvertiseEntropyLabel advertise_entropy_label = 1 [json_name = "advertise-entropy-label"];
                                 string padding = 2 [json_name = "padding"];
                                 enum AttributeType {
                                    INVALID_ENUM_VALUE_AttributeType = 0;
                                    AttributeType_ELC = 1;
                                 };
                                 AttributeType attribute_type = 3 [json_name = "attribute-type"];
                                 enum EntropyLabel {
                                    EntropyLabel_DEFAULT = 0;
                                    EntropyLabel_ENABLE = 1;
                                    EntropyLabel_DISABLE = 2;
                                 };
                                 EntropyLabel entropy_label = 4 [json_name = "entropy-label"];
                                 bool effect_advertise_entropy_label = 5 [json_name = "effect-advertise-entropy-label"];
                                 string effect_padding = 6 [json_name = "effect-padding"];
                                 enum EffectAttributeType {
                                    INVALID_ENUM_VALUE_EffectAttributeType = 0;
                                    EffectAttributeType_ELC = 1;
                                 };
                                 EffectAttributeType effect_attribute_type = 7 [json_name = "effect-attribute-type"];
                                 bool effect_entropy_label = 8 [json_name = "effect-entropy-label"];
                              }
                              EntropyLabelParameter entropy_label_parameter = 28 [json_name = "entropy-label-parameter"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 29 [json_name = "path-attribute-treats"];
                              string import_acl_name_or_num = 30 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 31 [json_name = "export-acl-name-or-num"];
                              enum ExpMode {
                                 ExpMode_NULL = 0;
                                 ExpMode_PIPE = 1;
                                 ExpMode_UNIFORM = 2;
                              };
                              ExpMode exp_mode = 32 [json_name = "exp-mode"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 33 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 34 [json_name = "update-group-independent-state"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 35 [json_name = "public-as-only-import"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 36 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 37 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 38 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 39 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 40 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 41 [json_name = "same-length-as-attribute"];
                              }
                              enum PrefixSid {
                                 PrefixSid_DEFAULT = 0;
                                 PrefixSid_ENABLE = 1;
                                 PrefixSid_DISABLE = 2;
                              };
                              PrefixSid prefix_sid = 42 [json_name = "prefix-sid"];
                              bool prefix_sid_state = 43 [json_name = "prefix-sid-state"];
                              message AddPathPolicy {
                                 message AddPathPolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message AddPathPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof AddPathPolicyType {
                                    AddPathPolicyType_RtpRef add_path_policy_type_rtp_ref = 1 [json_name = "rtp-ref"];
                                    AddPathPolicyType_XplRef add_path_policy_type_xpl_ref = 2 [json_name = "xpl-ref"];
                                 }
                              }
                              AddPathPolicy add_path_policy = 44 [json_name = "add-path-policy"];
                              message DiscardExtCommunityType_All {
                                 bool discard_all = 1 [json_name = "discard-all"];
                              }
                              message DiscardExtCommunityType_SubType {
                                 bool discard_origin_as_validation = 1 [json_name = "discard-origin-as-validation"];
                              }
                              oneof DiscardExtCommunityType {
                                 DiscardExtCommunityType_All discard_ext_community_type_all = 45 [json_name = "all"];
                                 DiscardExtCommunityType_SubType discard_ext_community_type_sub_type = 46 [json_name = "sub-type"];
                              }
                           }
                           Ipv4Labeluni ipv4_labeluni = 7 [json_name = "ipv4-labeluni"];
                           message Ipv4Multicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool default_route_advertise = 2 [json_name = "default-route-advertise"];
                              string import_ip_prefix = 4 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 5 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 6 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 7 [json_name = "export-as-path-filter"];
                              bool advertise_ext_community = 8 [json_name = "advertise-ext-community"];
                              bool discard_ext_community = 9 [json_name = "discard-ext-community"];
                              uint32 allow_as_loop = 10 [json_name = "allow-as-loop"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 11 [json_name = "nexthop-configure"];
                              bool advertise_community = 12 [json_name = "advertise-community"];
                              bool keep_all_routes = 13 [json_name = "keep-all-routes"];
                              bool reflect_client = 14 [json_name = "reflect-client"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 15 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 16 [json_name = "advertise-large-community-state"];
                              uint32 route_update_interval = 17 [json_name = "route-update-interval"];
                              uint32 preferred_value = 18 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 19 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 20 [json_name = "public-as-only"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 21 [json_name = "path-attribute-treats"];
                              string import_acl_name_or_num = 22 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 23 [json_name = "export-acl-name-or-num"];
                              bool load_balancing_enable = 24 [json_name = "load-balancing-enable"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 25 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 26 [json_name = "update-group-independent-state"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 27 [json_name = "public-as-only-import"];
                              message DefaultRouteAdvertisePolicyType_RtpRef {
                                 string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                              }
                              message DefaultRouteAdvertisePolicyType_XplRef {
                                 message DefaultRouteAdvertiseFilter {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                              }
                              oneof DefaultRouteAdvertisePolicyType {
                                 DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 28 [json_name = "rtp-ref"];
                                 DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 35 [json_name = "xpl-ref"];
                              }
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 29 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 30 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 31 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 32 [json_name = "xpl-ref"];
                              }
                              message LoadBalancingIgnoreAsType_AsAttribute {
                                 bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                              }
                              message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                 bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                              }
                              oneof LoadBalancingIgnoreAsType {
                                 LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 33 [json_name = "as-attribute"];
                                 LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 34 [json_name = "same-length-as-attribute"];
                              }
                           }
                           Ipv4Multicast ipv4_multicast = 8 [json_name = "ipv4-multicast"];
                           message L2Vpnad {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              uint32 allow_as_loop = 4 [json_name = "allow-as-loop"];
                              bool vpls_ad_disable = 5 [json_name = "vpls-ad-disable"];
                              bool vpws_enable = 6 [json_name = "vpws-enable"];
                              bool vpls_enable = 7 [json_name = "vpls-enable"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 8 [json_name = "nexthop-configure"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 9 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 10 [json_name = "advertise-large-community-state"];
                              uint32 route_update_interval = 11 [json_name = "route-update-interval"];
                              uint32 preferred_value = 12 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 13 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 14 [json_name = "public-as-only"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 15 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 16 [json_name = "update-group-independent-state"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 17 [json_name = "public-as-only-import"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 18 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 19 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 20 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 21 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 22 [json_name = "xpl-ref"];
                              }
                           }
                           L2Vpnad l2vpnad = 9 [json_name = "l2vpnad"];
                           message Ipv4Flow {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool validation_disable = 3 [json_name = "validation-disable"];
                              bool redirect_ip = 4 [json_name = "redirect-ip"];
                              bool redirect_ip_vaildation = 5 [json_name = "redirect-ip-vaildation"];
                              bool redirect_ip_rfc_compatible = 6 [json_name = "redirect-ip-rfc-compatible"];
                              bool redirect_ip_draft_compatible = 7 [json_name = "redirect-ip-draft-compatible"];
                              bool redirect_tunnelv6 = 8 [json_name = "redirect-tunnelv6"];
                              uint32 graceful_restart_static_timer = 9 [json_name = "graceful-restart-static-timer"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 10 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 11 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 12 [json_name = "route-limit"];
                              bool destination_origin_as = 13 [json_name = "destination-origin-as"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 14 [json_name = "update-group-independent"];
                              enum RoutePolicyDistribute {
                                 INVALID_ENUM_VALUE_RoutePolicyDistribute = 0;
                                 RoutePolicyDistribute_RECEIVE = 1;
                              };
                              RoutePolicyDistribute route_policy_distribute = 15 [json_name = "route-policy-distribute"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 16 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 17 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 18 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 19 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 20 [json_name = "xpl-ref"];
                              }
                              string redirect_ipv6_relay_tunnel_seletor = 21 [json_name = "redirect-ipv6-relay-tunnel-seletor"];
                           }
                           Ipv4Flow ipv4_flow = 10 [json_name = "ipv4-flow"];
                           message Ipv6Flow {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool validation_disable = 3 [json_name = "validation-disable"];
                              uint32 graceful_restart_static_timer = 4 [json_name = "graceful-restart-static-timer"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 5 [json_name = "advertise-large-community"];
                              uint32 route_update_interval = 6 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 7 [json_name = "route-limit"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 8 [json_name = "update-group-independent"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 9 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 11 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                              }
                              bool redirect_ipv6_validation_disable = 14 [json_name = "redirect-ipv6-validation-disable"];
                              bool redirect_ipv6_relay_ip = 15 [json_name = "redirect-ipv6-relay-ip"];
                              string redirect_ipv6_relay_tunnel_seletor = 16 [json_name = "redirect-ipv6-relay-tunnel-seletor"];
                              enum RoutePolicyDistribute {
                                 INVALID_ENUM_VALUE_RoutePolicyDistribute = 0;
                                 RoutePolicyDistribute_RECEIVE = 1;
                              };
                              RoutePolicyDistribute route_policy_distribute = 17 [json_name = "route-policy-distribute"];
                              bool destination_origin_as = 18 [json_name = "destination-origin-as"];
                           }
                           Ipv6Flow ipv6_flow = 11 [json_name = "ipv6-flow"];
                           message Vpntarget {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              bool default_route_advertise = 4 [json_name = "default-route-advertise"];
                              string import_as_path_filter = 5 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 6 [json_name = "export-as-path-filter"];
                              uint32 allow_as_loop = 7 [json_name = "allow-as-loop"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 8 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 9 [json_name = "advertise-large-community-state"];
                              uint32 route_update_interval = 10 [json_name = "route-update-interval"];
                              uint32 preferred_value = 11 [json_name = "preferred-value"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 12 [json_name = "route-limit"];
                              message PublicAsOnly {
                                 bool enable = 1 [json_name = "enable"];
                                 bool replace = 2 [json_name = "replace"];
                                 bool no_skip_as = 3 [json_name = "no-skip-as"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 message RemovePrivateAs_LeftMost {
                                    bool limited = 1 [json_name = "limited"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                    RemovePrivateAs_LeftMost remove_private_as_left_most = 5 [json_name = "left-most"];
                                 }
                              }
                              PublicAsOnly public_as_only = 13 [json_name = "public-as-only"];
                              message PublicAsOnlyImport {
                                 enum Enable {
                                    Enable_DEFAULT = 0;
                                    Enable_ENABLE = 1;
                                    Enable_DISABLE = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 bool effect_enable = 2 [json_name = "effect-enable"];
                                 bool effect_force = 3 [json_name = "effect-force"];
                                 message RemovePrivateAs_All {
                                    bool force = 1 [json_name = "force"];
                                 }
                                 oneof RemovePrivateAs {
                                    RemovePrivateAs_All remove_private_as_all = 4 [json_name = "all"];
                                 }
                              }
                              PublicAsOnlyImport public_as_only_import = 14 [json_name = "public-as-only-import"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 15 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 16 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 18 [json_name = "rtp-ref"];
                              }
                           }
                           Vpntarget vpntarget = 12 [json_name = "vpntarget"];
                           message Ipv4Srpolicy {
                              bool reflect_client = 1 [json_name = "reflect-client"];
                              bool advertise_ext_community = 2 [json_name = "advertise-ext-community"];
                              uint32 allow_as_loop = 3 [json_name = "allow-as-loop"];
                              bool advertise_community = 4 [json_name = "advertise-community"];
                              uint32 graceful_restart_static_timer = 5 [json_name = "graceful-restart-static-timer"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 6 [json_name = "advertise-large-community"];
                              string import_as_path_filter = 7 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 8 [json_name = "export-as-path-filter"];
                              uint32 route_update_interval = 9 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 10 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 11 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 14 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 15 [json_name = "xpl-ref"];
                              }
                              bool route_target_orf_disable = 16 [json_name = "route-target-orf-disable"];
                           }
                           Ipv4Srpolicy ipv4_srpolicy = 13 [json_name = "ipv4-srpolicy"];
                           message L2VpnEvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool advertise_irb = 5 [json_name = "advertise-irb"];
                              enum AdvertiseEncapType {
                                 INVALID_ENUM_VALUE_AdvertiseEncapType = 0;
                                 AdvertiseEncapType_VXLAN = 1;
                                 AdvertiseEncapType_MPLS = 2;
                                 AdvertiseEncapType_SRV6 = 4;
                                 AdvertiseEncapType_SDX_WAN = 5;
                              };
                              AdvertiseEncapType advertise_encap_type = 6 [json_name = "advertise-encap-type"];
                              bool reoriginate_vpnv4_route_enable = 7 [json_name = "reoriginate-vpnv4-route-enable"];
                              bool reoriginate_route_enable = 8 [json_name = "reoriginate-route-enable"];
                              uint32 graceful_restart_static_timer = 9 [json_name = "graceful-restart-static-timer"];
                              bool advertise_suppressed_route = 10 [json_name = "advertise-suppressed-route"];
                              bool advertise_suppressed_route_status = 11 [json_name = "advertise-suppressed-route-status"];
                              enum AddPathMode {
                                 INVALID_ENUM_VALUE_AddPathMode = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 12 [json_name = "add-path-mode"];
                              uint32 advertise_add_path_num = 13 [json_name = "advertise-add-path-num"];
                              bool advertise_community = 14 [json_name = "advertise-community"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 15 [json_name = "advertise-large-community"];
                              bool advertise_arp = 16 [json_name = "advertise-arp"];
                              bool advertise_irbv6 = 17 [json_name = "advertise-irbv6"];
                              bool advertise_nd = 18 [json_name = "advertise-nd"];
                              enum AdvertiseAddPathMode {
                                 INVALID_ENUM_VALUE_AdvertiseAddPathMode = 0;
                                 AdvertiseAddPathMode_RECEIVE = 1;
                                 AdvertiseAddPathMode_SEND = 2;
                                 AdvertiseAddPathMode_BOTH = 3;
                              };
                              AdvertiseAddPathMode advertise_add_path_mode = 19 [json_name = "advertise-add-path-mode"];
                              bool all_route_limit = 20 [json_name = "all-route-limit"];
                              bool mac_route_limit = 21 [json_name = "mac-route-limit"];
                              uint32 route_limit = 22 [json_name = "route-limit"];
                              uint32 route_limit_percent = 23 [json_name = "route-limit-percent"];
                              enum RouteLimitType {
                                 RouteLimitType_NOPARAMETER = 0;
                                 RouteLimitType_ALERTX_ONLY = 1;
                                 RouteLimitType_IDLEX_FOREVER = 2;
                                 RouteLimitType_IDLEX_TIMEOUT = 3;
                              };
                              RouteLimitType route_limit_type = 24 [json_name = "route-limit-type"];
                              uint32 route_limit_idle_timeout = 25 [json_name = "route-limit-idle-timeout"];
                              uint32 route_update_interval = 26 [json_name = "route-update-interval"];
                              bool reoriginate_vpnv4_route = 27 [json_name = "reoriginate-vpnv4-route"];
                              bool reoriginate_mac_route = 28 [json_name = "reoriginate-mac-route"];
                              bool reoriginate_mac_ip_route = 29 [json_name = "reoriginate-mac-ip-route"];
                              bool reoriginate_mac_ipv6_route = 30 [json_name = "reoriginate-mac-ipv6-route"];
                              bool reoriginate_ip_route = 31 [json_name = "reoriginate-ip-route"];
                              bool reoriginate_ipv6_route = 32 [json_name = "reoriginate-ipv6-route"];
                              bool reoriginate_vpnv6_route = 33 [json_name = "reoriginate-vpnv6-route"];
                              enum EsAdCompatible {
                                 EsAdCompatible_DEFAULT = 0;
                                 EsAdCompatible_ENABLE = 1;
                                 EsAdCompatible_DISABLE = 2;
                              };
                              EsAdCompatible es_ad_compatible = 34 [json_name = "es-ad-compatible"];
                              string split_group_name = 35 [json_name = "split-group-name"];
                              bool vpn_orf_disable = 36 [json_name = "vpn-orf-disable"];
                              bool upe_enable = 37 [json_name = "upe-enable"];
                              enum NextHopMode {
                                 NextHopMode_NULL = 0;
                                 NextHopMode_LOCAL = 1;
                                 NextHopMode_INVARIABLE = 2;
                              };
                              NextHopMode next_hop_mode = 38 [json_name = "next-hop-mode"];
                              enum HighPriority {
                                 HighPriority_DEFAULT = 0;
                                 HighPriority_ENABLE = 1;
                                 HighPriority_DISABLE = 2;
                              };
                              HighPriority high_priority = 39 [json_name = "high-priority"];
                              bool high_priority_status = 40 [json_name = "high-priority-status"];
                              uint32 preferred_value = 41 [json_name = "preferred-value"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 42 [json_name = "path-attribute-treats"];
                              uint32 allow_as_loop = 43 [json_name = "allow-as-loop"];
                              enum MacDetailRouteOnly {
                                 MacDetailRouteOnly_DISABLE = 0;
                                 MacDetailRouteOnly_ENABLE = 1;
                              };
                              MacDetailRouteOnly mac_detail_route_only = 44 [json_name = "mac-detail-route-only"];
                              bool mac_detail_route_only_status = 45 [json_name = "mac-detail-route-only-status"];
                              bool advertise_srv6_locator = 46 [json_name = "advertise-srv6-locator"];
                              message EffectState {
                                 bool advertise_srv6_locator = 1 [json_name = "advertise-srv6-locator"];
                                 bool transit_med_to_ebgp = 2 [json_name = "transit-med-to-ebgp"];
                              }
                              EffectState effect_state = 47 [json_name = "effect-state"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 48 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 49 [json_name = "rtp-ref"];
                              }
                              enum TransitMedToEbgp {
                                 TransitMedToEbgp_DISABLE = 0;
                                 TransitMedToEbgp_ENABLE = 1;
                              };
                              TransitMedToEbgp transit_med_to_ebgp = 50 [json_name = "transit-med-to-ebgp"];
                              enum PeerAsCheck {
                                 PeerAsCheck_DISABLE = 0;
                                 PeerAsCheck_ENABLE = 1;
                              };
                              PeerAsCheck peer_as_check = 51 [json_name = "peer-as-check"];
                              message Option {
                                 enum Srv6LabelCompatible {
                                    Srv6LabelCompatible_DISABLE = 0;
                                    Srv6LabelCompatible_ENABLE = 1;
                                 };
                                 Srv6LabelCompatible srv6_label_compatible = 1 [json_name = "srv6-label-compatible"];
                              }
                              Option option = 52 [json_name = "option"];
                           }
                           L2VpnEvpn l2vpn_evpn = 14 [json_name = "l2vpn-evpn"];
                           message Ipv4Mvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 6 [json_name = "advertise-c-multicast-route"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 7 [json_name = "nexthop-configure"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 8 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 9 [json_name = "advertise-large-community-state"];
                              uint32 route_update_interval = 10 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 11 [json_name = "route-limit"];
                              bool nexthop_effective = 12 [json_name = "nexthop-effective"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 13 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 14 [json_name = "update-group-independent-state"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 15 [json_name = "add-path-mode"];
                              uint32 add_path_number = 16 [json_name = "add-path-number"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 17 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 18 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 19 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 20 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 21 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv4Mvpn ipv4_mvpn = 15 [json_name = "ipv4-mvpn"];
                           message Ipv6Mvpn {
                              string group_name = 1 [json_name = "group-name"];
                              bool advertise_community = 2 [json_name = "advertise-community"];
                              bool reflect_client = 3 [json_name = "reflect-client"];
                              string import_as_path_filter = 4 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 5 [json_name = "export-as-path-filter"];
                              bool advertise_c_multicast_route = 6 [json_name = "advertise-c-multicast-route"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 7 [json_name = "nexthop-configure"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 8 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 9 [json_name = "advertise-large-community-state"];
                              uint32 route_update_interval = 10 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 11 [json_name = "route-limit"];
                              bool nexthop_effective = 12 [json_name = "nexthop-effective"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 13 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 14 [json_name = "update-group-independent-state"];
                              enum AddPathMode {
                                 AddPathMode_NULL = 0;
                                 AddPathMode_RECEIVE = 1;
                                 AddPathMode_SEND = 2;
                                 AddPathMode_BOTH = 3;
                              };
                              AddPathMode add_path_mode = 15 [json_name = "add-path-mode"];
                              uint32 add_path_number = 16 [json_name = "add-path-number"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 17 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 18 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 19 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 20 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 21 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv6Mvpn ipv6_mvpn = 16 [json_name = "ipv6-mvpn"];
                           message Ipv6Srpolicy {
                              bool advertise_community = 1 [json_name = "advertise-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              bool advertise_ext_community = 3 [json_name = "advertise-ext-community"];
                              uint32 allow_as_loop = 4 [json_name = "allow-as-loop"];
                              uint32 route_update_interval = 5 [json_name = "route-update-interval"];
                              uint32 graceful_restart_static_timer = 6 [json_name = "graceful-restart-static-timer"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 7 [json_name = "advertise-large-community"];
                              string import_as_path_filter = 8 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 9 [json_name = "export-as-path-filter"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 10 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 11 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 14 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 15 [json_name = "xpl-ref"];
                              }
                              string group_name = 16 [json_name = "group-name"];
                              enum HighPriority {
                                 HighPriority_DEFAULT = 0;
                                 HighPriority_ENABLE = 1;
                                 HighPriority_DISABLE = 2;
                              };
                              HighPriority high_priority = 17 [json_name = "high-priority"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 18 [json_name = "nexthop-configure"];
                              bool nexthop_effective = 19 [json_name = "nexthop-effective"];
                              bool route_target_orf_disable = 20 [json_name = "route-target-orf-disable"];
                           }
                           Ipv6Srpolicy ipv6_srpolicy = 17 [json_name = "ipv6-srpolicy"];
                           message LinkStateUnicast {
                              string group_name = 1 [json_name = "group-name"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              uint32 route_update_interval = 3 [json_name = "route-update-interval"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 4 [json_name = "route-limit"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 5 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 6 [json_name = "update-group-independent-state"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 7 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 8 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                              }
                              uint32 allow_as_loop = 11 [json_name = "allow-as-loop"];
                           }
                           LinkStateUnicast link_state_unicast = 18 [json_name = "link-state-unicast"];
                           message Vpnv4Flow {
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 1 [json_name = "advertise-large-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              uint32 graceful_restart_static_timer = 3 [json_name = "graceful-restart-static-timer"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 4 [json_name = "update-group-independent"];
                              bool advertise_community = 5 [json_name = "advertise-community"];
                              bool redirect_ip_rfc_compatible = 6 [json_name = "redirect-ip-rfc-compatible"];
                              bool redirect_ip_draft_compatible = 7 [json_name = "redirect-ip-draft-compatible"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 8 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 9 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 11 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                              }
                           }
                           Vpnv4Flow vpnv4_flow = 19 [json_name = "vpnv4-flow"];
                           message Vpnv6Flow {
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 1 [json_name = "advertise-large-community"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              uint32 graceful_restart_static_timer = 3 [json_name = "graceful-restart-static-timer"];
                              bool advertise_community = 4 [json_name = "advertise-community"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 5 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 6 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 9 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 10 [json_name = "xpl-ref"];
                              }
                           }
                           Vpnv6Flow vpnv6_flow = 20 [json_name = "vpnv6-flow"];
                           message Mdt {
                              string group_name = 1 [json_name = "group-name"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 2 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 3 [json_name = "advertise-large-community-state"];
                              bool advertise_community = 4 [json_name = "advertise-community"];
                              uint32 route_update_interval = 5 [json_name = "route-update-interval"];
                              string import_acl_name_or_num = 6 [json_name = "import-acl-name-or-num"];
                              string export_acl_name_or_num = 7 [json_name = "export-acl-name-or-num"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 8 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 9 [json_name = "update-group-independent-state"];
                              string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                              string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                              string import_as_path_filter = 12 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 13 [json_name = "export-as-path-filter"];
                              bool reflect_client = 14 [json_name = "reflect-client"];
                              enum NexthopConfigure {
                                 INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                 NexthopConfigure_LOCAL = 1;
                                 NexthopConfigure_INVARIABLE = 2;
                              };
                              NexthopConfigure nexthop_configure = 15 [json_name = "nexthop-configure"];
                              bool nexthop_effective = 16 [json_name = "nexthop-effective"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 17 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 18 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 19 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 20 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 21 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 22 [json_name = "xpl-ref"];
                              }
                           }
                           Mdt mdt = 21 [json_name = "mdt"];
                           message Rpd {
                              uint32 graceful_restart_static_timer = 1 [json_name = "graceful-restart-static-timer"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 2 [json_name = "path-attribute-treats"];
                           }
                           Rpd rpd = 22 [json_name = "rpd"];
                           message Ipv4VpnMulticast {
                              string group_name = 1 [json_name = "group-name"];
                              uint32 route_update_interval = 2 [json_name = "route-update-interval"];
                              enum AdvertiseLargeCommunity {
                                 AdvertiseLargeCommunity_DEFAULT = 0;
                                 AdvertiseLargeCommunity_ENABLE = 1;
                                 AdvertiseLargeCommunity_DISABLE = 2;
                              };
                              AdvertiseLargeCommunity advertise_large_community = 3 [json_name = "advertise-large-community"];
                              bool advertise_large_community_state = 4 [json_name = "advertise-large-community-state"];
                              bool advertise_community = 5 [json_name = "advertise-community"];
                              enum UpdateGroupIndependent {
                                 UpdateGroupIndependent_DEFAULT = 0;
                                 UpdateGroupIndependent_ENABLE = 1;
                                 UpdateGroupIndependent_DISABLE = 2;
                              };
                              UpdateGroupIndependent update_group_independent = 6 [json_name = "update-group-independent"];
                              bool update_group_independent_state = 7 [json_name = "update-group-independent-state"];
                              bool reflect_client = 8 [json_name = "reflect-client"];
                              bool update_packet_standard_compatible = 9 [json_name = "update-packet-standard-compatible"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 10 [json_name = "route-limit"];
                              message PathAttributeTreats {
                                 message PathAttributeTreat {
                                    enum TreatType {
                                       TreatType_NORMAL = 0;
                                    };
                                    TreatType treat_type = 1 [json_name = "treat-type"];
                                    string discard_id_map = 2 [json_name = "discard-id-map"];
                                    string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                    string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                 }
                                 repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                              }
                              PathAttributeTreats path_attribute_treats = 11 [json_name = "path-attribute-treats"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              message ImportPolicyType_XplRef {
                                 message ImportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ImportFilter import_filter = 1 [json_name = "import-filter"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                 ImportPolicyType_XplRef import_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              message ExportPolicyType_XplRef {
                                 message ExportFilter {
                                    string name = 1 [json_name = "name"];
                                    string parameter = 2 [json_name = "parameter"];
                                 }
                                 ExportFilter export_filter = 1 [json_name = "export-filter"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 14 [json_name = "rtp-ref"];
                                 ExportPolicyType_XplRef export_policy_type_xpl_ref = 15 [json_name = "xpl-ref"];
                              }
                           }
                           Ipv4VpnMulticast ipv4_vpn_multicast = 23 [json_name = "ipv4-vpn-multicast"];
                           message Ipv4SdWan {
                              string group_name = 1 [json_name = "group-name"];
                              bool reflect_client = 2 [json_name = "reflect-client"];
                              uint32 route_update_interval = 3 [json_name = "route-update-interval"];
                              bool advertise_ext_community = 4 [json_name = "advertise-ext-community"];
                              bool advertise_community = 5 [json_name = "advertise-community"];
                              uint32 allow_as_loop = 6 [json_name = "allow-as-loop"];
                              bool discard_ext_community = 7 [json_name = "discard-ext-community"];
                              uint32 graceful_restart_static_timer = 8 [json_name = "graceful-restart-static-timer"];
                              string import_as_path_filter = 9 [json_name = "import-as-path-filter"];
                              string export_as_path_filter = 10 [json_name = "export-as-path-filter"];
                              message ImportPolicyType_RtpRef {
                                 string import_policy = 1 [json_name = "import-policy"];
                              }
                              oneof ImportPolicyType {
                                 ImportPolicyType_RtpRef import_policy_type_rtp_ref = 11 [json_name = "rtp-ref"];
                              }
                              message ExportPolicyType_RtpRef {
                                 string export_policy = 1 [json_name = "export-policy"];
                              }
                              oneof ExportPolicyType {
                                 ExportPolicyType_RtpRef export_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                              }
                              enum SafiNonStandardCompabile {
                                 SafiNonStandardCompabile_DISABLE = 0;
                                 SafiNonStandardCompabile_ENABLE = 1;
                              };
                              SafiNonStandardCompabile safi_non_standard_compabile = 13 [json_name = "safi-non-standard-compabile"];
                              message EffectState {
                                 bool safi_non_standard_compabile = 1 [json_name = "safi-non-standard-compabile"];
                              }
                              EffectState effect_state = 14 [json_name = "effect-state"];
                              message RouteLimit {
                                 uint32 number12 = 1 [json_name = "number"];
                                 uint32 percent = 2 [json_name = "percent"];
                                 enum Type {
                                    Type_NOPARAMETER = 0;
                                    Type_ALERTX_ONLY = 1;
                                    Type_IDLEX_FOREVER = 2;
                                    Type_IDLEX_TIMEOUT = 3;
                                 };
                                 Type type = 3 [json_name = "type"];
                                 uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                              }
                              RouteLimit route_limit = 15 [json_name = "route-limit"];
                           }
                           Ipv4SdWan ipv4_sd_wan = 24 [json_name = "ipv4-sd-wan"];
                        }
                        repeated Af af = 1 [json_name = "af"];
                     }
                     Afs afs = 8 [json_name = "afs"];
                     string key_chain_name = 9 [json_name = "key-chain-name"];
                     string local_if_address = 10 [json_name = "local-if-address"];
                     uint32 ebgp_max_hop = 11 [json_name = "ebgp-max-hop"];
                     bool tracking_enable = 12 [json_name = "tracking-enable"];
                     uint32 tracking_delay_time = 13 [json_name = "tracking-delay-time"];
                     bool conventional = 14 [json_name = "conventional"];
                     bool route_refresh = 15 [json_name = "route-refresh"];
                     bool four_byte_as = 16 [json_name = "four-byte-as"];
                     bool ignore = 17 [json_name = "ignore"];
                     uint32 valid_ttl_hops = 18 [json_name = "valid-ttl-hops"];
                     enum ConnectMode {
                        INVALID_ENUM_VALUE_ConnectMode = 0;
                        ConnectMode_LISTENX_ONLY = 1;
                        ConnectMode_CONNECTX_ONLY = 2;
                        ConnectMode_NULL = 3;
                     };
                     ConnectMode connect_mode = 19 [json_name = "connect-mode"];
                     bool log_change = 20 [json_name = "log-change"];
                     bool path_mtu_auto_discovery = 21 [json_name = "path-mtu-auto-discovery"];
                     bool local_ifnet_disable = 22 [json_name = "local-ifnet-disable"];
                     enum CheckFirstAs {
                        CheckFirstAs_DEFAULT = 0;
                        CheckFirstAs_ENABLE = 1;
                        CheckFirstAs_DISABLE = 2;
                     };
                     CheckFirstAs check_first_as = 23 [json_name = "check-first-as"];
                     enum EgressEngineer {
                        EgressEngineer_DEFAULT = 0;
                        EgressEngineer_ENABLE = 1;
                     };
                     EgressEngineer egress_engineer = 24 [json_name = "egress-engineer"];
                     uint32 tcp_mss = 25 [json_name = "tcp-mss"];
                     message FakeAsParameter {
                        string fake_as = 1 [json_name = "fake-as"];
                        bool dual_as = 2 [json_name = "dual-as"];
                        bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                        bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                     }
                     FakeAsParameter fake_as_parameter = 26 [json_name = "fake-as-parameter"];
                     message Timer {
                        uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                        uint32 hold_time = 2 [json_name = "hold-time"];
                        uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                        uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                     }
                     Timer timer = 27 [json_name = "timer"];
                     message BfdParameter {
                        bool block = 1 [json_name = "block"];
                        bool enable = 2 [json_name = "enable"];
                        uint32 multiplier = 4 [json_name = "multiplier"];
                        uint32 min_rx_interval = 5 [json_name = "min-rx-interval"];
                        uint32 min_tx_interval = 6 [json_name = "min-tx-interval"];
                        enum ValidTtlHopsOperation {
                           INVALID_ENUM_VALUE_ValidTtlHopsOperation = 0;
                           ValidTtlHopsOperation_ENABLE = 1;
                           ValidTtlHopsOperation_DISABLE = 2;
                        };
                        ValidTtlHopsOperation valid_ttl_hops_operation = 7 [json_name = "valid-ttl-hops-operation"];
                        uint32 valid_ttl_hops = 8 [json_name = "valid-ttl-hops"];
                        message ModeType_Single {
                           bool single_hop = 1 [json_name = "single-hop"];
                           bool compatible = 2 [json_name = "compatible"];
                        }
                        message ModeType_Link {
                           bool per_link_echo = 1 [json_name = "per-link-echo"];
                        }
                        message ModeType_OneArmEcho {
                           bool one_arm_echo = 1 [json_name = "one-arm-echo"];
                        }
                        oneof ModeType {
                           ModeType_Single mode_type_single = 9 [json_name = "single"];
                           ModeType_Link mode_type_link = 10 [json_name = "link"];
                           ModeType_OneArmEcho mode_type_one_arm_echo = 11 [json_name = "one-arm-echo"];
                        }
                     }
                     BfdParameter bfd_parameter = 28 [json_name = "bfd-parameter"];
                     enum MemoryPriority {
                        MemoryPriority_LOW = 0;
                        MemoryPriority_MEDIUM = 1;
                        MemoryPriority_HIGH = 2;
                        MemoryPriority_DEFAULT = 3;
                     };
                     MemoryPriority memory_priority = 29 [json_name = "memory-priority"];
                     enum MemoryPriorityCapability {
                        MemoryPriorityCapability_LOW = 0;
                        MemoryPriorityCapability_MEDIUM = 1;
                        MemoryPriorityCapability_HIGH = 2;
                     };
                     MemoryPriorityCapability memory_priority_capability = 30 [json_name = "memory-priority-capability"];
                     message EgressEngineerParameter {
                        uint32 static_label = 1 [json_name = "static-label"];
                        bool label_pop = 2 [json_name = "label-pop"];
                        bool relate_bfd = 3 [json_name = "relate-bfd"];
                        string peer_set_name = 4 [json_name = "peer-set-name"];
                     }
                     EgressEngineerParameter egress_engineer_parameter = 31 [json_name = "egress-engineer-parameter"];
                     message GracefulRestart {
                        enum Enable {
                           Enable_DEFAULT = 0;
                           Enable_ENABLE = 1;
                           Enable_DISABLE = 2;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                        uint32 restart_time = 3 [json_name = "restart-time"];
                        uint32 effect_restart_time = 4 [json_name = "effect-restart-time"];
                        uint32 effect_time_wait_for_rib = 5 [json_name = "effect-time-wait-for-rib"];
                        bool effect_enable = 6 [json_name = "effect-enable"];
                        enum PeerReset {
                           PeerReset_DEFAULT = 0;
                           PeerReset_ENABLE = 1;
                           PeerReset_DISABLE = 2;
                        };
                        PeerReset peer_reset = 7 [json_name = "peer-reset"];
                        bool effect_peer_reset = 8 [json_name = "effect-peer-reset"];
                     }
                     GracefulRestart graceful_restart = 32 [json_name = "graceful-restart"];
                     message LocalGracefulRestart {
                        enum Enable {
                           Enable_DEFAULT = 0;
                           Enable_ENABLE = 1;
                           Enable_DISABLE = 2;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                        uint32 restart_time = 3 [json_name = "restart-time"];
                        uint32 effect_restart_time = 4 [json_name = "effect-restart-time"];
                        uint32 effect_time_wait_for_rib = 5 [json_name = "effect-time-wait-for-rib"];
                        bool effect_enable = 6 [json_name = "effect-enable"];
                     }
                     LocalGracefulRestart local_graceful_restart = 33 [json_name = "local-graceful-restart"];
                     message EpeSrv6 {
                        message SidOption_AutoSid {
                           string locator_name = 1 [json_name = "locator-name"];
                        }
                        message SidOption_StaticSid {
                           message PspSidType_Uncompress {
                              string psp_sid = 1 [json_name = "psp-sid"];
                           }
                           message PspSidType_Compress {
                              string psp_sid_compress = 1 [json_name = "psp-sid-compress"];
                           }
                           oneof PspSidType {
                              PspSidType_Uncompress psp_sid_type_uncompress = 1 [json_name = "uncompress"];
                              PspSidType_Compress psp_sid_type_compress = 2 [json_name = "compress"];
                           }
                           message NoFlavorSidType_Uncompress {
                              string no_flavor_sid = 1 [json_name = "no-flavor-sid"];
                           }
                           message NoFlavorSidType_Compress {
                              string no_flavor_sid_compress = 1 [json_name = "no-flavor-sid-compress"];
                           }
                           oneof NoFlavorSidType {
                              NoFlavorSidType_Uncompress no_flavor_sid_type_uncompress = 3 [json_name = "uncompress"];
                              NoFlavorSidType_Compress no_flavor_sid_type_compress = 4 [json_name = "compress"];
                           }
                           message ExtStaticSids {
                              message ExtStaticSid {
                                 enum Type {
                                    INVALID_ENUM_VALUE_Type = 0;
                                    Type_PSPX_USPX_USDX_SID = 2;
                                    Type_PSPX_USPX_USDX_COCX_SID = 3;
                                 };
                                 Type type = 1 [json_name = "type"];
                                 enum SidMode {
                                    SidMode_COMMON = 0;
                                    SidMode_COMPRESS = 1;
                                 };
                                 SidMode sid_mode = 2 [json_name = "sid-mode"];
                                 string sid_value = 3 [json_name = "sid-value"];
                              }
                              repeated ExtStaticSid ext_static_sid = 1 [json_name = "ext-static-sid"];
                           }
                           ExtStaticSids ext_static_sids = 5 [json_name = "ext-static-sids"];
                        }
                        oneof SidOption {
                           SidOption_AutoSid sid_option_auto_sid = 1 [json_name = "auto-sid"];
                           SidOption_StaticSid sid_option_static_sid = 2 [json_name = "static-sid"];
                        }
                     }
                     EpeSrv6 epe_srv6 = 34 [json_name = "epe-srv6"];
                     enum OscillationDampening {
                        OscillationDampening_DISABLE = 0;
                        OscillationDampening_ENABLE = 1;
                     };
                     OscillationDampening oscillation_dampening = 35 [json_name = "oscillation-dampening"];
                     message EffectState {
                        bool oscillation_dampening = 1 [json_name = "oscillation-dampening"];
                     }
                     EffectState effect_state = 36 [json_name = "effect-state"];
                     message BfdParameterState {
                        uint32 valid_ttl_hops = 1 [json_name = "valid-ttl-hops"];
                     }
                     BfdParameterState bfd_parameter_state = 37 [json_name = "bfd-parameter-state"];
                     message SslPolicy {
                        enum Enable {
                           Enable_DISABLE = 0;
                           Enable_ENABLE = 1;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        string name = 2 [json_name = "name"];
                        enum Role {
                           INVALID_ENUM_VALUE_Role = 0;
                           Role_CLIENT = 1;
                           Role_SERVER = 2;
                           Role_DISABLE = 3;
                        };
                        Role role = 3 [json_name = "role"];
                        enum ServerCertificate {
                           ServerCertificate_DISABLE = 0;
                           ServerCertificate_ENABLE = 1;
                        };
                        ServerCertificate server_certificate = 4 [json_name = "server-certificate"];
                     }
                     SslPolicy ssl_policy = 38 [json_name = "ssl-policy"];
                     bool tcp_ao_disable = 39 [json_name = "tcp-ao-disable"];
                     string tcp_ao_name = 40 [json_name = "tcp-ao-name"];
                     message Epe {
                        message VirtualLink {
                           uint32 metric = 1 [json_name = "metric"];
                           string admin_groups = 2 [json_name = "admin-groups"];
                           repeated uint32 srlg_group = 3 [json_name = "srlg-group"];
                           uint32 twamp_test_session_id = 4 [json_name = "twamp-test-session-id"];
                           repeated string admin_groups_name = 5 [json_name = "admin-groups-name"];
                        }
                        VirtualLink virtual_link = 1 [json_name = "virtual-link"];
                     }
                     Epe epe = 41 [json_name = "epe"];
                     message GracefulShutdown {
                        enum Enable {
                           Enable_DISABLE = 0;
                           Enable_ENABLE = 1;
                        };
                        Enable enable = 1 [json_name = "enable"];
                        message Attribute_SetAsPrepend {
                           uint32 as_prepend = 1 [json_name = "as-prepend"];
                        }
                        message Attribute_SetLocalPreference {
                           uint32 local_preference = 1 [json_name = "local-preference"];
                        }
                        oneof Attribute {
                           Attribute_SetAsPrepend attribute_set_as_prepend = 2 [json_name = "set-as-prepend"];
                           Attribute_SetLocalPreference attribute_set_local_preference = 3 [json_name = "set-local-preference"];
                        }
                        enum ManualActivate {
                           ManualActivate_DISABLE = 0;
                           ManualActivate_ENABLE = 1;
                        };
                        ManualActivate manual_activate = 4 [json_name = "manual-activate"];
                     }
                     GracefulShutdown graceful_shutdown = 42 [json_name = "graceful-shutdown"];
                  }
                  repeated Peer peer = 1 [json_name = "peer"];
               }
               Peers peers = 4 [json_name = "peers"];
               bool router_id_auto_select = 5 [json_name = "router-id-auto-select"];
               string effect_router_id = 6 [json_name = "effect-router-id"];
               message PeerBfdSessionStates {
                  message PeerBfdSessionState {
                     string address = 1 [json_name = "address"];
                     string local_address = 2 [json_name = "local-address"];
                     string if_name = 3 [json_name = "if-name"];
                     uint32 tx_interval = 4 [json_name = "tx-interval"];
                     uint32 rx_interval = 5 [json_name = "rx-interval"];
                     uint32 multiplier = 6 [json_name = "multiplier"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_UP = 1;
                        Status_DOWN = 2;
                        Status_UNKNOWN = 3;
                     };
                     Status status = 7 [json_name = "status"];
                     bool global_bfd_enable = 8 [json_name = "global-bfd-enable"];
                     uint32 valid_ttl_hops = 9 [json_name = "valid-ttl-hops"];
                  }
                  repeated PeerBfdSessionState peer_bfd_session_state = 1 [json_name = "peer-bfd-session-state"];
               }
               PeerBfdSessionStates peer_bfd_session_states = 7 [json_name = "peer-bfd-session-states"];
               message EgressEngineerPeerSets {
                  message EgressEngineerPeerSet {
                     string peer_set_name = 1 [json_name = "peer-set-name"];
                     uint32 static_label = 2 [json_name = "static-label"];
                     bool label_pop = 3 [json_name = "label-pop"];
                     bool relate_bfd = 4 [json_name = "relate-bfd"];
                  }
                  repeated EgressEngineerPeerSet egress_engineer_peer_set = 1 [json_name = "egress-engineer-peer-set"];
               }
               EgressEngineerPeerSets egress_engineer_peer_sets = 8 [json_name = "egress-engineer-peer-sets"];
               message EpeSrv6 {
                  string locator_name = 1 [json_name = "locator-name"];
               }
               EpeSrv6 epe_srv6 = 9 [json_name = "epe-srv6"];
               message DynamicPeerPrefixes {
                  message DynamicPeerPrefix {
                     string address = 1 [json_name = "address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string peer_group = 3 [json_name = "peer-group"];
                  }
                  repeated DynamicPeerPrefix dynamic_peer_prefix = 1 [json_name = "dynamic-peer-prefix"];
               }
               DynamicPeerPrefixes dynamic_peer_prefixes = 10 [json_name = "dynamic-peer-prefixes"];
               message UnnumberedPeerInterfaces {
                  message UnnumberedPeerInterface {
                     string if_name = 1 [json_name = "if-name"];
                     string peer_group = 2 [json_name = "peer-group"];
                  }
                  repeated UnnumberedPeerInterface unnumbered_peer_interface = 1 [json_name = "unnumbered-peer-interface"];
               }
               UnnumberedPeerInterfaces unnumbered_peer_interfaces = 11 [json_name = "unnumbered-peer-interfaces"];
               message VpnAsNumber {
                  string local_ipv4 = 1 [json_name = "local-ipv4"];
                  string local_ipv6 = 2 [json_name = "local-ipv6"];
                  bool ipv4_as_no_prepend = 3 [json_name = "ipv4-as-no-prepend"];
                  bool ipv6_as_no_prepend = 4 [json_name = "ipv6-as-no-prepend"];
               }
               VpnAsNumber vpn_as_number = 12 [json_name = "vpn-as-number"];
               message EpeState {
                  message PeerNodes {
                     message PeerNode {
                        string address = 1 [json_name = "address"];
                        uint32 peer_adj_number = 2 [json_name = "peer-adj-number"];
                        string local_as = 3 [json_name = "local-as"];
                        string remote_as = 4 [json_name = "remote-as"];
                        string local_router_id = 5 [json_name = "local-router-id"];
                        string remote_router_id = 6 [json_name = "remote-router-id"];
                        string local_interface_address = 7 [json_name = "local-interface-address"];
                        enum LabelFlag {
                           LabelFlag_OK = 0;
                           LabelFlag_NOTX_ENOUGH = 1;
                           LabelFlag_WAITX_AGING = 2;
                           LabelFlag_INTERFACEX_NOTX_SUPPORT = 3;
                           LabelFlag_PEERX_NOTX_REACHABLE = 4;
                           LabelFlag_ONLYX_SUPPORTX_COMPRESSX_TYPE = 5;
                        };
                        LabelFlag label_flag = 8 [json_name = "label-flag"];
                        uint32 node_label = 9 [json_name = "node-label"];
                        enum PeerSetLabelFlag {
                           PeerSetLabelFlag_OK = 0;
                           PeerSetLabelFlag_NOTX_ENOUGH = 1;
                           PeerSetLabelFlag_WAITX_AGING = 2;
                           PeerSetLabelFlag_INTERFACEX_NOTX_SUPPORT = 3;
                           PeerSetLabelFlag_PEERX_NOTX_REACHABLE = 4;
                           PeerSetLabelFlag_ONLYX_SUPPORTX_COMPRESSX_TYPE = 5;
                        };
                        PeerSetLabelFlag peer_set_label_flag = 10 [json_name = "peer-set-label-flag"];
                        uint32 peer_set_label = 11 [json_name = "peer-set-label"];
                        message Nexthops {
                           message Nexthop {
                              string remote_interface_address = 1 [json_name = "remote-interface-address"];
                              string interface_name = 2 [json_name = "interface-name"];
                           }
                           repeated Nexthop nexthop = 1 [json_name = "nexthop"];
                        }
                        Nexthops nexthops = 12 [json_name = "nexthops"];
                        string local_member_as = 13 [json_name = "local-member-as"];
                        string remote_member_as = 14 [json_name = "remote-member-as"];
                     }
                     repeated PeerNode peer_node = 1 [json_name = "peer-node"];
                  }
                  PeerNodes peer_nodes = 1 [json_name = "peer-nodes"];
                  message Adjs {
                     message Adj {
                        string remote_interface_address = 1 [json_name = "remote-interface-address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        string local_interface_address = 3 [json_name = "local-interface-address"];
                        uint32 interface_id = 4 [json_name = "interface-id"];
                        enum LabelFlag {
                           LabelFlag_OK = 0;
                           LabelFlag_NOTX_ENOUGH = 1;
                           LabelFlag_WAITX_AGING = 2;
                           LabelFlag_INTERFACEX_NOTX_SUPPORT = 3;
                           LabelFlag_PEERX_NOTX_REACHABLE = 4;
                           LabelFlag_ONLYX_SUPPORTX_COMPRESSX_TYPE = 5;
                        };
                        LabelFlag label_flag = 5 [json_name = "label-flag"];
                        uint32 label = 6 [json_name = "label"];
                     }
                     repeated Adj adj = 1 [json_name = "adj"];
                  }
                  Adjs adjs = 2 [json_name = "adjs"];
                  message Srv6PeerNodes {
                     message Srv6PeerNode {
                        string address = 1 [json_name = "address"];
                        string locator_name = 2 [json_name = "locator-name"];
                        uint32 peer_adj_number = 3 [json_name = "peer-adj-number"];
                        string local_as = 4 [json_name = "local-as"];
                        string remote_as = 5 [json_name = "remote-as"];
                        string local_router_id = 6 [json_name = "local-router-id"];
                        string remote_router_id = 7 [json_name = "remote-router-id"];
                        string local_interface_address = 8 [json_name = "local-interface-address"];
                        message Sids {
                           message Sid {
                              enum Type {
                                 Type_NOX_PSP = 0;
                                 Type_PSPX_SID = 1;
                                 Type_PSPX_USPX_USDX_SID = 2;
                                 Type_PSPX_USPX_USDX_COCX_SID = 3;
                              };
                              Type type = 1 [json_name = "type"];
                              enum Mode {
                                 Mode_COMMON = 0;
                                 Mode_COMPRESS = 1;
                              };
                              Mode mode = 2 [json_name = "mode"];
                              enum Status {
                                 Status_OK = 0;
                                 Status_NOTX_ENOUGH = 1;
                                 Status_WAITX_AGING = 2;
                                 Status_INTERFACEX_NOTX_SUPPORT = 3;
                                 Status_PEERX_NOTX_REACHABLE = 4;
                                 Status_ONLYX_SUPPORTX_COMPRESSX_TYPE = 5;
                              };
                              Status status = 3 [json_name = "status"];
                              string value = 4 [json_name = "value"];
                           }
                           repeated Sid sid = 1 [json_name = "sid"];
                        }
                        Sids sids = 9 [json_name = "sids"];
                        message Nexthops {
                           message Nexthop {
                              string remote_interface_address = 1 [json_name = "remote-interface-address"];
                              string interface_name = 2 [json_name = "interface-name"];
                           }
                           repeated Nexthop nexthop = 1 [json_name = "nexthop"];
                        }
                        Nexthops nexthops = 10 [json_name = "nexthops"];
                        string local_member_as = 11 [json_name = "local-member-as"];
                        string remote_member_as = 12 [json_name = "remote-member-as"];
                     }
                     repeated Srv6PeerNode srv6_peer_node = 1 [json_name = "srv6-peer-node"];
                  }
                  Srv6PeerNodes srv6_peer_nodes = 3 [json_name = "srv6-peer-nodes"];
                  message Srv6Adjs {
                     message Srv6Adj {
                        string remote_interface_address = 1 [json_name = "remote-interface-address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        string locator_name = 3 [json_name = "locator-name"];
                        string local_interface_address = 4 [json_name = "local-interface-address"];
                        uint32 interface_id = 5 [json_name = "interface-id"];
                        message Sids {
                           message Sid {
                              enum Type {
                                 Type_NOX_PSP = 0;
                                 Type_PSPX_SID = 1;
                                 Type_PSPX_USPX_USDX_SID = 2;
                                 Type_PSPX_USPX_USDX_COCX_SID = 3;
                              };
                              Type type = 1 [json_name = "type"];
                              enum Mode {
                                 Mode_COMMON = 0;
                                 Mode_COMPRESS = 1;
                              };
                              Mode mode = 2 [json_name = "mode"];
                              enum Status {
                                 Status_OK = 0;
                                 Status_NOTX_ENOUGH = 1;
                                 Status_WAITX_AGING = 2;
                                 Status_INTERFACEX_NOTX_SUPPORT = 3;
                                 Status_PEERX_NOTX_REACHABLE = 4;
                                 Status_ONLYX_SUPPORTX_COMPRESSX_TYPE = 5;
                              };
                              Status status = 3 [json_name = "status"];
                              string value = 4 [json_name = "value"];
                           }
                           repeated Sid sid = 1 [json_name = "sid"];
                        }
                        Sids sids = 6 [json_name = "sids"];
                     }
                     repeated Srv6Adj srv6_adj = 1 [json_name = "srv6-adj"];
                  }
                  Srv6Adjs srv6_adjs = 4 [json_name = "srv6-adjs"];
               }
               EpeState epe_state = 13 [json_name = "epe-state"];
               message PeerTotalNumbers {
                  message PeerTotalNumber {
                     enum AfType {
                        INVALID_ENUM_VALUE_AfType = 0;
                        AfType_IPV4UNI = 1;
                        AfType_IPV4MULTI = 2;
                        AfType_IPV4VPN = 3;
                        AfType_IPV4LABELUNI = 4;
                        AfType_IPV6UNI = 5;
                        AfType_IPV6VPN = 6;
                        AfType_IPV4FLOW = 7;
                        AfType_L2VPNAD = 8;
                        AfType_EVPN = 9;
                        AfType_MVPN = 10;
                        AfType_VPNTARGET = 11;
                        AfType_IPV4VPNMCAST = 12;
                        AfType_LS = 13;
                        AfType_MDT = 14;
                        AfType_IPV6FLOW = 15;
                        AfType_MVPNV6 = 16;
                        AfType_VPNV4FLOW = 17;
                        AfType_VPNV6FLOW = 18;
                        AfType_RPD = 19;
                        AfType_IPV4SRPOLICY = 20;
                        AfType_IPV6SRPOLICY = 21;
                        AfType_IPV4SDWAN = 22;
                     };
                     AfType af_type = 1 [json_name = "af-type"];
                     uint32 static_peer_number = 2 [json_name = "static-peer-number"];
                     uint32 static_peer_established_number = 3 [json_name = "static-peer-established-number"];
                     uint32 dynamic_peer_number = 4 [json_name = "dynamic-peer-number"];
                     uint32 unnumbered_peer_number = 5 [json_name = "unnumbered-peer-number"];
                     uint32 unnumbered_peer_established_number = 6 [json_name = "unnumbered-peer-established-number"];
                  }
                  repeated PeerTotalNumber peer_total_number = 1 [json_name = "peer-total-number"];
               }
               PeerTotalNumbers peer_total_numbers = 14 [json_name = "peer-total-numbers"];
               message Locator {
                  string name = 1 [json_name = "name"];
                  bool advertise_sbfd_discriminator = 2 [json_name = "advertise-sbfd-discriminator"];
               }
               Locator locator = 15 [json_name = "locator"];
            }
            BaseProcess base_process = 1 [json_name = "base-process"];
            message InstanceProcesss {
               message InstanceProcess {
                  string name = 1 [json_name = "name"];
                  string router_id = 2 [json_name = "router-id"];
                  string effect_router_id = 3 [json_name = "effect-router-id"];
                  message Afs {
                     message Af {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNI = 1;
                           Type_IPV4VPN = 3;
                           Type_IPV6UNI = 5;
                           Type_EVPN = 9;
                        };
                        Type type = 1 [json_name = "type"];
                        message Ipv4Vpn {
                           bool policy_vpntarget = 1 [json_name = "policy-vpntarget"];
                           bool reflect_change_path = 2 [json_name = "reflect-change-path"];
                           bool auto_frr = 3 [json_name = "auto-frr"];
                           string tunnel_selector_name = 4 [json_name = "tunnel-selector-name"];
                           uint32 route_select_delay = 5 [json_name = "route-select-delay"];
                           enum ApplyLabelMode {
                              ApplyLabelMode_PERX_ROUTE = 0;
                              ApplyLabelMode_PERX_NEXTHOP = 1;
                           };
                           ApplyLabelMode apply_label_mode = 6 [json_name = "apply-label-mode"];
                           enum NexthopSelectDependType {
                              INVALID_ENUM_VALUE_NexthopSelectDependType = 0;
                              NexthopSelectDependType_DEPENDX_TUNNEL = 1;
                              NexthopSelectDependType_DEPENDX_IP = 2;
                              NexthopSelectDependType_DEPENDX_NONE = 3;
                           };
                           NexthopSelectDependType nexthop_select_depend_type = 7 [json_name = "nexthop-select-depend-type"];
                           uint32 default_med = 8 [json_name = "default-med"];
                           bool best_external = 9 [json_name = "best-external"];
                           uint32 label_free_delay = 10 [json_name = "label-free-delay"];
                           uint32 add_path_select_num = 11 [json_name = "add-path-select-num"];
                           uint32 default_local_preference = 12 [json_name = "default-local-preference"];
                           bool bestroute_med_plus_igp = 13 [json_name = "bestroute-med-plus-igp"];
                           uint32 bestroute_med_multiplier = 14 [json_name = "bestroute-med-multiplier"];
                           uint32 bestroute_igp_multiplier = 15 [json_name = "bestroute-igp-multiplier"];
                           bool bestroute_igp_metric_ignore = 16 [json_name = "bestroute-igp-metric-ignore"];
                           bool bestroute_router_id_prior_clusterlist = 17 [json_name = "bestroute-router-id-prior-clusterlist"];
                           bool reflect_between_client = 18 [json_name = "reflect-between-client"];
                           bool activate_route_tag = 19 [json_name = "activate-route-tag"];
                           string route_reflector_ext_community_filter = 20 [json_name = "route-reflector-ext-community-filter"];
                           message DampeningRoutes {
                              message DampeningRoute {
                                 enum PeerType {
                                    PeerType_EBGP = 0;
                                    PeerType_IBGP = 1;
                                 };
                                 PeerType peer_type = 1 [json_name = "peer-type"];
                                 uint32 half_life_time = 2 [json_name = "half-life-time"];
                                 uint32 reuse = 3 [json_name = "reuse"];
                                 uint32 suppress = 4 [json_name = "suppress"];
                                 uint32 ceiling = 5 [json_name = "ceiling"];
                                 bool update_standard = 6 [json_name = "update-standard"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                           }
                           DampeningRoutes dampening_routes = 21 [json_name = "dampening-routes"];
                           message NexthopRecursiveLookup {
                              message Common {
                                 bool restrain = 1 [json_name = "restrain"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                                 }
                                 bool default_route = 4 [json_name = "default-route"];
                              }
                              Common common = 1 [json_name = "common"];
                              message Delay {
                                 uint32 time = 1 [json_name = "time"];
                                 uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                              }
                              Delay delay = 2 [json_name = "delay"];
                              message BitErrorDetection {
                                 bool enable = 1 [json_name = "enable"];
                                 uint32 med = 2 [json_name = "med"];
                                 uint32 local_preference = 3 [json_name = "local-preference"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                              }
                              BitErrorDetection bit_error_detection = 3 [json_name = "bit-error-detection"];
                           }
                           NexthopRecursiveLookup nexthop_recursive_lookup = 22 [json_name = "nexthop-recursive-lookup"];
                           message ImportFilterPolicy {
                              message Ipv4ImportFilterProtocolPolicyType_AclRef {
                                 string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                                 string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv4ImportFilterProtocolPolicyType {
                                 Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           ImportFilterPolicy import_filter_policy = 23 [json_name = "import-filter-policy"];
                           message ExportFilterPolicy {
                              message Ipv4ImportFilterProtocolPolicyType_AclRef {
                                 string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                                 string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv4ImportFilterProtocolPolicyType {
                                 Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           ExportFilterPolicy export_filter_policy = 24 [json_name = "export-filter-policy"];
                           message SlowPeer {
                              bool detection = 1 [json_name = "detection"];
                              uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                              bool absolute_detection = 3 [json_name = "absolute-detection"];
                              uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                           }
                           SlowPeer slow_peer = 25 [json_name = "slow-peer"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 26 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 27 [json_name = "id"];
                           }
                        }
                        Ipv4Vpn ipv4_vpn = 2 [json_name = "ipv4-vpn"];
                        message Ipv4Unicast {
                           message Common {
                              bool auto_frr = 1 [json_name = "auto-frr"];
                              uint32 route_select_delay = 2 [json_name = "route-select-delay"];
                              message ReflectorType_Address {
                                 string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                              }
                              message ReflectorType_Id {
                                 uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                              }
                              oneof ReflectorType {
                                 ReflectorType_Address reflector_type_address = 3 [json_name = "address"];
                                 ReflectorType_Id reflector_type_id = 4 [json_name = "id"];
                              }
                              bool reflect_change_path = 5 [json_name = "reflect-change-path"];
                              bool nexthop_resolve_aigp = 6 [json_name = "nexthop-resolve-aigp"];
                              bool always_compare_med = 7 [json_name = "always-compare-med"];
                              uint32 default_med = 8 [json_name = "default-med"];
                              bool summary_automatic = 9 [json_name = "summary-automatic"];
                              bool nexthop_third_party = 10 [json_name = "nexthop-third-party"];
                              bool supernet_unicast_advertise = 11 [json_name = "supernet-unicast-advertise"];
                              bool supernet_label_advertise = 12 [json_name = "supernet-label-advertise"];
                              uint32 label_free_delay = 13 [json_name = "label-free-delay"];
                              bool determin_med = 14 [json_name = "determin-med"];
                              bool attribute_set_enable = 15 [json_name = "attribute-set-enable"];
                              enum AttributeSetMode {
                                 INVALID_ENUM_VALUE_AttributeSetMode = 0;
                                 AttributeSetMode_RECEIVE = 1;
                                 AttributeSetMode_SEND = 2;
                                 AttributeSetMode_BOTH = 3;
                              };
                              AttributeSetMode attribute_set_mode = 16 [json_name = "attribute-set-mode"];
                              uint32 default_local_preference = 17 [json_name = "default-local-preference"];
                              bool default_route_import = 18 [json_name = "default-route-import"];
                              bool routerid_neglect = 19 [json_name = "routerid-neglect"];
                              bool reflect_between_client = 20 [json_name = "reflect-between-client"];
                              bool import_rib_nexthop_invariable = 21 [json_name = "import-rib-nexthop-invariable"];
                              bool best_route_bit_error_detection = 22 [json_name = "best-route-bit-error-detection"];
                              bool bestroute_med_plus_igp = 23 [json_name = "bestroute-med-plus-igp"];
                              uint32 bestroute_med_multiplier = 24 [json_name = "bestroute-med-multiplier"];
                              uint32 bestroute_igp_multiplier = 25 [json_name = "bestroute-igp-multiplier"];
                              bool bestroute_igp_metric_ignore = 26 [json_name = "bestroute-igp-metric-ignore"];
                              bool bestroute_router_id_prior_clusterlist = 27 [json_name = "bestroute-router-id-prior-clusterlist"];
                              bool bestroute_med_none_as_maximum = 28 [json_name = "bestroute-med-none-as-maximum"];
                              uint32 maximum_load_balancing_ibgp = 29 [json_name = "maximum-load-balancing-ibgp"];
                              uint32 maximum_load_balancing_ebgp = 30 [json_name = "maximum-load-balancing-ebgp"];
                              bool bestroute_as_path_ignore = 31 [json_name = "bestroute-as-path-ignore"];
                              bool load_balanc_igp_metric_ignore = 32 [json_name = "load-balanc-igp-metric-ignore"];
                              bool load_balanc_as_path_ignore = 33 [json_name = "load-balanc-as-path-ignore"];
                              bool load_balanc_as_path_relax = 34 [json_name = "load-balanc-as-path-relax"];
                              uint32 maximum_load_balancing = 35 [json_name = "maximum-load-balancing"];
                              bool ebgp_ecmp_nexthop_changed = 36 [json_name = "ebgp-ecmp-nexthop-changed"];
                              bool ibgp_ecmp_nexthop_changed = 37 [json_name = "ibgp-ecmp-nexthop-changed"];
                              bool ecmp_nexthop_changed = 38 [json_name = "ecmp-nexthop-changed"];
                              uint32 maximum_load_balancing_eibgp = 39 [json_name = "maximum-load-balancing-eibgp"];
                              bool eibgp_ecmp_nexthop_changed = 40 [json_name = "eibgp-ecmp-nexthop-changed"];
                              bool load_balancing_eibgp_enable = 41 [json_name = "load-balancing-eibgp-enable"];
                              bool ext_community_change = 42 [json_name = "ext-community-change"];
                              bool active_route_advertise = 43 [json_name = "active-route-advertise"];
                              bool ebgp_interface_sensitive = 44 [json_name = "ebgp-interface-sensitive"];
                              enum AdvertiseRouteMode {
                                 AdvertiseRouteMode_ALL = 0;
                                 AdvertiseRouteMode_BEST = 1;
                                 AdvertiseRouteMode_VALID = 2;
                              };
                              AdvertiseRouteMode advertise_route_mode = 45 [json_name = "advertise-route-mode"];
                              uint32 maximum_load_balancing_mixed = 46 [json_name = "maximum-load-balancing-mixed"];
                              bool load_balancing_local_learn_cross = 47 [json_name = "load-balancing-local-learn-cross"];
                           }
                           Common common = 1 [json_name = "common"];
                           message Preference {
                              message SetValueOrPolicy_SetValue {
                                 uint32 external = 1 [json_name = "external"];
                                 uint32 internal = 2 [json_name = "internal"];
                                 uint32 local = 3 [json_name = "local"];
                              }
                              message SetValueOrPolicy_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message SetValueOrPolicy_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof SetValueOrPolicy {
                                 SetValueOrPolicy_SetValue set_value_or_policy_set_value = 1 [json_name = "set-value"];
                                 SetValueOrPolicy_RtpRef set_value_or_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                                 SetValueOrPolicy_XplRef set_value_or_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           Preference preference = 2 [json_name = "preference"];
                           message NexthopRecursiveLookup {
                              message Common {
                                 bool restrain = 1 [json_name = "restrain"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 2 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                                 }
                              }
                              Common common = 1 [json_name = "common"];
                              message Delay {
                                 uint32 time = 1 [json_name = "time"];
                                 uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                              }
                              Delay delay = 2 [json_name = "delay"];
                           }
                           NexthopRecursiveLookup nexthop_recursive_lookup = 3 [json_name = "nexthop-recursive-lookup"];
                           message ImportRoutes {
                              message ImportRoute {
                                 enum Protocol {
                                    INVALID_ENUM_VALUE_Protocol = 0;
                                    Protocol_DIRECT = 1;
                                    Protocol_OSPF = 2;
                                    Protocol_ISIS = 3;
                                    Protocol_STATIC = 4;
                                    Protocol_RIP = 5;
                                    Protocol_UNR = 11;
                                    Protocol_OPX_ROUTE = 14;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 uint32 process_id = 2 [json_name = "process-id"];
                                 uint32 med = 3 [json_name = "med"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ImportRoute import_route = 1 [json_name = "import-route"];
                           }
                           ImportRoutes import_routes = 4 [json_name = "import-routes"];
                           message AggregateRoutes {
                              message AggregateRoute {
                                 string address = 1 [json_name = "address"];
                                 uint32 mask_length = 2 [json_name = "mask-length"];
                                 bool as_set = 3 [json_name = "as-set"];
                                 bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                                 message PolicyType_RtpRef {
                                    string attribute_policy = 1 [json_name = "attribute-policy"];
                                    string origin_policy = 2 [json_name = "origin-policy"];
                                    string suppress_policy = 3 [json_name = "suppress-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string attribute_filter_name = 1 [json_name = "attribute-filter-name"];
                                    string attribute_filter_parameter = 2 [json_name = "attribute-filter-parameter"];
                                    string origin_filter_name = 3 [json_name = "origin-filter-name"];
                                    string origin_filter_parameter = 4 [json_name = "origin-filter-parameter"];
                                    string suppress_filter_name = 5 [json_name = "suppress-filter-name"];
                                    string suppress_filter_parameter = 6 [json_name = "suppress-filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                           }
                           AggregateRoutes aggregate_routes = 5 [json_name = "aggregate-routes"];
                           message AggregateDefaultRoute {
                              string origin_ip_prefix = 1 [json_name = "origin-ip-prefix"];
                              string attribute_policy = 2 [json_name = "attribute-policy"];
                           }
                           AggregateDefaultRoute aggregate_default_route = 6 [json_name = "aggregate-default-route"];
                           message NetworkRoutes {
                              message NetworkRoute {
                                 string address = 1 [json_name = "address"];
                                 uint32 mask_length = 2 [json_name = "mask-length"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                           }
                           NetworkRoutes network_routes = 7 [json_name = "network-routes"];
                           message ImportRibs {
                              message ImportRib {
                                 string source_vpn = 1 [json_name = "source-vpn"];
                                 enum SourceAddressFamily {
                                    INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                    SourceAddressFamily_IPV4UNI = 1;
                                 };
                                 SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                                 bool valid_route = 3 [json_name = "valid-route"];
                                 bool include_label_route = 4 [json_name = "include-label-route"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                           }
                           ImportRibs import_ribs = 8 [json_name = "import-ribs"];
                           message InstanceImportRibs {
                              message InstanceImportRib {
                                 string source_instance = 1 [json_name = "source-instance"];
                                 string source_vpn = 2 [json_name = "source-vpn"];
                                 enum SourceAddressFamily {
                                    INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                    SourceAddressFamily_IPV4UNI = 1;
                                 };
                                 SourceAddressFamily source_address_family = 3 [json_name = "source-address-family"];
                                 bool valid_route = 4 [json_name = "valid-route"];
                                 bool include_label_route = 5 [json_name = "include-label-route"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated InstanceImportRib instance_import_rib = 1 [json_name = "instance-import-rib"];
                           }
                           InstanceImportRibs instance_import_ribs = 9 [json_name = "instance-import-ribs"];
                           message ImportFilterPolicy {
                              message Ipv4ImportFilterProtocolPolicyType_AclRef {
                                 string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_IpPrefixRef {
                                 string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                              }
                              message Ipv4ImportFilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv4ImportFilterProtocolPolicyType {
                                 Ipv4ImportFilterProtocolPolicyType_AclRef ipv4_import_filter_protocol_policy_type_acl_ref = 1 [json_name = "acl-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_IpPrefixRef ipv4_import_filter_protocol_policy_type_ip_prefix_ref = 2 [json_name = "ip-prefix-ref"];
                                 Ipv4ImportFilterProtocolPolicyType_XplRef ipv4_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           ImportFilterPolicy import_filter_policy = 10 [json_name = "import-filter-policy"];
                           message ExportFilterPolicys {
                              message ExportFilterPolicy {
                                 enum Protocol {
                                    Protocol_NOPROTOCOL = 0;
                                    Protocol_DIRECT = 1;
                                    Protocol_OSPF = 2;
                                    Protocol_ISIS = 3;
                                    Protocol_STATIC = 4;
                                    Protocol_RIP = 5;
                                    Protocol_OPX_ROUTE = 14;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 uint32 process_id = 2 [json_name = "process-id"];
                                 message Ipv4FilterProtocolPolicyType_AclRef {
                                    string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                                 }
                                 message Ipv4FilterProtocolPolicyType_IpPrefixRef {
                                    string ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
                                 }
                                 message Ipv4FilterProtocolPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof Ipv4FilterProtocolPolicyType {
                                    Ipv4FilterProtocolPolicyType_AclRef ipv4_filter_protocol_policy_type_acl_ref = 3 [json_name = "acl-ref"];
                                    Ipv4FilterProtocolPolicyType_IpPrefixRef ipv4_filter_protocol_policy_type_ip_prefix_ref = 4 [json_name = "ip-prefix-ref"];
                                    Ipv4FilterProtocolPolicyType_XplRef ipv4_filter_protocol_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ExportFilterPolicy export_filter_policy = 1 [json_name = "export-filter-policy"];
                           }
                           ExportFilterPolicys export_filter_policys = 11 [json_name = "export-filter-policys"];
                           message DampeningRoutes {
                              message DampeningRoute {
                                 enum PeerType {
                                    PeerType_EBGP = 0;
                                    PeerType_IBGP = 1;
                                 };
                                 PeerType peer_type = 1 [json_name = "peer-type"];
                                 uint32 half_life_time = 2 [json_name = "half-life-time"];
                                 uint32 reuse = 3 [json_name = "reuse"];
                                 uint32 suppress = 4 [json_name = "suppress"];
                                 uint32 ceiling = 5 [json_name = "ceiling"];
                                 bool update_standard = 6 [json_name = "update-standard"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                           }
                           DampeningRoutes dampening_routes = 12 [json_name = "dampening-routes"];
                           message SlowPeer {
                              bool detection = 1 [json_name = "detection"];
                              uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                              bool absolute_detection = 3 [json_name = "absolute-detection"];
                              uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                           }
                           SlowPeer slow_peer = 13 [json_name = "slow-peer"];
                           message Qos {
                              message LocalIdPolicy_Value {
                                 uint32 local_id = 1 [json_name = "local-id"];
                              }
                              message LocalIdPolicy_RtpRef {
                                 string local_id_policy_name = 1 [json_name = "local-id-policy-name"];
                              }
                              message LocalIdPolicy_XplRef {
                                 string local_id_filter_name = 1 [json_name = "local-id-filter-name"];
                                 string local_id_filter_parameter = 2 [json_name = "local-id-filter-parameter"];
                              }
                              oneof LocalIdPolicy {
                                 LocalIdPolicy_Value local_id_policy_value = 1 [json_name = "value"];
                                 LocalIdPolicy_RtpRef local_id_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                                 LocalIdPolicy_XplRef local_id_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           Qos qos = 14 [json_name = "qos"];
                           message Evpn {
                              message IrbAsymmetric {
                                 bool irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                                 string policy_name = 2 [json_name = "policy-name"];
                              }
                              IrbAsymmetric irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                           }
                           Evpn evpn = 15 [json_name = "evpn"];
                           message AdvertiseRouteToEvpns {
                              message AdvertiseRouteToEvpn {
                                 enum Protocol {
                                    Protocol_ALL = 0;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 bool import_multipath = 2 [json_name = "import-multipath"];
                                 bool include_local_cross = 3 [json_name = "include-local-cross"];
                                 enum AdvertiseRouteMode {
                                    AdvertiseRouteMode_ALL = 0;
                                    AdvertiseRouteMode_BEST = 1;
                                    AdvertiseRouteMode_VALID = 2;
                                 };
                                 AdvertiseRouteMode advertise_route_mode = 4 [json_name = "advertise-route-mode"];
                              }
                              repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                           }
                           AdvertiseRouteToEvpns advertise_route_to_evpns = 16 [json_name = "advertise-route-to-evpns"];
                        }
                        Ipv4Unicast ipv4_unicast = 3 [json_name = "ipv4-unicast"];
                        message L2VpnEvpn {
                           message SlowPeer {
                              bool detection = 1 [json_name = "detection"];
                              uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                              bool absolute_detection = 3 [json_name = "absolute-detection"];
                              uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                           }
                           SlowPeer slow_peer = 1 [json_name = "slow-peer"];
                           bool policy_vpntarget = 2 [json_name = "policy-vpntarget"];
                           uint32 add_path_select_num = 3 [json_name = "add-path-select-num"];
                           bool reflect_between_client = 4 [json_name = "reflect-between-client"];
                           message ReflectorType_Address {
                              string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                           }
                           message ReflectorType_Id {
                              uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                           }
                           oneof ReflectorType {
                              ReflectorType_Address reflector_type_address = 5 [json_name = "address"];
                              ReflectorType_Id reflector_type_id = 6 [json_name = "id"];
                           }
                           message NexthopRecursiveLookup {
                              message Delay {
                                 uint32 time = 1 [json_name = "time"];
                                 uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                              }
                              Delay delay = 1 [json_name = "delay"];
                           }
                           NexthopRecursiveLookup nexthop_recursive_lookup = 7 [json_name = "nexthop-recursive-lookup"];
                           message DampeningRoutes {
                              message DampeningRoute {
                                 enum PeerType {
                                    PeerType_EBGP = 0;
                                    PeerType_IBGP = 1;
                                 };
                                 PeerType peer_type = 1 [json_name = "peer-type"];
                                 uint32 half_life_time = 2 [json_name = "half-life-time"];
                                 uint32 reuse = 3 [json_name = "reuse"];
                                 uint32 suppress = 4 [json_name = "suppress"];
                                 uint32 ceiling = 5 [json_name = "ceiling"];
                                 bool update_standard = 6 [json_name = "update-standard"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                           }
                           DampeningRoutes dampening_routes = 8 [json_name = "dampening-routes"];
                        }
                        L2VpnEvpn l2vpn_evpn = 4 [json_name = "l2vpn-evpn"];
                        message Ipv6Unicast {
                           message Common {
                              uint32 route_select_delay = 1 [json_name = "route-select-delay"];
                              message ReflectorType_Address {
                                 string reflector_cluster_ipv4 = 1 [json_name = "reflector-cluster-ipv4"];
                              }
                              message ReflectorType_Id {
                                 uint32 reflector_cluster_id = 1 [json_name = "reflector-cluster-id"];
                              }
                              oneof ReflectorType {
                                 ReflectorType_Address reflector_type_address = 2 [json_name = "address"];
                                 ReflectorType_Id reflector_type_id = 3 [json_name = "id"];
                              }
                              bool reflect_change_path = 4 [json_name = "reflect-change-path"];
                              bool always_compare_med = 5 [json_name = "always-compare-med"];
                              uint32 default_med = 6 [json_name = "default-med"];
                              bool nexthop_third_party = 7 [json_name = "nexthop-third-party"];
                              uint32 default_local_preference = 8 [json_name = "default-local-preference"];
                              bool default_route_import = 9 [json_name = "default-route-import"];
                              bool routerid_neglect = 10 [json_name = "routerid-neglect"];
                              bool reflect_between_client = 11 [json_name = "reflect-between-client"];
                              bool ext_community_change = 12 [json_name = "ext-community-change"];
                              bool active_route_advertise = 13 [json_name = "active-route-advertise"];
                              bool ebgp_interface_sensitive = 14 [json_name = "ebgp-interface-sensitive"];
                              bool router_id_auto_select = 15 [json_name = "router-id-auto-select"];
                              string router_id = 16 [json_name = "router-id"];
                              bool supernet_unicast_advertise = 17 [json_name = "supernet-unicast-advertise"];
                              bool bestroute_med_plus_igp = 18 [json_name = "bestroute-med-plus-igp"];
                              uint32 bestroute_med_multiplier = 19 [json_name = "bestroute-med-multiplier"];
                              uint32 bestroute_igp_multiplier = 20 [json_name = "bestroute-igp-multiplier"];
                              bool bestroute_igp_metric_ignore = 21 [json_name = "bestroute-igp-metric-ignore"];
                              bool bestroute_router_id_prior_clusterlist = 22 [json_name = "bestroute-router-id-prior-clusterlist"];
                              bool bestroute_med_none_as_maximum = 23 [json_name = "bestroute-med-none-as-maximum"];
                              uint32 maximum_load_balancing_ibgp = 24 [json_name = "maximum-load-balancing-ibgp"];
                              uint32 maximum_load_balancing_ebgp = 25 [json_name = "maximum-load-balancing-ebgp"];
                              bool bestroute_as_path_ignore = 26 [json_name = "bestroute-as-path-ignore"];
                              bool load_balanc_as_path_ignore = 27 [json_name = "load-balanc-as-path-ignore"];
                              bool load_balanc_as_path_relax = 28 [json_name = "load-balanc-as-path-relax"];
                              uint32 maximum_load_balancing = 29 [json_name = "maximum-load-balancing"];
                              bool ebgp_ecmp_nexthop_changed = 30 [json_name = "ebgp-ecmp-nexthop-changed"];
                              bool ibgp_ecmp_nexthop_changed = 31 [json_name = "ibgp-ecmp-nexthop-changed"];
                              bool ecmp_nexthop_changed = 32 [json_name = "ecmp-nexthop-changed"];
                              uint32 maximum_load_balancing_eibgp = 33 [json_name = "maximum-load-balancing-eibgp"];
                              bool eibgp_ecmp_nexthop_changed = 34 [json_name = "eibgp-ecmp-nexthop-changed"];
                              bool import_rib_nexthop_invariable = 35 [json_name = "import-rib-nexthop-invariable"];
                              bool determin_med = 36 [json_name = "determin-med"];
                              uint32 maximum_load_balancing_mixed = 37 [json_name = "maximum-load-balancing-mixed"];
                           }
                           Common common = 1 [json_name = "common"];
                           message AggregateDefaultRoute {
                              string origin_ipv6_prefix = 1 [json_name = "origin-ipv6-prefix"];
                              string attribute_policy = 2 [json_name = "attribute-policy"];
                           }
                           AggregateDefaultRoute aggregate_default_route = 2 [json_name = "aggregate-default-route"];
                           message AggregateRoutes {
                              message AggregateRoute {
                                 string address = 1 [json_name = "address"];
                                 uint32 mask_length = 2 [json_name = "mask-length"];
                                 bool as_set = 3 [json_name = "as-set"];
                                 bool detail_suppressed = 4 [json_name = "detail-suppressed"];
                                 message PolicyType_RtpRef {
                                    string attribute_policy = 1 [json_name = "attribute-policy"];
                                    string origin_policy = 2 [json_name = "origin-policy"];
                                    string suppress_policy = 3 [json_name = "suppress-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string attribute_filter_name = 1 [json_name = "attribute-filter-name"];
                                    string attribute_filter_parameter = 2 [json_name = "attribute-filter-parameter"];
                                    string origin_filter_name = 3 [json_name = "origin-filter-name"];
                                    string origin_filter_parameter = 4 [json_name = "origin-filter-parameter"];
                                    string suppress_filter_name = 5 [json_name = "suppress-filter-name"];
                                    string suppress_filter_parameter = 6 [json_name = "suppress-filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated AggregateRoute aggregate_route = 1 [json_name = "aggregate-route"];
                           }
                           AggregateRoutes aggregate_routes = 3 [json_name = "aggregate-routes"];
                           message ImportRoutes {
                              message ImportRoute {
                                 enum Protocol {
                                    INVALID_ENUM_VALUE_Protocol = 0;
                                    Protocol_DIRECT = 1;
                                    Protocol_ISIS = 3;
                                    Protocol_STATIC = 4;
                                    Protocol_OSPFV3 = 7;
                                    Protocol_RIPNG = 8;
                                    Protocol_UNR = 11;
                                    Protocol_OPX_ROUTE = 14;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 uint32 process_id = 2 [json_name = "process-id"];
                                 uint32 med = 3 [json_name = "med"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ImportRoute import_route = 1 [json_name = "import-route"];
                           }
                           ImportRoutes import_routes = 4 [json_name = "import-routes"];
                           message NexthopRecursiveLookup {
                              message Common {
                                 bool restrain = 1 [json_name = "restrain"];
                                 string route_policy = 2 [json_name = "route-policy"];
                              }
                              Common common = 1 [json_name = "common"];
                              message Delay {
                                 uint32 time = 1 [json_name = "time"];
                                 uint32 no_critical_event_time = 2 [json_name = "no-critical-event-time"];
                              }
                              Delay delay = 2 [json_name = "delay"];
                           }
                           NexthopRecursiveLookup nexthop_recursive_lookup = 5 [json_name = "nexthop-recursive-lookup"];
                           message NetworkRoutes {
                              message NetworkRoute {
                                 string address = 1 [json_name = "address"];
                                 uint32 mask_length = 2 [json_name = "mask-length"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 4 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated NetworkRoute network_route = 1 [json_name = "network-route"];
                           }
                           NetworkRoutes network_routes = 6 [json_name = "network-routes"];
                           message AdvertiseRouteToEvpns {
                              message AdvertiseRouteToEvpn {
                                 enum Protocol {
                                    Protocol_ALL = 0;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 bool import_multipath = 2 [json_name = "import-multipath"];
                                 bool include_local_cross = 3 [json_name = "include-local-cross"];
                                 enum AdvertiseRouteMode {
                                    AdvertiseRouteMode_ALL = 0;
                                    AdvertiseRouteMode_BEST = 1;
                                    AdvertiseRouteMode_VALID = 2;
                                 };
                                 AdvertiseRouteMode advertise_route_mode = 4 [json_name = "advertise-route-mode"];
                              }
                              repeated AdvertiseRouteToEvpn advertise_route_to_evpn = 1 [json_name = "advertise-route-to-evpn"];
                           }
                           AdvertiseRouteToEvpns advertise_route_to_evpns = 7 [json_name = "advertise-route-to-evpns"];
                           message Preference {
                              message SetValueOrPolicy_SetValue {
                                 uint32 external = 1 [json_name = "external"];
                                 uint32 internal = 2 [json_name = "internal"];
                                 uint32 local = 3 [json_name = "local"];
                              }
                              message SetValueOrPolicy_RtpRef {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message SetValueOrPolicy_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof SetValueOrPolicy {
                                 SetValueOrPolicy_SetValue set_value_or_policy_set_value = 1 [json_name = "set-value"];
                                 SetValueOrPolicy_RtpRef set_value_or_policy_rtp_ref = 2 [json_name = "rtp-ref"];
                                 SetValueOrPolicy_XplRef set_value_or_policy_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           Preference preference = 8 [json_name = "preference"];
                           message Evpn {
                              message IrbAsymmetric {
                                 bool irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                                 string policy_name = 2 [json_name = "policy-name"];
                              }
                              IrbAsymmetric irb_asymmetric = 1 [json_name = "irb-asymmetric"];
                           }
                           Evpn evpn = 9 [json_name = "evpn"];
                           message DampeningRoutes {
                              message DampeningRoute {
                                 enum PeerType {
                                    PeerType_EBGP = 0;
                                    PeerType_IBGP = 1;
                                 };
                                 PeerType peer_type = 1 [json_name = "peer-type"];
                                 uint32 half_life_time = 2 [json_name = "half-life-time"];
                                 uint32 reuse = 3 [json_name = "reuse"];
                                 uint32 suppress = 4 [json_name = "suppress"];
                                 uint32 ceiling = 5 [json_name = "ceiling"];
                                 bool update_standard = 6 [json_name = "update-standard"];
                                 message PolicyType_RtpRef {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated DampeningRoute dampening_route = 1 [json_name = "dampening-route"];
                           }
                           DampeningRoutes dampening_routes = 10 [json_name = "dampening-routes"];
                           message ImportRibs {
                              message ImportRib {
                                 string source_vpn = 1 [json_name = "source-vpn"];
                                 enum SourceAddressFamily {
                                    INVALID_ENUM_VALUE_SourceAddressFamily = 0;
                                    SourceAddressFamily_IPV6UNI = 5;
                                 };
                                 SourceAddressFamily source_address_family = 2 [json_name = "source-address-family"];
                                 bool valid_route = 3 [json_name = "valid-route"];
                                 bool include_label_route = 4 [json_name = "include-label-route"];
                                 message PolicyType_RtpRef {
                                    string policy_name = 1 [json_name = "policy-name"];
                                 }
                                 message PolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RtpRef policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    PolicyType_XplRef policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ImportRib import_rib = 1 [json_name = "import-rib"];
                           }
                           ImportRibs import_ribs = 11 [json_name = "import-ribs"];
                           message ImportFilterPolicy {
                              message Ipv6ImportFilterProtocolPolicyType_Acl6Ref {
                                 string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                              }
                              message Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef {
                                 string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                              }
                              message Ipv6ImportFilterProtocolPolicyType_XplRef {
                                 string filter_name = 1 [json_name = "filter-name"];
                                 string filter_parameter = 2 [json_name = "filter-parameter"];
                              }
                              oneof Ipv6ImportFilterProtocolPolicyType {
                                 Ipv6ImportFilterProtocolPolicyType_Acl6Ref ipv6_import_filter_protocol_policy_type_acl6_ref = 1 [json_name = "acl6-ref"];
                                 Ipv6ImportFilterProtocolPolicyType_Ipv6PrefixRef ipv6_import_filter_protocol_policy_type_ipv6_prefix_ref = 2 [json_name = "ipv6-prefix-ref"];
                                 Ipv6ImportFilterProtocolPolicyType_XplRef ipv6_import_filter_protocol_policy_type_xpl_ref = 3 [json_name = "xpl-ref"];
                              }
                           }
                           ImportFilterPolicy import_filter_policy = 12 [json_name = "import-filter-policy"];
                           message ExportFilterPolicys {
                              message ExportFilterPolicy {
                                 enum Protocol {
                                    Protocol_NOPROTOCOL = 0;
                                    Protocol_DIRECT = 1;
                                    Protocol_ISIS = 3;
                                    Protocol_STATIC = 4;
                                    Protocol_OSPFV3 = 7;
                                    Protocol_RIPNG = 8;
                                    Protocol_UNR = 11;
                                 };
                                 Protocol protocol = 1 [json_name = "protocol"];
                                 uint32 process_id = 2 [json_name = "process-id"];
                                 message Ipv6FilterProtocolPolicyType_Acl6Ref {
                                    string acl6_name_or_num = 1 [json_name = "acl6-name-or-num"];
                                 }
                                 message Ipv6FilterProtocolPolicyType_Ipv6PrefixRef {
                                    string ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
                                 }
                                 message Ipv6FilterProtocolPolicyType_XplRef {
                                    string filter_name = 1 [json_name = "filter-name"];
                                    string filter_parameter = 2 [json_name = "filter-parameter"];
                                 }
                                 oneof Ipv6FilterProtocolPolicyType {
                                    Ipv6FilterProtocolPolicyType_Acl6Ref ipv6_filter_protocol_policy_type_acl6_ref = 3 [json_name = "acl6-ref"];
                                    Ipv6FilterProtocolPolicyType_Ipv6PrefixRef ipv6_filter_protocol_policy_type_ipv6_prefix_ref = 4 [json_name = "ipv6-prefix-ref"];
                                    Ipv6FilterProtocolPolicyType_XplRef ipv6_filter_protocol_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                              }
                              repeated ExportFilterPolicy export_filter_policy = 1 [json_name = "export-filter-policy"];
                           }
                           ExportFilterPolicys export_filter_policys = 13 [json_name = "export-filter-policys"];
                           message SlowPeer {
                              bool detection = 1 [json_name = "detection"];
                              uint32 detection_threshold = 2 [json_name = "detection-threshold"];
                              bool absolute_detection = 3 [json_name = "absolute-detection"];
                              uint32 absolute_detection_threshold = 4 [json_name = "absolute-detection-threshold"];
                           }
                           SlowPeer slow_peer = 14 [json_name = "slow-peer"];
                        }
                        Ipv6Unicast ipv6_unicast = 5 [json_name = "ipv6-unicast"];
                     }
                     repeated Af af = 1 [json_name = "af"];
                  }
                  Afs afs = 4 [json_name = "afs"];
                  message PeerGroups {
                     message PeerGroup {
                        string name = 1 [json_name = "name"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_EBGP = 1;
                           Type_IBGP = 2;
                        };
                        Type type = 2 [json_name = "type"];
                        string local_if_name = 3 [json_name = "local-if-name"];
                        string local_if_address = 4 [json_name = "local-if-address"];
                        enum PasswordType {
                           PasswordType_NULL = 0;
                           PasswordType_CIPHER = 1;
                           PasswordType_SIMPLE = 2;
                        };
                        PasswordType password_type = 5 [json_name = "password-type"];
                        string password_text = 6 [json_name = "password-text"];
                        string key_chain_name = 7 [json_name = "key-chain-name"];
                        string description = 8 [json_name = "description"];
                        string group_as = 9 [json_name = "group-as"];
                        uint32 ebgp_max_hop = 10 [json_name = "ebgp-max-hop"];
                        uint32 valid_ttl_hops = 11 [json_name = "valid-ttl-hops"];
                        bool tracking_enable = 12 [json_name = "tracking-enable"];
                        uint32 tracking_delay_time = 13 [json_name = "tracking-delay-time"];
                        bool conventional = 14 [json_name = "conventional"];
                        bool route_refresh = 15 [json_name = "route-refresh"];
                        bool four_byte_as = 16 [json_name = "four-byte-as"];
                        bool ignore = 17 [json_name = "ignore"];
                        enum ConnectMode {
                           INVALID_ENUM_VALUE_ConnectMode = 0;
                           ConnectMode_LISTENX_ONLY = 1;
                           ConnectMode_CONNECTX_ONLY = 2;
                           ConnectMode_NULL = 3;
                        };
                        ConnectMode connect_mode = 18 [json_name = "connect-mode"];
                        bool log_change = 19 [json_name = "log-change"];
                        enum CheckFirstAs {
                           CheckFirstAs_DEFAULT = 0;
                           CheckFirstAs_ENABLE = 1;
                           CheckFirstAs_DISABLE = 2;
                        };
                        CheckFirstAs check_first_as = 20 [json_name = "check-first-as"];
                        enum MemoryPriority {
                           MemoryPriority_LOW = 0;
                           MemoryPriority_MEDIUM = 1;
                           MemoryPriority_HIGH = 2;
                        };
                        MemoryPriority memory_priority = 21 [json_name = "memory-priority"];
                        bool oscillation_dampening = 22 [json_name = "oscillation-dampening"];
                        message FakeAsParameter {
                           string fake_as = 1 [json_name = "fake-as"];
                           bool dual_as = 2 [json_name = "dual-as"];
                           bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                           bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                        }
                        FakeAsParameter fake_as_parameter = 23 [json_name = "fake-as-parameter"];
                        message Timer {
                           uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                           uint32 hold_time = 2 [json_name = "hold-time"];
                           uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                           uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                        }
                        Timer timer = 24 [json_name = "timer"];
                        message BfdParameter {
                           bool enable = 1 [json_name = "enable"];
                           message ModeType_Single {
                              bool single_hop = 1 [json_name = "single-hop"];
                              bool compatible = 2 [json_name = "compatible"];
                           }
                           message ModeType_Link {
                              bool per_link_echo = 1 [json_name = "per-link-echo"];
                           }
                           message ModeType_OneArmEcho {
                              bool one_arm_echo = 1 [json_name = "one-arm-echo"];
                           }
                           oneof ModeType {
                              ModeType_Single mode_type_single = 2 [json_name = "single"];
                              ModeType_Link mode_type_link = 3 [json_name = "link"];
                              ModeType_OneArmEcho mode_type_one_arm_echo = 4 [json_name = "one-arm-echo"];
                           }
                           uint32 multiplier = 5 [json_name = "multiplier"];
                           uint32 min_rx_interval = 6 [json_name = "min-rx-interval"];
                           uint32 min_tx_interval = 7 [json_name = "min-tx-interval"];
                           uint32 valid_ttl_hops = 8 [json_name = "valid-ttl-hops"];
                        }
                        BfdParameter bfd_parameter = 25 [json_name = "bfd-parameter"];
                        message GracefulRestart {
                           bool enable = 1 [json_name = "enable"];
                           uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                           uint32 restart_time = 3 [json_name = "restart-time"];
                           bool peer_reset = 4 [json_name = "peer-reset"];
                        }
                        GracefulRestart graceful_restart = 26 [json_name = "graceful-restart"];
                        message LocalGracefulRestart {
                           bool enable = 1 [json_name = "enable"];
                           uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                           uint32 restart_time = 3 [json_name = "restart-time"];
                        }
                        LocalGracefulRestart local_graceful_restart = 27 [json_name = "local-graceful-restart"];
                        message Afs {
                           message Af {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_IPV4UNI = 1;
                                 Type_IPV4VPN = 3;
                                 Type_IPV6UNI = 5;
                                 Type_EVPN = 9;
                              };
                              Type type = 1 [json_name = "type"];
                              message Ipv4Unicast {
                                 bool reflect_client = 1 [json_name = "reflect-client"];
                                 bool label_route_capability = 2 [json_name = "label-route-capability"];
                                 bool check_tunnel_reachable = 3 [json_name = "check-tunnel-reachable"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                 };
                                 NexthopConfigure nexthop_configure = 4 [json_name = "nexthop-configure"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 9 [json_name = "allow-as-loop"];
                                 string import_ip_prefix = 10 [json_name = "import-ip-prefix"];
                                 string export_ip_prefix = 11 [json_name = "export-ip-prefix"];
                                 string import_as_path_filter = 12 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 13 [json_name = "export-as-path-filter"];
                                 string import_acl_name_or_num = 14 [json_name = "import-acl-name-or-num"];
                                 string export_acl_name_or_num = 15 [json_name = "export-acl-name-or-num"];
                                 bool default_route_advertise = 16 [json_name = "default-route-advertise"];
                                 message DefaultRouteAdvertisePolicyType_RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 message DefaultRouteAdvertisePolicyType_XplRef {
                                    message DefaultRouteAdvertiseFilter {
                                       string filter_name = 1 [json_name = "filter-name"];
                                       string filter_parameter = 2 [json_name = "filter-parameter"];
                                    }
                                    DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                                 }
                                 oneof DefaultRouteAdvertisePolicyType {
                                    DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 17 [json_name = "rtp-ref"];
                                    DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 37 [json_name = "xpl-ref"];
                                 }
                                 enum DefaultRouteMatchMode {
                                    DefaultRouteMatchMode_NULL = 0;
                                    DefaultRouteMatchMode_MATCHALL = 1;
                                    DefaultRouteMatchMode_MATCHANY = 2;
                                 };
                                 DefaultRouteMatchMode default_route_match_mode = 19 [json_name = "default-route-match-mode"];
                                 uint32 route_update_interval = 20 [json_name = "route-update-interval"];
                                 uint32 preferred_value = 21 [json_name = "preferred-value"];
                                 bool substitute_as_enable = 22 [json_name = "substitute-as-enable"];
                                 string soo = 23 [json_name = "soo"];
                                 bool keep_all_routes = 24 [json_name = "keep-all-routes"];
                                 bool load_balancing_enable = 25 [json_name = "load-balancing-enable"];
                                 message LoadBalancingIgnoreAsType_AsAttribute {
                                    bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                                 }
                                 message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                    bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                                 }
                                 oneof LoadBalancingIgnoreAsType {
                                    LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 26 [json_name = "as-attribute"];
                                    LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 27 [json_name = "same-length-as-attribute"];
                                 }
                                 bool update_group_independent = 28 [json_name = "update-group-independent"];
                                 bool advertise_community = 29 [json_name = "advertise-community"];
                                 bool advertise_ext_community = 30 [json_name = "advertise-ext-community"];
                                 bool discard_ext_community = 31 [json_name = "discard-ext-community"];
                                 bool advertise_large_community = 32 [json_name = "advertise-large-community"];
                                 message DefaultRouteMatchConditions {
                                    message DefaultRouteMatchCondition {
                                       string address = 1 [json_name = "address"];
                                       uint32 mask = 2 [json_name = "mask"];
                                    }
                                    repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                                 }
                                 DefaultRouteMatchConditions default_route_match_conditions = 33 [json_name = "default-route-match-conditions"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    bool accept_prefix = 2 [json_name = "accept-prefix"];
                                    uint32 percent = 3 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 4 [json_name = "type"];
                                    uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 34 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 35 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                 }
                                 PublicAsOnlyImport public_as_only_import = 36 [json_name = "public-as-only-import"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 38 [json_name = "peer-as-check"];
                              }
                              Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                              message Ipv4Vpn {
                                 bool advertise_community = 1 [json_name = "advertise-community"];
                                 bool reflect_client = 2 [json_name = "reflect-client"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                    NexthopConfigure_INVARIABLE = 2;
                                 };
                                 NexthopConfigure nexthop_configure = 3 [json_name = "nexthop-configure"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 5 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 8 [json_name = "allow-as-loop"];
                                 bool aigp = 9 [json_name = "aigp"];
                                 enum AddPathMode {
                                    AddPathMode_NULL = 0;
                                    AddPathMode_RECEIVE = 1;
                                    AddPathMode_SEND = 2;
                                    AddPathMode_BOTH = 3;
                                 };
                                 AddPathMode add_path_mode = 10 [json_name = "add-path-mode"];
                                 string import_ip_prefix = 11 [json_name = "import-ip-prefix"];
                                 string export_ip_prefix = 12 [json_name = "export-ip-prefix"];
                                 string import_as_path_filter = 13 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 14 [json_name = "export-as-path-filter"];
                                 string import_acl_name_or_num = 15 [json_name = "import-acl-name-or-num"];
                                 string export_acl_name_or_num = 16 [json_name = "export-acl-name-or-num"];
                                 uint32 route_update_interval = 17 [json_name = "route-update-interval"];
                                 uint32 preferred_value = 18 [json_name = "preferred-value"];
                                 uint32 add_path_number = 19 [json_name = "add-path-number"];
                                 bool upe = 20 [json_name = "upe"];
                                 bool advertise_best_external = 21 [json_name = "advertise-best-external"];
                                 bool keep_all_routes = 22 [json_name = "keep-all-routes"];
                                 bool update_group_independent = 23 [json_name = "update-group-independent"];
                                 bool origin_as_validation = 24 [json_name = "origin-as-validation"];
                                 message DefaultRouteOriginates {
                                    message DefaultRouteOriginate {
                                       string vpn_name = 1 [json_name = "vpn-name"];
                                    }
                                    repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                                 }
                                 DefaultRouteOriginates default_route_originates = 25 [json_name = "default-route-originates"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    uint32 percent = 2 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 3 [json_name = "type"];
                                    uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 26 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 27 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                 }
                                 PublicAsOnlyImport public_as_only_import = 28 [json_name = "public-as-only-import"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 29 [json_name = "peer-as-check"];
                              }
                              Ipv4Vpn ipv4_vpn = 3 [json_name = "ipv4-vpn"];
                              message Ipv6Unicast {
                                 bool advertise_community = 1 [json_name = "advertise-community"];
                                 bool advertise_ext_community = 2 [json_name = "advertise-ext-community"];
                                 bool discard_ext_community = 3 [json_name = "discard-ext-community"];
                                 bool advertise_large_community = 4 [json_name = "advertise-large-community"];
                                 bool keep_all_routes = 5 [json_name = "keep-all-routes"];
                                 bool reflect_client = 6 [json_name = "reflect-client"];
                                 uint32 preferred_value = 7 [json_name = "preferred-value"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 8 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 9 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 11 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 12 [json_name = "allow-as-loop"];
                                 string import_as_path_filter = 13 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 14 [json_name = "export-as-path-filter"];
                                 string import_ipv6_prefix = 15 [json_name = "import-ipv6-prefix"];
                                 string export_ipv6_prefix = 16 [json_name = "export-ipv6-prefix"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    uint32 percent = 2 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 3 [json_name = "type"];
                                    uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 17 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 18 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                 }
                                 PublicAsOnlyImport public_as_only_import = 19 [json_name = "public-as-only-import"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 20 [json_name = "peer-as-check"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                 };
                                 NexthopConfigure nexthop_configure = 21 [json_name = "nexthop-configure"];
                                 bool substitute_as_enable = 22 [json_name = "substitute-as-enable"];
                                 string soo = 23 [json_name = "soo"];
                                 enum DefaultRouteMatchMode {
                                    DefaultRouteMatchMode_NULL = 0;
                                    DefaultRouteMatchMode_MATCHALL = 1;
                                    DefaultRouteMatchMode_MATCHANY = 2;
                                 };
                                 DefaultRouteMatchMode default_route_match_mode = 24 [json_name = "default-route-match-mode"];
                                 string import_acl6_name_or_num = 25 [json_name = "import-acl6-name-or-num"];
                                 string export_acl6_name_or_num = 26 [json_name = "export-acl6-name-or-num"];
                                 bool default_route_advertise = 27 [json_name = "default-route-advertise"];
                                 message DefaultRouteAdvertisePolicyType_RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 message DefaultRouteAdvertisePolicyType_XplRef {
                                    message DefaultRouteAdvertiseFilter {
                                       string filter_name = 1 [json_name = "filter-name"];
                                       string filter_parameter = 2 [json_name = "filter-parameter"];
                                    }
                                    DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                                 }
                                 oneof DefaultRouteAdvertisePolicyType {
                                    DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 28 [json_name = "rtp-ref"];
                                    DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 29 [json_name = "xpl-ref"];
                                 }
                                 uint32 route_update_interval = 30 [json_name = "route-update-interval"];
                                 message DefaultRouteMatchConditions {
                                    message DefaultRouteMatchCondition {
                                       string address = 1 [json_name = "address"];
                                       uint32 mask = 2 [json_name = "mask"];
                                    }
                                    repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                                 }
                                 DefaultRouteMatchConditions default_route_match_conditions = 31 [json_name = "default-route-match-conditions"];
                              }
                              Ipv6Unicast ipv6_unicast = 4 [json_name = "ipv6-unicast"];
                              message L2VpnEvpn {
                                 uint32 allow_as_loop = 1 [json_name = "allow-as-loop"];
                                 bool reflect_client = 2 [json_name = "reflect-client"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 3 [json_name = "rtp-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 }
                                 string split_group_name = 5 [json_name = "split-group-name"];
                                 enum NextHopMode {
                                    NextHopMode_NULL = 0;
                                    NextHopMode_LOCAL = 1;
                                    NextHopMode_INVARIABLE = 2;
                                 };
                                 NextHopMode next_hop_mode = 6 [json_name = "next-hop-mode"];
                                 bool advertise_arp = 7 [json_name = "advertise-arp"];
                                 bool advertise_irb = 8 [json_name = "advertise-irb"];
                                 bool advertise_irbv6 = 9 [json_name = "advertise-irbv6"];
                                 bool advertise_nd = 10 [json_name = "advertise-nd"];
                                 enum AdvertiseAddPathMode {
                                    INVALID_ENUM_VALUE_AdvertiseAddPathMode = 0;
                                    AdvertiseAddPathMode_RECEIVE = 1;
                                    AdvertiseAddPathMode_SEND = 2;
                                    AdvertiseAddPathMode_BOTH = 3;
                                 };
                                 AdvertiseAddPathMode advertise_add_path_mode = 11 [json_name = "advertise-add-path-mode"];
                                 uint32 advertise_add_path_num = 12 [json_name = "advertise-add-path-num"];
                                 bool mac_route_limit = 13 [json_name = "mac-route-limit"];
                                 uint32 route_limit = 14 [json_name = "route-limit"];
                                 uint32 route_limit_percent = 15 [json_name = "route-limit-percent"];
                                 enum RouteLimitType {
                                    RouteLimitType_NOPARAMETER = 0;
                                    RouteLimitType_ALERTX_ONLY = 1;
                                    RouteLimitType_IDLEX_FOREVER = 2;
                                    RouteLimitType_IDLEX_TIMEOUT = 3;
                                 };
                                 RouteLimitType route_limit_type = 16 [json_name = "route-limit-type"];
                                 uint32 route_limit_idle_timeout = 17 [json_name = "route-limit-idle-timeout"];
                                 uint32 route_update_interval = 18 [json_name = "route-update-interval"];
                                 bool reoriginated_route_enable = 19 [json_name = "reoriginated-route-enable"];
                                 bool reoriginated_mac_route = 20 [json_name = "reoriginated-mac-route"];
                                 bool reoriginated_mac_ip_route = 21 [json_name = "reoriginated-mac-ip-route"];
                                 bool reoriginated_mac_ipv6_route = 22 [json_name = "reoriginated-mac-ipv6-route"];
                                 bool reoriginated_ip_route = 23 [json_name = "reoriginated-ip-route"];
                                 bool reoriginated_ipv6_route = 24 [json_name = "reoriginated-ipv6-route"];
                                 uint32 preferred_value = 25 [json_name = "preferred-value"];
                                 bool transit_med_to_ebgp = 26 [json_name = "transit-med-to-ebgp"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 27 [json_name = "peer-as-check"];
                                 bool advertise_community = 28 [json_name = "advertise-community"];
                                 bool advertise_large_community = 29 [json_name = "advertise-large-community"];
                              }
                              L2VpnEvpn l2vpn_evpn = 5 [json_name = "l2vpn-evpn"];
                           }
                           repeated Af af = 1 [json_name = "af"];
                        }
                        Afs afs = 28 [json_name = "afs"];
                        string tcp_ao_name = 29 [json_name = "tcp-ao-name"];
                        enum PeerEstablishMode {
                           INVALID_ENUM_VALUE_PeerEstablishMode = 0;
                           PeerEstablishMode_STATIC = 1;
                           PeerEstablishMode_DYNAMIC = 2;
                        };
                        PeerEstablishMode peer_establish_mode = 30 [json_name = "peer-establish-mode"];
                        repeated string listen_as = 31 [json_name = "listen-as"];
                        message ListenAsSegments {
                           message ListenAsSegment {
                              string begin_as = 1 [json_name = "begin-as"];
                              string end_as = 2 [json_name = "end-as"];
                           }
                           repeated ListenAsSegment listen_as_segment = 1 [json_name = "listen-as-segment"];
                        }
                        ListenAsSegments listen_as_segments = 32 [json_name = "listen-as-segments"];
                     }
                     repeated PeerGroup peer_group = 1 [json_name = "peer-group"];
                  }
                  PeerGroups peer_groups = 5 [json_name = "peer-groups"];
                  message Peers {
                     message Peer {
                        string address = 1 [json_name = "address"];
                        string remote_as = 2 [json_name = "remote-as"];
                        string group_name = 3 [json_name = "group-name"];
                        string local_if_name = 4 [json_name = "local-if-name"];
                        string local_if_address = 5 [json_name = "local-if-address"];
                        enum PasswordType {
                           PasswordType_NULL = 0;
                           PasswordType_CIPHER = 1;
                           PasswordType_SIMPLE = 2;
                        };
                        PasswordType password_type = 6 [json_name = "password-type"];
                        string password_text = 7 [json_name = "password-text"];
                        string key_chain_name = 8 [json_name = "key-chain-name"];
                        string description = 9 [json_name = "description"];
                        uint32 ebgp_max_hop = 10 [json_name = "ebgp-max-hop"];
                        bool tracking_enable = 11 [json_name = "tracking-enable"];
                        uint32 tracking_delay_time = 12 [json_name = "tracking-delay-time"];
                        bool conventional = 13 [json_name = "conventional"];
                        bool route_refresh = 14 [json_name = "route-refresh"];
                        bool four_byte_as = 15 [json_name = "four-byte-as"];
                        bool ignore = 16 [json_name = "ignore"];
                        uint32 valid_ttl_hops = 17 [json_name = "valid-ttl-hops"];
                        enum ConnectMode {
                           INVALID_ENUM_VALUE_ConnectMode = 0;
                           ConnectMode_LISTENX_ONLY = 1;
                           ConnectMode_CONNECTX_ONLY = 2;
                           ConnectMode_NULL = 3;
                        };
                        ConnectMode connect_mode = 18 [json_name = "connect-mode"];
                        bool log_change = 19 [json_name = "log-change"];
                        enum CheckFirstAs {
                           CheckFirstAs_DEFAULT = 0;
                           CheckFirstAs_ENABLE = 1;
                           CheckFirstAs_DISABLE = 2;
                        };
                        CheckFirstAs check_first_as = 20 [json_name = "check-first-as"];
                        enum MemoryPriority {
                           MemoryPriority_LOW = 0;
                           MemoryPriority_MEDIUM = 1;
                           MemoryPriority_HIGH = 2;
                           MemoryPriority_DEFAULT = 3;
                        };
                        MemoryPriority memory_priority = 21 [json_name = "memory-priority"];
                        enum MemoryPriorityCapability {
                           MemoryPriorityCapability_LOW = 0;
                           MemoryPriorityCapability_MEDIUM = 1;
                           MemoryPriorityCapability_HIGH = 2;
                        };
                        MemoryPriorityCapability memory_priority_capability = 22 [json_name = "memory-priority-capability"];
                        enum OscillationDampening {
                           OscillationDampening_DISABLE = 0;
                           OscillationDampening_ENABLE = 1;
                        };
                        OscillationDampening oscillation_dampening = 23 [json_name = "oscillation-dampening"];
                        message FakeAsParameter {
                           string fake_as = 1 [json_name = "fake-as"];
                           bool dual_as = 2 [json_name = "dual-as"];
                           bool prepend_global_as = 3 [json_name = "prepend-global-as"];
                           bool prepend_fake_as = 4 [json_name = "prepend-fake-as"];
                        }
                        FakeAsParameter fake_as_parameter = 24 [json_name = "fake-as-parameter"];
                        message Timer {
                           uint32 keep_alive_time = 1 [json_name = "keep-alive-time"];
                           uint32 hold_time = 2 [json_name = "hold-time"];
                           uint32 min_hold_time = 3 [json_name = "min-hold-time"];
                           uint32 connect_retry_time = 4 [json_name = "connect-retry-time"];
                        }
                        Timer timer = 25 [json_name = "timer"];
                        message BfdParameter {
                           bool block = 1 [json_name = "block"];
                           bool enable = 2 [json_name = "enable"];
                           message ModeType_Single {
                              bool single_hop = 1 [json_name = "single-hop"];
                              bool compatible = 2 [json_name = "compatible"];
                           }
                           message ModeType_Link {
                              bool per_link_echo = 1 [json_name = "per-link-echo"];
                           }
                           message ModeType_OneArmEcho {
                              bool one_arm_echo = 1 [json_name = "one-arm-echo"];
                           }
                           oneof ModeType {
                              ModeType_Single mode_type_single = 3 [json_name = "single"];
                              ModeType_Link mode_type_link = 4 [json_name = "link"];
                              ModeType_OneArmEcho mode_type_one_arm_echo = 5 [json_name = "one-arm-echo"];
                           }
                           uint32 multiplier = 6 [json_name = "multiplier"];
                           uint32 min_rx_interval = 7 [json_name = "min-rx-interval"];
                           uint32 min_tx_interval = 8 [json_name = "min-tx-interval"];
                           enum ValidTtlHopsOperation {
                              INVALID_ENUM_VALUE_ValidTtlHopsOperation = 0;
                              ValidTtlHopsOperation_ENABLE = 1;
                              ValidTtlHopsOperation_DISABLE = 2;
                           };
                           ValidTtlHopsOperation valid_ttl_hops_operation = 9 [json_name = "valid-ttl-hops-operation"];
                           uint32 valid_ttl_hops = 10 [json_name = "valid-ttl-hops"];
                        }
                        BfdParameter bfd_parameter = 26 [json_name = "bfd-parameter"];
                        message BfdParameterState {
                           uint32 valid_ttl_hops = 1 [json_name = "valid-ttl-hops"];
                        }
                        BfdParameterState bfd_parameter_state = 27 [json_name = "bfd-parameter-state"];
                        message GracefulRestart {
                           enum Enable {
                              Enable_DEFAULT = 0;
                              Enable_ENABLE = 1;
                              Enable_DISABLE = 2;
                           };
                           Enable enable = 1 [json_name = "enable"];
                           uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                           uint32 restart_time = 3 [json_name = "restart-time"];
                           uint32 effect_restart_time = 4 [json_name = "effect-restart-time"];
                           uint32 effect_time_wait_for_rib = 5 [json_name = "effect-time-wait-for-rib"];
                           bool effect_enable = 6 [json_name = "effect-enable"];
                           enum PeerReset {
                              PeerReset_DEFAULT = 0;
                              PeerReset_ENABLE = 1;
                              PeerReset_DISABLE = 2;
                           };
                           PeerReset peer_reset = 7 [json_name = "peer-reset"];
                           bool effect_peer_reset = 8 [json_name = "effect-peer-reset"];
                        }
                        GracefulRestart graceful_restart = 28 [json_name = "graceful-restart"];
                        message LocalGracefulRestart {
                           enum Enable {
                              Enable_DEFAULT = 0;
                              Enable_ENABLE = 1;
                              Enable_DISABLE = 2;
                           };
                           Enable enable = 1 [json_name = "enable"];
                           uint32 time_wait_for_rib = 2 [json_name = "time-wait-for-rib"];
                           uint32 restart_time = 3 [json_name = "restart-time"];
                           uint32 effect_restart_time = 4 [json_name = "effect-restart-time"];
                           uint32 effect_time_wait_for_rib = 5 [json_name = "effect-time-wait-for-rib"];
                           bool effect_enable = 6 [json_name = "effect-enable"];
                        }
                        LocalGracefulRestart local_graceful_restart = 29 [json_name = "local-graceful-restart"];
                        message Afs {
                           message Af {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_IPV4UNI = 1;
                                 Type_IPV4VPN = 3;
                                 Type_IPV6UNI = 5;
                                 Type_EVPN = 9;
                              };
                              Type type = 1 [json_name = "type"];
                              message Ipv4Unicast {
                                 string group_name = 1 [json_name = "group-name"];
                                 bool reflect_client = 2 [json_name = "reflect-client"];
                                 bool label_route_capability = 3 [json_name = "label-route-capability"];
                                 bool check_tunnel_reachable = 4 [json_name = "check-tunnel-reachable"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                 };
                                 NexthopConfigure nexthop_configure = 5 [json_name = "nexthop-configure"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 6 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 7 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 8 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 9 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 10 [json_name = "allow-as-loop"];
                                 bool default_route_advertise = 11 [json_name = "default-route-advertise"];
                                 message DefaultRouteAdvertisePolicyType_RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 message DefaultRouteAdvertisePolicyType_XplRef {
                                    message DefaultRouteAdvertiseFilter {
                                       string filter_name = 1 [json_name = "filter-name"];
                                       string filter_parameter = 2 [json_name = "filter-parameter"];
                                    }
                                    DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                                 }
                                 oneof DefaultRouteAdvertisePolicyType {
                                    DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                    DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 41 [json_name = "xpl-ref"];
                                 }
                                 enum DefaultRouteMatchMode {
                                    DefaultRouteMatchMode_NULL = 0;
                                    DefaultRouteMatchMode_MATCHALL = 1;
                                    DefaultRouteMatchMode_MATCHANY = 2;
                                 };
                                 DefaultRouteMatchMode default_route_match_mode = 14 [json_name = "default-route-match-mode"];
                                 string import_ip_prefix = 15 [json_name = "import-ip-prefix"];
                                 string export_ip_prefix = 16 [json_name = "export-ip-prefix"];
                                 string import_as_path_filter = 17 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 18 [json_name = "export-as-path-filter"];
                                 string import_acl_name_or_num = 19 [json_name = "import-acl-name-or-num"];
                                 string export_acl_name_or_num = 20 [json_name = "export-acl-name-or-num"];
                                 uint32 route_update_interval = 21 [json_name = "route-update-interval"];
                                 uint32 preferred_value = 22 [json_name = "preferred-value"];
                                 bool substitute_as_enable = 23 [json_name = "substitute-as-enable"];
                                 string soo = 24 [json_name = "soo"];
                                 bool keep_all_routes = 25 [json_name = "keep-all-routes"];
                                 bool load_balancing_enable = 26 [json_name = "load-balancing-enable"];
                                 message LoadBalancingIgnoreAsType_AsAttribute {
                                    bool load_balancing_as_path_ignore = 1 [json_name = "load-balancing-as-path-ignore"];
                                 }
                                 message LoadBalancingIgnoreAsType_SameLengthAsAttribute {
                                    bool load_balancing_as_path_relax = 1 [json_name = "load-balancing-as-path-relax"];
                                 }
                                 oneof LoadBalancingIgnoreAsType {
                                    LoadBalancingIgnoreAsType_AsAttribute load_balancing_ignore_as_type_as_attribute = 27 [json_name = "as-attribute"];
                                    LoadBalancingIgnoreAsType_SameLengthAsAttribute load_balancing_ignore_as_type_same_length_as_attribute = 28 [json_name = "same-length-as-attribute"];
                                 }
                                 bool advertise_community = 29 [json_name = "advertise-community"];
                                 bool advertise_ext_community = 30 [json_name = "advertise-ext-community"];
                                 bool discard_ext_community = 31 [json_name = "discard-ext-community"];
                                 enum AdvertiseLargeCommunity {
                                    AdvertiseLargeCommunity_DEFAULT = 0;
                                    AdvertiseLargeCommunity_ENABLE = 1;
                                    AdvertiseLargeCommunity_DISABLE = 2;
                                 };
                                 AdvertiseLargeCommunity advertise_large_community = 32 [json_name = "advertise-large-community"];
                                 bool advertise_large_community_state = 33 [json_name = "advertise-large-community-state"];
                                 enum UpdateGroupIndependent {
                                    UpdateGroupIndependent_DEFAULT = 0;
                                    UpdateGroupIndependent_ENABLE = 1;
                                    UpdateGroupIndependent_DISABLE = 2;
                                 };
                                 UpdateGroupIndependent update_group_independent = 34 [json_name = "update-group-independent"];
                                 bool update_group_independent_state = 35 [json_name = "update-group-independent-state"];
                                 message DefaultRouteMatchConditions {
                                    message DefaultRouteMatchCondition {
                                       string address = 1 [json_name = "address"];
                                       uint32 mask = 2 [json_name = "mask"];
                                    }
                                    repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                                 }
                                 DefaultRouteMatchConditions default_route_match_conditions = 36 [json_name = "default-route-match-conditions"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    bool accept_prefix = 2 [json_name = "accept-prefix"];
                                    uint32 percent = 3 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 4 [json_name = "type"];
                                    uint32 idle_timeout = 5 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 37 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 38 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    enum Enable {
                                       Enable_DEFAULT = 0;
                                       Enable_ENABLE = 1;
                                       Enable_DISABLE = 2;
                                    };
                                    Enable enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                    bool effect_enable = 4 [json_name = "effect-enable"];
                                    bool effect_force = 5 [json_name = "effect-force"];
                                 }
                                 PublicAsOnlyImport public_as_only_import = 39 [json_name = "public-as-only-import"];
                                 message PathAttributeTreats {
                                    message PathAttributeTreat {
                                       enum TreatType {
                                          TreatType_NORMAL = 0;
                                       };
                                       TreatType treat_type = 1 [json_name = "treat-type"];
                                       string discard_id_map = 2 [json_name = "discard-id-map"];
                                       string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                       string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                    }
                                    repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                                 }
                                 PathAttributeTreats path_attribute_treats = 40 [json_name = "path-attribute-treats"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 42 [json_name = "peer-as-check"];
                              }
                              Ipv4Unicast ipv4_unicast = 2 [json_name = "ipv4-unicast"];
                              message Ipv4Vpn {
                                 string group_name = 1 [json_name = "group-name"];
                                 bool advertise_community = 2 [json_name = "advertise-community"];
                                 bool reflect_client = 3 [json_name = "reflect-client"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                    NexthopConfigure_INVARIABLE = 2;
                                 };
                                 NexthopConfigure nexthop_configure = 4 [json_name = "nexthop-configure"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 6 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 7 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 8 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 9 [json_name = "allow-as-loop"];
                                 bool aigp = 10 [json_name = "aigp"];
                                 enum AddPathMode {
                                    AddPathMode_NULL = 0;
                                    AddPathMode_RECEIVE = 1;
                                    AddPathMode_SEND = 2;
                                    AddPathMode_BOTH = 3;
                                 };
                                 AddPathMode add_path_mode = 11 [json_name = "add-path-mode"];
                                 uint32 add_path_number = 12 [json_name = "add-path-number"];
                                 string import_ip_prefix = 13 [json_name = "import-ip-prefix"];
                                 string export_ip_prefix = 14 [json_name = "export-ip-prefix"];
                                 string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                                 string import_acl_name_or_num = 17 [json_name = "import-acl-name-or-num"];
                                 string export_acl_name_or_num = 18 [json_name = "export-acl-name-or-num"];
                                 uint32 route_update_interval = 19 [json_name = "route-update-interval"];
                                 uint32 preferred_value = 20 [json_name = "preferred-value"];
                                 bool upe = 21 [json_name = "upe"];
                                 bool advertise_best_external = 22 [json_name = "advertise-best-external"];
                                 bool keep_all_routes = 23 [json_name = "keep-all-routes"];
                                 enum UpdateGroupIndependent {
                                    UpdateGroupIndependent_DEFAULT = 0;
                                    UpdateGroupIndependent_ENABLE = 1;
                                    UpdateGroupIndependent_DISABLE = 2;
                                 };
                                 UpdateGroupIndependent update_group_independent = 24 [json_name = "update-group-independent"];
                                 bool update_group_independent_state = 25 [json_name = "update-group-independent-state"];
                                 bool origin_as_validation = 26 [json_name = "origin-as-validation"];
                                 message DefaultRouteOriginates {
                                    message DefaultRouteOriginate {
                                       string vpn_name = 1 [json_name = "vpn-name"];
                                    }
                                    repeated DefaultRouteOriginate default_route_originate = 1 [json_name = "default-route-originate"];
                                 }
                                 DefaultRouteOriginates default_route_originates = 27 [json_name = "default-route-originates"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    uint32 percent = 2 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 3 [json_name = "type"];
                                    uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 28 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 29 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    enum Enable {
                                       Enable_DEFAULT = 0;
                                       Enable_ENABLE = 1;
                                       Enable_DISABLE = 2;
                                    };
                                    Enable enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                    bool effect_enable = 4 [json_name = "effect-enable"];
                                    bool effect_force = 5 [json_name = "effect-force"];
                                 }
                                 PublicAsOnlyImport public_as_only_import = 30 [json_name = "public-as-only-import"];
                                 message PathAttributeTreats {
                                    message PathAttributeTreat {
                                       enum TreatType {
                                          TreatType_NORMAL = 0;
                                       };
                                       TreatType treat_type = 1 [json_name = "treat-type"];
                                       string discard_id_map = 2 [json_name = "discard-id-map"];
                                       string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                       string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                    }
                                    repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                                 }
                                 PathAttributeTreats path_attribute_treats = 31 [json_name = "path-attribute-treats"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 32 [json_name = "peer-as-check"];
                              }
                              Ipv4Vpn ipv4_vpn = 3 [json_name = "ipv4-vpn"];
                              message Ipv6Unicast {
                                 string group_name = 1 [json_name = "group-name"];
                                 bool advertise_community = 2 [json_name = "advertise-community"];
                                 bool advertise_ext_community = 3 [json_name = "advertise-ext-community"];
                                 bool discard_ext_community = 4 [json_name = "discard-ext-community"];
                                 enum AdvertiseLargeCommunity {
                                    AdvertiseLargeCommunity_DEFAULT = 0;
                                    AdvertiseLargeCommunity_ENABLE = 1;
                                    AdvertiseLargeCommunity_DISABLE = 2;
                                 };
                                 AdvertiseLargeCommunity advertise_large_community = 5 [json_name = "advertise-large-community"];
                                 bool advertise_large_community_state = 6 [json_name = "advertise-large-community-state"];
                                 bool keep_all_routes = 7 [json_name = "keep-all-routes"];
                                 bool reflect_client = 8 [json_name = "reflect-client"];
                                 uint32 preferred_value = 9 [json_name = "preferred-value"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 message ImportPolicyType_XplRef {
                                    message ImportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ImportFilter import_filter = 1 [json_name = "import-filter"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 10 [json_name = "rtp-ref"];
                                    ImportPolicyType_XplRef import_policy_type_xpl_ref = 11 [json_name = "xpl-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 message ExportPolicyType_XplRef {
                                    message ExportFilter {
                                       string name = 1 [json_name = "name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    ExportFilter export_filter = 1 [json_name = "export-filter"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 12 [json_name = "rtp-ref"];
                                    ExportPolicyType_XplRef export_policy_type_xpl_ref = 13 [json_name = "xpl-ref"];
                                 }
                                 uint32 allow_as_loop = 14 [json_name = "allow-as-loop"];
                                 string import_as_path_filter = 15 [json_name = "import-as-path-filter"];
                                 string export_as_path_filter = 16 [json_name = "export-as-path-filter"];
                                 string import_ipv6_prefix = 17 [json_name = "import-ipv6-prefix"];
                                 string export_ipv6_prefix = 18 [json_name = "export-ipv6-prefix"];
                                 message RouteLimit {
                                    uint32 number13 = 1 [json_name = "number"];
                                    uint32 percent = 2 [json_name = "percent"];
                                    enum Type {
                                       Type_NOPARAMETER = 0;
                                       Type_ALERTX_ONLY = 1;
                                       Type_IDLEX_FOREVER = 2;
                                       Type_IDLEX_TIMEOUT = 3;
                                    };
                                    Type type = 3 [json_name = "type"];
                                    uint32 idle_timeout = 4 [json_name = "idle-timeout"];
                                 }
                                 RouteLimit route_limit = 19 [json_name = "route-limit"];
                                 message PublicAsOnly {
                                    bool enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    message RemovePrivateAs_LeftMost {
                                       bool limited = 1 [json_name = "limited"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                       RemovePrivateAs_LeftMost remove_private_as_left_most = 3 [json_name = "left-most"];
                                    }
                                    bool replace = 4 [json_name = "replace"];
                                    bool no_skip_as = 5 [json_name = "no-skip-as"];
                                 }
                                 PublicAsOnly public_as_only = 20 [json_name = "public-as-only"];
                                 message PublicAsOnlyImport {
                                    enum Enable {
                                       Enable_DEFAULT = 0;
                                       Enable_ENABLE = 1;
                                       Enable_DISABLE = 2;
                                    };
                                    Enable enable = 1 [json_name = "enable"];
                                    message RemovePrivateAs_All {
                                       bool force = 1 [json_name = "force"];
                                    }
                                    oneof RemovePrivateAs {
                                       RemovePrivateAs_All remove_private_as_all = 2 [json_name = "all"];
                                    }
                                    bool effect_enable = 3 [json_name = "effect-enable"];
                                    bool effect_force = 4 [json_name = "effect-force"];
                                 }
                                 PublicAsOnlyImport public_as_only_import = 21 [json_name = "public-as-only-import"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 22 [json_name = "peer-as-check"];
                                 enum NexthopConfigure {
                                    INVALID_ENUM_VALUE_NexthopConfigure = 0;
                                    NexthopConfigure_LOCAL = 1;
                                 };
                                 NexthopConfigure nexthop_configure = 23 [json_name = "nexthop-configure"];
                                 bool substitute_as_enable = 24 [json_name = "substitute-as-enable"];
                                 string soo = 25 [json_name = "soo"];
                                 enum DefaultRouteMatchMode {
                                    DefaultRouteMatchMode_NULL = 0;
                                    DefaultRouteMatchMode_MATCHALL = 1;
                                    DefaultRouteMatchMode_MATCHANY = 2;
                                 };
                                 DefaultRouteMatchMode default_route_match_mode = 26 [json_name = "default-route-match-mode"];
                                 string import_acl6_name_or_num = 27 [json_name = "import-acl6-name-or-num"];
                                 string export_acl6_name_or_num = 28 [json_name = "export-acl6-name-or-num"];
                                 bool default_route_advertise = 29 [json_name = "default-route-advertise"];
                                 message DefaultRouteAdvertisePolicyType_RtpRef {
                                    string default_route_advertise_policy = 1 [json_name = "default-route-advertise-policy"];
                                 }
                                 message DefaultRouteAdvertisePolicyType_XplRef {
                                    message DefaultRouteAdvertiseFilter {
                                       string filter_name = 1 [json_name = "filter-name"];
                                       string filter_parameter = 2 [json_name = "filter-parameter"];
                                    }
                                    DefaultRouteAdvertiseFilter default_route_advertise_filter = 1 [json_name = "default-route-advertise-filter"];
                                 }
                                 oneof DefaultRouteAdvertisePolicyType {
                                    DefaultRouteAdvertisePolicyType_RtpRef default_route_advertise_policy_type_rtp_ref = 30 [json_name = "rtp-ref"];
                                    DefaultRouteAdvertisePolicyType_XplRef default_route_advertise_policy_type_xpl_ref = 31 [json_name = "xpl-ref"];
                                 }
                                 uint32 route_update_interval = 32 [json_name = "route-update-interval"];
                                 message DefaultRouteMatchConditions {
                                    message DefaultRouteMatchCondition {
                                       string address = 1 [json_name = "address"];
                                       uint32 mask = 2 [json_name = "mask"];
                                    }
                                    repeated DefaultRouteMatchCondition default_route_match_condition = 1 [json_name = "default-route-match-condition"];
                                 }
                                 DefaultRouteMatchConditions default_route_match_conditions = 33 [json_name = "default-route-match-conditions"];
                                 message PathAttributeTreats {
                                    message PathAttributeTreat {
                                       enum TreatType {
                                          TreatType_NORMAL = 0;
                                       };
                                       TreatType treat_type = 1 [json_name = "treat-type"];
                                       string discard_id_map = 2 [json_name = "discard-id-map"];
                                       string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                       string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                    }
                                    repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                                 }
                                 PathAttributeTreats path_attribute_treats = 34 [json_name = "path-attribute-treats"];
                              }
                              Ipv6Unicast ipv6_unicast = 4 [json_name = "ipv6-unicast"];
                              message L2VpnEvpn {
                                 string group_name = 1 [json_name = "group-name"];
                                 uint32 allow_as_loop = 2 [json_name = "allow-as-loop"];
                                 bool reflect_client = 3 [json_name = "reflect-client"];
                                 message ImportPolicyType_RtpRef {
                                    string import_policy = 1 [json_name = "import-policy"];
                                 }
                                 oneof ImportPolicyType {
                                    ImportPolicyType_RtpRef import_policy_type_rtp_ref = 4 [json_name = "rtp-ref"];
                                 }
                                 message ExportPolicyType_RtpRef {
                                    string export_policy = 1 [json_name = "export-policy"];
                                 }
                                 oneof ExportPolicyType {
                                    ExportPolicyType_RtpRef export_policy_type_rtp_ref = 5 [json_name = "rtp-ref"];
                                 }
                                 bool advertise_community = 6 [json_name = "advertise-community"];
                                 bool advertise_arp = 7 [json_name = "advertise-arp"];
                                 bool advertise_irb = 8 [json_name = "advertise-irb"];
                                 bool advertise_irbv6 = 9 [json_name = "advertise-irbv6"];
                                 bool advertise_nd = 10 [json_name = "advertise-nd"];
                                 enum AdvertiseAddPathMode {
                                    INVALID_ENUM_VALUE_AdvertiseAddPathMode = 0;
                                    AdvertiseAddPathMode_RECEIVE = 1;
                                    AdvertiseAddPathMode_SEND = 2;
                                    AdvertiseAddPathMode_BOTH = 3;
                                 };
                                 AdvertiseAddPathMode advertise_add_path_mode = 11 [json_name = "advertise-add-path-mode"];
                                 uint32 advertise_add_path_num = 12 [json_name = "advertise-add-path-num"];
                                 bool mac_route_limit = 13 [json_name = "mac-route-limit"];
                                 uint32 route_limit = 14 [json_name = "route-limit"];
                                 uint32 route_limit_percent = 15 [json_name = "route-limit-percent"];
                                 enum RouteLimitType {
                                    RouteLimitType_NOPARAMETER = 0;
                                    RouteLimitType_ALERTX_ONLY = 1;
                                    RouteLimitType_IDLEX_FOREVER = 2;
                                    RouteLimitType_IDLEX_TIMEOUT = 3;
                                 };
                                 RouteLimitType route_limit_type = 16 [json_name = "route-limit-type"];
                                 uint32 route_limit_idle_timeout = 17 [json_name = "route-limit-idle-timeout"];
                                 uint32 route_update_interval = 18 [json_name = "route-update-interval"];
                                 bool reoriginate_route_enable = 19 [json_name = "reoriginate-route-enable"];
                                 bool reoriginated_mac_route = 20 [json_name = "reoriginated-mac-route"];
                                 bool reoriginated_mac_ip_route = 21 [json_name = "reoriginated-mac-ip-route"];
                                 bool reoriginated_mac_ipv6_route = 22 [json_name = "reoriginated-mac-ipv6-route"];
                                 bool reoriginated_ip_route = 23 [json_name = "reoriginated-ip-route"];
                                 bool reoriginated_ipv6_route = 24 [json_name = "reoriginated-ipv6-route"];
                                 string split_group_name = 25 [json_name = "split-group-name"];
                                 enum NextHopMode {
                                    NextHopMode_NULL = 0;
                                    NextHopMode_LOCAL = 1;
                                    NextHopMode_INVARIABLE = 2;
                                 };
                                 NextHopMode next_hop_mode = 26 [json_name = "next-hop-mode"];
                                 uint32 preferred_value = 27 [json_name = "preferred-value"];
                                 enum PeerAsCheck {
                                    PeerAsCheck_DISABLE = 0;
                                    PeerAsCheck_ENABLE = 1;
                                 };
                                 PeerAsCheck peer_as_check = 28 [json_name = "peer-as-check"];
                                 enum TransitMedToEbgp {
                                    TransitMedToEbgp_DISABLE = 0;
                                    TransitMedToEbgp_ENABLE = 1;
                                 };
                                 TransitMedToEbgp transit_med_to_ebgp = 29 [json_name = "transit-med-to-ebgp"];
                                 message EffectState {
                                    bool transit_med_to_ebgp = 1 [json_name = "transit-med-to-ebgp"];
                                 }
                                 EffectState effect_state = 30 [json_name = "effect-state"];
                                 message PathAttributeTreats {
                                    message PathAttributeTreat {
                                       enum TreatType {
                                          TreatType_NORMAL = 0;
                                       };
                                       TreatType treat_type = 1 [json_name = "treat-type"];
                                       string discard_id_map = 2 [json_name = "discard-id-map"];
                                       string withdraw_id_map = 3 [json_name = "withdraw-id-map"];
                                       string unknown_id_map = 4 [json_name = "unknown-id-map"];
                                    }
                                    repeated PathAttributeTreat path_attribute_treat = 1 [json_name = "path-attribute-treat"];
                                 }
                                 PathAttributeTreats path_attribute_treats = 31 [json_name = "path-attribute-treats"];
                                 enum AdvertiseLargeCommunity {
                                    AdvertiseLargeCommunity_DEFAULT = 0;
                                    AdvertiseLargeCommunity_ENABLE = 1;
                                    AdvertiseLargeCommunity_DISABLE = 2;
                                 };
                                 AdvertiseLargeCommunity advertise_large_community = 32 [json_name = "advertise-large-community"];
                              }
                              L2VpnEvpn l2vpn_evpn = 5 [json_name = "l2vpn-evpn"];
                           }
                           repeated Af af = 1 [json_name = "af"];
                        }
                        Afs afs = 30 [json_name = "afs"];
                        bool tcp_ao_disable = 31 [json_name = "tcp-ao-disable"];
                        string tcp_ao_name = 32 [json_name = "tcp-ao-name"];
                     }
                     repeated Peer peer = 1 [json_name = "peer"];
                  }
                  Peers peers = 6 [json_name = "peers"];
                  message VpnAsNumber {
                     string local_ipv4 = 1 [json_name = "local-ipv4"];
                     string local_ipv6 = 2 [json_name = "local-ipv6"];
                     bool ipv4_as_no_prepend = 3 [json_name = "ipv4-as-no-prepend"];
                     bool ipv6_as_no_prepend = 4 [json_name = "ipv6-as-no-prepend"];
                  }
                  VpnAsNumber vpn_as_number = 7 [json_name = "vpn-as-number"];
                  message PeerStates {
                     message PeerState {
                        string address = 1 [json_name = "address"];
                        enum AfType {
                           INVALID_ENUM_VALUE_AfType = 0;
                           AfType_IPV4UNI = 1;
                           AfType_IPV4VPN = 3;
                           AfType_IPV6UNI = 5;
                           AfType_EVPN = 9;
                        };
                        AfType af_type = 2 [json_name = "af-type"];
                        enum EstablishMode {
                           INVALID_ENUM_VALUE_EstablishMode = 0;
                           EstablishMode_STATIC = 1;
                           EstablishMode_DYNAMIC = 2;
                        };
                        EstablishMode establish_mode = 3 [json_name = "establish-mode"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_EBGP = 1;
                           Type_IBGP = 2;
                           Type_CONFEDX_EBGP = 3;
                           Type_CONFEDX_IBGP = 4;
                        };
                        Type type = 4 [json_name = "type"];
                        uint32 version = 5 [json_name = "version"];
                        string remote_router_id = 6 [json_name = "remote-router-id"];
                        enum CurrentState {
                           INVALID_ENUM_VALUE_CurrentState = 0;
                           CurrentState_IDLE = 1;
                           CurrentState_CONNECT = 2;
                           CurrentState_ACTIVE = 3;
                           CurrentState_OPENSENT = 4;
                           CurrentState_OPENCONFIRM = 5;
                           CurrentState_ESTABLISHED = 6;
                           CurrentState_IDLEX_ADMIN = 7;
                           CurrentState_IDLEX_OVLMT = 8;
                           CurrentState_NOX_NEG = 9;
                        };
                        CurrentState current_state = 7 [json_name = "current-state"];
                        uint32 local_port = 8 [json_name = "local-port"];
                        uint32 remote_port = 9 [json_name = "remote-port"];
                        string current_event = 10 [json_name = "current-event"];
                        enum LastState {
                           INVALID_ENUM_VALUE_LastState = 0;
                           LastState_IDLE = 1;
                           LastState_CONNECT = 2;
                           LastState_ACTIVE = 3;
                           LastState_OPENSENT = 4;
                           LastState_OPENCONFIRM = 5;
                           LastState_ESTABLISHED = 6;
                           LastState_IDLEX_ADMIN = 7;
                           LastState_IDLEX_OVLMT = 8;
                           LastState_NOX_NEG = 9;
                        };
                        LastState last_state = 11 [json_name = "last-state"];
                        string up_down_duration = 12 [json_name = "up-down-duration"];
                        uint32 send_message = 13 [json_name = "send-message"];
                        uint32 receive_message = 14 [json_name = "receive-message"];
                        uint32 out_queue = 15 [json_name = "out-queue"];
                        uint32 receive_hold_time = 16 [json_name = "receive-hold-time"];
                        string receive_last_keepalive_time = 17 [json_name = "receive-last-keepalive-time"];
                        uint32 negotiate_hold_time = 18 [json_name = "negotiate-hold-time"];
                        uint32 negotiate_keepalive_time = 19 [json_name = "negotiate-keepalive-time"];
                        uint32 receive_update_count = 20 [json_name = "receive-update-count"];
                        uint32 receive_open_count = 21 [json_name = "receive-open-count"];
                        uint32 receive_keepalive_count = 22 [json_name = "receive-keepalive-count"];
                        uint32 receive_notification_count = 23 [json_name = "receive-notification-count"];
                        uint32 receive_route_refresh_count = 24 [json_name = "receive-route-refresh-count"];
                        uint32 send_update_count = 25 [json_name = "send-update-count"];
                        uint32 send_open_count = 26 [json_name = "send-open-count"];
                        uint32 send_keepalive_count = 27 [json_name = "send-keepalive-count"];
                        uint32 send_notification_count = 28 [json_name = "send-notification-count"];
                        uint32 send_route_refresh_count = 29 [json_name = "send-route-refresh-count"];
                        bool send_graceful_restart_capability = 30 [json_name = "send-graceful-restart-capability"];
                        bool receive_refresh_capability = 31 [json_name = "receive-refresh-capability"];
                        bool receive_four_byte_as_capability = 32 [json_name = "receive-four-byte-as-capability"];
                        bool receive_multi_protocol_capability = 33 [json_name = "receive-multi-protocol-capability"];
                        bool receive_graceful_restart_capability = 34 [json_name = "receive-graceful-restart-capability"];
                        uint32 receive_prefix = 35 [json_name = "receive-prefix"];
                        uint32 receive_active_prefix = 36 [json_name = "receive-active-prefix"];
                        uint32 advertise_prefix = 37 [json_name = "advertise-prefix"];
                        bool extend_nexthop_capability = 38 [json_name = "extend-nexthop-capability"];
                        string remote_as = 39 [json_name = "remote-as"];
                        string receive_add_path = 40 [json_name = "receive-add-path"];
                        string negotiate_add_path = 41 [json_name = "negotiate-add-path"];
                     }
                     repeated PeerState peer_state = 1 [json_name = "peer-state"];
                  }
                  PeerStates peer_states = 8 [json_name = "peer-states"];
                  message PeerTotalNumbers {
                     message PeerTotalNumber {
                        enum AfType {
                           INVALID_ENUM_VALUE_AfType = 0;
                           AfType_IPV4UNI = 1;
                           AfType_IPV4VPN = 3;
                           AfType_IPV6UNI = 5;
                           AfType_EVPN = 9;
                        };
                        AfType af_type = 1 [json_name = "af-type"];
                        uint32 static_peer_number = 2 [json_name = "static-peer-number"];
                        uint32 static_peer_established_number = 3 [json_name = "static-peer-established-number"];
                        uint32 dynamic_peer_number = 4 [json_name = "dynamic-peer-number"];
                     }
                     repeated PeerTotalNumber peer_total_number = 1 [json_name = "peer-total-number"];
                  }
                  PeerTotalNumbers peer_total_numbers = 9 [json_name = "peer-total-numbers"];
                  message DynamicPeerPrefixes {
                     message DynamicPeerPrefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string peer_group = 3 [json_name = "peer-group"];
                     }
                     repeated DynamicPeerPrefix dynamic_peer_prefix = 1 [json_name = "dynamic-peer-prefix"];
                  }
                  DynamicPeerPrefixes dynamic_peer_prefixes = 10 [json_name = "dynamic-peer-prefixes"];
               }
               repeated InstanceProcess instance_process = 1 [json_name = "instance-process"];
            }
            InstanceProcesss instance_processs = 2 [json_name = "instance-processs"];
         }
         Bgp bgp = 7 [json_name = "bgp"];
         message Ipv4Ifs {
            message Ipv4If {
               string name = 1 [json_name = "name"];
               message Address_ConfigAddress {
                  message Addresses {
                     message Address {
                        string ip = 1 [json_name = "ip"];
                        string netmask = 2 [json_name = "netmask"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_MAIN = 1;
                           Type_SUB = 32;
                        };
                        Type type = 3 [json_name = "type"];
                     }
                     repeated Address address = 1 [json_name = "address"];
                  }
                  Addresses addresses = 1 [json_name = "addresses"];
               }
               message Address_UnnumberedAddress {
                  message UnnumberedIf {
                     string name = 1 [json_name = "name"];
                  }
                  UnnumberedIf unnumbered_if = 1 [json_name = "unnumbered-if"];
               }
               oneof Address {
                  Address_ConfigAddress address_config_address = 3 [json_name = "config-address"];
                  Address_UnnumberedAddress address_unnumbered_address = 4 [json_name = "unnumbered-address"];
               }
            }
            repeated Ipv4If ipv4_if = 1 [json_name = "ipv4-if"];
         }
         Ipv4Ifs ipv4_ifs = 8 [json_name = "ipv4-ifs"];
         message Ipv4IfStates {
            message Ipv4IfState {
               string name = 1 [json_name = "name"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     string netmask = 2 [json_name = "netmask"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_UNNUMBER = 2;
                        Type_NEG = 4;
                        Type_SUB = 32;
                     };
                     Type type = 3 [json_name = "type"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
            }
            repeated Ipv4IfState ipv4_if_state = 1 [json_name = "ipv4-if-state"];
         }
         Ipv4IfStates ipv4_if_states = 9 [json_name = "ipv4-if-states"];
         message Ipv6Ifs {
            message Ipv6If {
               string name = 1 [json_name = "name"];
               bool auto_link_local = 2 [json_name = "auto-link-local"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                  }
                  repeated Address address = 1 [json_name = "address"];
                  message UnnumberedAddress {
                     message UnnumberedIf {
                        string name = 1 [json_name = "name"];
                     }
                     UnnumberedIf unnumbered_if = 1 [json_name = "unnumbered-if"];
                  }
                  UnnumberedAddress unnumbered_address = 2 [json_name = "unnumbered-address"];
               }
               Addresses addresses = 3 [json_name = "addresses"];
               message NdIf {
                  uint64 max_dyn_nb_num = 1 [json_name = "max-dyn-nb-num"];
               }
               NdIf nd_if = 4 [json_name = "nd-if"];
               message NdCollection {
                  message IfProperty {
                     uint32 retrans_timer = 1 [json_name = "retrans-timer"];
                     uint32 nud_reach_time = 2 [json_name = "nud-reach-time"];
                     uint32 attempts_value = 3 [json_name = "attempts-value"];
                     enum NsMcastFlag {
                        NsMcastFlag_FALSE = 0;
                        NsMcastFlag_TRUE = 1;
                     };
                     NsMcastFlag ns_mcast_flag = 4 [json_name = "ns-mcast-flag"];
                     uint64 max_dyn_nb_num = 5 [json_name = "max-dyn-nb-num"];
                     uint32 dad_timeout = 6 [json_name = "dad-timeout"];
                     uint32 nud_attempts = 7 [json_name = "nud-attempts"];
                     enum NaGlean {
                        NaGlean_FALSE = 0;
                        NaGlean_TRUE = 1;
                     };
                     NaGlean na_glean = 8 [json_name = "na-glean"];
                     enum MaFlag {
                        MaFlag_FALSE = 0;
                        MaFlag_TRUE = 1;
                     };
                     MaFlag ma_flag = 9 [json_name = "ma-flag"];
                     enum OFlag {
                        OFlag_FALSE = 0;
                        OFlag_TRUE = 1;
                     };
                     OFlag o_flag = 10 [json_name = "o-flag"];
                     enum RaHaltFlag {
                        RaHaltFlag_FALSE = 0;
                        RaHaltFlag_TRUE = 1;
                     };
                     RaHaltFlag ra_halt_flag = 11 [json_name = "ra-halt-flag"];
                     uint32 max_interval = 12 [json_name = "max-interval"];
                     enum RaPreference {
                        RaPreference_MEDIUM = 0;
                        RaPreference_HIGH = 1;
                        RaPreference_LOW = 3;
                     };
                     RaPreference ra_preference = 13 [json_name = "ra-preference"];
                     enum RaPrefixFlag {
                        RaPrefixFlag_FALSE = 0;
                        RaPrefixFlag_TRUE = 1;
                     };
                     RaPrefixFlag ra_prefix_flag = 14 [json_name = "ra-prefix-flag"];
                     enum RaMtuFlag {
                        RaMtuFlag_FALSE = 0;
                        RaMtuFlag_TRUE = 1;
                     };
                     RaMtuFlag ra_mtu_flag = 15 [json_name = "ra-mtu-flag"];
                     bool strict_flag = 16 [json_name = "strict-flag"];
                     uint32 ts_fuzz_factor = 17 [json_name = "ts-fuzz-factor"];
                     uint32 ts_clock_drift = 18 [json_name = "ts-clock-drift"];
                     uint32 ts_delta = 19 [json_name = "ts-delta"];
                     uint32 rsa_min_key_len = 20 [json_name = "rsa-min-key-len"];
                     uint32 rsa_max_key_len = 21 [json_name = "rsa-max-key-len"];
                  }
                  IfProperty if_property = 1 [json_name = "if-property"];
                  message Proxys {
                     enum RouteProxy {
                        RouteProxy_FALSE = 0;
                        RouteProxy_TRUE = 1;
                     };
                     RouteProxy route_proxy = 1 [json_name = "route-proxy"];
                     enum InnerVlanProxy {
                        InnerVlanProxy_FALSE = 0;
                        InnerVlanProxy_TRUE = 1;
                     };
                     InnerVlanProxy inner_vlan_proxy = 2 [json_name = "inner-vlan-proxy"];
                     enum InterVlanProxy {
                        InterVlanProxy_FALSE = 0;
                        InterVlanProxy_TRUE = 1;
                     };
                     InterVlanProxy inter_vlan_proxy = 3 [json_name = "inter-vlan-proxy"];
                     enum AnywayProxy {
                        AnywayProxy_FALSE = 0;
                        AnywayProxy_TRUE = 1;
                     };
                     AnywayProxy anyway_proxy = 4 [json_name = "anyway-proxy"];
                  }
                  Proxys proxys = 2 [json_name = "proxys"];
               }
               NdCollection nd_collection = 7 [json_name = "nd-collection"];
               uint32 mtu6 = 8 [json_name = "mtu6"];
               bool spread_mtu_flag = 9 [json_name = "spread-mtu-flag"];
            }
            repeated Ipv6If ipv6_if = 1 [json_name = "ipv6-if"];
         }
         Ipv6Ifs ipv6_ifs = 10 [json_name = "ipv6-ifs"];
         message Ipv6IfStates {
            message Ipv6IfState {
               string name = 1 [json_name = "name"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_AUTOX_LINKX_LOCAL = 3;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                     uint32 collision_count = 5 [json_name = "collision-count"];
                     bool is_block = 6 [json_name = "is-block"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_PREFERRED = 1;
                        Status_INACCESSIBLE = 4;
                        Status_UNKNOWN = 5;
                        Status_TENTATIVE = 6;
                        Status_DUPLICATE = 7;
                     };
                     Status status = 7 [json_name = "status"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
            }
            repeated Ipv6IfState ipv6_if_state = 1 [json_name = "ipv6-if-state"];
         }
         Ipv6IfStates ipv6_if_states = 11 [json_name = "ipv6-if-states"];
         message Isis {
            message Sites {
               message Site {
                  uint32 id = 1 [json_name = "id"];
                  enum Level {
                     INVALID_ENUM_VALUE_Level = 0;
                     Level_LEVELX_1 = 1;
                     Level_LEVELX_2 = 2;
                     Level_LEVELX_1X_2 = 3;
                  };
                  Level level = 2 [json_name = "level"];
                  enum CostStyle {
                     INVALID_ENUM_VALUE_CostStyle = 0;
                     CostStyle_NARROW = 1;
                     CostStyle_WIDE = 2;
                     CostStyle_TRANSITION = 3;
                     CostStyle_NTRANSITION = 4;
                     CostStyle_WTRANSITION = 5;
                  };
                  CostStyle cost_style = 3 [json_name = "cost-style"];
                  string is_name = 4 [json_name = "is-name"];
                  message Timer {
                     uint32 lsp_max = 1 [json_name = "lsp-max"];
                     uint32 lsp_refresh = 2 [json_name = "lsp-refresh"];
                     message Spf {
                        uint32 max = 1 [json_name = "max"];
                        uint32 init = 2 [json_name = "init"];
                        uint32 incr = 3 [json_name = "incr"];
                        enum SpfType {
                           SpfType_INTELLIGENTX_TIMER = 0;
                           SpfType_NOX_INCRX_TIMER = 1;
                           SpfType_ONEX_TRIGGERX_TIMER = 2;
                        };
                        SpfType spf_type = 4 [json_name = "spf-type"];
                     }
                     Spf spf = 3 [json_name = "spf"];
                     message LspGeneration {
                        uint32 max_level1 = 1 [json_name = "max-level1"];
                        uint32 max_level2 = 2 [json_name = "max-level2"];
                        uint32 init_level1 = 3 [json_name = "init-level1"];
                        uint32 init_level2 = 4 [json_name = "init-level2"];
                        uint32 incr_level1 = 5 [json_name = "incr-level1"];
                        uint32 incr_level2 = 6 [json_name = "incr-level2"];
                     }
                     LspGeneration lsp_generation = 4 [json_name = "lsp-generation"];
                     uint32 purge_lsp_delay = 5 [json_name = "purge-lsp-delay"];
                  }
                  Timer timer = 5 [json_name = "timer"];
                  message LspLength {
                     uint32 originate_level1 = 1 [json_name = "originate-level1"];
                     uint32 originate_level2 = 2 [json_name = "originate-level2"];
                     uint32 receive = 3 [json_name = "receive"];
                  }
                  LspLength lsp_length = 6 [json_name = "lsp-length"];
                  message FlashFlood {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                     uint32 lsp_num_level1 = 3 [json_name = "lsp-num-level1"];
                     uint32 lsp_num_level2 = 4 [json_name = "lsp-num-level2"];
                     uint32 max_timer_level1 = 5 [json_name = "max-timer-level1"];
                     uint32 max_timer_level2 = 6 [json_name = "max-timer-level2"];
                  }
                  FlashFlood flash_flood = 7 [json_name = "flash-flood"];
                  message SetOverload {
                     enum Type {
                        Type_NOX_SET = 0;
                        Type_ONX_STARTUP = 1;
                        Type_MAUNAL = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum WaitType {
                        INVALID_ENUM_VALUE_WaitType = 0;
                        WaitType_WAITX_FORX_BGP = 1;
                        WaitType_STARTX_FROMX_NBR = 2;
                        WaitType_NOX_WAIT = 3;
                     };
                     WaitType wait_type = 2 [json_name = "wait-type"];
                     string nbr_system_id = 3 [json_name = "nbr-system-id"];
                     uint32 timeout1 = 4 [json_name = "timeout1"];
                     uint32 timeout2 = 5 [json_name = "timeout2"];
                     bool inter_level = 6 [json_name = "inter-level"];
                     bool external = 7 [json_name = "external"];
                     bool send_sa_bit = 8 [json_name = "send-sa-bit"];
                     uint32 sa_bit_time = 9 [json_name = "sa-bit-time"];
                     uint32 rt_delay_time = 10 [json_name = "rt-delay-time"];
                     bool rt_max_metric = 11 [json_name = "rt-max-metric"];
                  }
                  SetOverload set_overload = 8 [json_name = "set-overload"];
                  message NetEntitys {
                     message NetEntity {
                        string value = 1 [json_name = "value"];
                     }
                     repeated NetEntity net_entity = 1 [json_name = "net-entity"];
                  }
                  NetEntitys net_entitys = 9 [json_name = "net-entitys"];
                  message LspAuths {
                     message LspAuth {
                        enum CmdType {
                           INVALID_ENUM_VALUE_CmdType = 0;
                           CmdType_AREA = 1;
                           CmdType_DOMAIN = 2;
                        };
                        CmdType cmd_type = 1 [json_name = "cmd-type"];
                        enum PwType {
                           INVALID_ENUM_VALUE_PwType = 0;
                           PwType_SIMPLE = 1;
                           PwType_MD5 = 2;
                           PwType_KEYCHAIN = 3;
                           PwType_HMACX_SHA256 = 4;
                        };
                        PwType pw_type = 2 [json_name = "pw-type"];
                        string simple = 3 [json_name = "simple"];
                        string md5 = 4 [json_name = "md5"];
                        string key_chain = 5 [json_name = "key-chain"];
                        enum Service {
                           INVALID_ENUM_VALUE_Service = 0;
                           Service_IP = 1;
                           Service_OSI = 2;
                        };
                        Service service = 6 [json_name = "service"];
                        enum Usage {
                           Usage_USAGEX_DEFAULT = 0;
                           Usage_AUTHENTICATIONX_AVOID = 1;
                           Usage_SENDX_ONLY = 2;
                           Usage_ALLX_SENDX_ONLY = 3;
                        };
                        Usage usage = 7 [json_name = "usage"];
                        uint32 key_id = 8 [json_name = "key-id"];
                     }
                     repeated LspAuth lsp_auth = 1 [json_name = "lsp-auth"];
                  }
                  LspAuths lsp_auths = 10 [json_name = "lsp-auths"];
                  message Circuits {
                     message Circuit {
                        string name = 1 [json_name = "name"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                        bool p2p_enable = 3 [json_name = "p2p-enable"];
                        uint32 peer_hold_max = 4 [json_name = "peer-hold-max"];
                        bool silent_enable = 5 [json_name = "silent-enable"];
                        message HelloAuths {
                           message HelloAuth {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                              };
                              Level level = 1 [json_name = "level"];
                              enum PwType {
                                 INVALID_ENUM_VALUE_PwType = 0;
                                 PwType_SIMPLE = 1;
                                 PwType_MD5 = 2;
                                 PwType_KEYCHAIN = 3;
                                 PwType_HMACX_SHA256 = 4;
                              };
                              PwType pw_type = 2 [json_name = "pw-type"];
                              string simple = 3 [json_name = "simple"];
                              string key_chain = 4 [json_name = "key-chain"];
                              string md5 = 5 [json_name = "md5"];
                              enum Service {
                                 INVALID_ENUM_VALUE_Service = 0;
                                 Service_IP = 1;
                                 Service_OSI = 2;
                              };
                              Service service = 6 [json_name = "service"];
                              bool send_only = 7 [json_name = "send-only"];
                              uint32 key_id = 8 [json_name = "key-id"];
                           }
                           repeated HelloAuth hello_auth = 1 [json_name = "hello-auth"];
                        }
                        HelloAuths hello_auths = 6 [json_name = "hello-auths"];
                        message Afs {
                           message Af {
                              enum Type {
                                 INVALID_ENUM_VALUE_Type = 0;
                                 Type_AFIPV4 = 1;
                                 Type_AFIPV6 = 2;
                              };
                              Type type = 1 [json_name = "type"];
                              uint32 cost_level1 = 2 [json_name = "cost-level1"];
                              uint32 cost_level2 = 3 [json_name = "cost-level2"];
                              enum SuppressReach {
                                 SuppressReach_NOX_SET = 0;
                                 SuppressReach_LEVELX_1 = 1;
                                 SuppressReach_LEVELX_2 = 2;
                                 SuppressReach_LEVELX_1X_2 = 3;
                              };
                              SuppressReach suppress_reach = 4 [json_name = "suppress-reach"];
                              message Bfd {
                                 bool enable = 1 [json_name = "enable"];
                                 uint32 min_rx = 2 [json_name = "min-rx"];
                                 uint32 min_tx = 3 [json_name = "min-tx"];
                                 uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                                 bool frr_binding = 6 [json_name = "frr-binding"];
                                 uint32 tos_exp = 7 [json_name = "tos-exp"];
                                 message Type_Enable {
                                    bool enable13 = 1 [json_name = "enable"];
                                 }
                                 message Type_Static {
                                    bool static13 = 1 [json_name = "static"];
                                 }
                                 message Type_Block {
                                    bool block13 = 1 [json_name = "block"];
                                 }
                                 message Type_Track {
                                    string session_name = 1 [json_name = "session-name"];
                                 }
                                 oneof Type {
                                    Type_Enable type_enable = 8 [json_name = "enable"];
                                    Type_Static type_static = 9 [json_name = "static"];
                                    Type_Block type_block = 10 [json_name = "block"];
                                    Type_Track type_track = 13 [json_name = "track"];
                                 }
                                 message BfdIncrCost_Value {
                                    uint32 value13 = 1 [json_name = "value"];
                                    uint32 wtr = 2 [json_name = "wtr"];
                                 }
                                 message BfdIncrCost_CostBlock {
                                    bool cost_block = 1 [json_name = "cost-block"];
                                 }
                                 oneof BfdIncrCost {
                                    BfdIncrCost_Value bfd_incr_cost_value = 11 [json_name = "value"];
                                    BfdIncrCost_CostBlock bfd_incr_cost_cost_block = 12 [json_name = "cost-block"];
                                 }
                              }
                              Bfd bfd = 5 [json_name = "bfd"];
                              message LdpSync {
                                 enum Enable {
                                    Enable_NONE = 0;
                                    Enable_ENABLE = 1;
                                    Enable_BLOCK = 2;
                                 };
                                 Enable enable = 1 [json_name = "enable"];
                                 uint32 hold_down_timer = 2 [json_name = "hold-down-timer"];
                                 message HoldCostMax_Timer {
                                    uint32 timer13 = 1 [json_name = "timer"];
                                 }
                                 message HoldCostMax_Infinite {
                                    bool infinite13 = 1 [json_name = "infinite"];
                                 }
                                 oneof HoldCostMax {
                                    HoldCostMax_Timer hold_cost_max_timer = 4 [json_name = "timer"];
                                    HoldCostMax_Infinite hold_cost_max_infinite = 5 [json_name = "infinite"];
                                 }
                              }
                              LdpSync ldp_sync = 6 [json_name = "ldp-sync"];
                              message Topologys {
                                 message Topology {
                                    uint32 mt_id = 1 [json_name = "mt-id"];
                                    uint32 incr_cost = 2 [json_name = "incr-cost"];
                                    uint32 cost_level1 = 3 [json_name = "cost-level1"];
                                    uint32 cost_level2 = 4 [json_name = "cost-level2"];
                                    uint32 tag_level1 = 5 [json_name = "tag-level1"];
                                    uint32 tag_level2 = 6 [json_name = "tag-level2"];
                                    message LinkGroupPorts {
                                       message LinkGroupPort {
                                          enum LevelType {
                                             INVALID_ENUM_VALUE_LevelType = 0;
                                             LevelType_LEVELX_1 = 1;
                                             LevelType_LEVELX_2 = 2;
                                          };
                                          LevelType level_type = 1 [json_name = "level-type"];
                                          string name = 2 [json_name = "name"];
                                       }
                                       repeated LinkGroupPort link_group_port = 1 [json_name = "link-group-port"];
                                    }
                                    LinkGroupPorts link_group_ports = 7 [json_name = "link-group-ports"];
                                 }
                                 repeated Topology topology = 1 [json_name = "topology"];
                              }
                              Topologys topologys = 7 [json_name = "topologys"];
                              uint32 tag_level1 = 8 [json_name = "tag-level1"];
                              uint32 tag_level2 = 9 [json_name = "tag-level2"];
                              uint32 incr_cost = 10 [json_name = "incr-cost"];
                              enum BfdBitError {
                                 BfdBitError_NOX_SET = 0;
                                 BfdBitError_ENABLE = 1;
                                 BfdBitError_BLOCK = 2;
                              };
                              BfdBitError bfd_bit_error = 11 [json_name = "bfd-bit-error"];
                              message MplsLdp {
                                 bool auto_flag_block = 1 [json_name = "auto-flag-block"];
                              }
                              MplsLdp mpls_ldp = 12 [json_name = "mpls-ldp"];
                              message Frr {
                                 bool lfa_block_level1 = 1 [json_name = "lfa-block-level1"];
                                 bool lfa_block_level2 = 2 [json_name = "lfa-block-level2"];
                                 bool rlfa_disable_level1 = 3 [json_name = "rlfa-disable-level1"];
                                 bool rlfa_disable_level2 = 4 [json_name = "rlfa-disable-level2"];
                                 bool tilfa_disable_level1 = 5 [json_name = "tilfa-disable-level1"];
                                 bool tilfa_disable_level2 = 6 [json_name = "tilfa-disable-level2"];
                              }
                              Frr frr = 13 [json_name = "frr"];
                              message PrefixSids {
                                 message PrefixSid {
                                    uint32 algorithm = 1 [json_name = "algorithm"];
                                    enum Type {
                                       INVALID_ENUM_VALUE_Type = 0;
                                       Type_ABSOLUTE = 1;
                                       Type_INDEX = 2;
                                    };
                                    Type type = 2 [json_name = "type"];
                                    uint32 label = 3 [json_name = "label"];
                                    bool node_flag = 4 [json_name = "node-flag"];
                                 }
                                 repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                              }
                              PrefixSids prefix_sids = 14 [json_name = "prefix-sids"];
                              message LinkGroupPorts {
                                 message LinkGroupPort {
                                    enum LevelType {
                                       INVALID_ENUM_VALUE_LevelType = 0;
                                       LevelType_LEVELX_1 = 1;
                                       LevelType_LEVELX_2 = 2;
                                    };
                                    LevelType level_type = 1 [json_name = "level-type"];
                                    string name = 2 [json_name = "name"];
                                 }
                                 repeated LinkGroupPort link_group_port = 1 [json_name = "link-group-port"];
                              }
                              LinkGroupPorts link_group_ports = 15 [json_name = "link-group-ports"];
                              message DelayNormalize {
                                 uint32 interval = 1 [json_name = "interval"];
                                 uint32 offset = 2 [json_name = "offset"];
                              }
                              DelayNormalize delay_normalize = 16 [json_name = "delay-normalize"];
                           }
                           repeated Af af = 1 [json_name = "af"];
                        }
                        Afs afs = 7 [json_name = "afs"];
                        enum HelloMode {
                           HelloMode_NORMAL = 0;
                           HelloMode_PADDING = 1;
                           HelloMode_SMALL = 2;
                        };
                        HelloMode hello_mode = 8 [json_name = "hello-mode"];
                        bool purge_source_trace_block = 9 [json_name = "purge-source-trace-block"];
                        bool silent_cost = 10 [json_name = "silent-cost"];
                        string dis_name = 11 [json_name = "dis-name"];
                        message Srlgs {
                           message Srlg {
                              uint32 group_id = 1 [json_name = "group-id"];
                           }
                           repeated Srlg srlg = 1 [json_name = "srlg"];
                        }
                        Srlgs srlgs = 12 [json_name = "srlgs"];
                        message MeshGroup {
                           enum State {
                              INVALID_ENUM_VALUE_State = 0;
                              State_INACTIVE = 1;
                              State_BLOCKED = 2;
                              State_SET = 3;
                           };
                           State state = 1 [json_name = "state"];
                           uint32 number10 = 2 [json_name = "number"];
                        }
                        MeshGroup mesh_group = 13 [json_name = "mesh-group"];
                        message SuppressFlapping {
                           message Peer {
                              bool enable = 1 [json_name = "enable"];
                              uint32 detect_interval = 2 [json_name = "detect-interval"];
                              uint32 threshold = 3 [json_name = "threshold"];
                              uint32 resume_interval = 4 [json_name = "resume-interval"];
                              uint32 hold_down = 5 [json_name = "hold-down"];
                              bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                           }
                           Peer peer = 1 [json_name = "peer"];
                           message Bfd {
                              uint32 detect_interval = 1 [json_name = "detect-interval"];
                              uint32 threshold = 2 [json_name = "threshold"];
                              uint32 incr_cost = 3 [json_name = "incr-cost"];
                              uint32 wtr_value = 4 [json_name = "wtr-value"];
                           }
                           Bfd bfd = 2 [json_name = "bfd"];
                        }
                        SuppressFlapping suppress_flapping = 14 [json_name = "suppress-flapping"];
                        message Timer {
                           uint32 csnp_interval_level1 = 1 [json_name = "csnp-interval-level1"];
                           uint32 csnp_interval_level2 = 2 [json_name = "csnp-interval-level2"];
                           uint32 throttle_interval = 3 [json_name = "throttle-interval"];
                           uint32 throttle_count = 4 [json_name = "throttle-count"];
                        }
                        Timer timer = 15 [json_name = "timer"];
                        message Broadcast {
                           uint32 dis_priority_level1 = 1 [json_name = "dis-priority-level1"];
                           uint32 dis_priority_level2 = 2 [json_name = "dis-priority-level2"];
                           uint32 hello_timer_level1 = 3 [json_name = "hello-timer-level1"];
                           uint32 hello_timer_level2 = 4 [json_name = "hello-timer-level2"];
                           uint32 hold_multiplier_level1 = 5 [json_name = "hold-multiplier-level1"];
                           uint32 hold_multiplier_level2 = 6 [json_name = "hold-multiplier-level2"];
                           bool conser_level1 = 7 [json_name = "conser-level1"];
                           bool conser_level2 = 8 [json_name = "conser-level2"];
                        }
                        Broadcast broadcast = 16 [json_name = "broadcast"];
                        message P2P {
                           bool snpa_check = 1 [json_name = "snpa-check"];
                           bool peer_ip_ignore = 2 [json_name = "peer-ip-ignore"];
                           enum PppNegotiation {
                              INVALID_ENUM_VALUE_PppNegotiation = 0;
                              PppNegotiation_X_2X_WAY = 1;
                              PppNegotiation_X_3X_WAY = 2;
                              PppNegotiation_X_3X_WAYONLY = 3;
                           };
                           PppNegotiation ppp_negotiation = 3 [json_name = "ppp-negotiation"];
                           uint32 hello_timer = 4 [json_name = "hello-timer"];
                           uint32 hold_multiplier = 5 [json_name = "hold-multiplier"];
                           uint32 lsp_retransmit_interval = 6 [json_name = "lsp-retransmit-interval"];
                           bool ppp_osicp_check = 7 [json_name = "ppp-osicp-check"];
                           bool conser = 8 [json_name = "conser"];
                        }
                        P2P p2p = 17 [json_name = "p2p"];
                        message DispData {
                           uint32 index = 1 [json_name = "index"];
                           uint32 mtu = 2 [json_name = "mtu"];
                           bool dis_level1 = 3 [json_name = "dis-level1"];
                           bool dis_level2 = 4 [json_name = "dis-level2"];
                           string v4_status = 5 [json_name = "v4-status"];
                           bool mtu_state = 6 [json_name = "mtu-state"];
                           bool link_state = 7 [json_name = "link-state"];
                           bool ip_state = 8 [json_name = "ip-state"];
                           string v6_status = 9 [json_name = "v6-status"];
                           bool mtu_v6_state = 10 [json_name = "mtu-v6-state"];
                           bool link_v6_state = 11 [json_name = "link-v6-state"];
                           bool ip_v6_state = 12 [json_name = "ip-v6-state"];
                           bool vc_state = 13 [json_name = "vc-state"];
                           enum PeerFlapStatus {
                              PeerFlapStatus_NO = 0;
                              PeerFlapStatus_YES = 1;
                              PeerFlapStatus_HOLDMAXCOST = 2;
                              PeerFlapStatus_HOLDDOWN = 3;
                           };
                           PeerFlapStatus peer_flap_status = 14 [json_name = "peer-flap-status"];
                           uint32 peer_flap_count = 15 [json_name = "peer-flap-count"];
                           uint32 peer_flap_threshold = 16 [json_name = "peer-flap-threshold"];
                           string peer_flap_timer = 17 [json_name = "peer-flap-timer"];
                           uint32 peer_flap_remain_timer = 18 [json_name = "peer-flap-remain-timer"];
                           bool osi_state = 19 [json_name = "osi-state"];
                           bool snpa_state = 20 [json_name = "snpa-state"];
                           bool bandwidth_state = 21 [json_name = "bandwidth-state"];
                           bool enable_state = 22 [json_name = "enable-state"];
                           bool v6_osi_state = 23 [json_name = "v6-osi-state"];
                           bool v6_snpa_state = 24 [json_name = "v6-snpa-state"];
                           bool v6_bandwidth_state = 25 [json_name = "v6-bandwidth-state"];
                           bool v6_enable_state = 26 [json_name = "v6-enable-state"];
                           message Afs {
                              message Af {
                                 enum Type {
                                    INVALID_ENUM_VALUE_Type = 0;
                                    Type_AFIPV4 = 1;
                                    Type_AFIPV6 = 2;
                                 };
                                 Type type = 1 [json_name = "type"];
                                 message Levels {
                                    message Level {
                                       enum Level14 {
                                          INVALID_ENUM_VALUE_Level14 = 0;
                                          Level14_LEVELX_1 = 1;
                                          Level14_LEVELX_2 = 2;
                                       };
                                       Level14 level14 = 1 [json_name = "level"];
                                       uint32 cost = 2 [json_name = "cost"];
                                       string cost_reason = 3 [json_name = "cost-reason"];
                                    }
                                    repeated Level level = 1 [json_name = "level"];
                                 }
                                 Levels levels = 2 [json_name = "levels"];
                              }
                              repeated Af af = 1 [json_name = "af"];
                           }
                           Afs afs = 27 [json_name = "afs"];
                        }
                        DispData disp_data = 18 [json_name = "disp-data"];
                        message HoldCostType_HoldMax {
                           uint32 peer_hold_max = 1 [json_name = "peer-hold-max"];
                        }
                        message HoldCostType_PeerHoldCost {
                           uint32 val = 1 [json_name = "val"];
                           uint32 hold_interval = 2 [json_name = "hold-interval"];
                        }
                        oneof HoldCostType {
                           HoldCostType_HoldMax hold_cost_type_hold_max = 19 [json_name = "hold-max"];
                           HoldCostType_PeerHoldCost hold_cost_type_peer_hold_cost = 20 [json_name = "peer-hold-cost"];
                        }
                     }
                     repeated Circuit circuit = 1 [json_name = "circuit"];
                  }
                  Circuits circuits = 11 [json_name = "circuits"];
                  message Afs {
                     message Af {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_AFIPV4 = 1;
                           Type_AFIPV6 = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        enum Ipv6BaseTopo {
                           Ipv6BaseTopo_STANDARD = 0;
                           Ipv6BaseTopo_COMPATIBLE = 1;
                           Ipv6BaseTopo_IPV6 = 2;
                           Ipv6BaseTopo_CMPTX_IPV6SPF = 3;
                        };
                        Ipv6BaseTopo ipv6_base_topo = 2 [json_name = "ipv6-base-topo"];
                        message TrafficEng {
                           bool enable_level1 = 1 [json_name = "enable-level1"];
                           bool enable_level2 = 2 [json_name = "enable-level2"];
                           message MetricDelay {
                              bool adv_level1 = 1 [json_name = "adv-level1"];
                              bool adv_level2 = 2 [json_name = "adv-level2"];
                              uint32 suppress_timer = 3 [json_name = "suppress-timer"];
                              uint32 suppress_percent = 4 [json_name = "suppress-percent"];
                              uint32 suppress_absolute = 5 [json_name = "suppress-absolute"];
                           }
                           MetricDelay metric_delay = 3 [json_name = "metric-delay"];
                           message MetricLinkLosses {
                              bool adv_level1 = 1 [json_name = "adv-level1"];
                              bool adv_level2 = 2 [json_name = "adv-level2"];
                              uint32 suppress_timer = 3 [json_name = "suppress-timer"];
                              uint32 suppress_percent = 4 [json_name = "suppress-percent"];
                              uint32 suppress_absolute = 5 [json_name = "suppress-absolute"];
                           }
                           MetricLinkLosses metric_link_losses = 4 [json_name = "metric-link-losses"];
                        }
                        TrafficEng traffic_eng = 3 [json_name = "traffic-eng"];
                        message Bfd {
                           bool enable = 1 [json_name = "enable"];
                           uint32 min_rx = 2 [json_name = "min-rx"];
                           uint32 min_tx = 3 [json_name = "min-tx"];
                           bool frr_binding = 4 [json_name = "frr-binding"];
                           uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                           uint32 tos_exp = 6 [json_name = "tos-exp"];
                           uint32 bfd_incr_cost = 7 [json_name = "bfd-incr-cost"];
                           uint32 bfd_incr_cost_wtr = 8 [json_name = "bfd-incr-cost-wtr"];
                        }
                        Bfd bfd = 4 [json_name = "bfd"];
                        message LdpSync {
                           bool enable = 1 [json_name = "enable"];
                           bool mpls_binding = 2 [json_name = "mpls-binding"];
                           uint32 hold_down_timer = 3 [json_name = "hold-down-timer"];
                           message HoldCostMax_Timer {
                              uint32 timer11 = 1 [json_name = "timer"];
                           }
                           message HoldCostMax_Infinite {
                              bool infinite11 = 1 [json_name = "infinite"];
                           }
                           oneof HoldCostMax {
                              HoldCostMax_Timer hold_cost_max_timer = 5 [json_name = "timer"];
                              HoldCostMax_Infinite hold_cost_max_infinite = 6 [json_name = "infinite"];
                           }
                        }
                        LdpSync ldp_sync = 5 [json_name = "ldp-sync"];
                        message PrefixPrioritys {
                           message PrefixPriority {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                              };
                              Level level = 1 [json_name = "level"];
                              enum Priority {
                                 INVALID_ENUM_VALUE_Priority = 0;
                                 Priority_MEDIUM = 1;
                                 Priority_HIGH = 2;
                                 Priority_CRITICAL = 3;
                                 Priority_VERYX_LOW = 4;
                              };
                              Priority priority = 2 [json_name = "priority"];
                              message PolicyFlag_Tag {
                                 uint32 tag12 = 1 [json_name = "tag"];
                              }
                              message PolicyFlag_IpPrefix {
                                 string ip_prefix = 1 [json_name = "ip-prefix"];
                              }
                              message PolicyFlag_Ipv6Prefix {
                                 string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                              }
                              oneof PolicyFlag {
                                 PolicyFlag_Tag policy_flag_tag = 4 [json_name = "tag"];
                                 PolicyFlag_IpPrefix policy_flag_ip_prefix = 5 [json_name = "ip-prefix"];
                                 PolicyFlag_Ipv6Prefix policy_flag_ipv6_prefix = 6 [json_name = "ipv6-prefix"];
                              }
                           }
                           repeated PrefixPriority prefix_priority = 1 [json_name = "prefix-priority"];
                        }
                        PrefixPrioritys prefix_prioritys = 6 [json_name = "prefix-prioritys"];
                        message Frr {
                           bool enable = 1 [json_name = "enable"];
                           bool lfa_level1 = 2 [json_name = "lfa-level1"];
                           bool lfa_level2 = 3 [json_name = "lfa-level2"];
                           message RemoteLfa {
                              bool rlfa_level1 = 1 [json_name = "rlfa-level1"];
                              bool rlfa_level2 = 2 [json_name = "rlfa-level2"];
                              uint32 max_cost_level1 = 3 [json_name = "max-cost-level1"];
                              uint32 max_cost_level2 = 4 [json_name = "max-cost-level2"];
                              string ip_prefix_level1 = 5 [json_name = "ip-prefix-level1"];
                              string ip_prefix_level2 = 6 [json_name = "ip-prefix-level2"];
                           }
                           RemoteLfa remote_lfa = 4 [json_name = "remote-lfa"];
                           bool ecmp_level1 = 5 [json_name = "ecmp-level1"];
                           bool ecmp_level2 = 6 [json_name = "ecmp-level2"];
                           message Tilfa {
                              bool enable_level1 = 1 [json_name = "enable-level1"];
                              bool enable_level2 = 2 [json_name = "enable-level2"];
                              bool remote_srlg_level1 = 3 [json_name = "remote-srlg-level1"];
                              bool remote_srlg_level2 = 4 [json_name = "remote-srlg-level2"];
                           }
                           Tilfa tilfa = 7 [json_name = "tilfa"];
                           message Tiebreaker {
                              uint32 node_protect_level1 = 1 [json_name = "node-protect-level1"];
                              uint32 node_protect_level2 = 2 [json_name = "node-protect-level2"];
                              uint32 lowest_cost_level1 = 3 [json_name = "lowest-cost-level1"];
                              uint32 lowest_cost_level2 = 4 [json_name = "lowest-cost-level2"];
                              uint32 non_ecmp_level1 = 5 [json_name = "non-ecmp-level1"];
                              uint32 non_ecmp_level2 = 6 [json_name = "non-ecmp-level2"];
                              uint32 srlg_disjoint_level1 = 7 [json_name = "srlg-disjoint-level1"];
                              uint32 srlg_disjoint_level2 = 8 [json_name = "srlg-disjoint-level2"];
                              uint32 hold_max_cost_level1 = 9 [json_name = "hold-max-cost-level1"];
                              uint32 hold_max_cost_level2 = 10 [json_name = "hold-max-cost-level2"];
                           }
                           Tiebreaker tiebreaker = 8 [json_name = "tiebreaker"];
                           message PolicyType_RoutePolicy {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message PolicyType_RouteFilter {
                              string route_filter = 1 [json_name = "route-filter"];
                           }
                           oneof PolicyType {
                              PolicyType_RoutePolicy policy_type_route_policy = 9 [json_name = "route-policy"];
                              PolicyType_RouteFilter policy_type_route_filter = 10 [json_name = "route-filter"];
                           }
                           message FrrSummarys {
                              message FrrSummary {
                                 enum LevelType {
                                    INVALID_ENUM_VALUE_LevelType = 0;
                                    LevelType_LEVELX_1 = 1;
                                    LevelType_LEVELX_2 = 2;
                                    LevelType_LEVELX_1X_2 = 3;
                                 };
                                 LevelType level_type = 1 [json_name = "level-type"];
                                 uint32 critical_count = 2 [json_name = "critical-count"];
                                 uint32 critical_protect_cnt = 3 [json_name = "critical-protect-cnt"];
                                 uint32 high_count = 4 [json_name = "high-count"];
                                 uint32 high_protect_count = 5 [json_name = "high-protect-count"];
                                 uint32 medium_count = 6 [json_name = "medium-count"];
                                 uint32 medium_protect_count = 7 [json_name = "medium-protect-count"];
                                 uint32 low_count = 8 [json_name = "low-count"];
                                 uint32 low_protect_count = 9 [json_name = "low-protect-count"];
                                 uint32 total_count = 10 [json_name = "total-count"];
                                 uint32 total_protect_count = 11 [json_name = "total-protect-count"];
                                 string critical_coverage = 12 [json_name = "critical-coverage"];
                                 string high_coverage = 13 [json_name = "high-coverage"];
                                 string medium_coverage = 14 [json_name = "medium-coverage"];
                                 string low_coverage = 15 [json_name = "low-coverage"];
                                 string total_coverage = 16 [json_name = "total-coverage"];
                              }
                              repeated FrrSummary frr_summary = 1 [json_name = "frr-summary"];
                           }
                           FrrSummarys frr_summarys = 11 [json_name = "frr-summarys"];
                        }
                        Frr frr = 7 [json_name = "frr"];
                        message Topologys {
                           message Topology {
                              uint32 mt_id = 1 [json_name = "mt-id"];
                              string topo_name = 2 [json_name = "topo-name"];
                              message Ipv4Routes {
                                 message Ipv4Route {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string address = 2 [json_name = "address"];
                                    uint32 mask = 3 [json_name = "mask"];
                                    string next_hop = 4 [json_name = "next-hop"];
                                    uint32 internal_cost = 5 [json_name = "internal-cost"];
                                    string external_cost = 6 [json_name = "external-cost"];
                                    string interface_name = 7 [json_name = "interface-name"];
                                    string flags = 8 [json_name = "flags"];
                                    string priority = 9 [json_name = "priority"];
                                    string tag = 10 [json_name = "tag"];
                                 }
                                 repeated Ipv4Route ipv4_route = 1 [json_name = "ipv4-route"];
                              }
                              Ipv4Routes ipv4_routes = 3 [json_name = "ipv4-routes"];
                              message Ipv6Routes {
                                 message Ipv6Route {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string address = 2 [json_name = "address"];
                                    uint32 mask = 3 [json_name = "mask"];
                                    string next_hop = 4 [json_name = "next-hop"];
                                    string interface_name = 5 [json_name = "interface-name"];
                                    uint32 cost = 6 [json_name = "cost"];
                                    string flags = 7 [json_name = "flags"];
                                    string priority = 8 [json_name = "priority"];
                                    string tag = 9 [json_name = "tag"];
                                 }
                                 repeated Ipv6Route ipv6_route = 1 [json_name = "ipv6-route"];
                              }
                              Ipv6Routes ipv6_routes = 4 [json_name = "ipv6-routes"];
                              uint32 max_load_balancing = 5 [json_name = "max-load-balancing"];
                              bool auto_cost = 6 [json_name = "auto-cost"];
                              uint32 bandwidth = 7 [json_name = "bandwidth"];
                              message AttachBit {
                                 enum AdvControl {
                                    AdvControl_NOX_TYPE = 0;
                                    AdvControl_ALWAYS = 1;
                                    AdvControl_NEVER = 2;
                                 };
                                 AdvControl adv_control = 1 [json_name = "adv-control"];
                                 bool avoid_learn = 2 [json_name = "avoid-learn"];
                              }
                              AttachBit attach_bit = 8 [json_name = "attach-bit"];
                              message Preference {
                                 uint32 value = 1 [json_name = "value"];
                                 message PolicyType_RoutePolicy {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_RouteFilter {
                                    string route_filter = 1 [json_name = "route-filter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RoutePolicy policy_type_route_policy = 2 [json_name = "route-policy"];
                                    PolicyType_RouteFilter policy_type_route_filter = 3 [json_name = "route-filter"];
                                 }
                              }
                              Preference preference = 9 [json_name = "preference"];
                              message ImportRoutes {
                                 message ImportRoute {
                                    enum Protocol {
                                       INVALID_ENUM_VALUE_Protocol = 0;
                                       Protocol_DIRECT = 1;
                                       Protocol_OSPF = 2;
                                       Protocol_ISIS = 3;
                                       Protocol_STATIC = 4;
                                       Protocol_RIP = 5;
                                       Protocol_BGP = 6;
                                       Protocol_OSPFV3 = 7;
                                       Protocol_RIPNG = 8;
                                       Protocol_UNR = 11;
                                    };
                                    Protocol protocol = 1 [json_name = "protocol"];
                                    uint32 process_id = 2 [json_name = "process-id"];
                                    uint32 cost = 3 [json_name = "cost"];
                                    uint32 tag = 4 [json_name = "tag"];
                                    enum LevelType {
                                       INVALID_ENUM_VALUE_LevelType = 0;
                                       LevelType_LEVELX_1 = 1;
                                       LevelType_LEVELX_2 = 2;
                                       LevelType_LEVELX_1X_2 = 3;
                                    };
                                    LevelType level_type = 6 [json_name = "level-type"];
                                    bool inherit_cost = 7 [json_name = "inherit-cost"];
                                    message PolicyType_RoutePolicyName {
                                       string route_policy_name = 1 [json_name = "route-policy-name"];
                                    }
                                    message PolicyType_RouteFilterName {
                                       string route_filter_name = 1 [json_name = "route-filter-name"];
                                       string parameter = 2 [json_name = "parameter"];
                                    }
                                    oneof PolicyType {
                                       PolicyType_RoutePolicyName policy_type_route_policy_name = 8 [json_name = "route-policy-name"];
                                       PolicyType_RouteFilterName policy_type_route_filter_name = 9 [json_name = "route-filter-name"];
                                    }
                                 }
                                 repeated ImportRoute import_route = 1 [json_name = "import-route"];
                              }
                              ImportRoutes import_routes = 10 [json_name = "import-routes"];
                              message LeakRouteLevel2ToLevel1 {
                                 uint32 tag = 1 [json_name = "tag"];
                                 bool allow_filter = 3 [json_name = "allow-filter"];
                                 bool allow_updown = 4 [json_name = "allow-updown"];
                                 message PolicyType_BasicAcl4 {
                                    string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                                 }
                                 message PolicyType_BasicAcl6 {
                                    string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                                 }
                                 message PolicyType_Ipv4Prefix {
                                    string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                                 }
                                 message PolicyType_Ipv6Prefix {
                                    string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                                 }
                                 message PolicyType_RoutePolicyName {
                                    string route_policy_name = 1 [json_name = "route-policy-name"];
                                 }
                                 message PolicyType_RouteFilterName {
                                    string route_filter_name = 1 [json_name = "route-filter-name"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_BasicAcl4 policy_type_basic_acl4 = 5 [json_name = "basic-acl4"];
                                    PolicyType_BasicAcl6 policy_type_basic_acl6 = 6 [json_name = "basic-acl6"];
                                    PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 7 [json_name = "ipv4-prefix"];
                                    PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 8 [json_name = "ipv6-prefix"];
                                    PolicyType_RoutePolicyName policy_type_route_policy_name = 9 [json_name = "route-policy-name"];
                                    PolicyType_RouteFilterName policy_type_route_filter_name = 10 [json_name = "route-filter-name"];
                                 }
                              }
                              LeakRouteLevel2ToLevel1 leak_route_level2_to_level1 = 11 [json_name = "leak-route-level2-to-level1"];
                              message LeakRouteLevel1ToLevel2 {
                                 bool enable = 1 [json_name = "enable"];
                                 uint32 tag = 2 [json_name = "tag"];
                                 bool allow_filter = 3 [json_name = "allow-filter"];
                                 message PolicyType_BasicAcl4 {
                                    string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                                 }
                                 message PolicyType_BasicAcl6 {
                                    string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                                 }
                                 message PolicyType_Ipv4Prefix {
                                    string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                                 }
                                 message PolicyType_Ipv6Prefix {
                                    string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                                 }
                                 message PolicyType_RoutePolicy {
                                    string route_policy = 1 [json_name = "route-policy"];
                                 }
                                 message PolicyType_RouteFilter {
                                    string route_filter = 1 [json_name = "route-filter"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_BasicAcl4 policy_type_basic_acl4 = 4 [json_name = "basic-acl4"];
                                    PolicyType_BasicAcl6 policy_type_basic_acl6 = 5 [json_name = "basic-acl6"];
                                    PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 6 [json_name = "ipv4-prefix"];
                                    PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 7 [json_name = "ipv6-prefix"];
                                    PolicyType_RoutePolicy policy_type_route_policy = 8 [json_name = "route-policy"];
                                    PolicyType_RouteFilter policy_type_route_filter = 9 [json_name = "route-filter"];
                                 }
                              }
                              LeakRouteLevel1ToLevel2 leak_route_level1_to_level2 = 12 [json_name = "leak-route-level1-to-level2"];
                              message Ipv4ImportRoutes {
                                 message Ipv4ImportRoute {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string protocol = 2 [json_name = "protocol"];
                                    string address = 3 [json_name = "address"];
                                    uint32 mask = 4 [json_name = "mask"];
                                    uint32 internal_cost = 5 [json_name = "internal-cost"];
                                    string external_cost = 6 [json_name = "external-cost"];
                                    string tag = 7 [json_name = "tag"];
                                    string avoid_loop_state = 8 [json_name = "avoid-loop-state"];
                                 }
                                 repeated Ipv4ImportRoute ipv4_import_route = 1 [json_name = "ipv4-import-route"];
                              }
                              Ipv4ImportRoutes ipv4_import_routes = 13 [json_name = "ipv4-import-routes"];
                              message RouteStatisticss {
                                 message RouteStatistics {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    uint32 v4_learnt_num = 2 [json_name = "v4-learnt-num"];
                                    uint32 v6_learnt_num = 3 [json_name = "v6-learnt-num"];
                                    uint32 v4_critical_num = 4 [json_name = "v4-critical-num"];
                                    uint32 v4_high_num = 5 [json_name = "v4-high-num"];
                                    uint32 v4_medium_num = 6 [json_name = "v4-medium-num"];
                                    uint32 v4_low_num = 7 [json_name = "v4-low-num"];
                                    uint32 v6_critical_num = 8 [json_name = "v6-critical-num"];
                                    uint32 v6_high_num = 9 [json_name = "v6-high-num"];
                                    uint32 v6_medium_num = 10 [json_name = "v6-medium-num"];
                                    uint32 v6_low_num = 11 [json_name = "v6-low-num"];
                                    uint32 v4_forward_num = 12 [json_name = "v4-forward-num"];
                                    uint32 v6_forward_num = 13 [json_name = "v6-forward-num"];
                                    uint32 v4_added2rm = 14 [json_name = "v4-added2rm"];
                                    uint32 v4_unadded2rm = 15 [json_name = "v4-unadded2rm"];
                                    uint32 v6_added2rm = 16 [json_name = "v6-added2rm"];
                                    uint32 v6_unadded2rm = 17 [json_name = "v6-unadded2rm"];
                                 }
                                 repeated RouteStatistics route_statistics = 1 [json_name = "route-statistics"];
                              }
                              RouteStatisticss route_statisticss = 14 [json_name = "route-statisticss"];
                              message DefaultRoute {
                                 enum Mode {
                                    INVALID_ENUM_VALUE_Mode = 0;
                                    Mode_ALWAYS = 1;
                                    Mode_MATCHX_DEFAULT = 2;
                                    Mode_MATCHX_ANY = 3;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 uint32 cost = 2 [json_name = "cost"];
                                 uint32 tag = 3 [json_name = "tag"];
                                 enum LevelType {
                                    INVALID_ENUM_VALUE_LevelType = 0;
                                    LevelType_LEVELX_1 = 1;
                                    LevelType_LEVELX_2 = 2;
                                    LevelType_LEVELX_1X_2 = 3;
                                 };
                                 LevelType level_type = 4 [json_name = "level-type"];
                                 bool avoid_learning = 5 [json_name = "avoid-learning"];
                                 message PolicyType_RoutePolicyName {
                                    string route_policy_name = 1 [json_name = "route-policy-name"];
                                 }
                                 message PolicyType_RouteFilterName {
                                    string route_filter_name = 1 [json_name = "route-filter-name"];
                                 }
                                 oneof PolicyType {
                                    PolicyType_RoutePolicyName policy_type_route_policy_name = 6 [json_name = "route-policy-name"];
                                    PolicyType_RouteFilterName policy_type_route_filter_name = 7 [json_name = "route-filter-name"];
                                 }
                              }
                              DefaultRoute default_route = 15 [json_name = "default-route"];
                              message SummaryPrefixs {
                                 message SummaryPrefix {
                                    string prefix = 1 [json_name = "prefix"];
                                    uint32 network_mask = 2 [json_name = "network-mask"];
                                    enum LevelType {
                                       INVALID_ENUM_VALUE_LevelType = 0;
                                       LevelType_LEVELX_1 = 1;
                                       LevelType_LEVELX_2 = 2;
                                       LevelType_LEVELX_1X_2 = 3;
                                    };
                                    LevelType level_type = 3 [json_name = "level-type"];
                                    uint32 tag = 4 [json_name = "tag"];
                                    bool gen_null0_route = 5 [json_name = "gen-null0-route"];
                                    bool avoid_feadback = 6 [json_name = "avoid-feadback"];
                                    uint32 cost = 7 [json_name = "cost"];
                                 }
                                 repeated SummaryPrefix summary_prefix = 1 [json_name = "summary-prefix"];
                              }
                              SummaryPrefixs summary_prefixs = 16 [json_name = "summary-prefixs"];
                              message RouteCounts {
                                 message RouteCount {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    uint32 learnt_num = 2 [json_name = "learnt-num"];
                                    uint32 critical_num = 3 [json_name = "critical-num"];
                                    uint32 high_num = 4 [json_name = "high-num"];
                                    uint32 medium_num = 5 [json_name = "medium-num"];
                                    uint32 low_num = 6 [json_name = "low-num"];
                                    uint32 forward_num = 7 [json_name = "forward-num"];
                                    uint32 added2rm = 8 [json_name = "added2rm"];
                                    uint32 unadded2rm = 9 [json_name = "unadded2rm"];
                                 }
                                 repeated RouteCount route_count = 1 [json_name = "route-count"];
                              }
                              RouteCounts route_counts = 17 [json_name = "route-counts"];
                              bool auto_cost_compatible = 18 [json_name = "auto-cost-compatible"];
                              uint32 cost_level1 = 19 [json_name = "cost-level1"];
                              uint32 cost_level2 = 20 [json_name = "cost-level2"];
                              message Ipv6ImportRoutes {
                                 message Ipv6ImportRoute {
                                    enum Level {
                                       INVALID_ENUM_VALUE_Level = 0;
                                       Level_LEVELX_1 = 1;
                                       Level_LEVELX_2 = 2;
                                       Level_LEVELX_1X_2 = 3;
                                    };
                                    Level level = 1 [json_name = "level"];
                                    string protocol = 2 [json_name = "protocol"];
                                    string address = 3 [json_name = "address"];
                                    uint32 mask_length = 4 [json_name = "mask-length"];
                                    uint32 internal_cost = 5 [json_name = "internal-cost"];
                                    string tag = 6 [json_name = "tag"];
                                    string avoid_loop_state = 7 [json_name = "avoid-loop-state"];
                                 }
                                 repeated Ipv6ImportRoute ipv6_import_route = 1 [json_name = "ipv6-import-route"];
                              }
                              Ipv6ImportRoutes ipv6_import_routes = 21 [json_name = "ipv6-import-routes"];
                           }
                           repeated Topology topology = 1 [json_name = "topology"];
                        }
                        Topologys topologys = 8 [json_name = "topologys"];
                        message Ipv4Routes {
                           message Ipv4Route {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string address = 2 [json_name = "address"];
                              uint32 mask = 3 [json_name = "mask"];
                              string next_hop = 4 [json_name = "next-hop"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string external_cost = 6 [json_name = "external-cost"];
                              string interface_name = 7 [json_name = "interface-name"];
                              string flags = 8 [json_name = "flags"];
                              string priority = 9 [json_name = "priority"];
                              string tag = 10 [json_name = "tag"];
                           }
                           repeated Ipv4Route ipv4_route = 1 [json_name = "ipv4-route"];
                        }
                        Ipv4Routes ipv4_routes = 9 [json_name = "ipv4-routes"];
                        message Ipv6Routes {
                           message Ipv6Route {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string address = 2 [json_name = "address"];
                              uint32 mask = 3 [json_name = "mask"];
                              string next_hop = 4 [json_name = "next-hop"];
                              string interface_name = 5 [json_name = "interface-name"];
                              uint32 cost = 6 [json_name = "cost"];
                              string flags = 7 [json_name = "flags"];
                              string priority = 8 [json_name = "priority"];
                              string tag = 9 [json_name = "tag"];
                              uint32 flex_algo_id = 10 [json_name = "flex-algo-id"];
                           }
                           repeated Ipv6Route ipv6_route = 1 [json_name = "ipv6-route"];
                        }
                        Ipv6Routes ipv6_routes = 10 [json_name = "ipv6-routes"];
                        bool apply_qppb = 11 [json_name = "apply-qppb"];
                        uint32 max_load_balancing = 12 [json_name = "max-load-balancing"];
                        bool auto_cost = 13 [json_name = "auto-cost"];
                        uint32 bandwidth = 14 [json_name = "bandwidth"];
                        uint32 cost_level1 = 15 [json_name = "cost-level1"];
                        uint32 cost_level2 = 16 [json_name = "cost-level2"];
                        bool bfd_bit_error = 17 [json_name = "bfd-bit-error"];
                        message AttachBit {
                           enum AdvControl {
                              AdvControl_NOX_TYPE = 0;
                              AdvControl_ALWAYS = 1;
                              AdvControl_NEVER = 2;
                           };
                           AdvControl adv_control = 1 [json_name = "adv-control"];
                           bool avoid_learn = 2 [json_name = "avoid-learn"];
                        }
                        AttachBit attach_bit = 18 [json_name = "attach-bit"];
                        message Preference {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType_RoutePolicy {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message PolicyType_RouteFilter {
                              string route_filter = 1 [json_name = "route-filter"];
                           }
                           oneof PolicyType {
                              PolicyType_RoutePolicy policy_type_route_policy = 2 [json_name = "route-policy"];
                              PolicyType_RouteFilter policy_type_route_filter = 3 [json_name = "route-filter"];
                           }
                        }
                        Preference preference = 19 [json_name = "preference"];
                        message ImportRoutes {
                           message ImportRoute {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_BGP = 6;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 process_id = 2 [json_name = "process-id"];
                              enum CostType {
                                 INVALID_ENUM_VALUE_CostType = 0;
                                 CostType_EXTERNAL = 1;
                                 CostType_INTERNAL = 2;
                              };
                              CostType cost_type = 3 [json_name = "cost-type"];
                              uint32 cost = 4 [json_name = "cost"];
                              uint32 tag = 5 [json_name = "tag"];
                              enum LevelType {
                                 INVALID_ENUM_VALUE_LevelType = 0;
                                 LevelType_LEVELX_1 = 1;
                                 LevelType_LEVELX_2 = 2;
                                 LevelType_LEVELX_1X_2 = 3;
                              };
                              LevelType level_type = 7 [json_name = "level-type"];
                              bool inherit_cost = 8 [json_name = "inherit-cost"];
                              bool permit_ibgp = 9 [json_name = "permit-ibgp"];
                              bool nosidflag = 10 [json_name = "nosidflag"];
                              message PolicyType_RoutePolicyName {
                                 string route_policy_name = 1 [json_name = "route-policy-name"];
                              }
                              message PolicyType_RouteFilterName {
                                 string route_filter_name = 1 [json_name = "route-filter-name"];
                                 string parameter = 2 [json_name = "parameter"];
                              }
                              oneof PolicyType {
                                 PolicyType_RoutePolicyName policy_type_route_policy_name = 11 [json_name = "route-policy-name"];
                                 PolicyType_RouteFilterName policy_type_route_filter_name = 12 [json_name = "route-filter-name"];
                              }
                              bool no_bier = 13 [json_name = "no-bier"];
                           }
                           repeated ImportRoute import_route = 1 [json_name = "import-route"];
                        }
                        ImportRoutes import_routes = 20 [json_name = "import-routes"];
                        message LeakRouteLevel2ToLevel1 {
                           uint32 tag = 1 [json_name = "tag"];
                           bool allow_filter = 3 [json_name = "allow-filter"];
                           bool allow_updown = 4 [json_name = "allow-updown"];
                           bool nosidflag = 5 [json_name = "nosidflag"];
                           message PolicyType_BasicAcl4 {
                              string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                           }
                           message PolicyType_BasicAcl6 {
                              string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                           }
                           message PolicyType_Ipv4Prefix {
                              string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                           }
                           message PolicyType_Ipv6Prefix {
                              string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                           }
                           message PolicyType_RoutePolicyName {
                              string route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           message PolicyType_RouteFilterName {
                              string route_filter_name = 1 [json_name = "route-filter-name"];
                           }
                           oneof PolicyType {
                              PolicyType_BasicAcl4 policy_type_basic_acl4 = 6 [json_name = "basic-acl4"];
                              PolicyType_BasicAcl6 policy_type_basic_acl6 = 7 [json_name = "basic-acl6"];
                              PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 8 [json_name = "ipv4-prefix"];
                              PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 9 [json_name = "ipv6-prefix"];
                              PolicyType_RoutePolicyName policy_type_route_policy_name = 10 [json_name = "route-policy-name"];
                              PolicyType_RouteFilterName policy_type_route_filter_name = 11 [json_name = "route-filter-name"];
                           }
                           bool no_bier = 12 [json_name = "no-bier"];
                        }
                        LeakRouteLevel2ToLevel1 leak_route_level2_to_level1 = 21 [json_name = "leak-route-level2-to-level1"];
                        message LeakRouteLevel1ToLevel2 {
                           bool enable = 1 [json_name = "enable"];
                           uint32 tag = 2 [json_name = "tag"];
                           bool allow_filter = 3 [json_name = "allow-filter"];
                           bool nosidflag = 4 [json_name = "nosidflag"];
                           message PolicyType_BasicAcl4 {
                              string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                           }
                           message PolicyType_BasicAcl6 {
                              string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                           }
                           message PolicyType_Ipv4Prefix {
                              string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                           }
                           message PolicyType_Ipv6Prefix {
                              string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                           }
                           message PolicyType_RoutePolicy {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message PolicyType_RouteFilter {
                              string route_filter = 1 [json_name = "route-filter"];
                           }
                           oneof PolicyType {
                              PolicyType_BasicAcl4 policy_type_basic_acl4 = 5 [json_name = "basic-acl4"];
                              PolicyType_BasicAcl6 policy_type_basic_acl6 = 6 [json_name = "basic-acl6"];
                              PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 7 [json_name = "ipv4-prefix"];
                              PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 8 [json_name = "ipv6-prefix"];
                              PolicyType_RoutePolicy policy_type_route_policy = 9 [json_name = "route-policy"];
                              PolicyType_RouteFilter policy_type_route_filter = 10 [json_name = "route-filter"];
                           }
                           bool no_bier = 11 [json_name = "no-bier"];
                        }
                        LeakRouteLevel1ToLevel2 leak_route_level1_to_level2 = 22 [json_name = "leak-route-level1-to-level2"];
                        message MplsLdpGlobal {
                           bool auto_flag = 1 [json_name = "auto-flag"];
                        }
                        MplsLdpGlobal mpls_ldp_global = 23 [json_name = "mpls-ldp-global"];
                        message Ipv4ImportRoutes {
                           message Ipv4ImportRoute {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string protocol = 2 [json_name = "protocol"];
                              string address = 3 [json_name = "address"];
                              uint32 mask = 4 [json_name = "mask"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string external_cost = 6 [json_name = "external-cost"];
                              string tag = 7 [json_name = "tag"];
                              string avoid_loop_state = 8 [json_name = "avoid-loop-state"];
                           }
                           repeated Ipv4ImportRoute ipv4_import_route = 1 [json_name = "ipv4-import-route"];
                        }
                        Ipv4ImportRoutes ipv4_import_routes = 24 [json_name = "ipv4-import-routes"];
                        message RouteStatisticss {
                           message RouteStatistics {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              uint32 v4_learnt_num = 2 [json_name = "v4-learnt-num"];
                              uint32 v6_learnt_num = 3 [json_name = "v6-learnt-num"];
                              uint32 v4_critical_num = 4 [json_name = "v4-critical-num"];
                              uint32 v4_high_num = 5 [json_name = "v4-high-num"];
                              uint32 v4_medium_num = 6 [json_name = "v4-medium-num"];
                              uint32 v4_low_num = 7 [json_name = "v4-low-num"];
                              uint32 v6_critical_num = 8 [json_name = "v6-critical-num"];
                              uint32 v6_high_num = 9 [json_name = "v6-high-num"];
                              uint32 v6_medium_num = 10 [json_name = "v6-medium-num"];
                              uint32 v6_low_num = 11 [json_name = "v6-low-num"];
                              uint32 v4_forward_num = 12 [json_name = "v4-forward-num"];
                              uint32 v6_forward_num = 13 [json_name = "v6-forward-num"];
                              uint32 v4_added2rm = 14 [json_name = "v4-added2rm"];
                              uint32 v4_unadded2rm = 15 [json_name = "v4-unadded2rm"];
                              uint32 v6_added2rm = 16 [json_name = "v6-added2rm"];
                              uint32 v6_unadded2rm = 17 [json_name = "v6-unadded2rm"];
                           }
                           repeated RouteStatistics route_statistics = 1 [json_name = "route-statistics"];
                        }
                        RouteStatisticss route_statisticss = 25 [json_name = "route-statisticss"];
                        message SegmentRouting {
                           bool enable = 1 [json_name = "enable"];
                           bool auto_adj_sid = 2 [json_name = "auto-adj-sid"];
                           bool adv_static_sid = 3 [json_name = "adv-static-sid"];
                           message Binding {
                              bool receive = 1 [json_name = "receive"];
                              bool advertise = 2 [json_name = "advertise"];
                           }
                           Binding binding = 4 [json_name = "binding"];
                           message LspTrigger {
                              enum Type {
                                 Type_HOST = 0;
                                 Type_NONE = 2;
                                 Type_IPX_PREFIX = 4;
                              };
                              Type type = 1 [json_name = "type"];
                              string ip_prefix = 2 [json_name = "ip-prefix"];
                           }
                           LspTrigger lsp_trigger = 5 [json_name = "lsp-trigger"];
                           message InterLevelProtect {
                              bool enable_level1 = 1 [json_name = "enable-level1"];
                              bool preferred = 2 [json_name = "preferred"];
                           }
                           InterLevelProtect inter_level_protect = 6 [json_name = "inter-level-protect"];
                           message SbfdSource {
                              string address = 1 [json_name = "address"];
                           }
                           SbfdSource sbfd_source = 7 [json_name = "sbfd-source"];
                           message LinkMsd {
                              bool adv_level1 = 1 [json_name = "adv-level1"];
                              bool adv_level2 = 2 [json_name = "adv-level2"];
                           }
                           LinkMsd link_msd = 8 [json_name = "link-msd"];
                        }
                        SegmentRouting segment_routing = 26 [json_name = "segment-routing"];
                        message Srv6 {
                           message Locators {
                              message Locator {
                                 string locator_name = 1 [json_name = "locator-name"];
                                 bool auto_sid = 2 [json_name = "auto-sid"];
                              }
                              repeated Locator locator = 1 [json_name = "locator"];
                           }
                           Locators locators = 1 [json_name = "locators"];
                           message AvoidMicroloop {
                              bool enable = 1 [json_name = "enable"];
                              uint32 delay_value = 2 [json_name = "delay-value"];
                           }
                           AvoidMicroloop avoid_microloop = 2 [json_name = "avoid-microloop"];
                           message InterLevelProtect {
                              bool enable_level1 = 1 [json_name = "enable-level1"];
                              bool preferred = 2 [json_name = "preferred"];
                           }
                           InterLevelProtect inter_level_protect = 3 [json_name = "inter-level-protect"];
                           message Compress {
                              bool enable = 1 [json_name = "enable"];
                           }
                           Compress compress = 4 [json_name = "compress"];
                           message EncapsulationMode {
                              enum Mode {
                                 Mode_NOX_SET = 0;
                                 Mode_INSERT = 1;
                                 Mode_ENCAPS = 2;
                              };
                              Mode mode = 1 [json_name = "mode"];
                           }
                           EncapsulationMode encapsulation_mode = 5 [json_name = "encapsulation-mode"];
                           message LocatorTag {
                              uint32 tag_value = 1 [json_name = "tag-value"];
                           }
                           LocatorTag locator_tag = 6 [json_name = "locator-tag"];
                           message AutoSidAdvertise {
                              bool no_flavor = 1 [json_name = "no-flavor"];
                              bool psp = 2 [json_name = "psp"];
                              bool psp_usp_usd = 3 [json_name = "psp-usp-usd"];
                              bool psp_usp_usd_coc = 4 [json_name = "psp-usp-usd-coc"];
                              bool coc = 5 [json_name = "coc"];
                              bool psp_coc = 6 [json_name = "psp-coc"];
                              bool psp_usp_coc_next = 7 [json_name = "psp-usp-coc-next"];
                              bool psp_usp_usd_coc_next = 8 [json_name = "psp-usp-usd-coc-next"];
                              bool psp_usd_next = 9 [json_name = "psp-usd-next"];
                           }
                           AutoSidAdvertise auto_sid_advertise = 7 [json_name = "auto-sid-advertise"];
                        }
                        Srv6 srv6 = 27 [json_name = "srv6"];
                        message DefaultRoute {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ALWAYS = 1;
                              Mode_MATCHX_DEFAULT = 2;
                              Mode_MATCHX_ANY = 3;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           uint32 cost = 2 [json_name = "cost"];
                           uint32 tag = 3 [json_name = "tag"];
                           enum LevelType {
                              INVALID_ENUM_VALUE_LevelType = 0;
                              LevelType_LEVELX_1 = 1;
                              LevelType_LEVELX_2 = 2;
                              LevelType_LEVELX_1X_2 = 3;
                           };
                           LevelType level_type = 4 [json_name = "level-type"];
                           bool avoid_learning = 5 [json_name = "avoid-learning"];
                           bool learning_avoid_loop = 6 [json_name = "learning-avoid-loop"];
                           message PolicyType_RoutePolicyName {
                              string route_policy_name = 1 [json_name = "route-policy-name"];
                           }
                           message PolicyType_RouteFilterName {
                              string route_filter_name = 1 [json_name = "route-filter-name"];
                           }
                           oneof PolicyType {
                              PolicyType_RoutePolicyName policy_type_route_policy_name = 7 [json_name = "route-policy-name"];
                              PolicyType_RouteFilterName policy_type_route_filter_name = 8 [json_name = "route-filter-name"];
                           }
                        }
                        DefaultRoute default_route = 28 [json_name = "default-route"];
                        message NexthopWeights {
                           message NexthopWeight {
                              string ip_address = 1 [json_name = "ip-address"];
                              uint32 weight = 2 [json_name = "weight"];
                           }
                           repeated NexthopWeight nexthop_weight = 1 [json_name = "nexthop-weight"];
                        }
                        NexthopWeights nexthop_weights = 29 [json_name = "nexthop-weights"];
                        message SummaryPrefixs {
                           message SummaryPrefix {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 network_mask = 2 [json_name = "network-mask"];
                              enum LevelType {
                                 INVALID_ENUM_VALUE_LevelType = 0;
                                 LevelType_LEVELX_1 = 1;
                                 LevelType_LEVELX_2 = 2;
                                 LevelType_LEVELX_1X_2 = 3;
                              };
                              LevelType level_type = 3 [json_name = "level-type"];
                              uint32 tag = 4 [json_name = "tag"];
                              bool gen_null0_route = 5 [json_name = "gen-null0-route"];
                              bool avoid_feadback = 6 [json_name = "avoid-feadback"];
                              uint32 cost = 7 [json_name = "cost"];
                              bool learning_avoid_loop = 8 [json_name = "learning-avoid-loop"];
                           }
                           repeated SummaryPrefix summary_prefix = 1 [json_name = "summary-prefix"];
                        }
                        SummaryPrefixs summary_prefixs = 30 [json_name = "summary-prefixs"];
                        message AdvertiseLinkAttributes {
                           bool enable = 1 [json_name = "enable"];
                        }
                        AdvertiseLinkAttributes advertise_link_attributes = 31 [json_name = "advertise-link-attributes"];
                        message FilterImport {
                           message PolicyType_BasicAcl4 {
                              string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                           }
                           message PolicyType_BasicAcl6 {
                              string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                           }
                           message PolicyType_Ipv4Prefix {
                              string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                           }
                           message PolicyType_Ipv6Prefix {
                              string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                           }
                           message PolicyType_RoutePolicy {
                              string route_policy = 1 [json_name = "route-policy"];
                           }
                           message PolicyType_RouteFilter {
                              string route_filter = 1 [json_name = "route-filter"];
                           }
                           oneof PolicyType {
                              PolicyType_BasicAcl4 policy_type_basic_acl4 = 1 [json_name = "basic-acl4"];
                              PolicyType_BasicAcl6 policy_type_basic_acl6 = 2 [json_name = "basic-acl6"];
                              PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 3 [json_name = "ipv4-prefix"];
                              PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 4 [json_name = "ipv6-prefix"];
                              PolicyType_RoutePolicy policy_type_route_policy = 5 [json_name = "route-policy"];
                              PolicyType_RouteFilter policy_type_route_filter = 6 [json_name = "route-filter"];
                           }
                        }
                        FilterImport filter_import = 32 [json_name = "filter-import"];
                        message FilterExports {
                           message FilterExport {
                              enum Protocol {
                                 INVALID_ENUM_VALUE_Protocol = 0;
                                 Protocol_DIRECT = 1;
                                 Protocol_OSPF = 2;
                                 Protocol_ISIS = 3;
                                 Protocol_STATIC = 4;
                                 Protocol_RIP = 5;
                                 Protocol_BGP = 6;
                                 Protocol_OSPFV3 = 7;
                                 Protocol_RIPNG = 8;
                                 Protocol_ALL = 9;
                                 Protocol_UNR = 11;
                              };
                              Protocol protocol = 1 [json_name = "protocol"];
                              uint32 protocol_id = 2 [json_name = "protocol-id"];
                              message PolicyType_BasicAcl4 {
                                 string name_or_num_v4 = 1 [json_name = "name-or-num-v4"];
                              }
                              message PolicyType_BasicAcl6 {
                                 string name_or_num_v6 = 1 [json_name = "name-or-num-v6"];
                              }
                              message PolicyType_Ipv4Prefix {
                                 string ipv4_prefix = 1 [json_name = "ipv4-prefix"];
                              }
                              message PolicyType_Ipv6Prefix {
                                 string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                              }
                              message PolicyType_RoutePolicy {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_RouteFilter {
                                 string route_filter = 1 [json_name = "route-filter"];
                              }
                              oneof PolicyType {
                                 PolicyType_BasicAcl4 policy_type_basic_acl4 = 3 [json_name = "basic-acl4"];
                                 PolicyType_BasicAcl6 policy_type_basic_acl6 = 4 [json_name = "basic-acl6"];
                                 PolicyType_Ipv4Prefix policy_type_ipv4_prefix = 5 [json_name = "ipv4-prefix"];
                                 PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 6 [json_name = "ipv6-prefix"];
                                 PolicyType_RoutePolicy policy_type_route_policy = 7 [json_name = "route-policy"];
                                 PolicyType_RouteFilter policy_type_route_filter = 8 [json_name = "route-filter"];
                              }
                           }
                           repeated FilterExport filter_export = 1 [json_name = "filter-export"];
                        }
                        FilterExports filter_exports = 33 [json_name = "filter-exports"];
                        message RouteCounts {
                           message RouteCount {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              uint32 learnt_num = 2 [json_name = "learnt-num"];
                              uint32 critical_num = 3 [json_name = "critical-num"];
                              uint32 high_num = 4 [json_name = "high-num"];
                              uint32 medium_num = 5 [json_name = "medium-num"];
                              uint32 low_num = 6 [json_name = "low-num"];
                              uint32 forward_num = 7 [json_name = "forward-num"];
                              uint32 added2rm = 8 [json_name = "added2rm"];
                              uint32 unadded2rm = 9 [json_name = "unadded2rm"];
                           }
                           repeated RouteCount route_count = 1 [json_name = "route-count"];
                        }
                        RouteCounts route_counts = 34 [json_name = "route-counts"];
                        bool auto_cost_compatible = 35 [json_name = "auto-cost-compatible"];
                        uint32 default_tag_level1 = 36 [json_name = "default-tag-level1"];
                        uint32 default_tag_level2 = 37 [json_name = "default-tag-level2"];
                        message DelayNormalize {
                           uint32 interval = 1 [json_name = "interval"];
                           uint32 offset = 2 [json_name = "offset"];
                        }
                        DelayNormalize delay_normalize = 38 [json_name = "delay-normalize"];
                        message Ipv6ImportRoutes {
                           message Ipv6ImportRoute {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string protocol = 2 [json_name = "protocol"];
                              string address = 3 [json_name = "address"];
                              uint32 mask_length = 4 [json_name = "mask-length"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string tag = 6 [json_name = "tag"];
                              string avoid_loop_state = 7 [json_name = "avoid-loop-state"];
                           }
                           repeated Ipv6ImportRoute ipv6_import_route = 1 [json_name = "ipv6-import-route"];
                        }
                        Ipv6ImportRoutes ipv6_import_routes = 39 [json_name = "ipv6-import-routes"];
                        message MigpRoutes {
                           message MigpRoute {
                              enum Level {
                                 INVALID_ENUM_VALUE_Level = 0;
                                 Level_LEVELX_1 = 1;
                                 Level_LEVELX_2 = 2;
                                 Level_LEVELX_1X_2 = 3;
                              };
                              Level level = 1 [json_name = "level"];
                              string address = 2 [json_name = "address"];
                              uint32 mask_length = 3 [json_name = "mask-length"];
                              string next_hop = 4 [json_name = "next-hop"];
                              uint32 internal_cost = 5 [json_name = "internal-cost"];
                              string external_cost = 6 [json_name = "external-cost"];
                              string interface_name = 7 [json_name = "interface-name"];
                              string flags = 8 [json_name = "flags"];
                           }
                           repeated MigpRoute migp_route = 1 [json_name = "migp-route"];
                        }
                        MigpRoutes migp_routes = 40 [json_name = "migp-routes"];
                     }
                     repeated Af af = 1 [json_name = "af"];
                  }
                  Afs afs = 12 [json_name = "afs"];
                  message AvoidMicroLoop {
                     bool frr_enable = 1 [json_name = "frr-enable"];
                     uint32 frr_rib_update_delay = 2 [json_name = "frr-rib-update-delay"];
                     bool sr_enable = 3 [json_name = "sr-enable"];
                     uint32 sr_rib_update_delay = 4 [json_name = "sr-rib-update-delay"];
                     bool te_tunnel_enable = 5 [json_name = "te-tunnel-enable"];
                     uint32 te_tunnel_delay = 6 [json_name = "te-tunnel-delay"];
                     bool sr_enable_flag = 7 [json_name = "sr-enable-flag"];
                     uint32 sr_new_update_delay = 8 [json_name = "sr-new-update-delay"];
                  }
                  AvoidMicroLoop avoid_micro_loop = 13 [json_name = "avoid-micro-loop"];
                  message Peers {
                     message Peer {
                        string system_id = 1 [json_name = "system-id"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                        string circuit_id = 3 [json_name = "circuit-id"];
                        string interface_name = 4 [json_name = "interface-name"];
                        string host_name = 5 [json_name = "host-name"];
                        enum Status {
                           INVALID_ENUM_VALUE_Status = 0;
                           Status_INIT = 1;
                           Status_UP = 2;
                        };
                        Status status = 6 [json_name = "status"];
                        uint32 hold_time = 7 [json_name = "hold-time"];
                        string priority = 8 [json_name = "priority"];
                        string area_addr = 9 [json_name = "area-addr"];
                        string up_time = 10 [json_name = "up-time"];
                        string up_time_stamp = 11 [json_name = "up-time-stamp"];
                        string adj_mt_id = 12 [json_name = "adj-mt-id"];
                        string local_mt_id = 13 [json_name = "local-mt-id"];
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_IPV4 = 1;
                           Protocol_IPV6 = 2;
                           Protocol_IPV4X_IPV6 = 3;
                           Protocol_VIRTUALX_CLUSTERX_ACCESS = 4;
                           Protocol_IPV4X_VIRTUALX_CLUSTERX_ACCESS = 5;
                           Protocol_IPV6X_VIRTUALX_CLUSTERX_ACCESS = 6;
                           Protocol_IPV4X_IPV6X_VIRTUALX_CLUSTERX_ACCESS = 7;
                           Protocol_VIRTUALX_ACCESS = 8;
                           Protocol_IPV4X_VIRTUALX_ACCESS = 9;
                           Protocol_IPV6X_VIRTUALX_ACCESS = 10;
                           Protocol_IPV4X_IPV6X_VIRTUALX_ACCESS = 11;
                        };
                        Protocol protocol = 14 [json_name = "protocol"];
                        string restart_capable = 15 [json_name = "restart-capable"];
                        string suppressed_adj = 16 [json_name = "suppressed-adj"];
                        string adj_sid = 17 [json_name = "adj-sid"];
                        string ipv6_link_local_addr = 18 [json_name = "ipv6-link-local-addr"];
                        message Ipv4Addrs {
                           message Ipv4Addr {
                              string addr = 1 [json_name = "addr"];
                           }
                           repeated Ipv4Addr ipv4_addr = 1 [json_name = "ipv4-addr"];
                        }
                        Ipv4Addrs ipv4_addrs = 19 [json_name = "ipv4-addrs"];
                        message Ipv6GlobalAddrs {
                           message Ipv6GlobalAddr {
                              string addr = 1 [json_name = "addr"];
                           }
                           repeated Ipv6GlobalAddr ipv6_global_addr = 1 [json_name = "ipv6-global-addr"];
                        }
                        Ipv6GlobalAddrs ipv6_global_addrs = 20 [json_name = "ipv6-global-addrs"];
                        message Endxs {
                           message Endx {
                              string sid = 1 [json_name = "sid"];
                              uint32 mask_length = 2 [json_name = "mask-length"];
                              enum Type {
                                 Type_NOX_FLAVOR = 0;
                                 Type_PSP = 1;
                                 Type_PSPX_USP = 3;
                                 Type_PSPX_USPX_USD = 7;
                                 Type_COC = 8;
                                 Type_PSPX_COC = 9;
                                 Type_PSPX_USPX_USDX_COC = 15;
                                 Type_PSPX_USDX_NEXT = 21;
                                 Type_PSPX_USPX_COCX_NEXT = 27;
                                 Type_PSPX_USPX_USDX_COCX_NEXT = 31;
                              };
                              Type type = 3 [json_name = "type"];
                           }
                           repeated Endx endx = 1 [json_name = "endx"];
                        }
                        Endxs endxs = 21 [json_name = "endxs"];
                        string ipv6_adj_sid = 22 [json_name = "ipv6-adj-sid"];
                        message BfdIncrCosts {
                           message BfdIncrCost {
                              uint32 mt_id = 1 [json_name = "mt-id"];
                              bool incr_cost_state = 2 [json_name = "incr-cost-state"];
                              uint32 wtr_remain = 3 [json_name = "wtr-remain"];
                           }
                           repeated BfdIncrCost bfd_incr_cost = 1 [json_name = "bfd-incr-cost"];
                        }
                        BfdIncrCosts bfd_incr_costs = 23 [json_name = "bfd-incr-costs"];
                     }
                     repeated Peer peer = 1 [json_name = "peer"];
                  }
                  Peers peers = 14 [json_name = "peers"];
                  message Lsdbs {
                     message Lsdb {
                        enum LspLevel {
                           INVALID_ENUM_VALUE_LspLevel = 0;
                           LspLevel_LEVELX_1 = 1;
                           LspLevel_LEVELX_2 = 2;
                           LspLevel_LEVELX_1X_2 = 3;
                        };
                        LspLevel lsp_level = 1 [json_name = "lsp-level"];
                        string lsp_id = 2 [json_name = "lsp-id"];
                        string seqence_number = 3 [json_name = "seqence-number"];
                        string check_sum = 4 [json_name = "check-sum"];
                        uint32 lsp_length = 5 [json_name = "lsp-length"];
                        enum Att {
                           Att_DISABLE = 0;
                           Att_ENABLE = 1;
                        };
                        Att att = 6 [json_name = "att"];
                        enum Partition {
                           Partition_DISABLE = 0;
                           Partition_ENABLE = 1;
                        };
                        Partition partition = 7 [json_name = "partition"];
                        enum Overload {
                           Overload_DISABLE = 0;
                           Overload_ENABLE = 1;
                        };
                        Overload overload = 8 [json_name = "overload"];
                        string hold_time = 9 [json_name = "hold-time"];
                        bool local_lsp = 10 [json_name = "local-lsp"];
                     }
                     repeated Lsdb lsdb = 1 [json_name = "lsdb"];
                  }
                  Lsdbs lsdbs = 15 [json_name = "lsdbs"];
                  uint32 multi_iid = 16 [json_name = "multi-iid"];
                  bool shutdown = 17 [json_name = "shutdown"];
                  bool relax_spf_limit = 18 [json_name = "relax-spf-limit"];
                  bool direct_inherit = 19 [json_name = "direct-inherit"];
                  bool adv_one_intf_addr = 20 [json_name = "adv-one-intf-addr"];
                  message LspFragmentsExtend {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_MODEX_1 = 1;
                        Mode_MODEX_2 = 2;
                     };
                     Mode mode = 3 [json_name = "mode"];
                  }
                  LspFragmentsExtend lsp_fragments_extend = 21 [json_name = "lsp-fragments-extend"];
                  message PoiTlv {
                     bool enable = 1 [json_name = "enable"];
                     bool always = 2 [json_name = "always"];
                  }
                  PoiTlv poi_tlv = 22 [json_name = "poi-tlv"];
                  message LsdbLimit {
                     bool enable = 1 [json_name = "enable"];
                     uint32 max_number = 2 [json_name = "max-number"];
                     uint32 threshold_upper = 3 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 4 [json_name = "threshold-lower"];
                  }
                  LsdbLimit lsdb_limit = 23 [json_name = "lsdb-limit"];
                  message SuppressFlapping {
                     message Peer {
                        bool enable = 1 [json_name = "enable"];
                     }
                     Peer peer = 1 [json_name = "peer"];
                     message LspFlood {
                        message LspFlood9_Disable {
                           bool disable10 = 1 [json_name = "disable"];
                        }
                        message LspFlood9_Timer {
                           uint32 interval = 1 [json_name = "interval"];
                           uint32 threshold = 2 [json_name = "threshold"];
                        }
                        oneof LspFlood9 {
                           LspFlood9_Disable lsp_flood_disable = 1 [json_name = "disable"];
                           LspFlood9_Timer lsp_flood_timer = 2 [json_name = "timer"];
                        }
                     }
                     LspFlood lsp_flood = 2 [json_name = "lsp-flood"];
                     message RouteCalculate {
                        message RouteCalculate9_Disable {
                           bool disable10 = 1 [json_name = "disable"];
                        }
                        message RouteCalculate9_Timer {
                           uint32 interval = 1 [json_name = "interval"];
                           uint32 threshold = 2 [json_name = "threshold"];
                        }
                        oneof RouteCalculate9 {
                           RouteCalculate9_Disable route_calculate_disable = 1 [json_name = "disable"];
                           RouteCalculate9_Timer route_calculate_timer = 2 [json_name = "timer"];
                        }
                     }
                     RouteCalculate route_calculate = 3 [json_name = "route-calculate"];
                     message LspGeneration {
                        message LspGeneration9_Disable {
                           bool disable10 = 1 [json_name = "disable"];
                        }
                        message LspGeneration9_Timer {
                           uint32 interval = 1 [json_name = "interval"];
                           uint32 threshold = 2 [json_name = "threshold"];
                        }
                        oneof LspGeneration9 {
                           LspGeneration9_Disable lsp_generation_disable = 1 [json_name = "disable"];
                           LspGeneration9_Timer lsp_generation_timer = 2 [json_name = "timer"];
                        }
                     }
                     LspGeneration lsp_generation = 4 [json_name = "lsp-generation"];
                  }
                  SuppressFlapping suppress_flapping = 24 [json_name = "suppress-flapping"];
                  message LspLifetime {
                     bool enable = 1 [json_name = "enable"];
                     message Refresh_MaxAge {
                        bool max_age = 1 [json_name = "max-age"];
                     }
                     message Refresh_Value {
                        uint32 value9 = 1 [json_name = "value"];
                     }
                     oneof Refresh {
                        Refresh_MaxAge refresh_max_age = 3 [json_name = "max-age"];
                        Refresh_Value refresh_value = 4 [json_name = "value"];
                     }
                  }
                  LspLifetime lsp_lifetime = 25 [json_name = "lsp-lifetime"];
                  message BgpLs {
                     bool enable_level1 = 1 [json_name = "enable-level1"];
                     bool enable_level2 = 2 [json_name = "enable-level2"];
                     uint64 identifier = 3 [json_name = "identifier"];
                     bool enable_ipv6_level1 = 4 [json_name = "enable-ipv6-level1"];
                     bool enable_ipv6_level2 = 5 [json_name = "enable-ipv6-level2"];
                     bool ignore_level2_leak_level1 = 6 [json_name = "ignore-level2-leak-level1"];
                     bool exclude_ipv4_prefix = 7 [json_name = "exclude-ipv4-prefix"];
                     bool exclude_ipv6_prefix = 8 [json_name = "exclude-ipv6-prefix"];
                  }
                  BgpLs bgp_ls = 26 [json_name = "bgp-ls"];
                  message ExternAbility {
                     bool adj_strict_check = 1 [json_name = "adj-strict-check"];
                     enum EcmpPrefer {
                        EcmpPrefer_NONE = 0;
                        EcmpPrefer_TEX_TUNNEL = 2;
                        EcmpPrefer_INTACT = 3;
                     };
                     EcmpPrefer ecmp_prefer = 2 [json_name = "ecmp-prefer"];
                     bool opt_checksum = 3 [json_name = "opt-checksum"];
                     bool virtual_cluster = 4 [json_name = "virtual-cluster"];
                     bool virtual_access = 5 [json_name = "virtual-access"];
                  }
                  ExternAbility extern_ability = 27 [json_name = "extern-ability"];
                  message CircDatas {
                     message CircData {
                        string if_name = 1 [json_name = "if-name"];
                        uint32 v4_cost_level_1 = 2 [json_name = "v4-cost-level-1"];
                        uint32 v4_cost_level_2 = 3 [json_name = "v4-cost-level-2"];
                        uint32 v6_cost_level_1 = 4 [json_name = "v6-cost-level-1"];
                        uint32 v6_cost_level_2 = 5 [json_name = "v6-cost-level-2"];
                        message MinMaxUnidirectionalLinkDelays {
                           message MinMaxUnidirectionalLinkDelay {
                              enum AfType {
                                 INVALID_ENUM_VALUE_AfType = 0;
                                 AfType_AFIPV4 = 1;
                                 AfType_AFIPV6 = 2;
                              };
                              AfType af_type = 1 [json_name = "af-type"];
                              bool level_1_status = 2 [json_name = "level-1-status"];
                              uint32 use_min_delay_level_1 = 3 [json_name = "use-min-delay-level-1"];
                              uint32 use_max_delay_level_1 = 4 [json_name = "use-max-delay-level-1"];
                              uint32 suppress_min_delay_level_1 = 5 [json_name = "suppress-min-delay-level-1"];
                              uint32 suppress_max_delay_level_1 = 6 [json_name = "suppress-max-delay-level-1"];
                              uint32 remain_time_level_1 = 7 [json_name = "remain-time-level-1"];
                              bool level_2_status = 8 [json_name = "level-2-status"];
                              uint32 use_min_delay_level_2 = 9 [json_name = "use-min-delay-level-2"];
                              uint32 use_max_delay_level_2 = 10 [json_name = "use-max-delay-level-2"];
                              uint32 suppress_min_delay_level_2 = 11 [json_name = "suppress-min-delay-level-2"];
                              uint32 suppress_max_delay_level_2 = 12 [json_name = "suppress-max-delay-level-2"];
                              uint32 remain_time_level_2 = 13 [json_name = "remain-time-level-2"];
                              uint32 receive_min_delay = 14 [json_name = "receive-min-delay"];
                              uint32 receive_max_delay = 15 [json_name = "receive-max-delay"];
                              uint32 suppress_timer = 16 [json_name = "suppress-timer"];
                           }
                           repeated MinMaxUnidirectionalLinkDelay min_max_unidirectional_link_delay = 1 [json_name = "min-max-unidirectional-link-delay"];
                        }
                        MinMaxUnidirectionalLinkDelays min_max_unidirectional_link_delays = 6 [json_name = "min-max-unidirectional-link-delays"];
                        message UnidirectionalLinkLosses {
                           message UnidirectionalLinkLoss {
                              enum AfType {
                                 INVALID_ENUM_VALUE_AfType = 0;
                                 AfType_AFIPV4 = 1;
                                 AfType_AFIPV6 = 2;
                              };
                              AfType af_type = 1 [json_name = "af-type"];
                              bool level_1_status = 2 [json_name = "level-1-status"];
                              bool level_2_status = 3 [json_name = "level-2-status"];
                              uint32 suppress_timer = 4 [json_name = "suppress-timer"];
                              uint32 remain_time = 5 [json_name = "remain-time"];
                              uint32 use_link_loss = 6 [json_name = "use-link-loss"];
                              uint32 suppress_link_loss = 7 [json_name = "suppress-link-loss"];
                              uint32 receive_link_loss = 8 [json_name = "receive-link-loss"];
                           }
                           repeated UnidirectionalLinkLoss unidirectional_link_loss = 1 [json_name = "unidirectional-link-loss"];
                        }
                        UnidirectionalLinkLosses unidirectional_link_losses = 7 [json_name = "unidirectional-link-losses"];
                     }
                     repeated CircData circ_data = 1 [json_name = "circ-data"];
                  }
                  CircDatas circ_datas = 28 [json_name = "circ-datas"];
                  message BfdSessions {
                     message BfdSession {
                        enum PeerLevel {
                           INVALID_ENUM_VALUE_PeerLevel = 0;
                           PeerLevel_LEVELX_1 = 1;
                           PeerLevel_LEVELX_2 = 2;
                           PeerLevel_LEVELX_1X_2 = 3;
                        };
                        PeerLevel peer_level = 1 [json_name = "peer-level"];
                        string peer_ip = 2 [json_name = "peer-ip"];
                        string local_ip = 3 [json_name = "local-ip"];
                        enum State {
                           State_UNKNOWN = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 4 [json_name = "state"];
                        uint32 min_tx = 5 [json_name = "min-tx"];
                        uint32 min_rx = 6 [json_name = "min-rx"];
                        uint32 mul_number = 7 [json_name = "mul-number"];
                        string system_id = 8 [json_name = "system-id"];
                        string circuit_name = 9 [json_name = "circuit-name"];
                        uint32 detect_interval = 10 [json_name = "detect-interval"];
                        uint32 threshold = 11 [json_name = "threshold"];
                        uint32 incr_cost = 12 [json_name = "incr-cost"];
                        uint32 wtr_value = 13 [json_name = "wtr-value"];
                     }
                     repeated BfdSession bfd_session = 1 [json_name = "bfd-session"];
                  }
                  BfdSessions bfd_sessions = 29 [json_name = "bfd-sessions"];
                  message Srgbs {
                     message Srgb {
                        uint32 lower_bound = 1 [json_name = "lower-bound"];
                        uint32 upper_bound = 2 [json_name = "upper-bound"];
                     }
                     repeated Srgb srgb = 1 [json_name = "srgb"];
                  }
                  Srgbs srgbs = 30 [json_name = "srgbs"];
                  string description = 31 [json_name = "description"];
                  message TeSetSubtlv {
                     uint32 bw_constraint = 1 [json_name = "bw-constraint"];
                     uint32 lo_multiplier = 2 [json_name = "lo-multiplier"];
                     uint32 unresv_bw_sub_pool = 3 [json_name = "unresv-bw-sub-pool"];
                  }
                  TeSetSubtlv te_set_subtlv = 32 [json_name = "te-set-subtlv"];
                  message Bier {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Bier bier = 33 [json_name = "bier"];
                  message LocalMt {
                     bool enable = 1 [json_name = "enable"];
                     message PolicyType_BasicAcl {
                        string name_or_num = 1 [json_name = "name-or-num"];
                     }
                     message PolicyType_IpPrefix {
                        string ip_prefix = 1 [json_name = "ip-prefix"];
                     }
                     oneof PolicyType {
                        PolicyType_BasicAcl policy_type_basic_acl = 2 [json_name = "basic-acl"];
                        PolicyType_IpPrefix policy_type_ip_prefix = 3 [json_name = "ip-prefix"];
                     }
                  }
                  LocalMt local_mt = 34 [json_name = "local-mt"];
                  message VirtualSystems {
                     message VirtualSystem {
                        string id = 1 [json_name = "id"];
                     }
                     repeated VirtualSystem virtual_system = 1 [json_name = "virtual-system"];
                  }
                  VirtualSystems virtual_systems = 35 [json_name = "virtual-systems"];
                  message HostNames {
                     message HostName {
                        string system_id = 1 [json_name = "system-id"];
                        string value = 2 [json_name = "value"];
                     }
                     repeated HostName host_name = 1 [json_name = "host-name"];
                  }
                  HostNames host_names = 36 [json_name = "host-names"];
                  message LinkGroups {
                     message LinkGroup {
                        string name = 1 [json_name = "name"];
                        uint32 min_members = 2 [json_name = "min-members"];
                        uint32 revert_members = 3 [json_name = "revert-members"];
                        uint32 cost_offset = 4 [json_name = "cost-offset"];
                     }
                     repeated LinkGroup link_group = 1 [json_name = "link-group"];
                  }
                  LinkGroups link_groups = 37 [json_name = "link-groups"];
                  message IntelligentConvergence {
                     bool enable = 1 [json_name = "enable"];
                  }
                  IntelligentConvergence intelligent_convergence = 38 [json_name = "intelligent-convergence"];
                  bool bfd_session_check = 39 [json_name = "bfd-session-check"];
                  message TlvFragments {
                     bool disable = 1 [json_name = "disable"];
                  }
                  TlvFragments tlv_fragments = 40 [json_name = "tlv-fragments"];
                  message FadBindings {
                     message FadBinding {
                        uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                     }
                     repeated FadBinding fad_binding = 1 [json_name = "fad-binding"];
                  }
                  FadBindings fad_bindings = 41 [json_name = "fad-bindings"];
                  message FlexAlgoStates {
                     message FlexAlgoState {
                        uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 2 [json_name = "level"];
                        string system_id = 3 [json_name = "system-id"];
                        uint32 priority = 4 [json_name = "priority"];
                        enum MetricType {
                           MetricType_IGP = 0;
                           MetricType_LINKX_DELAY = 1;
                           MetricType_TE = 2;
                        };
                        MetricType metric_type = 5 [json_name = "metric-type"];
                        string definition_flags = 6 [json_name = "definition-flags"];
                        string exclude_admin_group = 7 [json_name = "exclude-admin-group"];
                        string include_any_admin_group = 8 [json_name = "include-any-admin-group"];
                        string include_all_admin_group = 9 [json_name = "include-all-admin-group"];
                        string support = 10 [json_name = "support"];
                        uint32 exclude_max_link_loss = 11 [json_name = "exclude-max-link-loss"];
                     }
                     repeated FlexAlgoState flex_algo_state = 1 [json_name = "flex-algo-state"];
                  }
                  FlexAlgoStates flex_algo_states = 42 [json_name = "flex-algo-states"];
                  message LspStatisticss {
                     message LspStatistics {
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 1 [json_name = "level"];
                        uint32 total_num = 2 [json_name = "total-num"];
                        uint32 zero_frag_num = 3 [json_name = "zero-frag-num"];
                        uint32 zero_holdtime_num = 4 [json_name = "zero-holdtime-num"];
                        uint32 zero_frag_holdtime_num = 5 [json_name = "zero-frag-holdtime-num"];
                        uint32 zero_sequence_num = 6 [json_name = "zero-sequence-num"];
                        message Sources {
                           message Source {
                              string src_id = 1 [json_name = "src-id"];
                              uint32 used_frag_num = 2 [json_name = "used-frag-num"];
                           }
                           repeated Source source = 1 [json_name = "source"];
                        }
                        Sources sources = 7 [json_name = "sources"];
                     }
                     repeated LspStatistics lsp_statistics = 1 [json_name = "lsp-statistics"];
                  }
                  LspStatisticss lsp_statisticss = 43 [json_name = "lsp-statisticss"];
                  message NameTables {
                     message NameTable {
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 1 [json_name = "level"];
                        string system_id = 2 [json_name = "system-id"];
                        enum HostType {
                           INVALID_ENUM_VALUE_HostType = 0;
                           HostType_STATIC = 1;
                           HostType_DYNAMIC = 2;
                        };
                        HostType host_type = 3 [json_name = "host-type"];
                        string host_name = 4 [json_name = "host-name"];
                     }
                     repeated NameTable name_table = 1 [json_name = "name-table"];
                  }
                  NameTables name_tables = 44 [json_name = "name-tables"];
                  message VirtualAccesss {
                     message VirtualAccess {
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 1 [json_name = "level"];
                        string lsp_id = 2 [json_name = "lsp-id"];
                        string router_id = 3 [json_name = "router-id"];
                        string ap_id = 4 [json_name = "ap-id"];
                        string role = 5 [json_name = "role"];
                     }
                     repeated VirtualAccess virtual_access = 1 [json_name = "virtual-access"];
                  }
                  VirtualAccesss virtual_accesss = 45 [json_name = "virtual-accesss"];
                  message NameMappings {
                     message NameMapping {
                        enum Level {
                           INVALID_ENUM_VALUE_Level = 0;
                           Level_LEVELX_1 = 1;
                           Level_LEVELX_2 = 2;
                           Level_LEVELX_1X_2 = 3;
                        };
                        Level level = 1 [json_name = "level"];
                        string system_id = 2 [json_name = "system-id"];
                        enum HostType {
                           INVALID_ENUM_VALUE_HostType = 0;
                           HostType_STATIC = 1;
                           HostType_DYNAMIC = 2;
                        };
                        HostType host_type = 3 [json_name = "host-type"];
                        string host_name = 4 [json_name = "host-name"];
                     }
                     repeated NameMapping name_mapping = 1 [json_name = "name-mapping"];
                  }
                  NameMappings name_mappings = 46 [json_name = "name-mappings"];
                  message ApplyLinkCost {
                     bool enable = 1 [json_name = "enable"];
                  }
                  ApplyLinkCost apply_link_cost = 47 [json_name = "apply-link-cost"];
                  message BfdBitErrorSessions {
                     message BfdBitErrorSession {
                        enum PeerLevel {
                           INVALID_ENUM_VALUE_PeerLevel = 0;
                           PeerLevel_LEVELX_1 = 1;
                           PeerLevel_LEVELX_2 = 2;
                           PeerLevel_LEVELX_1X_2 = 3;
                        };
                        PeerLevel peer_level = 1 [json_name = "peer-level"];
                        string peer_ip = 2 [json_name = "peer-ip"];
                        string local_ip = 3 [json_name = "local-ip"];
                        enum State {
                           State_INIT = 0;
                           State_PENDX_ADDACK = 1;
                           State_PENDX_DELACK = 2;
                           State_RUN = 3;
                           State_MAX = 4;
                        };
                        State state = 4 [json_name = "state"];
                        string system_id = 5 [json_name = "system-id"];
                        string interface_name = 6 [json_name = "interface-name"];
                     }
                     repeated BfdBitErrorSession bfd_bit_error_session = 1 [json_name = "bfd-bit-error-session"];
                  }
                  BfdBitErrorSessions bfd_bit_error_sessions = 48 [json_name = "bfd-bit-error-sessions"];
                  bool ipv4_prefix_ipv6_nexthop = 49 [json_name = "ipv4-prefix-ipv6-nexthop"];
                  message AdvAppLinkAttr {
                     bool lfa = 1 [json_name = "lfa"];
                  }
                  AdvAppLinkAttr adv_app_link_attr = 50 [json_name = "adv-app-link-attr"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
         }
         Isis isis = 12 [json_name = "isis"];
         string sys_router_id = 13 [json_name = "sys-router-id"];
         uint32 vrf_id = 14 [json_name = "vrf-id"];
         message SegmentRouting {
            bool enable = 1 [json_name = "enable"];
            enum TunnelPrefer {
               INVALID_ENUM_VALUE_TunnelPrefer = 0;
               TunnelPrefer_LDP = 1;
               TunnelPrefer_SRX_BE = 2;
            };
            TunnelPrefer tunnel_prefer = 2 [json_name = "tunnel-prefer"];
            message Bfds {
               message Bfd {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_SEAMLESSX_BFD = 1;
                     Type_BFD = 2;
                  };
                  Type type = 1 [json_name = "type"];
                  enum ModeType {
                     INVALID_ENUM_VALUE_ModeType = 0;
                     ModeType_TUNNEL = 1;
                  };
                  ModeType mode_type = 2 [json_name = "mode-type"];
                  string ip_prefix = 3 [json_name = "ip-prefix"];
                  uint32 min_rx = 4 [json_name = "min-rx"];
                  uint32 min_tx = 5 [json_name = "min-tx"];
                  uint32 detect_multiplier = 6 [json_name = "detect-multiplier"];
                  bool effect_sr_lsp = 7 [json_name = "effect-sr-lsp"];
                  bool nil_fec = 8 [json_name = "nil-fec"];
               }
               repeated Bfd bfd = 1 [json_name = "bfd"];
            }
            Bfds bfds = 3 [json_name = "bfds"];
            message TrafficStats {
               enum Mode {
                  Mode_NONE = 0;
                  Mode_HOST = 1;
                  Mode_IPX_PREFIX = 2;
               };
               Mode mode = 1 [json_name = "mode"];
               string prefix_name = 2 [json_name = "prefix-name"];
            }
            TrafficStats traffic_stats = 4 [json_name = "traffic-stats"];
            message Bindings {
               message PrefixSidMappings {
                  message PrefixSidMapping {
                     string ip_address = 1 [json_name = "ip-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     uint32 start_sid = 3 [json_name = "start-sid"];
                     uint32 range = 4 [json_name = "range"];
                     bool attach_flag = 5 [json_name = "attach-flag"];
                     uint32 algorithm = 6 [json_name = "algorithm"];
                  }
                  repeated PrefixSidMapping prefix_sid_mapping = 1 [json_name = "prefix-sid-mapping"];
               }
               PrefixSidMappings prefix_sid_mappings = 1 [json_name = "prefix-sid-mappings"];
            }
            Bindings bindings = 5 [json_name = "bindings"];
            message StaticLabelBlocks {
               message StaticLabelBlock {
                  uint32 lower_sid = 1 [json_name = "lower-sid"];
                  uint32 upper_sid = 2 [json_name = "upper-sid"];
                  uint32 range = 3 [json_name = "range"];
               }
               repeated StaticLabelBlock static_label_block = 1 [json_name = "static-label-block"];
            }
            StaticLabelBlocks static_label_blocks = 6 [json_name = "static-label-blocks"];
            message Ipv4State {
               message PrefixMplsForwardings {
                  message PrefixMplsForwarding {
                     string ip_address = 1 [json_name = "ip-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     uint32 in_label = 3 [json_name = "in-label"];
                     string out_label = 4 [json_name = "out-label"];
                     string if_name = 5 [json_name = "if-name"];
                     string next_hop = 6 [json_name = "next-hop"];
                     string lsp_xc_role = 7 [json_name = "lsp-xc-role"];
                     string mpls_mtu = 8 [json_name = "mpls-mtu"];
                     uint32 mtu = 9 [json_name = "mtu"];
                     string state = 10 [json_name = "state"];
                     uint32 flex_algo_id = 11 [json_name = "flex-algo-id"];
                  }
                  repeated PrefixMplsForwarding prefix_mpls_forwarding = 1 [json_name = "prefix-mpls-forwarding"];
               }
               PrefixMplsForwardings prefix_mpls_forwardings = 1 [json_name = "prefix-mpls-forwardings"];
               message BfdStates {
                  message BfdState {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_SEAMLESSX_BFD = 1;
                        Type_BFD = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum ModeType {
                        INVALID_ENUM_VALUE_ModeType = 0;
                        ModeType_TUNNEL = 1;
                     };
                     ModeType mode_type = 2 [json_name = "mode-type"];
                     string ip_address = 3 [json_name = "ip-address"];
                     uint32 mask_length = 4 [json_name = "mask-length"];
                     string state = 5 [json_name = "state"];
                     uint32 discriminator = 6 [json_name = "discriminator"];
                     string source = 7 [json_name = "source"];
                  }
                  repeated BfdState bfd_state = 1 [json_name = "bfd-state"];
               }
               BfdStates bfd_states = 2 [json_name = "bfd-states"];
               message AdjacencyMplsForwardings {
                  message AdjacencyMplsForwarding {
                     uint32 label = 1 [json_name = "label"];
                     string if_name = 2 [json_name = "if-name"];
                     string next_hop = 3 [json_name = "next-hop"];
                     string type = 4 [json_name = "type"];
                     string mpls_mtu = 5 [json_name = "mpls-mtu"];
                     uint32 mtu = 6 [json_name = "mtu"];
                     string vpn_name = 7 [json_name = "vpn-name"];
                  }
                  repeated AdjacencyMplsForwarding adjacency_mpls_forwarding = 1 [json_name = "adjacency-mpls-forwarding"];
               }
               AdjacencyMplsForwardings adjacency_mpls_forwardings = 3 [json_name = "adjacency-mpls-forwardings"];
            }
            Ipv4State ipv4_state = 7 [json_name = "ipv4-state"];
            message Srpolicy {
               message PolicyAttributes {
                  uint32 delete_delay = 1 [json_name = "delete-delay"];
                  bool hsb_enable = 2 [json_name = "hsb-enable"];
                  bool traffic_statistics_enable = 3 [json_name = "traffic-statistics-enable"];
                  message Bfd {
                     enum Enable {
                        Enable_DISABLE = 0;
                        Enable_SBFDX_ENABLE = 1;
                        Enable_UBFDX_ENABLE = 2;
                        Enable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 3;
                        Enable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                     };
                     Enable enable = 1 [json_name = "enable"];
                     uint32 min_tx = 2 [json_name = "min-tx"];
                     uint32 min_rx = 3 [json_name = "min-rx"];
                     uint32 multi_num = 4 [json_name = "multi-num"];
                     enum Bypass {
                        Bypass_BYPASS = 0;
                        Bypass_NOBYPASS = 1;
                     };
                     Bypass bypass = 5 [json_name = "bypass"];
                     uint32 backup_min_tx = 6 [json_name = "backup-min-tx"];
                     uint32 backup_multi_num = 7 [json_name = "backup-multi-num"];
                  }
                  Bfd bfd = 4 [json_name = "bfd"];
                  uint32 switch_delay = 5 [json_name = "switch-delay"];
                  bool bgp_ls_enable = 6 [json_name = "bgp-ls-enable"];
                  string locator = 7 [json_name = "locator"];
                  uint32 policy_threshold_upper = 8 [json_name = "policy-threshold-upper"];
                  uint32 policy_threshold_lower = 9 [json_name = "policy-threshold-lower"];
                  uint32 list_threshold_upper = 10 [json_name = "list-threshold-upper"];
                  uint32 list_threshold_lower = 11 [json_name = "list-threshold-lower"];
                  message SegmentLists {
                     message SegmentList {
                        string name = 1 [json_name = "name"];
                        message Segments {
                           message Segment {
                              uint32 index = 1 [json_name = "index"];
                              message Type_SegmentType1 {
                                 uint32 sid_value_1 = 1 [json_name = "sid-value-1"];
                              }
                              oneof Type {
                                 Type_SegmentType1 type_segment_type_1 = 3 [json_name = "segment-type-1"];
                              }
                           }
                           repeated Segment segment = 1 [json_name = "segment"];
                        }
                        Segments segments = 2 [json_name = "segments"];
                     }
                     repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                  }
                  SegmentLists segment_lists = 12 [json_name = "segment-lists"];
                  bool path_verification = 13 [json_name = "path-verification"];
                  bool suppress_flapping = 14 [json_name = "suppress-flapping"];
                  uint32 group_threshold_upper = 15 [json_name = "group-threshold-upper"];
                  uint32 group_threshold_lower = 16 [json_name = "group-threshold-lower"];
                  bool path_verification_specified_sid = 17 [json_name = "path-verification-specified-sid"];
                  uint32 auto_bandwidth_sample_interval = 18 [json_name = "auto-bandwidth-sample-interval"];
                  bool auto_bandwidth_enable = 19 [json_name = "auto-bandwidth-enable"];
                  message ComputeTypes {
                     message ComputeType {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_PCEP = 1;
                        };
                        Type type = 1 [json_name = "type"];
                     }
                     repeated ComputeType compute_type = 1 [json_name = "compute-type"];
                  }
                  ComputeTypes compute_types = 20 [json_name = "compute-types"];
               }
               PolicyAttributes policy_attributes = 1 [json_name = "policy-attributes"];
               message PolicyTrafficStatistics {
                  message PolicyTrafficStatistic {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string binding_sid = 4 [json_name = "binding-sid"];
                     uint32 tunnel_id = 5 [json_name = "tunnel-id"];
                     uint32 flow_period = 6 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 7 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 8 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 9 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 10 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 11 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 12 [json_name = "total-byte"];
                     uint64 total_packet = 13 [json_name = "total-packet"];
                  }
                  repeated PolicyTrafficStatistic policy_traffic_statistic = 1 [json_name = "policy-traffic-statistic"];
               }
               PolicyTrafficStatistics policy_traffic_statistics = 2 [json_name = "policy-traffic-statistics"];
               message ListTrafficStatistics {
                  message ListTrafficStatistic {
                     uint32 segment_list_id = 1 [json_name = "segment-list-id"];
                     uint32 xc_index = 2 [json_name = "xc-index"];
                     string policy_name = 3 [json_name = "policy-name"];
                     string endpoint = 4 [json_name = "endpoint"];
                     uint32 color = 5 [json_name = "color"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     uint32 preference = 8 [json_name = "preference"];
                     enum ProtocolOrigin {
                        INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                        ProtocolOrigin_PCEP = 10;
                        ProtocolOrigin_BGP = 20;
                        ProtocolOrigin_CONFIGURATION = 30;
                     };
                     ProtocolOrigin protocol_origin = 9 [json_name = "protocol-origin"];
                     uint32 asn = 10 [json_name = "asn"];
                     string node_address = 11 [json_name = "node-address"];
                     uint32 discriminator = 12 [json_name = "discriminator"];
                     enum PathType {
                        INVALID_ENUM_VALUE_PathType = 0;
                        PathType_PRIMARY = 1;
                        PathType_BACKUP = 2;
                        PathType_NOX_ACTIVE = 3;
                     };
                     PathType path_type = 13 [json_name = "path-type"];
                     message Sids {
                        message Sid {
                           uint32 index = 1 [json_name = "index"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated Sid sid = 1 [json_name = "sid"];
                     }
                     Sids sids = 14 [json_name = "sids"];
                     uint32 flow_period = 15 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 16 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 17 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 18 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 19 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 20 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 21 [json_name = "total-byte"];
                     uint64 total_packet = 22 [json_name = "total-packet"];
                     bool no_resource_flag = 23 [json_name = "no-resource-flag"];
                     uint32 path_id = 24 [json_name = "path-id"];
                  }
                  repeated ListTrafficStatistic list_traffic_statistic = 1 [json_name = "list-traffic-statistic"];
               }
               ListTrafficStatistics list_traffic_statistics = 3 [json_name = "list-traffic-statistics"];
               message Policys {
                  message Policy {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     message BindingSid {
                        enum Dataplane {
                           INVALID_ENUM_VALUE_Dataplane = 0;
                           Dataplane_MPLS = 1;
                           Dataplane_SRV6 = 2;
                        };
                        Dataplane dataplane = 1 [json_name = "dataplane"];
                        string value = 2 [json_name = "value"];
                     }
                     BindingSid binding_sid = 4 [json_name = "binding-sid"];
                     enum AdminState {
                        AdminState_DOWN = 0;
                        AdminState_UP = 1;
                     };
                     AdminState admin_state = 5 [json_name = "admin-state"];
                     uint32 mtu = 6 [json_name = "mtu"];
                     enum HsbEnable {
                        HsbEnable_NOTX_CONFIGURED = 0;
                        HsbEnable_ENABLE = 1;
                        HsbEnable_DISABLE = 2;
                     };
                     HsbEnable hsb_enable = 7 [json_name = "hsb-enable"];
                     enum BfdEnable {
                        BfdEnable_NOTX_CONFIGURED = 0;
                        BfdEnable_SBFDX_ENABLE = 1;
                        BfdEnable_DISABLE = 2;
                        BfdEnable_UBFDX_ENABLE = 3;
                        BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                        BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 5;
                     };
                     BfdEnable bfd_enable = 8 [json_name = "bfd-enable"];
                     enum TrafficStatisticsEnable {
                        TrafficStatisticsEnable_NOTX_CONFIGURED = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                        TrafficStatisticsEnable_DISABLE = 2;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 9 [json_name = "traffic-statistics-enable"];
                     message DiffservMode {
                        enum PipeMode {
                           INVALID_ENUM_VALUE_PipeMode = 0;
                           PipeMode_PIPE = 1;
                           PipeMode_UNIFORM = 2;
                        };
                        PipeMode pipe_mode = 1 [json_name = "pipe-mode"];
                        enum ServiceClass {
                           ServiceClass_BE = 0;
                           ServiceClass_AF1 = 1;
                           ServiceClass_AF2 = 2;
                           ServiceClass_AF3 = 3;
                           ServiceClass_AF4 = 4;
                           ServiceClass_EF = 5;
                           ServiceClass_CS6 = 6;
                           ServiceClass_CS7 = 7;
                        };
                        ServiceClass service_class = 2 [json_name = "service-class"];
                        enum ServiceColor {
                           ServiceColor_GREEN = 0;
                           ServiceColor_YELLOW = 1;
                           ServiceColor_RED = 2;
                        };
                        ServiceColor service_color = 3 [json_name = "service-color"];
                     }
                     DiffservMode diffserv_mode = 10 [json_name = "diffserv-mode"];
                     message CandidatePaths {
                        message CandidatePath {
                           enum ProtocolOrigin {
                              INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                              ProtocolOrigin_PCEP = 10;
                              ProtocolOrigin_BGP = 20;
                              ProtocolOrigin_CONFIGURATION = 30;
                           };
                           ProtocolOrigin protocol_origin = 1 [json_name = "protocol-origin"];
                           string originator = 2 [json_name = "originator"];
                           uint32 discriminator = 3 [json_name = "discriminator"];
                           uint32 preference = 4 [json_name = "preference"];
                           uint32 template_id = 5 [json_name = "template-id"];
                           uint32 network_slice_id = 6 [json_name = "network-slice-id"];
                           message Type_Explicit {
                              message SegmentLists {
                                 message SegmentList {
                                    string name = 1 [json_name = "name"];
                                    uint32 weight = 2 [json_name = "weight"];
                                    uint32 path_mtu = 3 [json_name = "path-mtu"];
                                 }
                                 repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                              }
                              SegmentLists segment_lists = 1 [json_name = "segment-lists"];
                           }
                           message Type_Dynamic {
                              message Constraints {
                                 uint32 link_bandwidth_utilization = 1 [json_name = "link-bandwidth-utilization"];
                                 enum MetricType {
                                    INVALID_ENUM_VALUE_MetricType = 0;
                                    MetricType_IGP = 1;
                                    MetricType_TE = 2;
                                    MetricType_DELAY = 3;
                                    MetricType_HOPX_COUNT = 4;
                                 };
                                 MetricType metric_type = 2 [json_name = "metric-type"];
                                 uint32 max_igp_cumulation = 3 [json_name = "max-igp-cumulation"];
                                 uint32 max_te_cumulation = 4 [json_name = "max-te-cumulation"];
                                 uint32 max_hopcount_cumulation = 5 [json_name = "max-hopcount-cumulation"];
                                 uint32 max_delay_cumulation = 6 [json_name = "max-delay-cumulation"];
                                 message Type_IncludeAny {
                                    repeated string include_any_affinity_name = 1 [json_name = "include-any-affinity-name"];
                                 }
                                 message Type_IncludeAll {
                                    repeated string include_all_affinity_name = 1 [json_name = "include-all-affinity-name"];
                                 }
                                 oneof Type {
                                    Type_IncludeAny type_include_any = 7 [json_name = "include-any"];
                                    Type_IncludeAll type_include_all = 8 [json_name = "include-all"];
                                 }
                                 repeated string exclude_affinity_name = 9 [json_name = "exclude-affinity-name"];
                                 string constraint_path_name = 10 [json_name = "constraint-path-name"];
                              }
                              Constraints constraints = 1 [json_name = "constraints"];
                           }
                           oneof Type {
                              Type_Explicit type_explicit = 7 [json_name = "explicit"];
                              Type_Dynamic type_dynamic = 8 [json_name = "dynamic"];
                           }
                        }
                        repeated CandidatePath candidate_path = 1 [json_name = "candidate-path"];
                     }
                     CandidatePaths candidate_paths = 11 [json_name = "candidate-paths"];
                     bool metric_inherit_igp = 12 [json_name = "metric-inherit-igp"];
                     message MetricType_Absolute {
                        int32 absolute9 = 1 [json_name = "absolute"];
                     }
                     oneof MetricType {
                        MetricType_Absolute metric_type_absolute = 13 [json_name = "absolute"];
                     }
                     message AutoBandwidthAdjustment {
                        uint32 adjustment_interval = 1 [json_name = "adjustment-interval"];
                        uint32 down_adjustment_interval = 2 [json_name = "down-adjustment-interval"];
                     }
                     AutoBandwidthAdjustment auto_bandwidth_adjustment = 14 [json_name = "auto-bandwidth-adjustment"];
                  }
                  repeated Policy policy = 1 [json_name = "policy"];
               }
               Policys policys = 4 [json_name = "policys"];
               message PolicyInfos {
                  message PolicyInfo {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string state = 4 [json_name = "state"];
                     enum AdminState {
                        AdminState_DOWN = 0;
                        AdminState_UP = 1;
                     };
                     AdminState admin_state = 5 [json_name = "admin-state"];
                     uint32 binding_sid = 6 [json_name = "binding-sid"];
                     uint32 mtu = 7 [json_name = "mtu"];
                     uint32 tunnel_id = 8 [json_name = "tunnel-id"];
                     enum TunnelType {
                        TunnelType_INVALID = 0;
                        TunnelType_SRX_MPLSX_TEX_POLICY = 50;
                        TunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                        TunnelType_SRV6X_TEX_POLICY = 52;
                        TunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 9 [json_name = "tunnel-type"];
                     enum PipeMode {
                        INVALID_ENUM_VALUE_PipeMode = 0;
                        PipeMode_PIPE = 1;
                        PipeMode_UNIFORM = 2;
                     };
                     PipeMode pipe_mode = 10 [json_name = "pipe-mode"];
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                        ServiceClass_NONE = 8;
                     };
                     ServiceClass service_class = 11 [json_name = "service-class"];
                     enum ServiceColor {
                        ServiceColor_GREEN = 0;
                        ServiceColor_YELLOW = 1;
                        ServiceColor_RED = 2;
                        ServiceColor_NONE = 3;
                     };
                     ServiceColor service_color = 12 [json_name = "service-color"];
                     enum BfdEnable {
                        BfdEnable_DISABLE = 0;
                        BfdEnable_SBFDX_ENABLE = 1;
                        BfdEnable_UBFDX_ENABLE = 2;
                        BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 3;
                        BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                     };
                     BfdEnable bfd_enable = 13 [json_name = "bfd-enable"];
                     enum HsbEnable {
                        HsbEnable_DISABLE = 0;
                        HsbEnable_ENABLE = 1;
                     };
                     HsbEnable hsb_enable = 14 [json_name = "hsb-enable"];
                     enum TrafficStatisticsEnable {
                        TrafficStatisticsEnable_DISABLE = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 15 [json_name = "traffic-statistics-enable"];
                     string state_change_time = 16 [json_name = "state-change-time"];
                     uint32 candidate_path_count = 17 [json_name = "candidate-path-count"];
                     message CandidatePaths {
                        message CandidatePath {
                           enum ProtocolOrigin {
                              INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                              ProtocolOrigin_PCEP = 10;
                              ProtocolOrigin_BGP = 20;
                              ProtocolOrigin_CONFIGURATION = 30;
                           };
                           ProtocolOrigin protocol_origin = 1 [json_name = "protocol-origin"];
                           uint32 asn = 2 [json_name = "asn"];
                           string node_address = 3 [json_name = "node-address"];
                           uint32 discriminator = 4 [json_name = "discriminator"];
                           uint32 preference = 5 [json_name = "preference"];
                           string path_state = 6 [json_name = "path-state"];
                           enum PathType {
                              INVALID_ENUM_VALUE_PathType = 0;
                              PathType_PRIMARY = 1;
                              PathType_BACKUP = 2;
                              PathType_NOX_ACTIVE = 3;
                           };
                           PathType path_type = 7 [json_name = "path-type"];
                           uint32 binding_sid = 8 [json_name = "binding-sid"];
                           uint32 group_id = 9 [json_name = "group-id"];
                           string policy_name = 10 [json_name = "policy-name"];
                           uint32 template_id = 11 [json_name = "template-id"];
                           uint32 segment_list_count = 12 [json_name = "segment-list-count"];
                           message SegmentLists {
                              message SegmentList {
                                 uint32 id = 1 [json_name = "id"];
                                 string name = 2 [json_name = "name"];
                                 uint32 xc_index = 3 [json_name = "xc-index"];
                                 uint32 delay_time_remain = 4 [json_name = "delay-time-remain"];
                                 string state = 5 [json_name = "state"];
                                 string bfd_state = 6 [json_name = "bfd-state"];
                                 uint32 exp_value = 7 [json_name = "exp-value"];
                                 uint32 ttl_value = 8 [json_name = "ttl-value"];
                                 message Sids {
                                    message Sid {
                                       uint32 index = 1 [json_name = "index"];
                                       uint32 value = 2 [json_name = "value"];
                                    }
                                    repeated Sid sid = 1 [json_name = "sid"];
                                 }
                                 Sids sids = 9 [json_name = "sids"];
                                 uint32 weight = 10 [json_name = "weight"];
                                 uint32 igp_metric = 11 [json_name = "igp-metric"];
                                 uint32 te_metric = 12 [json_name = "te-metric"];
                                 uint32 delay_metric = 13 [json_name = "delay-metric"];
                                 uint32 hop_count = 14 [json_name = "hop-count"];
                              }
                              repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                           }
                           SegmentLists segment_lists = 13 [json_name = "segment-lists"];
                           uint32 active_igp_metric = 14 [json_name = "active-igp-metric"];
                           string name = 15 [json_name = "name"];
                           enum ComputeSource {
                              ComputeSource_NONE = 0;
                              ComputeSource_PCEP = 1;
                           };
                           ComputeSource compute_source = 16 [json_name = "compute-source"];
                           bool delegate_congestion = 17 [json_name = "delegate-congestion"];
                           uint64 ct0_bandwidth = 18 [json_name = "ct0-bandwidth"];
                           uint32 igp_metric = 19 [json_name = "igp-metric"];
                           uint32 te_metric = 20 [json_name = "te-metric"];
                           uint32 delay_metric = 21 [json_name = "delay-metric"];
                           uint32 hop_count = 22 [json_name = "hop-count"];
                        }
                        repeated CandidatePath candidate_path = 1 [json_name = "candidate-path"];
                     }
                     CandidatePaths candidate_paths = 18 [json_name = "candidate-paths"];
                     enum MetricInheritIgp {
                        MetricInheritIgp_DISABLE = 0;
                        MetricInheritIgp_ENABLE = 1;
                     };
                     MetricInheritIgp metric_inherit_igp = 19 [json_name = "metric-inherit-igp"];
                     uint32 active_igp_metric = 20 [json_name = "active-igp-metric"];
                  }
                  repeated PolicyInfo policy_info = 1 [json_name = "policy-info"];
               }
               PolicyInfos policy_infos = 5 [json_name = "policy-infos"];
               message PolicyGroups {
                  message PolicyGroup {
                     uint32 index = 1 [json_name = "index"];
                     string endpoint = 2 [json_name = "endpoint"];
                     enum State {
                        State_UP = 0;
                        State_DOWN = 1;
                        State_OVERRUN = 2;
                     };
                     State state = 3 [json_name = "state"];
                     uint32 tunnel_id = 4 [json_name = "tunnel-id"];
                     enum TunnelType {
                        TunnelType_INVALID = 0;
                        TunnelType_SRX_MPLSX_TEX_POLICY = 50;
                        TunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                        TunnelType_SRV6X_TEX_POLICY = 52;
                        TunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 5 [json_name = "tunnel-type"];
                     uint32 match_count = 6 [json_name = "match-count"];
                     uint32 up_match_count = 7 [json_name = "up-match-count"];
                     message ColorDscpMatchs {
                        message ColorDscpMatch {
                           uint32 color = 1 [json_name = "color"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 2 [json_name = "af-type"];
                           bool default = 3 [json_name = "default"];
                           string dscp_value = 4 [json_name = "dscp-value"];
                           uint32 policy_tunnel_id = 5 [json_name = "policy-tunnel-id"];
                           enum State {
                              State_UP = 0;
                              State_DOWN = 1;
                              State_OVERRUN = 2;
                           };
                           State state = 6 [json_name = "state"];
                        }
                        repeated ColorDscpMatch color_dscp_match = 1 [json_name = "color-dscp-match"];
                     }
                     ColorDscpMatchs color_dscp_matchs = 8 [json_name = "color-dscp-matchs"];
                  }
                  repeated PolicyGroup policy_group = 1 [json_name = "policy-group"];
               }
               PolicyGroups policy_groups = 6 [json_name = "policy-groups"];
               message TemplateInfos {
                  message TemplateInfo {
                     uint32 template_id = 1 [json_name = "template-id"];
                     enum BfdEnable {
                        INVALID_ENUM_VALUE_BfdEnable = 0;
                        BfdEnable_ENABLE = 1;
                        BfdEnable_DISABLE = 2;
                     };
                     BfdEnable bfd_enable = 2 [json_name = "bfd-enable"];
                     enum HsbEnable {
                        INVALID_ENUM_VALUE_HsbEnable = 0;
                        HsbEnable_ENABLE = 1;
                        HsbEnable_DISABLE = 2;
                     };
                     HsbEnable hsb_enable = 3 [json_name = "hsb-enable"];
                     enum TrafficStatisticsEnable {
                        INVALID_ENUM_VALUE_TrafficStatisticsEnable = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                        TrafficStatisticsEnable_DISABLE = 2;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 4 [json_name = "traffic-statistics-enable"];
                  }
                  repeated TemplateInfo template_info = 1 [json_name = "template-info"];
               }
               TemplateInfos template_infos = 7 [json_name = "template-infos"];
               message PolicyDownReasons {
                  message PolicyDownReason {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string up_time = 3 [json_name = "up-time"];
                     uint32 up_millisecond = 4 [json_name = "up-millisecond"];
                     string name = 5 [json_name = "name"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     string down_time = 8 [json_name = "down-time"];
                     string down_reason = 9 [json_name = "down-reason"];
                     message ListDownReasons {
                        message ListDownReason {
                           uint32 id = 1 [json_name = "id"];
                           string up_time = 2 [json_name = "up-time"];
                           uint32 up_millisecond = 3 [json_name = "up-millisecond"];
                           string name = 4 [json_name = "name"];
                           string down_time = 5 [json_name = "down-time"];
                           string down_reason = 6 [json_name = "down-reason"];
                           message Sids {
                              message Sid {
                                 uint32 index = 1 [json_name = "index"];
                                 string value = 2 [json_name = "value"];
                              }
                              repeated Sid sid = 1 [json_name = "sid"];
                           }
                           Sids sids = 7 [json_name = "sids"];
                           uint32 preference = 8 [json_name = "preference"];
                           uint32 network_slice_id = 9 [json_name = "network-slice-id"];
                           uint32 path_mtu = 10 [json_name = "path-mtu"];
                           uint32 weight = 11 [json_name = "weight"];
                        }
                        repeated ListDownReason list_down_reason = 1 [json_name = "list-down-reason"];
                     }
                     ListDownReasons list_down_reasons = 10 [json_name = "list-down-reasons"];
                  }
                  repeated PolicyDownReason policy_down_reason = 1 [json_name = "policy-down-reason"];
               }
               PolicyDownReasons policy_down_reasons = 8 [json_name = "policy-down-reasons"];
               message BindingSidAllocations {
                  message BindingSidAllocation {
                     string binding_sid = 1 [json_name = "binding-sid"];
                     string endpoint = 2 [json_name = "endpoint"];
                     uint32 color = 3 [json_name = "color"];
                     bool allocation_success = 4 [json_name = "allocation-success"];
                     bool is_configured = 5 [json_name = "is-configured"];
                     uint32 dynamic_path_count = 6 [json_name = "dynamic-path-count"];
                     message DynamicCandidatePaths {
                        message DynamicCandidatePath {
                           uint32 distinguisher = 1 [json_name = "distinguisher"];
                           uint32 preference = 2 [json_name = "preference"];
                           enum ProtocolOrigin {
                              INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                              ProtocolOrigin_PCEP = 10;
                              ProtocolOrigin_BGP = 20;
                              ProtocolOrigin_CONFIGURATION = 30;
                           };
                           ProtocolOrigin protocol_origin = 3 [json_name = "protocol-origin"];
                           uint32 asn = 4 [json_name = "asn"];
                           string node_address = 5 [json_name = "node-address"];
                        }
                        repeated DynamicCandidatePath dynamic_candidate_path = 1 [json_name = "dynamic-candidate-path"];
                     }
                     DynamicCandidatePaths dynamic_candidate_paths = 7 [json_name = "dynamic-candidate-paths"];
                  }
                  repeated BindingSidAllocation binding_sid_allocation = 1 [json_name = "binding-sid-allocation"];
               }
               BindingSidAllocations binding_sid_allocations = 9 [json_name = "binding-sid-allocations"];
            }
            Srpolicy srpolicy = 8 [json_name = "srpolicy"];
            message Srlbs {
               message Srlb {
                  uint32 begin = 1 [json_name = "begin"];
                  uint32 end = 2 [json_name = "end"];
                  bool ignore_conflict = 3 [json_name = "ignore-conflict"];
               }
               repeated Srlb srlb = 1 [json_name = "srlb"];
            }
            Srlbs srlbs = 9 [json_name = "srlbs"];
            message AdjacencySid {
               message Globals {
                  message Global {
                     string local_ip_address = 1 [json_name = "local-ip-address"];
                     string remote_ip_address = 2 [json_name = "remote-ip-address"];
                     uint32 absolute_sid = 3 [json_name = "absolute-sid"];
                     string vpn_name = 4 [json_name = "vpn-name"];
                  }
                  repeated Global global = 1 [json_name = "global"];
               }
               Globals globals = 1 [json_name = "globals"];
            }
            AdjacencySid adjacency_sid = 10 [json_name = "adjacency-sid"];
            message TrafficStatistics {
               message TrafficStatistic {
                  string ip_address = 1 [json_name = "ip-address"];
                  uint32 mask_length = 2 [json_name = "mask-length"];
                  enum LspType {
                     INVALID_ENUM_VALUE_LspType = 0;
                     LspType_INGRESS = 1;
                     LspType_TRANSIT = 2;
                     LspType_INGRESSX_TRANSIT = 3;
                     LspType_EGRESS = 4;
                     LspType_BUD = 5;
                  };
                  LspType lsp_type = 3 [json_name = "lsp-type"];
                  uint32 in_label = 4 [json_name = "in-label"];
                  string out_label = 5 [json_name = "out-label"];
                  uint32 flex_algo_id = 6 [json_name = "flex-algo-id"];
                  string out_interface = 7 [json_name = "out-interface"];
                  string next_hop = 8 [json_name = "next-hop"];
                  string current_time = 9 [json_name = "current-time"];
                  uint32 flow_period = 10 [json_name = "flow-period"];
                  uint64 last_period_bit_rate = 11 [json_name = "last-period-bit-rate"];
                  uint64 last_period_packet_rate = 12 [json_name = "last-period-packet-rate"];
                  uint64 query_interval = 13 [json_name = "query-interval"];
                  uint64 interval_bit_rate = 14 [json_name = "interval-bit-rate"];
                  uint64 interval_packet_rate = 15 [json_name = "interval-packet-rate"];
                  uint64 output_bytes = 16 [json_name = "output-bytes"];
                  uint64 output_packets = 17 [json_name = "output-packets"];
               }
               repeated TrafficStatistic traffic_statistic = 1 [json_name = "traffic-statistic"];
            }
            TrafficStatistics traffic_statistics = 11 [json_name = "traffic-statistics"];
            message FlexAlgoSbfds {
               string flex_algo_id = 1 [json_name = "flex-algo-id"];
            }
            FlexAlgoSbfds flex_algo_sbfds = 12 [json_name = "flex-algo-sbfds"];
            message FlexAlgoTrafficStatis {
               string flex_algo_id = 1 [json_name = "flex-algo-id"];
            }
            FlexAlgoTrafficStatis flex_algo_traffic_statis = 13 [json_name = "flex-algo-traffic-statis"];
         }
         SegmentRouting segment_routing = 15 [json_name = "segment-routing"];
         message Srv6 {
            bool enable = 1 [json_name = "enable"];
            bool te_frr_enable = 2 [json_name = "te-frr-enable"];
            message Encapsulation {
               string source_address = 1 [json_name = "source-address"];
               uint32 hop_limit = 2 [json_name = "hop-limit"];
               message Mode_Address {
                  string source_address = 1 [json_name = "source-address"];
               }
               message Mode_Interface {
                  string source_interface = 1 [json_name = "source-interface"];
               }
               oneof Mode {
                  Mode_Address mode_address = 3 [json_name = "address"];
                  Mode_Interface mode_interface = 4 [json_name = "interface"];
               }
            }
            Encapsulation encapsulation = 3 [json_name = "encapsulation"];
            message Locators {
               message Locator {
                  string name = 1 [json_name = "name"];
                  string prefix = 2 [json_name = "prefix"];
                  uint32 prefix_length = 3 [json_name = "prefix-length"];
                  uint32 static_length = 4 [json_name = "static-length"];
                  uint32 args_length = 5 [json_name = "args-length"];
                  message Opcodes {
                     message Ends {
                        message End {
                           string value = 1 [json_name = "value"];
                           bool compress = 2 [json_name = "compress"];
                        }
                        repeated End end = 1 [json_name = "end"];
                     }
                     Ends ends = 1 [json_name = "ends"];
                     message EndPsps {
                        message EndPsp {
                           string value = 1 [json_name = "value"];
                           bool compress = 2 [json_name = "compress"];
                        }
                        repeated EndPsp end_psp = 1 [json_name = "end-psp"];
                     }
                     EndPsps end_psps = 2 [json_name = "end-psps"];
                     message EndOps {
                        message EndOp {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndOp end_op = 1 [json_name = "end-op"];
                     }
                     EndOps end_ops = 3 [json_name = "end-ops"];
                     message EndXs {
                        message EndX {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                           bool compress = 4 [json_name = "compress"];
                        }
                        repeated EndX end_x = 1 [json_name = "end-x"];
                     }
                     EndXs end_xs = 4 [json_name = "end-xs"];
                     message EndXPsps {
                        message EndXPsp {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                           bool compress = 4 [json_name = "compress"];
                        }
                        repeated EndXPsp end_x_psp = 1 [json_name = "end-x-psp"];
                     }
                     EndXPsps end_x_psps = 5 [json_name = "end-x-psps"];
                     message EndDt4S {
                        message EndDt4 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                           enum Protocol {
                              Protocol_L3VPN = 0;
                              Protocol_EVPN = 1;
                              Protocol_EVPNX_L3VPN = 2;
                           };
                           Protocol protocol = 3 [json_name = "protocol"];
                        }
                        repeated EndDt4 end_dt4 = 1 [json_name = "end-dt4"];
                     }
                     EndDt4S end_dt4s = 6 [json_name = "end-dt4s"];
                     message EndMs {
                        message EndM {
                           string value = 1 [json_name = "value"];
                           string mirror_prefix = 2 [json_name = "mirror-prefix"];
                           uint32 mirror_mask = 3 [json_name = "mirror-mask"];
                        }
                        repeated EndM end_m = 1 [json_name = "end-m"];
                     }
                     EndMs end_ms = 7 [json_name = "end-ms"];
                     message EndDx4S {
                        message EndDx4 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                           string if_name = 3 [json_name = "if-name"];
                           string next_hop = 4 [json_name = "next-hop"];
                           enum Protocol {
                              Protocol_L3VPN = 0;
                              Protocol_EVPN = 1;
                              Protocol_EVPNX_L3VPN = 2;
                           };
                           Protocol protocol = 5 [json_name = "protocol"];
                        }
                        repeated EndDx4 end_dx4 = 1 [json_name = "end-dx4"];
                     }
                     EndDx4S end_dx4s = 8 [json_name = "end-dx4s"];
                     message EndDx6S {
                        message EndDx6 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                           string if_name = 3 [json_name = "if-name"];
                           string next_hop = 4 [json_name = "next-hop"];
                           enum Protocol {
                              Protocol_L3VPN = 0;
                              Protocol_EVPN = 1;
                              Protocol_EVPNX_L3VPN = 2;
                           };
                           Protocol protocol = 5 [json_name = "protocol"];
                        }
                        repeated EndDx6 end_dx6 = 1 [json_name = "end-dx6"];
                     }
                     EndDx6S end_dx6s = 9 [json_name = "end-dx6s"];
                     message EndDt2Us {
                        message EndDt2U {
                           string value = 1 [json_name = "value"];
                           uint32 bd_id = 2 [json_name = "bd-id"];
                        }
                        repeated EndDt2U end_dt2u = 1 [json_name = "end-dt2u"];
                     }
                     EndDt2Us end_dt2us = 10 [json_name = "end-dt2us"];
                     message EndDt2Uls {
                        message EndDt2Ul {
                           string value = 1 [json_name = "value"];
                           uint32 bd_id = 2 [json_name = "bd-id"];
                        }
                        repeated EndDt2Ul end_dt2ul = 1 [json_name = "end-dt2ul"];
                     }
                     EndDt2Uls end_dt2uls = 11 [json_name = "end-dt2uls"];
                     message EndDt2Ms {
                        message EndDt2M {
                           string value = 1 [json_name = "value"];
                           uint32 bd_id = 2 [json_name = "bd-id"];
                        }
                        repeated EndDt2M end_dt2m = 1 [json_name = "end-dt2m"];
                     }
                     EndDt2Ms end_dt2ms = 12 [json_name = "end-dt2ms"];
                     message EndDx2S {
                        message EndDx2 {
                           string value = 1 [json_name = "value"];
                           uint32 evpl_id = 2 [json_name = "evpl-id"];
                        }
                        repeated EndDx2 end_dx2 = 1 [json_name = "end-dx2"];
                     }
                     EndDx2S end_dx2s = 13 [json_name = "end-dx2s"];
                     message EndDx2Ls {
                        message EndDx2L {
                           string value = 1 [json_name = "value"];
                           uint32 evpl_id = 2 [json_name = "evpl-id"];
                        }
                        repeated EndDx2L end_dx2l = 1 [json_name = "end-dx2l"];
                     }
                     EndDx2Ls end_dx2ls = 14 [json_name = "end-dx2ls"];
                     message EndDt6S {
                        message EndDt6 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                           enum Protocol {
                              Protocol_L3VPN = 0;
                              Protocol_EVPN = 1;
                              Protocol_EVPNX_L3VPN = 2;
                           };
                           Protocol protocol = 3 [json_name = "protocol"];
                        }
                        repeated EndDt6 end_dt6 = 1 [json_name = "end-dt6"];
                     }
                     EndDt6S end_dt6s = 15 [json_name = "end-dt6s"];
                     message EndAss {
                        message EndAs {
                           string value = 1 [json_name = "value"];
                           string backup_value = 2 [json_name = "backup-value"];
                           enum InnerType {
                              InnerType_NULL = 0;
                              InnerType_IPV4 = 1;
                           };
                           InnerType inner_type = 3 [json_name = "inner-type"];
                           bool bypass_enable = 4 [json_name = "bypass-enable"];
                           string bypass_sid = 5 [json_name = "bypass-sid"];
                           message L2Fwds {
                              message L2Fwd {
                                 string out_ifname = 1 [json_name = "out-ifname"];
                                 string in_ifname = 2 [json_name = "in-ifname"];
                                 uint32 out_vlan = 3 [json_name = "out-vlan"];
                                 uint32 in_vlan = 4 [json_name = "in-vlan"];
                                 uint32 out_ce_vlan = 5 [json_name = "out-ce-vlan"];
                                 uint32 in_ce_vlan = 6 [json_name = "in-ce-vlan"];
                                 string dest_mac = 7 [json_name = "dest-mac"];
                              }
                              repeated L2Fwd l2_fwd = 1 [json_name = "l2-fwd"];
                           }
                           L2Fwds l2_fwds = 6 [json_name = "l2-fwds"];
                           message L3Fwds {
                              message L3Fwd {
                                 string next_hop = 1 [json_name = "next-hop"];
                                 string in_ifname = 2 [json_name = "in-ifname"];
                                 string out_ifname = 3 [json_name = "out-ifname"];
                                 uint32 symmetric_index = 4 [json_name = "symmetric-index"];
                              }
                              repeated L3Fwd l3_fwd = 1 [json_name = "l3-fwd"];
                           }
                           L3Fwds l3_fwds = 7 [json_name = "l3-fwds"];
                           message Cache {
                              string source_address = 1 [json_name = "source-address"];
                              uint32 sl_num = 2 [json_name = "sl-num"];
                              message Ipv6Addrs {
                                 message Ipv6Addr {
                                    string ipv6_address = 1 [json_name = "ipv6-address"];
                                 }
                                 repeated Ipv6Addr ipv6addr = 1 [json_name = "ipv6addr"];
                              }
                              Ipv6Addrs ipv6addrs = 3 [json_name = "ipv6addrs"];
                           }
                           Cache cache = 8 [json_name = "cache"];
                           message ServiceMode_Pipe {
                              enum ServiceClass {
                                 ServiceClass_BE = 0;
                                 ServiceClass_AF1 = 1;
                                 ServiceClass_AF2 = 2;
                                 ServiceClass_AF3 = 3;
                                 ServiceClass_AF4 = 4;
                                 ServiceClass_EF = 5;
                                 ServiceClass_CS6 = 6;
                                 ServiceClass_CS7 = 7;
                              };
                              ServiceClass service_class = 1 [json_name = "service-class"];
                              enum Color {
                                 Color_GREEN = 0;
                                 Color_YELLOW = 1;
                                 Color_RED = 2;
                              };
                              Color color = 2 [json_name = "color"];
                           }
                           message ServiceMode_Uniform {
                              bool diffserv_uniform = 1 [json_name = "diffserv-uniform"];
                           }
                           oneof ServiceMode {
                              ServiceMode_Pipe service_mode_pipe = 9 [json_name = "pipe"];
                              ServiceMode_Uniform service_mode_uniform = 10 [json_name = "uniform"];
                           }
                           message TtlMode_Pipe {
                              uint32 ttl_value = 1 [json_name = "ttl-value"];
                           }
                           message TtlMode_Uniform {
                              bool ttl_uniform = 1 [json_name = "ttl-uniform"];
                           }
                           oneof TtlMode {
                              TtlMode_Pipe ttl_mode_pipe = 11 [json_name = "pipe"];
                              TtlMode_Uniform ttl_mode_uniform = 12 [json_name = "uniform"];
                           }
                           bool forward_no_bypass = 13 [json_name = "forward-no-bypass"];
                        }
                        repeated EndAs end_as = 1 [json_name = "end-as"];
                     }
                     EndAss end_ass = 16 [json_name = "end-ass"];
                     message EndPspUspUsds {
                        message EndPspUspUsd {
                           string value = 1 [json_name = "value"];
                           bool compress = 2 [json_name = "compress"];
                        }
                        repeated EndPspUspUsd end_psp_usp_usd = 1 [json_name = "end-psp-usp-usd"];
                     }
                     EndPspUspUsds end_psp_usp_usds = 17 [json_name = "end-psp-usp-usds"];
                     message EndPspUspUsdCocs {
                        message EndPspUspUsdCoc {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndPspUspUsdCoc end_psp_usp_usd_coc = 1 [json_name = "end-psp-usp-usd-coc"];
                     }
                     EndPspUspUsdCocs end_psp_usp_usd_cocs = 18 [json_name = "end-psp-usp-usd-cocs"];
                     message EndXPspUspUsds {
                        message EndXPspUspUsd {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                           bool compress = 4 [json_name = "compress"];
                        }
                        repeated EndXPspUspUsd end_x_psp_usp_usd = 1 [json_name = "end-x-psp-usp-usd"];
                     }
                     EndXPspUspUsds end_x_psp_usp_usds = 19 [json_name = "end-x-psp-usp-usds"];
                     message EndXPspUspUsdCocs {
                        message EndXPspUspUsdCoc {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                        }
                        repeated EndXPspUspUsdCoc end_x_psp_usp_usd_coc = 1 [json_name = "end-x-psp-usp-usd-coc"];
                     }
                     EndXPspUspUsdCocs end_x_psp_usp_usd_cocs = 20 [json_name = "end-x-psp-usp-usd-cocs"];
                     message EndCocs {
                        message EndCoc {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndCoc end_coc = 1 [json_name = "end-coc"];
                     }
                     EndCocs end_cocs = 21 [json_name = "end-cocs"];
                     message EndPspCocs {
                        message EndPspCoc {
                           string value = 1 [json_name = "value"];
                        }
                        repeated EndPspCoc end_psp_coc = 1 [json_name = "end-psp-coc"];
                     }
                     EndPspCocs end_psp_cocs = 22 [json_name = "end-psp-cocs"];
                     message EndXCocs {
                        message EndXCoc {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                        }
                        repeated EndXCoc end_x_coc = 1 [json_name = "end-x-coc"];
                     }
                     EndXCocs end_x_cocs = 23 [json_name = "end-x-cocs"];
                     message EndXPspCocs {
                        message EndXPspCoc {
                           string value = 1 [json_name = "value"];
                           string if_name = 2 [json_name = "if-name"];
                           string next_hop = 3 [json_name = "next-hop"];
                        }
                        repeated EndXPspCoc end_x_psp_coc = 1 [json_name = "end-x-psp-coc"];
                     }
                     EndXPspCocs end_x_psp_cocs = 24 [json_name = "end-x-psp-cocs"];
                     message EndDt46S {
                        message EndDt46 {
                           string value = 1 [json_name = "value"];
                           string vpn_name = 2 [json_name = "vpn-name"];
                        }
                        repeated EndDt46 end_dt46 = 1 [json_name = "end-dt46"];
                     }
                     EndDt46S end_dt46s = 25 [json_name = "end-dt46s"];
                  }
                  Opcodes opcodes = 6 [json_name = "opcodes"];
                  uint32 compress_block_length = 7 [json_name = "compress-block-length"];
                  uint32 compress_static_length = 8 [json_name = "compress-static-length"];
                  uint32 flex_algo = 9 [json_name = "flex-algo"];
                  message Attribute {
                     string block = 1 [json_name = "block"];
                     string node_id = 2 [json_name = "node-id"];
                     uint32 node_id_length = 3 [json_name = "node-id-length"];
                     uint32 reference = 4 [json_name = "reference"];
                     uint32 compress_dynamic_sid_pool_id = 5 [json_name = "compress-dynamic-sid-pool-id"];
                     uint32 compress_dynamic_length = 6 [json_name = "compress-dynamic-length"];
                     string compress_dynamic_sid_begin = 7 [json_name = "compress-dynamic-sid-begin"];
                     string compress_dynamic_sid_end = 8 [json_name = "compress-dynamic-sid-end"];
                     string compress_static_sid_begin = 9 [json_name = "compress-static-sid-begin"];
                     string compress_static_sid_end = 10 [json_name = "compress-static-sid-end"];
                     uint32 dynamic_sid_pool_id = 11 [json_name = "dynamic-sid-pool-id"];
                     uint32 dynamic_length = 12 [json_name = "dynamic-length"];
                     string dynamic_sid_begin = 13 [json_name = "dynamic-sid-begin"];
                     string dynamic_sid_end = 14 [json_name = "dynamic-sid-end"];
                     string static_sid_begin = 15 [json_name = "static-sid-begin"];
                     string static_sid_end = 16 [json_name = "static-sid-end"];
                     message Srv6LbAttributes {
                        message Srv6LbAttribute {
                           uint32 index = 1 [json_name = "index"];
                           string local_block_begin = 2 [json_name = "local-block-begin"];
                           string local_block_end = 3 [json_name = "local-block-end"];
                           uint32 number10 = 4 [json_name = "number"];
                        }
                        repeated Srv6LbAttribute srv6lb_attribute = 1 [json_name = "srv6lb-attribute"];
                     }
                     Srv6LbAttributes srv6lb_attributes = 17 [json_name = "srv6lb-attributes"];
                  }
                  Attribute attribute = 10 [json_name = "attribute"];
                  message Srv6Lbs {
                     message Srv6Lb {
                        uint32 index = 1 [json_name = "index"];
                        uint32 sid_reserve_number = 2 [json_name = "sid-reserve-number"];
                     }
                     repeated Srv6Lb srv6lb = 1 [json_name = "srv6lb"];
                  }
                  Srv6Lbs srv6lbs = 11 [json_name = "srv6lbs"];
               }
               repeated Locator locator = 1 [json_name = "locator"];
            }
            Locators locators = 4 [json_name = "locators"];
            message LocalSids {
               message Ends {
                  message End {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated End end = 1 [json_name = "end"];
               }
               Ends ends = 1 [json_name = "ends"];
               message EndPsps {
                  message EndPsp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndPsp end_psp = 1 [json_name = "end-psp"];
               }
               EndPsps end_psps = 2 [json_name = "end-psps"];
               message EndOps {
                  message EndOp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndOp end_op = 1 [json_name = "end-op"];
               }
               EndOps end_ops = 3 [json_name = "end-ops"];
               message EndXs {
                  message EndX {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                     string te_frr_flag = 4 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 5 [json_name = "te-frr-delay-time-remain"];
                  }
                  repeated EndX end_x = 1 [json_name = "end-x"];
               }
               EndXs end_xs = 4 [json_name = "end-xs"];
               message EndXPsps {
                  message EndXPsp {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                     string te_frr_flag = 4 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 5 [json_name = "te-frr-delay-time-remain"];
                  }
                  repeated EndXPsp end_x_psp = 1 [json_name = "end-x-psp"];
               }
               EndXPsps end_x_psps = 5 [json_name = "end-x-psps"];
               message EndDt4S {
                  message EndDt4 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt4 end_dt4 = 1 [json_name = "end-dt4"];
               }
               EndDt4S end_dt4s = 6 [json_name = "end-dt4s"];
               message EndMs {
                  message EndM {
                     string value = 1 [json_name = "value"];
                     string flavor = 2 [json_name = "flavor"];
                     string locator_name = 3 [json_name = "locator-name"];
                     uint32 mirror_locator_number = 4 [json_name = "mirror-locator-number"];
                     string mirror_locator_set = 5 [json_name = "mirror-locator-set"];
                  }
                  repeated EndM end_m = 1 [json_name = "end-m"];
               }
               EndMs end_ms = 7 [json_name = "end-ms"];
               message EndDx4S {
                  message EndDx4 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                     string if_name = 4 [json_name = "if-name"];
                     string next_hop = 5 [json_name = "next-hop"];
                  }
                  repeated EndDx4 end_dx4 = 1 [json_name = "end-dx4"];
               }
               EndDx4S end_dx4s = 8 [json_name = "end-dx4s"];
               message EndDx6S {
                  message EndDx6 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                     string if_name = 4 [json_name = "if-name"];
                     string next_hop = 5 [json_name = "next-hop"];
                  }
                  repeated EndDx6 end_dx6 = 1 [json_name = "end-dx6"];
               }
               EndDx6S end_dx6s = 9 [json_name = "end-dx6s"];
               message EndDt6S {
                  message EndDt6 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt6 end_dt6 = 1 [json_name = "end-dt6"];
               }
               EndDt6S end_dt6s = 10 [json_name = "end-dt6s"];
               message EndPspUspUsds {
                  message EndPspUspUsd {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndPspUspUsd end_psp_usp_usd = 1 [json_name = "end-psp-usp-usd"];
               }
               EndPspUspUsds end_psp_usp_usds = 11 [json_name = "end-psp-usp-usds"];
               message EndPspUspUsdCocs {
                  message EndPspUspUsdCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndPspUspUsdCoc end_psp_usp_usd_coc = 1 [json_name = "end-psp-usp-usd-coc"];
               }
               EndPspUspUsdCocs end_psp_usp_usd_cocs = 12 [json_name = "end-psp-usp-usd-cocs"];
               message EndXPspUspUsds {
                  message EndXPspUspUsd {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                     string te_frr_flag = 4 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 5 [json_name = "te-frr-delay-time-remain"];
                  }
                  repeated EndXPspUspUsd end_x_psp_usp_usd = 1 [json_name = "end-x-psp-usp-usd"];
               }
               EndXPspUspUsds end_x_psp_usp_usds = 13 [json_name = "end-x-psp-usp-usds"];
               message EndXPspUspUsdCocs {
                  message EndXPspUspUsdCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 3 [json_name = "next-hops"];
                     string te_frr_flag = 4 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 5 [json_name = "te-frr-delay-time-remain"];
                  }
                  repeated EndXPspUspUsdCoc end_x_psp_usp_usd_coc = 1 [json_name = "end-x-psp-usp-usd-coc"];
               }
               EndXPspUspUsdCocs end_x_psp_usp_usd_cocs = 14 [json_name = "end-x-psp-usp-usd-cocs"];
               message EndB6S {
                  message EndB6 {
                     string value = 1 [json_name = "value"];
                     uint32 tunnel_id = 2 [json_name = "tunnel-id"];
                     string tunnel_type = 3 [json_name = "tunnel-type"];
                     uint32 tunnel_vrf_id = 4 [json_name = "tunnel-vrf-id"];
                     enum EncapsulationMode {
                        EncapsulationMode_INVALID = 0;
                        EncapsulationMode_INSERT = 1;
                        EncapsulationMode_ENCAPS = 2;
                        EncapsulationMode_INSERTX_ENCAPS = 3;
                        EncapsulationMode_NONE = 4;
                     };
                     EncapsulationMode encapsulation_mode = 5 [json_name = "encapsulation-mode"];
                     bool slice_enable = 6 [json_name = "slice-enable"];
                     string locator_name = 7 [json_name = "locator-name"];
                  }
                  repeated EndB6 end_b6 = 1 [json_name = "end-b6"];
               }
               EndB6S end_b6s = 15 [json_name = "end-b6s"];
               message EndDt2Us {
                  message EndDt2U {
                     string value = 1 [json_name = "value"];
                     uint32 bd_id = 2 [json_name = "bd-id"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt2U end_dt2u = 1 [json_name = "end-dt2u"];
               }
               EndDt2Us end_dt2us = 16 [json_name = "end-dt2us"];
               message EndDt2Uls {
                  message EndDt2Ul {
                     string value = 1 [json_name = "value"];
                     uint32 bd_id = 2 [json_name = "bd-id"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt2Ul end_dt2ul = 1 [json_name = "end-dt2ul"];
               }
               EndDt2Uls end_dt2uls = 17 [json_name = "end-dt2uls"];
               message EndDt2Ms {
                  message EndDt2M {
                     string value = 1 [json_name = "value"];
                     uint32 bd_id = 2 [json_name = "bd-id"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt2M end_dt2m = 1 [json_name = "end-dt2m"];
               }
               EndDt2Ms end_dt2ms = 18 [json_name = "end-dt2ms"];
               message EndDx2S {
                  message EndDx2 {
                     string value = 1 [json_name = "value"];
                     uint32 evpl_id = 2 [json_name = "evpl-id"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDx2 end_dx2 = 1 [json_name = "end-dx2"];
               }
               EndDx2S end_dx2s = 19 [json_name = "end-dx2s"];
               message EndDx2Ls {
                  message EndDx2L {
                     string value = 1 [json_name = "value"];
                     uint32 evpl_id = 2 [json_name = "evpl-id"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDx2L end_dx2l = 1 [json_name = "end-dx2l"];
               }
               EndDx2Ls end_dx2ls = 20 [json_name = "end-dx2ls"];
               message EndCocs {
                  message EndCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndCoc end_coc = 1 [json_name = "end-coc"];
               }
               EndCocs end_cocs = 21 [json_name = "end-cocs"];
               message EndPspCocs {
                  message EndPspCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                  }
                  repeated EndPspCoc end_psp_coc = 1 [json_name = "end-psp-coc"];
               }
               EndPspCocs end_psp_cocs = 22 [json_name = "end-psp-cocs"];
               message EndXCocs {
                  message EndXCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     string te_frr_flag = 3 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 4 [json_name = "te-frr-delay-time-remain"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 5 [json_name = "next-hops"];
                  }
                  repeated EndXCoc end_x_coc = 1 [json_name = "end-x-coc"];
               }
               EndXCocs end_x_cocs = 23 [json_name = "end-x-cocs"];
               message EndXPspCocs {
                  message EndXPspCoc {
                     string value = 1 [json_name = "value"];
                     string locator_name = 2 [json_name = "locator-name"];
                     string te_frr_flag = 3 [json_name = "te-frr-flag"];
                     uint32 te_frr_delay_time_remain = 4 [json_name = "te-frr-delay-time-remain"];
                     message NextHops {
                        message NextHop {
                           string if_name = 1 [json_name = "if-name"];
                           string next_hop = 2 [json_name = "next-hop"];
                        }
                        repeated NextHop next_hop = 1 [json_name = "next-hop"];
                     }
                     NextHops next_hops = 5 [json_name = "next-hops"];
                  }
                  repeated EndXPspCoc end_x_psp_coc = 1 [json_name = "end-x-psp-coc"];
               }
               EndXPspCocs end_x_psp_cocs = 24 [json_name = "end-x-psp-cocs"];
               message EndDt46S {
                  message EndDt46 {
                     string value = 1 [json_name = "value"];
                     string vpn_name = 2 [json_name = "vpn-name"];
                     string locator_name = 3 [json_name = "locator-name"];
                  }
                  repeated EndDt46 end_dt46 = 1 [json_name = "end-dt46"];
               }
               EndDt46S end_dt46s = 25 [json_name = "end-dt46s"];
            }
            LocalSids local_sids = 5 [json_name = "local-sids"];
            message Srpolicy {
               message PolicyAttributes {
                  uint32 switch_delay = 1 [json_name = "switch-delay"];
                  uint32 delete_delay = 2 [json_name = "delete-delay"];
                  bool hsb_enable = 3 [json_name = "hsb-enable"];
                  bool traffic_statistics_enable = 4 [json_name = "traffic-statistics-enable"];
                  bool bgp_ls_enable = 5 [json_name = "bgp-ls-enable"];
                  string locator = 6 [json_name = "locator"];
                  message Bfd {
                     enum Enable {
                        Enable_DISABLE = 0;
                        Enable_SBFDX_ENABLE = 1;
                        Enable_UBFDX_ENABLE = 2;
                        Enable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 3;
                        Enable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                     };
                     Enable enable = 1 [json_name = "enable"];
                     uint32 min_tx = 2 [json_name = "min-tx"];
                     uint32 min_rx = 3 [json_name = "min-rx"];
                     uint32 multi_num = 4 [json_name = "multi-num"];
                     enum Bypass {
                        Bypass_BYPASS = 0;
                        Bypass_NOBYPASS = 1;
                     };
                     Bypass bypass = 5 [json_name = "bypass"];
                     uint32 backup_min_tx = 6 [json_name = "backup-min-tx"];
                     uint32 backup_multi_num = 7 [json_name = "backup-multi-num"];
                  }
                  Bfd bfd = 7 [json_name = "bfd"];
                  message SegmentLists {
                     message SegmentList {
                        string name = 1 [json_name = "name"];
                        message Segments {
                           message Segment {
                              uint32 index = 1 [json_name = "index"];
                              message Type_SegmentType2 {
                                 string sid_value_2 = 1 [json_name = "sid-value-2"];
                                 uint32 block_length = 2 [json_name = "block-length"];
                                 bool verification = 3 [json_name = "verification"];
                              }
                              oneof Type {
                                 Type_SegmentType2 type_segment_type_2 = 3 [json_name = "segment-type-2"];
                              }
                           }
                           repeated Segment segment = 1 [json_name = "segment"];
                        }
                        Segments segments = 2 [json_name = "segments"];
                     }
                     repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                  }
                  SegmentLists segment_lists = 8 [json_name = "segment-lists"];
                  uint32 policy_threshold_upper = 9 [json_name = "policy-threshold-upper"];
                  uint32 policy_threshold_lower = 10 [json_name = "policy-threshold-lower"];
                  uint32 list_threshold_upper = 11 [json_name = "list-threshold-upper"];
                  uint32 list_threshold_lower = 12 [json_name = "list-threshold-lower"];
                  bool path_verification = 13 [json_name = "path-verification"];
                  bool suppress_flapping = 14 [json_name = "suppress-flapping"];
                  uint32 group_threshold_upper = 15 [json_name = "group-threshold-upper"];
                  uint32 group_threshold_lower = 16 [json_name = "group-threshold-lower"];
                  bool path_verification_specified_sid = 17 [json_name = "path-verification-specified-sid"];
                  uint32 auto_bandwidth_sample_interval = 18 [json_name = "auto-bandwidth-sample-interval"];
                  bool auto_bandwidth_enable = 19 [json_name = "auto-bandwidth-enable"];
               }
               PolicyAttributes policy_attributes = 1 [json_name = "policy-attributes"];
               message Policys {
                  message Policy {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     message BindingSid {
                        enum Dataplane {
                           INVALID_ENUM_VALUE_Dataplane = 0;
                           Dataplane_MPLS = 1;
                           Dataplane_SRV6 = 2;
                        };
                        Dataplane dataplane = 1 [json_name = "dataplane"];
                        string value = 2 [json_name = "value"];
                     }
                     BindingSid binding_sid = 4 [json_name = "binding-sid"];
                     enum AdminState {
                        AdminState_DOWN = 0;
                        AdminState_UP = 1;
                     };
                     AdminState admin_state = 5 [json_name = "admin-state"];
                     uint32 mtu = 6 [json_name = "mtu"];
                     enum HsbEnable {
                        HsbEnable_NOTX_CONFIGURED = 0;
                        HsbEnable_ENABLE = 1;
                        HsbEnable_DISABLE = 2;
                     };
                     HsbEnable hsb_enable = 7 [json_name = "hsb-enable"];
                     enum BfdEnable {
                        BfdEnable_NOTX_CONFIGURED = 0;
                        BfdEnable_SBFDX_ENABLE = 1;
                        BfdEnable_DISABLE = 2;
                        BfdEnable_UBFDX_ENABLE = 3;
                        BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                        BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 5;
                     };
                     BfdEnable bfd_enable = 8 [json_name = "bfd-enable"];
                     enum TrafficStatisticsEnable {
                        TrafficStatisticsEnable_NOTX_CONFIGURED = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                        TrafficStatisticsEnable_DISABLE = 2;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 9 [json_name = "traffic-statistics-enable"];
                     message DiffservMode {
                        enum PipeMode {
                           INVALID_ENUM_VALUE_PipeMode = 0;
                           PipeMode_PIPE = 1;
                           PipeMode_UNIFORM = 2;
                        };
                        PipeMode pipe_mode = 1 [json_name = "pipe-mode"];
                        enum ServiceClass {
                           ServiceClass_BE = 0;
                           ServiceClass_AF1 = 1;
                           ServiceClass_AF2 = 2;
                           ServiceClass_AF3 = 3;
                           ServiceClass_AF4 = 4;
                           ServiceClass_EF = 5;
                           ServiceClass_CS6 = 6;
                           ServiceClass_CS7 = 7;
                        };
                        ServiceClass service_class = 2 [json_name = "service-class"];
                        enum ServiceColor {
                           ServiceColor_GREEN = 0;
                           ServiceColor_YELLOW = 1;
                           ServiceColor_RED = 2;
                        };
                        ServiceColor service_color = 3 [json_name = "service-color"];
                     }
                     DiffservMode diffserv_mode = 10 [json_name = "diffserv-mode"];
                     message CandidatePaths {
                        message CandidatePath {
                           enum ProtocolOrigin {
                              INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                              ProtocolOrigin_PCEP = 10;
                              ProtocolOrigin_BGP = 20;
                              ProtocolOrigin_CONFIGURATION = 30;
                           };
                           ProtocolOrigin protocol_origin = 1 [json_name = "protocol-origin"];
                           string originator = 2 [json_name = "originator"];
                           uint32 discriminator = 3 [json_name = "discriminator"];
                           uint32 preference = 4 [json_name = "preference"];
                           uint32 template_id = 6 [json_name = "template-id"];
                           uint32 network_slice_id = 7 [json_name = "network-slice-id"];
                           message Type_Explicit {
                              message SegmentLists {
                                 message SegmentList {
                                    string name = 1 [json_name = "name"];
                                    uint32 weight = 2 [json_name = "weight"];
                                    uint32 path_mtu = 3 [json_name = "path-mtu"];
                                    message BindingSid {
                                       enum Dataplane {
                                          INVALID_ENUM_VALUE_Dataplane = 0;
                                          Dataplane_MPLS = 1;
                                          Dataplane_SRV6 = 2;
                                       };
                                       Dataplane dataplane = 1 [json_name = "dataplane"];
                                       string value = 2 [json_name = "value"];
                                    }
                                    BindingSid binding_sid = 4 [json_name = "binding-sid"];
                                    message ReverseBindingSid {
                                       enum Dataplane {
                                          INVALID_ENUM_VALUE_Dataplane = 0;
                                          Dataplane_MPLS = 1;
                                          Dataplane_SRV6 = 2;
                                       };
                                       Dataplane dataplane = 1 [json_name = "dataplane"];
                                       string value = 2 [json_name = "value"];
                                    }
                                    ReverseBindingSid reverse_binding_sid = 5 [json_name = "reverse-binding-sid"];
                                 }
                                 repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                              }
                              SegmentLists segment_lists = 1 [json_name = "segment-lists"];
                           }
                           oneof Type {
                              Type_Explicit type_explicit = 8 [json_name = "explicit"];
                           }
                        }
                        repeated CandidatePath candidate_path = 1 [json_name = "candidate-path"];
                     }
                     CandidatePaths candidate_paths = 11 [json_name = "candidate-paths"];
                     enum PathVerification {
                        PathVerification_NOTX_CONFIGURED = 0;
                        PathVerification_ENABLE = 1;
                        PathVerification_DISABLE = 2;
                        PathVerification_SPECIFIEDX_SIDX_ENABLE = 3;
                     };
                     PathVerification path_verification = 12 [json_name = "path-verification"];
                     enum BfdBypass {
                        BfdBypass_NOTX_CONFIGURED = 0;
                        BfdBypass_BFDX_BYPASS = 1;
                        BfdBypass_BFDX_NOBYPASS = 2;
                     };
                     BfdBypass bfd_bypass = 13 [json_name = "bfd-bypass"];
                     uint32 bfd_min_tx = 14 [json_name = "bfd-min-tx"];
                     uint32 bfd_multi_num = 15 [json_name = "bfd-multi-num"];
                     uint32 bfd_backup_min_tx = 16 [json_name = "bfd-backup-min-tx"];
                     uint32 bfd_backup_multi_num = 17 [json_name = "bfd-backup-multi-num"];
                     enum EncapsulationMode {
                        INVALID_ENUM_VALUE_EncapsulationMode = 0;
                        EncapsulationMode_INSERT = 1;
                        EncapsulationMode_ENCAPS = 2;
                        EncapsulationMode_INSERTX_ENCAPS = 3;
                     };
                     EncapsulationMode encapsulation_mode = 18 [json_name = "encapsulation-mode"];
                     enum ForwardNoBypass {
                        INVALID_ENUM_VALUE_ForwardNoBypass = 0;
                        ForwardNoBypass_NOX_BYPASS = 1;
                     };
                     ForwardNoBypass forward_no_bypass = 19 [json_name = "forward-no-bypass"];
                     enum IfitDelayEnable {
                        IfitDelayEnable_DISABLE = 0;
                        IfitDelayEnable_ENABLE = 1;
                     };
                     IfitDelayEnable ifit_delay_enable = 20 [json_name = "ifit-delay-enable"];
                     enum IfitLossRateEnable {
                        IfitLossRateEnable_DISABLE = 0;
                        IfitLossRateEnable_ENABLE = 1;
                     };
                     IfitLossRateEnable ifit_loss_rate_enable = 21 [json_name = "ifit-loss-rate-enable"];
                     uint32 ifit_interval = 22 [json_name = "ifit-interval"];
                     enum IfitMeasureMode {
                        INVALID_ENUM_VALUE_IfitMeasureMode = 0;
                        IfitMeasureMode_E2E = 3;
                        IfitMeasureMode_TRACE = 4;
                     };
                     IfitMeasureMode ifit_measure_mode = 23 [json_name = "ifit-measure-mode"];
                  }
                  repeated Policy policy = 1 [json_name = "policy"];
               }
               Policys policys = 2 [json_name = "policys"];
               message PolicyTrafficStatistics {
                  message PolicyTrafficStatistic {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string binding_sid = 4 [json_name = "binding-sid"];
                     uint32 tunnel_id = 5 [json_name = "tunnel-id"];
                     uint32 flow_period = 6 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 7 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 8 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 9 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 10 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 11 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 12 [json_name = "total-byte"];
                     uint64 total_packet = 13 [json_name = "total-packet"];
                  }
                  repeated PolicyTrafficStatistic policy_traffic_statistic = 1 [json_name = "policy-traffic-statistic"];
               }
               PolicyTrafficStatistics policy_traffic_statistics = 3 [json_name = "policy-traffic-statistics"];
               message ListTrafficStatistics {
                  message ListTrafficStatistic {
                     uint32 segment_list_id = 1 [json_name = "segment-list-id"];
                     uint32 xc_index = 2 [json_name = "xc-index"];
                     string policy_name = 3 [json_name = "policy-name"];
                     string endpoint = 4 [json_name = "endpoint"];
                     uint32 color = 5 [json_name = "color"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     uint32 preference = 8 [json_name = "preference"];
                     enum ProtocolOrigin {
                        INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                        ProtocolOrigin_PCEP = 10;
                        ProtocolOrigin_BGP = 20;
                        ProtocolOrigin_CONFIGURATION = 30;
                     };
                     ProtocolOrigin protocol_origin = 9 [json_name = "protocol-origin"];
                     uint32 asn = 10 [json_name = "asn"];
                     string node_address = 11 [json_name = "node-address"];
                     uint32 discriminator = 12 [json_name = "discriminator"];
                     enum PathType {
                        INVALID_ENUM_VALUE_PathType = 0;
                        PathType_PRIMARY = 1;
                        PathType_BACKUP = 2;
                        PathType_NOX_ACTIVE = 3;
                     };
                     PathType path_type = 13 [json_name = "path-type"];
                     message Sids {
                        message Sid {
                           uint32 index = 1 [json_name = "index"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated Sid sid = 1 [json_name = "sid"];
                     }
                     Sids sids = 14 [json_name = "sids"];
                     uint32 flow_period = 15 [json_name = "flow-period"];
                     uint64 last_period_byte_rate = 16 [json_name = "last-period-byte-rate"];
                     uint64 last_period_pkt_rate = 17 [json_name = "last-period-pkt-rate"];
                     uint64 display_interval = 18 [json_name = "display-interval"];
                     uint64 interval_byte_rate = 19 [json_name = "interval-byte-rate"];
                     uint64 interval_pkt_rate = 20 [json_name = "interval-pkt-rate"];
                     uint64 total_byte = 21 [json_name = "total-byte"];
                     uint64 total_packet = 22 [json_name = "total-packet"];
                     bool no_resource_flag = 23 [json_name = "no-resource-flag"];
                     uint32 path_id = 24 [json_name = "path-id"];
                  }
                  repeated ListTrafficStatistic list_traffic_statistic = 1 [json_name = "list-traffic-statistic"];
               }
               ListTrafficStatistics list_traffic_statistics = 4 [json_name = "list-traffic-statistics"];
               message PolicyInfos {
                  message PolicyInfo {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string state = 4 [json_name = "state"];
                     enum AdminState {
                        AdminState_DOWN = 0;
                        AdminState_UP = 1;
                     };
                     AdminState admin_state = 5 [json_name = "admin-state"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     enum TunnelType {
                        TunnelType_INVALID = 0;
                        TunnelType_SRX_MPLSX_TEX_POLICY = 50;
                        TunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                        TunnelType_SRV6X_TEX_POLICY = 52;
                        TunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 8 [json_name = "tunnel-type"];
                     enum TrafficStatisticsEnable {
                        TrafficStatisticsEnable_DISABLE = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 9 [json_name = "traffic-statistics-enable"];
                     uint32 candidate_path_count = 10 [json_name = "candidate-path-count"];
                     message CandidatePaths {
                        message CandidatePath {
                           enum ProtocolOrigin {
                              INVALID_ENUM_VALUE_ProtocolOrigin = 0;
                              ProtocolOrigin_PCEP = 10;
                              ProtocolOrigin_BGP = 20;
                              ProtocolOrigin_CONFIGURATION = 30;
                           };
                           ProtocolOrigin protocol_origin = 1 [json_name = "protocol-origin"];
                           uint32 asn = 2 [json_name = "asn"];
                           string node_address = 3 [json_name = "node-address"];
                           uint32 discriminator = 4 [json_name = "discriminator"];
                           uint32 preference = 5 [json_name = "preference"];
                           string path_state = 6 [json_name = "path-state"];
                           enum PathType {
                              INVALID_ENUM_VALUE_PathType = 0;
                              PathType_PRIMARY = 1;
                              PathType_BACKUP = 2;
                              PathType_NOX_ACTIVE = 3;
                           };
                           PathType path_type = 7 [json_name = "path-type"];
                           string binding_sid = 8 [json_name = "binding-sid"];
                           uint32 group_id = 9 [json_name = "group-id"];
                           string policy_name = 10 [json_name = "policy-name"];
                           uint32 delay_timer_remain = 11 [json_name = "delay-timer-remain"];
                           uint32 segment_list_count = 12 [json_name = "segment-list-count"];
                           message SegmentLists {
                              message SegmentList {
                                 uint32 id = 1 [json_name = "id"];
                                 string name = 2 [json_name = "name"];
                                 uint32 xc_index = 3 [json_name = "xc-index"];
                                 uint32 delay_timer_remain = 4 [json_name = "delay-timer-remain"];
                                 string state = 5 [json_name = "state"];
                                 uint32 weight = 6 [json_name = "weight"];
                                 message Sids {
                                    message Sid {
                                       uint32 index = 1 [json_name = "index"];
                                       string value = 2 [json_name = "value"];
                                       uint32 block_length = 3 [json_name = "block-length"];
                                       uint32 compress_length = 4 [json_name = "compress-length"];
                                       bool verification = 5 [json_name = "verification"];
                                    }
                                    repeated Sid sid = 1 [json_name = "sid"];
                                 }
                                 Sids sids = 7 [json_name = "sids"];
                                 string verification_state = 8 [json_name = "verification-state"];
                                 uint32 suppress_time_remain = 9 [json_name = "suppress-time-remain"];
                                 uint32 path_mtu = 10 [json_name = "path-mtu"];
                                 uint32 active_path_mtu = 11 [json_name = "active-path-mtu"];
                                 string bfd_state = 12 [json_name = "bfd-state"];
                                 uint32 network_slice_id = 13 [json_name = "network-slice-id"];
                                 string binding_sid = 14 [json_name = "binding-sid"];
                                 string reverse_binding_sid = 15 [json_name = "reverse-binding-sid"];
                                 message SlaInfos {
                                    message SlaInfo {
                                       enum Type {
                                          Type_ONEX_WAYX_DELAY = 0;
                                          Type_TWOX_WAYX_DELAY = 1;
                                          Type_ONEX_WAYX_JITTER = 2;
                                          Type_TWOX_WAYX_JITTER = 3;
                                          Type_ONEX_WAYX_LOSS = 4;
                                          Type_TWOX_WAYX_LOSS = 5;
                                       };
                                       Type type = 1 [json_name = "type"];
                                       uint32 index = 2 [json_name = "index"];
                                       uint32 value = 3 [json_name = "value"];
                                    }
                                    repeated SlaInfo sla_info = 1 [json_name = "sla-info"];
                                 }
                                 SlaInfos sla_infos = 16 [json_name = "sla-infos"];
                                 string ifit_latest_update_time = 17 [json_name = "ifit-latest-update-time"];
                                 uint64 ifit_latest_period = 18 [json_name = "ifit-latest-period"];
                              }
                              repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                           }
                           SegmentLists segment_lists = 13 [json_name = "segment-lists"];
                           enum PathVerification {
                              PathVerification_DISABLE = 0;
                              PathVerification_ENABLE = 1;
                              PathVerification_SPECIFIEDX_SIDX_ENABLE = 2;
                           };
                           PathVerification path_verification = 14 [json_name = "path-verification"];
                           uint32 network_slice_id = 15 [json_name = "network-slice-id"];
                           uint32 template_id = 16 [json_name = "template-id"];
                        }
                        repeated CandidatePath candidate_path = 1 [json_name = "candidate-path"];
                     }
                     CandidatePaths candidate_paths = 11 [json_name = "candidate-paths"];
                     string state_change_time = 12 [json_name = "state-change-time"];
                     enum BfdEnable {
                        BfdEnable_DISABLE = 0;
                        BfdEnable_SBFDX_ENABLE = 1;
                        BfdEnable_UBFDX_ENABLE = 2;
                        BfdEnable_UBFDX_ENABLEX_REVERSEX_PATHX_BSID = 3;
                        BfdEnable_SBFDX_ENABLEX_REVERSEX_PATHX_BSID = 4;
                     };
                     BfdEnable bfd_enable = 13 [json_name = "bfd-enable"];
                     enum HsbEnable {
                        HsbEnable_DISABLE = 0;
                        HsbEnable_ENABLE = 1;
                     };
                     HsbEnable hsb_enable = 14 [json_name = "hsb-enable"];
                     enum BfdBypass {
                        BfdBypass_BYPASS = 0;
                        BfdBypass_NOBYPASS = 1;
                     };
                     BfdBypass bfd_bypass = 15 [json_name = "bfd-bypass"];
                     enum EncapsulationMode {
                        EncapsulationMode_INVALID = 0;
                        EncapsulationMode_INSERT = 1;
                        EncapsulationMode_ENCAPS = 2;
                        EncapsulationMode_INSERTX_ENCAPS = 3;
                     };
                     EncapsulationMode encapsulation_mode = 16 [json_name = "encapsulation-mode"];
                     uint32 ifit_one_way_delay = 17 [json_name = "ifit-one-way-delay"];
                     uint32 ifit_one_way_jitter = 18 [json_name = "ifit-one-way-jitter"];
                     uint32 ifit_one_way_loss = 19 [json_name = "ifit-one-way-loss"];
                     uint64 ifit_one_way_cmi = 20 [json_name = "ifit-one-way-cmi"];
                     uint32 ifit_two_way_delay = 21 [json_name = "ifit-two-way-delay"];
                     uint32 ifit_two_way_jitter = 22 [json_name = "ifit-two-way-jitter"];
                     uint32 ifit_two_way_loss = 23 [json_name = "ifit-two-way-loss"];
                     uint64 ifit_two_way_cmi = 24 [json_name = "ifit-two-way-cmi"];
                     enum IfitLossRateEnable {
                        IfitLossRateEnable_DISABLE = 0;
                        IfitLossRateEnable_ENABLE = 1;
                     };
                     IfitLossRateEnable ifit_loss_rate_enable = 25 [json_name = "ifit-loss-rate-enable"];
                     enum IfitDelayEnable {
                        IfitDelayEnable_DISABLE = 0;
                        IfitDelayEnable_ENABLE = 1;
                     };
                     IfitDelayEnable ifit_delay_enable = 26 [json_name = "ifit-delay-enable"];
                     uint32 ifit_interval = 27 [json_name = "ifit-interval"];
                     enum IfitMeasureMode {
                        INVALID_ENUM_VALUE_IfitMeasureMode = 0;
                        IfitMeasureMode_E2E = 3;
                        IfitMeasureMode_TRACE = 4;
                     };
                     IfitMeasureMode ifit_measure_mode = 28 [json_name = "ifit-measure-mode"];
                     enum BsidEncapsulationMode {
                        BsidEncapsulationMode_INVALID = 0;
                        BsidEncapsulationMode_INSERT = 1;
                        BsidEncapsulationMode_ENCAPS = 2;
                        BsidEncapsulationMode_INSERTX_ENCAPS = 3;
                     };
                     BsidEncapsulationMode bsid_encapsulation_mode = 29 [json_name = "bsid-encapsulation-mode"];
                  }
                  repeated PolicyInfo policy_info = 1 [json_name = "policy-info"];
               }
               PolicyInfos policy_infos = 5 [json_name = "policy-infos"];
               uint32 mtu6 = 8 [json_name = "mtu6"];
               bool spread_mtu_flag = 9 [json_name = "spread-mtu-flag"];
               message DynamicSrPolicyGroups {
                  message DynamicSrPolicyGroup {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     uint32 tunnel_id = 3 [json_name = "tunnel-id"];
                     enum TunnelType {
                        TunnelType_INVALID = 0;
                        TunnelType_SRX_MPLSX_TEX_POLICY = 50;
                        TunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                        TunnelType_SRV6X_TEX_POLICY = 52;
                        TunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 4 [json_name = "tunnel-type"];
                     enum State {
                        State_DOWN = 0;
                        State_UP = 1;
                        State_DELAYX_DELETE = 2;
                     };
                     State state = 5 [json_name = "state"];
                     string state_change_time = 6 [json_name = "state-change-time"];
                     uint32 delay_timer_remain = 7 [json_name = "delay-timer-remain"];
                     uint32 map_count = 8 [json_name = "map-count"];
                     uint32 up_map_count = 9 [json_name = "up-map-count"];
                     message Maps {
                        message Map {
                           uint32 color = 1 [json_name = "color"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 2 [json_name = "af-type"];
                           enum FlowPriorityType {
                              FlowPriorityType_DSCP = 0;
                           };
                           FlowPriorityType flow_priority_type = 3 [json_name = "flow-priority-type"];
                           string flow_priority_list = 4 [json_name = "flow-priority-list"];
                           uint32 policy_tunnel_id = 5 [json_name = "policy-tunnel-id"];
                           enum PolicyTunnelType {
                              PolicyTunnelType_INVALID = 0;
                              PolicyTunnelType_SRX_MPLSX_TEX_POLICY = 50;
                              PolicyTunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                              PolicyTunnelType_SRV6X_TEX_POLICY = 52;
                              PolicyTunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                           };
                           PolicyTunnelType policy_tunnel_type = 6 [json_name = "policy-tunnel-type"];
                        }
                        repeated Map map = 1 [json_name = "map"];
                     }
                     Maps maps = 10 [json_name = "maps"];
                  }
                  repeated DynamicSrPolicyGroup dynamic_sr_policy_group = 1 [json_name = "dynamic-sr-policy-group"];
               }
               DynamicSrPolicyGroups dynamic_sr_policy_groups = 10 [json_name = "dynamic-sr-policy-groups"];
               message DynamicPolicyGroupDownReasons {
                  message DynamicPolicyGroupDownReason {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string up_time = 3 [json_name = "up-time"];
                     uint32 up_millisecond = 4 [json_name = "up-millisecond"];
                     uint32 tunnel_id = 5 [json_name = "tunnel-id"];
                     enum TunnelType {
                        TunnelType_INVALID = 0;
                        TunnelType_SRX_MPLSX_TEX_POLICY = 50;
                        TunnelType_SRX_MPLSX_TEX_POLICYX_GROUP = 51;
                        TunnelType_SRV6X_TEX_POLICY = 52;
                        TunnelType_SRV6X_TEX_POLICYX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 6 [json_name = "tunnel-type"];
                     string create_time = 7 [json_name = "create-time"];
                     string down_time = 8 [json_name = "down-time"];
                     enum DownReason {
                        DownReason_NONE = 0;
                        DownReason_NOX_ACTIVEX_SRX_POLICY = 1;
                        DownReason_SUBSCRIBEX_DELETE = 2;
                        DownReason_CONFIGURATIONX_DELETE = 3;
                        DownReason_UNKNOWNX_REASON = 4;
                     };
                     DownReason down_reason = 9 [json_name = "down-reason"];
                     message MapDownReasons {
                        message MapDownReason {
                           uint32 sr_policy_color = 1 [json_name = "sr-policy-color"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 2 [json_name = "af-type"];
                           string up_time = 3 [json_name = "up-time"];
                           uint32 up_millisecond = 4 [json_name = "up-millisecond"];
                           string down_time = 5 [json_name = "down-time"];
                           enum DownReason {
                              DownReason_NONE = 0;
                              DownReason_SRX_POLICYX_DOWN = 1;
                              DownReason_CONFIGURATIONX_DELETE = 2;
                              DownReason_SRX_POLICYX_GROUPX_DELETE = 3;
                              DownReason_UNKNOWNX_REASON = 4;
                           };
                           DownReason down_reason = 6 [json_name = "down-reason"];
                        }
                        repeated MapDownReason map_down_reason = 1 [json_name = "map-down-reason"];
                     }
                     MapDownReasons map_down_reasons = 10 [json_name = "map-down-reasons"];
                  }
                  repeated DynamicPolicyGroupDownReason dynamic_policy_group_down_reason = 1 [json_name = "dynamic-policy-group-down-reason"];
               }
               DynamicPolicyGroupDownReasons dynamic_policy_group_down_reasons = 11 [json_name = "dynamic-policy-group-down-reasons"];
               message PolicyGroupStatistic {
                  uint32 mapping_policy = 1 [json_name = "mapping-policy"];
                  uint32 sr_policy_group = 2 [json_name = "sr-policy-group"];
                  uint32 sr_policy_group_up = 3 [json_name = "sr-policy-group-up"];
                  uint32 dscp_map = 4 [json_name = "dscp-map"];
                  uint32 dscp_map_up = 5 [json_name = "dscp-map-up"];
               }
               PolicyGroupStatistic policy_group_statistic = 12 [json_name = "policy-group-statistic"];
               message TemplateInfos {
                  message TemplateInfo {
                     uint32 template_id = 1 [json_name = "template-id"];
                     enum BfdEnable {
                        INVALID_ENUM_VALUE_BfdEnable = 0;
                        BfdEnable_ENABLE = 1;
                        BfdEnable_DISABLE = 2;
                     };
                     BfdEnable bfd_enable = 2 [json_name = "bfd-enable"];
                     enum HsbEnable {
                        INVALID_ENUM_VALUE_HsbEnable = 0;
                        HsbEnable_ENABLE = 1;
                        HsbEnable_DISABLE = 2;
                     };
                     HsbEnable hsb_enable = 3 [json_name = "hsb-enable"];
                     enum TrafficStatisticsEnable {
                        INVALID_ENUM_VALUE_TrafficStatisticsEnable = 0;
                        TrafficStatisticsEnable_ENABLE = 1;
                        TrafficStatisticsEnable_DISABLE = 2;
                     };
                     TrafficStatisticsEnable traffic_statistics_enable = 4 [json_name = "traffic-statistics-enable"];
                  }
                  repeated TemplateInfo template_info = 1 [json_name = "template-info"];
               }
               TemplateInfos template_infos = 13 [json_name = "template-infos"];
               message SourceSids {
                  message SourceSid {
                     string sid_value = 1 [json_name = "sid-value"];
                     uint32 topology = 2 [json_name = "topology"];
                     enum FuncType {
                        INVALID_ENUM_VALUE_FuncType = 0;
                        FuncType_END = 1;
                        FuncType_ENDX_X = 4;
                     };
                     FuncType func_type = 3 [json_name = "func-type"];
                     bool overload = 4 [json_name = "overload"];
                     message Sources {
                        message Source {
                           enum Protocol {
                              INVALID_ENUM_VALUE_Protocol = 0;
                              Protocol_ISIS = 1;
                           };
                           Protocol protocol = 1 [json_name = "protocol"];
                           uint32 process = 2 [json_name = "process"];
                           string sub_process = 3 [json_name = "sub-process"];
                           string node = 4 [json_name = "node"];
                           string local = 5 [json_name = "local"];
                           string peer = 6 [json_name = "peer"];
                        }
                        repeated Source source = 1 [json_name = "source"];
                     }
                     Sources sources = 5 [json_name = "sources"];
                  }
                  repeated SourceSid source_sid = 1 [json_name = "source-sid"];
               }
               SourceSids source_sids = 14 [json_name = "source-sids"];
               message SidStatistics {
                  uint32 endx_total_num = 1 [json_name = "endx-total-num"];
                  uint32 end_total_num = 2 [json_name = "end-total-num"];
                  message SidNums {
                     message SidNum {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_ISIS = 1;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process = 2 [json_name = "process"];
                        string sub_process = 3 [json_name = "sub-process"];
                        uint32 endx_num = 4 [json_name = "endx-num"];
                        uint32 end_num = 5 [json_name = "end-num"];
                     }
                     repeated SidNum sid_num = 1 [json_name = "sid-num"];
                  }
                  SidNums sid_nums = 3 [json_name = "sid-nums"];
               }
               SidStatistics sid_statistics = 15 [json_name = "sid-statistics"];
               message PolicyDownReasons {
                  message PolicyDownReason {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string up_time = 3 [json_name = "up-time"];
                     uint32 up_millisecond = 4 [json_name = "up-millisecond"];
                     string name = 5 [json_name = "name"];
                     string binding_sid = 6 [json_name = "binding-sid"];
                     uint32 tunnel_id = 7 [json_name = "tunnel-id"];
                     string down_time = 8 [json_name = "down-time"];
                     string down_reason = 9 [json_name = "down-reason"];
                     message ListDownReasons {
                        message ListDownReason {
                           uint32 id = 1 [json_name = "id"];
                           string up_time = 2 [json_name = "up-time"];
                           uint32 up_millisecond = 3 [json_name = "up-millisecond"];
                           string name = 4 [json_name = "name"];
                           string down_time = 5 [json_name = "down-time"];
                           string down_reason = 6 [json_name = "down-reason"];
                           message Sids {
                              message Sid {
                                 uint32 index = 1 [json_name = "index"];
                                 string value = 2 [json_name = "value"];
                              }
                              repeated Sid sid = 1 [json_name = "sid"];
                           }
                           Sids sids = 7 [json_name = "sids"];
                           uint32 preference = 8 [json_name = "preference"];
                           uint32 network_slice_id = 9 [json_name = "network-slice-id"];
                           uint32 path_mtu = 10 [json_name = "path-mtu"];
                           uint32 weight = 11 [json_name = "weight"];
                        }
                        repeated ListDownReason list_down_reason = 1 [json_name = "list-down-reason"];
                     }
                     ListDownReasons list_down_reasons = 10 [json_name = "list-down-reasons"];
                  }
                  repeated PolicyDownReason policy_down_reason = 1 [json_name = "policy-down-reason"];
               }
               PolicyDownReasons policy_down_reasons = 16 [json_name = "policy-down-reasons"];
            }
            Srpolicy srpolicy = 6 [json_name = "srpolicy"];
            uint32 end_x_delay_time = 7 [json_name = "end-x-delay-time"];
            uint32 path_mtu = 8 [json_name = "path-mtu"];
            uint32 path_mtu_reserved = 9 [json_name = "path-mtu-reserved"];
            string proxy_peer_sid = 10 [json_name = "proxy-peer-sid"];
            message RemoteEndOps {
               message RemoteEndOp {
                  string sid = 1 [json_name = "sid"];
                  uint32 prefix_length = 2 [json_name = "prefix-length"];
               }
               repeated RemoteEndOp remote_end_op = 1 [json_name = "remote-end-op"];
            }
            RemoteEndOps remote_end_ops = 11 [json_name = "remote-end-ops"];
            message MappingPolicys {
               message MappingPolicy {
                  uint32 color = 1 [json_name = "color"];
                  string description = 2 [json_name = "description"];
                  enum Type {
                     Type_NONE = 0;
                     Type_SRX_POLICYX_DSCP = 1;
                  };
                  Type type = 3 [json_name = "type"];
                  message SrPolicyMaps {
                     message SrPolicyMap {
                        uint32 color = 1 [json_name = "color"];
                        enum AfType {
                           INVALID_ENUM_VALUE_AfType = 0;
                           AfType_IPV4 = 4;
                           AfType_IPV6 = 6;
                        };
                        AfType af_type = 2 [json_name = "af-type"];
                        enum FlowPriorityType {
                           FlowPriorityType_DSCP = 0;
                        };
                        FlowPriorityType flow_priority_type = 3 [json_name = "flow-priority-type"];
                        string dscp_value = 4 [json_name = "dscp-value"];
                     }
                     repeated SrPolicyMap sr_policy_map = 1 [json_name = "sr-policy-map"];
                  }
                  SrPolicyMaps sr_policy_maps = 4 [json_name = "sr-policy-maps"];
               }
               repeated MappingPolicy mapping_policy = 1 [json_name = "mapping-policy"];
            }
            MappingPolicys mapping_policys = 12 [json_name = "mapping-policys"];
            message GlobalIpv6UcAttribute {
               bool forward_mode_through = 1 [json_name = "forward-mode-through"];
               enum Srv6TtlMode {
                  INVALID_ENUM_VALUE_Srv6TtlMode = 0;
                  Srv6TtlMode_PIPE = 1;
                  Srv6TtlMode_UNIFORM = 3;
               };
               Srv6TtlMode srv6_ttl_mode = 2 [json_name = "srv6-ttl-mode"];
            }
            GlobalIpv6UcAttribute global_ipv6uc_attribute = 13 [json_name = "global-ipv6uc-attribute"];
            bool reduce_srh_enable = 14 [json_name = "reduce-srh-enable"];
            bool te_frr_enable_downgrade = 15 [json_name = "te-frr-enable-downgrade"];
            message Teflowgroup {
               uint32 group_threshold_upper = 1 [json_name = "group-threshold-upper"];
               uint32 group_threshold_lower = 2 [json_name = "group-threshold-lower"];
               message MappingPolicys {
                  message MappingPolicy {
                     uint32 color = 1 [json_name = "color"];
                     string name = 2 [json_name = "name"];
                     string description = 3 [json_name = "description"];
                     enum MatchType {
                        MatchType_DSCP = 0;
                        MatchType_SERVICEX_CLASS = 1;
                        MatchType_TEX_CLASS = 2;
                        MatchType_APNX_IDX_IPV6 = 3;
                     };
                     repeated MatchType match_type = 4 [json_name = "match-type"];
                     message DscpMaps {
                        message DscpMap {
                           bool default = 1 [json_name = "default"];
                           uint32 index = 2 [json_name = "index"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 3 [json_name = "af-type"];
                           string dscp_value = 4 [json_name = "dscp-value"];
                           message MatchTunnel_SrPolicy {
                              uint32 color = 1 [json_name = "color"];
                           }
                           message MatchTunnel_Ip {
                              bool native_ip = 1 [json_name = "native-ip"];
                           }
                           oneof MatchTunnel {
                              MatchTunnel_SrPolicy match_tunnel_sr_policy = 5 [json_name = "sr-policy"];
                              MatchTunnel_Ip match_tunnel_ip = 6 [json_name = "ip"];
                           }
                        }
                        repeated DscpMap dscp_map = 1 [json_name = "dscp-map"];
                     }
                     DscpMaps dscp_maps = 5 [json_name = "dscp-maps"];
                     message ServiceClassMaps {
                        message ServiceClassMap {
                           uint32 index = 1 [json_name = "index"];
                           enum ServiceClass {
                              ServiceClass_BE = 0;
                              ServiceClass_AF1 = 1;
                              ServiceClass_AF2 = 2;
                              ServiceClass_AF3 = 3;
                              ServiceClass_AF4 = 4;
                              ServiceClass_EF = 5;
                              ServiceClass_CS6 = 6;
                              ServiceClass_CS7 = 7;
                           };
                           repeated ServiceClass service_class = 2 [json_name = "service-class"];
                           message MatchTunnel_SrPolicy {
                              uint32 color = 1 [json_name = "color"];
                           }
                           message MatchTunnel_Ip {
                              bool native_ip = 1 [json_name = "native-ip"];
                           }
                           oneof MatchTunnel {
                              MatchTunnel_SrPolicy match_tunnel_sr_policy = 3 [json_name = "sr-policy"];
                              MatchTunnel_Ip match_tunnel_ip = 4 [json_name = "ip"];
                           }
                        }
                        repeated ServiceClassMap service_class_map = 1 [json_name = "service-class-map"];
                     }
                     ServiceClassMaps service_class_maps = 6 [json_name = "service-class-maps"];
                     message TeClassMaps {
                        message TeClassMap {
                           uint32 index = 1 [json_name = "index"];
                           uint32 te_class_id = 2 [json_name = "te-class-id"];
                           message MatchTunnel_SprPolicy {
                              string spr_policy_name = 1 [json_name = "spr-policy-name"];
                           }
                           message MatchTunnel_SrPolicy {
                              uint32 color = 1 [json_name = "color"];
                           }
                           message MatchTunnel_Ip {
                              bool native_ip = 1 [json_name = "native-ip"];
                           }
                           oneof MatchTunnel {
                              MatchTunnel_SprPolicy match_tunnel_spr_policy = 3 [json_name = "spr-policy"];
                              MatchTunnel_SrPolicy match_tunnel_sr_policy = 4 [json_name = "sr-policy"];
                              MatchTunnel_Ip match_tunnel_ip = 5 [json_name = "ip"];
                           }
                        }
                        repeated TeClassMap te_class_map = 1 [json_name = "te-class-map"];
                     }
                     TeClassMaps te_class_maps = 7 [json_name = "te-class-maps"];
                     message ApnIdIpv6Maps {
                        message ApnIdIpv6Map {
                           uint32 index = 1 [json_name = "index"];
                           string instance_name = 2 [json_name = "instance-name"];
                           message MatchTunnel_SrPolicy {
                              uint32 color = 1 [json_name = "color"];
                           }
                           message MatchTunnel_Ip {
                              bool native_ip = 1 [json_name = "native-ip"];
                           }
                           oneof MatchTunnel {
                              MatchTunnel_SrPolicy match_tunnel_sr_policy = 3 [json_name = "sr-policy"];
                              MatchTunnel_Ip match_tunnel_ip = 4 [json_name = "ip"];
                           }
                        }
                        repeated ApnIdIpv6Map apn_id_ipv6_map = 1 [json_name = "apn-id-ipv6-map"];
                     }
                     ApnIdIpv6Maps apn_id_ipv6_maps = 8 [json_name = "apn-id-ipv6-maps"];
                  }
                  repeated MappingPolicy mapping_policy = 1 [json_name = "mapping-policy"];
               }
               MappingPolicys mapping_policys = 3 [json_name = "mapping-policys"];
               message RunningFlowGroups {
                  message RunningFlowGroup {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     enum Type {
                        Type_DYNAMIC = 0;
                        Type_STATIC = 1;
                     };
                     Type type = 4 [json_name = "type"];
                     uint32 tunnel_id = 5 [json_name = "tunnel-id"];
                     enum TunnelType {
                        INVALID_ENUM_VALUE_TunnelType = 0;
                        TunnelType_SRV6X_TEX_FLOWX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 6 [json_name = "tunnel-type"];
                     enum State {
                        State_DOWN = 0;
                        State_UP = 1;
                        State_DELAYX_DELETE = 2;
                        State_OVERRUN = 3;
                     };
                     State state = 7 [json_name = "state"];
                     string state_change_time = 8 [json_name = "state-change-time"];
                     uint32 delay_timer_remain = 9 [json_name = "delay-timer-remain"];
                     uint32 map_count = 10 [json_name = "map-count"];
                     uint32 up_map_count = 11 [json_name = "up-map-count"];
                     message FlowMaps {
                        message FlowMap {
                           enum MatchType {
                              MatchType_DSCP = 0;
                              MatchType_APNX_IDX_IPV6 = 1;
                              MatchType_TEX_CLASS = 2;
                              MatchType_SERVICEX_CLASS = 3;
                           };
                           MatchType match_type = 1 [json_name = "match-type"];
                           bool default = 2 [json_name = "default"];
                           uint32 index = 3 [json_name = "index"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4X_IPV6 = 1;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 4 [json_name = "af-type"];
                           string dscp_value = 5 [json_name = "dscp-value"];
                           uint32 policy_color = 6 [json_name = "policy-color"];
                           uint32 policy_tunnel_id = 7 [json_name = "policy-tunnel-id"];
                           bool native_ip = 8 [json_name = "native-ip"];
                           enum State {
                              State_DOWN = 0;
                              State_UP = 1;
                              State_SPRX_PATHX_OVERRUN = 3;
                              State_OVERRUN = 4;
                           };
                           State state = 9 [json_name = "state"];
                           string service_class = 10 [json_name = "service-class"];
                           uint32 te_class_id = 11 [json_name = "te-class-id"];
                           string spr_policy_name = 12 [json_name = "spr-policy-name"];
                           message SprSrv6TePolicys {
                              message SprSrv6TePolicy {
                                 uint32 color = 1 [json_name = "color"];
                                 uint32 priority = 2 [json_name = "priority"];
                                 enum Role {
                                    INVALID_ENUM_VALUE_Role = 0;
                                    Role_PRIMARY = 1;
                                    Role_BACKUP = 2;
                                 };
                                 Role role = 3 [json_name = "role"];
                              }
                              repeated SprSrv6TePolicy spr_srv6_te_policy = 1 [json_name = "spr-srv6-te-policy"];
                           }
                           SprSrv6TePolicys spr_srv6_te_policys = 13 [json_name = "spr-srv6-te-policys"];
                           message SprGroups {
                              message SprGroup {
                                 uint32 group_id = 1 [json_name = "group-id"];
                                 enum State {
                                    State_ACTIVE = 0;
                                    State_DELAYX_SWITCH = 1;
                                    State_WAITX_TOX_RESTORE = 2;
                                 };
                                 State state = 2 [json_name = "state"];
                                 uint32 delay_timer_remain = 3 [json_name = "delay-timer-remain"];
                                 message SprPaths {
                                    message SprPath {
                                       uint32 color = 1 [json_name = "color"];
                                       uint32 priority = 2 [json_name = "priority"];
                                       enum Role {
                                          INVALID_ENUM_VALUE_Role = 0;
                                          Role_PRIMARY = 1;
                                          Role_BACKUP = 2;
                                       };
                                       Role role = 3 [json_name = "role"];
                                    }
                                    repeated SprPath spr_path = 1 [json_name = "spr-path"];
                                 }
                                 SprPaths spr_paths = 4 [json_name = "spr-paths"];
                              }
                              repeated SprGroup spr_group = 1 [json_name = "spr-group"];
                           }
                           SprGroups spr_groups = 14 [json_name = "spr-groups"];
                           string apn6_instance_name = 15 [json_name = "apn6-instance-name"];
                        }
                        repeated FlowMap flow_map = 1 [json_name = "flow-map"];
                     }
                     FlowMaps flow_maps = 12 [json_name = "flow-maps"];
                  }
                  repeated RunningFlowGroup running_flow_group = 1 [json_name = "running-flow-group"];
               }
               RunningFlowGroups running_flow_groups = 4 [json_name = "running-flow-groups"];
               message FlowGroupDownReasons {
                  message FlowGroupDownReason {
                     string endpoint = 1 [json_name = "endpoint"];
                     uint32 color = 2 [json_name = "color"];
                     string name = 3 [json_name = "name"];
                     string up_time = 4 [json_name = "up-time"];
                     uint32 up_millisecond = 5 [json_name = "up-millisecond"];
                     uint32 tunnel_id = 6 [json_name = "tunnel-id"];
                     enum TunnelType {
                        INVALID_ENUM_VALUE_TunnelType = 0;
                        TunnelType_SRV6X_TEX_FLOWX_GROUP = 55;
                     };
                     TunnelType tunnel_type = 7 [json_name = "tunnel-type"];
                     string create_time = 8 [json_name = "create-time"];
                     string down_time = 9 [json_name = "down-time"];
                     enum DownReason {
                        INVALID_ENUM_VALUE_DownReason = 0;
                        DownReason_NOX_ACTIVEX_TUNNEL = 1;
                        DownReason_SUBSCRIBEX_DELETE = 2;
                        DownReason_CONFIGURATIONX_DELETE = 3;
                        DownReason_UNKNOWNX_REASON = 4;
                        DownReason_NOX_ENDPOINT = 5;
                     };
                     DownReason down_reason = 10 [json_name = "down-reason"];
                     message FlowMaps {
                        message FlowMap {
                           enum MatchType {
                              MatchType_DSCP = 0;
                              MatchType_APNX_IDX_IPV6 = 1;
                              MatchType_TEX_CLASS = 2;
                              MatchType_SERVICEX_CLASS = 3;
                           };
                           MatchType match_type = 1 [json_name = "match-type"];
                           bool default = 2 [json_name = "default"];
                           uint32 index = 3 [json_name = "index"];
                           enum AfType {
                              INVALID_ENUM_VALUE_AfType = 0;
                              AfType_IPV4X_IPV6 = 1;
                              AfType_IPV4 = 4;
                              AfType_IPV6 = 6;
                           };
                           AfType af_type = 4 [json_name = "af-type"];
                           uint32 policy_color = 5 [json_name = "policy-color"];
                           bool native_ip = 6 [json_name = "native-ip"];
                           string up_time = 7 [json_name = "up-time"];
                           uint32 up_millisecond = 8 [json_name = "up-millisecond"];
                           string down_time = 9 [json_name = "down-time"];
                           enum DownReason {
                              INVALID_ENUM_VALUE_DownReason = 0;
                              DownReason_SRX_POLICYX_DOWN = 1;
                              DownReason_CONFIGURATIONX_DELETE = 2;
                              DownReason_FLOWX_GROUPX_DELETE = 3;
                              DownReason_NOX_ROUTE = 4;
                              DownReason_UNKNOWNX_REASON = 5;
                              DownReason_SPRX_INSTANCEX_DOWN = 6;
                           };
                           DownReason down_reason = 10 [json_name = "down-reason"];
                        }
                        repeated FlowMap flow_map = 1 [json_name = "flow-map"];
                     }
                     FlowMaps flow_maps = 11 [json_name = "flow-maps"];
                  }
                  repeated FlowGroupDownReason flow_group_down_reason = 1 [json_name = "flow-group-down-reason"];
               }
               FlowGroupDownReasons flow_group_down_reasons = 5 [json_name = "flow-group-down-reasons"];
               message FlowGroupStatistic {
                  uint32 mapping_policy_count = 1 [json_name = "mapping-policy-count"];
                  uint32 flow_group_count = 2 [json_name = "flow-group-count"];
                  uint32 flow_group_up_count = 3 [json_name = "flow-group-up-count"];
                  uint32 dynamic_flow_group_count = 4 [json_name = "dynamic-flow-group-count"];
                  uint32 dynamic_flow_group_up_count = 5 [json_name = "dynamic-flow-group-up-count"];
                  uint32 dscp_map_count = 6 [json_name = "dscp-map-count"];
                  uint32 dscp_map_up_count = 7 [json_name = "dscp-map-up-count"];
                  uint32 service_class_map_count = 8 [json_name = "service-class-map-count"];
                  uint32 service_class_map_up_count = 9 [json_name = "service-class-map-up-count"];
                  uint32 te_class_map_count = 10 [json_name = "te-class-map-count"];
                  uint32 te_class_map_up_count = 11 [json_name = "te-class-map-up-count"];
                  uint32 spr_tunnel_count = 12 [json_name = "spr-tunnel-count"];
                  uint32 spr_tunnel_up_count = 13 [json_name = "spr-tunnel-up-count"];
                  uint32 apn_id_ipv6_map_count = 14 [json_name = "apn-id-ipv6-map-count"];
                  uint32 apn_id_ipv6_map_up_count = 15 [json_name = "apn-id-ipv6-map-up-count"];
               }
               FlowGroupStatistic flow_group_statistic = 6 [json_name = "flow-group-statistic"];
               message Spr {
                  uint32 spr_refresh_period = 1 [json_name = "spr-refresh-period"];
                  enum MeasureCountMode {
                     INVALID_ENUM_VALUE_MeasureCountMode = 0;
                     MeasureCountMode_ONEX_WAY = 1;
                     MeasureCountMode_TWOX_WAYX_AVERAGE = 2;
                  };
                  MeasureCountMode measure_count_mode = 2 [json_name = "measure-count-mode"];
                  message SprPolicys {
                     message SprPolicy {
                        string name = 1 [json_name = "name"];
                        uint32 switch_period = 2 [json_name = "switch-period"];
                        uint32 wait_to_restore_period = 3 [json_name = "wait-to-restore-period"];
                        uint32 delay_threshold = 4 [json_name = "delay-threshold"];
                        uint32 jitter_threshold = 5 [json_name = "jitter-threshold"];
                        uint32 loss_rate_threshold = 6 [json_name = "loss-rate-threshold"];
                        uint32 cmi_threshold = 7 [json_name = "cmi-threshold"];
                        message Srv6TePolicys {
                           message Srv6TePolicy {
                              uint32 color = 1 [json_name = "color"];
                              uint32 priority = 2 [json_name = "priority"];
                           }
                           repeated Srv6TePolicy srv6_te_policy = 1 [json_name = "srv6-te-policy"];
                        }
                        Srv6TePolicys srv6_te_policys = 8 [json_name = "srv6-te-policys"];
                     }
                     repeated SprPolicy spr_policy = 1 [json_name = "spr-policy"];
                  }
                  SprPolicys spr_policys = 3 [json_name = "spr-policys"];
               }
               Spr spr = 7 [json_name = "spr"];
            }
            Teflowgroup teflowgroup = 16 [json_name = "teflowgroup"];
            message Bfd {
               bool sbfd_enable = 1 [json_name = "sbfd-enable"];
               uint32 min_tx = 2 [json_name = "min-tx"];
               uint32 min_rx = 3 [json_name = "min-rx"];
               uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
               string ipv6_prefix = 5 [json_name = "ipv6-prefix"];
            }
            Bfd bfd = 17 [json_name = "bfd"];
            uint32 te_frr_delay_time = 18 [json_name = "te-frr-delay-time"];
         }
         Srv6 srv6 = 16 [json_name = "srv6"];
         message Rip {
            message Processs {
               message Process {
                  uint32 id = 1 [json_name = "id"];
                  string description = 2 [json_name = "description"];
                  enum VerifySource {
                     VerifySource_DISABLE = 0;
                     VerifySource_ENABLE = 1;
                  };
                  VerifySource verify_source = 3 [json_name = "verify-source"];
                  uint32 threshold_percent = 4 [json_name = "threshold-percent"];
                  enum Summary {
                     Summary_DISABLE = 0;
                     Summary_ENABLE = 1;
                     Summary_ENABLEX_ALWAYS = 2;
                  };
                  Summary summary = 5 [json_name = "summary"];
                  enum HostRoute {
                     HostRoute_DISABLE = 0;
                     HostRoute_ENABLE = 1;
                  };
                  HostRoute host_route = 6 [json_name = "host-route"];
                  enum CheckZero {
                     CheckZero_DISABLE = 0;
                     CheckZero_ENABLE = 1;
                  };
                  CheckZero check_zero = 7 [json_name = "check-zero"];
                  uint32 version = 8 [json_name = "version"];
                  enum MibBinding {
                     MibBinding_DISABLE = 0;
                     MibBinding_ENABLE = 1;
                  };
                  MibBinding mib_binding = 9 [json_name = "mib-binding"];
                  uint32 maximum_load_balancing = 10 [json_name = "maximum-load-balancing"];
                  enum ZeroMetricCheck {
                     ZeroMetricCheck_DISABLE = 0;
                     ZeroMetricCheck_ENABLE = 1;
                  };
                  ZeroMetricCheck zero_metric_check = 11 [json_name = "zero-metric-check"];
                  uint32 default_cost = 12 [json_name = "default-cost"];
                  enum SilentInterfaceAll {
                     SilentInterfaceAll_DISABLE = 0;
                     SilentInterfaceAll_ENABLE = 1;
                  };
                  SilentInterfaceAll silent_interface_all = 13 [json_name = "silent-interface-all"];
                  uint32 max_routes = 14 [json_name = "max-routes"];
                  message Timer {
                     uint32 garbage = 1 [json_name = "garbage"];
                     uint32 periodic = 2 [json_name = "periodic"];
                     uint32 age = 3 [json_name = "age"];
                     uint32 suppress = 4 [json_name = "suppress"];
                     enum TriggeredFlag {
                        TriggeredFlag_DISABLE = 0;
                        TriggeredFlag_ENABLE = 1;
                     };
                     TriggeredFlag triggered_flag = 5 [json_name = "triggered-flag"];
                     uint32 triggered_min_interval = 6 [json_name = "triggered-min-interval"];
                     uint32 triggered_max_interval = 7 [json_name = "triggered-max-interval"];
                     uint32 triggered_incr_value = 8 [json_name = "triggered-incr-value"];
                  }
                  Timer timer = 15 [json_name = "timer"];
                  message Bfd {
                     enum Enable {
                        Enable_DISABLE = 0;
                        Enable_ENABLE = 1;
                     };
                     Enable enable = 1 [json_name = "enable"];
                     uint32 min_tx = 2 [json_name = "min-tx"];
                     uint32 min_rx = 3 [json_name = "min-rx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                     uint32 min_tx_val = 5 [json_name = "min-tx-val"];
                     uint32 min_rx_val = 6 [json_name = "min-rx-val"];
                  }
                  Bfd bfd = 16 [json_name = "bfd"];
                  message Preference {
                     uint32 value = 1 [json_name = "value"];
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_RoutePolicy policy_type_route_policy = 2 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 3 [json_name = "route-filter"];
                     }
                  }
                  Preference preference = 17 [json_name = "preference"];
                  message Interfaces {
                     message Interface {
                        string name = 1 [json_name = "name"];
                        enum Input {
                           Input_DISABLE = 0;
                           Input_ENABLE = 1;
                        };
                        Input input = 3 [json_name = "input"];
                        enum Output {
                           Output_DISABLE = 0;
                           Output_ENABLE = 1;
                        };
                        Output output = 4 [json_name = "output"];
                        enum Version {
                           INVALID_ENUM_VALUE_Version = 0;
                           Version_RIPX_VERSIONX_1 = 1;
                           Version_RIPX_VERSIONX_2 = 2;
                           Version_RIPX_VERSIONX_2X_COMP = 3;
                           Version_RIPX_VERSIONX_DEFAULT = 5;
                        };
                        Version version = 5 [json_name = "version"];
                        enum SplitHorizon {
                           SplitHorizon_DISABLE = 0;
                           SplitHorizon_ENABLE = 1;
                        };
                        SplitHorizon split_horizon = 6 [json_name = "split-horizon"];
                        enum PoisonReverse {
                           PoisonReverse_DISABLE = 0;
                           PoisonReverse_ENABLE = 1;
                        };
                        PoisonReverse poison_reverse = 7 [json_name = "poison-reverse"];
                        uint32 pkt_transmit_interval = 8 [json_name = "pkt-transmit-interval"];
                        uint32 pkt_transmit_bandwidth = 9 [json_name = "pkt-transmit-bandwidth"];
                        uint32 pkt_transmit_number = 10 [json_name = "pkt-transmit-number"];
                        message Authentication {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_NONE = 1;
                              Mode_SIMPLE = 2;
                              Mode_USUAL = 3;
                              Mode_MD5X_KEYCHAIN = 4;
                              Mode_MD5X_KEYID = 5;
                              Mode_HMACX_SHA256 = 6;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string simple = 2 [json_name = "simple"];
                           uint32 key_id = 3 [json_name = "key-id"];
                           string md5 = 4 [json_name = "md5"];
                           string keychain = 5 [json_name = "keychain"];
                        }
                        Authentication authentication = 11 [json_name = "authentication"];
                        message Metricin {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType_IpPrefix {
                              string ip_prefix = 1 [json_name = "ip-prefix"];
                           }
                           message PolicyType_AclNumber {
                              string acl_number = 1 [json_name = "acl-number"];
                           }
                           message PolicyType_AclName {
                              string acl_name = 1 [json_name = "acl-name"];
                           }
                           oneof PolicyType {
                              PolicyType_IpPrefix policy_type_ip_prefix = 3 [json_name = "ip-prefix"];
                              PolicyType_AclNumber policy_type_acl_number = 4 [json_name = "acl-number"];
                              PolicyType_AclName policy_type_acl_name = 5 [json_name = "acl-name"];
                           }
                        }
                        Metricin metricin = 12 [json_name = "metricin"];
                        message Metricout {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType_IpPrefix {
                              string ip_prefix = 1 [json_name = "ip-prefix"];
                           }
                           message PolicyType_AclNumber {
                              string acl_number = 1 [json_name = "acl-number"];
                           }
                           message PolicyType_AclName {
                              string acl_name = 1 [json_name = "acl-name"];
                           }
                           oneof PolicyType {
                              PolicyType_IpPrefix policy_type_ip_prefix = 3 [json_name = "ip-prefix"];
                              PolicyType_AclNumber policy_type_acl_number = 4 [json_name = "acl-number"];
                              PolicyType_AclName policy_type_acl_name = 5 [json_name = "acl-name"];
                           }
                        }
                        Metricout metricout = 13 [json_name = "metricout"];
                        message Bfd {
                           enum Type {
                              Type_NONE = 0;
                              Type_DYNAMIC = 1;
                              Type_STATIC = 2;
                              Type_BLOCK = 3;
                           };
                           Type type = 1 [json_name = "type"];
                           uint32 min_tx = 2 [json_name = "min-tx"];
                           uint32 min_rx = 3 [json_name = "min-rx"];
                           uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                        }
                        Bfd bfd = 14 [json_name = "bfd"];
                        message Summarys {
                           message Summary {
                              string address = 1 [json_name = "address"];
                              string network_mask = 2 [json_name = "network-mask"];
                              enum AvoidFeedback {
                                 AvoidFeedback_DISABLE = 0;
                                 AvoidFeedback_ENABLE = 1;
                              };
                              AvoidFeedback avoid_feedback = 3 [json_name = "avoid-feedback"];
                           }
                           repeated Summary summary = 1 [json_name = "summary"];
                        }
                        Summarys summarys = 15 [json_name = "summarys"];
                        message MaxPacketLength_Value {
                           uint32 value10 = 1 [json_name = "value"];
                        }
                        message MaxPacketLength_Mtu {
                           bool mtu10 = 1 [json_name = "mtu"];
                        }
                        oneof MaxPacketLength {
                           MaxPacketLength_Value max_packet_length_value = 16 [json_name = "value"];
                           MaxPacketLength_Mtu max_packet_length_mtu = 17 [json_name = "mtu"];
                        }
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 18 [json_name = "interfaces"];
                  message Networks {
                     message Network {
                        string address = 1 [json_name = "address"];
                     }
                     repeated Network network = 1 [json_name = "network"];
                  }
                  Networks networks = 19 [json_name = "networks"];
                  message FilterImports {
                     message FilterImport {
                        string interface = 1 [json_name = "interface"];
                        message PolicyType_IpPrefix {
                           string ip_prefix = 1 [json_name = "ip-prefix"];
                           string gataway = 2 [json_name = "gataway"];
                        }
                        message PolicyType_AclNumber {
                           string acl_number = 1 [json_name = "acl-number"];
                        }
                        message PolicyType_AclName {
                           string acl_name = 1 [json_name = "acl-name"];
                        }
                        oneof PolicyType {
                           PolicyType_IpPrefix policy_type_ip_prefix = 2 [json_name = "ip-prefix"];
                           PolicyType_AclNumber policy_type_acl_number = 3 [json_name = "acl-number"];
                           PolicyType_AclName policy_type_acl_name = 4 [json_name = "acl-name"];
                        }
                     }
                     repeated FilterImport filter_import = 1 [json_name = "filter-import"];
                  }
                  FilterImports filter_imports = 20 [json_name = "filter-imports"];
                  message FilterExports {
                     message FilterExport {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_OSPFV2 = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_NONE = 9;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        string interface = 3 [json_name = "interface"];
                        message PolicyType_IpPrefix {
                           string ip_prefix = 1 [json_name = "ip-prefix"];
                        }
                        message PolicyType_AclNumber {
                           string acl_number = 1 [json_name = "acl-number"];
                        }
                        message PolicyType_AclName {
                           string acl_name = 1 [json_name = "acl-name"];
                        }
                        oneof PolicyType {
                           PolicyType_IpPrefix policy_type_ip_prefix = 4 [json_name = "ip-prefix"];
                           PolicyType_AclNumber policy_type_acl_number = 5 [json_name = "acl-number"];
                           PolicyType_AclName policy_type_acl_name = 6 [json_name = "acl-name"];
                        }
                     }
                     repeated FilterExport filter_export = 1 [json_name = "filter-export"];
                  }
                  FilterExports filter_exports = 21 [json_name = "filter-exports"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_OSPFV2 = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        uint32 cost = 3 [json_name = "cost"];
                        enum Transparent {
                           Transparent_DISABLE = 0;
                           Transparent_ENABLE = 1;
                        };
                        Transparent transparent = 4 [json_name = "transparent"];
                        enum PermitIbgp {
                           PermitIbgp_DISABLE = 0;
                           PermitIbgp_ENABLE = 1;
                        };
                        PermitIbgp permit_ibgp = 5 [json_name = "permit-ibgp"];
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 6 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 7 [json_name = "route-filter-name"];
                        }
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 22 [json_name = "import-routes"];
                  message Peers {
                     message Peer {
                        string address = 1 [json_name = "address"];
                     }
                     repeated Peer peer = 1 [json_name = "peer"];
                  }
                  Peers peers = 23 [json_name = "peers"];
                  message SilentInterfaces {
                     message SilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated SilentInterface silent_interface = 1 [json_name = "silent-interface"];
                  }
                  SilentInterfaces silent_interfaces = 24 [json_name = "silent-interfaces"];
                  message UndoSilentInterfaces {
                     message UndoSilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated UndoSilentInterface undo_silent_interface = 1 [json_name = "undo-silent-interface"];
                  }
                  UndoSilentInterfaces undo_silent_interfaces = 25 [json_name = "undo-silent-interfaces"];
                  message DefaultRoute {
                     uint32 cost = 1 [json_name = "cost"];
                     uint32 tag = 2 [json_name = "tag"];
                     enum AvoidLearning {
                        AvoidLearning_DISABLE = 0;
                        AvoidLearning_ENABLE = 1;
                     };
                     AvoidLearning avoid_learning = 3 [json_name = "avoid-learning"];
                     message DefaultRouteMode_Always {
                        bool always9 = 1 [json_name = "always"];
                     }
                     message DefaultRouteMode_MatchDefault {
                        bool match_default = 1 [json_name = "match-default"];
                     }
                     message DefaultRouteMode_RoutePolicyName {
                        string route_policy_name = 1 [json_name = "route-policy-name"];
                        enum AdvertiseTag {
                           AdvertiseTag_DISABLE = 0;
                           AdvertiseTag_ENABLE = 1;
                        };
                        AdvertiseTag advertise_tag = 2 [json_name = "advertise-tag"];
                     }
                     message DefaultRouteMode_RouteFilterName {
                        string route_filter_name = 1 [json_name = "route-filter-name"];
                     }
                     oneof DefaultRouteMode {
                        DefaultRouteMode_Always default_route_mode_always = 4 [json_name = "always"];
                        DefaultRouteMode_MatchDefault default_route_mode_match_default = 5 [json_name = "match-default"];
                        DefaultRouteMode_RoutePolicyName default_route_mode_route_policy_name = 6 [json_name = "route-policy-name"];
                        DefaultRouteMode_RouteFilterName default_route_mode_route_filter_name = 7 [json_name = "route-filter-name"];
                     }
                  }
                  DefaultRoute default_route = 26 [json_name = "default-route"];
                  message NeighborInfos {
                     message NeighborInfo {
                        string address = 1 [json_name = "address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        enum Version {
                           INVALID_ENUM_VALUE_Version = 0;
                           Version_RIPX_VERSIONX_1 = 1;
                           Version_RIPX_VERSIONX_2 = 2;
                           Version_RIPX_VERSIONX_2X_COMP = 3;
                           Version_RIPX_VERSIONX_DEFAULT = 5;
                        };
                        Version version = 3 [json_name = "version"];
                        uint32 last_heard_time_hours = 4 [json_name = "last-heard-time-hours"];
                        uint32 last_heard_time_minutes = 5 [json_name = "last-heard-time-minutes"];
                        uint32 last_heard_time_seconds = 6 [json_name = "last-heard-time-seconds"];
                        uint32 active_routes_number = 7 [json_name = "active-routes-number"];
                        uint32 holddown_routes_number = 8 [json_name = "holddown-routes-number"];
                        uint32 garbage_routes_number = 9 [json_name = "garbage-routes-number"];
                        string last_receive_sequence = 10 [json_name = "last-receive-sequence"];
                     }
                     repeated NeighborInfo neighbor_info = 1 [json_name = "neighbor-info"];
                  }
                  NeighborInfos neighbor_infos = 27 [json_name = "neighbor-infos"];
                  message NeighborPacketsStatisticss {
                     message NeighborPacketsStatistics {
                        string address = 1 [json_name = "address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        uint32 request_packets_received_last_minutes = 3 [json_name = "request-packets-received-last-minutes"];
                        uint32 request_packets_received_last_five_minutes = 4 [json_name = "request-packets-received-last-five-minutes"];
                        uint32 request_packets_received_total = 5 [json_name = "request-packets-received-total"];
                        uint32 request_packets_ignored_last_minutes = 6 [json_name = "request-packets-ignored-last-minutes"];
                        uint32 request_packets_ignored_last_five_minutes = 7 [json_name = "request-packets-ignored-last-five-minutes"];
                        uint32 request_packets_ignored_total = 8 [json_name = "request-packets-ignored-total"];
                        uint32 response_packets_received_last_minutes = 9 [json_name = "response-packets-received-last-minutes"];
                        uint32 response_packets_received_last_five_minutes = 10 [json_name = "response-packets-received-last-five-minutes"];
                        uint32 response_packets_received_total = 11 [json_name = "response-packets-received-total"];
                        uint32 response_packets_ignored_last_minutes = 12 [json_name = "response-packets-ignored-last-minutes"];
                        uint32 response_packets_ignored_last_five_minutes = 13 [json_name = "response-packets-ignored-last-five-minutes"];
                        uint32 response_packets_ignored_total = 14 [json_name = "response-packets-ignored-total"];
                        uint32 bad_packets_received_last_minutes = 15 [json_name = "bad-packets-received-last-minutes"];
                        uint32 bad_packets_received_last_five_minutes = 16 [json_name = "bad-packets-received-last-five-minutes"];
                        uint32 bad_packets_received_total = 17 [json_name = "bad-packets-received-total"];
                        uint32 bad_routes_received_last_minutes = 18 [json_name = "bad-routes-received-last-minutes"];
                        uint32 bad_routes_received_last_five_minutes = 19 [json_name = "bad-routes-received-last-five-minutes"];
                        uint32 bad_routes_received_total = 20 [json_name = "bad-routes-received-total"];
                        uint32 authentication_failed_packets_last_minutes = 21 [json_name = "authentication-failed-packets-last-minutes"];
                        uint32 authentication_failed_packets_last_five_minutes = 22 [json_name = "authentication-failed-packets-last-five-minutes"];
                        uint32 authentication_failed_packets_total = 23 [json_name = "authentication-failed-packets-total"];
                     }
                     repeated NeighborPacketsStatistics neighbor_packets_statistics = 1 [json_name = "neighbor-packets-statistics"];
                  }
                  NeighborPacketsStatisticss neighbor_packets_statisticss = 28 [json_name = "neighbor-packets-statisticss"];
                  message NeighborLastDowns {
                     message NeighborLastDown {
                        uint32 index = 1 [json_name = "index"];
                        string ip_address = 2 [json_name = "ip-address"];
                        string interface_name = 3 [json_name = "interface-name"];
                        enum DownReason {
                           DownReason_BFDX_SESSIONX_DOWN = 0;
                           DownReason_INTERFACEX_DOWN = 1;
                           DownReason_TIMEOUTX_NORMAL = 2;
                           DownReason_TIMEOUTX_MESSAGEX_PROCESSING = 3;
                           DownReason_CONFIGURATIONX_CHANGE = 4;
                           DownReason_RECEIVEDX_WORSTX_METRICX_ROUTES = 5;
                           DownReason_UNKNOWN = 6;
                        };
                        DownReason down_reason = 4 [json_name = "down-reason"];
                        string down_time = 5 [json_name = "down-time"];
                     }
                     repeated NeighborLastDown neighbor_last_down = 1 [json_name = "neighbor-last-down"];
                  }
                  NeighborLastDowns neighbor_last_downs = 29 [json_name = "neighbor-last-downs"];
                  message BfdStates {
                     message BfdState {
                        string interface_name = 1 [json_name = "interface-name"];
                        string local_ip = 2 [json_name = "local-ip"];
                        string remote_ip = 3 [json_name = "remote-ip"];
                        enum State {
                           State_UNKNOWN = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 4 [json_name = "state"];
                     }
                     repeated BfdState bfd_state = 1 [json_name = "bfd-state"];
                  }
                  BfdStates bfd_states = 30 [json_name = "bfd-states"];
                  message InterfacePacketsStatisticss {
                     message InterfacePacketsStatistics {
                        string interface_name = 1 [json_name = "interface-name"];
                        string ip_address = 2 [json_name = "ip-address"];
                        uint32 periodic_updates_sent_last_minutes = 3 [json_name = "periodic-updates-sent-last-minutes"];
                        uint32 periodic_updates_sent_last_five_minutes = 4 [json_name = "periodic-updates-sent-last-five-minutes"];
                        uint32 periodic_updates_sent_total = 5 [json_name = "periodic-updates-sent-total"];
                        uint32 triggered_updates_sent_last_minutes = 6 [json_name = "triggered-updates-sent-last-minutes"];
                        uint32 triggered_updates_sent_last_five_minutes = 7 [json_name = "triggered-updates-sent-last-five-minutes"];
                        uint32 triggered_updates_sent_total = 8 [json_name = "triggered-updates-sent-total"];
                        uint32 response_packets_sent_last_minutes = 9 [json_name = "response-packets-sent-last-minutes"];
                        uint32 response_packets_sent_last_five_minutes = 10 [json_name = "response-packets-sent-last-five-minutes"];
                        uint32 response_packets_sent_total = 11 [json_name = "response-packets-sent-total"];
                        uint32 response_packets_received_last_minutes = 12 [json_name = "response-packets-received-last-minutes"];
                        uint32 response_packets_received_last_five_minutes = 13 [json_name = "response-packets-received-last-five-minutes"];
                        uint32 response_packets_received_total = 14 [json_name = "response-packets-received-total"];
                        uint32 response_packets_ignored_last_minutes = 15 [json_name = "response-packets-ignored-last-minutes"];
                        uint32 response_packets_ignored_last_five_minutes = 16 [json_name = "response-packets-ignored-last-five-minutes"];
                        uint32 response_packets_ignored_total = 17 [json_name = "response-packets-ignored-total"];
                        uint32 request_packets_sent_last_minutes = 18 [json_name = "request-packets-sent-last-minutes"];
                        uint32 request_packets_sent_last_five_minutes = 19 [json_name = "request-packets-sent-last-five-minutes"];
                        uint32 request_packets_sent_total = 20 [json_name = "request-packets-sent-total"];
                        uint32 request_packets_received_last_minutes = 21 [json_name = "request-packets-received-last-minutes"];
                        uint32 request_packets_received_last_five_minutes = 22 [json_name = "request-packets-received-last-five-minutes"];
                        uint32 request_packets_received_total = 23 [json_name = "request-packets-received-total"];
                        uint32 request_packets_ignored_last_minutes = 24 [json_name = "request-packets-ignored-last-minutes"];
                        uint32 request_packets_ignored_last_five_minutes = 25 [json_name = "request-packets-ignored-last-five-minutes"];
                        uint32 request_packets_ignored_total = 26 [json_name = "request-packets-ignored-total"];
                        uint32 bad_packets_received_last_minutes = 27 [json_name = "bad-packets-received-last-minutes"];
                        uint32 bad_packets_received_last_five_minutes = 28 [json_name = "bad-packets-received-last-five-minutes"];
                        uint32 bad_packets_received_total = 29 [json_name = "bad-packets-received-total"];
                        uint32 routes_received_last_minutes = 30 [json_name = "routes-received-last-minutes"];
                        uint32 routes_received_last_five_minutes = 31 [json_name = "routes-received-last-five-minutes"];
                        uint32 routes_received_total = 32 [json_name = "routes-received-total"];
                        uint32 routes_sent_last_minutes = 33 [json_name = "routes-sent-last-minutes"];
                        uint32 routes_sent_last_five_minutes = 34 [json_name = "routes-sent-last-five-minutes"];
                        uint32 routes_sent_total = 35 [json_name = "routes-sent-total"];
                        uint32 bad_routes_received_last_minutes = 36 [json_name = "bad-routes-received-last-minutes"];
                        uint32 bad_routes_received_last_five_minutes = 37 [json_name = "bad-routes-received-last-five-minutes"];
                        uint32 bad_routes_received_total = 38 [json_name = "bad-routes-received-total"];
                        uint32 authentication_failed_packets_last_minutes = 39 [json_name = "authentication-failed-packets-last-minutes"];
                        uint32 authentication_failed_packets_last_five_minutes = 40 [json_name = "authentication-failed-packets-last-five-minutes"];
                        uint32 authentication_failed_packets_total = 41 [json_name = "authentication-failed-packets-total"];
                        uint32 sent_failed_packets_last_minutes = 42 [json_name = "sent-failed-packets-last-minutes"];
                        uint32 sent_failed_packets_last_five_minutes = 43 [json_name = "sent-failed-packets-last-five-minutes"];
                        uint32 sent_failed_packets_total = 44 [json_name = "sent-failed-packets-total"];
                     }
                     repeated InterfacePacketsStatistics interface_packets_statistics = 1 [json_name = "interface-packets-statistics"];
                  }
                  InterfacePacketsStatisticss interface_packets_statisticss = 31 [json_name = "interface-packets-statisticss"];
                  message EcmpGroups {
                     message EcmpGroup {
                        uint32 group_id = 1 [json_name = "group-id"];
                        enum Flag {
                           Flag_URT = 0;
                           Flag_D = 1;
                           Flag_URT6 = 2;
                        };
                        Flag flag = 2 [json_name = "flag"];
                        uint32 reference_count = 3 [json_name = "reference-count"];
                        message Nexthops {
                           message Nexthop {
                              string nexthop_address = 1 [json_name = "nexthop-address"];
                           }
                           repeated Nexthop nexthop = 1 [json_name = "nexthop"];
                        }
                        Nexthops nexthops = 4 [json_name = "nexthops"];
                     }
                     repeated EcmpGroup ecmp_group = 1 [json_name = "ecmp-group"];
                  }
                  EcmpGroups ecmp_groups = 32 [json_name = "ecmp-groups"];
                  message Routes {
                     message Route {
                        string destination = 1 [json_name = "destination"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string nexthop = 3 [json_name = "nexthop"];
                        string interface_name = 4 [json_name = "interface-name"];
                        string peer_address = 5 [json_name = "peer-address"];
                        uint32 cost = 6 [json_name = "cost"];
                        uint32 tag = 7 [json_name = "tag"];
                        string flags = 8 [json_name = "flags"];
                        uint32 state_time = 9 [json_name = "state-time"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 33 [json_name = "routes"];
                  message DatabaseRoutes {
                     message DatabaseRoute {
                        string destination = 1 [json_name = "destination"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string nexthop = 3 [json_name = "nexthop"];
                        uint32 cost = 4 [json_name = "cost"];
                        string interface_name = 5 [json_name = "interface-name"];
                        uint32 tag = 6 [json_name = "tag"];
                        enum SourceType {
                           INVALID_ENUM_VALUE_SourceType = 0;
                           SourceType_LEARNT = 1;
                           SourceType_IMPORTED = 2;
                           SourceType_RIPX_INTERFACE = 3;
                           SourceType_PERM = 4;
                           SourceType_CLASSFULX_SUMMARY = 5;
                           SourceType_IFX_SUMMARY = 6;
                           SourceType_DEFAULTX_ROUTEX_ORIGINATE = 7;
                        };
                        SourceType source_type = 7 [json_name = "source-type"];
                     }
                     repeated DatabaseRoute database_route = 1 [json_name = "database-route"];
                  }
                  DatabaseRoutes database_routes = 34 [json_name = "database-routes"];
                  message Statistics {
                     uint32 routes_in_database = 1 [json_name = "routes-in-database"];
                     uint32 interfaces_enabled = 2 [json_name = "interfaces-enabled"];
                     uint32 vrrp_interfaces = 3 [json_name = "vrrp-interfaces"];
                     uint32 trigger_updates_sent = 4 [json_name = "trigger-updates-sent"];
                     uint32 route_changes = 5 [json_name = "route-changes"];
                     uint32 replies_to_queries = 6 [json_name = "replies-to-queries"];
                     uint32 routes_sendable_periodic = 7 [json_name = "routes-sendable-periodic"];
                     uint32 routes_send_last_periodic = 8 [json_name = "routes-send-last-periodic"];
                  }
                  Statistics statistics = 35 [json_name = "statistics"];
               }
               repeated Process process = 1 [json_name = "process"];
            }
            Processs processs = 1 [json_name = "processs"];
            message Gtsm {
               uint32 hops = 1 [json_name = "hops"];
            }
            Gtsm gtsm = 2 [json_name = "gtsm"];
         }
         Rip rip = 17 [json_name = "rip"];
         message Igmp {
            message Global {
               uint32 query_interval = 1 [json_name = "query-interval"];
               uint32 query_response_interval = 2 [json_name = "query-response-interval"];
               uint32 robustness = 3 [json_name = "robustness"];
               uint32 last_member_query_interval = 4 [json_name = "last-member-query-interval"];
               bool require_router_alert = 5 [json_name = "require-router-alert"];
               bool send_router_alert = 6 [json_name = "send-router-alert"];
               uint32 other_querier_present_time = 7 [json_name = "other-querier-present-time"];
               string ssm_mapping_dns_domain = 8 [json_name = "ssm-mapping-dns-domain"];
               bool ssm_mapping_query_dns = 9 [json_name = "ssm-mapping-query-dns"];
               string ssm_mapping_query_dns_policy = 10 [json_name = "ssm-mapping-query-dns-policy"];
               message SsmMappings {
                  message SsmMapping {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMapping ssm_mapping = 1 [json_name = "ssm-mapping"];
               }
               SsmMappings ssm_mappings = 11 [json_name = "ssm-mappings"];
               message Ipsec_ForAll {
                  string sa_name = 1 [json_name = "sa-name"];
               }
               message Ipsec_ForQuery {
                  string query_sa_name = 1 [json_name = "query-sa-name"];
               }
               oneof Ipsec {
                  Ipsec_ForAll ipsec_for_all = 12 [json_name = "for-all"];
                  Ipsec_ForQuery ipsec_for_query = 13 [json_name = "for-query"];
               }
               message DnsSsmMappings {
                  message DnsSsmMapping {
                     string group_address = 1 [json_name = "group-address"];
                     string domain = 2 [json_name = "domain"];
                     message Sources {
                        message Source {
                           string source_address = 1 [json_name = "source-address"];
                        }
                        repeated Source source = 1 [json_name = "source"];
                     }
                     Sources sources = 3 [json_name = "sources"];
                  }
                  repeated DnsSsmMapping dns_ssm_mapping = 1 [json_name = "dns-ssm-mapping"];
               }
               DnsSsmMappings dns_ssm_mappings = 14 [json_name = "dns-ssm-mappings"];
            }
            Global global = 1 [json_name = "global"];
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool enable = 2 [json_name = "enable"];
                  bool ip_source_policy_enable = 3 [json_name = "ip-source-policy-enable"];
                  uint32 query_interval = 4 [json_name = "query-interval"];
                  uint32 query_response_interval = 5 [json_name = "query-response-interval"];
                  uint32 robustness = 6 [json_name = "robustness"];
                  uint32 version = 7 [json_name = "version"];
                  uint32 last_member_query_interval = 8 [json_name = "last-member-query-interval"];
                  bool require_router_alert = 9 [json_name = "require-router-alert"];
                  bool send_router_alert = 10 [json_name = "send-router-alert"];
                  uint32 other_querier_present_time = 11 [json_name = "other-querier-present-time"];
                  bool immediately_leave = 12 [json_name = "immediately-leave"];
                  bool on_demand_enable = 13 [json_name = "on-demand-enable"];
                  uint32 entry_limit = 14 [json_name = "entry-limit"];
                  bool ssm_mapping_enable = 15 [json_name = "ssm-mapping-enable"];
                  string ip_source_policy_name = 16 [json_name = "ip-source-policy-name"];
                  string immediately_leave_policy = 17 [json_name = "immediately-leave-policy"];
                  string entry_limit_acl_name = 18 [json_name = "entry-limit-acl-name"];
                  string ssm_mapping_policy = 19 [json_name = "ssm-mapping-policy"];
                  string group_acl_name = 20 [json_name = "group-acl-name"];
                  uint32 group_acl_version = 21 [json_name = "group-acl-version"];
                  string query_acl_name = 22 [json_name = "query-acl-name"];
                  message Status {
                     string address = 1 [json_name = "address"];
                     enum State {
                        INVALID_ENUM_VALUE_State = 0;
                        State_DOWN = 1;
                        State_UP = 2;
                     };
                     State state = 2 [json_name = "state"];
                     uint32 negotiate_query_interval = 3 [json_name = "negotiate-query-interval"];
                     uint32 other_querier_timeout = 4 [json_name = "other-querier-timeout"];
                     uint32 maximum_response_time = 5 [json_name = "maximum-response-time"];
                     uint32 last_member_query_time = 6 [json_name = "last-member-query-time"];
                     uint32 startup_query_interval = 7 [json_name = "startup-query-interval"];
                     uint32 startup_query_count = 8 [json_name = "startup-query-count"];
                     string querier_address = 9 [json_name = "querier-address"];
                     enum IsLocalQuerier {
                        IsLocalQuerier_RESERVED = 0;
                        IsLocalQuerier_NOX_QUERIER = 1;
                        IsLocalQuerier_THISX_ROUTER = 2;
                        IsLocalQuerier_OTHERX_ROUTER = 3;
                     };
                     IsLocalQuerier is_local_querier = 10 [json_name = "is-local-querier"];
                     uint32 joins = 11 [json_name = "joins"];
                     uint32 leaves = 12 [json_name = "leaves"];
                     uint32 negotiated_robustness = 13 [json_name = "negotiated-robustness"];
                     enum StartupQueryTimerState {
                        StartupQueryTimerState_OFF = 0;
                        StartupQueryTimerState_ON = 1;
                        StartupQueryTimerState_RESERVED = 255;
                     };
                     StartupQueryTimerState startup_query_timer_state = 14 [json_name = "startup-query-timer-state"];
                     enum OtherQuerierPresentTimerState {
                        OtherQuerierPresentTimerState_OFF = 0;
                        OtherQuerierPresentTimerState_ON = 1;
                        OtherQuerierPresentTimerState_RESERVED = 255;
                     };
                     OtherQuerierPresentTimerState other_querier_present_timer_state = 15 [json_name = "other-querier-present-timer-state"];
                     uint32 total_group_reported = 16 [json_name = "total-group-reported"];
                     enum RemoteBackupState {
                        RemoteBackupState_REMOTEX_BACKUPX_DISABLED = 0;
                        RemoteBackupState_REMOTEX_BACKUPX_MASTER = 1;
                        RemoteBackupState_REMOTEX_BACKUPX_SLAVE = 2;
                     };
                     RemoteBackupState remote_backup_state = 17 [json_name = "remote-backup-state"];
                  }
                  Status status = 23 [json_name = "status"];
                  message Ipsec_ForAll {
                     string sa_name = 1 [json_name = "sa-name"];
                  }
                  message Ipsec_ForQuery {
                     string query_sa_name = 1 [json_name = "query-sa-name"];
                  }
                  oneof Ipsec {
                     Ipsec_ForAll ipsec_for_all = 24 [json_name = "for-all"];
                     Ipsec_ForQuery ipsec_for_query = 25 [json_name = "for-query"];
                  }
                  message ControlMessage {
                     string address = 1 [json_name = "address"];
                     uint32 general_query_sent = 2 [json_name = "general-query-sent"];
                     uint32 general_query_valid = 3 [json_name = "general-query-valid"];
                     uint32 general_query_invalid = 4 [json_name = "general-query-invalid"];
                     uint32 general_query_ignore = 5 [json_name = "general-query-ignore"];
                     uint32 group_query_sent = 6 [json_name = "group-query-sent"];
                     uint32 group_query_valid = 7 [json_name = "group-query-valid"];
                     uint32 group_query_invalid = 8 [json_name = "group-query-invalid"];
                     uint32 group_query_ignore = 9 [json_name = "group-query-ignore"];
                     uint32 source_group_sent = 10 [json_name = "source-group-sent"];
                     uint32 source_group_valid = 11 [json_name = "source-group-valid"];
                     uint32 source_group_invalid = 12 [json_name = "source-group-invalid"];
                     uint32 source_group_ignore = 13 [json_name = "source-group-ignore"];
                     uint32 v1v2_report_asm_sent = 14 [json_name = "v1v2-report-asm-sent"];
                     uint32 v1v2_report_asm_valid = 15 [json_name = "v1v2-report-asm-valid"];
                     uint32 v1v2_report_asm_invalid = 16 [json_name = "v1v2-report-asm-invalid"];
                     uint32 v1v2_report_asm_ignore = 17 [json_name = "v1v2-report-asm-ignore"];
                     uint32 v1v2_report_ssm_sent = 18 [json_name = "v1v2-report-ssm-sent"];
                     uint32 v1v2_report_ssm_valid = 19 [json_name = "v1v2-report-ssm-valid"];
                     uint32 v1v2_report_ssm_invalid = 20 [json_name = "v1v2-report-ssm-invalid"];
                     uint32 v1v2_report_ssm_ignore = 21 [json_name = "v1v2-report-ssm-ignore"];
                     uint32 leave_asm_sent = 22 [json_name = "leave-asm-sent"];
                     uint32 leave_asm_valid = 23 [json_name = "leave-asm-valid"];
                     uint32 leave_asm_invalid = 24 [json_name = "leave-asm-invalid"];
                     uint32 leave_asm_ignore = 25 [json_name = "leave-asm-ignore"];
                     uint32 leave_ssm_sent = 26 [json_name = "leave-ssm-sent"];
                     uint32 leave_ssm_valid = 27 [json_name = "leave-ssm-valid"];
                     uint32 leave_ssm_invalid = 28 [json_name = "leave-ssm-invalid"];
                     uint32 leave_ssm_ignore = 29 [json_name = "leave-ssm-ignore"];
                     uint32 v3_isin_report_sent = 30 [json_name = "v3-isin-report-sent"];
                     uint32 v3_isin_report_valid = 31 [json_name = "v3-isin-report-valid"];
                     uint32 v3_isin_report_invalid = 32 [json_name = "v3-isin-report-invalid"];
                     uint32 v3_isin_report_ignore = 33 [json_name = "v3-isin-report-ignore"];
                     uint32 v3_isex_report_sent = 34 [json_name = "v3-isex-report-sent"];
                     uint32 v3_isex_report_valid = 35 [json_name = "v3-isex-report-valid"];
                     uint32 v3_isex_report_invalid = 36 [json_name = "v3-isex-report-invalid"];
                     uint32 v3_isex_report_ignore = 37 [json_name = "v3-isex-report-ignore"];
                     uint32 v3_toin_report_sent = 38 [json_name = "v3-toin-report-sent"];
                     uint32 v3_toin_report_valid = 39 [json_name = "v3-toin-report-valid"];
                     uint32 v3_toin_report_invalid = 40 [json_name = "v3-toin-report-invalid"];
                     uint32 v3_toin_report_ignore = 41 [json_name = "v3-toin-report-ignore"];
                     uint32 v3_toex_report_sent = 42 [json_name = "v3-toex-report-sent"];
                     uint32 v3_toex_report_valid = 43 [json_name = "v3-toex-report-valid"];
                     uint32 v3_toex_report_invalid = 44 [json_name = "v3-toex-report-invalid"];
                     uint32 v3_toex_report_ignore = 45 [json_name = "v3-toex-report-ignore"];
                     uint32 v3_allow_report_sent = 46 [json_name = "v3-allow-report-sent"];
                     uint32 v3_allow_report_valid = 47 [json_name = "v3-allow-report-valid"];
                     uint32 v3_allow_report_invalid = 48 [json_name = "v3-allow-report-invalid"];
                     uint32 v3_allow_report_ignore = 49 [json_name = "v3-allow-report-ignore"];
                     uint32 v3_block_report_sent = 50 [json_name = "v3-block-report-sent"];
                     uint32 v3_block_report_valid = 51 [json_name = "v3-block-report-valid"];
                     uint32 v3_block_report_invalid = 52 [json_name = "v3-block-report-invalid"];
                     uint32 v3_block_report_ignore = 53 [json_name = "v3-block-report-ignore"];
                     uint32 source_sent = 54 [json_name = "source-sent"];
                     uint32 source_valid = 55 [json_name = "source-valid"];
                     uint32 source_invalid = 56 [json_name = "source-invalid"];
                     uint32 source_ignore = 57 [json_name = "source-ignore"];
                     uint32 unknown_invalid = 58 [json_name = "unknown-invalid"];
                     uint32 unknown_ignore = 59 [json_name = "unknown-ignore"];
                  }
                  ControlMessage control_message = 26 [json_name = "control-message"];
                  message InvalidPacket {
                     message Query {
                        uint32 unwanted_source_list = 1 [json_name = "unwanted-source-list"];
                        uint32 zero_max_resp_code = 2 [json_name = "zero-max-resp-code"];
                        uint32 fault_length = 3 [json_name = "fault-length"];
                        uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                        uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                     }
                     Query query = 1 [json_name = "query"];
                     message Report {
                        uint32 fault_length = 1 [json_name = "fault-length"];
                        uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                        uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                        uint32 bad_checksum = 4 [json_name = "bad-checksum"];
                        uint32 illegal = 5 [json_name = "illegal"];
                     }
                     Report report = 2 [json_name = "report"];
                     message Leave {
                        uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                        uint32 bad_checksum = 2 [json_name = "bad-checksum"];
                     }
                     Leave leave = 3 [json_name = "leave"];
                  }
                  InvalidPacket invalid_packet = 27 [json_name = "invalid-packet"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 2 [json_name = "interfaces"];
            message StaticGroups {
               message StaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  bool is_source_dns_ssm_mapping = 7 [json_name = "is-source-dns-ssm-mapping"];
                  uint32 group_number = 8 [json_name = "group-number"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 3 [json_name = "static-groups"];
            message Dot1QStaticGroups {
               message Dot1QStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  uint32 begin_vid = 7 [json_name = "begin-vid"];
                  uint32 end_vid = 8 [json_name = "end-vid"];
                  uint32 group_number = 9 [json_name = "group-number"];
               }
               repeated Dot1QStaticGroup dot1q_static_group = 1 [json_name = "dot1q-static-group"];
            }
            Dot1QStaticGroups dot1q_static_groups = 4 [json_name = "dot1q-static-groups"];
            message QinqStaticGroups {
               message QinqStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_inc_step_group_mask = 5 [json_name = "is-inc-step-group-mask"];
                  string inc_step_group_mask = 6 [json_name = "inc-step-group-mask"];
                  uint32 pe_vid = 7 [json_name = "pe-vid"];
                  uint32 ce_begin_vid = 8 [json_name = "ce-begin-vid"];
                  uint32 ce_end_vid = 9 [json_name = "ce-end-vid"];
                  uint32 group_number = 10 [json_name = "group-number"];
               }
               repeated QinqStaticGroup qinq_static_group = 1 [json_name = "qinq-static-group"];
            }
            QinqStaticGroups qinq_static_groups = 5 [json_name = "qinq-static-groups"];
            message DisplayStaticGroups {
               message DisplayStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string source_address = 3 [json_name = "source-address"];
                  bool is_configured_boundary = 4 [json_name = "is-configured-boundary"];
               }
               repeated DisplayStaticGroup display_static_group = 1 [json_name = "display-static-group"];
            }
            DisplayStaticGroups display_static_groups = 6 [json_name = "display-static-groups"];
            message Groups {
               message Group {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string last_report_address = 3 [json_name = "last-report-address"];
                  uint32 up_time = 4 [json_name = "up-time"];
                  uint32 expire_time = 5 [json_name = "expire-time"];
                  uint32 last_member_query_counter = 6 [json_name = "last-member-query-counter"];
                  uint32 last_member_query_timer = 7 [json_name = "last-member-query-timer"];
                  enum SourceFilterMode {
                     INVALID_ENUM_VALUE_SourceFilterMode = 0;
                     SourceFilterMode_INCLUDE = 1;
                     SourceFilterMode_EXCLUDE = 2;
                     SourceFilterMode_RESERVED = 1610612735;
                  };
                  SourceFilterMode source_filter_mode = 8 [json_name = "source-filter-mode"];
                  uint32 v1_host_timer = 9 [json_name = "v1-host-timer"];
                  uint32 v2_host_timer = 10 [json_name = "v2-host-timer"];
                  bool is_ssm_mapping = 11 [json_name = "is-ssm-mapping"];
                  message Sources {
                     message Source {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        uint32 last_member_query_counter = 4 [json_name = "last-member-query-counter"];
                        uint32 last_member_query_timer = 5 [json_name = "last-member-query-timer"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  Sources sources = 12 [json_name = "sources"];
               }
               repeated Group group = 1 [json_name = "group"];
            }
            Groups groups = 7 [json_name = "groups"];
            message QinqGroups {
               message QinqGroup {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
                  string group_address = 4 [json_name = "group-address"];
                  uint32 up_time = 5 [json_name = "up-time"];
                  uint32 expire_time = 6 [json_name = "expire-time"];
                  bool group_timer = 7 [json_name = "group-timer"];
                  uint32 retran_count = 8 [json_name = "retran-count"];
                  bool last_member_query = 9 [json_name = "last-member-query"];
                  enum GroupMode {
                     INVALID_ENUM_VALUE_GroupMode = 0;
                     GroupMode_INCLUDE = 1;
                     GroupMode_EXCLUDE = 2;
                     GroupMode_RESERVED = 1610612735;
                  };
                  GroupMode group_mode = 10 [json_name = "group-mode"];
                  enum CompatMode {
                     CompatMode_V1 = 0;
                     CompatMode_V2 = 1;
                     CompatMode_V3 = 2;
                  };
                  CompatMode compat_mode = 11 [json_name = "compat-mode"];
                  enum V1HostTimer {
                     V1HostTimer_NOTX_EXIST = 0;
                     V1HostTimer_EXIST = 1;
                  };
                  V1HostTimer v1_host_timer = 12 [json_name = "v1-host-timer"];
                  enum V2HostTimer {
                     V2HostTimer_NOTX_EXIST = 0;
                     V2HostTimer_EXIST = 1;
                  };
                  V2HostTimer v2_host_timer = 13 [json_name = "v2-host-timer"];
                  bool source_last_member_query = 14 [json_name = "source-last-member-query"];
                  enum LastMemberQueryTimer {
                     LastMemberQueryTimer_NOTX_EXIST = 0;
                     LastMemberQueryTimer_EXIST = 1;
                  };
                  LastMemberQueryTimer last_member_query_timer = 15 [json_name = "last-member-query-timer"];
                  message Sources {
                     message Source {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum SourceTimer {
                           SourceTimer_NOTX_EXIST = 0;
                           SourceTimer_EXIST = 1;
                        };
                        SourceTimer source_timer = 4 [json_name = "source-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  Sources sources = 16 [json_name = "sources"];
               }
               repeated QinqGroup qinq_group = 1 [json_name = "qinq-group"];
            }
            QinqGroups qinq_groups = 8 [json_name = "qinq-groups"];
            message QinqPorts {
               message QinqPort {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string source_address = 3 [json_name = "source-address"];
                  message OutboundPortLists {
                     message OutboundPortList {
                        uint32 pe_vid = 1 [json_name = "pe-vid"];
                        uint32 ce_vid = 2 [json_name = "ce-vid"];
                        uint32 live_time = 3 [json_name = "live-time"];
                        enum GroupMode {
                           INVALID_ENUM_VALUE_GroupMode = 0;
                           GroupMode_INCLUDE = 1;
                           GroupMode_EXCLUDE = 2;
                           GroupMode_RESERVED = 1610612735;
                        };
                        GroupMode group_mode = 4 [json_name = "group-mode"];
                        string entry_flag = 5 [json_name = "entry-flag"];
                     }
                     repeated OutboundPortList outbound_port_list = 1 [json_name = "outbound-port-list"];
                  }
                  OutboundPortLists outbound_port_lists = 4 [json_name = "outbound-port-lists"];
               }
               repeated QinqPort qinq_port = 1 [json_name = "qinq-port"];
            }
            QinqPorts qinq_ports = 9 [json_name = "qinq-ports"];
            message InvalidPacket {
               message Query {
                  uint32 unwanted_source_list = 1 [json_name = "unwanted-source-list"];
                  uint32 zero_max_resp_code = 2 [json_name = "zero-max-resp-code"];
                  uint32 fault_length = 3 [json_name = "fault-length"];
                  uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                  uint32 bad_checksum = 5 [json_name = "bad-checksum"];
               }
               Query query = 1 [json_name = "query"];
               message Report {
                  uint32 fault_length = 1 [json_name = "fault-length"];
                  uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                  uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                  uint32 bad_checksum = 4 [json_name = "bad-checksum"];
                  uint32 illegal = 5 [json_name = "illegal"];
               }
               Report report = 2 [json_name = "report"];
               message Leave {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 bad_checksum = 2 [json_name = "bad-checksum"];
               }
               Leave leave = 3 [json_name = "leave"];
            }
            InvalidPacket invalid_packet = 10 [json_name = "invalid-packet"];
            message DnsSsmMappings {
               message DnsSsmMapping {
                  string group_address = 1 [json_name = "group-address"];
                  string domain = 2 [json_name = "domain"];
                  message Sources {
                     message Source {
                        string source_address = 1 [json_name = "source-address"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  Sources sources = 3 [json_name = "sources"];
               }
               repeated DnsSsmMapping dns_ssm_mapping = 1 [json_name = "dns-ssm-mapping"];
            }
            DnsSsmMappings dns_ssm_mappings = 11 [json_name = "dns-ssm-mappings"];
         }
         Igmp igmp = 18 [json_name = "igmp"];
         message Mld {
            message Global {
               uint32 query_interval = 1 [json_name = "query-interval"];
               uint32 query_response_interval = 2 [json_name = "query-response-interval"];
               uint32 robustness = 3 [json_name = "robustness"];
               uint32 last_member_query_interval = 4 [json_name = "last-member-query-interval"];
               bool require_router_alert = 5 [json_name = "require-router-alert"];
               bool send_router_alert = 6 [json_name = "send-router-alert"];
               uint32 other_querier_present_time = 7 [json_name = "other-querier-present-time"];
               message SsmMappings {
                  message SsmMapping {
                     string group_address = 1 [json_name = "group-address"];
                     uint32 mask_length = 2 [json_name = "mask-length"];
                     string source_address = 3 [json_name = "source-address"];
                  }
                  repeated SsmMapping ssm_mapping = 1 [json_name = "ssm-mapping"];
               }
               SsmMappings ssm_mappings = 8 [json_name = "ssm-mappings"];
               message Ipsec_ForAll {
                  string sa_name = 1 [json_name = "sa-name"];
               }
               message Ipsec_ForQuery {
                  string query_sa_name = 1 [json_name = "query-sa-name"];
               }
               oneof Ipsec {
                  Ipsec_ForAll ipsec_for_all = 9 [json_name = "for-all"];
                  Ipsec_ForQuery ipsec_for_query = 10 [json_name = "for-query"];
               }
            }
            Global global = 1 [json_name = "global"];
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool enable = 2 [json_name = "enable"];
                  bool ip_source_policy_enable = 3 [json_name = "ip-source-policy-enable"];
                  uint32 query_interval = 4 [json_name = "query-interval"];
                  uint32 query_response_interval = 5 [json_name = "query-response-interval"];
                  uint32 robustness = 6 [json_name = "robustness"];
                  uint32 version = 7 [json_name = "version"];
                  uint32 last_member_query_interval = 8 [json_name = "last-member-query-interval"];
                  bool require_router_alert = 9 [json_name = "require-router-alert"];
                  bool send_router_alert = 10 [json_name = "send-router-alert"];
                  uint32 other_querier_present_time = 11 [json_name = "other-querier-present-time"];
                  bool immediately_leave = 12 [json_name = "immediately-leave"];
                  bool on_demand_enable = 13 [json_name = "on-demand-enable"];
                  bool ssm_mapping_enable = 14 [json_name = "ssm-mapping-enable"];
                  string ip_source_policy_name = 15 [json_name = "ip-source-policy-name"];
                  string immediately_leave_policy = 16 [json_name = "immediately-leave-policy"];
                  string group_acl_name = 17 [json_name = "group-acl-name"];
                  uint32 group_acl_version = 18 [json_name = "group-acl-version"];
                  string query_acl_name = 19 [json_name = "query-acl-name"];
                  uint32 entry_limit = 20 [json_name = "entry-limit"];
                  string entry_limit_acl_name = 21 [json_name = "entry-limit-acl-name"];
                  message Status {
                     string address = 1 [json_name = "address"];
                     enum State {
                        INVALID_ENUM_VALUE_State = 0;
                        State_DOWN = 1;
                        State_UP = 2;
                     };
                     State state = 2 [json_name = "state"];
                     uint32 negotiate_query_interval = 3 [json_name = "negotiate-query-interval"];
                     uint32 other_querier_timeout = 4 [json_name = "other-querier-timeout"];
                     uint32 maximum_response_time = 5 [json_name = "maximum-response-time"];
                     uint32 last_member_query_time = 6 [json_name = "last-member-query-time"];
                     uint32 startup_query_interval = 7 [json_name = "startup-query-interval"];
                     uint32 startup_query_count = 8 [json_name = "startup-query-count"];
                     string querier_address = 9 [json_name = "querier-address"];
                     enum IsLocalQuerier {
                        IsLocalQuerier_RESERVED = 0;
                        IsLocalQuerier_NOX_QUERIER = 1;
                        IsLocalQuerier_THISX_ROUTER = 2;
                        IsLocalQuerier_OTHERX_ROUTER = 3;
                     };
                     IsLocalQuerier is_local_querier = 10 [json_name = "is-local-querier"];
                     uint32 joins = 11 [json_name = "joins"];
                     uint32 leaves = 12 [json_name = "leaves"];
                     uint32 negotiated_robustness = 13 [json_name = "negotiated-robustness"];
                     enum StartupQueryTimerState {
                        StartupQueryTimerState_OFF = 0;
                        StartupQueryTimerState_ON = 1;
                        StartupQueryTimerState_RESERVED = 255;
                     };
                     StartupQueryTimerState startup_query_timer_state = 14 [json_name = "startup-query-timer-state"];
                     enum OtherQuerierPresentTimerState {
                        OtherQuerierPresentTimerState_OFF = 0;
                        OtherQuerierPresentTimerState_ON = 1;
                        OtherQuerierPresentTimerState_RESERVED = 255;
                     };
                     OtherQuerierPresentTimerState other_querier_present_timer_state = 15 [json_name = "other-querier-present-timer-state"];
                     uint32 total_group_reported = 16 [json_name = "total-group-reported"];
                     enum RemoteBackupState {
                        RemoteBackupState_REMOTEX_BACKUPX_DISABLED = 0;
                        RemoteBackupState_REMOTEX_BACKUPX_MASTER = 1;
                        RemoteBackupState_REMOTEX_BACKUPX_SLAVE = 2;
                     };
                     RemoteBackupState remote_backup_state = 17 [json_name = "remote-backup-state"];
                  }
                  Status status = 22 [json_name = "status"];
                  message Ipsec_ForAll {
                     string sa_name = 1 [json_name = "sa-name"];
                  }
                  message Ipsec_ForQuery {
                     string query_sa_name = 1 [json_name = "query-sa-name"];
                  }
                  oneof Ipsec {
                     Ipsec_ForAll ipsec_for_all = 23 [json_name = "for-all"];
                     Ipsec_ForQuery ipsec_for_query = 24 [json_name = "for-query"];
                  }
                  bool is_bas_igmp_suppress = 25 [json_name = "is-bas-igmp-suppress"];
                  message ControlMessage {
                     string address = 1 [json_name = "address"];
                     uint32 general_query_sent = 2 [json_name = "general-query-sent"];
                     uint32 general_query_valid = 3 [json_name = "general-query-valid"];
                     uint32 general_query_invalid = 4 [json_name = "general-query-invalid"];
                     uint32 general_query_ignore = 5 [json_name = "general-query-ignore"];
                     uint32 group_query_sent = 6 [json_name = "group-query-sent"];
                     uint32 group_query_valid = 7 [json_name = "group-query-valid"];
                     uint32 group_query_invalid = 8 [json_name = "group-query-invalid"];
                     uint32 group_query_ignore = 9 [json_name = "group-query-ignore"];
                     uint32 source_group_sent = 10 [json_name = "source-group-sent"];
                     uint32 source_group_valid = 11 [json_name = "source-group-valid"];
                     uint32 source_group_invalid = 12 [json_name = "source-group-invalid"];
                     uint32 source_group_ignore = 13 [json_name = "source-group-ignore"];
                     uint32 v1v2_report_asm_sent = 14 [json_name = "v1v2-report-asm-sent"];
                     uint32 v1v2_report_asm_valid = 15 [json_name = "v1v2-report-asm-valid"];
                     uint32 v1v2_report_asm_invalid = 16 [json_name = "v1v2-report-asm-invalid"];
                     uint32 v1v2_report_asm_ignore = 17 [json_name = "v1v2-report-asm-ignore"];
                     uint32 v1v2_report_ssm_sent = 18 [json_name = "v1v2-report-ssm-sent"];
                     uint32 v1v2_report_ssm_valid = 19 [json_name = "v1v2-report-ssm-valid"];
                     uint32 v1v2_report_ssm_invalid = 20 [json_name = "v1v2-report-ssm-invalid"];
                     uint32 v1v2_report_ssm_ignore = 21 [json_name = "v1v2-report-ssm-ignore"];
                     uint32 leave_asm_sent = 22 [json_name = "leave-asm-sent"];
                     uint32 leave_asm_valid = 23 [json_name = "leave-asm-valid"];
                     uint32 leave_asm_invalid = 24 [json_name = "leave-asm-invalid"];
                     uint32 leave_asm_ignore = 25 [json_name = "leave-asm-ignore"];
                     uint32 leave_ssm_sent = 26 [json_name = "leave-ssm-sent"];
                     uint32 leave_ssm_valid = 27 [json_name = "leave-ssm-valid"];
                     uint32 leave_ssm_invalid = 28 [json_name = "leave-ssm-invalid"];
                     uint32 leave_ssm_ignore = 29 [json_name = "leave-ssm-ignore"];
                     uint32 v3_isin_report_sent = 30 [json_name = "v3-isin-report-sent"];
                     uint32 v3_isin_report_valid = 31 [json_name = "v3-isin-report-valid"];
                     uint32 v3_isin_report_invalid = 32 [json_name = "v3-isin-report-invalid"];
                     uint32 v3_isin_report_ignore = 33 [json_name = "v3-isin-report-ignore"];
                     uint32 v3_isex_report_sent = 34 [json_name = "v3-isex-report-sent"];
                     uint32 v3_isex_report_valid = 35 [json_name = "v3-isex-report-valid"];
                     uint32 v3_isex_report_invalid = 36 [json_name = "v3-isex-report-invalid"];
                     uint32 v3_isex_report_ignore = 37 [json_name = "v3-isex-report-ignore"];
                     uint32 v3_toin_report_sent = 38 [json_name = "v3-toin-report-sent"];
                     uint32 v3_toin_report_valid = 39 [json_name = "v3-toin-report-valid"];
                     uint32 v3_toin_report_invalid = 40 [json_name = "v3-toin-report-invalid"];
                     uint32 v3_toin_report_ignore = 41 [json_name = "v3-toin-report-ignore"];
                     uint32 v3_toex_report_sent = 42 [json_name = "v3-toex-report-sent"];
                     uint32 v3_toex_report_valid = 43 [json_name = "v3-toex-report-valid"];
                     uint32 v3_toex_report_invalid = 44 [json_name = "v3-toex-report-invalid"];
                     uint32 v3_toex_report_ignore = 45 [json_name = "v3-toex-report-ignore"];
                     uint32 v3_allow_report_sent = 46 [json_name = "v3-allow-report-sent"];
                     uint32 v3_allow_report_valid = 47 [json_name = "v3-allow-report-valid"];
                     uint32 v3_allow_report_invalid = 48 [json_name = "v3-allow-report-invalid"];
                     uint32 v3_allow_report_ignore = 49 [json_name = "v3-allow-report-ignore"];
                     uint32 v3_block_report_sent = 50 [json_name = "v3-block-report-sent"];
                     uint32 v3_block_report_valid = 51 [json_name = "v3-block-report-valid"];
                     uint32 v3_block_report_invalid = 52 [json_name = "v3-block-report-invalid"];
                     uint32 v3_block_report_ignore = 53 [json_name = "v3-block-report-ignore"];
                     uint32 source_sent = 54 [json_name = "source-sent"];
                     uint32 source_valid = 55 [json_name = "source-valid"];
                     uint32 source_invalid = 56 [json_name = "source-invalid"];
                     uint32 source_ignore = 57 [json_name = "source-ignore"];
                     uint32 unknown_invalid = 58 [json_name = "unknown-invalid"];
                     uint32 unknown_ignore = 59 [json_name = "unknown-ignore"];
                     uint32 v1_report_asm_sent = 60 [json_name = "v1-report-asm-sent"];
                     uint32 v1_report_asm_valid = 61 [json_name = "v1-report-asm-valid"];
                     uint32 v1_report_asm_invalid = 62 [json_name = "v1-report-asm-invalid"];
                     uint32 v1_report_asm_ignore = 63 [json_name = "v1-report-asm-ignore"];
                     uint32 v1_report_ssm_sent = 64 [json_name = "v1-report-ssm-sent"];
                     uint32 v1_report_ssm_valid = 65 [json_name = "v1-report-ssm-valid"];
                     uint32 v1_report_ssm_invalid = 66 [json_name = "v1-report-ssm-invalid"];
                     uint32 v1_report_ssm_ignore = 67 [json_name = "v1-report-ssm-ignore"];
                     uint32 done_asm_sent = 68 [json_name = "done-asm-sent"];
                     uint32 done_asm_valid = 69 [json_name = "done-asm-valid"];
                     uint32 done_asm_invalid = 70 [json_name = "done-asm-invalid"];
                     uint32 done_asm_ignore = 71 [json_name = "done-asm-ignore"];
                     uint32 done_ssm_sent = 72 [json_name = "done-ssm-sent"];
                     uint32 done_ssm_valid = 73 [json_name = "done-ssm-valid"];
                     uint32 done_ssm_invalid = 74 [json_name = "done-ssm-invalid"];
                     uint32 done_ssm_ignore = 75 [json_name = "done-ssm-ignore"];
                     uint32 v2_isin_report_sent = 76 [json_name = "v2-isin-report-sent"];
                     uint32 v2_isin_report_valid = 77 [json_name = "v2-isin-report-valid"];
                     uint32 v2_isin_report_invalid = 78 [json_name = "v2-isin-report-invalid"];
                     uint32 v2_isin_report_ignore = 79 [json_name = "v2-isin-report-ignore"];
                     uint32 v2_isex_report_sent = 80 [json_name = "v2-isex-report-sent"];
                     uint32 v2_isex_report_valid = 81 [json_name = "v2-isex-report-valid"];
                     uint32 v2_isex_report_invalid = 82 [json_name = "v2-isex-report-invalid"];
                     uint32 v2_isex_report_ignore = 83 [json_name = "v2-isex-report-ignore"];
                     uint32 v2_toin_report_sent = 84 [json_name = "v2-toin-report-sent"];
                     uint32 v2_toin_report_valid = 85 [json_name = "v2-toin-report-valid"];
                     uint32 v2_toin_report_invalid = 86 [json_name = "v2-toin-report-invalid"];
                     uint32 v2_toin_report_ignore = 87 [json_name = "v2-toin-report-ignore"];
                     uint32 v2_toex_report_sent = 88 [json_name = "v2-toex-report-sent"];
                     uint32 v2_toex_report_valid = 89 [json_name = "v2-toex-report-valid"];
                     uint32 v2_toex_report_invalid = 90 [json_name = "v2-toex-report-invalid"];
                     uint32 v2_toex_report_ignore = 91 [json_name = "v2-toex-report-ignore"];
                     uint32 v2_allow_report_sent = 92 [json_name = "v2-allow-report-sent"];
                     uint32 v2_allow_report_valid = 93 [json_name = "v2-allow-report-valid"];
                     uint32 v2_allow_report_invalid = 94 [json_name = "v2-allow-report-invalid"];
                     uint32 v2_allow_report_ignore = 95 [json_name = "v2-allow-report-ignore"];
                     uint32 v2_block_report_sent = 96 [json_name = "v2-block-report-sent"];
                     uint32 v2_block_report_valid = 97 [json_name = "v2-block-report-valid"];
                     uint32 v2_block_report_invalid = 98 [json_name = "v2-block-report-invalid"];
                     uint32 v2_block_report_ignore = 99 [json_name = "v2-block-report-ignore"];
                  }
                  ControlMessage control_message = 26 [json_name = "control-message"];
                  message InvalidPacket {
                     message Query {
                        uint32 unwanted_source_list = 1 [json_name = "unwanted-source-list"];
                        uint32 zero_max_resp_code = 2 [json_name = "zero-max-resp-code"];
                        uint32 fault_length = 3 [json_name = "fault-length"];
                        uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                        uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                     }
                     Query query = 1 [json_name = "query"];
                     message Report {
                        uint32 fault_length = 1 [json_name = "fault-length"];
                        uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                        uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                        uint32 bad_checksum = 4 [json_name = "bad-checksum"];
                        uint32 illegal = 5 [json_name = "illegal"];
                     }
                     Report report = 2 [json_name = "report"];
                     message Leave {
                        uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                        uint32 bad_checksum = 2 [json_name = "bad-checksum"];
                     }
                     Leave leave = 3 [json_name = "leave"];
                  }
                  InvalidPacket invalid_packet = 27 [json_name = "invalid-packet"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 2 [json_name = "interfaces"];
            message StaticGroups {
               message StaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 total_number = 7 [json_name = "total-number"];
               }
               repeated StaticGroup static_group = 1 [json_name = "static-group"];
            }
            StaticGroups static_groups = 3 [json_name = "static-groups"];
            message Dot1QStaticGroups {
               message Dot1QStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 begin_vid = 7 [json_name = "begin-vid"];
                  uint32 end_vid = 8 [json_name = "end-vid"];
                  uint32 group_number = 9 [json_name = "group-number"];
               }
               repeated Dot1QStaticGroup dot1q_static_group = 1 [json_name = "dot1q-static-group"];
            }
            Dot1QStaticGroups dot1q_static_groups = 4 [json_name = "dot1q-static-groups"];
            message QinqStaticGroups {
               message QinqStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  bool is_source_address = 3 [json_name = "is-source-address"];
                  string source_address = 4 [json_name = "source-address"];
                  bool is_mask_length = 5 [json_name = "is-mask-length"];
                  uint32 mask_length = 6 [json_name = "mask-length"];
                  uint32 pe_vid = 7 [json_name = "pe-vid"];
                  uint32 ce_begin_vid = 8 [json_name = "ce-begin-vid"];
                  uint32 ce_end_vid = 9 [json_name = "ce-end-vid"];
                  uint32 group_number = 10 [json_name = "group-number"];
               }
               repeated QinqStaticGroup qinq_static_group = 1 [json_name = "qinq-static-group"];
            }
            QinqStaticGroups qinq_static_groups = 5 [json_name = "qinq-static-groups"];
            message DisplayStaticGroups {
               message DisplayStaticGroup {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string source_address = 3 [json_name = "source-address"];
                  bool is_configured_boundary = 4 [json_name = "is-configured-boundary"];
               }
               repeated DisplayStaticGroup display_static_group = 1 [json_name = "display-static-group"];
            }
            DisplayStaticGroups display_static_groups = 6 [json_name = "display-static-groups"];
            message Groups {
               message Group {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string last_report_address = 3 [json_name = "last-report-address"];
                  uint32 up_time = 4 [json_name = "up-time"];
                  uint32 expire_time = 5 [json_name = "expire-time"];
                  uint32 last_member_query_counter = 6 [json_name = "last-member-query-counter"];
                  uint32 last_member_query_timer = 7 [json_name = "last-member-query-timer"];
                  enum SourceFilterMode {
                     INVALID_ENUM_VALUE_SourceFilterMode = 0;
                     SourceFilterMode_INCLUDE = 1;
                     SourceFilterMode_EXCLUDE = 2;
                     SourceFilterMode_RESERVED = 1610612735;
                  };
                  SourceFilterMode source_filter_mode = 8 [json_name = "source-filter-mode"];
                  uint32 v1_host_timer = 9 [json_name = "v1-host-timer"];
                  uint32 v2_host_timer = 10 [json_name = "v2-host-timer"];
                  bool is_ssm_mapping = 11 [json_name = "is-ssm-mapping"];
                  message Sources {
                     message Source {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        uint32 last_member_query_counter = 4 [json_name = "last-member-query-counter"];
                        uint32 last_member_query_timer = 5 [json_name = "last-member-query-timer"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  Sources sources = 12 [json_name = "sources"];
               }
               repeated Group group = 1 [json_name = "group"];
            }
            Groups groups = 7 [json_name = "groups"];
            message QinqGroups {
               message QinqGroup {
                  string interface = 1 [json_name = "interface"];
                  uint32 pe_vid = 2 [json_name = "pe-vid"];
                  uint32 ce_vid = 3 [json_name = "ce-vid"];
                  string group_address = 4 [json_name = "group-address"];
                  uint32 up_time = 5 [json_name = "up-time"];
                  uint32 expire_time = 6 [json_name = "expire-time"];
                  bool group_timer = 7 [json_name = "group-timer"];
                  uint32 retran_count = 8 [json_name = "retran-count"];
                  bool last_member_query = 9 [json_name = "last-member-query"];
                  enum GroupMode {
                     INVALID_ENUM_VALUE_GroupMode = 0;
                     GroupMode_INCLUDE = 1;
                     GroupMode_EXCLUDE = 2;
                     GroupMode_RESERVED = 1610612735;
                  };
                  GroupMode group_mode = 10 [json_name = "group-mode"];
                  enum CompatMode {
                     CompatMode_V1 = 0;
                     CompatMode_V2 = 1;
                     CompatMode_V3 = 2;
                  };
                  CompatMode compat_mode = 11 [json_name = "compat-mode"];
                  enum V1HostTimer {
                     V1HostTimer_NOTX_EXIST = 0;
                     V1HostTimer_EXIST = 1;
                  };
                  V1HostTimer v1_host_timer = 12 [json_name = "v1-host-timer"];
                  enum V2HostTimer {
                     V2HostTimer_NOTX_EXIST = 0;
                     V2HostTimer_EXIST = 1;
                  };
                  V2HostTimer v2_host_timer = 13 [json_name = "v2-host-timer"];
                  bool source_last_member_query = 14 [json_name = "source-last-member-query"];
                  enum LastMemberQueryTimer {
                     LastMemberQueryTimer_NOTX_EXIST = 0;
                     LastMemberQueryTimer_EXIST = 1;
                  };
                  LastMemberQueryTimer last_member_query_timer = 15 [json_name = "last-member-query-timer"];
                  message Sources {
                     message Source {
                        string source_address = 1 [json_name = "source-address"];
                        uint32 up_time = 2 [json_name = "up-time"];
                        uint32 expire_time = 3 [json_name = "expire-time"];
                        enum SourceTimer {
                           SourceTimer_NOTX_EXIST = 0;
                           SourceTimer_EXIST = 1;
                        };
                        SourceTimer source_timer = 4 [json_name = "source-timer"];
                        uint32 retran_count = 5 [json_name = "retran-count"];
                        bool last_member_query = 6 [json_name = "last-member-query"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  Sources sources = 16 [json_name = "sources"];
               }
               repeated QinqGroup qinq_group = 1 [json_name = "qinq-group"];
            }
            QinqGroups qinq_groups = 8 [json_name = "qinq-groups"];
            message QinqPorts {
               message QinqPort {
                  string interface = 1 [json_name = "interface"];
                  string group_address = 2 [json_name = "group-address"];
                  string source_address = 3 [json_name = "source-address"];
                  message OutboundPortLists {
                     message OutboundPortList {
                        uint32 pe_vid = 1 [json_name = "pe-vid"];
                        uint32 ce_vid = 2 [json_name = "ce-vid"];
                        uint32 live_time = 3 [json_name = "live-time"];
                        enum GroupMode {
                           INVALID_ENUM_VALUE_GroupMode = 0;
                           GroupMode_INCLUDE = 1;
                           GroupMode_EXCLUDE = 2;
                           GroupMode_RESERVED = 1610612735;
                        };
                        GroupMode group_mode = 4 [json_name = "group-mode"];
                        string entry_flag = 5 [json_name = "entry-flag"];
                     }
                     repeated OutboundPortList outbound_port_list = 1 [json_name = "outbound-port-list"];
                  }
                  OutboundPortLists outbound_port_lists = 4 [json_name = "outbound-port-lists"];
               }
               repeated QinqPort qinq_port = 1 [json_name = "qinq-port"];
            }
            QinqPorts qinq_ports = 9 [json_name = "qinq-ports"];
            message InvalidPacket {
               message Query {
                  uint32 unwanted_source_list = 1 [json_name = "unwanted-source-list"];
                  uint32 zero_max_resp_code = 2 [json_name = "zero-max-resp-code"];
                  uint32 fault_length = 3 [json_name = "fault-length"];
                  uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                  uint32 bad_checksum = 5 [json_name = "bad-checksum"];
               }
               Query query = 1 [json_name = "query"];
               message Report {
                  uint32 fault_length = 1 [json_name = "fault-length"];
                  uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                  uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                  uint32 bad_checksum = 4 [json_name = "bad-checksum"];
                  uint32 illegal = 5 [json_name = "illegal"];
               }
               Report report = 2 [json_name = "report"];
               message Leave {
                  uint32 invalid_multicast_group = 1 [json_name = "invalid-multicast-group"];
                  uint32 bad_checksum = 2 [json_name = "bad-checksum"];
               }
               Leave leave = 3 [json_name = "leave"];
            }
            InvalidPacket invalid_packet = 10 [json_name = "invalid-packet"];
         }
         Mld mld = 19 [json_name = "mld"];
         message Flowspec {
            message FlowRoutes {
               message FlowRoute {
                  string name = 1 [json_name = "name"];
                  enum AddressFamily {
                     INVALID_ENUM_VALUE_AddressFamily = 0;
                     AddressFamily_IPV4FLOW = 7;
                     AddressFamily_IPV6FLOW = 15;
                  };
                  AddressFamily address_family = 2 [json_name = "address-family"];
                  message Condition {
                     message SourcePrefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                     }
                     SourcePrefix source_prefix = 1 [json_name = "source-prefix"];
                     message DestinationPrefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                     }
                     DestinationPrefix destination_prefix = 2 [json_name = "destination-prefix"];
                     message SourceIpv6Prefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                     }
                     SourceIpv6Prefix source_ipv6_prefix = 3 [json_name = "source-ipv6-prefix"];
                     message DestinationIpv6Prefix {
                        string address = 1 [json_name = "address"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                     }
                     DestinationIpv6Prefix destination_ipv6_prefix = 4 [json_name = "destination-ipv6-prefix"];
                     message OriginAss {
                        message OriginAs {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_MATCHX_DESTX_ORIGINX_AS = 201;
                           };
                           Type type = 1 [json_name = "type"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated OriginAs origin_as = 1 [json_name = "origin-as"];
                     }
                     OriginAss origin_ass = 5 [json_name = "origin-ass"];
                     message TcpFlags {
                        message TcpFlag {
                           uint32 value = 1 [json_name = "value"];
                           enum Operator {
                              INVALID_ENUM_VALUE_Operator = 0;
                              Operator_MATCH = 1;
                              Operator_NOT = 2;
                              Operator_ANYX_MATCH = 3;
                           };
                           Operator operator = 2 [json_name = "operator"];
                        }
                        repeated TcpFlag tcp_flag = 1 [json_name = "tcp-flag"];
                     }
                     TcpFlags tcp_flags = 6 [json_name = "tcp-flags"];
                     message Fragments {
                        message Fragment {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_FRAGMENT = 1;
                              Type_FRAGMENTX_SPEX_FIRST = 2;
                              Type_NONX_FRAGMENT = 3;
                           };
                           Type type = 1 [json_name = "type"];
                           enum Operator {
                              INVALID_ENUM_VALUE_Operator = 0;
                              Operator_MATCH = 1;
                              Operator_NOT = 2;
                           };
                           Operator operator = 2 [json_name = "operator"];
                        }
                        repeated Fragment fragment = 1 [json_name = "fragment"];
                     }
                     Fragments fragments = 7 [json_name = "fragments"];
                     message IcmpCodes {
                        message IcmpCode {
                           string range = 1 [json_name = "range"];
                        }
                        repeated IcmpCode icmp_code = 1 [json_name = "icmp-code"];
                     }
                     IcmpCodes icmp_codes = 8 [json_name = "icmp-codes"];
                     message IcmpTypes {
                        message IcmpType {
                           string range = 1 [json_name = "range"];
                        }
                        repeated IcmpType icmp_type = 1 [json_name = "icmp-type"];
                     }
                     IcmpTypes icmp_types = 9 [json_name = "icmp-types"];
                     message Dscps {
                        message Dscp {
                           string range = 1 [json_name = "range"];
                        }
                        repeated Dscp dscp = 1 [json_name = "dscp"];
                     }
                     Dscps dscps = 10 [json_name = "dscps"];
                     message Protocols {
                        message Protocol {
                           string range = 1 [json_name = "range"];
                        }
                        repeated Protocol protocol = 1 [json_name = "protocol"];
                     }
                     Protocols protocols = 11 [json_name = "protocols"];
                     message PacketLengths {
                        message PacketLength {
                           string range = 1 [json_name = "range"];
                        }
                        repeated PacketLength packet_length = 1 [json_name = "packet-length"];
                     }
                     PacketLengths packet_lengths = 12 [json_name = "packet-lengths"];
                     message PacketPort {
                        message SetType_PortRule {
                           message Ports {
                              message Port {
                                 string range = 1 [json_name = "range"];
                              }
                              repeated Port port = 1 [json_name = "port"];
                           }
                           Ports ports = 1 [json_name = "ports"];
                        }
                        message SetType_SrcDestPortRule {
                           message SourceDestinationPorts {
                              message SourceDestinationPort {
                                 enum Type {
                                    INVALID_ENUM_VALUE_Type = 0;
                                    Type_MATCHX_DESTX_PORT = 5;
                                    Type_MATCHX_SOURCEX_PORT = 6;
                                 };
                                 Type type = 1 [json_name = "type"];
                                 string range = 2 [json_name = "range"];
                              }
                              repeated SourceDestinationPort source_destination_port = 1 [json_name = "source-destination-port"];
                           }
                           SourceDestinationPorts source_destination_ports = 1 [json_name = "source-destination-ports"];
                        }
                        oneof SetType {
                           SetType_PortRule set_type_port_rule = 1 [json_name = "port-rule"];
                           SetType_SrcDestPortRule set_type_src_dest_port_rule = 2 [json_name = "src-dest-port-rule"];
                        }
                     }
                     PacketPort packet_port = 13 [json_name = "packet-port"];
                  }
                  Condition condition = 3 [json_name = "condition"];
                  message Action {
                     message RemarkDscp {
                        uint32 value = 1 [json_name = "value"];
                     }
                     RemarkDscp remark_dscp = 1 [json_name = "remark-dscp"];
                     message TrafficRate {
                        uint32 value = 1 [json_name = "value"];
                        uint32 valid_value = 2 [json_name = "valid-value"];
                     }
                     TrafficRate traffic_rate = 2 [json_name = "traffic-rate"];
                     message Traffic {
                        bool sample = 1 [json_name = "sample"];
                     }
                     Traffic traffic = 3 [json_name = "traffic"];
                     message RedirectIpv6 {
                        string color = 1 [json_name = "color"];
                        string ipv6 = 2 [json_name = "ipv6"];
                        string prefix_sid = 3 [json_name = "prefix-sid"];
                     }
                     RedirectIpv6 redirect_ipv6 = 4 [json_name = "redirect-ipv6"];
                     message RedirectType_Ip {
                        message RedirectIp {
                           string value = 1 [json_name = "value"];
                           string color = 2 [json_name = "color"];
                        }
                        RedirectIp redirect_ip = 1 [json_name = "redirect-ip"];
                     }
                     message RedirectType_Ipv6 {
                        message RedirectIpv6 {
                           string ipv610 = 1 [json_name = "ipv6"];
                           string color = 2 [json_name = "color"];
                           string prefix_sid = 3 [json_name = "prefix-sid"];
                        }
                        RedirectIpv6 redirect_ipv6 = 1 [json_name = "redirect-ipv6"];
                     }
                     message RedirectType_MultiIp {
                        message RedirectMultiIps {
                           message RedirectMultiIp {
                              string value = 1 [json_name = "value"];
                              uint32 weight = 2 [json_name = "weight"];
                           }
                           repeated RedirectMultiIp redirect_multi_ip = 1 [json_name = "redirect-multi-ip"];
                        }
                        RedirectMultiIps redirect_multi_ips = 1 [json_name = "redirect-multi-ips"];
                        message RedirectMultiIpColors {
                           message RedirectMultiIpColor {
                              string value = 1 [json_name = "value"];
                              string color = 2 [json_name = "color"];
                              uint32 weight = 3 [json_name = "weight"];
                           }
                           repeated RedirectMultiIpColor redirect_multi_ip_color = 1 [json_name = "redirect-multi-ip-color"];
                        }
                        RedirectMultiIpColors redirect_multi_ip_colors = 2 [json_name = "redirect-multi-ip-colors"];
                     }
                     message RedirectType_MultiIpv6 {
                        message RedirectMultiIpv6S {
                           message RedirectMultiIpv6 {
                              string ipv6 = 1 [json_name = "ipv6"];
                              uint32 weight = 2 [json_name = "weight"];
                           }
                           repeated RedirectMultiIpv6 redirect_multi_ipv6 = 1 [json_name = "redirect-multi-ipv6"];
                        }
                        RedirectMultiIpv6S redirect_multi_ipv6s = 1 [json_name = "redirect-multi-ipv6s"];
                        message RedirectMultiIpv6Colors {
                           message RedirectMultiIpv6Color {
                              string ipv6 = 1 [json_name = "ipv6"];
                              string color = 2 [json_name = "color"];
                              uint32 weight = 3 [json_name = "weight"];
                           }
                           repeated RedirectMultiIpv6Color redirect_multi_ipv6_color = 1 [json_name = "redirect-multi-ipv6-color"];
                        }
                        RedirectMultiIpv6Colors redirect_multi_ipv6_colors = 2 [json_name = "redirect-multi-ipv6-colors"];
                     }
                     oneof RedirectType {
                        RedirectType_Ip redirect_type_ip = 5 [json_name = "ip"];
                        RedirectType_Ipv6 redirect_type_ipv6 = 6 [json_name = "ipv6"];
                        RedirectType_MultiIp redirect_type_multi_ip = 9 [json_name = "multi-ip"];
                        RedirectType_MultiIpv6 redirect_type_multi_ipv6 = 10 [json_name = "multi-ipv6"];
                     }
                     message RedirectVpnTarget {
                        string value = 1 [json_name = "value"];
                     }
                     RedirectVpnTarget redirect_vpn_target = 7 [json_name = "redirect-vpn-target"];
                     message Deny {
                        bool enable = 1 [json_name = "enable"];
                     }
                     Deny deny = 8 [json_name = "deny"];
                     message TrafficRateType_TrafficRate {
                        message TrafficRate9 {
                           uint32 value = 1 [json_name = "value"];
                           uint32 valid_value = 2 [json_name = "valid-value"];
                        }
                        TrafficRate9 traffic_rate = 1 [json_name = "traffic-rate"];
                     }
                     message TrafficRateType_Deny {
                        message Deny9 {
                           bool enable = 1 [json_name = "enable"];
                        }
                        Deny9 deny9 = 1 [json_name = "deny"];
                     }
                     oneof TrafficRateType {
                        TrafficRateType_TrafficRate traffic_rate_type_traffic_rate = 11 [json_name = "traffic-rate"];
                        TrafficRateType_Deny traffic_rate_type_deny = 12 [json_name = "deny"];
                     }
                  }
                  Action action = 4 [json_name = "action"];
                  message InterfaceGroups {
                     message InterfaceGroup {
                        uint32 id = 1 [json_name = "id"];
                     }
                     repeated InterfaceGroup interface_group = 1 [json_name = "interface-group"];
                  }
                  InterfaceGroups interface_groups = 5 [json_name = "interface-groups"];
               }
               repeated FlowRoute flow_route = 1 [json_name = "flow-route"];
            }
            FlowRoutes flow_routes = 1 [json_name = "flow-routes"];
         }
         Flowspec flowspec = 20 [json_name = "flowspec"];
         message Te {
            message Interfaces {
               message Interface {
                  string name = 1 [json_name = "name"];
                  bool mpls_te_enable = 2 [json_name = "mpls-te-enable"];
                  message Attribute {
                     uint32 metric = 1 [json_name = "metric"];
                     string admin_groups = 2 [json_name = "admin-groups"];
                     repeated string admin_groups_name = 3 [json_name = "admin-groups-name"];
                     repeated uint32 srlg_group = 4 [json_name = "srlg-group"];
                     message Bandwidth {
                        uint64 max_reserved = 1 [json_name = "max-reserved"];
                        uint64 bc0 = 2 [json_name = "bc0"];
                        uint32 dynamic_max_reserved_percent = 3 [json_name = "dynamic-max-reserved-percent"];
                        uint32 dynamic_bc0_percent = 4 [json_name = "dynamic-bc0-percent"];
                        int32 change_threshold_down = 5 [json_name = "change-threshold-down"];
                        int32 change_threshold_up = 6 [json_name = "change-threshold-up"];
                        uint64 bc1 = 7 [json_name = "bc1"];
                        uint64 bc2 = 8 [json_name = "bc2"];
                        uint64 bc3 = 9 [json_name = "bc3"];
                        uint64 bc4 = 10 [json_name = "bc4"];
                        uint64 bc5 = 11 [json_name = "bc5"];
                        uint64 bc6 = 12 [json_name = "bc6"];
                        uint64 bc7 = 13 [json_name = "bc7"];
                        uint64 bc0_available = 14 [json_name = "bc0-available"];
                        bool dyn_base_remain_bw = 15 [json_name = "dyn-base-remain-bw"];
                     }
                     Bandwidth bandwidth = 5 [json_name = "bandwidth"];
                     message Status {
                        uint64 used_bandwidth = 1 [json_name = "used-bandwidth"];
                        enum LineProtocolState {
                           LineProtocolState_DOWN = 0;
                           LineProtocolState_UP = 1;
                        };
                        LineProtocolState line_protocol_state = 2 [json_name = "line-protocol-state"];
                        uint64 static_reserved_bandwidth = 3 [json_name = "static-reserved-bandwidth"];
                     }
                     Status status = 6 [json_name = "status"];
                  }
                  Attribute attribute = 3 [json_name = "attribute"];
                  message MplsTeAttribute {
                     enum AutoFrrMode {
                        AutoFrrMode_DEFAULT = 0;
                        AutoFrrMode_LINK = 1;
                        AutoFrrMode_NODE = 2;
                        AutoFrrMode_SELFX_ADAPTING = 3;
                        AutoFrrMode_DISABLE = 4;
                     };
                     AutoFrrMode auto_frr_mode = 1 [json_name = "auto-frr-mode"];
                     message AutoFrrAttributes {
                        uint32 bandwidth = 1 [json_name = "bandwidth"];
                        uint32 setup_priority = 2 [json_name = "setup-priority"];
                        uint32 hold_priority = 3 [json_name = "hold-priority"];
                        uint32 hop_limit = 4 [json_name = "hop-limit"];
                        string include_any = 5 [json_name = "include-any"];
                        string exclude_any = 6 [json_name = "exclude-any"];
                        string include_all = 7 [json_name = "include-all"];
                        repeated string include_any_affinity_name = 8 [json_name = "include-any-affinity-name"];
                        repeated string exclude_any_affinity_name = 9 [json_name = "exclude-any-affinity-name"];
                        repeated string include_all_affinity_name = 10 [json_name = "include-all-affinity-name"];
                     }
                     AutoFrrAttributes auto_frr_attributes = 2 [json_name = "auto-frr-attributes"];
                  }
                  MplsTeAttribute mpls_te_attribute = 4 [json_name = "mpls-te-attribute"];
                  bool p2mp_te_disable = 5 [json_name = "p2mp-te-disable"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            Interfaces interfaces = 1 [json_name = "interfaces"];
            message AttributeApplications {
               message AttributeApplication {
                  string interface_name = 1 [json_name = "interface-name"];
                  enum ApplicationType {
                     INVALID_ENUM_VALUE_ApplicationType = 0;
                     ApplicationType_FLEXX_ALGO = 1;
                  };
                  ApplicationType application_type = 2 [json_name = "application-type"];
                  uint32 metric = 3 [json_name = "metric"];
                  uint32 delay = 4 [json_name = "delay"];
                  bool inherit = 5 [json_name = "inherit"];
                  repeated string admin_groups_name = 6 [json_name = "admin-groups-name"];
               }
               repeated AttributeApplication attribute_application = 1 [json_name = "attribute-application"];
            }
            AttributeApplications attribute_applications = 2 [json_name = "attribute-applications"];
         }
         Te te = 21 [json_name = "te"];
         bool traffic_statistic_enable = 22 [json_name = "traffic-statistic-enable"];
         message Msdp {
            message Global {
               bool cache_sa_enable = 1 [json_name = "cache-sa-enable"];
               bool encap_data_enable = 2 [json_name = "encap-data-enable"];
               uint32 retry_interval = 3 [json_name = "retry-interval"];
               bool import_source_enable = 4 [json_name = "import-source-enable"];
               message Peers {
                  message Peer {
                     string address = 1 [json_name = "address"];
                     string connect_interface = 2 [json_name = "connect-interface"];
                     uint32 minimum_ttl = 3 [json_name = "minimum-ttl"];
                     string mesh_group_name = 4 [json_name = "mesh-group-name"];
                     bool request_sa_enable = 5 [json_name = "request-sa-enable"];
                     bool is_shutdown = 6 [json_name = "is-shutdown"];
                     bool static_rpf_enable = 8 [json_name = "static-rpf-enable"];
                     bool sa_policy_export_enable = 9 [json_name = "sa-policy-export-enable"];
                     bool sa_policy_import_enable = 10 [json_name = "sa-policy-import-enable"];
                     bool sa_request_policy_enable = 11 [json_name = "sa-request-policy-enable"];
                     uint32 holdtime = 12 [json_name = "holdtime"];
                     uint32 keep_alive_interval = 13 [json_name = "keep-alive-interval"];
                     message Status {
                        string as_num = 1 [json_name = "as-num"];
                        enum State {
                           INVALID_ENUM_VALUE_State = 0;
                           State_DOWN = 1;
                           State_SHUTDOWN = 2;
                           State_CONNECT = 3;
                           State_LISTEN = 4;
                           State_UP = 5;
                        };
                        State state = 2 [json_name = "state"];
                        uint32 up_or_down_time = 3 [json_name = "up-or-down-time"];
                        string connection_interface_address = 4 [json_name = "connection-interface-address"];
                        uint32 send_message_count = 5 [json_name = "send-message-count"];
                        uint32 receive_message_count = 6 [json_name = "receive-message-count"];
                        uint32 discard_message_count = 7 [json_name = "discard-message-count"];
                        uint32 elapsed_time = 8 [json_name = "elapsed-time"];
                        uint32 sa_learned_count = 9 [json_name = "sa-learned-count"];
                        uint32 input_queue_size = 10 [json_name = "input-queue-size"];
                        uint32 output_queue_size = 11 [json_name = "output-queue-size"];
                        uint32 rpf_check_fail_count = 12 [json_name = "rpf-check-fail-count"];
                        uint32 receive_sa_message_count = 13 [json_name = "receive-sa-message-count"];
                        uint32 send_sa_message_count = 14 [json_name = "send-sa-message-count"];
                        uint32 receive_sa_requeset_count = 15 [json_name = "receive-sa-requeset-count"];
                        uint32 send_sa_request_count = 16 [json_name = "send-sa-request-count"];
                        uint32 receive_sa_response_count = 17 [json_name = "receive-sa-response-count"];
                        uint32 send_sa_response_count = 18 [json_name = "send-sa-response-count"];
                        uint32 receive_data_packet_count = 19 [json_name = "receive-data-packet-count"];
                        uint32 send_data_packet_count = 20 [json_name = "send-data-packet-count"];
                        uint32 reset_count = 21 [json_name = "reset-count"];
                        uint32 fsm_estab_trans = 22 [json_name = "fsm-estab-trans"];
                        uint32 fsm_estab_time = 23 [json_name = "fsm-estab-time"];
                        uint32 last_receive_message_time = 24 [json_name = "last-receive-message-time"];
                        uint32 remote_port = 25 [json_name = "remote-port"];
                        uint32 local_port = 26 [json_name = "local-port"];
                        enum EncapType {
                           EncapType_ENCAPNONE = 0;
                           EncapType_ENCAPTCP = 1;
                        };
                        EncapType encap_type = 27 [json_name = "encap-type"];
                        uint32 connect_attempts = 28 [json_name = "connect-attempts"];
                     }
                     Status status = 14 [json_name = "status"];
                     message ControlMessageCounters {
                        uint32 sa_received = 1 [json_name = "sa-received"];
                        uint32 sa_sent = 2 [json_name = "sa-sent"];
                        uint32 sa_invalid = 3 [json_name = "sa-invalid"];
                        uint32 sa_request_received = 4 [json_name = "sa-request-received"];
                        uint32 sa_request_sent = 5 [json_name = "sa-request-sent"];
                        uint32 sa_request_invalid = 6 [json_name = "sa-request-invalid"];
                        uint32 sa_response_received = 7 [json_name = "sa-response-received"];
                        uint32 sa_response_sent = 8 [json_name = "sa-response-sent"];
                        uint32 sa_response_invalid = 9 [json_name = "sa-response-invalid"];
                        uint32 keep_alive_received = 10 [json_name = "keep-alive-received"];
                        uint32 keep_alive_sent = 11 [json_name = "keep-alive-sent"];
                        uint32 keep_alive_invalid = 12 [json_name = "keep-alive-invalid"];
                        uint32 notification_received = 13 [json_name = "notification-received"];
                        uint32 notification_sent = 14 [json_name = "notification-sent"];
                        uint32 notification_invalid = 15 [json_name = "notification-invalid"];
                        uint32 traceroute_request_received = 16 [json_name = "traceroute-request-received"];
                        uint32 traceroute_request_sent = 17 [json_name = "traceroute-request-sent"];
                        uint32 traceroute_request_invalid = 18 [json_name = "traceroute-request-invalid"];
                        uint32 traceroute_reply_received = 19 [json_name = "traceroute-reply-received"];
                        uint32 traceroute_reply_sent = 20 [json_name = "traceroute-reply-sent"];
                        uint32 traceroute_reply_invalid = 21 [json_name = "traceroute-reply-invalid"];
                        uint32 data_received = 22 [json_name = "data-received"];
                        uint32 data_sent = 23 [json_name = "data-sent"];
                        uint32 data_invalid = 24 [json_name = "data-invalid"];
                        uint32 unknown_received = 25 [json_name = "unknown-received"];
                        uint32 unknown_sent = 26 [json_name = "unknown-sent"];
                        uint32 unknown_invalid = 27 [json_name = "unknown-invalid"];
                     }
                     ControlMessageCounters control_message_counters = 15 [json_name = "control-message-counters"];
                     string description = 16 [json_name = "description"];
                     uint32 sa_cache_maximum = 17 [json_name = "sa-cache-maximum"];
                     string static_rpf_prefix_name = 18 [json_name = "static-rpf-prefix-name"];
                     string sa_policy_export_name = 19 [json_name = "sa-policy-export-name"];
                     string sa_policy_import_name = 20 [json_name = "sa-policy-import-name"];
                     string sa_request_policy_name = 21 [json_name = "sa-request-policy-name"];
                     message AuthenticationType_Keychain {
                        string keychain_name = 1 [json_name = "keychain-name"];
                     }
                     message AuthenticationType_Md5 {
                        string md5_password = 1 [json_name = "md5-password"];
                        enum Md5SimpleFlag {
                           Md5SimpleFlag_CIPHER = 0;
                           Md5SimpleFlag_SIMPLE = 1;
                        };
                        Md5SimpleFlag md5_simple_flag = 2 [json_name = "md5-simple-flag"];
                     }
                     message AuthenticationType_TcpAo {
                        string tcp_ao_name = 1 [json_name = "tcp-ao-name"];
                     }
                     oneof AuthenticationType {
                        AuthenticationType_Keychain authentication_type_keychain = 22 [json_name = "keychain"];
                        AuthenticationType_Md5 authentication_type_md5 = 23 [json_name = "md5"];
                        AuthenticationType_TcpAo authentication_type_tcp_ao = 24 [json_name = "tcp-ao"];
                     }
                     bool sa_policy_local_export_enable = 25 [json_name = "sa-policy-local-export-enable"];
                     string sa_policy_local_export_name = 26 [json_name = "sa-policy-local-export-name"];
                     message InvalidPacket {
                        message Sa {
                           uint32 fault_length = 1 [json_name = "fault-length"];
                           uint32 bad_length_x = 2 [json_name = "bad-length-x"];
                           uint32 bad_sprefix = 3 [json_name = "bad-sprefix"];
                           uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                           uint32 invalid_multicast_source = 5 [json_name = "invalid-multicast-source"];
                           uint32 bad_encap_data = 6 [json_name = "bad-encap-data"];
                           uint32 illegal_rp_address = 7 [json_name = "illegal-rp-address"];
                           uint32 rp_loop = 8 [json_name = "rp-loop"];
                        }
                        Sa sa = 1 [json_name = "sa"];
                        message SaResponse {
                           uint32 fault_length = 1 [json_name = "fault-length"];
                           uint32 bad_length_x = 2 [json_name = "bad-length-x"];
                           uint32 bad_sprefix = 3 [json_name = "bad-sprefix"];
                           uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                           uint32 invalid_multicast_source = 5 [json_name = "invalid-multicast-source"];
                           uint32 illegal_rp_address = 6 [json_name = "illegal-rp-address"];
                           uint32 rp_loop = 7 [json_name = "rp-loop"];
                        }
                        SaResponse sa_response = 2 [json_name = "sa-response"];
                        message SaRequest {
                           uint32 fault_length = 1 [json_name = "fault-length"];
                           uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                        }
                        SaRequest sa_request = 3 [json_name = "sa-request"];
                        message KeepAlive {
                           uint32 fault_length = 1 [json_name = "fault-length"];
                        }
                        KeepAlive keep_alive = 4 [json_name = "keep-alive"];
                        message Notification {
                           uint32 fault_length = 1 [json_name = "fault-length"];
                        }
                        Notification notification = 5 [json_name = "notification"];
                     }
                     InvalidPacket invalid_packet = 27 [json_name = "invalid-packet"];
                  }
                  repeated Peer peer = 1 [json_name = "peer"];
               }
               Peers peers = 5 [json_name = "peers"];
               string originating_rp_interface = 6 [json_name = "originating-rp-interface"];
               uint32 sa_cache_holdtime = 7 [json_name = "sa-cache-holdtime"];
               string import_source_policy_name = 8 [json_name = "import-source-policy-name"];
               message SaCaches {
                  message SaCache {
                     string source_address = 1 [json_name = "source-address"];
                     string group_address = 2 [json_name = "group-address"];
                     string orig_rp_address = 3 [json_name = "orig-rp-address"];
                     enum Protocol {
                        Protocol_UNKNOWN = 0;
                        Protocol_BGP = 1;
                        Protocol_MBGP = 2;
                     };
                     Protocol protocol = 4 [json_name = "protocol"];
                     string as_num = 5 [json_name = "as-num"];
                     uint32 up_time = 6 [json_name = "up-time"];
                     uint32 expire_time = 7 [json_name = "expire-time"];
                     string peer_learned_from = 8 [json_name = "peer-learned-from"];
                     string rpf_peer_address = 9 [json_name = "rpf-peer-address"];
                     uint32 sa_messages_received = 10 [json_name = "sa-messages-received"];
                     uint32 data_packet_received = 11 [json_name = "data-packet-received"];
                  }
                  repeated SaCache sa_cache = 1 [json_name = "sa-cache"];
               }
               SaCaches sa_caches = 9 [json_name = "sa-caches"];
               message InvalidPacket {
                  message Sa {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                     uint32 bad_length_x = 2 [json_name = "bad-length-x"];
                     uint32 bad_sprefix = 3 [json_name = "bad-sprefix"];
                     uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                     uint32 invalid_multicast_source = 5 [json_name = "invalid-multicast-source"];
                     uint32 bad_encap_data = 6 [json_name = "bad-encap-data"];
                     uint32 illegal_rp_address = 7 [json_name = "illegal-rp-address"];
                     uint32 rp_loop = 8 [json_name = "rp-loop"];
                  }
                  Sa sa = 1 [json_name = "sa"];
                  message SaResponse {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                     uint32 bad_length_x = 2 [json_name = "bad-length-x"];
                     uint32 bad_sprefix = 3 [json_name = "bad-sprefix"];
                     uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                     uint32 invalid_multicast_source = 5 [json_name = "invalid-multicast-source"];
                     uint32 illegal_rp_address = 6 [json_name = "illegal-rp-address"];
                     uint32 rp_loop = 7 [json_name = "rp-loop"];
                  }
                  SaResponse sa_response = 2 [json_name = "sa-response"];
                  message SaRequest {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                  }
                  SaRequest sa_request = 3 [json_name = "sa-request"];
                  message KeepAlive {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                  }
                  KeepAlive keep_alive = 4 [json_name = "keep-alive"];
                  message Notification {
                     uint32 fault_length = 1 [json_name = "fault-length"];
                  }
                  Notification notification = 5 [json_name = "notification"];
               }
               InvalidPacket invalid_packet = 10 [json_name = "invalid-packet"];
            }
            Global global = 1 [json_name = "global"];
         }
         Msdp msdp = 23 [json_name = "msdp"];
         message Pim {
            message Rp {
               message StaticRps {
                  message StaticRp {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Preference {
                        Preference_NOTX_PREFER = 0;
                        Preference_PREFER = 1;
                     };
                     Preference preference = 3 [json_name = "preference"];
                     string policy = 4 [json_name = "policy"];
                     string policy_ipv6 = 5 [json_name = "policy-ipv6"];
                     enum BidirEnable {
                        BidirEnable_NOTX_BIDIR = 0;
                        BidirEnable_BIDIR = 1;
                     };
                     BidirEnable bidir_enable = 6 [json_name = "bidir-enable"];
                  }
                  repeated StaticRp static_rp = 1 [json_name = "static-rp"];
               }
               StaticRps static_rps = 1 [json_name = "static-rps"];
               message ElectedBsrs {
                  message ElectedBsr {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Scope {
                        Scope_NOTX_SCOPED = 0;
                        Scope_GLOBAL = 1;
                        Scope_ADMINX_SCOPE = 2;
                     };
                     Scope scope = 3 [json_name = "scope"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 hash_lenth = 7 [json_name = "hash-lenth"];
                     enum FsmState {
                        FsmState_UNKNOWN = 0;
                        FsmState_ACCEPTX_ANY = 1;
                        FsmState_ACCEPTX_PREFERRED = 2;
                        FsmState_CANDIDATE = 3;
                        FsmState_PENDING = 4;
                        FsmState_ELECTED = 5;
                     };
                     FsmState fsm_state = 8 [json_name = "fsm-state"];
                     uint32 up_time = 9 [json_name = "up-time"];
                     uint32 expire_time = 10 [json_name = "expire-time"];
                     uint32 candidate_count = 11 [json_name = "candidate-count"];
                  }
                  repeated ElectedBsr elected_bsr = 1 [json_name = "elected-bsr"];
               }
               ElectedBsrs elected_bsrs = 2 [json_name = "elected-bsrs"];
               message CBsrs {
                  message CBsr {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string address = 2 [json_name = "address"];
                     enum Scope {
                        Scope_NOTX_SCOPED = 0;
                        Scope_GLOBAL = 1;
                        Scope_ADMINX_SCOPE = 2;
                     };
                     Scope scope = 3 [json_name = "scope"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 hash_lenth = 7 [json_name = "hash-lenth"];
                     enum FsmState {
                        FsmState_UNKNOWN = 0;
                        FsmState_ACCEPTX_ANY = 1;
                        FsmState_ACCEPTX_PREFERRED = 2;
                        FsmState_CANDIDATE = 3;
                        FsmState_PENDING = 4;
                        FsmState_ELECTED = 5;
                     };
                     FsmState fsm_state = 8 [json_name = "fsm-state"];
                     enum ValidFlag {
                        ValidFlag_VALID = 0;
                        ValidFlag_INVALID = 1;
                     };
                     ValidFlag valid_flag = 9 [json_name = "valid-flag"];
                  }
                  repeated CBsr c_bsr = 1 [json_name = "c-bsr"];
               }
               CBsrs c_bsrs = 3 [json_name = "c-bsrs"];
               message ElectedBsrRps {
                  message ElectedBsrRp {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string rp_addr = 2 [json_name = "rp-addr"];
                     bool is_local_addr = 3 [json_name = "is-local-addr"];
                     string group_addr = 4 [json_name = "group-addr"];
                     uint32 group_mask_length = 5 [json_name = "group-mask-length"];
                     uint32 priority = 6 [json_name = "priority"];
                     uint32 up_time = 7 [json_name = "up-time"];
                     uint32 expiry_time = 8 [json_name = "expiry-time"];
                     bool bidir_enable = 9 [json_name = "bidir-enable"];
                  }
                  repeated ElectedBsrRp elected_bsr_rp = 1 [json_name = "elected-bsr-rp"];
               }
               ElectedBsrRps elected_bsr_rps = 4 [json_name = "elected-bsr-rps"];
               message CBsrVpns {
                  message CBsrVpn {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string if_name = 2 [json_name = "if-name"];
                     string if_addr = 3 [json_name = "if-addr"];
                     uint32 hold_time = 4 [json_name = "hold-time"];
                     uint32 interval = 5 [json_name = "interval"];
                     uint32 hash_len = 6 [json_name = "hash-len"];
                     uint32 priority = 7 [json_name = "priority"];
                     string policy_name = 8 [json_name = "policy-name"];
                     string policy_name6 = 9 [json_name = "policy-name6"];
                     bool admin_scope = 10 [json_name = "admin-scope"];
                     bool global_enable = 11 [json_name = "global-enable"];
                     uint32 global_hash_len = 12 [json_name = "global-hash-len"];
                     uint32 global_priority = 13 [json_name = "global-priority"];
                     uint32 c_rp_hold_time = 14 [json_name = "c-rp-hold-time"];
                     uint32 c_rp_priority = 15 [json_name = "c-rp-priority"];
                     uint32 c_rp_ad_interval = 16 [json_name = "c-rp-ad-interval"];
                     string c_rp_policy = 17 [json_name = "c-rp-policy"];
                     string c_rp_policy6 = 18 [json_name = "c-rp-policy6"];
                     bool is_fragable = 19 [json_name = "is-fragable"];
                  }
                  repeated CBsrVpn c_bsr_vpn = 1 [json_name = "c-bsr-vpn"];
               }
               CBsrVpns c_bsr_vpns = 5 [json_name = "c-bsr-vpns"];
               message Ipv4CBsrGroups {
                  message Ipv4CBsrGroup {
                     string group_addr = 1 [json_name = "group-addr"];
                     string group_mask = 2 [json_name = "group-mask"];
                     uint32 hash_length = 3 [json_name = "hash-length"];
                     uint32 priority = 4 [json_name = "priority"];
                  }
                  repeated Ipv4CBsrGroup ipv4_c_bsr_group = 1 [json_name = "ipv4-c-bsr-group"];
               }
               Ipv4CBsrGroups ipv4_c_bsr_groups = 6 [json_name = "ipv4-c-bsr-groups"];
               message Ipv4CRpIfs {
                  message Ipv4CRpIf {
                     string if_name = 1 [json_name = "if-name"];
                     string group_policy = 2 [json_name = "group-policy"];
                     uint32 priority = 3 [json_name = "priority"];
                     uint32 hold_time = 4 [json_name = "hold-time"];
                     uint32 ad_interval = 5 [json_name = "ad-interval"];
                     enum BidirEnable {
                        BidirEnable_NOTX_BIDIR = 0;
                        BidirEnable_BIDIR = 1;
                     };
                     BidirEnable bidir_enable = 6 [json_name = "bidir-enable"];
                  }
                  repeated Ipv4CRpIf ipv4_c_rp_if = 1 [json_name = "ipv4-c-rp-if"];
               }
               Ipv4CRpIfs ipv4_c_rp_ifs = 7 [json_name = "ipv4-c-rp-ifs"];
               message Ipv6CRps {
                  message Ipv6CRp {
                     string address = 1 [json_name = "address"];
                     uint32 holdtime = 2 [json_name = "holdtime"];
                     uint32 priority = 3 [json_name = "priority"];
                     uint32 ad_interval = 4 [json_name = "ad-interval"];
                     string group_policy = 5 [json_name = "group-policy"];
                     enum BidirEnable {
                        BidirEnable_NOTX_BIDIR = 0;
                        BidirEnable_BIDIR = 1;
                     };
                     BidirEnable bidir_enable = 6 [json_name = "bidir-enable"];
                  }
                  repeated Ipv6CRp ipv6_c_rp = 1 [json_name = "ipv6-c-rp"];
               }
               Ipv6CRps ipv6_c_rps = 8 [json_name = "ipv6-c-rps"];
               message AutoRps {
               }
               AutoRps auto_rps = 9 [json_name = "auto-rps"];
            }
            Rp rp = 1 [json_name = "rp"];
            message Protocol {
               message Interfaces {
                  message Interface {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string if_name = 2 [json_name = "if-name"];
                     bool sm_enable = 3 [json_name = "sm-enable"];
                     uint32 dr_priority = 4 [json_name = "dr-priority"];
                     uint32 hello_interval = 5 [json_name = "hello-interval"];
                     uint32 hello_holdtime = 6 [json_name = "hello-holdtime"];
                     uint32 hello_override = 7 [json_name = "hello-override"];
                     uint32 hello_lan_delay = 8 [json_name = "hello-lan-delay"];
                     uint32 jp_timer_interval = 9 [json_name = "jp-timer-interval"];
                     uint32 jp_holdtime = 10 [json_name = "jp-holdtime"];
                     uint32 assert_holdtime = 11 [json_name = "assert-holdtime"];
                     bool require_gen_id = 12 [json_name = "require-gen-id"];
                     enum BsrBoundary {
                        BsrBoundary_NONE = 0;
                        BsrBoundary_BOTH = 1;
                        BsrBoundary_INCOMING = 2;
                     };
                     BsrBoundary bsr_boundary = 13 [json_name = "bsr-boundary"];
                     bool bfd_enable = 14 [json_name = "bfd-enable"];
                     uint32 bfd_multiplier = 15 [json_name = "bfd-multiplier"];
                     bool is_silent = 16 [json_name = "is-silent"];
                     bool dr_swt_delay_enable = 17 [json_name = "dr-swt-delay-enable"];
                     enum Mode {
                        Mode_SPARSE = 0;
                        Mode_DENSE = 1;
                     };
                     Mode mode = 18 [json_name = "mode"];
                     bool state_refresh_capable = 19 [json_name = "state-refresh-capable"];
                     uint32 graft_retry = 20 [json_name = "graft-retry"];
                     bool ignore_dr = 21 [json_name = "ignore-dr"];
                     bool ignore_assert = 22 [json_name = "ignore-assert"];
                     bool single_tag_fwd_enable = 23 [json_name = "single-tag-fwd-enable"];
                     message IfInfos {
                        uint32 pim_version = 1 [json_name = "pim-version"];
                        enum State {
                           State_DOWN = 0;
                           State_UP = 1;
                           State_BACKUP = 2;
                        };
                        State state = 2 [json_name = "state"];
                        uint32 nbr_count = 3 [json_name = "nbr-count"];
                        uint32 dr_priority = 4 [json_name = "dr-priority"];
                        string dr_addr = 5 [json_name = "dr-addr"];
                        uint32 hello_interval = 6 [json_name = "hello-interval"];
                        uint32 hello_holdtime = 7 [json_name = "hello-holdtime"];
                        uint32 assert_holdtime = 8 [json_name = "assert-holdtime"];
                        uint32 jp_interval = 9 [json_name = "jp-interval"];
                        uint32 jp_holdtime = 10 [json_name = "jp-holdtime"];
                        uint32 negotiated_msg_delay = 11 [json_name = "negotiated-msg-delay"];
                        uint32 negotiated_override_interval = 12 [json_name = "negotiated-override-interval"];
                        string gen_id = 13 [json_name = "gen-id"];
                        uint32 non_dr_nbr_count = 14 [json_name = "non-dr-nbr-count"];
                        uint32 non_landelay_nbr_count = 15 [json_name = "non-landelay-nbr-count"];
                        uint32 non_join_attribute_nbr_sount = 16 [json_name = "non-join-attribute-nbr-sount"];
                        bool join_attribute = 17 [json_name = "join-attribute"];
                        uint32 offer_interval = 18 [json_name = "offer-interval"];
                        uint32 election_robust_count = 19 [json_name = "election-robust-count"];
                        uint32 backoff_interval = 20 [json_name = "backoff-interval"];
                        string ipsec_name = 21 [json_name = "ipsec-name"];
                        enum IpsecType {
                           IpsecType_FORX_ALL = 0;
                           IpsecType_FORX_HELLO = 2;
                        };
                        IpsecType ipsec_type = 22 [json_name = "ipsec-type"];
                        enum PimMode {
                           PimMode_SPARSE = 0;
                           PimMode_DENSE = 1;
                        };
                        PimMode pim_mode = 23 [json_name = "pim-mode"];
                        bool state_refresh_enable = 24 [json_name = "state-refresh-enable"];
                        uint32 state_refresh_interval = 25 [json_name = "state-refresh-interval"];
                        uint32 graft_retry = 26 [json_name = "graft-retry"];
                        bool negotiated_state_refresh = 27 [json_name = "negotiated-state-refresh"];
                        bool ignore_dr_state = 28 [json_name = "ignore-dr-state"];
                        bool ignore_assert = 29 [json_name = "ignore-assert"];
                        bool snooping_enable = 30 [json_name = "snooping-enable"];
                     }
                     IfInfos if_infos = 24 [json_name = "if-infos"];
                     message Nbrs {
                        message Nbr {
                           string nbr_addr = 1 [json_name = "nbr-addr"];
                           uint32 up_time = 2 [json_name = "up-time"];
                           uint32 expire_time = 3 [json_name = "expire-time"];
                           bool dr_priority_existence = 4 [json_name = "dr-priority-existence"];
                           uint32 dr_priority = 5 [json_name = "dr-priority"];
                           bool gen_id_existence = 6 [json_name = "gen-id-existence"];
                           string gen_id = 7 [json_name = "gen-id"];
                           uint32 holdtime = 8 [json_name = "holdtime"];
                           bool lan_delay_existence = 9 [json_name = "lan-delay-existence"];
                           uint32 lan_delay = 10 [json_name = "lan-delay"];
                           uint32 override_interval = 11 [json_name = "override-interval"];
                           bool join_attribute = 12 [json_name = "join-attribute"];
                           bool bidir_enable = 13 [json_name = "bidir-enable"];
                           uint32 state_refresh_interval = 14 [json_name = "state-refresh-interval"];
                           message SecondAddrs {
                              message SecondAddr {
                                 string address = 1 [json_name = "address"];
                              }
                              repeated SecondAddr second_addr = 1 [json_name = "second-addr"];
                           }
                           SecondAddrs second_addrs = 15 [json_name = "second-addrs"];
                        }
                        repeated Nbr nbr = 1 [json_name = "nbr"];
                     }
                     Nbrs nbrs = 25 [json_name = "nbrs"];
                     message BfdSessions {
                        message BfdSession {
                           string nbr_addr = 1 [json_name = "nbr-addr"];
                           uint32 actual_minimum_tx_interval = 2 [json_name = "actual-minimum-tx-interval"];
                           uint32 actual_minimum_rx_interval = 3 [json_name = "actual-minimum-rx-interval"];
                           uint32 actual_multiplier = 4 [json_name = "actual-multiplier"];
                           uint32 local_port = 5 [json_name = "local-port"];
                           uint32 remote_port = 6 [json_name = "remote-port"];
                           enum BfdStatus {
                              BfdStatus_ADMINX_DOWN = 0;
                              BfdStatus_DOWN = 1;
                              BfdStatus_INIT = 2;
                              BfdStatus_UP = 3;
                              BfdStatus_BFDX_SESSIONX_NUMBERX_EXCEED = 4;
                           };
                           BfdStatus bfd_status = 7 [json_name = "bfd-status"];
                        }
                        repeated BfdSession bfd_session = 1 [json_name = "bfd-session"];
                     }
                     BfdSessions bfd_sessions = 26 [json_name = "bfd-sessions"];
                     string jp_policy = 27 [json_name = "jp-policy"];
                     string jp_asm_policy = 28 [json_name = "jp-asm-policy"];
                     string jp_ssm_policy = 29 [json_name = "jp-ssm-policy"];
                     string nbr_policy = 30 [json_name = "nbr-policy"];
                     uint32 dr_swt_delay_interval = 31 [json_name = "dr-swt-delay-interval"];
                     string jp_policy_ipv6 = 32 [json_name = "jp-policy-ipv6"];
                     string jp_asm_policy_ipv6 = 33 [json_name = "jp-asm-policy-ipv6"];
                     string jp_ssm_policy_ipv6 = 34 [json_name = "jp-ssm-policy-ipv6"];
                     string nbr_policy_ipv6 = 35 [json_name = "nbr-policy-ipv6"];
                     uint32 bfd_min_tx = 36 [json_name = "bfd-min-tx"];
                     uint32 bfd_min_rx = 37 [json_name = "bfd-min-rx"];
                     string ipsec_name = 38 [json_name = "ipsec-name"];
                     enum IpsecType {
                        IpsecType_FORX_ALL = 0;
                        IpsecType_FORX_HELLO = 2;
                     };
                     IpsecType ipsec_type = 39 [json_name = "ipsec-type"];
                     uint32 bidir_offer_interval = 40 [json_name = "bidir-offer-interval"];
                     uint32 bidir_robustness = 41 [json_name = "bidir-robustness"];
                     uint32 bidir_backoff_interval = 42 [json_name = "bidir-backoff-interval"];
                     message InvalidMessages {
                        message InvalidAssertCnt {
                           uint32 destination_addr = 1 [json_name = "destination-addr"];
                           uint32 ip_source_addr = 2 [json_name = "ip-source-addr"];
                           uint32 multicast_source = 3 [json_name = "multicast-source"];
                           uint32 multicast_group = 4 [json_name = "multicast-group"];
                           uint32 fault_length = 5 [json_name = "fault-length"];
                        }
                        InvalidAssertCnt invalid_assert_cnt = 1 [json_name = "invalid-assert-cnt"];
                        message InvalidBsrCnt {
                           uint32 bad_payload = 1 [json_name = "bad-payload"];
                           uint32 fault_length = 2 [json_name = "fault-length"];
                           uint32 invalid_scope_mask = 3 [json_name = "invalid-scope-mask"];
                           uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                           uint32 recv_by_non_c_bsr = 5 [json_name = "recv-by-non-c-bsr"];
                           uint32 invalid_bsr_addr = 6 [json_name = "invalid-bsr-addr"];
                           uint32 fault_hash_length = 7 [json_name = "fault-hash-length"];
                           uint32 invalid_ip_source_addr = 8 [json_name = "invalid-ip-source-addr"];
                        }
                        InvalidBsrCnt invalid_bsr_cnt = 2 [json_name = "invalid-bsr-cnt"];
                        message InvalidHelloCnt {
                           uint32 invalid_addr_list = 1 [json_name = "invalid-addr-list"];
                           uint32 invalid_length = 2 [json_name = "invalid-length"];
                           uint32 invalid_holdtime_length = 3 [json_name = "invalid-holdtime-length"];
                           uint32 invalid_lan_prune_delay_length = 4 [json_name = "invalid-lan-prune-delay-length"];
                           uint32 invalid_dr_priority_length = 5 [json_name = "invalid-dr-priority-length"];
                           uint32 invalid_gen_id_length = 6 [json_name = "invalid-gen-id-length"];
                           uint32 invalid_destination_addr = 7 [json_name = "invalid-destination-addr"];
                           uint32 invalid_ip_source_addr = 8 [json_name = "invalid-ip-source-addr"];
                        }
                        InvalidHelloCnt invalid_hello_cnt = 3 [json_name = "invalid-hello-cnt"];
                        message InvalidJoinPruneCnt {
                           uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                           uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                           uint32 invalid_upstream_nbr = 3 [json_name = "invalid-upstream-nbr"];
                           uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                           uint32 invalid_destination_addr = 5 [json_name = "invalid-destination-addr"];
                           uint32 fault_length = 6 [json_name = "fault-length"];
                        }
                        InvalidJoinPruneCnt invalid_join_prune_cnt = 4 [json_name = "invalid-join-prune-cnt"];
                        message InvalidOfferCnt {
                           uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                           uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                        }
                        InvalidOfferCnt invalid_offer_cnt = 5 [json_name = "invalid-offer-cnt"];
                        message InvalidBackoffCnt {
                           uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                           uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                           uint32 invalid_offer_addr = 3 [json_name = "invalid-offer-addr"];
                        }
                        InvalidBackoffCnt invalid_backoff_cnt = 6 [json_name = "invalid-backoff-cnt"];
                        message InvalidPassCnt {
                           uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                           uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                           uint32 invalid_new_winner_addr = 3 [json_name = "invalid-new-winner-addr"];
                        }
                        InvalidPassCnt invalid_pass_cnt = 7 [json_name = "invalid-pass-cnt"];
                        message InvalidWinCnt {
                           uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                           uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                        }
                        InvalidWinCnt invalid_win_cnt = 8 [json_name = "invalid-win-cnt"];
                        message InvalidGraftCnt {
                           uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                           uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                           uint32 invalid_up_nbr = 3 [json_name = "invalid-up-nbr"];
                           uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                           uint32 fault_length = 5 [json_name = "fault-length"];
                        }
                        InvalidGraftCnt invalid_graft_cnt = 9 [json_name = "invalid-graft-cnt"];
                        message InvalidGraftAckCnt {
                           uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                           uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                           uint32 invalid_up_nbr = 3 [json_name = "invalid-up-nbr"];
                           uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                           uint32 fault_length = 5 [json_name = "fault-length"];
                        }
                        InvalidGraftAckCnt invalid_graft_ack_cnt = 10 [json_name = "invalid-graft-ack-cnt"];
                        message InvalidStateRefreshCnt {
                           uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                           uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                           uint32 invalid_originator = 3 [json_name = "invalid-originator"];
                           uint32 fault_length = 4 [json_name = "fault-length"];
                        }
                        InvalidStateRefreshCnt invalid_state_refresh_cnt = 11 [json_name = "invalid-state-refresh-cnt"];
                        message InvalidAutoRpAnnounceCnt {
                           uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                           uint32 invalid_ip_source_addr = 2 [json_name = "invalid-ip-source-addr"];
                           uint32 invalid_ttl = 3 [json_name = "invalid-ttl"];
                           uint32 invalid_source_port = 4 [json_name = "invalid-source-port"];
                        }
                        InvalidAutoRpAnnounceCnt invalid_auto_rp_announce_cnt = 12 [json_name = "invalid-auto-rp-announce-cnt"];
                        message InvalidAutoRpDiscoveryCnt {
                           uint32 invalid_lenght = 1 [json_name = "invalid-lenght"];
                           uint32 invalid_rp = 2 [json_name = "invalid-rp"];
                           uint32 invalid_ip_source_addr = 3 [json_name = "invalid-ip-source-addr"];
                           uint32 invalid_group = 4 [json_name = "invalid-group"];
                           uint32 invalid_ttl = 5 [json_name = "invalid-ttl"];
                           uint32 invalid_source_port = 6 [json_name = "invalid-source-port"];
                           uint32 invalid_length = 7 [json_name = "invalid-length"];
                        }
                        InvalidAutoRpDiscoveryCnt invalid_auto_rp_discovery_cnt = 13 [json_name = "invalid-auto-rp-discovery-cnt"];
                     }
                     InvalidMessages invalid_messages = 43 [json_name = "invalid-messages"];
                     uint32 ecmp_priority = 44 [json_name = "ecmp-priority"];
                     bool source_proxy_enable = 45 [json_name = "source-proxy-enable"];
                     string source_proxy_policy = 46 [json_name = "source-proxy-policy"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
               message Routings {
                  message Routing {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string src_addr = 2 [json_name = "src-addr"];
                     string grp_addr = 3 [json_name = "grp-addr"];
                     enum RpModeType {
                        INVALID_ENUM_VALUE_RpModeType = 0;
                        RpModeType_FIXED = 1;
                        RpModeType_STATIC = 2;
                        RpModeType_CONFIGX_SSM = 3;
                        RpModeType_BSR = 4;
                        RpModeType_AUTOX_RP = 5;
                        RpModeType_EMBEDDED = 6;
                        RpModeType_OTHER = 7;
                     };
                     RpModeType rp_mode_type = 5 [json_name = "rp-mode-type"];
                     string rp_addr = 6 [json_name = "rp-addr"];
                     bool rp_is_local_addr = 7 [json_name = "rp-is-local-addr"];
                     string dg_flag = 8 [json_name = "dg-flag"];
                     uint32 sg_uptime = 9 [json_name = "sg-uptime"];
                     string inbound_interface = 10 [json_name = "inbound-interface"];
                     string src_vrf_name = 11 [json_name = "src-vrf-name"];
                     string rpf_vector_rd = 12 [json_name = "rpf-vector-rd"];
                     string rpf_vector_addr = 13 [json_name = "rpf-vector-addr"];
                     string elected_vector_rd = 14 [json_name = "elected-vector-rd"];
                     string elected_vector_addr = 15 [json_name = "elected-vector-addr"];
                     string up_nbr_addr = 16 [json_name = "up-nbr-addr"];
                     string rpf_addr = 17 [json_name = "rpf-addr"];
                     string reference_addr = 18 [json_name = "reference-addr"];
                     uint32 rpf_mask_len = 19 [json_name = "rpf-mask-len"];
                     uint32 rpf_metric = 20 [json_name = "rpf-metric"];
                     uint32 rpf_metric_priority = 21 [json_name = "rpf-metric-priority"];
                     string backup_inbound_if = 22 [json_name = "backup-inbound-if"];
                     string backup_nbr_addr = 23 [json_name = "backup-nbr-addr"];
                     string backup_rpf_addr = 24 [json_name = "backup-rpf-addr"];
                     enum UpStatus {
                        INVALID_ENUM_VALUE_UpStatus = 0;
                        UpStatus_NOTX_JOINED = 1;
                        UpStatus_JOINED = 2;
                        UpStatus_FORWARD = 3;
                        UpStatus_PRUNED = 4;
                        UpStatus_ACKX_PEND = 5;
                     };
                     UpStatus up_status = 25 [json_name = "up-status"];
                     uint32 upstream_expiration_time = 26 [json_name = "upstream-expiration-time"];
                     enum RptStatus {
                        INVALID_ENUM_VALUE_RptStatus = 0;
                        RptStatus_NOTX_PRUNED = 1;
                        RptStatus_NOTX_JOINED = 2;
                        RptStatus_PRUNED = 3;
                        RptStatus_MAX = 4;
                     };
                     RptStatus rpt_status = 27 [json_name = "rpt-status"];
                     uint32 rpt_timeout_period = 28 [json_name = "rpt-timeout-period"];
                     enum RegistrationStatus {
                        INVALID_ENUM_VALUE_RegistrationStatus = 0;
                        RegistrationStatus_NOINFO = 1;
                        RegistrationStatus_JOIN = 2;
                        RegistrationStatus_JOINX_PENDING = 3;
                        RegistrationStatus_PRUNE = 4;
                     };
                     RegistrationStatus registration_status = 29 [json_name = "registration-status"];
                     uint32 registration_stop_time = 30 [json_name = "registration-stop-time"];
                     uint32 graft_retry_expiration_time = 31 [json_name = "graft-retry-expiration-time"];
                     uint32 prune_limit_expiration_time = 32 [json_name = "prune-limit-expiration-time"];
                     uint32 override_expiration_time = 33 [json_name = "override-expiration-time"];
                     uint32 backup_upstream_expiration_time = 34 [json_name = "backup-upstream-expiration-time"];
                     uint32 user_id = 35 [json_name = "user-id"];
                     string original_src_addr = 36 [json_name = "original-src-addr"];
                     message Downstreams {
                        message Downstream {
                           string if_name = 1 [json_name = "if-name"];
                           string protocl_type = 2 [json_name = "protocl-type"];
                           uint32 up_time = 3 [json_name = "up-time"];
                           uint32 timeout_period = 4 [json_name = "timeout-period"];
                           bool dr_status = 5 [json_name = "dr-status"];
                           uint32 downstream_ppt = 7 [json_name = "downstream-ppt"];
                           enum AssertStateMachine {
                              INVALID_ENUM_VALUE_AssertStateMachine = 0;
                              AssertStateMachine_NOINFO = 1;
                              AssertStateMachine_WINNER = 2;
                              AssertStateMachine_LOSER = 3;
                           };
                           AssertStateMachine assert_state_machine = 8 [json_name = "assert-state-machine"];
                           uint32 assert_timeout_period = 9 [json_name = "assert-timeout-period"];
                           string assert_winner_addr = 10 [json_name = "assert-winner-addr"];
                           uint32 assert_winner_metric = 11 [json_name = "assert-winner-metric"];
                           uint32 assert_winner_metric_priority = 12 [json_name = "assert-winner-metric-priority"];
                           bool local_receiver_exist = 13 [json_name = "local-receiver-exist"];
                           enum RptStatus {
                              INVALID_ENUM_VALUE_RptStatus = 0;
                              RptStatus_NOINFO = 1;
                              RptStatus_PRUNED = 2;
                              RptStatus_PRUNEX_PENDING = 3;
                              RptStatus_MAX = 4;
                           };
                           RptStatus rpt_status = 14 [json_name = "rpt-status"];
                           uint32 rpt_state_machine_ppt = 15 [json_name = "rpt-state-machine-ppt"];
                           uint32 rpt_timeout_period = 16 [json_name = "rpt-timeout-period"];
                           enum VectorAttributeStatus {
                              VectorAttributeStatus_UNSAFE = 0;
                              VectorAttributeStatus_SAFE = 1;
                           };
                           VectorAttributeStatus vector_attribute_status = 17 [json_name = "vector-attribute-status"];
                           string elected_vector = 18 [json_name = "elected-vector"];
                           string elected_vector_nbr = 19 [json_name = "elected-vector-nbr"];
                           uint32 vector_num = 20 [json_name = "vector-num"];
                           bool ignore_dr_status = 21 [json_name = "ignore-dr-status"];
                           message Vectors {
                              message Vector {
                                 string nbr_addr = 1 [json_name = "nbr-addr"];
                                 string vector_addr = 2 [json_name = "vector-addr"];
                                 string vector_rd = 3 [json_name = "vector-rd"];
                                 uint32 timeout_period = 4 [json_name = "timeout-period"];
                                 message VectorHopAddrs {
                                    message VectorHopAddr {
                                       string vector_addr = 1 [json_name = "vector-addr"];
                                       uint32 sequence_num = 2 [json_name = "sequence-num"];
                                    }
                                    repeated VectorHopAddr vector_hop_addr = 1 [json_name = "vector-hop-addr"];
                                 }
                                 VectorHopAddrs vector_hop_addrs = 5 [json_name = "vector-hop-addrs"];
                              }
                              repeated Vector vector = 1 [json_name = "vector"];
                           }
                           Vectors vectors = 22 [json_name = "vectors"];
                           string protocol_type = 23 [json_name = "protocol-type"];
                           enum Downstream10 {
                              INVALID_ENUM_VALUE_Downstream10 = 0;
                              Downstream10_NOINFO = 1;
                              Downstream10_PRUNEX_PENDING = 2;
                              Downstream10_JOINED = 3;
                              Downstream10_PRUNED = 4;
                           };
                           Downstream10 downstream10 = 24 [json_name = "downstream"];
                        }
                        repeated Downstream downstream = 1 [json_name = "downstream"];
                     }
                     Downstreams downstreams = 37 [json_name = "downstreams"];
                     message RecvVrfs {
                        message RecvVrf {
                           string vrf_name = 1 [json_name = "vrf-name"];
                        }
                        repeated RecvVrf recv_vrf = 1 [json_name = "recv-vrf"];
                     }
                     RecvVrfs recv_vrfs = 38 [json_name = "recv-vrfs"];
                     enum Protocol8 {
                        INVALID_ENUM_VALUE_Protocol8 = 0;
                        Protocol8_NONE = 1;
                        Protocol8_PIMX_ASM = 2;
                        Protocol8_PIMX_DM = 3;
                        Protocol8_PIMX_BIDIR = 4;
                        Protocol8_PIMX_SSM = 5;
                        Protocol8_OTHER = 6;
                     };
                     Protocol8 protocol8 = 39 [json_name = "protocol"];
                  }
                  repeated Routing routing = 1 [json_name = "routing"];
               }
               Routings routings = 3 [json_name = "routings"];
               message MessageStatistics {
                  message MessageStatistic {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 register_recv_num = 2 [json_name = "register-recv-num"];
                     uint32 register_send_num = 3 [json_name = "register-send-num"];
                     uint32 invalid_register_num = 4 [json_name = "invalid-register-num"];
                     uint32 filtered_register_num = 5 [json_name = "filtered-register-num"];
                     uint32 register_stop_recv_num = 6 [json_name = "register-stop-recv-num"];
                     uint32 register_stop_send_num = 7 [json_name = "register-stop-send-num"];
                     uint32 invalid_register_stop_num = 8 [json_name = "invalid-register-stop-num"];
                     uint32 filtered_register_stop_num = 9 [json_name = "filtered-register-stop-num"];
                     uint32 probe_recv_num = 10 [json_name = "probe-recv-num"];
                     uint32 probe_send_num = 11 [json_name = "probe-send-num"];
                     uint32 invalid_probe_num = 12 [json_name = "invalid-probe-num"];
                     uint32 filtered_probe_num = 13 [json_name = "filtered-probe-num"];
                     uint32 c_rp_recv_num = 14 [json_name = "c-rp-recv-num"];
                     uint32 c_rp_send_num = 15 [json_name = "c-rp-send-num"];
                     uint32 invalid_c_rp_num = 16 [json_name = "invalid-c-rp-num"];
                     uint32 filtered_c_rp_num = 17 [json_name = "filtered-c-rp-num"];
                     uint32 anycast_rp_register_recv_num = 18 [json_name = "anycast-rp-register-recv-num"];
                     uint32 anycast_rp_register_send_num = 19 [json_name = "anycast-rp-register-send-num"];
                     uint32 invalid_anycast_rp_register_num = 20 [json_name = "invalid-anycast-rp-register-num"];
                     uint32 filtered_anycast_rp_register_num = 21 [json_name = "filtered-anycast-rp-register-num"];
                     uint32 anycast_rp_probe_recv_num = 22 [json_name = "anycast-rp-probe-recv-num"];
                     uint32 anycast_rp_probe_send_num = 23 [json_name = "anycast-rp-probe-send-num"];
                     uint32 invalid_anycast_rp_probe_num = 24 [json_name = "invalid-anycast-rp-probe-num"];
                     uint32 filtered_anycast_rp_probe_num = 25 [json_name = "filtered-anycast-rp-probe-num"];
                     message IfMessageStatistics {
                        message IfMessageStatistic {
                           string if_name = 1 [json_name = "if-name"];
                           uint32 assert_recv_num = 2 [json_name = "assert-recv-num"];
                           uint32 assert_send_num = 3 [json_name = "assert-send-num"];
                           uint32 invalid_assert_num = 4 [json_name = "invalid-assert-num"];
                           uint32 filtered_assert_num = 5 [json_name = "filtered-assert-num"];
                           uint32 hello_recv_num = 6 [json_name = "hello-recv-num"];
                           uint32 hello_send_num = 7 [json_name = "hello-send-num"];
                           uint32 invalid_hello_num = 8 [json_name = "invalid-hello-num"];
                           uint32 filtered_hello_num = 9 [json_name = "filtered-hello-num"];
                           uint32 jp_recv_num = 10 [json_name = "jp-recv-num"];
                           uint32 jp_send_num = 11 [json_name = "jp-send-num"];
                           uint32 invalid_jp_num = 12 [json_name = "invalid-jp-num"];
                           uint32 filtered_jp_num = 13 [json_name = "filtered-jp-num"];
                           uint32 bsr_recv_num = 14 [json_name = "bsr-recv-num"];
                           uint32 bsr_send_num = 15 [json_name = "bsr-send-num"];
                           uint32 invalid_bsr_num = 16 [json_name = "invalid-bsr-num"];
                           uint32 filtered_bsr_num = 17 [json_name = "filtered-bsr-num"];
                           uint32 offer_recv_num = 18 [json_name = "offer-recv-num"];
                           uint32 offer_send_num = 19 [json_name = "offer-send-num"];
                           uint32 invalid_offer_num = 20 [json_name = "invalid-offer-num"];
                           uint32 filtered_offer_num = 21 [json_name = "filtered-offer-num"];
                           uint32 backoff_recv_num = 22 [json_name = "backoff-recv-num"];
                           uint32 backoff_send_num = 23 [json_name = "backoff-send-num"];
                           uint32 invalid_backoff_num = 24 [json_name = "invalid-backoff-num"];
                           uint32 filtered_backoff_num = 25 [json_name = "filtered-backoff-num"];
                           uint32 win_recv_num = 26 [json_name = "win-recv-num"];
                           uint32 win_send_num = 27 [json_name = "win-send-num"];
                           uint32 invalid_win_num = 28 [json_name = "invalid-win-num"];
                           uint32 filtered_win_num = 29 [json_name = "filtered-win-num"];
                           uint32 pass_recv_num = 30 [json_name = "pass-recv-num"];
                           uint32 pass_send_num = 31 [json_name = "pass-send-num"];
                           uint32 invalid_pass_num = 32 [json_name = "invalid-pass-num"];
                           uint32 filtered_pass_num = 33 [json_name = "filtered-pass-num"];
                           uint32 graft_recv_num = 34 [json_name = "graft-recv-num"];
                           uint32 graft_send_num = 35 [json_name = "graft-send-num"];
                           uint32 invalid_graft_num = 36 [json_name = "invalid-graft-num"];
                           uint32 filtered_graft_num = 37 [json_name = "filtered-graft-num"];
                           uint32 graft_ack_recv_num = 38 [json_name = "graft-ack-recv-num"];
                           uint32 graft_ack_send_num = 39 [json_name = "graft-ack-send-num"];
                           uint32 invalid_graft_ack_num = 40 [json_name = "invalid-graft-ack-num"];
                           uint32 filtered_graft_ack_num = 41 [json_name = "filtered-graft-ack-num"];
                           uint32 state_refresh_recv_num = 42 [json_name = "state-refresh-recv-num"];
                           uint32 state_refresh_send_num = 43 [json_name = "state-refresh-send-num"];
                           uint32 invalid_state_refresh_num = 44 [json_name = "invalid-state-refresh-num"];
                           uint32 filtered_state_refresh_num = 45 [json_name = "filtered-state-refresh-num"];
                           uint32 announce_recv_num = 46 [json_name = "announce-recv-num"];
                           uint32 announce_send_num = 47 [json_name = "announce-send-num"];
                           uint32 invalid_announce_num = 48 [json_name = "invalid-announce-num"];
                           uint32 filtered_announce_num = 49 [json_name = "filtered-announce-num"];
                           uint32 discovery_recv_num = 50 [json_name = "discovery-recv-num"];
                           uint32 discovery_send_num = 51 [json_name = "discovery-send-num"];
                           uint32 invalid_discovery_num = 52 [json_name = "invalid-discovery-num"];
                           uint32 filtered_discovery_num = 53 [json_name = "filtered-discovery-num"];
                        }
                        repeated IfMessageStatistic if_message_statistic = 1 [json_name = "if-message-statistic"];
                     }
                     IfMessageStatistics if_message_statistics = 26 [json_name = "if-message-statistics"];
                  }
                  repeated MessageStatistic message_statistic = 1 [json_name = "message-statistic"];
               }
               MessageStatistics message_statistics = 5 [json_name = "message-statistics"];
               message ClaimRoutings {
                  message ClaimRouting {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     string destination_addr = 2 [json_name = "destination-addr"];
                     string if_name = 3 [json_name = "if-name"];
                     string rpf_neighbour = 4 [json_name = "rpf-neighbour"];
                     string referenced_route = 5 [json_name = "referenced-route"];
                     uint32 referenced_route_mask = 6 [json_name = "referenced-route-mask"];
                     enum ReferencedRouteType {
                        INVALID_ENUM_VALUE_ReferencedRouteType = 0;
                        ReferencedRouteType_MIGP = 1;
                        ReferencedRouteType_IGP = 2;
                        ReferencedRouteType_MBGP = 3;
                        ReferencedRouteType_EGP = 4;
                        ReferencedRouteType_DIRECT = 5;
                        ReferencedRouteType_MULTICASTX_STATIC = 6;
                        ReferencedRouteType_UNICAST = 7;
                        ReferencedRouteType_MULTICAST = 9;
                     };
                     ReferencedRouteType referenced_route_type = 7 [json_name = "referenced-route-type"];
                     string global_administrator = 8 [json_name = "global-administrator"];
                     uint32 local_administrator = 9 [json_name = "local-administrator"];
                     uint32 as_number = 10 [json_name = "as-number"];
                     string backup_rpf_nbr = 11 [json_name = "backup-rpf-nbr"];
                     string backup_global_administrator = 12 [json_name = "backup-global-administrator"];
                     uint32 backup_local_administrator = 13 [json_name = "backup-local-administrator"];
                     uint32 backup_as_number = 14 [json_name = "backup-as-number"];
                     message ClaimRoutingEntrys {
                        message ClaimRoutingEntry {
                           string src_addr = 1 [json_name = "src-addr"];
                           string grp_addr = 2 [json_name = "grp-addr"];
                        }
                        repeated ClaimRoutingEntry claim_routing_entry = 1 [json_name = "claim-routing-entry"];
                     }
                     ClaimRoutingEntrys claim_routing_entrys = 15 [json_name = "claim-routing-entrys"];
                  }
                  repeated ClaimRouting claim_routing = 1 [json_name = "claim-routing"];
               }
               ClaimRoutings claim_routings = 6 [json_name = "claim-routings"];
               message Instances6 {
                  message Instance7 {
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_IPV4UNICAST = 1;
                        Type_IPV6UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     uint32 assert_holdtime = 2 [json_name = "assert-holdtime"];
                     uint32 jp_holdtime = 3 [json_name = "jp-holdtime"];
                     uint32 probe_interval = 4 [json_name = "probe-interval"];
                     uint32 jp_timer_interval = 5 [json_name = "jp-timer-interval"];
                     uint32 dr_priority = 6 [json_name = "dr-priority"];
                     uint32 hello_holdtime = 7 [json_name = "hello-holdtime"];
                     uint32 hello_landelay = 8 [json_name = "hello-landelay"];
                     uint32 hello_interval = 9 [json_name = "hello-interval"];
                     uint32 hello_override = 10 [json_name = "hello-override"];
                     bool reg_checksum = 11 [json_name = "reg-checksum"];
                     uint32 reg_suppress_interval = 12 [json_name = "reg-suppress-interval"];
                     bool embedded_rp = 13 [json_name = "embedded-rp"];
                     bool nbr_check_when_recv = 14 [json_name = "nbr-check-when-recv"];
                     bool nbr_check_when_send = 15 [json_name = "nbr-check-when-send"];
                     string reg_policy_name = 16 [json_name = "reg-policy-name"];
                     string reg_policy_name6 = 17 [json_name = "reg-policy-name6"];
                     string ssm_policy_name = 18 [json_name = "ssm-policy-name"];
                     string ssm_policy_name6 = 19 [json_name = "ssm-policy-name6"];
                     string src_policy_name = 20 [json_name = "src-policy-name"];
                     string src_policy_name6 = 21 [json_name = "src-policy-name6"];
                     string embedded_rp_policy_name = 22 [json_name = "embedded-rp-policy-name"];
                     uint32 source_life_time = 23 [json_name = "source-life-time"];
                     uint32 spt_switch_check_interval = 24 [json_name = "spt-switch-check-interval"];
                     bool packaging_jp_disable = 25 [json_name = "packaging-jp-disable"];
                     string ipsec_name = 26 [json_name = "ipsec-name"];
                     enum IpsecType {
                        IpsecType_FORX_ALL = 0;
                        IpsecType_FORX_HELLO = 2;
                     };
                     IpsecType ipsec_type = 27 [json_name = "ipsec-type"];
                     string unicast_ipsec_name = 28 [json_name = "unicast-ipsec-name"];
                     string register_source_interface = 29 [json_name = "register-source-interface"];
                     string register_source_addr = 30 [json_name = "register-source-addr"];
                     uint32 state_refresh_interval = 31 [json_name = "state-refresh-interval"];
                     uint32 state_refresh_rate_limit = 32 [json_name = "state-refresh-rate-limit"];
                     uint32 state_refresh_ttl = 33 [json_name = "state-refresh-ttl"];
                     bool fast_reroute = 34 [json_name = "fast-reroute"];
                     string fast_reroute_policy = 35 [json_name = "fast-reroute-policy"];
                     bool hello_join_attr_enable = 36 [json_name = "hello-join-attr-enable"];
                     bool clone_inherit_enable = 37 [json_name = "clone-inherit-enable"];
                     string clone_inherit_policy = 38 [json_name = "clone-inherit-policy"];
                     bool gen_id_chang_enable = 39 [json_name = "gen-id-chang-enable"];
                     uint32 rpf_prune_holdtime = 40 [json_name = "rpf-prune-holdtime"];
                     string rpf_prune_policy_ipv4 = 41 [json_name = "rpf-prune-policy-ipv4"];
                     uint32 backup_rpf_switch_holdtime = 42 [json_name = "backup-rpf-switch-holdtime"];
                     bool is_backup_rpf_switch_flow_based = 43 [json_name = "is-backup-rpf-switch-flow-based"];
                     string backup_rpf_switch_policy_ipv4 = 44 [json_name = "backup-rpf-switch-policy-ipv4"];
                     message SptSwitchs {
                        message SptSwitchNoAcl {
                           uint32 spt_threshold_no_acl = 1 [json_name = "spt-threshold-no-acl"];
                        }
                        SptSwitchNoAcl spt_switch_no_acl = 1 [json_name = "spt-switch-no-acl"];
                        message SptSwitch {
                           string group_policy = 1 [json_name = "group-policy"];
                           uint32 spt_threshold = 2 [json_name = "spt-threshold"];
                        }
                        repeated SptSwitch spt_switch = 2 [json_name = "spt-switch"];
                     }
                     SptSwitchs spt_switchs = 45 [json_name = "spt-switchs"];
                     message AnycastRps {
                        message AnycastRp {
                           string rp_addr = 1 [json_name = "rp-addr"];
                           string local_addr = 2 [json_name = "local-addr"];
                           message RpPeers {
                              message RpPeer {
                                 string peer_ip_addr = 1 [json_name = "peer-ip-addr"];
                                 bool forward_sa_msg = 2 [json_name = "forward-sa-msg"];
                                 string forward_policy = 3 [json_name = "forward-policy"];
                              }
                              repeated RpPeer rp_peer = 1 [json_name = "rp-peer"];
                           }
                           RpPeers rp_peers = 3 [json_name = "rp-peers"];
                        }
                        repeated AnycastRp anycast_rp = 1 [json_name = "anycast-rp"];
                     }
                     AnycastRps anycast_rps = 46 [json_name = "anycast-rps"];
                     message P2Mp {
                        bool rpf_disable = 1 [json_name = "rpf-disable"];
                        string rpf_disable_policy = 2 [json_name = "rpf-disable-policy"];
                        bool source_proxy_enable = 3 [json_name = "source-proxy-enable"];
                        string source_proxy_policy = 4 [json_name = "source-proxy-policy"];
                        bool rpf_ecm_enable = 5 [json_name = "rpf-ecm-enable"];
                     }
                     P2Mp p2mp = 47 [json_name = "p2mp"];
                     message Vector {
                        bool compatible_standard_enable = 1 [json_name = "compatible-standard-enable"];
                        bool rpf_enable = 2 [json_name = "rpf-enable"];
                     }
                     Vector vector = 48 [json_name = "vector"];
                     bool rp_load_split = 49 [json_name = "rp-load-split"];
                     bool register_with_probe = 50 [json_name = "register-with-probe"];
                     message Ipv6SptSwitchs {
                        message SptSwitchNoAcl {
                           uint32 spt_threshold_no_acl = 1 [json_name = "spt-threshold-no-acl"];
                        }
                        SptSwitchNoAcl spt_switch_no_acl = 1 [json_name = "spt-switch-no-acl"];
                        message Ipv6SptSwitch {
                           string group_policy = 1 [json_name = "group-policy"];
                           uint32 spt_threshold = 2 [json_name = "spt-threshold"];
                        }
                        repeated Ipv6SptSwitch ipv6_spt_switch = 2 [json_name = "ipv6-spt-switch"];
                     }
                     Ipv6SptSwitchs ipv6_spt_switchs = 51 [json_name = "ipv6-spt-switchs"];
                     message Bidir {
                        bool enable = 1 [json_name = "enable"];
                        uint32 offer_interval = 2 [json_name = "offer-interval"];
                        uint32 df_election_robustness = 3 [json_name = "df-election-robustness"];
                        uint32 df_back_off_interval = 4 [json_name = "df-back-off-interval"];
                     }
                     Bidir bidir = 52 [json_name = "bidir"];
                     message P2MpTunnels {
                        message P2MpTunnel {
                           string p2mp_root_ip = 1 [json_name = "p2mp-root-ip"];
                           uint32 tunnel_id = 2 [json_name = "tunnel-id"];
                        }
                        repeated P2MpTunnel p2mp_tunnel = 1 [json_name = "p2mp-tunnel"];
                     }
                     P2MpTunnels p2mp_tunnels = 53 [json_name = "p2mp-tunnels"];
                     message CloneJoins {
                        message CloneJoin {
                           string source_addr = 1 [json_name = "source-addr"];
                           uint32 mask_len = 2 [json_name = "mask-len"];
                           string primary_join_src_addr = 3 [json_name = "primary-join-src-addr"];
                           string backup_join_src_addr = 4 [json_name = "backup-join-src-addr"];
                        }
                        repeated CloneJoin clone_join = 1 [json_name = "clone-join"];
                     }
                     CloneJoins clone_joins = 54 [json_name = "clone-joins"];
                     message CloneSources {
                        message CloneSource {
                           string source_addr = 1 [json_name = "source-addr"];
                           uint32 mask_len = 2 [json_name = "mask-len"];
                           string primary_src_addr = 3 [json_name = "primary-src-addr"];
                           string backup_src_addr = 4 [json_name = "backup-src-addr"];
                        }
                        repeated CloneSource clone_source = 1 [json_name = "clone-source"];
                     }
                     CloneSources clone_sources = 55 [json_name = "clone-sources"];
                     message DestinationAddrPaths {
                        message DestinationAddrPath {
                           string destination_addr = 1 [json_name = "destination-addr"];
                           string path_name = 2 [json_name = "path-name"];
                           uint32 mask_len = 3 [json_name = "mask-len"];
                        }
                        repeated DestinationAddrPath destination_addr_path = 1 [json_name = "destination-addr-path"];
                     }
                     DestinationAddrPaths destination_addr_paths = 56 [json_name = "destination-addr-paths"];
                     uint32 rpf_switch_delay_sm = 57 [json_name = "rpf-switch-delay-sm"];
                     uint32 rpf_switch_delay_ssm = 58 [json_name = "rpf-switch-delay-ssm"];
                  }
                  repeated Instance7 instance7 = 1 [json_name = "instance"];
               }
               Instances6 instances6 = 7 [json_name = "instances"];
               message EmbeddedRps {
                  message EmbeddedRp {
                     string grp_addr = 1 [json_name = "grp-addr"];
                     string embedded_rp_addr = 2 [json_name = "embedded-rp-addr"];
                  }
                  repeated EmbeddedRp embedded_rp = 1 [json_name = "embedded-rp"];
               }
               EmbeddedRps embedded_rps = 8 [json_name = "embedded-rps"];
               message Dfs {
                  message Df {
                     string rp_addr = 1 [json_name = "rp-addr"];
                     string if_name = 2 [json_name = "if-name"];
                     string df_addr = 3 [json_name = "df-addr"];
                     uint32 df_up_time = 4 [json_name = "df-up-time"];
                     uint32 df_preference = 5 [json_name = "df-preference"];
                     uint32 df_route_metric = 6 [json_name = "df-route-metric"];
                     enum DfState {
                        DfState_OFFER = 0;
                        DfState_LOSE = 1;
                        DfState_WIN = 2;
                        DfState_BACKOFF = 3;
                     };
                     DfState df_state = 7 [json_name = "df-state"];
                     uint32 preference = 8 [json_name = "preference"];
                     uint32 route_metric = 9 [json_name = "route-metric"];
                     bool rpf_if = 10 [json_name = "rpf-if"];
                  }
                  repeated Df df = 1 [json_name = "df"];
               }
               Dfs dfs = 9 [json_name = "dfs"];
               message BidirInboundIfs {
                  message BidirInboundIf {
                     string rp_addr = 1 [json_name = "rp-addr"];
                     string if_name = 2 [json_name = "if-name"];
                     uint32 up_time = 3 [json_name = "up-time"];
                     bool rpf_if = 4 [json_name = "rpf-if"];
                  }
                  repeated BidirInboundIf bidir_inbound_if = 1 [json_name = "bidir-inbound-if"];
               }
               BidirInboundIfs bidir_inbound_ifs = 10 [json_name = "bidir-inbound-ifs"];
               message DmGrafts {
                  message DmGraft {
                     string grp_addr = 1 [json_name = "grp-addr"];
                     string src_addr = 2 [json_name = "src-addr"];
                     uint32 expire_time = 3 [json_name = "expire-time"];
                     uint32 retry_wait_time = 4 [json_name = "retry-wait-time"];
                  }
                  repeated DmGraft dm_graft = 1 [json_name = "dm-graft"];
               }
               DmGrafts dm_grafts = 11 [json_name = "dm-grafts"];
               message InvalidMessages {
                  message GeneralCnt {
                     uint32 invalid_version = 1 [json_name = "invalid-version"];
                     uint32 invalid_type = 2 [json_name = "invalid-type"];
                     uint32 fault_length = 3 [json_name = "fault-length"];
                     uint32 bad_checksum = 4 [json_name = "bad-checksum"];
                  }
                  GeneralCnt general_cnt = 1 [json_name = "general-cnt"];
                  message InvalidRegisterCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_destination_addr = 3 [json_name = "invalid-destination-addr"];
                  }
                  InvalidRegisterCnt invalid_register_cnt = 2 [json_name = "invalid-register-cnt"];
                  message InvalidRegisterStopCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_destination_sddr = 3 [json_name = "invalid-destination-sddr"];
                     uint32 source_addr_not_rp = 4 [json_name = "source-addr-not-rp"];
                  }
                  InvalidRegisterStopCnt invalid_register_stop_cnt = 3 [json_name = "invalid-register-stop-cnt"];
                  message InvalidCRpCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_group_address = 2 [json_name = "invalid-group-address"];
                     uint32 fault_length = 3 [json_name = "fault-length"];
                     uint32 adv_fault_length = 4 [json_name = "adv-fault-length"];
                     uint32 invalid_multicast_group = 5 [json_name = "invalid-multicast-group"];
                  }
                  InvalidCRpCnt invalid_c_rp_cnt = 4 [json_name = "invalid-c-rp-cnt"];
                  message InvalidAssertCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_ip_source_addr = 2 [json_name = "invalid-ip-source-addr"];
                     uint32 invalid_multicast_source = 3 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                     uint32 fault_length = 5 [json_name = "fault-length"];
                  }
                  InvalidAssertCnt invalid_assert_cnt = 5 [json_name = "invalid-assert-cnt"];
                  message InvalidBsrCnt {
                     uint32 bad_payload = 1 [json_name = "bad-payload"];
                     uint32 fault_length = 2 [json_name = "fault-length"];
                     uint32 invalid_scope_mask = 3 [json_name = "invalid-scope-mask"];
                     uint32 invalid_multicast_group = 4 [json_name = "invalid-multicast-group"];
                     uint32 recv_by_non_c_bsr = 5 [json_name = "recv-by-non-c-bsr"];
                     uint32 invalid_bsr_addr = 6 [json_name = "invalid-bsr-addr"];
                     uint32 fault_hash_length = 7 [json_name = "fault-hash-length"];
                     uint32 invalid_ip_source_addr = 8 [json_name = "invalid-ip-source-addr"];
                  }
                  InvalidBsrCnt invalid_bsr_cnt = 6 [json_name = "invalid-bsr-cnt"];
                  message InvalidHelloCnt {
                     uint32 invalid_addr_list = 1 [json_name = "invalid-addr-list"];
                     uint32 invalid_length = 2 [json_name = "invalid-length"];
                     uint32 invalid_holdtime_length = 3 [json_name = "invalid-holdtime-length"];
                     uint32 invalid_lan_prune_delay_length = 4 [json_name = "invalid-lan-prune-delay-length"];
                     uint32 invalid_dr_priority_length = 5 [json_name = "invalid-dr-priority-length"];
                     uint32 invalid_gen_id_length = 6 [json_name = "invalid-gen-id-length"];
                     uint32 invalid_destination_addr = 7 [json_name = "invalid-destination-addr"];
                     uint32 invalid_ip_source_addr = 8 [json_name = "invalid-ip-source-addr"];
                  }
                  InvalidHelloCnt invalid_hello_cnt = 7 [json_name = "invalid-hello-cnt"];
                  message InvalidJoinPruneCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_upstream_nbr = 3 [json_name = "invalid-upstream-nbr"];
                     uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                     uint32 invalid_destination_addr = 5 [json_name = "invalid-destination-addr"];
                     uint32 fault_length = 6 [json_name = "fault-length"];
                  }
                  InvalidJoinPruneCnt invalid_join_prune_cnt = 8 [json_name = "invalid-join-prune-cnt"];
                  message InvalidGraftCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_up_nbr = 3 [json_name = "invalid-up-nbr"];
                     uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                     uint32 fault_length = 5 [json_name = "fault-length"];
                  }
                  InvalidGraftCnt invalid_graft_cnt = 9 [json_name = "invalid-graft-cnt"];
                  message InvalidGraftAckCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_up_nbr = 3 [json_name = "invalid-up-nbr"];
                     uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                     uint32 fault_length = 5 [json_name = "fault-length"];
                  }
                  InvalidGraftAckCnt invalid_graft_ack_cnt = 10 [json_name = "invalid-graft-ack-cnt"];
                  message InvalidStateRefreshCnt {
                     uint32 invalid_multicast_source = 1 [json_name = "invalid-multicast-source"];
                     uint32 invalid_multicast_group = 2 [json_name = "invalid-multicast-group"];
                     uint32 invalid_originator = 3 [json_name = "invalid-originator"];
                     uint32 fault_length = 4 [json_name = "fault-length"];
                  }
                  InvalidStateRefreshCnt invalid_state_refresh_cnt = 11 [json_name = "invalid-state-refresh-cnt"];
                  message InvalidOfferCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                  }
                  InvalidOfferCnt invalid_offer_cnt = 12 [json_name = "invalid-offer-cnt"];
                  message InvalidBackoffCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                     uint32 invalid_offer_addr = 3 [json_name = "invalid-offer-addr"];
                  }
                  InvalidBackoffCnt invalid_backoff_cnt = 13 [json_name = "invalid-backoff-cnt"];
                  message InvalidPassCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                     uint32 invalid_new_winner_addr = 3 [json_name = "invalid-new-winner-addr"];
                  }
                  InvalidPassCnt invalid_pass_cnt = 14 [json_name = "invalid-pass-cnt"];
                  message InvalidWinCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_rp_addr = 2 [json_name = "invalid-rp-addr"];
                  }
                  InvalidWinCnt invalid_win_cnt = 15 [json_name = "invalid-win-cnt"];
                  message InvalidAutoRpAnnounceCnt {
                     uint32 invalid_destination_addr = 1 [json_name = "invalid-destination-addr"];
                     uint32 invalid_ip_source_addr = 2 [json_name = "invalid-ip-source-addr"];
                     uint32 invalid_ttl = 3 [json_name = "invalid-ttl"];
                     uint32 invalid_source_port = 4 [json_name = "invalid-source-port"];
                  }
                  InvalidAutoRpAnnounceCnt invalid_auto_rp_announce_cnt = 16 [json_name = "invalid-auto-rp-announce-cnt"];
                  message InvalidAutoRpDiscoveryCnt {
                     uint32 invalid_lenght = 1 [json_name = "invalid-lenght"];
                     uint32 invalid_rp = 2 [json_name = "invalid-rp"];
                     uint32 invalid_ip_source_addr = 3 [json_name = "invalid-ip-source-addr"];
                     uint32 invalid_group = 4 [json_name = "invalid-group"];
                     uint32 invalid_ttl = 5 [json_name = "invalid-ttl"];
                     uint32 invalid_source_port = 6 [json_name = "invalid-source-port"];
                  }
                  InvalidAutoRpDiscoveryCnt invalid_auto_rp_discovery_cnt = 17 [json_name = "invalid-auto-rp-discovery-cnt"];
                  message GeneralCnts {
                     message GeneralCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_version = 2 [json_name = "invalid-version"];
                        uint32 invalid_type = 3 [json_name = "invalid-type"];
                        uint32 fault_length = 4 [json_name = "fault-length"];
                        uint32 bad_checksum = 5 [json_name = "bad-checksum"];
                     }
                     repeated GeneralCnt general_cnt = 1 [json_name = "general-cnt"];
                  }
                  GeneralCnts general_cnts = 18 [json_name = "general-cnts"];
                  message InvalidRegisterCnts {
                     message InvalidRegisterCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_destination_addr = 4 [json_name = "invalid-destination-addr"];
                     }
                     repeated InvalidRegisterCnt invalid_register_cnt = 1 [json_name = "invalid-register-cnt"];
                  }
                  InvalidRegisterCnts invalid_register_cnts = 19 [json_name = "invalid-register-cnts"];
                  message InvalidRegisterStopCnts {
                     message InvalidRegisterStopCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_destination_sddr = 4 [json_name = "invalid-destination-sddr"];
                        uint32 source_addr_not_rp = 5 [json_name = "source-addr-not-rp"];
                     }
                     repeated InvalidRegisterStopCnt invalid_register_stop_cnt = 1 [json_name = "invalid-register-stop-cnt"];
                  }
                  InvalidRegisterStopCnts invalid_register_stop_cnts = 20 [json_name = "invalid-register-stop-cnts"];
                  message InvalidCRpCnts {
                     message InvalidCRpCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_destination_addr = 2 [json_name = "invalid-destination-addr"];
                        uint32 invalid_group_address = 3 [json_name = "invalid-group-address"];
                        uint32 fault_length = 4 [json_name = "fault-length"];
                        uint32 adv_fault_length = 5 [json_name = "adv-fault-length"];
                        uint32 invalid_multicast_group = 6 [json_name = "invalid-multicast-group"];
                     }
                     repeated InvalidCRpCnt invalid_c_rp_cnt = 1 [json_name = "invalid-c-rp-cnt"];
                  }
                  InvalidCRpCnts invalid_c_rp_cnts = 21 [json_name = "invalid-c-rp-cnts"];
                  message InvalidAssertCnts {
                     message InvalidAssertCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_destination_addr = 2 [json_name = "invalid-destination-addr"];
                        uint32 invalid_ip_source_addr = 3 [json_name = "invalid-ip-source-addr"];
                        uint32 invalid_multicast_source = 4 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 5 [json_name = "invalid-multicast-group"];
                        uint32 fault_length = 6 [json_name = "fault-length"];
                     }
                     repeated InvalidAssertCnt invalid_assert_cnt = 1 [json_name = "invalid-assert-cnt"];
                  }
                  InvalidAssertCnts invalid_assert_cnts = 22 [json_name = "invalid-assert-cnts"];
                  message InvalidBsrCnts {
                     message InvalidBsrCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 bad_payload = 2 [json_name = "bad-payload"];
                        uint32 fault_length = 3 [json_name = "fault-length"];
                        uint32 invalid_scope_mask = 4 [json_name = "invalid-scope-mask"];
                        uint32 invalid_multicast_group = 5 [json_name = "invalid-multicast-group"];
                        uint32 recv_by_non_c_bsr = 6 [json_name = "recv-by-non-c-bsr"];
                        uint32 invalid_bsr_addr = 7 [json_name = "invalid-bsr-addr"];
                        uint32 fault_hash_length = 8 [json_name = "fault-hash-length"];
                        uint32 invalid_ip_source_addr = 9 [json_name = "invalid-ip-source-addr"];
                     }
                     repeated InvalidBsrCnt invalid_bsr_cnt = 1 [json_name = "invalid-bsr-cnt"];
                  }
                  InvalidBsrCnts invalid_bsr_cnts = 23 [json_name = "invalid-bsr-cnts"];
                  message InvalidHelloCnts {
                     message InvalidHelloCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_addr_list = 2 [json_name = "invalid-addr-list"];
                        uint32 invalid_length = 3 [json_name = "invalid-length"];
                        uint32 invalid_holdtime_length = 4 [json_name = "invalid-holdtime-length"];
                        uint32 invalid_lan_prune_delay_length = 5 [json_name = "invalid-lan-prune-delay-length"];
                        uint32 invalid_dr_priority_length = 6 [json_name = "invalid-dr-priority-length"];
                        uint32 invalid_gen_id_length = 7 [json_name = "invalid-gen-id-length"];
                        uint32 invalid_destination_addr = 8 [json_name = "invalid-destination-addr"];
                        uint32 invalid_ip_source_addr = 9 [json_name = "invalid-ip-source-addr"];
                     }
                     repeated InvalidHelloCnt invalid_hello_cnt = 1 [json_name = "invalid-hello-cnt"];
                  }
                  InvalidHelloCnts invalid_hello_cnts = 24 [json_name = "invalid-hello-cnts"];
                  message InvalidJoinPruneCnts {
                     message InvalidJoinPruneCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_upstream_nbr = 4 [json_name = "invalid-upstream-nbr"];
                        uint32 invalid_ip_source_addr = 5 [json_name = "invalid-ip-source-addr"];
                        uint32 invalid_destination_addr = 6 [json_name = "invalid-destination-addr"];
                        uint32 fault_length = 7 [json_name = "fault-length"];
                     }
                     repeated InvalidJoinPruneCnt invalid_join_prune_cnt = 1 [json_name = "invalid-join-prune-cnt"];
                  }
                  InvalidJoinPruneCnts invalid_join_prune_cnts = 25 [json_name = "invalid-join-prune-cnts"];
                  message InvalidGraftCnts {
                     message InvalidGraftCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_up_nbr = 4 [json_name = "invalid-up-nbr"];
                        uint32 invalid_ip_source_addr = 5 [json_name = "invalid-ip-source-addr"];
                        uint32 fault_length = 6 [json_name = "fault-length"];
                     }
                     repeated InvalidGraftCnt invalid_graft_cnt = 1 [json_name = "invalid-graft-cnt"];
                  }
                  InvalidGraftCnts invalid_graft_cnts = 26 [json_name = "invalid-graft-cnts"];
                  message InvalidGraftAckCnts {
                     message InvalidGraftAckCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_up_nbr = 4 [json_name = "invalid-up-nbr"];
                        uint32 invalid_ip_source_addr = 5 [json_name = "invalid-ip-source-addr"];
                        uint32 fault_length = 6 [json_name = "fault-length"];
                     }
                     repeated InvalidGraftAckCnt invalid_graft_ack_cnt = 1 [json_name = "invalid-graft-ack-cnt"];
                  }
                  InvalidGraftAckCnts invalid_graft_ack_cnts = 27 [json_name = "invalid-graft-ack-cnts"];
                  message InvalidStateRefreshCnts {
                     message InvalidStateRefreshCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_multicast_source = 2 [json_name = "invalid-multicast-source"];
                        uint32 invalid_multicast_group = 3 [json_name = "invalid-multicast-group"];
                        uint32 invalid_originator = 4 [json_name = "invalid-originator"];
                        uint32 fault_length = 5 [json_name = "fault-length"];
                     }
                     repeated InvalidStateRefreshCnt invalid_state_refresh_cnt = 1 [json_name = "invalid-state-refresh-cnt"];
                  }
                  InvalidStateRefreshCnts invalid_state_refresh_cnts = 28 [json_name = "invalid-state-refresh-cnts"];
                  message InvalidAutoRpAnnounceCnts {
                     message InvalidAutoRpAnnounceCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_destination_addr = 2 [json_name = "invalid-destination-addr"];
                        uint32 invalid_ip_source_addr = 3 [json_name = "invalid-ip-source-addr"];
                        uint32 invalid_ttl = 4 [json_name = "invalid-ttl"];
                        uint32 invalid_source_port = 5 [json_name = "invalid-source-port"];
                     }
                     repeated InvalidAutoRpAnnounceCnt invalid_auto_rp_announce_cnt = 1 [json_name = "invalid-auto-rp-announce-cnt"];
                  }
                  InvalidAutoRpAnnounceCnts invalid_auto_rp_announce_cnts = 29 [json_name = "invalid-auto-rp-announce-cnts"];
                  message InvalidAutoRpDiscoveryCnts {
                     message InvalidAutoRpDiscoveryCnt {
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_IPV4UNICAST = 1;
                           Type_IPV6UNICAST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 invalid_length = 2 [json_name = "invalid-length"];
                        uint32 invalid_rp = 3 [json_name = "invalid-rp"];
                        uint32 invalid_ip_source_addr = 4 [json_name = "invalid-ip-source-addr"];
                        uint32 invalid_group = 5 [json_name = "invalid-group"];
                        uint32 invalid_ttl = 6 [json_name = "invalid-ttl"];
                        uint32 invalid_source_port = 7 [json_name = "invalid-source-port"];
                     }
                     repeated InvalidAutoRpDiscoveryCnt invalid_auto_rp_discovery_cnt = 1 [json_name = "invalid-auto-rp-discovery-cnt"];
                  }
                  InvalidAutoRpDiscoveryCnts invalid_auto_rp_discovery_cnts = 30 [json_name = "invalid-auto-rp-discovery-cnts"];
               }
               InvalidMessages invalid_messages = 12 [json_name = "invalid-messages"];
            }
            Protocol protocol = 2 [json_name = "protocol"];
         }
         Pim pim = 24 [json_name = "pim"];
         message Ospfv2 {
            message Sites {
               message Site {
                  uint32 process_id = 1 [json_name = "process-id"];
                  string router_id = 2 [json_name = "router-id"];
                  bool opaque = 3 [json_name = "opaque"];
                  bool rfc1583_compatible = 4 [json_name = "rfc1583-compatible"];
                  bool silent_all_interface = 5 [json_name = "silent-all-interface"];
                  bool retransmission_limit = 6 [json_name = "retransmission-limit"];
                  uint32 retransmission_limit_value = 7 [json_name = "retransmission-limit-value"];
                  bool safe_sync = 8 [json_name = "safe-sync"];
                  bool traffic_adj = 9 [json_name = "traffic-adj"];
                  bool traffic_adv = 10 [json_name = "traffic-adv"];
                  bool local_mt = 11 [json_name = "local-mt"];
                  bool advertise_mpls_lsr_id = 12 [json_name = "advertise-mpls-lsr-id"];
                  uint32 advertise_mpls_lsr_id_cost = 13 [json_name = "advertise-mpls-lsr-id-cost"];
                  bool suppress_reachability = 14 [json_name = "suppress-reachability"];
                  bool lsa_refresh = 15 [json_name = "lsa-refresh"];
                  enum MplsLdpAutoFlag {
                     MplsLdpAutoFlag_NONE = 0;
                     MplsLdpAutoFlag_ENABLE = 1;
                  };
                  MplsLdpAutoFlag mpls_ldp_auto_flag = 16 [json_name = "mpls-ldp-auto-flag"];
                  uint32 lsdb_overflow_limit = 17 [json_name = "lsdb-overflow-limit"];
                  bool peer_flapping_suppress = 18 [json_name = "peer-flapping-suppress"];
                  message PrivateNet {
                     bool eca_route = 1 [json_name = "eca-route"];
                     bool vpn_capability = 3 [json_name = "vpn-capability"];
                     message DomainId {
                        string domain_id = 1 [json_name = "domain-id"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_X_0X0005 = 1;
                           Type_X_0X0105 = 2;
                           Type_X_0X0205 = 3;
                           Type_X_0X8005 = 4;
                        };
                        Type type = 2 [json_name = "type"];
                        string value = 3 [json_name = "value"];
                     }
                     DomainId domain_id = 4 [json_name = "domain-id"];
                     message DomainIdSecondarys {
                        message DomainIdSecondary {
                           string domain_id = 1 [json_name = "domain-id"];
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_X_0X0005 = 1;
                              Type_X_0X0105 = 2;
                              Type_X_0X0205 = 3;
                              Type_X_0X8005 = 4;
                           };
                           Type type = 2 [json_name = "type"];
                           string value = 3 [json_name = "value"];
                        }
                        repeated DomainIdSecondary domain_id_secondary = 1 [json_name = "domain-id-secondary"];
                     }
                     DomainIdSecondarys domain_id_secondarys = 5 [json_name = "domain-id-secondarys"];
                     message RouteTag_Disable {
                        bool disable9 = 1 [json_name = "disable"];
                     }
                     message RouteTag_Value {
                        uint32 value9 = 1 [json_name = "value"];
                     }
                     oneof RouteTag {
                        RouteTag_Disable route_tag_disable = 6 [json_name = "disable"];
                        RouteTag_Value route_tag_value = 7 [json_name = "value"];
                     }
                  }
                  PrivateNet private_net = 19 [json_name = "private-net"];
                  message Bandwidth {
                     bool config_bw_enable = 1 [json_name = "config-bw-enable"];
                     uint32 reference_value = 2 [json_name = "reference-value"];
                  }
                  Bandwidth bandwidth = 20 [json_name = "bandwidth"];
                  message Timer {
                     message LsaArrival {
                        message TimerType_Timer9 {
                           uint32 interval = 1 [json_name = "interval"];
                        }
                        message TimerType_IntelligentTimer {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                        }
                        oneof TimerType {
                           TimerType_Timer9 timer_type_timer9 = 2 [json_name = "timer"];
                           TimerType_IntelligentTimer timer_type_intelligent_timer = 3 [json_name = "intelligent-timer"];
                        }
                     }
                     LsaArrival lsa_arrival = 1 [json_name = "lsa-arrival"];
                     message LsaOriginate {
                        uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                        message TimerType_IntelligentTimer {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                        }
                        oneof TimerType {
                           TimerType_IntelligentTimer timer_type_intelligent_timer = 3 [json_name = "intelligent-timer"];
                        }
                        message LsaOriginate9_Disable {
                           bool disable10 = 1 [json_name = "disable"];
                        }
                        message LsaOriginate9_Enable {
                           uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                           message TimerType_IntelligentTimer {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           oneof TimerType {
                              TimerType_IntelligentTimer timer_type_intelligent_timer = 2 [json_name = "intelligent-timer"];
                           }
                        }
                        oneof LsaOriginate9 {
                           LsaOriginate9_Disable lsa_originate_disable = 4 [json_name = "disable"];
                           LsaOriginate9_Enable lsa_originate_enable = 5 [json_name = "enable"];
                        }
                     }
                     LsaOriginate lsa_originate = 2 [json_name = "lsa-originate"];
                     message SpfSchedule {
                        message ScheduleType_Timer9 {
                           uint32 interval = 1 [json_name = "interval"];
                        }
                        message ScheduleType_IntelligentTimer {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                           bool conserv_flag = 4 [json_name = "conserv-flag"];
                        }
                        message ScheduleType_Millisecond {
                           uint32 millisecond10 = 1 [json_name = "millisecond"];
                        }
                        oneof ScheduleType {
                           ScheduleType_Timer9 schedule_type_timer9 = 2 [json_name = "timer"];
                           ScheduleType_IntelligentTimer schedule_type_intelligent_timer = 3 [json_name = "intelligent-timer"];
                           ScheduleType_Millisecond schedule_type_millisecond = 4 [json_name = "millisecond"];
                        }
                     }
                     SpfSchedule spf_schedule = 3 [json_name = "spf-schedule"];
                     message LsaArrSuppFlap {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 threshold_count = 2 [json_name = "threshold-count"];
                     }
                     LsaArrSuppFlap lsa_arr_supp_flap = 4 [json_name = "lsa-arr-supp-flap"];
                     message LsaOrgSuppFlap {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 threshold_count = 2 [json_name = "threshold-count"];
                     }
                     LsaOrgSuppFlap lsa_org_supp_flap = 5 [json_name = "lsa-org-supp-flap"];
                  }
                  Timer timer = 21 [json_name = "timer"];
                  message Bfd {
                     bool enable = 1 [json_name = "enable"];
                     uint32 min_rx = 2 [json_name = "min-rx"];
                     uint32 min_tx = 3 [json_name = "min-tx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                     bool frr_binding = 5 [json_name = "frr-binding"];
                     uint32 incr_cost = 6 [json_name = "incr-cost"];
                     uint32 incr_cost_wtr = 7 [json_name = "incr-cost-wtr"];
                  }
                  Bfd bfd = 22 [json_name = "bfd"];
                  message StubRouter {
                     enum Flag {
                        Flag_NOX_CONFIG = 0;
                        Flag_STUBX_ONX_HAND = 1;
                        Flag_STUBX_ONX_BOOT = 2;
                     };
                     Flag flag = 1 [json_name = "flag"];
                     uint32 interval = 2 [json_name = "interval"];
                     bool include_stub = 3 [json_name = "include-stub"];
                     bool external_lsa = 4 [json_name = "external-lsa"];
                     uint32 external_cost = 5 [json_name = "external-cost"];
                     bool summary_lsa = 6 [json_name = "summary-lsa"];
                     uint32 summary_cost = 7 [json_name = "summary-cost"];
                  }
                  StubRouter stub_router = 23 [json_name = "stub-router"];
                  message BgpLs {
                     bool enable = 1 [json_name = "enable"];
                     uint32 identifier = 2 [json_name = "identifier"];
                  }
                  BgpLs bgp_ls = 24 [json_name = "bgp-ls"];
                  message ImportLimit {
                     uint32 max_number = 1 [json_name = "max-number"];
                     uint32 threshold_upper = 2 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 3 [json_name = "threshold-lower"];
                  }
                  ImportLimit import_limit = 25 [json_name = "import-limit"];
                  message SpfControl {
                     uint32 max_load_balancing = 1 [json_name = "max-load-balancing"];
                  }
                  SpfControl spf_control = 26 [json_name = "spf-control"];
                  message DefaultPara {
                     uint32 tag = 2 [json_name = "tag"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_TYPE1 = 1;
                        Type_TYPE2 = 2;
                     };
                     Type type = 3 [json_name = "type"];
                     message Cost_CostValue {
                        uint32 cost_value = 1 [json_name = "cost-value"];
                     }
                     message Cost_CostInheritMetric {
                        bool cost_inherit_metric = 1 [json_name = "cost-inherit-metric"];
                     }
                     oneof Cost {
                        Cost_CostValue cost_cost_value = 4 [json_name = "cost-value"];
                        Cost_CostInheritMetric cost_cost_inherit_metric = 5 [json_name = "cost-inherit-metric"];
                     }
                  }
                  DefaultPara default_para = 27 [json_name = "default-para"];
                  message AvoidMicroLoop {
                     bool frr_enable = 1 [json_name = "frr-enable"];
                     uint32 frr_rib_update_delay = 2 [json_name = "frr-rib-update-delay"];
                     bool te_tunnel_enable = 3 [json_name = "te-tunnel-enable"];
                     uint32 te_tunnel_rib_update_delay = 4 [json_name = "te-tunnel-rib-update-delay"];
                  }
                  AvoidMicroLoop avoid_micro_loop = 28 [json_name = "avoid-micro-loop"];
                  message RoutePreferences {
                     message RoutePreference {
                        enum RouteType {
                           INVALID_ENUM_VALUE_RouteType = 0;
                           RouteType_DEFAULT = 1;
                           RouteType_ASE = 2;
                           RouteType_INTRA = 3;
                           RouteType_INTER = 4;
                        };
                        RouteType route_type = 1 [json_name = "route-type"];
                        uint32 preference = 2 [json_name = "preference"];
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 4 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 5 [json_name = "route-filter-name"];
                        }
                     }
                     repeated RoutePreference route_preference = 1 [json_name = "route-preference"];
                  }
                  RoutePreferences route_preferences = 30 [json_name = "route-preferences"];
                  message EcmpPrefer {
                     bool te_tunnel = 1 [json_name = "te-tunnel"];
                     bool intact = 2 [json_name = "intact"];
                  }
                  EcmpPrefer ecmp_prefer = 31 [json_name = "ecmp-prefer"];
                  message Frr {
                     bool enable = 1 [json_name = "enable"];
                     bool lfa_enable = 2 [json_name = "lfa-enable"];
                     bool tilfa_enable = 3 [json_name = "tilfa-enable"];
                     message Tiebreaker {
                        uint32 node_protect = 1 [json_name = "node-protect"];
                        uint32 lowest_cost = 2 [json_name = "lowest-cost"];
                        uint32 ldp_sync = 3 [json_name = "ldp-sync"];
                        uint32 srlg_disjoint = 4 [json_name = "srlg-disjoint"];
                     }
                     Tiebreaker tiebreaker = 4 [json_name = "tiebreaker"];
                     bool rlfa_enable = 5 [json_name = "rlfa-enable"];
                     uint32 rlfa_max_cost = 6 [json_name = "rlfa-max-cost"];
                     message RoutePolicy {
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 1 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 2 [json_name = "route-filter-name"];
                        }
                     }
                     RoutePolicy route_policy = 7 [json_name = "route-policy"];
                     message RlfaTunnel {
                        message PolicyType_IpPrefixName {
                           string ip_prefix_name = 1 [json_name = "ip-prefix-name"];
                        }
                        oneof PolicyType {
                           PolicyType_IpPrefixName policy_type_ip_prefix_name = 1 [json_name = "ip-prefix-name"];
                        }
                     }
                     RlfaTunnel rlfa_tunnel = 8 [json_name = "rlfa-tunnel"];
                  }
                  Frr frr = 32 [json_name = "frr"];
                  message FloodControl {
                     uint32 number8 = 1 [json_name = "number"];
                     uint32 interval = 2 [json_name = "interval"];
                  }
                  FloodControl flood_control = 34 [json_name = "flood-control"];
                  message DnBit {
                     bool set_ase = 1 [json_name = "set-ase"];
                     bool set_nssa = 2 [json_name = "set-nssa"];
                     bool set_summary = 3 [json_name = "set-summary"];
                     bool check_ase = 4 [json_name = "check-ase"];
                     bool check_nssa = 5 [json_name = "check-nssa"];
                     bool check_summary = 6 [json_name = "check-summary"];
                     message SummaryRouterIds {
                        message SummaryRouterId {
                           string router_id = 1 [json_name = "router-id"];
                        }
                        repeated SummaryRouterId summary_router_id = 1 [json_name = "summary-router-id"];
                     }
                     SummaryRouterIds summary_router_ids = 7 [json_name = "summary-router-ids"];
                  }
                  DnBit dn_bit = 35 [json_name = "dn-bit"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_OSPF = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_UNR = 11;
                           Protocol_OPR = 14;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 tag = 4 [json_name = "tag"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_TYPE1 = 1;
                           Type_TYPE2 = 2;
                        };
                        Type type = 5 [json_name = "type"];
                        bool permit_ibgp = 6 [json_name = "permit-ibgp"];
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 8 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 10 [json_name = "route-filter-name"];
                        }
                        bool inherit_route_type = 9 [json_name = "inherit-route-type"];
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 36 [json_name = "import-routes"];
                  message Areas {
                     message Area {
                        string area_id = 1 [json_name = "area-id"];
                        enum AreaType {
                           INVALID_ENUM_VALUE_AreaType = 0;
                           AreaType_NORMAL = 1;
                           AreaType_STUB = 2;
                           AreaType_NSSA = 3;
                        };
                        AreaType area_type = 2 [json_name = "area-type"];
                        string description = 3 [json_name = "description"];
                        message Networks {
                           message Network {
                              string ip_address = 1 [json_name = "ip-address"];
                              string mask = 2 [json_name = "mask"];
                              string description = 3 [json_name = "description"];
                           }
                           repeated Network network = 1 [json_name = "network"];
                        }
                        Networks networks = 4 [json_name = "networks"];
                        message LdpSync {
                           bool enable = 1 [json_name = "enable"];
                           message HoldCostMax_Timer {
                              uint32 timer11 = 1 [json_name = "timer"];
                           }
                           message HoldCostMax_Infinite {
                              bool infinite11 = 1 [json_name = "infinite"];
                           }
                           oneof HoldCostMax {
                              HoldCostMax_Timer hold_cost_max_timer = 3 [json_name = "timer"];
                              HoldCostMax_Infinite hold_cost_max_infinite = 4 [json_name = "infinite"];
                           }
                        }
                        LdpSync ldp_sync = 5 [json_name = "ldp-sync"];
                        message MplsTe {
                           bool enable = 1 [json_name = "enable"];
                           bool standard_complying = 2 [json_name = "standard-complying"];
                        }
                        MplsTe mpls_te = 6 [json_name = "mpls-te"];
                        message Authentication {
                           enum Mode {
                              Mode_NONE = 0;
                              Mode_KEYCHAIN = 1;
                              Mode_HMACX_SHA256 = 2;
                              Mode_SIMPLE = 32;
                              Mode_MD5 = 64;
                              Mode_HMACX_MD5 = 128;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           string auth_text_simple = 2 [json_name = "auth-text-simple"];
                           uint32 key_id = 3 [json_name = "key-id"];
                           string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                           string key_chain_name = 5 [json_name = "key-chain-name"];
                        }
                        Authentication authentication = 7 [json_name = "authentication"];
                        message Interfaces {
                           message Interface {
                              string name = 1 [json_name = "name"];
                              enum NetworkType {
                                 INVALID_ENUM_VALUE_NetworkType = 0;
                                 NetworkType_BROADCAST = 1;
                                 NetworkType_NBMA = 2;
                                 NetworkType_P2P = 3;
                                 NetworkType_P2MP = 5;
                              };
                              NetworkType network_type = 2 [json_name = "network-type"];
                              enum PeerIpIgnore {
                                 PeerIpIgnore_DISABLE = 0;
                                 PeerIpIgnore_ENABLE = 1;
                              };
                              PeerIpIgnore peer_ip_ignore = 3 [json_name = "peer-ip-ignore"];
                              int32 transmit_delay = 4 [json_name = "transmit-delay"];
                              bool mtu_enable = 5 [json_name = "mtu-enable"];
                              int32 dr_priority = 6 [json_name = "dr-priority"];
                              uint32 cost = 7 [json_name = "cost"];
                              bool smart_discover = 8 [json_name = "smart-discover"];
                              bool p2mp_mask_ignore = 9 [json_name = "p2mp-mask-ignore"];
                              bool ldp_sync_block = 10 [json_name = "ldp-sync-block"];
                              bool ldp_sync_enable = 11 [json_name = "ldp-sync-enable"];
                              enum SuppressReachability {
                                 SuppressReachability_DISABLE = 0;
                                 SuppressReachability_ENABLE = 1;
                                 SuppressReachability_NOTX_CONFIGURED = 2;
                              };
                              SuppressReachability suppress_reachability = 12 [json_name = "suppress-reachability"];
                              enum MplsLdpAutoFlag {
                                 MplsLdpAutoFlag_DISABLE = 0;
                                 MplsLdpAutoFlag_NONE = 1;
                              };
                              MplsLdpAutoFlag mpls_ldp_auto_flag = 13 [json_name = "mpls-ldp-auto-flag"];
                              uint32 peer_hold_max_timer = 14 [json_name = "peer-hold-max-timer"];
                              message Frr {
                                 bool frr_disable = 1 [json_name = "frr-disable"];
                                 bool rlfa_disable = 2 [json_name = "rlfa-disable"];
                                 message TiLfa {
                                    bool disable = 1 [json_name = "disable"];
                                 }
                                 TiLfa ti_lfa = 3 [json_name = "ti-lfa"];
                              }
                              Frr frr = 15 [json_name = "frr"];
                              message Timer {
                                 int32 hello_interval = 1 [json_name = "hello-interval"];
                                 int32 dead_interval = 2 [json_name = "dead-interval"];
                                 uint32 wait_interval = 3 [json_name = "wait-interval"];
                                 int32 poll_interval = 4 [json_name = "poll-interval"];
                                 int32 retransmit_interval = 5 [json_name = "retransmit-interval"];
                                 bool hello_conser = 6 [json_name = "hello-conser"];
                              }
                              Timer timer = 16 [json_name = "timer"];
                              message LdpSync {
                                 uint32 hold_down_timer = 1 [json_name = "hold-down-timer"];
                                 message HoldCostMax_Timer {
                                    uint32 timer13 = 1 [json_name = "timer"];
                                 }
                                 message HoldCostMax_Infinite {
                                    bool infinite13 = 1 [json_name = "infinite"];
                                 }
                                 oneof HoldCostMax {
                                    HoldCostMax_Timer hold_cost_max_timer = 3 [json_name = "timer"];
                                    HoldCostMax_Infinite hold_cost_max_infinite = 4 [json_name = "infinite"];
                                 }
                              }
                              LdpSync ldp_sync = 17 [json_name = "ldp-sync"];
                              message Bfd {
                                 bool enable = 1 [json_name = "enable"];
                                 bool block = 2 [json_name = "block"];
                                 uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                                 uint32 min_tx = 4 [json_name = "min-tx"];
                                 uint32 min_rx = 5 [json_name = "min-rx"];
                                 bool frr_binding = 6 [json_name = "frr-binding"];
                                 bool per_link_flag = 8 [json_name = "per-link-flag"];
                                 bool one_arm_echo_flag = 9 [json_name = "one-arm-echo-flag"];
                                 message IncrCost_IncrCostBlock {
                                    bool incr_cost_block = 1 [json_name = "incr-cost-block"];
                                 }
                                 message IncrCost_IncrCostValue {
                                    uint32 incr_cost_value = 1 [json_name = "incr-cost-value"];
                                 }
                                 oneof IncrCost {
                                    IncrCost_IncrCostBlock incr_cost_incr_cost_block = 10 [json_name = "incr-cost-block"];
                                    IncrCost_IncrCostValue incr_cost_incr_cost_value = 11 [json_name = "incr-cost-value"];
                                 }
                                 uint32 incr_cost_wtr = 12 [json_name = "incr-cost-wtr"];
                              }
                              Bfd bfd = 18 [json_name = "bfd"];
                              message Authentication {
                                 enum Mode {
                                    Mode_NONE = 0;
                                    Mode_KEYCHAIN = 1;
                                    Mode_HMACX_SHA256 = 2;
                                    Mode_NULL = 16;
                                    Mode_SIMPLE = 32;
                                    Mode_MD5 = 64;
                                    Mode_HMACX_MD5 = 128;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 string auth_text_simple = 2 [json_name = "auth-text-simple"];
                                 uint32 key_id = 3 [json_name = "key-id"];
                                 string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                                 string key_chain_name = 5 [json_name = "key-chain-name"];
                              }
                              Authentication authentication = 19 [json_name = "authentication"];
                              message FilterLsaOut {
                                 message Type_Total {
                                    bool all_flag = 1 [json_name = "all-flag"];
                                 }
                                 message Type_Other {
                                    bool sum_flag = 1 [json_name = "sum-flag"];
                                    message SumFilter_Acl {
                                       string sum_name = 1 [json_name = "sum-name"];
                                    }
                                    oneof SumFilter {
                                       SumFilter_Acl sum_filter_acl = 2 [json_name = "acl"];
                                    }
                                    bool ase_flag = 4 [json_name = "ase-flag"];
                                    message AseFilter_Acl {
                                       string ase_name = 1 [json_name = "ase-name"];
                                    }
                                    oneof AseFilter {
                                       AseFilter_Acl ase_filter_acl = 5 [json_name = "acl"];
                                    }
                                    bool nssa_flag = 7 [json_name = "nssa-flag"];
                                    message NssaFilter_Acl {
                                       string nssa_name = 1 [json_name = "nssa-name"];
                                    }
                                    oneof NssaFilter {
                                       NssaFilter_Acl nssa_filter_acl = 8 [json_name = "acl"];
                                    }
                                 }
                                 oneof Type {
                                    Type_Total type_total = 2 [json_name = "total"];
                                    Type_Other type_other = 3 [json_name = "other"];
                                 }
                              }
                              FilterLsaOut filter_lsa_out = 20 [json_name = "filter-lsa-out"];
                              message SuppressFlapping {
                                 message Peer {
                                    bool enable = 1 [json_name = "enable"];
                                    uint32 detect_interval = 2 [json_name = "detect-interval"];
                                    uint32 threshold = 3 [json_name = "threshold"];
                                    uint32 resume_interval = 4 [json_name = "resume-interval"];
                                    uint32 hold_down_interval = 5 [json_name = "hold-down-interval"];
                                    bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                                 }
                                 Peer peer = 1 [json_name = "peer"];
                              }
                              SuppressFlapping suppress_flapping = 21 [json_name = "suppress-flapping"];
                              message DispData {
                                 bool suppress_reach_block = 1 [json_name = "suppress-reach-block"];
                                 bool silent_enable = 2 [json_name = "silent-enable"];
                                 string dr = 3 [json_name = "dr"];
                                 string bdr = 4 [json_name = "bdr"];
                                 enum State {
                                    State_DOWN = 0;
                                    State_WAITING = 1;
                                    State_P2P = 2;
                                    State_DR = 3;
                                    State_BDR = 4;
                                    State_DRX_OTHER = 5;
                                    State_LOOPBACK = 6;
                                 };
                                 State state = 5 [json_name = "state"];
                                 uint32 mtu = 6 [json_name = "mtu"];
                                 string ip = 7 [json_name = "ip"];
                                 int32 cost = 8 [json_name = "cost"];
                                 enum GrState {
                                    GrState_NORMAL = 0;
                                    GrState_HELPER = 1;
                                    GrState_NULL = 2;
                                    GrState_NONE = 3;
                                 };
                                 GrState gr_state = 9 [json_name = "gr-state"];
                                 enum PreviousState {
                                    PreviousState_DOWN = 0;
                                    PreviousState_WAITING = 1;
                                    PreviousState_P2P = 2;
                                    PreviousState_DR = 3;
                                    PreviousState_BDR = 4;
                                    PreviousState_DRX_OTHER = 5;
                                    PreviousState_LOOPBACK = 6;
                                 };
                                 PreviousState previous_state = 10 [json_name = "previous-state"];
                                 uint32 opaque_id = 11 [json_name = "opaque-id"];
                                 bool mpls_te_link = 12 [json_name = "mpls-te-link"];
                                 enum PeerFlapStatus {
                                    PeerFlapStatus_DISABLE = 0;
                                    PeerFlapStatus_ENABLE = 1;
                                    PeerFlapStatus_HOLDX_MAXX_COST = 2;
                                    PeerFlapStatus_HOLDX_DOWN = 3;
                                 };
                                 PeerFlapStatus peer_flap_status = 13 [json_name = "peer-flap-status"];
                                 uint32 peer_flap_count = 14 [json_name = "peer-flap-count"];
                                 uint32 peer_flap_threshold = 15 [json_name = "peer-flap-threshold"];
                                 string peer_flap_timer = 16 [json_name = "peer-flap-timer"];
                                 uint32 peer_flap_remain_timer = 17 [json_name = "peer-flap-remain-timer"];
                                 uint32 bandwidth = 18 [json_name = "bandwidth"];
                                 string peer_flap_time = 19 [json_name = "peer-flap-time"];
                              }
                              DispData disp_data = 22 [json_name = "disp-data"];
                              message NbrStatistics {
                                 message NbrStatistic {
                                    string router_id = 1 [json_name = "router-id"];
                                    string ip = 2 [json_name = "ip"];
                                    string intf_ip = 3 [json_name = "intf-ip"];
                                    enum GrState {
                                       GrState_NORMAL = 0;
                                       GrState_DOINGX_GR = 1;
                                       GrState_HELPER = 2;
                                       GrState_NONE = 3;
                                    };
                                    GrState gr_state = 4 [json_name = "gr-state"];
                                    enum State {
                                       State_DOWN = 0;
                                       State_INIT = 1;
                                       State_ATTEMPT = 2;
                                       State_X_2X_WAY = 3;
                                       State_EXSTART = 4;
                                       State_EXCHANGE = 5;
                                       State_LOADING = 6;
                                       State_FULL = 7;
                                    };
                                    State state = 5 [json_name = "state"];
                                    enum Mode {
                                       Mode_SLAVE = 0;
                                       Mode_MASTER = 1;
                                    };
                                    Mode mode = 6 [json_name = "mode"];
                                    int32 priority = 7 [json_name = "priority"];
                                    string dr = 8 [json_name = "dr"];
                                    string bdr = 9 [json_name = "bdr"];
                                    uint32 intf_mtu = 10 [json_name = "intf-mtu"];
                                    uint32 dead_due_timer = 11 [json_name = "dead-due-timer"];
                                    uint32 retran_intv = 12 [json_name = "retran-intv"];
                                    string up_time = 13 [json_name = "up-time"];
                                    string up_time_stamp = 14 [json_name = "up-time-stamp"];
                                    uint32 auth_sequence = 15 [json_name = "auth-sequence"];
                                    uint32 adj_sid = 16 [json_name = "adj-sid"];
                                    uint32 adj_weight = 17 [json_name = "adj-weight"];
                                    string adj_flags = 18 [json_name = "adj-flags"];
                                 }
                                 repeated NbrStatistic nbr_statistic = 1 [json_name = "nbr-statistic"];
                              }
                              NbrStatistics nbr_statistics = 23 [json_name = "nbr-statistics"];
                              message ErrorData {
                                 string router_id = 1 [json_name = "router-id"];
                                 uint32 same_ip_pkt_cnt = 2 [json_name = "same-ip-pkt-cnt"];
                                 uint32 bad_pkt_cnt = 3 [json_name = "bad-pkt-cnt"];
                                 uint32 bad_ver_cnt = 4 [json_name = "bad-ver-cnt"];
                                 uint32 bad_chksum_pkt_cnt = 5 [json_name = "bad-chksum-pkt-cnt"];
                                 uint32 bad_area_pkt_cnt = 6 [json_name = "bad-area-pkt-cnt"];
                                 uint32 pkt_rcv_unnumber = 7 [json_name = "pkt-rcv-unnumber"];
                                 uint32 bad_virt_link_cnt = 8 [json_name = "bad-virt-link-cnt"];
                                 uint32 auth_type_fail_cnt = 9 [json_name = "auth-type-fail-cnt"];
                                 uint32 auth_key_fail_cnt = 10 [json_name = "auth-key-fail-cnt"];
                                 uint32 short_pkt_cnt = 11 [json_name = "short-pkt-cnt"];
                                 uint32 long_pkt_cnt = 12 [json_name = "long-pkt-cnt"];
                                 uint32 tx_err_cnt = 13 [json_name = "tx-err-cnt"];
                                 uint32 if_down_cnt = 14 [json_name = "if-down-cnt"];
                                 uint32 no_nbr = 15 [json_name = "no-nbr"];
                                 uint32 mis_netmask_cnt = 16 [json_name = "mis-netmask-cnt"];
                                 uint32 mis_hello_intl_cnt = 17 [json_name = "mis-hello-intl-cnt"];
                                 uint32 mis_dead_intl_cnt = 18 [json_name = "mis-dead-intl-cnt"];
                                 uint32 mis_ext_cnt = 19 [json_name = "mis-ext-cnt"];
                                 uint32 router_id_confusion = 20 [json_name = "router-id-confusion"];
                                 uint32 vlink_nbr_mis_cnt = 21 [json_name = "vlink-nbr-mis-cnt"];
                                 uint32 nbma_nbr_err_cnt = 22 [json_name = "nbma-nbr-err-cnt"];
                                 uint32 inval_src_hello_cnt = 23 [json_name = "inval-src-hello-cnt"];
                                 uint32 dd_nbr_low_cnt = 24 [json_name = "dd-nbr-low-cnt"];
                                 uint32 dd_rtrid_cnt = 25 [json_name = "dd-rtrid-cnt"];
                                 uint32 dd_opt_mismatch_cnt = 26 [json_name = "dd-opt-mismatch-cnt"];
                                 uint32 dd_unknwn_lsa_cnt = 27 [json_name = "dd-unknwn-lsa-cnt"];
                                 uint32 dd_mtu_mismatch_cnt = 28 [json_name = "dd-mtu-mismatch-cnt"];
                                 uint32 ack_nbr_low_cnt = 29 [json_name = "ack-nbr-low-cnt"];
                                 uint32 ack_bad_cnt = 30 [json_name = "ack-bad-cnt"];
                                 uint32 ack_duplicate_cnt = 31 [json_name = "ack-duplicate-cnt"];
                                 uint32 ack_unknwn_lsa_cnt = 32 [json_name = "ack-unknwn-lsa-cnt"];
                                 uint32 req_nbr_low_cnt = 33 [json_name = "req-nbr-low-cnt"];
                                 uint32 req_empty_cnt = 34 [json_name = "req-empty-cnt"];
                                 uint32 req_bad_cnt = 35 [json_name = "req-bad-cnt"];
                                 uint32 upd_nbr_low_cnt = 36 [json_name = "upd-nbr-low-cnt"];
                                 uint32 upd_self_newr_cnt = 37 [json_name = "upd-self-newr-cnt"];
                                 uint32 upd_min_lsarr_cnt = 38 [json_name = "upd-min-lsarr-cnt"];
                                 uint32 upd_ls_chksum_cnt = 39 [json_name = "upd-ls-chksum-cnt"];
                                 uint32 upd_les_recent_cnt = 40 [json_name = "upd-les-recent-cnt"];
                                 uint32 upd_unknw_lsa_cnt = 41 [json_name = "upd-unknw-lsa-cnt"];
                                 uint32 opq9_flood_cnt = 42 [json_name = "opq9-flood-cnt"];
                                 uint32 opq10_flood_cnt = 43 [json_name = "opq10-flood-cnt"];
                                 uint32 opq11_flood_cnt = 44 [json_name = "opq11-flood-cnt"];
                                 uint32 rxmt_dd_err_cnt = 45 [json_name = "rxmt-dd-err-cnt"];
                                 uint32 rxmt_req_err_cnt = 46 [json_name = "rxmt-req-err-cnt"];
                                 uint32 rxmt_upd_err_cnt = 47 [json_name = "rxmt-upd-err-cnt"];
                                 uint32 gr_invalid_lsa_cnt = 48 [json_name = "gr-invalid-lsa-cnt"];
                                 uint32 gr_invalid_pol_cnt = 49 [json_name = "gr-invalid-pol-cnt"];
                                 uint32 gr_invalid_prd_cnt = 50 [json_name = "gr-invalid-prd-cnt"];
                                 uint32 tunnel_cost_cnt = 51 [json_name = "tunnel-cost-cnt"];
                                 uint32 peer_net_type_cnt = 52 [json_name = "peer-net-type-cnt"];
                                 uint32 hello_dr_mis_cnt = 53 [json_name = "hello-dr-mis-cnt"];
                                 uint32 gen_ttl_err_cnt = 54 [json_name = "gen-ttl-err-cnt"];
                                 uint32 over_max_buffer_length_cnt = 55 [json_name = "over-max-buffer-length-cnt"];
                                 uint32 bad_net_segment_packet_cnt = 56 [json_name = "bad-net-segment-packet-cnt"];
                                 uint32 bad_routerid_packet_cnt = 57 [json_name = "bad-routerid-packet-cnt"];
                                 uint32 destination_ip_error_packet_cnt = 58 [json_name = "destination-ip-error-packet-cnt"];
                                 uint32 passive_intf_packet_cnt = 59 [json_name = "passive-intf-packet-cnt"];
                                 uint32 hello_nbr_reach_limit_cnt = 60 [json_name = "hello-nbr-reach-limit-cnt"];
                                 uint32 hello_hold_down_cnt = 61 [json_name = "hello-hold-down-cnt"];
                                 uint32 hello_memory_overload_cnt = 62 [json_name = "hello-memory-overload-cnt"];
                                 uint32 hello_cpu_overload_cnt = 63 [json_name = "hello-cpu-overload-cnt"];
                                 uint32 dd_nbr_reach_limit_cnt = 64 [json_name = "dd-nbr-reach-limit-cnt"];
                                 uint32 dd_cpu_overload_cnt = 65 [json_name = "dd-cpu-overload-cnt"];
                                 uint32 dd_mem_overload_cnt = 66 [json_name = "dd-mem-overload-cnt"];
                                 uint32 ri_lsa_tlv_error_cnt = 67 [json_name = "ri-lsa-tlv-error-cnt"];
                                 uint32 ri_lsa_sub_tlv_error_cnt = 68 [json_name = "ri-lsa-sub-tlv-error-cnt"];
                                 uint32 ext_prefix_lsa_tlv_error_cnt = 69 [json_name = "ext-prefix-lsa-tlv-error-cnt"];
                                 uint32 ext_prefix_lsa_sub_tlv_error_cnt = 70 [json_name = "ext-prefix-lsa-sub-tlv-error-cnt"];
                                 uint32 ext_link_lsa_tlv_error_cnt = 71 [json_name = "ext-link-lsa-tlv-error-cnt"];
                                 uint32 ext_link_lsa_sub_tlv_error_cnt = 72 [json_name = "ext-link-lsa-sub-tlv-error-cnt"];
                                 uint32 bad_sr_algo_cnt = 73 [json_name = "bad-sr-algo-cnt"];
                                 uint32 bad_sid_range_cnt = 74 [json_name = "bad-sid-range-cnt"];
                                 uint32 bad_sid_cnt = 75 [json_name = "bad-sid-cnt"];
                                 uint32 bad_adj_sid_cnt = 76 [json_name = "bad-adj-sid-cnt"];
                                 uint32 bad_prefix_sid_cnt = 77 [json_name = "bad-prefix-sid-cnt"];
                                 uint32 bad_ext_prefix_range_cnt = 78 [json_name = "bad-ext-prefix-range-cnt"];
                                 uint32 bad_lan_adj_sid_cnt = 79 [json_name = "bad-lan-adj-sid-cnt"];
                                 uint32 bad_ext_prefix_cnt = 80 [json_name = "bad-ext-prefix-cnt"];
                                 uint32 bad_ext_link_cnt = 81 [json_name = "bad-ext-link-cnt"];
                                 uint32 bad_fad_cnt = 82 [json_name = "bad-fad-cnt"];
                                 uint32 bad_exclude_ag_cnt = 83 [json_name = "bad-exclude-ag-cnt"];
                                 uint32 bad_include_any_ag_cnt = 84 [json_name = "bad-include-any-ag-cnt"];
                                 uint32 bad_include_all_ag_cnt = 85 [json_name = "bad-include-all-ag-cnt"];
                                 uint32 bad_fad_flags_cnt = 86 [json_name = "bad-fad-flags-cnt"];
                                 uint32 bad_alsa_cnt = 87 [json_name = "bad-alsa-cnt"];
                                 uint32 bad_te_metric_cnt = 88 [json_name = "bad-te-metric-cnt"];
                                 uint32 bad_link_delay_cnt = 89 [json_name = "bad-link-delay-cnt"];
                                 uint32 bad_extended_ag_cnt = 90 [json_name = "bad-extended-ag-cnt"];
                                 uint32 eia_asbr_lsa_error_cnt = 91 [json_name = "eia-asbr-lsa-error-cnt"];
                                 uint32 eia_asbr_tlv_error_cnt = 92 [json_name = "eia-asbr-tlv-error-cnt"];
                                 uint32 eia_asbr_sub_tlv_error_cnt = 93 [json_name = "eia-asbr-sub-tlv-error-cnt"];
                                 uint32 bad_ag_cnt = 94 [json_name = "bad-ag-cnt"];
                                 uint32 bad_fapm_cnt = 95 [json_name = "bad-fapm-cnt"];
                                 uint32 bad_faam_cnt = 96 [json_name = "bad-faam-cnt"];
                              }
                              ErrorData error_data = 24 [json_name = "error-data"];
                              message PrefixSids {
                                 message PrefixSid {
                                    uint32 algorithm = 1 [json_name = "algorithm"];
                                    enum Type {
                                       INVALID_ENUM_VALUE_Type = 0;
                                       Type_ABSOLUTE = 1;
                                       Type_INDEX = 2;
                                    };
                                    Type type = 2 [json_name = "type"];
                                    uint32 label = 3 [json_name = "label"];
                                    bool node_flag = 4 [json_name = "node-flag"];
                                 }
                                 repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                              }
                              PrefixSids prefix_sids = 25 [json_name = "prefix-sids"];
                              uint32 link_cost = 26 [json_name = "link-cost"];
                              bool dcn_opq_blk_enable = 27 [json_name = "dcn-opq-blk-enable"];
                              uint32 fallback_cost = 28 [json_name = "fallback-cost"];
                              uint32 fallback_bw = 29 [json_name = "fallback-bw"];
                              string source_sub_ip_address = 30 [json_name = "source-sub-ip-address"];
                              message FlushSourceTrace {
                                 bool block = 1 [json_name = "block"];
                              }
                              FlushSourceTrace flush_source_trace = 31 [json_name = "flush-source-trace"];
                              message MplsTePeers {
                                 message MplsTePeer {
                                    uint32 id = 1 [json_name = "id"];
                                    string router_id = 2 [json_name = "router-id"];
                                    string intf_ip = 3 [json_name = "intf-ip"];
                                    message Procs {
                                       message Proc {
                                          uint32 pid = 1 [json_name = "pid"];
                                          string aid = 2 [json_name = "aid"];
                                          uint32 cost = 3 [json_name = "cost"];
                                       }
                                       repeated Proc proc = 1 [json_name = "proc"];
                                    }
                                    Procs procs = 4 [json_name = "procs"];
                                 }
                                 repeated MplsTePeer mpls_te_peer = 1 [json_name = "mpls-te-peer"];
                              }
                              MplsTePeers mpls_te_peers = 32 [json_name = "mpls-te-peers"];
                              message MultiAreas {
                                 message MultiArea {
                                    string area_id = 1 [json_name = "area-id"];
                                    int32 transmit_delay = 2 [json_name = "transmit-delay"];
                                    bool mtu_enable = 3 [json_name = "mtu-enable"];
                                    uint32 cost = 4 [json_name = "cost"];
                                    bool smart_discover = 5 [json_name = "smart-discover"];
                                    bool ldp_sync_block = 6 [json_name = "ldp-sync-block"];
                                    bool ldp_sync_enable = 7 [json_name = "ldp-sync-enable"];
                                    uint32 fallback_cost = 8 [json_name = "fallback-cost"];
                                    uint32 fallback_bw = 9 [json_name = "fallback-bw"];
                                    message Frr {
                                       bool frr_disable = 1 [json_name = "frr-disable"];
                                       bool rlfa_disable = 2 [json_name = "rlfa-disable"];
                                       bool ti_lfa_disable = 3 [json_name = "ti-lfa-disable"];
                                    }
                                    Frr frr = 10 [json_name = "frr"];
                                    message Timer {
                                       int32 hello_interval = 1 [json_name = "hello-interval"];
                                       int32 dead_interval = 2 [json_name = "dead-interval"];
                                       int32 retransmit_interval = 3 [json_name = "retransmit-interval"];
                                    }
                                    Timer timer = 11 [json_name = "timer"];
                                    message LdpSync {
                                       uint32 hold_down_timer = 1 [json_name = "hold-down-timer"];
                                       message HoldCostMax_Timer {
                                          uint32 timer15 = 1 [json_name = "timer"];
                                       }
                                       message HoldCostMax_Infinite {
                                          bool infinite15 = 1 [json_name = "infinite"];
                                       }
                                       oneof HoldCostMax {
                                          HoldCostMax_Timer hold_cost_max_timer = 2 [json_name = "timer"];
                                          HoldCostMax_Infinite hold_cost_max_infinite = 3 [json_name = "infinite"];
                                       }
                                    }
                                    LdpSync ldp_sync = 12 [json_name = "ldp-sync"];
                                    message Bfd {
                                       bool block = 1 [json_name = "block"];
                                    }
                                    Bfd bfd = 13 [json_name = "bfd"];
                                    message Authentication {
                                       enum Mode {
                                          Mode_NONE = 0;
                                          Mode_KEYCHAIN = 1;
                                          Mode_HMACX_SHA256 = 2;
                                          Mode_NULL = 16;
                                          Mode_SIMPLE = 32;
                                          Mode_MD5 = 64;
                                          Mode_HMACX_MD5 = 128;
                                       };
                                       Mode mode = 1 [json_name = "mode"];
                                       string auth_text_simple = 2 [json_name = "auth-text-simple"];
                                       uint32 key_id = 3 [json_name = "key-id"];
                                       string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                                       string key_chain_name = 5 [json_name = "key-chain-name"];
                                    }
                                    Authentication authentication = 14 [json_name = "authentication"];
                                    message FilterLsaOut {
                                       message Type_Total {
                                          bool all_flag = 1 [json_name = "all-flag"];
                                       }
                                       message Type_Other {
                                          bool sum_flag = 1 [json_name = "sum-flag"];
                                          message SumFilter_Acl {
                                             string sum_name = 1 [json_name = "sum-name"];
                                          }
                                          oneof SumFilter {
                                             SumFilter_Acl sum_filter_acl = 2 [json_name = "acl"];
                                          }
                                          bool ase_flag = 4 [json_name = "ase-flag"];
                                          message AseFilter_Acl {
                                             string ase_name = 1 [json_name = "ase-name"];
                                          }
                                          oneof AseFilter {
                                             AseFilter_Acl ase_filter_acl = 5 [json_name = "acl"];
                                          }
                                          bool nssa_flag = 7 [json_name = "nssa-flag"];
                                          message NssaFilter_Acl {
                                             string nssa_name = 1 [json_name = "nssa-name"];
                                          }
                                          oneof NssaFilter {
                                             NssaFilter_Acl nssa_filter_acl = 8 [json_name = "acl"];
                                          }
                                       }
                                       oneof Type {
                                          Type_Total type_total = 1 [json_name = "total"];
                                          Type_Other type_other = 2 [json_name = "other"];
                                       }
                                    }
                                    FilterLsaOut filter_lsa_out = 15 [json_name = "filter-lsa-out"];
                                    message SuppressFlapping {
                                       message Peer {
                                          bool enable = 1 [json_name = "enable"];
                                          uint32 detect_interval = 2 [json_name = "detect-interval"];
                                          uint32 threshold = 3 [json_name = "threshold"];
                                          uint32 resume_interval = 4 [json_name = "resume-interval"];
                                          uint32 hold_down_interval = 5 [json_name = "hold-down-interval"];
                                          bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                                       }
                                       Peer peer = 1 [json_name = "peer"];
                                    }
                                    SuppressFlapping suppress_flapping = 16 [json_name = "suppress-flapping"];
                                    message Attribute {
                                       enum IntfState {
                                          IntfState_DOWN = 0;
                                          IntfState_WAITING = 1;
                                          IntfState_P2P = 2;
                                          IntfState_DR = 3;
                                          IntfState_BDR = 4;
                                          IntfState_DRX_OTHER = 5;
                                          IntfState_LOOPBACK = 6;
                                       };
                                       IntfState intf_state = 1 [json_name = "intf-state"];
                                       uint32 mtu = 2 [json_name = "mtu"];
                                       string intf_ip_addr = 3 [json_name = "intf-ip-addr"];
                                       enum GrState {
                                          GrState_NORMAL = 0;
                                          GrState_DOINGX_GR = 1;
                                          GrState_HELPER = 2;
                                          GrState_NONE = 3;
                                       };
                                       GrState gr_state = 4 [json_name = "gr-state"];
                                       int32 intf_cost = 5 [json_name = "intf-cost"];
                                       enum PrevIntfState {
                                          PrevIntfState_DOWN = 0;
                                          PrevIntfState_WAITING = 1;
                                          PrevIntfState_P2P = 2;
                                          PrevIntfState_DR = 3;
                                          PrevIntfState_BDR = 4;
                                          PrevIntfState_DRX_OTHER = 5;
                                          PrevIntfState_LOOPBACK = 6;
                                       };
                                       PrevIntfState prev_intf_state = 6 [json_name = "prev-intf-state"];
                                       enum PeerFlapStatus {
                                          PeerFlapStatus_DISABLE = 0;
                                          PeerFlapStatus_ENABLE = 1;
                                          PeerFlapStatus_HOLDX_MAXX_COST = 2;
                                          PeerFlapStatus_HOLDX_DOWN = 3;
                                       };
                                       PeerFlapStatus peer_flap_status = 7 [json_name = "peer-flap-status"];
                                       uint32 peer_flap_count = 8 [json_name = "peer-flap-count"];
                                       uint32 peer_flap_threshold = 9 [json_name = "peer-flap-threshold"];
                                       string peer_flap_timer = 10 [json_name = "peer-flap-timer"];
                                       uint32 peer_flap_remain_timer = 11 [json_name = "peer-flap-remain-timer"];
                                       uint32 cur_intf_bw = 12 [json_name = "cur-intf-bw"];
                                       string peer_flap_time = 13 [json_name = "peer-flap-time"];
                                    }
                                    Attribute attribute = 17 [json_name = "attribute"];
                                    message NbrStatistics {
                                       message NbrStatistic {
                                          string router_id = 1 [json_name = "router-id"];
                                          string ip = 2 [json_name = "ip"];
                                          string intf_ip = 3 [json_name = "intf-ip"];
                                          enum GrState {
                                             GrState_NORMAL = 0;
                                             GrState_DOINGX_GR = 1;
                                             GrState_HELPER = 2;
                                             GrState_NONE = 3;
                                          };
                                          GrState gr_state = 4 [json_name = "gr-state"];
                                          enum State {
                                             State_DOWN = 0;
                                             State_INIT = 1;
                                             State_ATTEMPT = 2;
                                             State_X_2X_WAY = 3;
                                             State_EXSTART = 4;
                                             State_EXCHANGE = 5;
                                             State_LOADING = 6;
                                             State_FULL = 7;
                                          };
                                          State state = 5 [json_name = "state"];
                                          enum Mode {
                                             Mode_SLAVE = 0;
                                             Mode_MASTER = 1;
                                          };
                                          Mode mode = 6 [json_name = "mode"];
                                          int32 priority = 7 [json_name = "priority"];
                                          string dr = 8 [json_name = "dr"];
                                          string bdr = 9 [json_name = "bdr"];
                                          uint32 intf_mtu = 10 [json_name = "intf-mtu"];
                                          uint32 dead_due_timer = 11 [json_name = "dead-due-timer"];
                                          uint32 retran_intv = 12 [json_name = "retran-intv"];
                                          string up_time = 13 [json_name = "up-time"];
                                          string up_time_stamp = 14 [json_name = "up-time-stamp"];
                                          uint32 auth_sequence = 15 [json_name = "auth-sequence"];
                                          uint32 adj_sid = 16 [json_name = "adj-sid"];
                                          uint32 adj_weight = 17 [json_name = "adj-weight"];
                                          string adj_flags = 18 [json_name = "adj-flags"];
                                       }
                                       repeated NbrStatistic nbr_statistic = 1 [json_name = "nbr-statistic"];
                                    }
                                    NbrStatistics nbr_statistics = 18 [json_name = "nbr-statistics"];
                                    message RequestQueues {
                                       message RequestQueue {
                                          string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                          string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                          enum LsaType {
                                             INVALID_ENUM_VALUE_LsaType = 0;
                                             LsaType_ROUTER = 1;
                                             LsaType_NETWORK = 2;
                                             LsaType_SUMX_NET = 3;
                                             LsaType_SUMX_ASBR = 4;
                                             LsaType_EXTERNAL = 5;
                                             LsaType_LSAX_TYPEX_6 = 6;
                                             LsaType_NSSA = 7;
                                             LsaType_LSAX_TYPEX_8 = 8;
                                             LsaType_OPQX_LINK = 9;
                                             LsaType_OPQX_AREA = 10;
                                             LsaType_OPQX_AS = 11;
                                          };
                                          LsaType lsa_type = 3 [json_name = "lsa-type"];
                                          string link_state_id = 4 [json_name = "link-state-id"];
                                          string adv_router_id = 5 [json_name = "adv-router-id"];
                                          string router_id = 6 [json_name = "router-id"];
                                          string intf_ip_addr = 7 [json_name = "intf-ip-addr"];
                                          string lsa_sequence = 8 [json_name = "lsa-sequence"];
                                          uint32 lsa_age = 9 [json_name = "lsa-age"];
                                       }
                                       repeated RequestQueue request_queue = 1 [json_name = "request-queue"];
                                    }
                                    RequestQueues request_queues = 19 [json_name = "request-queues"];
                                    message RetransQueues {
                                       message RetransQueue {
                                          string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                          string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                          enum LsaType {
                                             INVALID_ENUM_VALUE_LsaType = 0;
                                             LsaType_ROUTER = 1;
                                             LsaType_NETWORK = 2;
                                             LsaType_SUMX_NET = 3;
                                             LsaType_SUMX_ASBR = 4;
                                             LsaType_EXTERNAL = 5;
                                             LsaType_LSAX_TYPEX_6 = 6;
                                             LsaType_NSSA = 7;
                                             LsaType_LSAX_TYPEX_8 = 8;
                                             LsaType_OPQX_LINK = 9;
                                             LsaType_OPQX_AREA = 10;
                                             LsaType_OPQX_AS = 11;
                                          };
                                          LsaType lsa_type = 3 [json_name = "lsa-type"];
                                          string link_state_id = 4 [json_name = "link-state-id"];
                                          string adv_router_id = 5 [json_name = "adv-router-id"];
                                          string intf_ip_addr = 6 [json_name = "intf-ip-addr"];
                                          string router_id = 7 [json_name = "router-id"];
                                          string lsa_sequence = 8 [json_name = "lsa-sequence"];
                                          uint32 lsa_age = 9 [json_name = "lsa-age"];
                                       }
                                       repeated RetransQueue retrans_queue = 1 [json_name = "retrans-queue"];
                                    }
                                    RetransQueues retrans_queues = 20 [json_name = "retrans-queues"];
                                    message LdpSyncStatistic {
                                       uint32 max_cost_interval = 1 [json_name = "max-cost-interval"];
                                       bool max_cost_infinite = 2 [json_name = "max-cost-infinite"];
                                       enum LdpState {
                                          LdpState_DOWN = 0;
                                          LdpState_UP1 = 1;
                                          LdpState_GR = 2;
                                          LdpState_UP3 = 3;
                                          LdpState_NONE = 4096;
                                       };
                                       LdpState ldp_state = 3 [json_name = "ldp-state"];
                                       enum SyncState {
                                          SyncState_INIT = 0;
                                          SyncState_HOLDX_DOWN = 1;
                                          SyncState_HOLDX_MAXX_COST = 2;
                                          SyncState_HOLDX_NORMALX_COST = 3;
                                          SyncState_SYNCX_ACHIEVED = 4;
                                       };
                                       SyncState sync_state = 4 [json_name = "sync-state"];
                                    }
                                    LdpSyncStatistic ldp_sync_statistic = 21 [json_name = "ldp-sync-statistic"];
                                    message BfdStatistics {
                                       message BfdStatistic {
                                          string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                          string local_ip = 2 [json_name = "local-ip"];
                                          string remote_ip = 3 [json_name = "remote-ip"];
                                          enum State {
                                             State_UNKNOWN = 0;
                                             State_DOWN = 1;
                                             State_UP = 2;
                                          };
                                          State state = 4 [json_name = "state"];
                                          enum DiagnosticInfo {
                                             DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 0;
                                             DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 1;
                                             DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 2;
                                             DiagnosticInfo_NEIGHBORX_ISX_DOWN = 3;
                                             DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 4;
                                             DiagnosticInfo_PATHX_DOWN = 5;
                                             DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 6;
                                             DiagnosticInfo_ADMINISTATORX_DOWN = 7;
                                             DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 8;
                                             DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 9;
                                             DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 10;
                                             DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 11;
                                          };
                                          DiagnosticInfo diagnostic_info = 5 [json_name = "diagnostic-info"];
                                          string local_router_id = 6 [json_name = "local-router-id"];
                                          uint32 rx_interval = 7 [json_name = "rx-interval"];
                                          uint32 tx_interval = 8 [json_name = "tx-interval"];
                                          uint32 multiplier = 9 [json_name = "multiplier"];
                                          uint32 local_dis = 10 [json_name = "local-dis"];
                                       }
                                       repeated BfdStatistic bfd_statistic = 1 [json_name = "bfd-statistic"];
                                    }
                                    BfdStatistics bfd_statistics = 22 [json_name = "bfd-statistics"];
                                    message ErrorData {
                                       string router_id = 1 [json_name = "router-id"];
                                       uint32 same_ip_pkt_cnt = 2 [json_name = "same-ip-pkt-cnt"];
                                       uint32 bad_pkt_cnt = 3 [json_name = "bad-pkt-cnt"];
                                       uint32 bad_ver_cnt = 4 [json_name = "bad-ver-cnt"];
                                       uint32 bad_chksum_pkt_cnt = 5 [json_name = "bad-chksum-pkt-cnt"];
                                       uint32 bad_area_pkt_cnt = 6 [json_name = "bad-area-pkt-cnt"];
                                       uint32 pkt_rcv_unnumber = 7 [json_name = "pkt-rcv-unnumber"];
                                       uint32 bad_virt_link_cnt = 8 [json_name = "bad-virt-link-cnt"];
                                       uint32 auth_type_fail_cnt = 9 [json_name = "auth-type-fail-cnt"];
                                       uint32 auth_key_fail_cnt = 10 [json_name = "auth-key-fail-cnt"];
                                       uint32 short_pkt_cnt = 11 [json_name = "short-pkt-cnt"];
                                       uint32 long_pkt_cnt = 12 [json_name = "long-pkt-cnt"];
                                       uint32 tx_err_cnt = 13 [json_name = "tx-err-cnt"];
                                       uint32 if_down_cnt = 14 [json_name = "if-down-cnt"];
                                       uint32 no_nbr = 15 [json_name = "no-nbr"];
                                       uint32 mis_netmask_cnt = 16 [json_name = "mis-netmask-cnt"];
                                       uint32 mis_hello_intl_cnt = 17 [json_name = "mis-hello-intl-cnt"];
                                       uint32 mis_dead_intl_cnt = 18 [json_name = "mis-dead-intl-cnt"];
                                       uint32 mis_ext_cnt = 19 [json_name = "mis-ext-cnt"];
                                       uint32 router_id_confusion = 20 [json_name = "router-id-confusion"];
                                       uint32 vlink_nbr_mis_cnt = 21 [json_name = "vlink-nbr-mis-cnt"];
                                       uint32 nbma_nbr_err_cnt = 22 [json_name = "nbma-nbr-err-cnt"];
                                       uint32 inval_src_hello_cnt = 23 [json_name = "inval-src-hello-cnt"];
                                       uint32 dd_nbr_low_cnt = 24 [json_name = "dd-nbr-low-cnt"];
                                       uint32 dd_rtrid_cnt = 25 [json_name = "dd-rtrid-cnt"];
                                       uint32 dd_opt_mismatch_cnt = 26 [json_name = "dd-opt-mismatch-cnt"];
                                       uint32 dd_unknwn_lsa_cnt = 27 [json_name = "dd-unknwn-lsa-cnt"];
                                       uint32 dd_mtu_mismatch_cnt = 28 [json_name = "dd-mtu-mismatch-cnt"];
                                       uint32 ack_nbr_low_cnt = 29 [json_name = "ack-nbr-low-cnt"];
                                       uint32 ack_bad_cnt = 30 [json_name = "ack-bad-cnt"];
                                       uint32 ack_duplicate_cnt = 31 [json_name = "ack-duplicate-cnt"];
                                       uint32 ack_unknwn_lsa_cnt = 32 [json_name = "ack-unknwn-lsa-cnt"];
                                       uint32 req_nbr_low_cnt = 33 [json_name = "req-nbr-low-cnt"];
                                       uint32 req_empty_cnt = 34 [json_name = "req-empty-cnt"];
                                       uint32 req_bad_cnt = 35 [json_name = "req-bad-cnt"];
                                       uint32 upd_nbr_low_cnt = 36 [json_name = "upd-nbr-low-cnt"];
                                       uint32 upd_self_newr_cnt = 37 [json_name = "upd-self-newr-cnt"];
                                       uint32 upd_min_lsarr_cnt = 38 [json_name = "upd-min-lsarr-cnt"];
                                       uint32 upd_ls_chksum_cnt = 39 [json_name = "upd-ls-chksum-cnt"];
                                       uint32 upd_les_recent_cnt = 40 [json_name = "upd-les-recent-cnt"];
                                       uint32 upd_unknw_lsa_cnt = 41 [json_name = "upd-unknw-lsa-cnt"];
                                       uint32 opq9_flood_cnt = 42 [json_name = "opq9-flood-cnt"];
                                       uint32 opq10_flood_cnt = 43 [json_name = "opq10-flood-cnt"];
                                       uint32 opq11_flood_cnt = 44 [json_name = "opq11-flood-cnt"];
                                       uint32 rxmt_dd_err_cnt = 45 [json_name = "rxmt-dd-err-cnt"];
                                       uint32 rxmt_req_err_cnt = 46 [json_name = "rxmt-req-err-cnt"];
                                       uint32 rxmt_upd_err_cnt = 47 [json_name = "rxmt-upd-err-cnt"];
                                       uint32 gr_invalid_lsa_cnt = 48 [json_name = "gr-invalid-lsa-cnt"];
                                       uint32 gr_invalid_pol_cnt = 49 [json_name = "gr-invalid-pol-cnt"];
                                       uint32 gr_invalid_prd_cnt = 50 [json_name = "gr-invalid-prd-cnt"];
                                       uint32 tunnel_cost_cnt = 51 [json_name = "tunnel-cost-cnt"];
                                       uint32 peer_net_type_cnt = 52 [json_name = "peer-net-type-cnt"];
                                       uint32 hello_dr_mis_cnt = 53 [json_name = "hello-dr-mis-cnt"];
                                       uint32 gen_ttl_err_cnt = 54 [json_name = "gen-ttl-err-cnt"];
                                       uint32 over_max_buffer_length_cnt = 55 [json_name = "over-max-buffer-length-cnt"];
                                       uint32 bad_net_segment_packet_cnt = 56 [json_name = "bad-net-segment-packet-cnt"];
                                       uint32 bad_routerid_packet_cnt = 57 [json_name = "bad-routerid-packet-cnt"];
                                       uint32 destination_ip_error_packet_cnt = 58 [json_name = "destination-ip-error-packet-cnt"];
                                       uint32 passive_intf_packet_cnt = 59 [json_name = "passive-intf-packet-cnt"];
                                       uint32 hello_nbr_reach_limit_cnt = 60 [json_name = "hello-nbr-reach-limit-cnt"];
                                       uint32 hello_hold_down_cnt = 61 [json_name = "hello-hold-down-cnt"];
                                       uint32 hello_memory_overload_cnt = 62 [json_name = "hello-memory-overload-cnt"];
                                       uint32 hello_cpu_overload_cnt = 63 [json_name = "hello-cpu-overload-cnt"];
                                       uint32 dd_nbr_reach_limit_cnt = 64 [json_name = "dd-nbr-reach-limit-cnt"];
                                       uint32 dd_cpu_overload_cnt = 65 [json_name = "dd-cpu-overload-cnt"];
                                       uint32 ri_lsa_tlv_error_cnt = 66 [json_name = "ri-lsa-tlv-error-cnt"];
                                       uint32 ri_lsa_sub_tlv_error_cnt = 67 [json_name = "ri-lsa-sub-tlv-error-cnt"];
                                       uint32 ext_prefix_lsa_tlv_error_cnt = 68 [json_name = "ext-prefix-lsa-tlv-error-cnt"];
                                       uint32 ext_prefix_lsa_sub_tlv_error_cnt = 69 [json_name = "ext-prefix-lsa-sub-tlv-error-cnt"];
                                       uint32 ext_link_lsa_tlv_error_cnt = 70 [json_name = "ext-link-lsa-tlv-error-cnt"];
                                       uint32 ext_link_lsa_sub_tlv_error_cnt = 71 [json_name = "ext-link-lsa-sub-tlv-error-cnt"];
                                       uint32 bad_sr_algo_cnt = 72 [json_name = "bad-sr-algo-cnt"];
                                       uint32 bad_sid_range_cnt = 73 [json_name = "bad-sid-range-cnt"];
                                       uint32 bad_sid_cnt = 74 [json_name = "bad-sid-cnt"];
                                       uint32 bad_adj_sid_cnt = 75 [json_name = "bad-adj-sid-cnt"];
                                       uint32 bad_prefix_sid_cnt = 76 [json_name = "bad-prefix-sid-cnt"];
                                       uint32 bad_ext_prefix_range_cnt = 77 [json_name = "bad-ext-prefix-range-cnt"];
                                       uint32 bad_lan_adj_sid_cnt = 78 [json_name = "bad-lan-adj-sid-cnt"];
                                       uint32 bad_ext_prefix_cnt = 79 [json_name = "bad-ext-prefix-cnt"];
                                       uint32 bad_ext_link_cnt = 80 [json_name = "bad-ext-link-cnt"];
                                       uint32 bad_fad_cnt = 81 [json_name = "bad-fad-cnt"];
                                       uint32 bad_exclude_ag_cnt = 82 [json_name = "bad-exclude-ag-cnt"];
                                       uint32 bad_include_any_ag_cnt = 83 [json_name = "bad-include-any-ag-cnt"];
                                       uint32 bad_include_all_ag_cnt = 84 [json_name = "bad-include-all-ag-cnt"];
                                       uint32 bad_fad_flags_cnt = 85 [json_name = "bad-fad-flags-cnt"];
                                       uint32 bad_alsa_cnt = 86 [json_name = "bad-alsa-cnt"];
                                       uint32 bad_te_metric_cnt = 87 [json_name = "bad-te-metric-cnt"];
                                       uint32 bad_link_delay_cnt = 88 [json_name = "bad-link-delay-cnt"];
                                       uint32 bad_extended_ag_cnt = 89 [json_name = "bad-extended-ag-cnt"];
                                       uint32 eia_asbr_lsa_error_cnt = 90 [json_name = "eia-asbr-lsa-error-cnt"];
                                       uint32 eia_asbr_tlv_error_cnt = 91 [json_name = "eia-asbr-tlv-error-cnt"];
                                       uint32 eia_asbr_sub_tlv_error_cnt = 92 [json_name = "eia-asbr-sub-tlv-error-cnt"];
                                       uint32 bad_ag_cnt = 93 [json_name = "bad-ag-cnt"];
                                       uint32 bad_fapm_cnt = 94 [json_name = "bad-fapm-cnt"];
                                       uint32 bad_faam_cnt = 95 [json_name = "bad-faam-cnt"];
                                    }
                                    ErrorData error_data = 23 [json_name = "error-data"];
                                 }
                                 repeated MultiArea multi_area = 1 [json_name = "multi-area"];
                              }
                              MultiAreas multi_areas = 33 [json_name = "multi-areas"];
                              message Srlgs {
                                 message Srlg {
                                    uint32 group_id = 1 [json_name = "group-id"];
                                 }
                                 repeated Srlg srlg = 1 [json_name = "srlg"];
                              }
                              Srlgs srlgs = 34 [json_name = "srlgs"];
                              message LdpSyncStatistic {
                                 uint32 max_cost_interval = 1 [json_name = "max-cost-interval"];
                                 bool max_cost_infinite = 2 [json_name = "max-cost-infinite"];
                                 enum LdpState {
                                    LdpState_DOWN = 0;
                                    LdpState_UP1 = 1;
                                    LdpState_GR = 2;
                                    LdpState_UP3 = 3;
                                    LdpState_NONE = 4096;
                                 };
                                 LdpState ldp_state = 3 [json_name = "ldp-state"];
                                 enum SyncState {
                                    SyncState_INIT = 0;
                                    SyncState_HOLDX_DOWN = 1;
                                    SyncState_HOLDX_MAXX_COST = 2;
                                    SyncState_HOLDX_NORMALX_COST = 3;
                                    SyncState_SYNCX_ACHIEVED = 4;
                                 };
                                 SyncState sync_state = 4 [json_name = "sync-state"];
                              }
                              LdpSyncStatistic ldp_sync_statistic = 35 [json_name = "ldp-sync-statistic"];
                              message BfdStatistics {
                                 message BfdStatistic {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string local_ip = 2 [json_name = "local-ip"];
                                    string remote_ip = 3 [json_name = "remote-ip"];
                                    enum State {
                                       State_UNKNOWN = 0;
                                       State_DOWN = 1;
                                       State_UP = 2;
                                    };
                                    State state = 4 [json_name = "state"];
                                    enum DiagnosticInfo {
                                       DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 0;
                                       DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 1;
                                       DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 2;
                                       DiagnosticInfo_NEIGHBORX_ISX_DOWN = 3;
                                       DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 4;
                                       DiagnosticInfo_PATHX_DOWN = 5;
                                       DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 6;
                                       DiagnosticInfo_ADMINISTATORX_DOWN = 7;
                                       DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 8;
                                       DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 9;
                                       DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 10;
                                       DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 11;
                                    };
                                    DiagnosticInfo diagnostic_info = 5 [json_name = "diagnostic-info"];
                                    string local_router_id = 6 [json_name = "local-router-id"];
                                    uint32 rx_interval = 7 [json_name = "rx-interval"];
                                    uint32 tx_interval = 8 [json_name = "tx-interval"];
                                    uint32 multiplier = 9 [json_name = "multiplier"];
                                    uint32 local_dis = 10 [json_name = "local-dis"];
                                 }
                                 repeated BfdStatistic bfd_statistic = 1 [json_name = "bfd-statistic"];
                              }
                              BfdStatistics bfd_statistics = 36 [json_name = "bfd-statistics"];
                              message RequestQueues {
                                 message RequestQueue {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                    enum LsaType {
                                       INVALID_ENUM_VALUE_LsaType = 0;
                                       LsaType_ROUTER = 1;
                                       LsaType_NETWORK = 2;
                                       LsaType_SUMX_NET = 3;
                                       LsaType_SUMX_ASBR = 4;
                                       LsaType_EXTERNAL = 5;
                                       LsaType_LSAX_TYPEX_6 = 6;
                                       LsaType_NSSA = 7;
                                       LsaType_LSAX_TYPEX_8 = 8;
                                       LsaType_OPQX_LINK = 9;
                                       LsaType_OPQX_AREA = 10;
                                       LsaType_OPQX_AS = 11;
                                    };
                                    LsaType lsa_type = 3 [json_name = "lsa-type"];
                                    string link_state_id = 4 [json_name = "link-state-id"];
                                    string adv_router_id = 5 [json_name = "adv-router-id"];
                                    string router_id = 6 [json_name = "router-id"];
                                    string intf_ip_addr = 7 [json_name = "intf-ip-addr"];
                                    string lsa_sequence = 8 [json_name = "lsa-sequence"];
                                    uint32 lsa_age = 9 [json_name = "lsa-age"];
                                 }
                                 repeated RequestQueue request_queue = 1 [json_name = "request-queue"];
                              }
                              RequestQueues request_queues = 37 [json_name = "request-queues"];
                              message RetransQueues {
                                 message RetransQueue {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                    enum LsaType {
                                       INVALID_ENUM_VALUE_LsaType = 0;
                                       LsaType_ROUTER = 1;
                                       LsaType_NETWORK = 2;
                                       LsaType_SUMX_NET = 3;
                                       LsaType_SUMX_ASBR = 4;
                                       LsaType_EXTERNAL = 5;
                                       LsaType_LSAX_TYPEX_6 = 6;
                                       LsaType_NSSA = 7;
                                       LsaType_LSAX_TYPEX_8 = 8;
                                       LsaType_OPQX_LINK = 9;
                                       LsaType_OPQX_AREA = 10;
                                       LsaType_OPQX_AS = 11;
                                    };
                                    LsaType lsa_type = 3 [json_name = "lsa-type"];
                                    string link_state_id = 4 [json_name = "link-state-id"];
                                    string adv_router_id = 5 [json_name = "adv-router-id"];
                                    string router_id = 6 [json_name = "router-id"];
                                    string intf_ip_addr = 7 [json_name = "intf-ip-addr"];
                                    string lsa_sequence = 8 [json_name = "lsa-sequence"];
                                    uint32 lsa_age = 9 [json_name = "lsa-age"];
                                 }
                                 repeated RetransQueue retrans_queue = 1 [json_name = "retrans-queue"];
                              }
                              RetransQueues retrans_queues = 38 [json_name = "retrans-queues"];
                           }
                           repeated Interface interface = 1 [json_name = "interface"];
                        }
                        Interfaces interfaces = 8 [json_name = "interfaces"];
                        message DispData {
                           uint32 spf_schedule_times = 1 [json_name = "spf-schedule-times"];
                           uint32 interface_count = 2 [json_name = "interface-count"];
                           uint32 exchange_and_loading_nbr = 3 [json_name = "exchange-and-loading-nbr"];
                           enum RouterIdConflict {
                              RouterIdConflict_NORMAL = 0;
                              RouterIdConflict_WAITX_SELECT = 1;
                              RouterIdConflict_SELECTING = 2;
                              RouterIdConflict_CHANGED = 3;
                              RouterIdConflict_SUSPEND = 4;
                              RouterIdConflict_NONE = 5;
                           };
                           RouterIdConflict router_id_conflict = 4 [json_name = "router-id-conflict"];
                           enum ImportLimitStatus {
                              ImportLimitStatus_DISABLE = 0;
                              ImportLimitStatus_ENABLE = 1;
                              ImportLimitStatus_ALARM = 2;
                              ImportLimitStatus_OVERX_LIMIT = 3;
                           };
                           ImportLimitStatus import_limit_status = 5 [json_name = "import-limit-status"];
                           uint32 self_nssa_lsa_count = 6 [json_name = "self-nssa-lsa-count"];
                           enum NssaTransState {
                              NssaTransState_NONE = 0;
                              NssaTransState_ENABLED = 1;
                              NssaTransState_ELECTED = 2;
                              NssaTransState_DISABLED = 3;
                           };
                           NssaTransState nssa_trans_state = 7 [json_name = "nssa-trans-state"];
                           enum NssaTransRole {
                              NssaTransRole_NONE = 0;
                              NssaTransRole_ALWAYS = 1;
                              NssaTransRole_CANDIDATE = 2;
                           };
                           NssaTransRole nssa_trans_role = 8 [json_name = "nssa-trans-role"];
                           bool nssa_trans_stab_intv = 9 [json_name = "nssa-trans-stab-intv"];
                        }
                        DispData disp_data = 9 [json_name = "disp-data"];
                        message Stub {
                           bool backbone_peer_ignore = 1 [json_name = "backbone-peer-ignore"];
                           bool no_summary = 2 [json_name = "no-summary"];
                           int32 default_cost = 3 [json_name = "default-cost"];
                        }
                        Stub stub = 10 [json_name = "stub"];
                        message Nssa {
                           bool no_summary = 1 [json_name = "no-summary"];
                           bool translator_always = 2 [json_name = "translator-always"];
                           bool default_route_advertise = 3 [json_name = "default-route-advertise"];
                           bool backbone_peer_ignore = 4 [json_name = "backbone-peer-ignore"];
                           bool no_import_route = 5 [json_name = "no-import-route"];
                           bool set_n_bit = 6 [json_name = "set-n-bit"];
                           bool suppress_fa = 7 [json_name = "suppress-fa"];
                           bool zero_address_forwarding = 8 [json_name = "zero-address-forwarding"];
                           uint32 translator_interval = 9 [json_name = "translator-interval"];
                           int32 default_cost = 10 [json_name = "default-cost"];
                        }
                        Nssa nssa = 11 [json_name = "nssa"];
                        message AbrSummaryPrefixs {
                           message AbrSummaryPrefix {
                              string prefix = 1 [json_name = "prefix"];
                              string network_mask = 2 [json_name = "network-mask"];
                              uint32 hold_max_cost = 3 [json_name = "hold-max-cost"];
                              bool advertise = 4 [json_name = "advertise"];
                              bool generate_null_zero = 5 [json_name = "generate-null-zero"];
                              message Cost_CostValue {
                                 uint32 cost_value = 1 [json_name = "cost-value"];
                              }
                              message Cost_CostInheritMin {
                                 bool cost_inherit_min = 1 [json_name = "cost-inherit-min"];
                              }
                              oneof Cost {
                                 Cost_CostValue cost_cost_value = 6 [json_name = "cost-value"];
                                 Cost_CostInheritMin cost_cost_inherit_min = 7 [json_name = "cost-inherit-min"];
                              }
                           }
                           repeated AbrSummaryPrefix abr_summary_prefix = 1 [json_name = "abr-summary-prefix"];
                        }
                        AbrSummaryPrefixs abr_summary_prefixs = 12 [json_name = "abr-summary-prefixs"];
                        message VlinkPeers {
                           message VlinkPeer {
                              string router_id = 1 [json_name = "router-id"];
                              uint32 retransmit_interval = 2 [json_name = "retransmit-interval"];
                              bool smart_discover = 3 [json_name = "smart-discover"];
                              message Timer {
                                 uint32 hello_interval = 1 [json_name = "hello-interval"];
                                 uint32 dead_interval = 2 [json_name = "dead-interval"];
                                 uint32 trans_delay_interval = 3 [json_name = "trans-delay-interval"];
                              }
                              Timer timer = 4 [json_name = "timer"];
                              message Authentication {
                                 enum Mode {
                                    Mode_NONE = 0;
                                    Mode_KEYCHAIN = 1;
                                    Mode_HMACX_SHA256 = 2;
                                    Mode_NULL = 16;
                                    Mode_SIMPLE = 32;
                                    Mode_MD5 = 64;
                                    Mode_HMACX_MD5 = 128;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 string auth_text_simple = 2 [json_name = "auth-text-simple"];
                                 uint32 key_id = 3 [json_name = "key-id"];
                                 string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                                 string key_chain_name = 5 [json_name = "key-chain-name"];
                              }
                              Authentication authentication = 5 [json_name = "authentication"];
                              message Attribute {
                                 enum IntfState {
                                    IntfState_DOWN = 0;
                                    IntfState_WAITING = 1;
                                    IntfState_P2P = 2;
                                    IntfState_DR = 3;
                                    IntfState_BDR = 4;
                                    IntfState_DRX_OTHER = 5;
                                    IntfState_LOOPBACK = 6;
                                 };
                                 IntfState intf_state = 1 [json_name = "intf-state"];
                                 string intf_ip_addr = 2 [json_name = "intf-ip-addr"];
                                 enum GrState {
                                    GrState_NORMAL = 0;
                                    GrState_DOINGX_GR = 1;
                                    GrState_HELPER = 2;
                                    GrState_NONE = 3;
                                 };
                                 GrState gr_state = 3 [json_name = "gr-state"];
                                 uint32 intf_cost = 4 [json_name = "intf-cost"];
                                 enum IntfType {
                                    INVALID_ENUM_VALUE_IntfType = 0;
                                    IntfType_BROADCAST = 1;
                                    IntfType_NBMA = 2;
                                    IntfType_P2P = 3;
                                    IntfType_VIRTUAL = 4;
                                    IntfType_P2MP = 5;
                                 };
                                 IntfType intf_type = 5 [json_name = "intf-type"];
                                 uint32 if_events = 6 [json_name = "if-events"];
                                 enum IfStatus {
                                    IfStatus_NONE = 0;
                                    IfStatus_ACTIVE = 1;
                                    IfStatus_NOTX_INX_SERVICE = 2;
                                    IfStatus_NOTX_READY = 3;
                                    IfStatus_CREATEX_ANDX_GO = 4;
                                    IfStatus_CREATEX_ANDX_WAIT = 5;
                                    IfStatus_DESTROY = 6;
                                 };
                                 IfStatus if_status = 7 [json_name = "if-status"];
                                 uint32 if_lsa_count = 8 [json_name = "if-lsa-count"];
                                 uint32 if_lsa_checksum = 9 [json_name = "if-lsa-checksum"];
                              }
                              Attribute attribute = 6 [json_name = "attribute"];
                           }
                           repeated VlinkPeer vlink_peer = 1 [json_name = "vlink-peer"];
                        }
                        VlinkPeers vlink_peers = 13 [json_name = "vlink-peers"];
                        message ShamLinks {
                           message ShamLink {
                              string src_addr = 1 [json_name = "src-addr"];
                              string dest_addr = 2 [json_name = "dest-addr"];
                              uint32 cost = 3 [json_name = "cost"];
                              uint32 retransmit_interval = 4 [json_name = "retransmit-interval"];
                              bool smart_discover = 5 [json_name = "smart-discover"];
                              message Timer {
                                 uint32 hello_interval = 1 [json_name = "hello-interval"];
                                 uint32 dead_interval = 2 [json_name = "dead-interval"];
                                 uint32 trans_delay_interval = 3 [json_name = "trans-delay-interval"];
                              }
                              Timer timer = 6 [json_name = "timer"];
                              message Authentication {
                                 enum Mode {
                                    Mode_NONE = 0;
                                    Mode_KEYCHAIN = 1;
                                    Mode_HMACX_SHA256 = 2;
                                    Mode_NULL = 16;
                                    Mode_SIMPLE = 32;
                                    Mode_MD5 = 64;
                                    Mode_HMACX_MD5 = 128;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 string auth_text_simple = 2 [json_name = "auth-text-simple"];
                                 uint32 key_id = 3 [json_name = "key-id"];
                                 string auth_text_md5 = 4 [json_name = "auth-text-md5"];
                                 string key_chain_name = 5 [json_name = "key-chain-name"];
                              }
                              Authentication authentication = 7 [json_name = "authentication"];
                              message Attribute {
                                 enum State {
                                    State_DOWN = 0;
                                    State_WAITING = 1;
                                    State_P2P = 2;
                                    State_DR = 3;
                                    State_BDR = 4;
                                    State_DRX_OTHER = 5;
                                    State_LOOPBACK = 6;
                                 };
                                 State state = 1 [json_name = "state"];
                                 enum GrState {
                                    GrState_NORMAL = 0;
                                    GrState_DOINGX_GR = 1;
                                    GrState_HELPER = 2;
                                    GrState_NONE = 3;
                                 };
                                 GrState gr_state = 2 [json_name = "gr-state"];
                                 enum NbrState {
                                    NbrState_DOWN = 0;
                                    NbrState_INIT = 1;
                                    NbrState_ATTEMPT = 2;
                                    NbrState_X_2X_WAY = 3;
                                    NbrState_EXSTART = 4;
                                    NbrState_EXCHANGE = 5;
                                    NbrState_LOADING = 6;
                                    NbrState_FULL = 7;
                                 };
                                 NbrState nbr_state = 3 [json_name = "nbr-state"];
                                 string nbr_id = 4 [json_name = "nbr-id"];
                              }
                              Attribute attribute = 8 [json_name = "attribute"];
                           }
                           repeated ShamLink sham_link = 1 [json_name = "sham-link"];
                        }
                        ShamLinks sham_links = 14 [json_name = "sham-links"];
                        message Filters {
                           message Filter {
                              enum Mode {
                                 Mode_FILTERX_IMPORT = 0;
                                 Mode_FILTERX_EXPORT = 1;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              bool include_abr_summary = 2 [json_name = "include-abr-summary"];
                              message PolicyType_BasicAcl {
                                 string name_or_num = 1 [json_name = "name-or-num"];
                              }
                              message PolicyType_IpPrefix {
                                 string ip_prefix = 1 [json_name = "ip-prefix"];
                              }
                              message PolicyType_RoutePolicy {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_RouteFilter {
                                 string route_filter = 1 [json_name = "route-filter"];
                              }
                              oneof PolicyType {
                                 PolicyType_BasicAcl policy_type_basic_acl = 3 [json_name = "basic-acl"];
                                 PolicyType_IpPrefix policy_type_ip_prefix = 4 [json_name = "ip-prefix"];
                                 PolicyType_RoutePolicy policy_type_route_policy = 5 [json_name = "route-policy"];
                                 PolicyType_RouteFilter policy_type_route_filter = 6 [json_name = "route-filter"];
                              }
                           }
                           repeated Filter filter = 1 [json_name = "filter"];
                        }
                        Filters filters = 15 [json_name = "filters"];
                        message FadBindings {
                           message FadBinding {
                              uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
                              bool enable = 2 [json_name = "enable"];
                           }
                           repeated FadBinding fad_binding = 1 [json_name = "fad-binding"];
                        }
                        FadBindings fad_bindings = 16 [json_name = "fad-bindings"];
                     }
                     repeated Area area = 1 [json_name = "area"];
                  }
                  Areas areas = 37 [json_name = "areas"];
                  message DispData {
                     enum BorderRouter {
                        BorderRouter_NORMAL = 0;
                        BorderRouter_AREA = 1;
                        BorderRouter_AS = 2;
                        BorderRouter_AREAX_AS = 3;
                        BorderRouter_NSSA = 4;
                        BorderRouter_AREAX_NSSA = 5;
                        BorderRouter_ASX_NSSA = 6;
                        BorderRouter_AREAX_ASX_NSSA = 7;
                     };
                     BorderRouter border_router = 1 [json_name = "border-router"];
                     enum IetfMode {
                        IetfMode_NONX_STANDARD = 0;
                        IetfMode_STANDARD = 1;
                     };
                     IetfMode ietf_mode = 2 [json_name = "ietf-mode"];
                     uint32 spf_count = 3 [json_name = "spf-count"];
                     uint32 area_count = 4 [json_name = "area-count"];
                     uint32 nssa_count = 5 [json_name = "nssa-count"];
                     uint32 exchange_and_loading_nbr = 6 [json_name = "exchange-and-loading-nbr"];
                     enum LsdbOverflowStatus {
                        LsdbOverflowStatus_NORMAL = 0;
                        LsdbOverflowStatus_APPROACH = 1;
                        LsdbOverflowStatus_OVERFLOW = 2;
                     };
                     LsdbOverflowStatus lsdb_overflow_status = 7 [json_name = "lsdb-overflow-status"];
                     uint32 non_default_ase_lsa_count = 8 [json_name = "non-default-ase-lsa-count"];
                     uint32 lsdb_overflow_remain = 9 [json_name = "lsdb-overflow-remain"];
                     enum ImportLimitStatus {
                        ImportLimitStatus_DISABLE = 0;
                        ImportLimitStatus_ENABLE = 1;
                        ImportLimitStatus_ALARM = 2;
                        ImportLimitStatus_OVERX_LIMIT = 3;
                     };
                     ImportLimitStatus import_limit_status = 10 [json_name = "import-limit-status"];
                     uint32 self_ase_lsa_count = 11 [json_name = "self-ase-lsa-count"];
                     string effective_router_id = 12 [json_name = "effective-router-id"];
                  }
                  DispData disp_data = 38 [json_name = "disp-data"];
                  message AbrAsbrStatistics {
                     message AbrAsbrStatistic {
                        uint32 if_index = 1 [json_name = "if-index"];
                        string nexthop_ip = 2 [json_name = "nexthop-ip"];
                        string area_id = 3 [json_name = "area-id"];
                        string destination_id = 4 [json_name = "destination-id"];
                        string if_name = 5 [json_name = "if-name"];
                        string router_id = 6 [json_name = "router-id"];
                        enum PathType {
                           PathType_UNKNOW = 0;
                           PathType_INTRAX_AREA = 1;
                           PathType_TRANSIT = 2;
                           PathType_STUB = 3;
                           PathType_INTERX_AREA = 4;
                           PathType_DIRECT = 5;
                           PathType_TYPE1 = 6;
                           PathType_TYPE2 = 7;
                        };
                        PathType path_type = 7 [json_name = "path-type"];
                        uint32 cost = 8 [json_name = "cost"];
                        enum RouterType {
                           RouterType_NORMAL = 0;
                           RouterType_ASBR = 2;
                           RouterType_ABR = 4;
                           RouterType_ABRX_ASBR = 6;
                        };
                        RouterType router_type = 9 [json_name = "router-type"];
                     }
                     repeated AbrAsbrStatistic abr_asbr_statistic = 1 [json_name = "abr-asbr-statistic"];
                  }
                  AbrAsbrStatistics abr_asbr_statistics = 39 [json_name = "abr-asbr-statistics"];
                  message NexthopParas {
                     message NexthopPara {
                        string addr = 1 [json_name = "addr"];
                        enum RtSourceType {
                           RtSourceType_LOCAL = 0;
                           RtSourceType_UNKNOW = 1;
                        };
                        RtSourceType rt_source_type = 2 [json_name = "rt-source-type"];
                        string if_addr = 3 [json_name = "if-addr"];
                        string if_name = 4 [json_name = "if-name"];
                        uint32 referece_count = 5 [json_name = "referece-count"];
                        string router_id = 6 [json_name = "router-id"];
                     }
                     repeated NexthopPara nexthop_para = 1 [json_name = "nexthop-para"];
                  }
                  NexthopParas nexthop_paras = 40 [json_name = "nexthop-paras"];
                  message LsdbStatistics {
                     message LsdbStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        enum LsaType {
                           INVALID_ENUM_VALUE_LsaType = 0;
                           LsaType_ROUTER = 1;
                           LsaType_NETWORK = 2;
                           LsaType_SUMX_NET = 3;
                           LsaType_SUMX_ASBR = 4;
                           LsaType_EXTERNAL = 5;
                           LsaType_LSAX_TYPEX_6 = 6;
                           LsaType_NSSA = 7;
                           LsaType_LSAX_TYPEX_8 = 8;
                           LsaType_OPQX_LINK = 9;
                           LsaType_OPQX_AREA = 10;
                           LsaType_OPQX_AS = 11;
                        };
                        LsaType lsa_type = 2 [json_name = "lsa-type"];
                        string link_state_id = 3 [json_name = "link-state-id"];
                        string adv_router_id = 4 [json_name = "adv-router-id"];
                        int32 lsa_age = 5 [json_name = "lsa-age"];
                        string lsa_sequence_num = 6 [json_name = "lsa-sequence-num"];
                        string check_sum = 7 [json_name = "check-sum"];
                        uint32 lsa_length = 8 [json_name = "lsa-length"];
                        enum Options {
                           Options_NONE = 0;
                           Options_E = 2;
                           Options_MC = 4;
                           Options_MCX_E = 6;
                           Options_NP = 8;
                           Options_NPX_E = 10;
                           Options_NPX_MC = 12;
                           Options_NPX_MCX_E = 14;
                           Options_EA = 16;
                           Options_EAX_E = 18;
                           Options_EAX_MC = 20;
                           Options_EAX_MCX_E = 22;
                           Options_EAX_NP = 24;
                           Options_EAX_NPX_E = 26;
                           Options_EAX_NPX_MC = 28;
                           Options_EAX_NPX_MCX_E = 30;
                           Options_DC = 32;
                           Options_DCX_E = 34;
                           Options_DCX_MC = 36;
                           Options_DCX_MCX_E = 38;
                           Options_DCX_NP = 40;
                           Options_DCX_NPX_E = 42;
                           Options_DCX_NPX_MC = 44;
                           Options_DCX_NPX_MCX_E = 46;
                           Options_DCX_EA = 48;
                           Options_DCX_EAX_E = 50;
                           Options_DCX_EAX_MC = 52;
                           Options_DCX_EAX_MCX_E = 54;
                           Options_DCX_EAX_NP = 56;
                           Options_DCX_EAX_NPX_E = 58;
                           Options_DCX_EAX_NPX_MC = 60;
                           Options_DCX_EAX_NPX_MCX_E = 62;
                           Options_DN = 128;
                           Options_EX_DN = 130;
                           Options_NPX_DN = 136;
                        };
                        Options options = 9 [json_name = "options"];
                        enum OptionFlag {
                           OptionFlag_NULL = 0;
                           OptionFlag_ABR = 256;
                           OptionFlag_ASBR = 512;
                           OptionFlag_ASBRX_ABR = 768;
                           OptionFlag_VIRTUAL = 1024;
                           OptionFlag_ABRX_VIRTUAL = 1280;
                           OptionFlag_ASBRX_VIRTUAL = 1536;
                           OptionFlag_ASBRX_ABRX_VIRTUAL = 1792;
                           OptionFlag_NT = 4096;
                           OptionFlag_ABRX_NT = 4352;
                           OptionFlag_ASBRX_NT = 4608;
                           OptionFlag_ASBRX_ABRX_NT = 4864;
                           OptionFlag_VIRTUALX_NT = 5120;
                           OptionFlag_ABRX_VIRTUALX_NT = 5376;
                           OptionFlag_ASBRX_VIRTUALX_NT = 5632;
                           OptionFlag_ASBRX_ABRX_VIRTUALX_NT = 5888;
                        };
                        OptionFlag option_flag = 10 [json_name = "option-flag"];
                        uint32 link_count = 11 [json_name = "link-count"];
                        string network_mask = 12 [json_name = "network-mask"];
                        string host_name = 13 [json_name = "host-name"];
                        message Lsabodys {
                           message Lsabody {
                              string link_id = 1 [json_name = "link-id"];
                              string link_data = 2 [json_name = "link-data"];
                              enum LinkType {
                                 LinkType_NONE = 0;
                                 LinkType_P2P = 1;
                                 LinkType_TRANSX_NET = 2;
                                 LinkType_STUBX_NET = 3;
                                 LinkType_VIRTUAL = 4;
                              };
                              LinkType link_type = 3 [json_name = "link-type"];
                              string attach_router = 4 [json_name = "attach-router"];
                              string forward_ip = 5 [json_name = "forward-ip"];
                              uint32 tos_id = 6 [json_name = "tos-id"];
                              uint32 tos_metric = 7 [json_name = "tos-metric"];
                              uint32 route_tag = 8 [json_name = "route-tag"];
                              uint32 opaque_type = 9 [json_name = "opaque-type"];
                              uint32 opaque_id = 10 [json_name = "opaque-id"];
                              uint32 ext_metric_type = 11 [json_name = "ext-metric-type"];
                              message RemoteIntfAddr {
                                 string remote_address = 1 [json_name = "remote-address"];
                              }
                              RemoteIntfAddr remote_intf_addr = 12 [json_name = "remote-intf-addr"];
                              message LocalRemoteIntfId {
                                 uint32 local_intf_id = 1 [json_name = "local-intf-id"];
                                 uint32 remote_intf_id = 2 [json_name = "remote-intf-id"];
                              }
                              LocalRemoteIntfId local_remote_intf_id = 13 [json_name = "local-remote-intf-id"];
                           }
                           repeated Lsabody lsabody = 1 [json_name = "lsabody"];
                        }
                        Lsabodys lsabodys = 14 [json_name = "lsabodys"];
                        message Rilsa {
                           string host_name = 1 [json_name = "host-name"];
                           string algorithm = 2 [json_name = "algorithm"];
                           message SrlbTlvs {
                              message SrlbTlv {
                                 uint32 label = 1 [json_name = "label"];
                                 uint32 range = 2 [json_name = "range"];
                              }
                              repeated SrlbTlv srlb_tlv = 1 [json_name = "srlb-tlv"];
                           }
                           SrlbTlvs srlb_tlvs = 3 [json_name = "srlb-tlvs"];
                           message FlexAlgoDefinitions {
                              message FlexAlgoDefinition {
                                 uint32 algorithm = 1 [json_name = "algorithm"];
                                 enum MetricType {
                                    MetricType_IGP = 0;
                                    MetricType_LINKX_DELAY = 1;
                                    MetricType_TE = 2;
                                 };
                                 MetricType metric_type = 2 [json_name = "metric-type"];
                                 uint32 calc_type = 3 [json_name = "calc-type"];
                                 uint32 priority = 4 [json_name = "priority"];
                                 string flags = 5 [json_name = "flags"];
                                 string exclude_admin_group = 6 [json_name = "exclude-admin-group"];
                                 string include_any_admin_group = 7 [json_name = "include-any-admin-group"];
                                 string include_all_admin_group = 8 [json_name = "include-all-admin-group"];
                              }
                              repeated FlexAlgoDefinition flex_algo_definition = 1 [json_name = "flex-algo-definition"];
                           }
                           FlexAlgoDefinitions flex_algo_definitions = 4 [json_name = "flex-algo-definitions"];
                        }
                        Rilsa rilsa = 15 [json_name = "rilsa"];
                        message PrefixLsas {
                           message PrefixLsa {
                              string prefix = 1 [json_name = "prefix"];
                              enum RouteType {
                                 RouteType_UNSPECIFIED = 0;
                                 RouteType_INTRAX_AREA = 1;
                                 RouteType_INTERX_AREA = 3;
                                 RouteType_ASE = 5;
                                 RouteType_NSSA = 7;
                              };
                              RouteType route_type = 2 [json_name = "route-type"];
                              string af = 3 [json_name = "af"];
                              string flags = 4 [json_name = "flags"];
                              message RedistributeList {
                                 string sub_tlv_flags = 1 [json_name = "sub-tlv-flags"];
                                 string router_ids = 2 [json_name = "router-ids"];
                              }
                              RedistributeList redistribute_list = 5 [json_name = "redistribute-list"];
                              message PrefixSids {
                                 message PrefixSid {
                                    uint32 index = 1 [json_name = "index"];
                                    string sub_tlv_flags = 2 [json_name = "sub-tlv-flags"];
                                    uint32 mt_id = 3 [json_name = "mt-id"];
                                    enum Algorithm {
                                       Algorithm_SPF = 0;
                                       Algorithm_STRICTX_SPF = 1;
                                    };
                                    Algorithm algorithm = 4 [json_name = "algorithm"];
                                 }
                                 repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                              }
                              PrefixSids prefix_sids = 6 [json_name = "prefix-sids"];
                              message FlexAlgoPrefixMetrics {
                                 message FlexAlgoPrefixMetric {
                                    uint32 algorithm = 1 [json_name = "algorithm"];
                                    string flags = 2 [json_name = "flags"];
                                    uint32 metric = 3 [json_name = "metric"];
                                 }
                                 repeated FlexAlgoPrefixMetric flex_algo_prefix_metric = 1 [json_name = "flex-algo-prefix-metric"];
                              }
                              FlexAlgoPrefixMetrics flex_algo_prefix_metrics = 7 [json_name = "flex-algo-prefix-metrics"];
                           }
                           repeated PrefixLsa prefix_lsa = 1 [json_name = "prefix-lsa"];
                        }
                        PrefixLsas prefix_lsas = 16 [json_name = "prefix-lsas"];
                        message LinkLsas {
                           message LinkLsa {
                              string link_id = 1 [json_name = "link-id"];
                              enum LinkType {
                                 LinkType_NONE = 0;
                                 LinkType_P2P = 1;
                                 LinkType_TRANSX_NET = 2;
                                 LinkType_STUBX_NET = 3;
                                 LinkType_VIRTUAL = 4;
                              };
                              LinkType link_type = 2 [json_name = "link-type"];
                              string link_data = 3 [json_name = "link-data"];
                              message AdjSids {
                                 message AdjSid {
                                    uint32 label = 1 [json_name = "label"];
                                    string sub_tlv_flags = 2 [json_name = "sub-tlv-flags"];
                                    uint32 mt_id = 3 [json_name = "mt-id"];
                                    uint32 weight = 4 [json_name = "weight"];
                                 }
                                 repeated AdjSid adj_sid = 1 [json_name = "adj-sid"];
                              }
                              AdjSids adj_sids = 4 [json_name = "adj-sids"];
                              message LanAdjSids {
                                 message LanAdjSid {
                                    string neighbor_id = 1 [json_name = "neighbor-id"];
                                    string sub_tlv_flags = 2 [json_name = "sub-tlv-flags"];
                                    uint32 mt_id = 3 [json_name = "mt-id"];
                                    uint32 weight = 4 [json_name = "weight"];
                                    uint32 label = 5 [json_name = "label"];
                                 }
                                 repeated LanAdjSid lan_adj_sid = 1 [json_name = "lan-adj-sid"];
                              }
                              LanAdjSids lan_adj_sids = 5 [json_name = "lan-adj-sids"];
                              message ApplicationSpecificLinkAttribute {
                                 uint32 sa_length = 1 [json_name = "sa-length"];
                                 uint32 uda_length = 2 [json_name = "uda-length"];
                                 string standard_application = 3 [json_name = "standard-application"];
                                 message TeMetricInfo {
                                    uint32 te_metric = 1 [json_name = "te-metric"];
                                 }
                                 TeMetricInfo te_metric_info = 4 [json_name = "te-metric-info"];
                                 message ExtendedAdminGroupInfo {
                                    string extended_admin_group = 1 [json_name = "extended-admin-group"];
                                 }
                                 ExtendedAdminGroupInfo extended_admin_group_info = 5 [json_name = "extended-admin-group-info"];
                                 message LinkDelayInfo {
                                    uint32 anomalous_bit = 1 [json_name = "anomalous-bit"];
                                    uint32 min_delay = 2 [json_name = "min-delay"];
                                    uint32 max_delay = 3 [json_name = "max-delay"];
                                 }
                                 LinkDelayInfo link_delay_info = 6 [json_name = "link-delay-info"];
                                 message AdminGroupInfo {
                                    string admin_group = 1 [json_name = "admin-group"];
                                 }
                                 AdminGroupInfo admin_group_info = 7 [json_name = "admin-group-info"];
                              }
                              ApplicationSpecificLinkAttribute application_specific_link_attribute = 6 [json_name = "application-specific-link-attribute"];
                           }
                           repeated LinkLsa link_lsa = 1 [json_name = "link-lsa"];
                        }
                        LinkLsas link_lsas = 17 [json_name = "link-lsas"];
                     }
                     repeated LsdbStatistic lsdb_statistic = 1 [json_name = "lsdb-statistic"];
                  }
                  LsdbStatistics lsdb_statistics = 41 [json_name = "lsdb-statistics"];
                  message LsdbBriefs {
                     message LsdbBrief {
                        string area_id = 1 [json_name = "area-id"];
                        string router_id = 2 [json_name = "router-id"];
                        uint32 stub = 3 [json_name = "stub"];
                        uint32 router = 4 [json_name = "router"];
                        uint32 network = 5 [json_name = "network"];
                        uint32 summary_net = 6 [json_name = "summary-net"];
                        uint32 asbr = 7 [json_name = "asbr"];
                        uint32 type7 = 8 [json_name = "type7"];
                        uint32 opaque9 = 9 [json_name = "opaque9"];
                        uint32 opaque10 = 10 [json_name = "opaque10"];
                        uint32 sub_total = 11 [json_name = "sub-total"];
                     }
                     repeated LsdbBrief lsdb_brief = 1 [json_name = "lsdb-brief"];
                  }
                  LsdbBriefs lsdb_briefs = 42 [json_name = "lsdb-briefs"];
                  message LastDownNbrs {
                     message LastDownNbr {
                        uint32 list_index = 1 [json_name = "list-index"];
                        string area_id = 2 [json_name = "area-id"];
                        string ip_addr = 3 [json_name = "ip-addr"];
                        string router_id = 4 [json_name = "router-id"];
                        string if_name = 5 [json_name = "if-name"];
                        enum ImmediateReason {
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_INACTIVITY = 0;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_LLX_DOWN = 1;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_KILLX_NEIGHBOR = 2;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_1X_WAYHELLOX_RECEIVED = 3;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_ADJOK = 4;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_SEQUENCEX_NUMX_MISMATCH = 5;
                           ImmediateReason_NEIGHBORX_DOWNX_DUEX_TOX_BADX_LSX_REQ = 6;
                        };
                        ImmediateReason immediate_reason = 6 [json_name = "immediate-reason"];
                        enum PrimaryReason {
                           PrimaryReason_DOWNX_REASONX_INITX_VALUE = 0;
                           PrimaryReason_HELLOX_NOTX_SEEN = 1;
                           PrimaryReason_INTERFACEX_PARAMETERX_MISMATCH = 2;
                           PrimaryReason_LOGICALX_INTERFACEX_STATEX_CHANGE = 3;
                           PrimaryReason_LINKX_FAULTX_ORX_INTERFACEX_CONFIGURATIONX_CHANGE = 4;
                           PrimaryReason_OSPFX_PROCESSX_RESET = 5;
                           PrimaryReason_AREAX_RESET = 6;
                           PrimaryReason_AREAX_OPTIONX_MISX_MATCH = 7;
                           PrimaryReason_VLINKX_PEERX_NOTX_REACHABLE = 8;
                           PrimaryReason_SHAMX_LINKX_UNREACHABLE = 9;
                           PrimaryReason_UNDOX_NETWORKX_COMMAND = 10;
                           PrimaryReason_UNDOX_NBMAX_PEER = 11;
                           PrimaryReason_PASSIVEX_INTERFACEX_DOWN = 12;
                           PrimaryReason_OPAQUEX_CAPABILITYX_ENABLED = 13;
                           PrimaryReason_OPAQUEX_CAPABILITYX_DISABLED = 14;
                           PrimaryReason_VIRTUALX_INTERFACEX_STATEX_CHANGE = 15;
                           PrimaryReason_BFDX_SESSIONX_DOWN = 16;
                           PrimaryReason_RETRANSMISSIONX_LIMITX_EXCEED = 17;
                           PrimaryReason_X_1X_WAYHELLOX_RECEIVED = 18;
                           PrimaryReason_ROUTERX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 19;
                           PrimaryReason_NEIGHBORX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_DROTHER = 20;
                           PrimaryReason_NSSAX_AREAX_CONFIGUREX_CHANGE = 21;
                           PrimaryReason_STUBX_AREAX_CONFIGUREX_CHANGE = 22;
                           PrimaryReason_RECEIVEDX_INVALIDX_DDX_PACKET = 23;
                           PrimaryReason_NOTX_RECEIVEDX_DDX_DURINGX_ROUTERX_DEADX_INTERVAL = 24;
                           PrimaryReason_MX_IX_MSX_BITX_ORX_SEQUENCEX_NUMX_INCORRECT = 25;
                           PrimaryReason_UNABLEX_OPAQUEX_CAPABILITYX_FINDX_9X_10X_11X_TYPEX_LSA = 26;
                           PrimaryReason_NOTX_NSSAX_FINDX_7X_TYPEX_LSAX_INX_SUMMARYX_LIST = 27;
                           PrimaryReason_LSX_REQUESTX_PACKETX_UNKNOWNX_REASON = 28;
                           PrimaryReason_NSSAX_ORX_STUBX_AREAX_FINDX_5X_11X_TYPEX_LSA = 29;
                           PrimaryReason_LSX_REQUESTX_PACKETX_REQUESTX_LSAX_ISX_NOTX_INX_THEX_LSDB = 30;
                           PrimaryReason_LSX_REQUESTX_PACKETX_EXISTX_SAMEX_LSAX_INX_THEX_LSDB = 31;
                           PrimaryReason_LSX_REQUESTX_PACKETX_EXISTX_NEWERX_LSAX_INX_THEX_LSDB = 32;
                           PrimaryReason_NEIGHBORX_STATEX_WASX_NOTX_FULLX_WHENX_LSDBX_OVERFLOW = 33;
                           PrimaryReason_FILTERX_LSAX_CONFIGURATIONX_CHANGE = 34;
                           PrimaryReason_ACLX_CHANGEDX_FORX_FILTERX_LSA = 35;
                           PrimaryReason_RESETX_OSPFX_PEER = 36;
                           PrimaryReason_INTERFACEX_RESET = 37;
                           PrimaryReason_UNDOX_OSPFX_INTERFACEX_UNDOX_AREAX_UNDOX_NETWORK = 38;
                           PrimaryReason_UNDOX_OSPFX_AREA = 39;
                           PrimaryReason_CPUX_OVERLOAD = 40;
                           PrimaryReason_INTERFACEX_STATEX_CHANGEDX_TOX_STANDBY = 41;
                           PrimaryReason_UNDOX_ROUTERX_ID = 42;
                           PrimaryReason_NEIGHBORX_ROUTERX_IDX_CHANGEDX_ORX_IPX_CONFLICTED = 43;
                           PrimaryReason_COMPONENTX_ISX_INX_IMPLEMENTX_STAT = 44;
                           PrimaryReason_SEQEUNCEX_NUMBERX_MISMATCHED = 45;
                           PrimaryReason_IX_BITX_INCORRECTX_INX_DD = 46;
                           PrimaryReason_MSX_BITX_INCORRECTX_INX_DD = 47;
                           PrimaryReason_OPTIONSX_INCORRECTX_INX_DD = 48;
                           PrimaryReason_RECEIVEDX_MTUX_MISMATCHEDX_DDX_PACKET = 49;
                           PrimaryReason_OSPFX_PROCESSX_SHUTDOWN = 51;
                           PrimaryReason_OSPFX_MAXX_NBRX_INX_ADJ = 52;
                           PrimaryReason_OSPFX_DCNX_INTFX_PARAX_MISX_MATCH = 53;
                           PrimaryReason_OSPFX_GRX_MASTERX_FORCEX_DOWN = 54;
                           PrimaryReason_DDX_RETRANSX_TIMESX_UPTOX_LIMIT = 55;
                           PrimaryReason_OSPFX_OVERFLOW = 56;
                           PrimaryReason_UNDOX_OSPFX_INTERFACEX_UNDOX_AREA = 100;
                        };
                        PrimaryReason primary_reason = 7 [json_name = "primary-reason"];
                        string time = 8 [json_name = "time"];
                        string local_router_id = 9 [json_name = "local-router-id"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_NORMAL = 1;
                           Type_VLINK = 2;
                           Type_SLINK = 3;
                        };
                        Type type = 10 [json_name = "type"];
                     }
                     repeated LastDownNbr last_down_nbr = 1 [json_name = "last-down-nbr"];
                  }
                  LastDownNbrs last_down_nbrs = 43 [json_name = "last-down-nbrs"];
                  message DispGracefulRestart {
                     enum Capability {
                        Capability_DISABLED = 0;
                        Capability_ENABLED = 1;
                     };
                     Capability capability = 1 [json_name = "capability"];
                     enum HelpRole {
                        HelpRole_NONE = 0;
                        HelpRole_PLANNEDX_STRICTX_LSAX_CHECK = 1;
                        HelpRole_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 2;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 3;
                        HelpRole_IGNOREX_EXTERNALX_LSAX_CHECK = 4;
                        HelpRole_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 5;
                        HelpRole_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 6;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 7;
                        HelpRole_NEVER = 8;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_NONX_IETF = 35;
                     };
                     HelpRole help_role = 2 [json_name = "help-role"];
                     enum CurrentState {
                        CurrentState_NORMAL = 0;
                        CurrentState_HELPER = 1;
                        CurrentState_NULL = 2;
                        CurrentState_NONE = 3;
                     };
                     CurrentState current_state = 3 [json_name = "current-state"];
                     enum OnHelper {
                        OnHelper_NONE = 0;
                        OnHelper_SUCCESSFULX_EXIT = 1;
                        OnHelper_GRACEX_PERIODX_EXPIRED = 2;
                        OnHelper_RECEIVEDX_FLUSHEDX_GRACEX_LSA = 3;
                        OnHelper_FLOODINGX_CHANGEDX_LSA = 4;
                        OnHelper_POLICYX_CHECKX_FAILEDX_FORX_RECEIVEDX_GRACEX_LSA = 6;
                        OnHelper_NEIGHBORX_RESET = 7;
                        OnHelper_INTERFACEX_STATUSX_CHANGED = 8;
                        OnHelper_GRACEFULX_RESTARTX_UNCONFIGUREDX_ATX_PROCESSX_LEVEL = 9;
                        OnHelper_GRACEX_LSAX_NOTX_FOUND = 10;
                     };
                     OnHelper on_helper = 4 [json_name = "on-helper"];
                     uint32 nbr_num = 5 [json_name = "nbr-num"];
                     message GrNeighborInfos {
                        message GrNeighborInfo {
                           string area_id = 1 [json_name = "area-id"];
                           string intf_ip_addr = 2 [json_name = "intf-ip-addr"];
                           string nbr_router_id = 3 [json_name = "nbr-router-id"];
                           string nbr_ip_addr = 4 [json_name = "nbr-ip-addr"];
                           string if_name = 5 [json_name = "if-name"];
                           enum GrNbrState {
                              GrNbrState_NORMAL = 0;
                              GrNbrState_RESTARTER = 1;
                           };
                           GrNbrState gr_nbr_state = 6 [json_name = "gr-nbr-state"];
                           uint32 gr_helper_period = 7 [json_name = "gr-helper-period"];
                           uint32 gr_helper_age = 8 [json_name = "gr-helper-age"];
                           enum LastExitReason {
                              LastExitReason_NONE = 0;
                              LastExitReason_SUCCESS = 1;
                              LastExitReason_GRACEX_PERIODX_EXPIRE = 2;
                              LastExitReason_RECVX_FLUSHX_GRACEX_LSA = 3;
                              LastExitReason_RECVX_CHANGEX_LSA = 4;
                              LastExitReason_RECVX_TWOX_GRACEX_LSA = 5;
                              LastExitReason_RECVX_ONEX_WAYX_HELLO = 6;
                              LastExitReason_POLICYX_CHECKX_FAIL = 7;
                              LastExitReason_NBRX_RESET = 8;
                              LastExitReason_IFX_CHANGE = 9;
                              LastExitReason_PROCX_CHANGE = 10;
                           };
                           LastExitReason last_exit_reason = 9 [json_name = "last-exit-reason"];
                        }
                        repeated GrNeighborInfo gr_neighbor_info = 1 [json_name = "gr-neighbor-info"];
                     }
                     GrNeighborInfos gr_neighbor_infos = 6 [json_name = "gr-neighbor-infos"];
                     message GrVlinkNeighborInfos {
                        message GrVlinkNeighborInfo {
                           string area_id = 1 [json_name = "area-id"];
                           string nbr_router_id = 2 [json_name = "nbr-router-id"];
                           string intf_ip_addr = 3 [json_name = "intf-ip-addr"];
                           string if_name = 4 [json_name = "if-name"];
                           string nbr_ip_addr = 5 [json_name = "nbr-ip-addr"];
                           enum GrNbrState {
                              GrNbrState_NORMAL = 0;
                              GrNbrState_RESTARTER = 1;
                           };
                           GrNbrState gr_nbr_state = 6 [json_name = "gr-nbr-state"];
                           enum VlinkIfState {
                              VlinkIfState_DOWN = 0;
                              VlinkIfState_WAITING = 1;
                              VlinkIfState_P2P = 2;
                              VlinkIfState_DR = 3;
                              VlinkIfState_BDR = 4;
                              VlinkIfState_DROTHER = 5;
                              VlinkIfState_LOOPBACK = 6;
                           };
                           VlinkIfState vlink_if_state = 7 [json_name = "vlink-if-state"];
                           enum VlinkNbrState {
                              VlinkNbrState_DOWN = 0;
                              VlinkNbrState_ATTEMPT = 1;
                              VlinkNbrState_INIT = 2;
                              VlinkNbrState_X_2X_WAY = 3;
                              VlinkNbrState_EXSTART = 4;
                              VlinkNbrState_EXCHANGE = 5;
                              VlinkNbrState_LOADING = 6;
                              VlinkNbrState_FULL = 7;
                           };
                           VlinkNbrState vlink_nbr_state = 8 [json_name = "vlink-nbr-state"];
                           enum LastExitReason {
                              LastExitReason_NONE = 0;
                              LastExitReason_SUCCESS = 1;
                              LastExitReason_GRACEX_PERIODX_EXPIRE = 2;
                              LastExitReason_RECVX_FLUSHX_GRACEX_LSA = 3;
                              LastExitReason_RECVX_CHANGEX_LSA = 4;
                              LastExitReason_RECVX_TWOX_GRACEX_LSA = 5;
                              LastExitReason_RECVX_ONEX_WAYX_HELLO = 6;
                              LastExitReason_POLICYX_CHECKX_FAIL = 7;
                              LastExitReason_NBRX_RESET = 8;
                              LastExitReason_IFX_CHANGE = 9;
                              LastExitReason_PROCX_CHANGE = 10;
                           };
                           LastExitReason last_exit_reason = 9 [json_name = "last-exit-reason"];
                        }
                        repeated GrVlinkNeighborInfo gr_vlink_neighbor_info = 1 [json_name = "gr-vlink-neighbor-info"];
                     }
                     GrVlinkNeighborInfos gr_vlink_neighbor_infos = 7 [json_name = "gr-vlink-neighbor-infos"];
                  }
                  DispGracefulRestart disp_graceful_restart = 44 [json_name = "disp-graceful-restart"];
                  message ErrorProcessData {
                     string router_id = 1 [json_name = "router-id"];
                     uint32 same_ip_pkt_cnt = 2 [json_name = "same-ip-pkt-cnt"];
                     uint32 bad_pkt_cnt = 3 [json_name = "bad-pkt-cnt"];
                     uint32 bad_ver_cnt = 4 [json_name = "bad-ver-cnt"];
                     uint32 bad_chk_sum_pkt_cnt = 5 [json_name = "bad-chk-sum-pkt-cnt"];
                     uint32 bad_area_pkt_cnt = 6 [json_name = "bad-area-pkt-cnt"];
                     uint32 pkt_rcv_unnumber = 7 [json_name = "pkt-rcv-unnumber"];
                     uint32 bad_virt_link_cnt = 8 [json_name = "bad-virt-link-cnt"];
                     uint32 auth_type_fail_cnt = 9 [json_name = "auth-type-fail-cnt"];
                     uint32 auth_key_fail_cnt = 10 [json_name = "auth-key-fail-cnt"];
                     uint32 short_pkt_cnt = 11 [json_name = "short-pkt-cnt"];
                     uint32 long_pkt_cnt = 12 [json_name = "long-pkt-cnt"];
                     uint32 tx_err_cnt = 13 [json_name = "tx-err-cnt"];
                     uint32 if_down_cnt = 14 [json_name = "if-down-cnt"];
                     uint32 no_nbr = 15 [json_name = "no-nbr"];
                     uint32 mis_netmask_cnt = 16 [json_name = "mis-netmask-cnt"];
                     uint32 mis_hello_intl_cnt = 17 [json_name = "mis-hello-intl-cnt"];
                     uint32 mis_dead_intl_cnt = 18 [json_name = "mis-dead-intl-cnt"];
                     uint32 mis_ext_rou_cap_cnt = 19 [json_name = "mis-ext-rou-cap-cnt"];
                     uint32 router_id_confusion = 20 [json_name = "router-id-confusion"];
                     uint32 vlink_nbr_mis_cnt = 21 [json_name = "vlink-nbr-mis-cnt"];
                     uint32 nbma_nbr_err_cnt = 22 [json_name = "nbma-nbr-err-cnt"];
                     uint32 inval_src_helo_cnt = 23 [json_name = "inval-src-helo-cnt"];
                     uint32 dd_nbr_low_cnt = 24 [json_name = "dd-nbr-low-cnt"];
                     uint32 dd_router_id_cnt = 25 [json_name = "dd-router-id-cnt"];
                     uint32 dd_opt_mismatch_cnt = 26 [json_name = "dd-opt-mismatch-cnt"];
                     uint32 dd_unknwn_lsa_cnt = 27 [json_name = "dd-unknwn-lsa-cnt"];
                     uint32 dd_mtu_mismatch_cnt = 28 [json_name = "dd-mtu-mismatch-cnt"];
                     uint32 ack_nbr_low_cnt = 29 [json_name = "ack-nbr-low-cnt"];
                     uint32 ack_bad_cnt = 30 [json_name = "ack-bad-cnt"];
                     uint32 ack_duplicate_cnt = 31 [json_name = "ack-duplicate-cnt"];
                     uint32 ack_unknown_lsa_cnt = 32 [json_name = "ack-unknown-lsa-cnt"];
                     uint32 req_nbr_low_cnt = 33 [json_name = "req-nbr-low-cnt"];
                     uint32 req_empty_cnt = 34 [json_name = "req-empty-cnt"];
                     uint32 req_bad_cnt = 35 [json_name = "req-bad-cnt"];
                     uint32 upd_nbr_low_cnt = 36 [json_name = "upd-nbr-low-cnt"];
                     uint32 upd_self_newr_cnt = 37 [json_name = "upd-self-newr-cnt"];
                     uint32 upd_min_lsa_lsarr_cnt = 38 [json_name = "upd-min-lsa-lsarr-cnt"];
                     uint32 upd_ls_checksum_cnt = 39 [json_name = "upd-ls-checksum-cnt"];
                     uint32 upd_les_recent_cnt = 40 [json_name = "upd-les-recent-cnt"];
                     uint32 upd_unknow_lsa_cnt = 41 [json_name = "upd-unknow-lsa-cnt"];
                     uint32 opq9_flood_cnt = 42 [json_name = "opq9-flood-cnt"];
                     uint32 opq10_flood_cnt = 43 [json_name = "opq10-flood-cnt"];
                     uint32 opq11_flood_cnt = 44 [json_name = "opq11-flood-cnt"];
                     uint32 unknown_tlv = 45 [json_name = "unknown-tlv"];
                     uint32 rxmt_dd_err_cnt = 46 [json_name = "rxmt-dd-err-cnt"];
                     uint32 rxmt_req_err_cnt = 47 [json_name = "rxmt-req-err-cnt"];
                     uint32 rxmt_upd_err_cnt = 48 [json_name = "rxmt-upd-err-cnt"];
                     uint32 gr_invalid_lsa_cnt = 49 [json_name = "gr-invalid-lsa-cnt"];
                     uint32 gr_invalid_pol_cnt = 50 [json_name = "gr-invalid-pol-cnt"];
                     uint32 gr_invalid_prd_cnt = 51 [json_name = "gr-invalid-prd-cnt"];
                     uint32 tunnel_cost_cnt = 52 [json_name = "tunnel-cost-cnt"];
                     uint32 peer_net_type_cnt = 53 [json_name = "peer-net-type-cnt"];
                     uint32 hello_dr_mis_cnt = 54 [json_name = "hello-dr-mis-cnt"];
                     uint32 gen_ttl_err_cnt = 55 [json_name = "gen-ttl-err-cnt"];
                     uint32 over_max_buffer_length_cnt = 56 [json_name = "over-max-buffer-length-cnt"];
                     uint32 bad_net_segment_packet_cnt = 57 [json_name = "bad-net-segment-packet-cnt"];
                     uint32 bad_routerid_packet_cnt = 58 [json_name = "bad-routerid-packet-cnt"];
                     uint32 destination_ip_error_packet_cnt = 59 [json_name = "destination-ip-error-packet-cnt"];
                     uint32 passive_intf_packet_cnt = 60 [json_name = "passive-intf-packet-cnt"];
                     uint32 hello_nbr_reach_limit_cnt = 61 [json_name = "hello-nbr-reach-limit-cnt"];
                     uint32 hello_hold_down_cnt = 62 [json_name = "hello-hold-down-cnt"];
                     uint32 hello_memory_overload_cnt = 63 [json_name = "hello-memory-overload-cnt"];
                     uint32 hello_cpu_overload_cnt = 64 [json_name = "hello-cpu-overload-cnt"];
                     uint32 dd_nbr_reach_limit_cnt = 65 [json_name = "dd-nbr-reach-limit-cnt"];
                     uint32 dd_cpu_overload_cnt = 66 [json_name = "dd-cpu-overload-cnt"];
                     uint32 dd_mem_overload_cnt = 67 [json_name = "dd-mem-overload-cnt"];
                     uint32 ri_lsa_tlv_error_cnt = 68 [json_name = "ri-lsa-tlv-error-cnt"];
                     uint32 ri_lsa_sub_tlv_error_cnt = 69 [json_name = "ri-lsa-sub-tlv-error-cnt"];
                     uint32 ext_prefix_lsa_tlv_error_cnt = 70 [json_name = "ext-prefix-lsa-tlv-error-cnt"];
                     uint32 ext_prefix_lsa_sub_tlv_error_cnt = 71 [json_name = "ext-prefix-lsa-sub-tlv-error-cnt"];
                     uint32 ext_link_lsa_tlv_error_cnt = 72 [json_name = "ext-link-lsa-tlv-error-cnt"];
                     uint32 ext_link_lsa_sub_tlv_error_cnt = 73 [json_name = "ext-link-lsa-sub-tlv-error-cnt"];
                     uint32 bad_sr_algo_cnt = 74 [json_name = "bad-sr-algo-cnt"];
                     uint32 bad_sid_range_cnt = 75 [json_name = "bad-sid-range-cnt"];
                     uint32 bad_sid_cnt = 76 [json_name = "bad-sid-cnt"];
                     uint32 bad_adj_sid_cnt = 77 [json_name = "bad-adj-sid-cnt"];
                     uint32 bad_prefix_sid_cnt = 78 [json_name = "bad-prefix-sid-cnt"];
                     uint32 bad_ext_prefix_range_cnt = 79 [json_name = "bad-ext-prefix-range-cnt"];
                     uint32 bad_lan_adj_sid_cnt = 80 [json_name = "bad-lan-adj-sid-cnt"];
                     uint32 bad_ext_prefix_cnt = 81 [json_name = "bad-ext-prefix-cnt"];
                     uint32 bad_ext_link_cnt = 82 [json_name = "bad-ext-link-cnt"];
                     uint32 bad_fad_cnt = 83 [json_name = "bad-fad-cnt"];
                     uint32 bad_exclude_ag_cnt = 84 [json_name = "bad-exclude-ag-cnt"];
                     uint32 bad_include_any_ag_cnt = 85 [json_name = "bad-include-any-ag-cnt"];
                     uint32 bad_include_all_ag_cnt = 86 [json_name = "bad-include-all-ag-cnt"];
                     uint32 bad_fad_flags_cnt = 87 [json_name = "bad-fad-flags-cnt"];
                     uint32 bad_alsa_cnt = 88 [json_name = "bad-alsa-cnt"];
                     uint32 bad_te_metric_cnt = 89 [json_name = "bad-te-metric-cnt"];
                     uint32 bad_link_delay_cnt = 90 [json_name = "bad-link-delay-cnt"];
                     uint32 bad_extended_ag_cnt = 91 [json_name = "bad-extended-ag-cnt"];
                     uint32 eia_asbr_lsa_error_cnt = 92 [json_name = "eia-asbr-lsa-error-cnt"];
                     uint32 eia_asbr_tlv_error_cnt = 93 [json_name = "eia-asbr-tlv-error-cnt"];
                     uint32 eia_asbr_sub_tlv_error_cnt = 94 [json_name = "eia-asbr-sub-tlv-error-cnt"];
                     uint32 bad_ag_cnt = 95 [json_name = "bad-ag-cnt"];
                     uint32 bad_fapm_cnt = 96 [json_name = "bad-fapm-cnt"];
                     uint32 bad_faam_cnt = 97 [json_name = "bad-faam-cnt"];
                  }
                  ErrorProcessData error_process_data = 45 [json_name = "error-process-data"];
                  message AsLsdbBrief {
                     string router_id = 1 [json_name = "router-id"];
                     uint32 opaque11 = 2 [json_name = "opaque11"];
                     uint32 ase = 3 [json_name = "ase"];
                     uint32 sub_total = 4 [json_name = "sub-total"];
                  }
                  AsLsdbBrief as_lsdb_brief = 46 [json_name = "as-lsdb-brief"];
                  message Neighbors {
                     message Neighbor {
                        string area_id = 1 [json_name = "area-id"];
                        string if_name = 2 [json_name = "if-name"];
                        string router_id = 3 [json_name = "router-id"];
                        string ip_addr = 4 [json_name = "ip-addr"];
                        bool multi_area_flag = 5 [json_name = "multi-area-flag"];
                        enum State {
                           State_DOWN = 0;
                           State_INIT = 1;
                           State_ATTEMPT = 2;
                           State_X_2X_WAY = 3;
                           State_EXSTART = 4;
                           State_EXCHANGE = 5;
                           State_LOADING = 6;
                           State_FULL = 7;
                        };
                        State state = 6 [json_name = "state"];
                        string host_name = 7 [json_name = "host-name"];
                        message Datas {
                           message Data {
                              string if_ip = 1 [json_name = "if-ip"];
                              enum GrState {
                                 GrState_NORMAL = 0;
                                 GrState_DOINGX_GR = 1;
                                 GrState_HELPER = 2;
                                 GrState_NONE = 3;
                              };
                              GrState gr_state = 2 [json_name = "gr-state"];
                              enum Mode {
                                 Mode_SLAVE = 0;
                                 Mode_MASTER = 1;
                              };
                              Mode mode = 3 [json_name = "mode"];
                              int32 priority = 4 [json_name = "priority"];
                              string dr = 5 [json_name = "dr"];
                              string bdr = 6 [json_name = "bdr"];
                              uint32 if_mtu = 7 [json_name = "if-mtu"];
                              uint32 dead_due_timer = 8 [json_name = "dead-due-timer"];
                              uint32 retran_interval = 9 [json_name = "retran-interval"];
                              string up_time = 10 [json_name = "up-time"];
                              string up_time_stamp = 11 [json_name = "up-time-stamp"];
                              uint32 auth_sequence = 12 [json_name = "auth-sequence"];
                           }
                           repeated Data data = 1 [json_name = "data"];
                        }
                        Datas datas = 8 [json_name = "datas"];
                     }
                     repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                  }
                  Neighbors neighbors = 47 [json_name = "neighbors"];
                  message Routings {
                     message Routing {
                        string dest_ip = 1 [json_name = "dest-ip"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        enum PathType {
                           PathType_UNKNOW = 0;
                           PathType_INTRAX_AREA = 1;
                           PathType_TRANSIT = 2;
                           PathType_STUB = 3;
                           PathType_INTERX_AREA = 4;
                           PathType_DIRECT = 5;
                           PathType_TYPE1 = 6;
                           PathType_TYPE2 = 7;
                        };
                        PathType path_type = 3 [json_name = "path-type"];
                        uint32 cost = 4 [json_name = "cost"];
                        enum PrefixPriority {
                           PrefixPriority_CRITICAL = 0;
                           PrefixPriority_HIGH = 1;
                           PrefixPriority_MEDIUM = 2;
                           PrefixPriority_LOW = 3;
                        };
                        PrefixPriority prefix_priority = 5 [json_name = "prefix-priority"];
                        message NexthopDatas {
                           message NexthopData {
                              string ip_addr = 1 [json_name = "ip-addr"];
                              string adv_router_id = 2 [json_name = "adv-router-id"];
                              string area_id = 3 [json_name = "area-id"];
                              string if_name = 4 [json_name = "if-name"];
                              string flags_disp = 5 [json_name = "flags-disp"];
                              uint32 tag = 6 [json_name = "tag"];
                              string bak_if_name = 7 [json_name = "bak-if-name"];
                              string bak_next_ip = 8 [json_name = "bak-next-ip"];
                              enum BackupType {
                                 INVALID_ENUM_VALUE_BackupType = 0;
                                 BackupType_LFAX_LINK = 1;
                                 BackupType_LFAX_LINKX_NODE = 2;
                                 BackupType_REMOTEX_LFAX_LINK = 5;
                                 BackupType_REMOTEX_LFAX_LINKX_NODE = 6;
                                 BackupType_TILFAX_LINK = 7;
                                 BackupType_TILFAX_LINKX_NODE = 8;
                              };
                              BackupType backup_type = 9 [json_name = "backup-type"];
                              string tunnel_dest = 10 [json_name = "tunnel-dest"];
                              enum TunnelType {
                                 INVALID_ENUM_VALUE_TunnelType = 0;
                                 TunnelType_LDP = 1;
                              };
                              TunnelType tunnel_type = 11 [json_name = "tunnel-type"];
                              string backup_label_stack = 12 [json_name = "backup-label-stack"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 6 [json_name = "nexthop-datas"];
                     }
                     repeated Routing routing = 1 [json_name = "routing"];
                  }
                  Routings routings = 48 [json_name = "routings"];
                  message SegmentRouting {
                     bool enable = 1 [json_name = "enable"];
                     message Binding {
                        bool receive = 1 [json_name = "receive"];
                        bool advertise = 2 [json_name = "advertise"];
                     }
                     Binding binding = 2 [json_name = "binding"];
                     message LspTrigger {
                        enum Type {
                           Type_IPX_PREFIX = 0;
                           Type_NONE = 1;
                           Type_HOST = 2;
                        };
                        Type type = 1 [json_name = "type"];
                        string ip_prefix = 2 [json_name = "ip-prefix"];
                     }
                     LspTrigger lsp_trigger = 3 [json_name = "lsp-trigger"];
                  }
                  SegmentRouting segment_routing = 49 [json_name = "segment-routing"];
                  message Srgbs {
                     message Srgb {
                        uint32 lower_bound = 1 [json_name = "lower-bound"];
                        uint32 upper_bound = 2 [json_name = "upper-bound"];
                     }
                     repeated Srgb srgb = 1 [json_name = "srgb"];
                  }
                  Srgbs srgbs = 50 [json_name = "srgbs"];
                  message SrAvoidMicroLoop {
                     bool enable = 1 [json_name = "enable"];
                     uint32 rib_update_delay = 2 [json_name = "rib-update-delay"];
                  }
                  SrAvoidMicroLoop sr_avoid_micro_loop = 51 [json_name = "sr-avoid-micro-loop"];
                  string description = 52 [json_name = "description"];
                  bool shutdown = 53 [json_name = "shutdown"];
                  bool sham_hello = 54 [json_name = "sham-hello"];
                  uint32 max_link_cost = 55 [json_name = "max-link-cost"];
                  uint32 maxage_lsa = 56 [json_name = "maxage-lsa"];
                  message HostName {
                     bool enable = 1 [json_name = "enable"];
                     string value = 2 [json_name = "value"];
                  }
                  HostName host_name = 57 [json_name = "host-name"];
                  message MetricDelay {
                     bool adv_enable = 1 [json_name = "adv-enable"];
                     uint32 suppress_timer = 2 [json_name = "suppress-timer"];
                     uint32 suppress_percent = 3 [json_name = "suppress-percent"];
                     uint32 suppress_absolute = 4 [json_name = "suppress-absolute"];
                  }
                  MetricDelay metric_delay = 58 [json_name = "metric-delay"];
                  message Bier {
                     bool enable = 1 [json_name = "enable"];
                  }
                  Bier bier = 59 [json_name = "bier"];
                  message AsbrSummaryPrefixs {
                     message AsbrSummaryPrefix {
                        string prefix = 1 [json_name = "prefix"];
                        string network_mask = 2 [json_name = "network-mask"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 distribute_delay = 4 [json_name = "distribute-delay"];
                        uint32 tag = 5 [json_name = "tag"];
                        bool advertise = 6 [json_name = "advertise"];
                        bool generate_null_zero = 7 [json_name = "generate-null-zero"];
                     }
                     repeated AsbrSummaryPrefix asbr_summary_prefix = 1 [json_name = "asbr-summary-prefix"];
                  }
                  AsbrSummaryPrefixs asbr_summary_prefixs = 60 [json_name = "asbr-summary-prefixs"];
                  message NexthopWeights {
                     message NexthopWeight {
                        string ip_address = 1 [json_name = "ip-address"];
                        uint32 weight = 2 [json_name = "weight"];
                     }
                     repeated NexthopWeight nexthop_weight = 1 [json_name = "nexthop-weight"];
                  }
                  NexthopWeights nexthop_weights = 61 [json_name = "nexthop-weights"];
                  message PrefixPrioritys {
                     message PrefixPriority {
                        enum Priority {
                           INVALID_ENUM_VALUE_Priority = 0;
                           Priority_CRITICAL = 1;
                           Priority_HIGH = 2;
                           Priority_MEDIUM = 3;
                           Priority_VERYX_LOW = 5;
                        };
                        Priority priority = 1 [json_name = "priority"];
                        string ip_prefix = 2 [json_name = "ip-prefix"];
                     }
                     repeated PrefixPriority prefix_priority = 1 [json_name = "prefix-priority"];
                  }
                  PrefixPrioritys prefix_prioritys = 62 [json_name = "prefix-prioritys"];
                  message LocalMtFilter {
                     message FilterPolicy_AclNameOrNum {
                        string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                     }
                     message FilterPolicy_IpPrefix {
                        string ip_prefix = 1 [json_name = "ip-prefix"];
                     }
                     message FilterPolicy_RoutePolicyName {
                        string route_policy_name = 1 [json_name = "route-policy-name"];
                     }
                     message FilterPolicy_RouteFilterName {
                        string route_filter_name = 1 [json_name = "route-filter-name"];
                     }
                     oneof FilterPolicy {
                        FilterPolicy_AclNameOrNum filter_policy_acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                        FilterPolicy_IpPrefix filter_policy_ip_prefix = 2 [json_name = "ip-prefix"];
                        FilterPolicy_RoutePolicyName filter_policy_route_policy_name = 3 [json_name = "route-policy-name"];
                        FilterPolicy_RouteFilterName filter_policy_route_filter_name = 4 [json_name = "route-filter-name"];
                     }
                  }
                  LocalMtFilter local_mt_filter = 63 [json_name = "local-mt-filter"];
                  message Peers {
                     message Peer {
                        string ip_address = 1 [json_name = "ip-address"];
                        uint32 priority = 2 [json_name = "priority"];
                     }
                     repeated Peer peer = 1 [json_name = "peer"];
                  }
                  Peers peers = 64 [json_name = "peers"];
                  message FilterLsaOuts {
                     message FilterLsaOut {
                        string peer_ip_addr = 1 [json_name = "peer-ip-addr"];
                        message Type_Total {
                           bool all_flag = 1 [json_name = "all-flag"];
                        }
                        message Type_Other {
                           bool sum_flag = 1 [json_name = "sum-flag"];
                           message SumFilter_SumAclName {
                              string sum_acl_name = 1 [json_name = "sum-acl-name"];
                           }
                           oneof SumFilter {
                              SumFilter_SumAclName sum_filter_sum_acl_name = 2 [json_name = "sum-acl-name"];
                           }
                           bool ase_flag = 4 [json_name = "ase-flag"];
                           message AseFilter_AseAclName {
                              string ase_acl_name = 1 [json_name = "ase-acl-name"];
                           }
                           oneof AseFilter {
                              AseFilter_AseAclName ase_filter_ase_acl_name = 5 [json_name = "ase-acl-name"];
                           }
                           bool nssa_flag = 7 [json_name = "nssa-flag"];
                           message NssaFilter_NssaAclName {
                              string nssa_acl_name = 1 [json_name = "nssa-acl-name"];
                           }
                           oneof NssaFilter {
                              NssaFilter_NssaAclName nssa_filter_nssa_acl_name = 8 [json_name = "nssa-acl-name"];
                           }
                        }
                        oneof Type {
                           Type_Total type_total = 2 [json_name = "total"];
                           Type_Other type_other = 3 [json_name = "other"];
                        }
                     }
                     repeated FilterLsaOut filter_lsa_out = 1 [json_name = "filter-lsa-out"];
                  }
                  FilterLsaOuts filter_lsa_outs = 65 [json_name = "filter-lsa-outs"];
                  message FilterImport {
                     bool secondary = 1 [json_name = "secondary"];
                     message PolicyType_BasicAcl {
                        string name_or_num = 1 [json_name = "name-or-num"];
                     }
                     message PolicyType_IpPrefix {
                        string ip_prefix = 1 [json_name = "ip-prefix"];
                     }
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_BasicAcl policy_type_basic_acl = 2 [json_name = "basic-acl"];
                        PolicyType_IpPrefix policy_type_ip_prefix = 3 [json_name = "ip-prefix"];
                        PolicyType_RoutePolicy policy_type_route_policy = 4 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 5 [json_name = "route-filter"];
                     }
                  }
                  FilterImport filter_import = 66 [json_name = "filter-import"];
                  message FilterExports {
                     message FilterExport {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_OSPF = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_DEFAULT = 9;
                           Protocol_UNR = 11;
                           Protocol_OPR = 14;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 protocol_id = 2 [json_name = "protocol-id"];
                        message PolicyType_BasicAcl {
                           string name_or_num = 1 [json_name = "name-or-num"];
                        }
                        message PolicyType_IpPrefix {
                           string ip_prefix = 1 [json_name = "ip-prefix"];
                        }
                        message PolicyType_RoutePolicy {
                           string route_policy = 1 [json_name = "route-policy"];
                        }
                        oneof PolicyType {
                           PolicyType_BasicAcl policy_type_basic_acl = 3 [json_name = "basic-acl"];
                           PolicyType_IpPrefix policy_type_ip_prefix = 4 [json_name = "ip-prefix"];
                           PolicyType_RoutePolicy policy_type_route_policy = 5 [json_name = "route-policy"];
                        }
                     }
                     repeated FilterExport filter_export = 1 [json_name = "filter-export"];
                  }
                  FilterExports filter_exports = 67 [json_name = "filter-exports"];
                  message SilentInterfaces {
                     message SilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated SilentInterface silent_interface = 1 [json_name = "silent-interface"];
                  }
                  SilentInterfaces silent_interfaces = 68 [json_name = "silent-interfaces"];
                  message UndoSilentInterfaces {
                     message UndoSilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated UndoSilentInterface undo_silent_interface = 1 [json_name = "undo-silent-interface"];
                  }
                  UndoSilentInterfaces undo_silent_interfaces = 69 [json_name = "undo-silent-interfaces"];
                  message CostBindings {
                     message CostBinding {
                        string router_id = 1 [json_name = "router-id"];
                        string if_name = 2 [json_name = "if-name"];
                     }
                     repeated CostBinding cost_binding = 1 [json_name = "cost-binding"];
                  }
                  CostBindings cost_bindings = 70 [json_name = "cost-bindings"];
                  message MigpRoutings {
                     message MigpRouting {
                        string dest_ip = 1 [json_name = "dest-ip"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        uint32 cost = 3 [json_name = "cost"];
                        enum PrefixPriority {
                           PrefixPriority_CRITICAL = 0;
                           PrefixPriority_HIGH = 1;
                           PrefixPriority_MEDIUM = 2;
                           PrefixPriority_LOW = 3;
                        };
                        PrefixPriority prefix_priority = 4 [json_name = "prefix-priority"];
                        enum PathType {
                           PathType_UNKNOW = 0;
                           PathType_INTRAX_AREA = 1;
                           PathType_TRANSIT = 2;
                           PathType_STUB = 3;
                           PathType_INTERX_AREA = 4;
                           PathType_DIRECT = 5;
                           PathType_TYPE1 = 6;
                           PathType_TYPE2 = 7;
                        };
                        PathType path_type = 5 [json_name = "path-type"];
                        message NexthopDatas {
                           message NexthopData {
                              string ip_addr = 1 [json_name = "ip-addr"];
                              string adv_router_id = 2 [json_name = "adv-router-id"];
                              string area_id = 3 [json_name = "area-id"];
                              string flags_disp = 4 [json_name = "flags-disp"];
                              uint32 tag = 5 [json_name = "tag"];
                              string if_name = 6 [json_name = "if-name"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 6 [json_name = "nexthop-datas"];
                     }
                     repeated MigpRouting migp_routing = 1 [json_name = "migp-routing"];
                  }
                  MigpRoutings migp_routings = 71 [json_name = "migp-routings"];
                  message VlinkNbrStatistics {
                     message VlinkNbrStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        string router_id = 2 [json_name = "router-id"];
                        string if_ip_address = 3 [json_name = "if-ip-address"];
                        string ip_address = 4 [json_name = "ip-address"];
                        enum State {
                           State_DOWN = 0;
                           State_INIT = 1;
                           State_ATTEMPT = 2;
                           State_X_2X_WAY = 3;
                           State_EXSTART = 4;
                           State_EXCHANGE = 5;
                           State_LOADING = 6;
                           State_FULL = 7;
                        };
                        State state = 5 [json_name = "state"];
                        enum InterfaceState {
                           InterfaceState_DOWN = 0;
                           InterfaceState_WAITING = 1;
                           InterfaceState_P2P = 2;
                           InterfaceState_DR = 3;
                           InterfaceState_BDR = 4;
                           InterfaceState_DRX_OTHER = 5;
                           InterfaceState_LOOPBACK = 6;
                        };
                        InterfaceState interface_state = 6 [json_name = "interface-state"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_BROADCAST = 1;
                           Type_NBMA = 2;
                           Type_P2P = 3;
                           Type_VIRTUAL = 4;
                           Type_P2MP = 5;
                        };
                        Type type = 7 [json_name = "type"];
                        enum GrState {
                           GrState_NORMAL = 0;
                           GrState_DOINGX_GR = 1;
                           GrState_HELPER = 2;
                           GrState_NONE = 3;
                        };
                        GrState gr_state = 8 [json_name = "gr-state"];
                        uint32 hello_interval = 9 [json_name = "hello-interval"];
                        uint32 dead_interval = 10 [json_name = "dead-interval"];
                        uint32 trans_delay_interval = 11 [json_name = "trans-delay-interval"];
                        uint32 retransmit_interval = 12 [json_name = "retransmit-interval"];
                        uint32 cost = 13 [json_name = "cost"];
                        bool smart_discover = 14 [json_name = "smart-discover"];
                        string options = 15 [json_name = "options"];
                        uint32 events = 16 [json_name = "events"];
                        uint32 ls_rxq_len = 17 [json_name = "ls-rxq-len"];
                        bool hello_suppress = 18 [json_name = "hello-suppress"];
                        uint32 gr_helper_age = 19 [json_name = "gr-helper-age"];
                        enum HelperExtReason {
                           INVALID_ENUM_VALUE_HelperExtReason = 0;
                           HelperExtReason_NONE = 1;
                           HelperExtReason_INX_PROGRESS = 2;
                           HelperExtReason_COMPLETED = 3;
                           HelperExtReason_TIMEDX_OUT = 4;
                           HelperExtReason_TOPOLOGYX_CHANGED = 5;
                        };
                        HelperExtReason helper_ext_reason = 20 [json_name = "helper-ext-reason"];
                        enum GrHelperStatus {
                           INVALID_ENUM_VALUE_GrHelperStatus = 0;
                           GrHelperStatus_NOTX_HELPING = 1;
                           GrHelperStatus_HELPING = 2;
                        };
                        GrHelperStatus gr_helper_status = 21 [json_name = "gr-helper-status"];
                     }
                     repeated VlinkNbrStatistic vlink_nbr_statistic = 1 [json_name = "vlink-nbr-statistic"];
                  }
                  VlinkNbrStatistics vlink_nbr_statistics = 72 [json_name = "vlink-nbr-statistics"];
                  message DefaultRoute_Summary {
                     message Summary8 {
                        uint32 cost = 1 [json_name = "cost"];
                     }
                     Summary8 summary8 = 1 [json_name = "summary"];
                  }
                  message DefaultRoute_NoSummary {
                     message NoSummary8 {
                        bool enable = 1 [json_name = "enable"];
                        uint32 cost = 2 [json_name = "cost"];
                        uint32 tag = 3 [json_name = "tag"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_TYPE1 = 1;
                           Type_TYPE2 = 2;
                        };
                        Type type = 4 [json_name = "type"];
                        uint32 distribute_delay = 5 [json_name = "distribute-delay"];
                        message Mode_PermitCalculateOther {
                           bool permit_calculate_other = 1 [json_name = "permit-calculate-other"];
                           bool permit_ibgp = 2 [json_name = "permit-ibgp"];
                        }
                        message Mode_Always {
                           bool always10 = 1 [json_name = "always"];
                        }
                        oneof Mode {
                           Mode_PermitCalculateOther mode_permit_calculate_other = 6 [json_name = "permit-calculate-other"];
                           Mode_Always mode_always = 7 [json_name = "always"];
                        }
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 8 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 9 [json_name = "route-filter-name"];
                        }
                        uint32 preference = 10 [json_name = "preference"];
                     }
                     NoSummary8 no_summary = 1 [json_name = "no-summary"];
                  }
                  oneof DefaultRoute {
                     DefaultRoute_Summary default_route_summary = 73 [json_name = "summary"];
                     DefaultRoute_NoSummary default_route_no_summary = 74 [json_name = "no-summary"];
                  }
                  message GracefulRestart_GrIetf {
                     message GrIetf8 {
                        message HelperRoleMode_Never {
                           bool never10 = 1 [json_name = "never"];
                        }
                        message HelperRoleMode_WorkMode {
                           bool planned_only = 1 [json_name = "planned-only"];
                           bool ignore_external_lsa = 2 [json_name = "ignore-external-lsa"];
                           message MatchMode_AclNameOrNum {
                              string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                           }
                           message MatchMode_IpPrefixName {
                              string ip_prefix_name = 1 [json_name = "ip-prefix-name"];
                           }
                           oneof MatchMode {
                              MatchMode_AclNameOrNum match_mode_acl_name_or_num = 3 [json_name = "acl-name-or-num"];
                              MatchMode_IpPrefixName match_mode_ip_prefix_name = 4 [json_name = "ip-prefix-name"];
                           }
                        }
                        oneof HelperRoleMode {
                           HelperRoleMode_Never helper_role_mode_never = 1 [json_name = "never"];
                           HelperRoleMode_WorkMode helper_role_mode_work_mode = 2 [json_name = "work-mode"];
                        }
                     }
                     GrIetf8 gr_ietf = 1 [json_name = "gr-ietf"];
                  }
                  message GracefulRestart_GrNonIetf {
                     message GrNonIetf8 {
                     }
                     GrNonIetf8 gr_non_ietf = 1 [json_name = "gr-non-ietf"];
                  }
                  oneof GracefulRestart {
                     GracefulRestart_GrIetf graceful_restart_gr_ietf = 75 [json_name = "gr-ietf"];
                     GracefulRestart_GrNonIetf graceful_restart_gr_non_ietf = 76 [json_name = "gr-non-ietf"];
                  }
                  message BfdStatDatas {
                     message BfdStatData {
                        string area_id = 1 [json_name = "area-id"];
                        string nbr_router_id = 2 [json_name = "nbr-router-id"];
                        string if_name = 3 [json_name = "if-name"];
                        enum State {
                           State_UNKNOWN = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 4 [json_name = "state"];
                        uint32 rx_interval = 5 [json_name = "rx-interval"];
                        uint32 tx_interval = 6 [json_name = "tx-interval"];
                        uint32 multiplier = 7 [json_name = "multiplier"];
                        uint32 local_dis = 8 [json_name = "local-dis"];
                        string local_ip_addr = 9 [json_name = "local-ip-addr"];
                        string remote_ip_addr = 10 [json_name = "remote-ip-addr"];
                        enum DiagnosticInfo {
                           DiagnosticInfo_NOX_DIAGNOSTICX_INFORMATION = 0;
                           DiagnosticInfo_CONTROLX_DETECTIONX_TIMEX_EXPIRED = 1;
                           DiagnosticInfo_ECHOX_FUNCTIONX_FAILED = 2;
                           DiagnosticInfo_NEIGHBORX_ISX_DOWN = 3;
                           DiagnosticInfo_FORWARDINGX_PLANEX_RESET = 4;
                           DiagnosticInfo_PATHX_DOWN = 5;
                           DiagnosticInfo_CONCATENATEDX_PATHX_DOWN = 6;
                           DiagnosticInfo_ADMINISTATORX_DOWN = 7;
                           DiagnosticInfo_REVERSEX_CONCATENATEDX_PATHX_DOWN = 8;
                           DiagnosticInfo_ADMINISTRATORX_DOWNX_EVENTX_RECEIVED = 9;
                           DiagnosticInfo_GLOBALX_BFDX_ISX_NOTX_ENABLED = 10;
                           DiagnosticInfo_BFDX_SESSIONX_NUMBERX_REACHESX_THEX_MAX = 11;
                        };
                        DiagnosticInfo diagnostic_info = 11 [json_name = "diagnostic-info"];
                     }
                     repeated BfdStatData bfd_stat_data = 1 [json_name = "bfd-stat-data"];
                  }
                  BfdStatDatas bfd_stat_datas = 77 [json_name = "bfd-stat-datas"];
                  message TrafficAdjStats {
                     message TrafficAdjStat {
                        string area_id = 1 [json_name = "area-id"];
                        string router_id = 2 [json_name = "router-id"];
                        string ip_addr = 3 [json_name = "ip-addr"];
                        string if_name = 4 [json_name = "if-name"];
                        uint32 if_cost = 5 [json_name = "if-cost"];
                        string if_tnl_dest = 6 [json_name = "if-tnl-dest"];
                        enum IfTnlType {
                           INVALID_ENUM_VALUE_IfTnlType = 0;
                           IfTnlType_SHORTCUT = 2;
                           IfTnlType_FORWARDX_ADJ = 4;
                        };
                        IfTnlType if_tnl_type = 7 [json_name = "if-tnl-type"];
                        string if_tnl_nbr_id = 8 [json_name = "if-tnl-nbr-id"];
                        int32 if_metric = 9 [json_name = "if-metric"];
                        enum IfMetricType {
                           IfMetricType_RELATIVE = 0;
                           IfMetricType_ABSOLUTE = 1;
                        };
                        IfMetricType if_metric_type = 10 [json_name = "if-metric-type"];
                        uint32 hold_time = 11 [json_name = "hold-time"];
                     }
                     repeated TrafficAdjStat traffic_adj_stat = 1 [json_name = "traffic-adj-stat"];
                  }
                  TrafficAdjStats traffic_adj_stats = 78 [json_name = "traffic-adj-stats"];
                  enum Rfc1583Prefer {
                     Rfc1583Prefer_NONE = 0;
                     Rfc1583Prefer_LOWERX_COST = 1;
                     Rfc1583Prefer_INTRAX_AREA = 2;
                  };
                  Rfc1583Prefer rfc1583_prefer = 79 [json_name = "rfc1583-prefer"];
                  message DynamicHostnames {
                     message DynamicHostname {
                        enum Scope {
                           Scope_LINKX_SCOPE = 0;
                           Scope_AREAX_SCOPE = 1;
                           Scope_ASX_SCOPE = 2;
                        };
                        Scope scope = 1 [json_name = "scope"];
                        string area_id = 2 [json_name = "area-id"];
                        string router_id = 3 [json_name = "router-id"];
                        string host_name = 4 [json_name = "host-name"];
                     }
                     repeated DynamicHostname dynamic_hostname = 1 [json_name = "dynamic-hostname"];
                  }
                  DynamicHostnames dynamic_hostnames = 80 [json_name = "dynamic-hostnames"];
                  message SlinkNbrStatistics {
                     message SlinkNbrStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        string src_addr = 2 [json_name = "src-addr"];
                        string dest_addr = 3 [json_name = "dest-addr"];
                        string nbr_id = 4 [json_name = "nbr-id"];
                        enum NbrState {
                           NbrState_DOWN = 0;
                           NbrState_ATTEMPT = 1;
                           NbrState_INIT = 2;
                           NbrState_X_2X_WAY = 3;
                           NbrState_EXSTART = 4;
                           NbrState_EXCHANGE = 5;
                           NbrState_LOADING = 6;
                           NbrState_FULL = 7;
                        };
                        NbrState nbr_state = 5 [json_name = "nbr-state"];
                        enum State {
                           State_DOWN = 0;
                           State_WAITING = 1;
                           State_P2P = 2;
                           State_DR = 3;
                           State_BDR = 4;
                           State_DROTHER = 5;
                           State_LOOPBACK = 6;
                        };
                        State state = 6 [json_name = "state"];
                        enum GrStatus {
                           GrStatus_NORMAL = 0;
                           GrStatus_DOINGX_GR = 1;
                           GrStatus_HELPER = 2;
                           GrStatus_NONE = 3;
                        };
                        GrStatus gr_status = 7 [json_name = "gr-status"];
                        int32 hello_intv = 8 [json_name = "hello-intv"];
                        int32 dead_intv = 9 [json_name = "dead-intv"];
                        int32 trans_delay_intv = 10 [json_name = "trans-delay-intv"];
                        int32 retrans_intv = 11 [json_name = "retrans-intv"];
                        uint32 cost = 12 [json_name = "cost"];
                        bool smart_discover = 13 [json_name = "smart-discover"];
                     }
                     repeated SlinkNbrStatistic slink_nbr_statistic = 1 [json_name = "slink-nbr-statistic"];
                  }
                  SlinkNbrStatistics slink_nbr_statistics = 81 [json_name = "slink-nbr-statistics"];
                  message MplsTeStatistics {
                     message MplsTeStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        uint32 opaque_id = 2 [json_name = "opaque-id"];
                        string adv_router_id = 3 [json_name = "adv-router-id"];
                        string link_state_id = 4 [json_name = "link-state-id"];
                        uint32 lsa_length = 5 [json_name = "lsa-length"];
                        uint32 lsa_options = 6 [json_name = "lsa-options"];
                        string time_stamp = 7 [json_name = "time-stamp"];
                        message RouterTlvDatas {
                           message RouterTlvData {
                              string te_router_id = 1 [json_name = "te-router-id"];
                           }
                           repeated RouterTlvData router_tlv_data = 1 [json_name = "router-tlv-data"];
                        }
                        RouterTlvDatas router_tlv_datas = 8 [json_name = "router-tlv-datas"];
                        message LinkTlvDatas {
                           message LinkTlvData {
                              string link_id = 1 [json_name = "link-id"];
                              enum LinkType {
                                 LinkType_NONE = 0;
                                 LinkType_P2P = 1;
                                 LinkType_MULTIX_ACCESS = 2;
                              };
                              LinkType link_type = 2 [json_name = "link-type"];
                              string remote_ip = 3 [json_name = "remote-ip"];
                              uint32 te_metric = 4 [json_name = "te-metric"];
                              uint32 ospf_metric = 5 [json_name = "ospf-metric"];
                              uint64 max_link_bw = 6 [json_name = "max-link-bw"];
                              uint64 max_reserved_bw = 7 [json_name = "max-reserved-bw"];
                              string admin_group = 8 [json_name = "admin-group"];
                              uint64 bc0 = 9 [json_name = "bc0"];
                              uint64 bc1 = 10 [json_name = "bc1"];
                              uint64 bc2 = 11 [json_name = "bc2"];
                              uint64 bc3 = 12 [json_name = "bc3"];
                              uint64 bc4 = 13 [json_name = "bc4"];
                              uint64 bc5 = 14 [json_name = "bc5"];
                              uint64 bc6 = 15 [json_name = "bc6"];
                              uint64 bc7 = 16 [json_name = "bc7"];
                              uint64 un_reserved_bw0 = 17 [json_name = "un-reserved-bw0"];
                              uint64 un_reserved_bw1 = 18 [json_name = "un-reserved-bw1"];
                              uint64 un_reserved_bw2 = 19 [json_name = "un-reserved-bw2"];
                              uint64 un_reserved_bw3 = 20 [json_name = "un-reserved-bw3"];
                              uint64 un_reserved_bw4 = 21 [json_name = "un-reserved-bw4"];
                              uint64 un_reserved_bw5 = 22 [json_name = "un-reserved-bw5"];
                              uint64 un_reserved_bw6 = 23 [json_name = "un-reserved-bw6"];
                              uint64 un_reserved_bw7 = 24 [json_name = "un-reserved-bw7"];
                              message LocalIps {
                                 message LocalIp {
                                    string local_ip = 1 [json_name = "local-ip"];
                                 }
                                 repeated LocalIp local_ip = 1 [json_name = "local-ip"];
                              }
                              LocalIps local_ips = 25 [json_name = "local-ips"];
                              message Srlgs {
                                 message Srlg {
                                    uint32 srlg13 = 1 [json_name = "srlg"];
                                 }
                                 repeated Srlg srlg = 1 [json_name = "srlg"];
                              }
                              Srlgs srlgs = 26 [json_name = "srlgs"];
                           }
                           repeated LinkTlvData link_tlv_data = 1 [json_name = "link-tlv-data"];
                        }
                        LinkTlvDatas link_tlv_datas = 9 [json_name = "link-tlv-datas"];
                     }
                     repeated MplsTeStatistic mpls_te_statistic = 1 [json_name = "mpls-te-statistic"];
                  }
                  MplsTeStatistics mpls_te_statistics = 82 [json_name = "mpls-te-statistics"];
                  message SrMappingServers {
                     message SrMappingServer {
                        string dest_ip = 1 [json_name = "dest-ip"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string adv_router_id = 3 [json_name = "adv-router-id"];
                        string area_id = 4 [json_name = "area-id"];
                        uint32 sid = 5 [json_name = "sid"];
                     }
                     repeated SrMappingServer sr_mapping_server = 1 [json_name = "sr-mapping-server"];
                  }
                  SrMappingServers sr_mapping_servers = 83 [json_name = "sr-mapping-servers"];
                  message SrRoutings {
                     message SrRouting {
                        string dest_ip = 1 [json_name = "dest-ip"];
                        uint32 mask_length = 2 [json_name = "mask-length"];
                        string adv_router_id = 3 [json_name = "adv-router-id"];
                        string if_name = 4 [json_name = "if-name"];
                        string ip_addr = 5 [json_name = "ip-addr"];
                        string area_id = 6 [json_name = "area-id"];
                        string path_type = 7 [json_name = "path-type"];
                        uint32 sr_in_label = 8 [json_name = "sr-in-label"];
                        uint32 sr_out_label = 9 [json_name = "sr-out-label"];
                        uint32 prefix_sid = 10 [json_name = "prefix-sid"];
                        string prefix_flag = 11 [json_name = "prefix-flag"];
                        string bak_if_name = 12 [json_name = "bak-if-name"];
                        string bak_ip_addr = 13 [json_name = "bak-ip-addr"];
                        uint32 bak_path_type = 14 [json_name = "bak-path-type"];
                        string adj_label_stack = 15 [json_name = "adj-label-stack"];
                        uint32 algorithm = 16 [json_name = "algorithm"];
                        uint32 bak_out_label = 17 [json_name = "bak-out-label"];
                     }
                     repeated SrRouting sr_routing = 1 [json_name = "sr-routing"];
                  }
                  SrRoutings sr_routings = 84 [json_name = "sr-routings"];
                  message FadBindings {
                     message FadBinding {
                        uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
                     }
                     repeated FadBinding fad_binding = 1 [json_name = "fad-binding"];
                  }
                  FadBindings fad_bindings = 85 [json_name = "fad-bindings"];
                  message FlexAlgoStates {
                     message FlexAlgoState {
                        uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
                        string area_id = 2 [json_name = "area-id"];
                        string router_id = 3 [json_name = "router-id"];
                        uint32 priority = 4 [json_name = "priority"];
                        enum MetricType {
                           MetricType_IGP = 0;
                           MetricType_LINKX_DELAY = 1;
                           MetricType_TE = 2;
                        };
                        MetricType metric_type = 5 [json_name = "metric-type"];
                        string flags = 6 [json_name = "flags"];
                        uint32 calc_type = 7 [json_name = "calc-type"];
                        string exclude_admin_group = 8 [json_name = "exclude-admin-group"];
                        string include_any_admin_group = 9 [json_name = "include-any-admin-group"];
                        string include_all_admin_group = 10 [json_name = "include-all-admin-group"];
                        string support = 11 [json_name = "support"];
                     }
                     repeated FlexAlgoState flex_algo_state = 1 [json_name = "flex-algo-state"];
                  }
                  FlexAlgoStates flex_algo_states = 86 [json_name = "flex-algo-states"];
                  message DelayNormalize {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 offset = 2 [json_name = "offset"];
                  }
                  DelayNormalize delay_normalize = 87 [json_name = "delay-normalize"];
                  message AdvertiseLinkAttributes {
                     message AdvertiseLinkAttribute {
                        enum AppType {
                           INVALID_ENUM_VALUE_AppType = 0;
                           AppType_FLEXX_ALGO = 1;
                        };
                        AppType app_type = 1 [json_name = "app-type"];
                     }
                     repeated AdvertiseLinkAttribute advertise_link_attribute = 1 [json_name = "advertise-link-attribute"];
                  }
                  AdvertiseLinkAttributes advertise_link_attributes = 88 [json_name = "advertise-link-attributes"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
            message Gtsm {
               uint32 hops = 1 [json_name = "hops"];
               bool nonstandard_multicast = 2 [json_name = "nonstandard-multicast"];
            }
            Gtsm gtsm = 2 [json_name = "gtsm"];
         }
         Ospfv2 ospfv2 = 25 [json_name = "ospfv2"];
         message Nvo3 {
            message VniList {
               uint32 vni = 1 [json_name = "vni"];
               string source_vtep_ip = 2 [json_name = "source-vtep-ip"];
            }
            repeated VniList vni_list = 1 [json_name = "vni-list"];
         }
         Nvo3 nvo3 = 26 [json_name = "nvo3"];
         message Ospfv3 {
            message Sites {
               message Site {
                  uint32 process_id = 1 [json_name = "process-id"];
                  string router_id = 2 [json_name = "router-id"];
                  string description = 3 [json_name = "description"];
                  bool rfc1583_compatible = 4 [json_name = "rfc1583-compatible"];
                  bool retransmission_limit = 5 [json_name = "retransmission-limit"];
                  uint32 retransmission_limit_value = 6 [json_name = "retransmission-limit-value"];
                  bool lsa_refresh = 7 [json_name = "lsa-refresh"];
                  bool peer_flapping_suppress = 8 [json_name = "peer-flapping-suppress"];
                  bool qppb_enable = 9 [json_name = "qppb-enable"];
                  message PrivateNet {
                     bool vpn_capability = 2 [json_name = "vpn-capability"];
                     message DomainId {
                        string domain_id = 1 [json_name = "domain-id"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_X_0X0005 = 1;
                           Type_X_0X0105 = 2;
                           Type_X_0X0205 = 3;
                           Type_X_0X8005 = 4;
                        };
                        Type type = 2 [json_name = "type"];
                        string value = 3 [json_name = "value"];
                     }
                     DomainId domain_id = 3 [json_name = "domain-id"];
                     message DomainIdSecondarys {
                        message DomainIdSecondary {
                           string domain_id = 1 [json_name = "domain-id"];
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_X_0X0005 = 1;
                              Type_X_0X0105 = 2;
                              Type_X_0X0205 = 3;
                              Type_X_0X8005 = 4;
                           };
                           Type type = 2 [json_name = "type"];
                           string value = 3 [json_name = "value"];
                        }
                        repeated DomainIdSecondary domain_id_secondary = 1 [json_name = "domain-id-secondary"];
                     }
                     DomainIdSecondarys domain_id_secondarys = 4 [json_name = "domain-id-secondarys"];
                     message RouteTag_Value {
                        uint32 value9 = 1 [json_name = "value"];
                     }
                     oneof RouteTag {
                        RouteTag_Value route_tag_value = 5 [json_name = "value"];
                     }
                  }
                  PrivateNet private_net = 10 [json_name = "private-net"];
                  message Timer {
                     message LsaArrival {
                        message TimerType_Timer9 {
                           uint32 interval = 1 [json_name = "interval"];
                        }
                        message TimerType_IntelligentTimer {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                        }
                        oneof TimerType {
                           TimerType_Timer9 timer_type_timer9 = 2 [json_name = "timer"];
                           TimerType_IntelligentTimer timer_type_intelligent_timer = 3 [json_name = "intelligent-timer"];
                        }
                     }
                     LsaArrival lsa_arrival = 1 [json_name = "lsa-arrival"];
                     message LsaOriginate {
                        uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                        message TimerType_Interval {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                        }
                        oneof TimerType {
                           TimerType_Interval timer_type_interval = 3 [json_name = "interval"];
                        }
                        message LsaOriginate9_Disable {
                           bool disable10 = 1 [json_name = "disable"];
                        }
                        message LsaOriginate9_Enable {
                           uint32 other_type_interval = 1 [json_name = "other-type-interval"];
                           message TimerType_Interval {
                              uint32 max_interval = 1 [json_name = "max-interval"];
                              uint32 start_interval = 2 [json_name = "start-interval"];
                              uint32 hold_interval = 3 [json_name = "hold-interval"];
                           }
                           oneof TimerType {
                              TimerType_Interval timer_type_interval = 2 [json_name = "interval"];
                           }
                        }
                        oneof LsaOriginate9 {
                           LsaOriginate9_Disable lsa_originate_disable = 4 [json_name = "disable"];
                           LsaOriginate9_Enable lsa_originate_enable = 5 [json_name = "enable"];
                        }
                     }
                     LsaOriginate lsa_originate = 2 [json_name = "lsa-originate"];
                     message SpfSchedule {
                        message ScheduleType_Timer9 {
                           enum Type {
                              INVALID_ENUM_VALUE_Type = 0;
                              Type_NORMAL = 3;
                              Type_INTELLIGENT = 4;
                           };
                           Type type = 1 [json_name = "type"];
                           uint32 delay_interval = 2 [json_name = "delay-interval"];
                           uint32 hold_interval_timer = 3 [json_name = "hold-interval-timer"];
                        }
                        message ScheduleType_IntelligentTimer {
                           uint32 max_interval = 1 [json_name = "max-interval"];
                           uint32 start_interval = 2 [json_name = "start-interval"];
                           uint32 hold_interval = 3 [json_name = "hold-interval"];
                        }
                        message ScheduleType_Millisecond {
                           uint32 millisecond10 = 1 [json_name = "millisecond"];
                        }
                        oneof ScheduleType {
                           ScheduleType_Timer9 schedule_type_timer9 = 2 [json_name = "timer"];
                           ScheduleType_IntelligentTimer schedule_type_intelligent_timer = 3 [json_name = "intelligent-timer"];
                           ScheduleType_Millisecond schedule_type_millisecond = 4 [json_name = "millisecond"];
                        }
                     }
                     SpfSchedule spf_schedule = 3 [json_name = "spf-schedule"];
                     message LsaArrSuppFlap {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 threshold_count = 2 [json_name = "threshold-count"];
                     }
                     LsaArrSuppFlap lsa_arr_supp_flap = 4 [json_name = "lsa-arr-supp-flap"];
                     message LsaOrgSuppFlap {
                        uint32 interval = 1 [json_name = "interval"];
                        uint32 threshold_count = 2 [json_name = "threshold-count"];
                     }
                     LsaOrgSuppFlap lsa_org_supp_flap = 5 [json_name = "lsa-org-supp-flap"];
                  }
                  Timer timer = 11 [json_name = "timer"];
                  message Bfd {
                     bool enable = 1 [json_name = "enable"];
                     uint32 min_rx = 2 [json_name = "min-rx"];
                     uint32 min_tx = 3 [json_name = "min-tx"];
                     uint32 detect_multiplier = 4 [json_name = "detect-multiplier"];
                     bool frr_binding = 5 [json_name = "frr-binding"];
                     uint32 incr_cost = 6 [json_name = "incr-cost"];
                     uint32 incr_cost_wtr = 7 [json_name = "incr-cost-wtr"];
                  }
                  Bfd bfd = 12 [json_name = "bfd"];
                  message ImportLimit {
                     uint32 max_number = 1 [json_name = "max-number"];
                     uint32 threshold_upper = 2 [json_name = "threshold-upper"];
                     uint32 threshold_lower = 3 [json_name = "threshold-lower"];
                  }
                  ImportLimit import_limit = 13 [json_name = "import-limit"];
                  message DefaultPara {
                     uint32 cost = 1 [json_name = "cost"];
                     uint32 tag = 2 [json_name = "tag"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_TYPE1 = 1;
                        Type_TYPE2 = 2;
                     };
                     Type type = 3 [json_name = "type"];
                  }
                  DefaultPara default_para = 14 [json_name = "default-para"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_BGP = 6;
                           Protocol_OSPFV3 = 7;
                           Protocol_RIPNG = 8;
                           Protocol_UNR = 11;
                           Protocol_OPR = 14;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        uint32 tag = 3 [json_name = "tag"];
                        enum Type {
                           INVALID_ENUM_VALUE_Type = 0;
                           Type_TYPE1 = 1;
                           Type_TYPE2 = 2;
                        };
                        Type type = 4 [json_name = "type"];
                        bool permit_ibgp = 5 [json_name = "permit-ibgp"];
                        message Cost_InheritCost {
                           bool inherit_cost = 1 [json_name = "inherit-cost"];
                        }
                        message Cost_CostValue {
                           uint32 cost_value = 1 [json_name = "cost-value"];
                        }
                        oneof Cost {
                           Cost_InheritCost cost_inherit_cost = 8 [json_name = "inherit-cost"];
                           Cost_CostValue cost_cost_value = 9 [json_name = "cost-value"];
                        }
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 10 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 11 [json_name = "route-filter-name"];
                        }
                        bool inherit_route_type = 12 [json_name = "inherit-route-type"];
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 15 [json_name = "import-routes"];
                  message Areas {
                     message Area {
                        string area_id = 1 [json_name = "area-id"];
                        enum AreaType {
                           INVALID_ENUM_VALUE_AreaType = 0;
                           AreaType_NORMAL = 1;
                           AreaType_STUB = 2;
                           AreaType_NSSA = 3;
                        };
                        AreaType area_type = 2 [json_name = "area-type"];
                        string description = 3 [json_name = "description"];
                        message Interfaces {
                           message Interface {
                              string name = 1 [json_name = "name"];
                              uint32 instance_id = 2 [json_name = "instance-id"];
                              enum NetworkType {
                                 INVALID_ENUM_VALUE_NetworkType = 0;
                                 NetworkType_BROADCAST = 1;
                                 NetworkType_NBMA = 2;
                                 NetworkType_P2P = 3;
                                 NetworkType_P2MP = 5;
                                 NetworkType_P2MPX_NONBROADCAST = 7;
                                 NetworkType_LOOPBACK = 22;
                              };
                              NetworkType network_type = 3 [json_name = "network-type"];
                              int32 transmit_delay = 4 [json_name = "transmit-delay"];
                              bool mtu_enable = 5 [json_name = "mtu-enable"];
                              int32 dr_priority = 6 [json_name = "dr-priority"];
                              uint32 peer_hold_max_timer = 7 [json_name = "peer-hold-max-timer"];
                              uint32 cost = 8 [json_name = "cost"];
                              uint32 link_cost = 9 [json_name = "link-cost"];
                              message Frr {
                                 bool frr_disable = 1 [json_name = "frr-disable"];
                                 message TiLfa {
                                    bool disable = 1 [json_name = "disable"];
                                 }
                                 TiLfa ti_lfa = 2 [json_name = "ti-lfa"];
                              }
                              Frr frr = 10 [json_name = "frr"];
                              message Timer {
                                 int32 hello_interval = 1 [json_name = "hello-interval"];
                                 bool hello_conser = 2 [json_name = "hello-conser"];
                                 int32 dead_interval = 3 [json_name = "dead-interval"];
                                 uint32 wait_interval = 4 [json_name = "wait-interval"];
                                 int32 poll_interval = 5 [json_name = "poll-interval"];
                                 int32 retransmit_interval = 6 [json_name = "retransmit-interval"];
                              }
                              Timer timer = 11 [json_name = "timer"];
                              message Bfd {
                                 bool enable = 1 [json_name = "enable"];
                                 bool block = 2 [json_name = "block"];
                                 uint32 detect_multiplier = 3 [json_name = "detect-multiplier"];
                                 uint32 min_tx = 4 [json_name = "min-tx"];
                                 uint32 min_rx = 5 [json_name = "min-rx"];
                                 bool frr_binding = 6 [json_name = "frr-binding"];
                                 bool per_link_flag = 7 [json_name = "per-link-flag"];
                                 bool one_arm_echo_flag = 8 [json_name = "one-arm-echo-flag"];
                                 message IncrCost_IncrCostBlock {
                                    bool incr_cost_block = 1 [json_name = "incr-cost-block"];
                                 }
                                 message IncrCost_IncrCostValue {
                                    uint32 incr_cost_value = 1 [json_name = "incr-cost-value"];
                                 }
                                 oneof IncrCost {
                                    IncrCost_IncrCostBlock incr_cost_incr_cost_block = 9 [json_name = "incr-cost-block"];
                                    IncrCost_IncrCostValue incr_cost_incr_cost_value = 10 [json_name = "incr-cost-value"];
                                 }
                                 uint32 incr_cost_wtr = 11 [json_name = "incr-cost-wtr"];
                              }
                              Bfd bfd = 12 [json_name = "bfd"];
                              message Authentication {
                                 enum Mode {
                                    Mode_NONE = 0;
                                    Mode_KEYCHAIN = 1;
                                    Mode_HMACX_SHA256 = 2;
                                    Mode_HMACX_SM3 = 4;
                                 };
                                 Mode mode = 1 [json_name = "mode"];
                                 uint32 key_id = 2 [json_name = "key-id"];
                                 string auth_text = 3 [json_name = "auth-text"];
                                 string key_chain_name = 4 [json_name = "key-chain-name"];
                              }
                              Authentication authentication = 13 [json_name = "authentication"];
                              message SuppressFlapping {
                                 message Peer {
                                    bool enable = 1 [json_name = "enable"];
                                    uint32 detect_interval = 2 [json_name = "detect-interval"];
                                    uint32 threshold = 3 [json_name = "threshold"];
                                    uint32 resume_interval = 4 [json_name = "resume-interval"];
                                    uint32 hold_down_interval = 5 [json_name = "hold-down-interval"];
                                    bool hold_max_cost = 6 [json_name = "hold-max-cost"];
                                 }
                                 Peer peer = 1 [json_name = "peer"];
                              }
                              SuppressFlapping suppress_flapping = 14 [json_name = "suppress-flapping"];
                              message Peers {
                                 message Peer {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string nbr_link_local_addr = 2 [json_name = "nbr-link-local-addr"];
                                    uint32 cost = 3 [json_name = "cost"];
                                    bool dr_eligible = 4 [json_name = "dr-eligible"];
                                    int32 poll = 5 [json_name = "poll"];
                                 }
                                 repeated Peer peer = 1 [json_name = "peer"];
                              }
                              Peers peers = 15 [json_name = "peers"];
                              message FlushSourceTrace {
                                 bool block = 1 [json_name = "block"];
                              }
                              FlushSourceTrace flush_source_trace = 16 [json_name = "flush-source-trace"];
                              message Attribute {
                                 enum LinkProtocol {
                                    LinkProtocol_DOWN = 0;
                                    LinkProtocol_WAITING = 1;
                                    LinkProtocol_PX_2X_P = 2;
                                    LinkProtocol_DR = 3;
                                    LinkProtocol_BDR = 4;
                                    LinkProtocol_DRX_OTHER = 5;
                                    LinkProtocol_LOOPBACK = 6;
                                    LinkProtocol_POINTX_TOX_POINT = 18;
                                    LinkProtocol_BACKUP = 20;
                                 };
                                 LinkProtocol link_protocol = 1 [json_name = "link-protocol"];
                                 uint32 mtu = 2 [json_name = "mtu"];
                                 string link_local_addr = 3 [json_name = "link-local-addr"];
                                 uint32 event = 4 [json_name = "event"];
                                 uint32 lsa_count = 5 [json_name = "lsa-count"];
                                 uint32 lsa_checksum = 6 [json_name = "lsa-checksum"];
                                 uint32 effective_cost = 7 [json_name = "effective-cost"];
                                 string cost_type = 8 [json_name = "cost-type"];
                                 enum State {
                                    State_DOWN = 0;
                                    State_WAITING = 1;
                                    State_PX_2X_P = 2;
                                    State_DR = 3;
                                    State_BDR = 4;
                                    State_DRX_OTHER = 5;
                                    State_LOOPBACK = 6;
                                    State_POINTX_TOX_POINT = 18;
                                    State_BACKUP = 20;
                                 };
                                 State state = 9 [json_name = "state"];
                                 string dr = 10 [json_name = "dr"];
                                 string dr_link_local_addr = 11 [json_name = "dr-link-local-addr"];
                                 string bdr = 12 [json_name = "bdr"];
                                 string bdr_link_local_addr = 13 [json_name = "bdr-link-local-addr"];
                                 string hello_due_timer = 14 [json_name = "hello-due-timer"];
                                 uint32 count = 15 [json_name = "count"];
                                 uint32 adjacent_count = 16 [json_name = "adjacent-count"];
                                 uint32 bandwidth_high = 17 [json_name = "bandwidth-high"];
                                 uint32 bandwidth_low = 18 [json_name = "bandwidth-low"];
                                 message Bfd {
                                    bool enable = 1 [json_name = "enable"];
                                    bool frr_binding = 2 [json_name = "frr-binding"];
                                    uint32 min_tx = 3 [json_name = "min-tx"];
                                    uint32 min_rx = 4 [json_name = "min-rx"];
                                    uint32 detect_multiplier = 5 [json_name = "detect-multiplier"];
                                 }
                                 Bfd bfd = 19 [json_name = "bfd"];
                                 enum AuthFlag {
                                    AuthFlag_NONE = 0;
                                    AuthFlag_HMACX_SHA256 = 1;
                                    AuthFlag_HMACX_SHA256X_INHERITED = 2;
                                    AuthFlag_KEYCHAIN = 3;
                                    AuthFlag_KEYCHAINX_INHERITED = 4;
                                    AuthFlag_HMACX_SM3 = 5;
                                    AuthFlag_HMACX_SM3X_INHERITED = 6;
                                 };
                                 AuthFlag auth_flag = 20 [json_name = "auth-flag"];
                                 uint32 auth_seq_high = 21 [json_name = "auth-seq-high"];
                                 uint32 auth_seq_low = 22 [json_name = "auth-seq-low"];
                                 string sa_name_apply = 23 [json_name = "sa-name-apply"];
                                 string sa_name = 24 [json_name = "sa-name"];
                                 enum PeerFlappingSuppress {
                                    PeerFlappingSuppress_DISABLE = 0;
                                    PeerFlappingSuppress_ENABLE = 1;
                                    PeerFlappingSuppress_HOLDX_MAXX_COST = 2;
                                    PeerFlappingSuppress_HOLDX_DOWN = 3;
                                 };
                                 PeerFlappingSuppress peer_flapping_suppress = 25 [json_name = "peer-flapping-suppress"];
                                 uint32 peer_flapping_count = 26 [json_name = "peer-flapping-count"];
                                 uint32 peer_flapping_suppress_threshold = 27 [json_name = "peer-flapping-suppress-threshold"];
                                 string peer_flapping_suppress_time = 28 [json_name = "peer-flapping-suppress-time"];
                                 uint32 peer_flapping_suppress_remain_interval = 29 [json_name = "peer-flapping-suppress-remain-interval"];
                                 string link_quality_adjust_cost = 30 [json_name = "link-quality-adjust-cost"];
                                 string link_quality = 31 [json_name = "link-quality"];
                                 uint32 prefix_len = 32 [json_name = "prefix-len"];
                              }
                              Attribute attribute = 17 [json_name = "attribute"];
                              message Neighbors {
                                 message Neighbor {
                                    string router_id = 1 [json_name = "router-id"];
                                    string interface_address = 2 [json_name = "interface-address"];
                                    string host_name = 3 [json_name = "host-name"];
                                    int32 priority = 4 [json_name = "priority"];
                                    enum State {
                                       State_DOWN = 0;
                                       State_INIT = 1;
                                       State_ATTEMPT = 2;
                                       State_X_2X_WAY = 3;
                                       State_EXSTART = 4;
                                       State_EXCHANGE = 5;
                                       State_LOADING = 6;
                                       State_FULL = 7;
                                    };
                                    State state = 5 [json_name = "state"];
                                    uint32 dead_due_timer = 6 [json_name = "dead-due-timer"];
                                    string dr = 7 [json_name = "dr"];
                                    string bdr = 8 [json_name = "bdr"];
                                    string up_time = 9 [json_name = "up-time"];
                                    string up_time_stamp = 10 [json_name = "up-time-stamp"];
                                    uint32 link_state_request_list_number = 11 [json_name = "link-state-request-list-number"];
                                    uint32 link_state_retransmission_list_number = 12 [json_name = "link-state-retransmission-list-number"];
                                    uint32 event = 13 [json_name = "event"];
                                    int32 if_id = 14 [json_name = "if-id"];
                                    uint32 received_higher_sequence_number = 15 [json_name = "received-higher-sequence-number"];
                                    uint32 received_low_sequence_number = 16 [json_name = "received-low-sequence-number"];
                                    string adj_sid = 17 [json_name = "adj-sid"];
                                    uint32 adj_weight = 18 [json_name = "adj-weight"];
                                    string adj_flags = 19 [json_name = "adj-flags"];
                                    message EndxSids {
                                       message EndxSid {
                                          string endx_sid = 1 [json_name = "endx-sid"];
                                          string flavor = 2 [json_name = "flavor"];
                                       }
                                       repeated EndxSid endx_sid = 1 [json_name = "endx-sid"];
                                    }
                                    EndxSids endx_sids = 20 [json_name = "endx-sids"];
                                    message GlobalAddrs {
                                       message GlobalAddr {
                                          string global_address = 1 [json_name = "global-address"];
                                       }
                                       repeated GlobalAddr global_addr = 1 [json_name = "global-addr"];
                                    }
                                    GlobalAddrs global_addrs = 21 [json_name = "global-addrs"];
                                 }
                                 repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                              }
                              Neighbors neighbors = 18 [json_name = "neighbors"];
                              message RequestQueues {
                                 message RequestQueue {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                    enum LsaType {
                                       INVALID_ENUM_VALUE_LsaType = 0;
                                       LsaType_ROUTER = 1;
                                       LsaType_NETWORK = 2;
                                       LsaType_SUMX_NET = 3;
                                       LsaType_SUMX_ASBR = 4;
                                       LsaType_EXTERNAL = 5;
                                       LsaType_LSAX_TYPEX_6 = 6;
                                       LsaType_REQX_LISTX_LINKX_LSA = 8;
                                       LsaType_OPQX_LINK = 9;
                                       LsaType_OPQX_AREA = 10;
                                       LsaType_OPQX_AS = 11;
                                       LsaType_UNKNOWNX_LSA = 16;
                                       LsaType_GRACEX_LSA = 27;
                                       LsaType_LINKX_LSA = 28;
                                       LsaType_INTRAX_AREAX_TEX_LSA = 30;
                                       LsaType_ROUTERX_LSA = 8193;
                                       LsaType_NETWORKX_LSA = 8194;
                                       LsaType_INTERX_AREAX_PREFIXX_LSA = 8195;
                                       LsaType_INTERX_AREAX_ROUTERX_LSA = 8196;
                                       LsaType_GROUPX_MEMBERSHIPX_LSA = 8198;
                                       LsaType_NSSAX_LSA = 8199;
                                       LsaType_INTRAX_AREAX_PREFIXX_LSA = 8201;
                                       LsaType_ASX_EXTERNALX_LSA = 16389;
                                       LsaType_RIX_LINKX_LSA = 32780;
                                       LsaType_EX_LINKX_LSA = 32808;
                                       LsaType_RIX_AREAX_LSA = 40972;
                                       LsaType_EX_ROUTERX_LSA = 40993;
                                       LsaType_EX_NETWORKX_LSA = 40994;
                                       LsaType_EX_INTERX_AREAX_PREFIXX_LSA = 40995;
                                       LsaType_EX_INTERX_AREAX_ROUTERX_LSA = 40996;
                                       LsaType_EX_NSSAX_LSA = 40999;
                                       LsaType_EX_INTRAX_AREAX_PREFIXX_LSA = 41001;
                                       LsaType_AREAX_LOCATORX_LSA = 41002;
                                       LsaType_RIX_ASX_LSA = 49164;
                                       LsaType_EX_ASX_EXTERNALX_LSA = 49189;
                                    };
                                    LsaType lsa_type = 3 [json_name = "lsa-type"];
                                    string link_state_id = 4 [json_name = "link-state-id"];
                                    string adv_router_id = 5 [json_name = "adv-router-id"];
                                    string router_id = 6 [json_name = "router-id"];
                                    string lsa_sequence = 7 [json_name = "lsa-sequence"];
                                    uint32 lsa_age = 8 [json_name = "lsa-age"];
                                    uint32 lsa_count = 9 [json_name = "lsa-count"];
                                 }
                                 repeated RequestQueue request_queue = 1 [json_name = "request-queue"];
                              }
                              RequestQueues request_queues = 19 [json_name = "request-queues"];
                              message RetransQueues {
                                 message RetransQueue {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    string nbr_ip_addr = 2 [json_name = "nbr-ip-addr"];
                                    enum LsaType {
                                       INVALID_ENUM_VALUE_LsaType = 0;
                                       LsaType_ROUTER = 1;
                                       LsaType_NETWORK = 2;
                                       LsaType_SUMX_NET = 3;
                                       LsaType_SUMX_ASBR = 4;
                                       LsaType_EXTERNAL = 5;
                                       LsaType_LSAX_TYPEX_6 = 6;
                                       LsaType_REQX_LISTX_LINKX_LSA = 8;
                                       LsaType_OPQX_LINK = 9;
                                       LsaType_OPQX_AREA = 10;
                                       LsaType_OPQX_AS = 11;
                                       LsaType_UNKNOWNX_LSA = 16;
                                       LsaType_GRACEX_LSA = 27;
                                       LsaType_LINKX_LSA = 28;
                                       LsaType_INTRAX_AREAX_TEX_LSA = 30;
                                       LsaType_ROUTERX_LSA = 8193;
                                       LsaType_NETWORKX_LSA = 8194;
                                       LsaType_INTERX_AREAX_PREFIXX_LSA = 8195;
                                       LsaType_INTERX_AREAX_ROUTERX_LSA = 8196;
                                       LsaType_GROUPX_MEMBERSHIPX_LSA = 8198;
                                       LsaType_NSSAX_LSA = 8199;
                                       LsaType_INTRAX_AREAX_PREFIXX_LSA = 8201;
                                       LsaType_ASX_EXTERNALX_LSA = 16389;
                                       LsaType_RIX_LINKX_LSA = 32780;
                                       LsaType_EX_LINKX_LSA = 32808;
                                       LsaType_RIX_AREAX_LSA = 40972;
                                       LsaType_EX_ROUTERX_LSA = 40993;
                                       LsaType_EX_NETWORKX_LSA = 40994;
                                       LsaType_EX_INTERX_AREAX_PREFIXX_LSA = 40995;
                                       LsaType_EX_INTERX_AREAX_ROUTERX_LSA = 40996;
                                       LsaType_EX_NSSAX_LSA = 40999;
                                       LsaType_EX_INTRAX_AREAX_PREFIXX_LSA = 41001;
                                       LsaType_AREAX_LOCATORX_LSA = 41002;
                                       LsaType_RIX_ASX_LSA = 49164;
                                       LsaType_EX_ASX_EXTERNALX_LSA = 49189;
                                    };
                                    LsaType lsa_type = 3 [json_name = "lsa-type"];
                                    string link_state_id = 4 [json_name = "link-state-id"];
                                    string adv_router_id = 5 [json_name = "adv-router-id"];
                                    string router_id = 6 [json_name = "router-id"];
                                    string lsa_sequence = 7 [json_name = "lsa-sequence"];
                                    uint32 lsa_age = 8 [json_name = "lsa-age"];
                                    uint32 lsa_count = 9 [json_name = "lsa-count"];
                                 }
                                 repeated RetransQueue retrans_queue = 1 [json_name = "retrans-queue"];
                              }
                              RetransQueues retrans_queues = 20 [json_name = "retrans-queues"];
                              message BfdStatistics {
                                 message BfdStatistic {
                                    string local_ipv6_addr = 1 [json_name = "local-ipv6-addr"];
                                    string remote_ipv6_addr = 2 [json_name = "remote-ipv6-addr"];
                                    string nbr_router_id = 3 [json_name = "nbr-router-id"];
                                    string router_id = 4 [json_name = "router-id"];
                                    enum BfdState {
                                       BfdState_UNKNOWN = 0;
                                       BfdState_DOWN = 1;
                                       BfdState_UP = 2;
                                    };
                                    BfdState bfd_state = 5 [json_name = "bfd-state"];
                                 }
                                 repeated BfdStatistic bfd_statistic = 1 [json_name = "bfd-statistic"];
                              }
                              BfdStatistics bfd_statistics = 21 [json_name = "bfd-statistics"];
                              message ErrorData {
                                 uint32 same_ip_pkt = 1 [json_name = "same-ip-pkt"];
                                 uint32 bad_pkt = 2 [json_name = "bad-pkt"];
                                 uint32 bad_version = 3 [json_name = "bad-version"];
                                 uint32 bad_chksum_pkt = 4 [json_name = "bad-chksum-pkt"];
                                 uint32 bad_area_pkt = 5 [json_name = "bad-area-pkt"];
                                 uint32 bad_virt_link = 6 [json_name = "bad-virt-link"];
                                 uint32 auth_type_fail = 7 [json_name = "auth-type-fail"];
                                 uint32 auth_key_fail = 8 [json_name = "auth-key-fail"];
                                 uint32 short_pkt_cnt = 9 [json_name = "short-pkt-cnt"];
                                 uint32 tx_err_cnt = 10 [json_name = "tx-err-cnt"];
                                 uint32 if_down_cnt = 11 [json_name = "if-down-cnt"];
                                 uint32 no_nbr = 12 [json_name = "no-nbr"];
                                 uint32 mis_hello_intl = 13 [json_name = "mis-hello-intl"];
                                 uint32 mis_dead_intl = 14 [json_name = "mis-dead-intl"];
                                 uint32 mis_ext_option = 15 [json_name = "mis-ext-option"];
                                 uint32 vlink_nbr_mis = 16 [json_name = "vlink-nbr-mis"];
                                 uint32 dd_mtu_mis = 17 [json_name = "dd-mtu-mis"];
                                 uint32 dd_opt_mis_cnt = 18 [json_name = "dd-opt-mis-cnt"];
                                 uint32 dd_router_id = 19 [json_name = "dd-router-id"];
                                 uint32 dd_unknown_lsa = 20 [json_name = "dd-unknown-lsa"];
                                 uint32 ack_bad_cnt = 21 [json_name = "ack-bad-cnt"];
                                 uint32 gr_invalid_lsa = 22 [json_name = "gr-invalid-lsa"];
                                 uint32 gr_invalid_pol = 23 [json_name = "gr-invalid-pol"];
                                 uint32 gr_invalid_prd = 24 [json_name = "gr-invalid-prd"];
                                 uint32 hello_dr_mis = 25 [json_name = "hello-dr-mis"];
                                 uint32 gen_ttl_err = 26 [json_name = "gen-ttl-err"];
                                 uint32 over_max_buf_len = 27 [json_name = "over-max-buf-len"];
                                 uint32 long_pkt = 28 [json_name = "long-pkt"];
                                 uint32 bad_link_local_addr_pkt = 29 [json_name = "bad-link-local-addr-pkt"];
                                 uint32 dest_ip_err_pkt = 30 [json_name = "dest-ip-err-pkt"];
                                 uint32 pass_intf_pkt = 31 [json_name = "pass-intf-pkt"];
                                 uint32 hello_nbr_limit = 32 [json_name = "hello-nbr-limit"];
                                 uint32 hello_hold_down = 33 [json_name = "hello-hold-down"];
                                 uint32 hello_memory_over = 34 [json_name = "hello-memory-over"];
                                 uint32 hello_cpu_over = 35 [json_name = "hello-cpu-over"];
                                 uint32 ack_duplicate_cnt = 36 [json_name = "ack-duplicate-cnt"];
                                 uint32 ack_unknown_lsa = 37 [json_name = "ack-unknown-lsa"];
                                 uint32 req_empty_cnt = 38 [json_name = "req-empty-cnt"];
                                 uint32 req_bad_cnt = 39 [json_name = "req-bad-cnt"];
                                 uint32 upd_lsa_chksum = 40 [json_name = "upd-lsa-chksum"];
                                 uint32 upd_unknow_lsa = 41 [json_name = "upd-unknow-lsa"];
                                 uint32 upd_self_newer = 42 [json_name = "upd-self-newer"];
                                 uint32 upd_less_recent = 43 [json_name = "upd-less-recent"];
                                 uint32 bad_instance_id = 44 [json_name = "bad-instance-id"];
                                 uint32 same_router_id_pkt = 45 [json_name = "same-router-id-pkt"];
                                 uint32 dd_nbr_low = 46 [json_name = "dd-nbr-low"];
                                 uint32 ack_nbr_low = 47 [json_name = "ack-nbr-low"];
                                 uint32 req_nbr_low = 48 [json_name = "req-nbr-low"];
                                 uint32 upd_nbr_low = 49 [json_name = "upd-nbr-low"];
                                 uint32 upd_min_lsa_arr = 50 [json_name = "upd-min-lsa-arr"];
                                 uint32 auth_seq_fail = 51 [json_name = "auth-seq-fail"];
                              }
                              ErrorData error_data = 22 [json_name = "error-data"];
                              message Ipv6Prefixess {
                                 message Ipv6Prefixes {
                                    string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                                    uint32 prefix_len = 2 [json_name = "prefix-len"];
                                 }
                                 repeated Ipv6Prefixes ipv6_prefixes = 1 [json_name = "ipv6-prefixes"];
                              }
                              Ipv6Prefixess ipv6_prefixess = 23 [json_name = "ipv6-prefixess"];
                              message Ipv6Prefixs {
                                 message Ipv6Prefix {
                                    string ipv6_address = 1 [json_name = "ipv6-address"];
                                    uint32 ipv6_mask_len = 2 [json_name = "ipv6-mask-len"];
                                 }
                                 repeated Ipv6Prefix ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                              }
                              Ipv6Prefixs ipv6_prefixs = 24 [json_name = "ipv6-prefixs"];
                              message Srlgs {
                                 message Srlg {
                                    uint32 group_id = 1 [json_name = "group-id"];
                                 }
                                 repeated Srlg srlg = 1 [json_name = "srlg"];
                              }
                              Srlgs srlgs = 25 [json_name = "srlgs"];
                           }
                           repeated Interface interface = 1 [json_name = "interface"];
                        }
                        Interfaces interfaces = 4 [json_name = "interfaces"];
                        message Stub {
                           bool backbone_peer_ignore = 1 [json_name = "backbone-peer-ignore"];
                           bool no_summary = 2 [json_name = "no-summary"];
                           int32 default_cost = 3 [json_name = "default-cost"];
                        }
                        Stub stub = 5 [json_name = "stub"];
                        message Nssa {
                           bool no_summary = 1 [json_name = "no-summary"];
                           bool translator_always = 2 [json_name = "translator-always"];
                           bool default_route_advertise = 3 [json_name = "default-route-advertise"];
                           bool backbone_peer_ignore = 4 [json_name = "backbone-peer-ignore"];
                           bool no_import_route = 5 [json_name = "no-import-route"];
                           bool set_n_bit = 6 [json_name = "set-n-bit"];
                           bool suppress_fa = 7 [json_name = "suppress-fa"];
                           uint32 translator_interval = 8 [json_name = "translator-interval"];
                           int32 default_cost = 9 [json_name = "default-cost"];
                           uint32 tag = 10 [json_name = "tag"];
                           uint32 type = 11 [json_name = "type"];
                           uint32 cost = 12 [json_name = "cost"];
                        }
                        Nssa nssa = 6 [json_name = "nssa"];
                        message Authentication {
                           enum Mode {
                              Mode_NONE = 0;
                              Mode_KEYCHAIN = 1;
                              Mode_HMACX_SHA256 = 2;
                              Mode_HMACX_SM3 = 4;
                           };
                           Mode mode = 1 [json_name = "mode"];
                           uint32 key_id = 2 [json_name = "key-id"];
                           string auth_text = 3 [json_name = "auth-text"];
                           string key_chain_name = 4 [json_name = "key-chain-name"];
                        }
                        Authentication authentication = 7 [json_name = "authentication"];
                        message AbrSummaryPrefixs {
                           message AbrSummaryPrefix {
                              string prefix = 1 [json_name = "prefix"];
                              uint32 network_mask = 2 [json_name = "network-mask"];
                              uint32 hold_max_cost = 3 [json_name = "hold-max-cost"];
                              bool advertise = 4 [json_name = "advertise"];
                              message Cost_CostValue {
                                 uint32 cost_value = 1 [json_name = "cost-value"];
                              }
                              oneof Cost {
                                 Cost_CostValue cost_cost_value = 5 [json_name = "cost-value"];
                              }
                           }
                           repeated AbrSummaryPrefix abr_summary_prefix = 1 [json_name = "abr-summary-prefix"];
                        }
                        AbrSummaryPrefixs abr_summary_prefixs = 8 [json_name = "abr-summary-prefixs"];
                        message Filters {
                           message Filter {
                              enum Mode {
                                 Mode_FILTERX_IMPORT = 0;
                                 Mode_FILTERX_EXPORT = 1;
                              };
                              Mode mode = 1 [json_name = "mode"];
                              message PolicyType_BasicAcl {
                                 string name_or_num = 1 [json_name = "name-or-num"];
                              }
                              message PolicyType_Ipv6Prefix {
                                 string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                              }
                              message PolicyType_RoutePolicy {
                                 string route_policy = 1 [json_name = "route-policy"];
                              }
                              message PolicyType_RouteFilter {
                                 string route_filter = 1 [json_name = "route-filter"];
                              }
                              oneof PolicyType {
                                 PolicyType_BasicAcl policy_type_basic_acl = 2 [json_name = "basic-acl"];
                                 PolicyType_Ipv6Prefix policy_type_ipv6_prefix = 3 [json_name = "ipv6-prefix"];
                                 PolicyType_RoutePolicy policy_type_route_policy = 4 [json_name = "route-policy"];
                                 PolicyType_RouteFilter policy_type_route_filter = 5 [json_name = "route-filter"];
                              }
                           }
                           repeated Filter filter = 1 [json_name = "filter"];
                        }
                        Filters filters = 9 [json_name = "filters"];
                        message Attribute {
                           uint32 intf_cnt = 1 [json_name = "intf-cnt"];
                           uint32 unknown_lsa_cnt = 2 [json_name = "unknown-lsa-cnt"];
                           enum Status {
                              Status_DOWN = 0;
                              Status_UP = 1;
                           };
                           Status status = 3 [json_name = "status"];
                           uint32 lsa_cnt = 4 [json_name = "lsa-cnt"];
                           string lsa_checksum = 5 [json_name = "lsa-checksum"];
                           uint32 bdr_cnt = 6 [json_name = "bdr-cnt"];
                           uint32 as_bdr_cnt = 7 [json_name = "as-bdr-cnt"];
                           enum RouterIdState {
                              RouterIdState_NORMAL = 0;
                              RouterIdState_WAITX_SELECT = 1;
                              RouterIdState_SELECTING = 2;
                              RouterIdState_CHANGED = 3;
                              RouterIdState_SUSPEND = 4;
                              RouterIdState_NONE = 5;
                           };
                           RouterIdState router_id_state = 8 [json_name = "router-id-state"];
                           uint32 next_spf_trig = 9 [json_name = "next-spf-trig"];
                           enum ImportLimitStatus {
                              ImportLimitStatus_DISABLE = 0;
                              ImportLimitStatus_ENABLE = 1;
                              ImportLimitStatus_ALARM = 2;
                              ImportLimitStatus_OVERX_LIMIT = 3;
                           };
                           ImportLimitStatus import_limit_status = 10 [json_name = "import-limit-status"];
                           uint32 nssa_lsa_cnt = 11 [json_name = "nssa-lsa-cnt"];
                           enum AuthenMode {
                              AuthenMode_NONE = 0;
                              AuthenMode_KEYCHAIN = 1;
                              AuthenMode_HMACX_SHA256 = 2;
                              AuthenMode_HMACX_SM3 = 4;
                           };
                           AuthenMode authen_mode = 12 [json_name = "authen-mode"];
                        }
                        Attribute attribute = 10 [json_name = "attribute"];
                        message TrafficEng {
                           bool enable = 1 [json_name = "enable"];
                        }
                        TrafficEng traffic_eng = 11 [json_name = "traffic-eng"];
                        message TrafficEngDatas {
                           message TrafficEngData {
                              string link_state_id = 1 [json_name = "link-state-id"];
                              string adv_router_id = 2 [json_name = "adv-router-id"];
                              enum LsaType {
                                 INVALID_ENUM_VALUE_LsaType = 0;
                                 LsaType_ROUTER = 1;
                                 LsaType_NETWORK = 2;
                                 LsaType_SUMX_NET = 3;
                                 LsaType_SUMX_ASBR = 4;
                                 LsaType_EXTERNAL = 5;
                                 LsaType_LSAX_TYPEX_6 = 6;
                                 LsaType_REQX_LISTX_LINKX_LSA = 8;
                                 LsaType_OPQX_LINK = 9;
                                 LsaType_OPQX_AREA = 10;
                                 LsaType_OPQX_AS = 11;
                                 LsaType_UNKNOWNX_LSA = 16;
                                 LsaType_GRACEX_LSA = 27;
                                 LsaType_LINKX_LSA = 28;
                                 LsaType_INTRAX_AREAX_TEX_LSA = 30;
                                 LsaType_ROUTERX_LSA = 8193;
                                 LsaType_NETWORKX_LSA = 8194;
                                 LsaType_INTERX_AREAX_PREFIXX_LSA = 8195;
                                 LsaType_INTERX_AREAX_ROUTERX_LSA = 8196;
                                 LsaType_GROUPX_MEMBERSHIPX_LSA = 8198;
                                 LsaType_NSSAX_LSA = 8199;
                                 LsaType_INTRAX_AREAX_PREFIXX_LSA = 8201;
                                 LsaType_ASX_EXTERNALX_LSA = 16389;
                                 LsaType_RIX_LINKX_LSA = 32780;
                                 LsaType_EX_LINKX_LSA = 32808;
                                 LsaType_RIX_AREAX_LSA = 40972;
                                 LsaType_EX_ROUTERX_LSA = 40993;
                                 LsaType_EX_NETWORKX_LSA = 40994;
                                 LsaType_EX_INTERX_AREAX_PREFIXX_LSA = 40995;
                                 LsaType_EX_INTERX_AREAX_ROUTERX_LSA = 40996;
                                 LsaType_EX_NSSAX_LSA = 40999;
                                 LsaType_EX_INTRAX_AREAX_PREFIXX_LSA = 41001;
                                 LsaType_AREAX_LOCATORX_LSA = 41002;
                                 LsaType_RIX_ASX_LSA = 49164;
                                 LsaType_EX_ASX_EXTERNALX_LSA = 49189;
                              };
                              LsaType lsa_type = 3 [json_name = "lsa-type"];
                              string time_stamp = 4 [json_name = "time-stamp"];
                              uint32 lsa_length = 5 [json_name = "lsa-length"];
                              message RouterTlvDatas {
                                 string router_ipv6_addr = 1 [json_name = "router-ipv6-addr"];
                              }
                              RouterTlvDatas router_tlv_datas = 6 [json_name = "router-tlv-datas"];
                              message LinkTlvDatas {
                                 enum LinkType {
                                    LinkType_NONE = 0;
                                    LinkType_P2P = 1;
                                    LinkType_MULTIX_ACCESS = 2;
                                 };
                                 LinkType link_type = 1 [json_name = "link-type"];
                                 string nbr_intf_id = 2 [json_name = "nbr-intf-id"];
                                 string nbr_router_id = 3 [json_name = "nbr-router-id"];
                                 uint32 te_metric = 4 [json_name = "te-metric"];
                                 uint64 max_bw = 5 [json_name = "max-bw"];
                                 uint64 max_res_bw = 6 [json_name = "max-res-bw"];
                                 string admin_group = 7 [json_name = "admin-group"];
                                 uint64 unreserved_bw0 = 8 [json_name = "unreserved-bw0"];
                                 uint64 unreserved_bw1 = 9 [json_name = "unreserved-bw1"];
                                 uint64 unreserved_bw2 = 10 [json_name = "unreserved-bw2"];
                                 uint64 unreserved_bw3 = 11 [json_name = "unreserved-bw3"];
                                 uint64 unreserved_bw4 = 12 [json_name = "unreserved-bw4"];
                                 uint64 unreserved_bw5 = 13 [json_name = "unreserved-bw5"];
                                 uint64 unreserved_bw6 = 14 [json_name = "unreserved-bw6"];
                                 uint64 unreserved_bw7 = 15 [json_name = "unreserved-bw7"];
                                 string bw_con_model = 16 [json_name = "bw-con-model"];
                                 uint64 bw_con0 = 17 [json_name = "bw-con0"];
                                 uint64 bw_con1 = 18 [json_name = "bw-con1"];
                                 uint64 bw_con2 = 19 [json_name = "bw-con2"];
                                 uint64 bw_con3 = 20 [json_name = "bw-con3"];
                                 uint64 bw_con4 = 21 [json_name = "bw-con4"];
                                 uint64 bw_con5 = 22 [json_name = "bw-con5"];
                                 uint64 bw_con6 = 23 [json_name = "bw-con6"];
                                 uint64 bw_con7 = 24 [json_name = "bw-con7"];
                                 message Srlgs {
                                    message Srlg {
                                       uint32 srlg14 = 1 [json_name = "srlg"];
                                    }
                                    repeated Srlg srlg = 1 [json_name = "srlg"];
                                 }
                                 Srlgs srlgs = 25 [json_name = "srlgs"];
                                 message LocalIntfIpv6Addrs {
                                    message LocalIntfIpv6Addr {
                                       string local_intf_ipv6_addr = 1 [json_name = "local-intf-ipv6-addr"];
                                    }
                                    repeated LocalIntfIpv6Addr local_intf_ipv6_addr = 1 [json_name = "local-intf-ipv6-addr"];
                                 }
                                 LocalIntfIpv6Addrs local_intf_ipv6_addrs = 26 [json_name = "local-intf-ipv6-addrs"];
                              }
                              LinkTlvDatas link_tlv_datas = 7 [json_name = "link-tlv-datas"];
                           }
                           repeated TrafficEngData traffic_eng_data = 1 [json_name = "traffic-eng-data"];
                        }
                        TrafficEngDatas traffic_eng_datas = 12 [json_name = "traffic-eng-datas"];
                        message Topologys {
                           message Topology {
                              enum NodeType {
                                 INVALID_ENUM_VALUE_NodeType = 0;
                                 NodeType_ROUTER = 1;
                                 NodeType_NETWORK = 2;
                              };
                              NodeType node_type = 1 [json_name = "node-type"];
                              string router_id = 2 [json_name = "router-id"];
                              uint32 node_id = 3 [json_name = "node-id"];
                              uint32 cost = 4 [json_name = "cost"];
                              message NexthopDatas {
                                 message NexthopData {
                                    string nexthop_id = 1 [json_name = "nexthop-id"];
                                    string if_name = 2 [json_name = "if-name"];
                                    string avoid_microloop_stack = 3 [json_name = "avoid-microloop-stack"];
                                    string parent_router_id = 4 [json_name = "parent-router-id"];
                                    string parent_end = 5 [json_name = "parent-end"];
                                    string parent_end_x = 6 [json_name = "parent-end-x"];
                                    string end_sid = 7 [json_name = "end-sid"];
                                    string endx_sid = 8 [json_name = "endx-sid"];
                                 }
                                 repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                              }
                              NexthopDatas nexthop_datas = 5 [json_name = "nexthop-datas"];
                           }
                           repeated Topology topology = 1 [json_name = "topology"];
                        }
                        Topologys topologys = 13 [json_name = "topologys"];
                     }
                     repeated Area area = 1 [json_name = "area"];
                  }
                  Areas areas = 16 [json_name = "areas"];
                  enum FaMode {
                     FaMode_DISABLE = 0;
                     FaMode_STANDARD = 1;
                     FaMode_ZEROX_TRANSLATE = 2;
                  };
                  FaMode fa_mode = 17 [json_name = "fa-mode"];
                  bool silent_all_interface = 18 [json_name = "silent-all-interface"];
                  bool sham_hello = 19 [json_name = "sham-hello"];
                  uint32 max_link_cost = 20 [json_name = "max-link-cost"];
                  uint32 maxage_lsa = 21 [json_name = "maxage-lsa"];
                  message Bandwidth {
                     uint32 reference_value = 1 [json_name = "reference-value"];
                  }
                  Bandwidth bandwidth = 22 [json_name = "bandwidth"];
                  message StubRouter {
                     enum Flag {
                        Flag_NOX_CONFIG = 0;
                        Flag_STUBX_ONX_HAND = 1;
                        Flag_STUBX_ONX_BOOT = 2;
                     };
                     Flag flag = 1 [json_name = "flag"];
                     uint32 interval = 2 [json_name = "interval"];
                     bool include_stub = 3 [json_name = "include-stub"];
                     bool external_lsa = 4 [json_name = "external-lsa"];
                     uint32 external_cost = 5 [json_name = "external-cost"];
                     bool summary_lsa = 6 [json_name = "summary-lsa"];
                     uint32 summary_cost = 7 [json_name = "summary-cost"];
                  }
                  StubRouter stub_router = 23 [json_name = "stub-router"];
                  message SpfControl {
                     uint32 max_load_balancing = 1 [json_name = "max-load-balancing"];
                  }
                  SpfControl spf_control = 24 [json_name = "spf-control"];
                  message AsbrSummaryPrefixs {
                     message AsbrSummaryPrefix {
                        string prefix = 1 [json_name = "prefix"];
                        uint32 network_mask = 2 [json_name = "network-mask"];
                        uint32 cost = 3 [json_name = "cost"];
                        uint32 tag = 4 [json_name = "tag"];
                        uint32 distribute_delay = 5 [json_name = "distribute-delay"];
                        bool advertise = 6 [json_name = "advertise"];
                     }
                     repeated AsbrSummaryPrefix asbr_summary_prefix = 1 [json_name = "asbr-summary-prefix"];
                  }
                  AsbrSummaryPrefixs asbr_summary_prefixs = 25 [json_name = "asbr-summary-prefixs"];
                  message DefaultRoute {
                     uint32 cost = 1 [json_name = "cost"];
                     uint32 tag = 2 [json_name = "tag"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_TYPE1 = 1;
                        Type_TYPE2 = 2;
                     };
                     Type type = 3 [json_name = "type"];
                     uint32 distribute_delay = 4 [json_name = "distribute-delay"];
                     message Mode_PermitCalculateOther {
                        bool permit_calculate_other = 1 [json_name = "permit-calculate-other"];
                     }
                     message Mode_Always {
                        bool always9 = 1 [json_name = "always"];
                     }
                     oneof Mode {
                        Mode_PermitCalculateOther mode_permit_calculate_other = 5 [json_name = "permit-calculate-other"];
                        Mode_Always mode_always = 6 [json_name = "always"];
                     }
                     message PolicyType_RoutePolicyName {
                        string route_policy_name = 1 [json_name = "route-policy-name"];
                     }
                     message PolicyType_RouteFilterName {
                        string route_filter_name = 1 [json_name = "route-filter-name"];
                     }
                     oneof PolicyType {
                        PolicyType_RoutePolicyName policy_type_route_policy_name = 7 [json_name = "route-policy-name"];
                        PolicyType_RouteFilterName policy_type_route_filter_name = 8 [json_name = "route-filter-name"];
                     }
                     uint32 preference = 9 [json_name = "preference"];
                  }
                  DefaultRoute default_route = 26 [json_name = "default-route"];
                  message RoutePreferences {
                     message RoutePreference {
                        enum RouteType {
                           INVALID_ENUM_VALUE_RouteType = 0;
                           RouteType_DEFAULT = 1;
                           RouteType_ASE = 2;
                        };
                        RouteType route_type = 1 [json_name = "route-type"];
                        uint32 preference = 2 [json_name = "preference"];
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 3 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 4 [json_name = "route-filter-name"];
                        }
                     }
                     repeated RoutePreference route_preference = 1 [json_name = "route-preference"];
                  }
                  RoutePreferences route_preferences = 27 [json_name = "route-preferences"];
                  message NexthopWeights {
                     message NexthopWeight {
                        string ip_address = 1 [json_name = "ip-address"];
                        string if_name = 2 [json_name = "if-name"];
                        uint32 weight = 3 [json_name = "weight"];
                     }
                     repeated NexthopWeight nexthop_weight = 1 [json_name = "nexthop-weight"];
                  }
                  NexthopWeights nexthop_weights = 28 [json_name = "nexthop-weights"];
                  message PrefixPrioritys {
                     message PrefixPriority {
                        enum Priority {
                           INVALID_ENUM_VALUE_Priority = 0;
                           Priority_CRITICAL = 1;
                           Priority_HIGH = 2;
                           Priority_MEDIUM = 3;
                           Priority_VERYX_LOW = 5;
                        };
                        Priority priority = 1 [json_name = "priority"];
                        string ip_prefix = 2 [json_name = "ip-prefix"];
                     }
                     repeated PrefixPriority prefix_priority = 1 [json_name = "prefix-priority"];
                  }
                  PrefixPrioritys prefix_prioritys = 29 [json_name = "prefix-prioritys"];
                  message Authentication {
                     enum Mode {
                        Mode_NONE = 0;
                        Mode_KEYCHAIN = 1;
                        Mode_HMACX_SHA256 = 2;
                        Mode_HMACX_SM3 = 4;
                     };
                     Mode mode = 1 [json_name = "mode"];
                     uint32 key_id = 2 [json_name = "key-id"];
                     string text = 3 [json_name = "text"];
                     string key_chain_name = 4 [json_name = "key-chain-name"];
                  }
                  Authentication authentication = 30 [json_name = "authentication"];
                  message HelperRole {
                     bool planned_only = 1 [json_name = "planned-only"];
                     bool ignore_external_lsa = 2 [json_name = "ignore-external-lsa"];
                     uint32 period = 3 [json_name = "period"];
                     message FilterType_AclNameOrNum {
                        string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
                     }
                     message FilterType_IpPrefixName {
                        string ip_prefix_name = 1 [json_name = "ip-prefix-name"];
                     }
                     oneof FilterType {
                        FilterType_AclNameOrNum filter_type_acl_name_or_num = 4 [json_name = "acl-name-or-num"];
                        FilterType_IpPrefixName filter_type_ip_prefix_name = 5 [json_name = "ip-prefix-name"];
                     }
                  }
                  HelperRole helper_role = 31 [json_name = "helper-role"];
                  message FilterImport {
                     message PolicyType_BasicAcl6 {
                        string name_or_num = 1 [json_name = "name-or-num"];
                     }
                     message PolicyType_IpPrefix6 {
                        string ip_prefix6 = 1 [json_name = "ip-prefix6"];
                     }
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_BasicAcl6 policy_type_basic_acl6 = 1 [json_name = "basic-acl6"];
                        PolicyType_IpPrefix6 policy_type_ip_prefix6 = 2 [json_name = "ip-prefix6"];
                        PolicyType_RoutePolicy policy_type_route_policy = 3 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 4 [json_name = "route-filter"];
                     }
                  }
                  FilterImport filter_import = 32 [json_name = "filter-import"];
                  message FilterExports {
                     message FilterExport {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_BGP = 6;
                           Protocol_OSPFV3 = 7;
                           Protocol_RIPNG = 8;
                           Protocol_DEFAULT = 9;
                           Protocol_UNR = 11;
                           Protocol_OPR = 14;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 protocol_id = 2 [json_name = "protocol-id"];
                        message PolicyType_BasicAcl6 {
                           string name_or_num = 1 [json_name = "name-or-num"];
                        }
                        message PolicyType_IpPrefix6 {
                           string ip_prefix6 = 1 [json_name = "ip-prefix6"];
                        }
                        oneof PolicyType {
                           PolicyType_BasicAcl6 policy_type_basic_acl6 = 3 [json_name = "basic-acl6"];
                           PolicyType_IpPrefix6 policy_type_ip_prefix6 = 4 [json_name = "ip-prefix6"];
                        }
                     }
                     repeated FilterExport filter_export = 1 [json_name = "filter-export"];
                  }
                  FilterExports filter_exports = 33 [json_name = "filter-exports"];
                  message Frr {
                     bool enable = 1 [json_name = "enable"];
                     bool lfa_enable = 2 [json_name = "lfa-enable"];
                     message Tiebreaker {
                        uint32 node_protect = 1 [json_name = "node-protect"];
                        uint32 lowest_cost = 2 [json_name = "lowest-cost"];
                        uint32 srlg_disjoint = 3 [json_name = "srlg-disjoint"];
                     }
                     Tiebreaker tiebreaker = 3 [json_name = "tiebreaker"];
                     message RoutePolicy {
                        message PolicyType_RoutePolicyName {
                           string route_policy_name = 1 [json_name = "route-policy-name"];
                        }
                        message PolicyType_RouteFilterName {
                           string route_filter_name = 1 [json_name = "route-filter-name"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicyName policy_type_route_policy_name = 1 [json_name = "route-policy-name"];
                           PolicyType_RouteFilterName policy_type_route_filter_name = 2 [json_name = "route-filter-name"];
                        }
                     }
                     RoutePolicy route_policy = 4 [json_name = "route-policy"];
                     bool tilfa_enable = 5 [json_name = "tilfa-enable"];
                  }
                  Frr frr = 34 [json_name = "frr"];
                  message SilentInterfaces {
                     message SilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated SilentInterface silent_interface = 1 [json_name = "silent-interface"];
                  }
                  SilentInterfaces silent_interfaces = 35 [json_name = "silent-interfaces"];
                  message UndoSilentInterfaces {
                     message UndoSilentInterface {
                        string if_name = 1 [json_name = "if-name"];
                     }
                     repeated UndoSilentInterface undo_silent_interface = 1 [json_name = "undo-silent-interface"];
                  }
                  UndoSilentInterfaces undo_silent_interfaces = 36 [json_name = "undo-silent-interfaces"];
                  message HostName {
                     bool enable = 1 [json_name = "enable"];
                     string name = 2 [json_name = "name"];
                  }
                  HostName host_name = 37 [json_name = "host-name"];
                  message CostBindings {
                     message CostBinding {
                        string router_id = 1 [json_name = "router-id"];
                        string if_name = 2 [json_name = "if-name"];
                     }
                     repeated CostBinding cost_binding = 1 [json_name = "cost-binding"];
                  }
                  CostBindings cost_bindings = 38 [json_name = "cost-bindings"];
                  message Srv6 {
                     message Locators {
                        message Locator {
                           string locator_name = 1 [json_name = "locator-name"];
                           bool auto_sid = 2 [json_name = "auto-sid"];
                        }
                        repeated Locator locator = 1 [json_name = "locator"];
                     }
                     Locators locators = 1 [json_name = "locators"];
                     message AvoidMicroloop {
                        bool enable = 1 [json_name = "enable"];
                        uint32 delay_value = 2 [json_name = "delay-value"];
                     }
                     AvoidMicroloop avoid_microloop = 2 [json_name = "avoid-microloop"];
                  }
                  Srv6 srv6 = 39 [json_name = "srv6"];
                  message BgpLs {
                     bool enable = 1 [json_name = "enable"];
                     uint32 identifier = 2 [json_name = "identifier"];
                  }
                  BgpLs bgp_ls = 40 [json_name = "bgp-ls"];
                  message Attribute {
                     string effective_router_id = 1 [json_name = "effective-router-id"];
                     uint32 spf_count = 2 [json_name = "spf-count"];
                     uint32 area_count = 3 [json_name = "area-count"];
                     uint32 exchange_and_loading_nbr = 4 [json_name = "exchange-and-loading-nbr"];
                     string ase_lsa_chksum = 5 [json_name = "ase-lsa-chksum"];
                     uint32 as_unknown_lsa_cnt = 6 [json_name = "as-unknown-lsa-cnt"];
                     string as_unknown_lsa_chksum = 7 [json_name = "as-unknown-lsa-chksum"];
                     uint32 full_nbr_count = 8 [json_name = "full-nbr-count"];
                     uint32 non_refresh_lsa_cnt = 9 [json_name = "non-refresh-lsa-cnt"];
                     uint32 non_full_nbr_cnt = 10 [json_name = "non-full-nbr-cnt"];
                     uint32 lsa_org_cnt = 11 [json_name = "lsa-org-cnt"];
                     uint32 lsa_recvd_cnt = 12 [json_name = "lsa-recvd-cnt"];
                     uint32 ase_lsa_count = 13 [json_name = "ase-lsa-count"];
                     enum ImportLimitStatus {
                        ImportLimitStatus_DISABLE = 0;
                        ImportLimitStatus_ENABLE = 1;
                        ImportLimitStatus_ALARM = 2;
                        ImportLimitStatus_OVERX_LIMIT = 3;
                     };
                     ImportLimitStatus import_limit_status = 14 [json_name = "import-limit-status"];
                     uint32 self_ase_lsa_cnt = 15 [json_name = "self-ase-lsa-cnt"];
                     enum AuthenMode {
                        AuthenMode_NONE = 0;
                        AuthenMode_KEYCHAIN = 1;
                        AuthenMode_HMACX_SHA256 = 2;
                        AuthenMode_HMACX_SM3 = 4;
                     };
                     AuthenMode authen_mode = 16 [json_name = "authen-mode"];
                  }
                  Attribute attribute = 41 [json_name = "attribute"];
                  message BfdStatDatas {
                     message BfdStatData {
                        string area_id = 1 [json_name = "area-id"];
                        string nbr_router_id = 2 [json_name = "nbr-router-id"];
                        uint32 instance_id = 3 [json_name = "instance-id"];
                        string if_name = 4 [json_name = "if-name"];
                        enum State {
                           State_UNKNOWN = 0;
                           State_DOWN = 1;
                           State_UP = 2;
                        };
                        State state = 5 [json_name = "state"];
                        string local_ipv6_addr = 6 [json_name = "local-ipv6-addr"];
                        string remote_ipv6_addr = 7 [json_name = "remote-ipv6-addr"];
                     }
                     repeated BfdStatData bfd_stat_data = 1 [json_name = "bfd-stat-data"];
                  }
                  BfdStatDatas bfd_stat_datas = 42 [json_name = "bfd-stat-datas"];
                  message ErrorProcessData {
                     uint32 same_ip_pkt = 1 [json_name = "same-ip-pkt"];
                     uint32 bad_pkt = 2 [json_name = "bad-pkt"];
                     uint32 bad_version = 3 [json_name = "bad-version"];
                     uint32 bad_chksum_pkt = 4 [json_name = "bad-chksum-pkt"];
                     uint32 bad_area_pkt = 5 [json_name = "bad-area-pkt"];
                     uint32 bad_virt_link = 6 [json_name = "bad-virt-link"];
                     uint32 auth_type_fail = 7 [json_name = "auth-type-fail"];
                     uint32 auth_key_fail = 8 [json_name = "auth-key-fail"];
                     uint32 short_pkt_cnt = 9 [json_name = "short-pkt-cnt"];
                     uint32 tx_err_cnt = 10 [json_name = "tx-err-cnt"];
                     uint32 if_down_cnt = 11 [json_name = "if-down-cnt"];
                     uint32 no_nbr = 12 [json_name = "no-nbr"];
                     uint32 mis_hello_intl = 13 [json_name = "mis-hello-intl"];
                     uint32 mis_dead_intl = 14 [json_name = "mis-dead-intl"];
                     uint32 mis_ext_option = 15 [json_name = "mis-ext-option"];
                     uint32 vlink_nbr_mis = 16 [json_name = "vlink-nbr-mis"];
                     string router_id = 17 [json_name = "router-id"];
                     uint32 dd_mtu_mis = 18 [json_name = "dd-mtu-mis"];
                     uint32 dd_opt_mis_cnt = 19 [json_name = "dd-opt-mis-cnt"];
                     uint32 dd_router_id = 20 [json_name = "dd-router-id"];
                     uint32 dd_unknown_lsa = 21 [json_name = "dd-unknown-lsa"];
                     uint32 ack_bad_cnt = 22 [json_name = "ack-bad-cnt"];
                     uint32 gr_invalid_lsa = 23 [json_name = "gr-invalid-lsa"];
                     uint32 gr_invalid_pol = 24 [json_name = "gr-invalid-pol"];
                     uint32 gr_invalid_prd = 25 [json_name = "gr-invalid-prd"];
                     uint32 hello_dr_mis = 26 [json_name = "hello-dr-mis"];
                     uint32 gen_ttl_err = 27 [json_name = "gen-ttl-err"];
                     uint32 over_max_buf_len = 28 [json_name = "over-max-buf-len"];
                     uint32 long_pkt = 29 [json_name = "long-pkt"];
                     uint32 bad_link_local_addr_pkt = 30 [json_name = "bad-link-local-addr-pkt"];
                     uint32 dest_ip_err_pkt = 31 [json_name = "dest-ip-err-pkt"];
                     uint32 pass_intf_pkt = 32 [json_name = "pass-intf-pkt"];
                     uint32 hello_nbr_limit = 33 [json_name = "hello-nbr-limit"];
                     uint32 hello_hold_down = 34 [json_name = "hello-hold-down"];
                     uint32 hello_memory_over = 35 [json_name = "hello-memory-over"];
                     uint32 hello_cpu_over = 36 [json_name = "hello-cpu-over"];
                     uint32 dd_nbr_limit = 37 [json_name = "dd-nbr-limit"];
                     uint32 dd_cpu_over = 38 [json_name = "dd-cpu-over"];
                     uint32 ack_duplicate_cnt = 39 [json_name = "ack-duplicate-cnt"];
                     uint32 ack_unknown_lsa = 40 [json_name = "ack-unknown-lsa"];
                     uint32 req_empty_cnt = 41 [json_name = "req-empty-cnt"];
                     uint32 req_bad_cnt = 42 [json_name = "req-bad-cnt"];
                     uint32 upd_lsa_chksum = 43 [json_name = "upd-lsa-chksum"];
                     uint32 upd_unknow_lsa = 44 [json_name = "upd-unknow-lsa"];
                     uint32 upd_self_newer = 45 [json_name = "upd-self-newer"];
                     uint32 upd_less_recent = 46 [json_name = "upd-less-recent"];
                     uint32 bad_instance_id = 47 [json_name = "bad-instance-id"];
                     uint32 same_router_id_pkt = 48 [json_name = "same-router-id-pkt"];
                     uint32 dd_nbr_low = 49 [json_name = "dd-nbr-low"];
                     uint32 ack_nbr_low = 50 [json_name = "ack-nbr-low"];
                     uint32 req_nbr_low = 51 [json_name = "req-nbr-low"];
                     uint32 upd_nbr_low = 52 [json_name = "upd-nbr-low"];
                     uint32 upd_min_lsa_arr = 53 [json_name = "upd-min-lsa-arr"];
                     uint32 auth_seq_fail = 54 [json_name = "auth-seq-fail"];
                  }
                  ErrorProcessData error_process_data = 43 [json_name = "error-process-data"];
                  message DnBit {
                     bool set_ase = 1 [json_name = "set-ase"];
                     bool set_nssa = 2 [json_name = "set-nssa"];
                     bool set_summary = 3 [json_name = "set-summary"];
                     bool check_ase = 4 [json_name = "check-ase"];
                     bool check_nssa = 5 [json_name = "check-nssa"];
                     bool check_summary = 6 [json_name = "check-summary"];
                     message SummaryRouterIds {
                        message SummaryRouterId {
                           string router_id = 1 [json_name = "router-id"];
                        }
                        repeated SummaryRouterId summary_router_id = 1 [json_name = "summary-router-id"];
                     }
                     SummaryRouterIds summary_router_ids = 7 [json_name = "summary-router-ids"];
                  }
                  DnBit dn_bit = 44 [json_name = "dn-bit"];
                  message DynamicHostnames {
                     message DynamicHostname {
                        enum Scope {
                           Scope_LINKX_SCOPE = 0;
                           Scope_AREAX_SCOPE = 1;
                           Scope_ASX_SCOPE = 2;
                        };
                        Scope scope = 1 [json_name = "scope"];
                        string area_id = 2 [json_name = "area-id"];
                        string router_id = 3 [json_name = "router-id"];
                        string host_name = 4 [json_name = "host-name"];
                     }
                     repeated DynamicHostname dynamic_hostname = 1 [json_name = "dynamic-hostname"];
                  }
                  DynamicHostnames dynamic_hostnames = 45 [json_name = "dynamic-hostnames"];
                  message Neighbors {
                     message Neighbor {
                        string area_id = 1 [json_name = "area-id"];
                        string nbr_router_id = 2 [json_name = "nbr-router-id"];
                        string if_name = 3 [json_name = "if-name"];
                        int32 nbr_priority = 4 [json_name = "nbr-priority"];
                        enum NbrState {
                           NbrState_DOWN = 0;
                           NbrState_ATTEMPT = 1;
                           NbrState_INIT = 2;
                           NbrState_X_2X_WAY = 3;
                           NbrState_EXSTART = 4;
                           NbrState_EXCHANGE = 5;
                           NbrState_LOADING = 6;
                           NbrState_FULL = 7;
                        };
                        NbrState nbr_state = 5 [json_name = "nbr-state"];
                        enum NbrIntfStatus {
                           NbrIntfStatus_NONE = 0;
                           NbrIntfStatus_WAITING = 1;
                           NbrIntfStatus_PX_2X_P = 2;
                           NbrIntfStatus_DR = 3;
                           NbrIntfStatus_BACKUP = 4;
                           NbrIntfStatus_DRX_OTHER = 5;
                        };
                        NbrIntfStatus nbr_intf_status = 6 [json_name = "nbr-intf-status"];
                        uint32 dead_due_timer = 7 [json_name = "dead-due-timer"];
                        uint32 instance_id = 8 [json_name = "instance-id"];
                        string host_name = 9 [json_name = "host-name"];
                        string dns_host_name = 10 [json_name = "dns-host-name"];
                        message Datas {
                           message Data {
                              string nbr_ipv6_addr = 1 [json_name = "nbr-ipv6-addr"];
                              string nbr_dr = 2 [json_name = "nbr-dr"];
                              string nbr_bdr = 3 [json_name = "nbr-bdr"];
                              string nbr_options = 4 [json_name = "nbr-options"];
                              string nbr_up_time = 5 [json_name = "nbr-up-time"];
                              string up_time_stamp = 6 [json_name = "up-time-stamp"];
                              uint32 ls_request_num = 7 [json_name = "ls-request-num"];
                              uint32 ls_retrans_num = 8 [json_name = "ls-retrans-num"];
                              uint32 events = 9 [json_name = "events"];
                              int32 nbr_if_id = 10 [json_name = "nbr-if-id"];
                              uint32 nbr_auth_seq_high = 11 [json_name = "nbr-auth-seq-high"];
                              uint32 nbr_auth_seq_low = 12 [json_name = "nbr-auth-seq-low"];
                           }
                           repeated Data data = 1 [json_name = "data"];
                        }
                        Datas datas = 11 [json_name = "datas"];
                     }
                     repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                  }
                  Neighbors neighbors = 46 [json_name = "neighbors"];
                  message LastDownNbrs {
                     message LastDownNbr {
                        string area_id = 1 [json_name = "area-id"];
                        string nbr_router_id = 2 [json_name = "nbr-router-id"];
                        string if_name = 3 [json_name = "if-name"];
                        uint32 instance_id = 4 [json_name = "instance-id"];
                        uint32 list_index = 5 [json_name = "list-index"];
                        enum DownImmReason {
                           DownImmReason_INACTIVITY = 0;
                           DownImmReason_LLX_DOWN = 1;
                           DownImmReason_KILLX_NBR = 2;
                           DownImmReason_X_1X_WAYHELLOX_RECEIVED = 3;
                           DownImmReason_ADJOK = 4;
                           DownImmReason_SEQX_NUMX_MISMATCH = 5;
                           DownImmReason_BADX_LSREQ = 6;
                        };
                        DownImmReason down_imm_reason = 6 [json_name = "down-imm-reason"];
                        enum DownPriReason {
                           DownPriReason_UNKNOWN = 0;
                           DownPriReason_HELLOX_NOTX_SEEN = 1;
                           DownPriReason_INTFX_PARAX_MISMATCH = 2;
                           DownPriReason_LOGICALX_INTFX_STATEX_CHANGE = 3;
                           DownPriReason_LINKX_FAULTX_ORX_INTFX_CFGX_CHANGE = 4;
                           DownPriReason_PROCESSX_RESET = 5;
                           DownPriReason_AREAX_RESET = 6;
                           DownPriReason_AREAX_OPTIONX_MISMATCH = 7;
                           DownPriReason_VLINKX_PEERX_NOTX_REACHABLE = 8;
                           DownPriReason_SHAMX_LINKX_UNREACHABLE = 9;
                           DownPriReason_UNDOX_NETWORKX_COMMAND = 10;
                           DownPriReason_UNDOX_NBMAX_PEER = 11;
                           DownPriReason_PASSIVEX_INTFX_DOWN = 12;
                           DownPriReason_OPAQUEX_CAPABILITYX_ENABLED = 13;
                           DownPriReason_OPAQUEX_CAPABILITYX_DISABLED = 14;
                           DownPriReason_VIRTUALX_INTFX_STATEX_CHANGE = 15;
                           DownPriReason_BFDX_SESSIONX_DOWN = 16;
                           DownPriReason_RETRANSMISSIONX_LIMITX_EXCEED = 17;
                           DownPriReason_X_1X_WAYHELLOX_RECEIVED = 18;
                           DownPriReason_ROUTERX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_BROADCAST = 19;
                           DownPriReason_NBRX_STATEX_CHANGEX_FROMX_DRX_ORX_BDRX_TOX_BROADCAST = 20;
                           DownPriReason_NSSAX_AREAX_CFGX_CHANGE = 21;
                           DownPriReason_STUBX_AREAX_CFGX_CHANGE = 22;
                           DownPriReason_RECEIVEDX_INVALIDX_DDX_PACKET = 23;
                           DownPriReason_NOTX_RECEIVEDX_DDX_DURINGX_ROUTERX_DEAD = 24;
                           DownPriReason_MIMSX_BITX_ORX_SEQX_NUMX_INCORRECT = 25;
                           DownPriReason_UNABLEX_OPAQUEX_CAPX_FINDX_9X_10X_11X_LSA = 26;
                           DownPriReason_NOTX_NSSAX_FINDX_7X_LSA = 27;
                           DownPriReason_LSRX_PACKETX_UNKNOWNX_REASON = 28;
                           DownPriReason_NSSAX_ORX_STUBX_AREAX_FINDX_5X_11X_LSA = 29;
                           DownPriReason_LSRX_ISX_NOTX_INX_THEX_LSDB = 30;
                           DownPriReason_LSRX_EXISTX_SAMEX_LSAX_INX_THEX_LSDB = 31;
                           DownPriReason_LSRX_EXISTX_NEWERX_LSAX_INX_THEX_LSDB = 32;
                           DownPriReason_NBRX_STATEX_NOTX_FULLX_WHENX_LSDBX_OVERFLOW = 33;
                           DownPriReason_FILTERX_LSAX_CFGX_CHANGE = 34;
                           DownPriReason_ACLX_CHANGEDX_FORX_FILTERX_LSA = 35;
                           DownPriReason_RESETX_OSPFX_PEER = 36;
                           DownPriReason_INTFX_RESET = 37;
                           DownPriReason_UNDOX_OSPFX_INTFX_UNDOX_AREAX_UNDOX_NETWORK = 38;
                           DownPriReason_UNDOX_OSPFX_AREA = 39;
                           DownPriReason_CPUX_OVERLOAD = 40;
                           DownPriReason_INTFX_STATEX_CHANGEDX_TOX_STANDBY = 41;
                           DownPriReason_UNDOX_ROUTERX_ID = 42;
                           DownPriReason_NBRX_ROUTERX_IDX_CHANGEDX_ORX_IPX_CONFLICTED = 43;
                           DownPriReason_COMPONENTX_ISX_INX_IMPLEMENTX_STAT = 44;
                           DownPriReason_SEQEUNCEX_NUMX_MISMATCHED = 45;
                           DownPriReason_IX_BITX_INCORRECTX_INX_DD = 46;
                           DownPriReason_MSX_BITX_INCORRECTX_INX_DD = 47;
                           DownPriReason_OPTIONSX_INCORRECTX_INX_DD = 48;
                           DownPriReason_RECEIVEDX_MTUX_MISX_DDX_PACKET = 49;
                           DownPriReason_PROCESSX_SHUTDOWN = 51;
                           DownPriReason_DDX_RETRANSX_TIMESX_UPTOX_LIMIT = 55;
                           DownPriReason_UNDOX_INTFX_UNDOX_AREA = 100;
                        };
                        DownPriReason down_pri_reason = 7 [json_name = "down-pri-reason"];
                        string down_time = 8 [json_name = "down-time"];
                        string router_id = 9 [json_name = "router-id"];
                     }
                     repeated LastDownNbr last_down_nbr = 1 [json_name = "last-down-nbr"];
                  }
                  LastDownNbrs last_down_nbrs = 47 [json_name = "last-down-nbrs"];
                  message NexthopParas {
                     message NexthopPara {
                        string nbr_rtr_id = 1 [json_name = "nbr-rtr-id"];
                        string nexthop_ipv6_addr = 2 [json_name = "nexthop-ipv6-addr"];
                        string if_name = 3 [json_name = "if-name"];
                        string router_id = 4 [json_name = "router-id"];
                        uint32 referece_count = 5 [json_name = "referece-count"];
                        string ipv6_addr = 6 [json_name = "ipv6-addr"];
                        string sid_stack = 7 [json_name = "sid-stack"];
                        bool direct = 8 [json_name = "direct"];
                        string neighbor_id = 9 [json_name = "neighbor-id"];
                     }
                     repeated NexthopPara nexthop_para = 1 [json_name = "nexthop-para"];
                  }
                  NexthopParas nexthop_paras = 48 [json_name = "nexthop-paras"];
                  message LsdbStatistics {
                     message LsdbStatistic {
                        string area_id = 1 [json_name = "area-id"];
                        enum LsaType {
                           INVALID_ENUM_VALUE_LsaType = 0;
                           LsaType_ROUTER = 1;
                           LsaType_NETWORK = 2;
                           LsaType_SUMX_NET = 3;
                           LsaType_SUMX_ASBR = 4;
                           LsaType_EXTERNAL = 5;
                           LsaType_LSAX_TYPEX_6 = 6;
                           LsaType_REQX_LISTX_LINKX_LSA = 8;
                           LsaType_OPQX_LINK = 9;
                           LsaType_OPQX_AREA = 10;
                           LsaType_OPQX_AS = 11;
                           LsaType_UNKNOWNX_LSA = 16;
                           LsaType_GRACEX_LSA = 27;
                           LsaType_LINKX_LSA = 28;
                           LsaType_INTRAX_AREAX_TEX_LSA = 30;
                           LsaType_ROUTERX_LSA = 8193;
                           LsaType_NETWORKX_LSA = 8194;
                           LsaType_INTERX_AREAX_PREFIXX_LSA = 8195;
                           LsaType_INTERX_AREAX_ROUTERX_LSA = 8196;
                           LsaType_GROUPX_MEMBERSHIPX_LSA = 8198;
                           LsaType_NSSAX_LSA = 8199;
                           LsaType_INTRAX_AREAX_PREFIXX_LSA = 8201;
                           LsaType_ASX_EXTERNALX_LSA = 16389;
                           LsaType_RIX_LINKX_LSA = 32780;
                           LsaType_EX_LINKX_LSA = 32808;
                           LsaType_RIX_AREAX_LSA = 40972;
                           LsaType_EX_ROUTERX_LSA = 40993;
                           LsaType_EX_NETWORKX_LSA = 40994;
                           LsaType_EX_INTERX_AREAX_PREFIXX_LSA = 40995;
                           LsaType_EX_INTERX_AREAX_ROUTERX_LSA = 40996;
                           LsaType_EX_NSSAX_LSA = 40999;
                           LsaType_EX_INTRAX_AREAX_PREFIXX_LSA = 41001;
                           LsaType_AREAX_LOCATORX_LSA = 41002;
                           LsaType_RIX_ASX_LSA = 49164;
                           LsaType_EX_ASX_EXTERNALX_LSA = 49189;
                        };
                        LsaType lsa_type = 2 [json_name = "lsa-type"];
                        string link_state_id = 3 [json_name = "link-state-id"];
                        string adv_router_id = 4 [json_name = "adv-router-id"];
                        int32 lsa_age = 5 [json_name = "lsa-age"];
                        string options = 6 [json_name = "options"];
                        uint32 lsa_length = 7 [json_name = "lsa-length"];
                        string option_flag = 8 [json_name = "option-flag"];
                        string lsa_seq_num = 9 [json_name = "lsa-seq-num"];
                        string checksum = 10 [json_name = "checksum"];
                        uint32 prefix_num = 11 [json_name = "prefix-num"];
                        enum RefLsType {
                           RefLsType_NONE = 0;
                           RefLsType_ROUTERX_LSA = 8193;
                           RefLsType_NETWORKX_LSA = 8194;
                        };
                        RefLsType ref_ls_type = 12 [json_name = "ref-ls-type"];
                        string ref_ls_id = 13 [json_name = "ref-ls-id"];
                        string ref_adv_router = 14 [json_name = "ref-adv-router"];
                        uint32 router_pri = 15 [json_name = "router-pri"];
                        string link_local_addr = 16 [json_name = "link-local-addr"];
                        string host_name = 17 [json_name = "host-name"];
                        message Lsabodys {
                           message Lsabody {
                              string nbr_intf_id = 1 [json_name = "nbr-intf-id"];
                              string nbr_router_id = 2 [json_name = "nbr-router-id"];
                              string attach_router_id = 3 [json_name = "attach-router-id"];
                              enum LinkType {
                                 LinkType_NONE = 0;
                                 LinkType_PX_2X_P = 1;
                                 LinkType_TRANSX_NET = 2;
                                 LinkType_STUBX_NET = 3;
                                 LinkType_VIRTUAL = 4;
                                 LinkType_NONEX_16 = 16;
                                 LinkType_POINTX_TOX_POINT = 17;
                                 LinkType_TRANSITX_NETWORK = 18;
                                 LinkType_RESERVED = 19;
                                 LinkType_VIRTUALX_LINK = 20;
                                 LinkType_UNKNOWN = 21;
                              };
                              LinkType link_type = 4 [json_name = "link-type"];
                              string fwd_ipv6_addr = 5 [json_name = "fwd-ipv6-addr"];
                              uint32 tos_metric = 6 [json_name = "tos-metric"];
                              uint32 route_tag = 7 [json_name = "route-tag"];
                              uint32 ext_metric_type = 8 [json_name = "ext-metric-type"];
                              string intf_id = 9 [json_name = "intf-id"];
                              uint32 prefix_len = 10 [json_name = "prefix-len"];
                              string prefix_options = 11 [json_name = "prefix-options"];
                              string dest_router_id = 12 [json_name = "dest-router-id"];
                              string ipv6_prefix = 13 [json_name = "ipv6-prefix"];
                           }
                           repeated Lsabody lsabody = 1 [json_name = "lsabody"];
                        }
                        Lsabodys lsabodys = 18 [json_name = "lsabodys"];
                        message IntraAreaTeLsa {
                           string lsa_content = 1 [json_name = "lsa-content"];
                        }
                        IntraAreaTeLsa intra_area_te_lsa = 19 [json_name = "intra-area-te-lsa"];
                        message PrefixTlvs {
                           message PrefixTlv {
                              string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
                              uint32 prefix_len = 2 [json_name = "prefix-len"];
                              string prefix_options = 3 [json_name = "prefix-options"];
                              uint32 metric = 4 [json_name = "metric"];
                              uint32 ext_metric_type = 5 [json_name = "ext-metric-type"];
                              message RedistributeList {
                                 string sub_tlv_flags = 1 [json_name = "sub-tlv-flags"];
                                 string redistribute_id = 2 [json_name = "redistribute-id"];
                              }
                              RedistributeList redistribute_list = 6 [json_name = "redistribute-list"];
                           }
                           repeated PrefixTlv prefix_tlv = 1 [json_name = "prefix-tlv"];
                        }
                        PrefixTlvs prefix_tlvs = 20 [json_name = "prefix-tlvs"];
                        message RouterInformationTlvs {
                           uint32 srv6_capability = 1 [json_name = "srv6-capability"];
                           string algorithm = 2 [json_name = "algorithm"];
                           message NodeMsds {
                              message NodeMsd {
                                 string msd_type = 1 [json_name = "msd-type"];
                                 uint32 msd_value = 2 [json_name = "msd-value"];
                              }
                              repeated NodeMsd node_msd = 1 [json_name = "node-msd"];
                           }
                           NodeMsds node_msds = 3 [json_name = "node-msds"];
                        }
                        RouterInformationTlvs router_information_tlvs = 21 [json_name = "router-information-tlvs"];
                        message LocatorTlvs {
                           message LocatorTlv {
                              enum RouteType {
                                 RouteType_UNSPECIFIED = 0;
                                 RouteType_INTRAX_AREA = 1;
                                 RouteType_INTERX_AREA = 2;
                                 RouteType_ASX_EXTERNAL = 3;
                                 RouteType_NSSAX_EXTERNAL = 4;
                              };
                              RouteType route_type = 1 [json_name = "route-type"];
                              string locator_addr = 2 [json_name = "locator-addr"];
                              uint32 locator_length = 3 [json_name = "locator-length"];
                              enum Algorithm {
                                 Algorithm_SPF = 0;
                                 Algorithm_STRICTX_SPF = 1;
                              };
                              Algorithm algorithm = 4 [json_name = "algorithm"];
                              uint32 flags = 5 [json_name = "flags"];
                              uint32 metric = 6 [json_name = "metric"];
                              message EndSids {
                                 message EndSid {
                                    enum Behavior {
                                       INVALID_ENUM_VALUE_Behavior = 0;
                                       Behavior_ENDX_WITHX_NOX_FLAVOR = 1;
                                       Behavior_ENDX_WITHX_PSP = 2;
                                       Behavior_ENDX_WITHX_USP = 3;
                                       Behavior_ENDX_WITHX_PSPX_USP = 4;
                                       Behavior_ENDXX_WITHX_NOX_FLAVOR = 5;
                                       Behavior_ENDXX_WITHX_PSP = 6;
                                       Behavior_ENDXX_WITHX_USP = 7;
                                       Behavior_ENDXX_WITHX_PSPX_USP = 8;
                                       Behavior_ENDT = 9;
                                       Behavior_ENDTX_WITHX_PSP = 10;
                                       Behavior_ENDTX_WITHX_USP = 11;
                                       Behavior_ENDTX_WITHX_PSPX_USP = 12;
                                       Behavior_ENDX_WITHX_PSPX_USPX_USD = 31;
                                       Behavior_ENDXX_WITHX_PSPX_USPX_USD = 35;
                                    };
                                    Behavior behavior = 1 [json_name = "behavior"];
                                    string end_sid = 2 [json_name = "end-sid"];
                                    uint32 flags = 3 [json_name = "flags"];
                                 }
                                 repeated EndSid end_sid = 1 [json_name = "end-sid"];
                              }
                              EndSids end_sids = 7 [json_name = "end-sids"];
                           }
                           repeated LocatorTlv locator_tlv = 1 [json_name = "locator-tlv"];
                        }
                        LocatorTlvs locator_tlvs = 22 [json_name = "locator-tlvs"];
                        message RouterLinkTlvs {
                           message RouterLinkTlv {
                              enum LinkType {
                                 INVALID_ENUM_VALUE_LinkType = 0;
                                 LinkType_PX_2X_P = 1;
                                 LinkType_TRANSX_NET = 2;
                                 LinkType_STUBX_NET = 3;
                                 LinkType_VIRTUAL = 4;
                                 LinkType_POINTX_TOX_POINT = 17;
                                 LinkType_TRANSITX_NETWORK = 18;
                                 LinkType_RESERVED = 19;
                                 LinkType_VIRTUALX_LINK = 20;
                              };
                              LinkType link_type = 1 [json_name = "link-type"];
                              string if_id = 2 [json_name = "if-id"];
                              string nbr_if_id = 3 [json_name = "nbr-if-id"];
                              string nbr_router_id = 4 [json_name = "nbr-router-id"];
                              uint32 metric = 5 [json_name = "metric"];
                              message EndxSids {
                                 message EndxSid {
                                    enum Behavior {
                                       INVALID_ENUM_VALUE_Behavior = 0;
                                       Behavior_ENDX_WITHX_NOX_FLAVOR = 1;
                                       Behavior_ENDX_WITHX_PSP = 2;
                                       Behavior_ENDX_WITHX_USP = 3;
                                       Behavior_ENDX_WITHX_PSPX_USP = 4;
                                       Behavior_ENDXX_WITHX_NOX_FLAVOR = 5;
                                       Behavior_ENDXX_WITHX_PSP = 6;
                                       Behavior_ENDXX_WITHX_USP = 7;
                                       Behavior_ENDXX_WITHX_PSPX_USP = 8;
                                       Behavior_ENDT = 9;
                                       Behavior_ENDTX_WITHX_PSP = 10;
                                       Behavior_ENDTX_WITHX_USP = 11;
                                       Behavior_ENDTX_WITHX_PSPX_USP = 12;
                                       Behavior_ENDX_WITHX_PSPX_USPX_USD = 31;
                                       Behavior_ENDXX_WITHX_PSPX_USPX_USD = 35;
                                    };
                                    Behavior behavior = 1 [json_name = "behavior"];
                                    string endx_sid = 2 [json_name = "endx-sid"];
                                    uint32 flags = 3 [json_name = "flags"];
                                    enum Algorithm {
                                       Algorithm_SPF = 0;
                                       Algorithm_STRICTX_SPF = 1;
                                    };
                                    Algorithm algorithm = 4 [json_name = "algorithm"];
                                    uint32 weight = 5 [json_name = "weight"];
                                 }
                                 repeated EndxSid endx_sid = 1 [json_name = "endx-sid"];
                              }
                              EndxSids endx_sids = 6 [json_name = "endx-sids"];
                              message LanEndxSids {
                                 message LanEndxSid {
                                    string nbr_router_id = 1 [json_name = "nbr-router-id"];
                                    enum Behavior {
                                       INVALID_ENUM_VALUE_Behavior = 0;
                                       Behavior_ENDX_WITHX_NOX_FLAVOR = 1;
                                       Behavior_ENDX_WITHX_PSP = 2;
                                       Behavior_ENDX_WITHX_USP = 3;
                                       Behavior_ENDX_WITHX_PSPX_USP = 4;
                                       Behavior_ENDXX_WITHX_NOX_FLAVOR = 5;
                                       Behavior_ENDXX_WITHX_PSP = 6;
                                       Behavior_ENDXX_WITHX_USP = 7;
                                       Behavior_ENDXX_WITHX_PSPX_USP = 8;
                                       Behavior_ENDT = 9;
                                       Behavior_ENDTX_WITHX_PSP = 10;
                                       Behavior_ENDTX_WITHX_USP = 11;
                                       Behavior_ENDTX_WITHX_PSPX_USP = 12;
                                       Behavior_ENDX_WITHX_PSPX_USPX_USD = 31;
                                       Behavior_ENDXX_WITHX_PSPX_USPX_USD = 35;
                                    };
                                    Behavior behavior = 2 [json_name = "behavior"];
                                    string endx_sid = 3 [json_name = "endx-sid"];
                                    uint32 flags = 4 [json_name = "flags"];
                                    enum Algorithm {
                                       Algorithm_SPF = 0;
                                       Algorithm_STRICTX_SPF = 1;
                                    };
                                    Algorithm algorithm = 5 [json_name = "algorithm"];
                                    uint32 weight = 6 [json_name = "weight"];
                                 }
                                 repeated LanEndxSid lan_endx_sid = 1 [json_name = "lan-endx-sid"];
                              }
                              LanEndxSids lan_endx_sids = 7 [json_name = "lan-endx-sids"];
                              message LocalAddrs {
                                 message LocalAddr {
                                    string local_global_addr = 1 [json_name = "local-global-addr"];
                                 }
                                 repeated LocalAddr local_addr = 1 [json_name = "local-addr"];
                              }
                              LocalAddrs local_addrs = 8 [json_name = "local-addrs"];
                           }
                           repeated RouterLinkTlv router_link_tlv = 1 [json_name = "router-link-tlv"];
                        }
                        RouterLinkTlvs router_link_tlvs = 23 [json_name = "router-link-tlvs"];
                     }
                     repeated LsdbStatistic lsdb_statistic = 1 [json_name = "lsdb-statistic"];
                  }
                  LsdbStatistics lsdb_statistics = 49 [json_name = "lsdb-statistics"];
                  message Routings {
                     message Routing {
                        string dest_ipv6_addr = 1 [json_name = "dest-ipv6-addr"];
                        uint32 ipv6_mask_len = 2 [json_name = "ipv6-mask-len"];
                        uint32 cost = 3 [json_name = "cost"];
                        string path_type = 4 [json_name = "path-type"];
                        enum PrefixPriority {
                           PrefixPriority_LOW = 0;
                           PrefixPriority_CRITICAL = 1;
                           PrefixPriority_HIGH = 2;
                           PrefixPriority_MEDIUM = 3;
                        };
                        PrefixPriority prefix_priority = 5 [json_name = "prefix-priority"];
                        message NexthopDatas {
                           message NexthopData {
                              string ipv6_addr = 1 [json_name = "ipv6-addr"];
                              string if_name = 2 [json_name = "if-name"];
                              string bak_if_name = 3 [json_name = "bak-if-name"];
                              string bak_next_ipv6_addr = 4 [json_name = "bak-next-ipv6-addr"];
                              enum BackupType {
                                 INVALID_ENUM_VALUE_BackupType = 0;
                                 BackupType_LFAX_LINK = 1;
                                 BackupType_LFAX_LINKX_NODE = 2;
                                 BackupType_LINKX_PROTECT = 3;
                                 BackupType_LINKX_NODEX_PROTECT = 4;
                                 BackupType_REMOTEX_LFAX_LINK = 5;
                                 BackupType_REMOTEX_LFAX_LINKX_NODE = 6;
                                 BackupType_TILFAX_LINK = 7;
                                 BackupType_TILFAX_LINKX_NODE = 8;
                                 BackupType_SRV6X_TILFAX_LINK = 9;
                                 BackupType_SRV6X_TILFAX_LINKX_NODE = 10;
                              };
                              BackupType backup_type = 5 [json_name = "backup-type"];
                              string flags_disp = 6 [json_name = "flags-disp"];
                              bool direct = 7 [json_name = "direct"];
                              string avoid_microloop_stack = 8 [json_name = "avoid-microloop-stack"];
                              string backup_sid_stack = 9 [json_name = "backup-sid-stack"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 6 [json_name = "nexthop-datas"];
                     }
                     repeated Routing routing = 1 [json_name = "routing"];
                  }
                  Routings routings = 50 [json_name = "routings"];
                  message GracefulRestartInfo {
                     enum GrCapability {
                        GrCapability_DISABLED = 0;
                        GrCapability_ENABLED = 1;
                     };
                     GrCapability gr_capability = 1 [json_name = "gr-capability"];
                     enum HelpRole {
                        HelpRole_NONE = 0;
                        HelpRole_PLANNEDX_STRICTX_LSAX_CHECK = 1;
                        HelpRole_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 2;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 3;
                        HelpRole_IGNOREX_EXTERNALX_LSAX_CHECK = 4;
                        HelpRole_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 5;
                        HelpRole_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 6;
                        HelpRole_PLANNEDX_UNX_PLANNEDX_IGNOREX_EXTERNALX_LSAX_CHECK = 7;
                        HelpRole_NEVER = 8;
                        HelpRole_NONE16 = 16;
                        HelpRole_PLANNEDX_STRICTX_LSAX_CHECKX_17 = 17;
                        HelpRole_UNX_PLANNEDX_STRICTX_LSAX_CHECKX_18 = 18;
                        HelpRole_PLANNEDX_ANDX_UNX_PLANNEDX_STRICTX_LSAX_CHECK = 19;
                        HelpRole_LSAX_CHECKINGX_IGNORE = 20;
                        HelpRole_PLANNED = 21;
                        HelpRole_UNX_PLANNEDX_LSAX_CHECKINGX_IGNORE = 22;
                        HelpRole_PLANNEDX_ANDX_UNPLANNED = 23;
                     };
                     HelpRole help_role = 2 [json_name = "help-role"];
                     uint32 max_grace_period = 3 [json_name = "max-grace-period"];
                     enum OnHelper {
                        OnHelper_NONE = 0;
                        OnHelper_SUCCESSFULX_EXIT = 1;
                        OnHelper_GRACEX_PERIODX_EXPIRED = 2;
                        OnHelper_RECEIVEDX_FLUSHEDX_GRACEX_LSA = 3;
                        OnHelper_FLOODINGX_CHANGEDX_LSA = 4;
                        OnHelper_RECEIVEDX_FLUSHEDX_GRACEX_LSAX_5 = 5;
                        OnHelper_POLICYX_CHECKX_FAILEDX_FORX_RECEIVEDX_GRACEX_LSA = 6;
                        OnHelper_NEIGHBORX_RESET = 7;
                        OnHelper_INTERFACEX_STATUSX_CHANGED = 8;
                        OnHelper_GRACEFULX_RESTARTX_UNCONFIGUREDX_ATX_PROCESSX_LEVEL = 9;
                        OnHelper_GRACEX_LSAX_NOTX_FOUND = 10;
                        OnHelper_NONE11 = 11;
                        OnHelper_SUCCESSFUL = 12;
                        OnHelper_GRACEX_PERIODX_EXP = 13;
                        OnHelper_TOPOLOGYX_CHANGE = 14;
                        OnHelper_ROUTERX_IDX_UNSET = 15;
                        OnHelper_POLICYX_CHECKX_FAILEDX_FORX_RECEIVEDX_GRACEX_LSAX_16 = 16;
                        OnHelper_PROCESSX_RESET = 17;
                        OnHelper_INTERFACEX_DOWN = 18;
                        OnHelper_INTERFACEX_IDX_CHANGE = 19;
                        OnHelper_GRACEX_LSAX_NOTX_FOUNDX_20 = 20;
                     };
                     OnHelper on_helper = 4 [json_name = "on-helper"];
                     uint32 restart_nbr_num = 5 [json_name = "restart-nbr-num"];
                  }
                  GracefulRestartInfo graceful_restart_info = 51 [json_name = "graceful-restart-info"];
                  message LsdbBriefs {
                     message LsdbBrief {
                        string router_id = 1 [json_name = "router-id"];
                        uint32 router = 2 [json_name = "router"];
                        uint32 network = 3 [json_name = "network"];
                        uint32 summary_net = 4 [json_name = "summary-net"];
                        uint32 asbr = 5 [json_name = "asbr"];
                        uint32 type7 = 6 [json_name = "type7"];
                        uint32 ase = 7 [json_name = "ase"];
                        uint32 total = 8 [json_name = "total"];
                        uint32 link_lsa = 9 [json_name = "link-lsa"];
                        uint32 grace_lsa = 10 [json_name = "grace-lsa"];
                        uint32 unknown_lsa = 11 [json_name = "unknown-lsa"];
                        uint32 intra_prefix_lsa = 12 [json_name = "intra-prefix-lsa"];
                        uint32 ri_link_lsa = 13 [json_name = "ri-link-lsa"];
                        uint32 ri_area_lsa = 14 [json_name = "ri-area-lsa"];
                        uint32 ri_as_lsa = 15 [json_name = "ri-as-lsa"];
                        uint32 intra_area_te_lsa = 16 [json_name = "intra-area-te-lsa"];
                        uint32 e_router_lsa = 17 [json_name = "e-router-lsa"];
                        uint32 locator_area_lsa = 18 [json_name = "locator-area-lsa"];
                        uint32 e_as_external_lsa = 19 [json_name = "e-as-external-lsa"];
                     }
                     repeated LsdbBrief lsdb_brief = 1 [json_name = "lsdb-brief"];
                  }
                  LsdbBriefs lsdb_briefs = 52 [json_name = "lsdb-briefs"];
                  message Cumulative {
                     uint32 intra_area_te_lsa = 1 [json_name = "intra-area-te-lsa"];
                     uint32 router_lsa = 2 [json_name = "router-lsa"];
                     uint32 network_lsa = 3 [json_name = "network-lsa"];
                     uint32 e_router_lsa = 4 [json_name = "e-router-lsa"];
                     uint32 area_locator_lsa = 5 [json_name = "area-locator-lsa"];
                     uint32 e_as_external_lsa = 6 [json_name = "e-as-external-lsa"];
                  }
                  Cumulative cumulative = 53 [json_name = "cumulative"];
                  message AvoidMicroLoop {
                     bool frr_enable = 1 [json_name = "frr-enable"];
                     uint32 frr_rib_update_delay = 2 [json_name = "frr-rib-update-delay"];
                  }
                  AvoidMicroLoop avoid_micro_loop = 54 [json_name = "avoid-micro-loop"];
                  message AbrRoutings {
                     message AbrRouting {
                        string router_id = 1 [json_name = "router-id"];
                        string area_id = 2 [json_name = "area-id"];
                        uint32 metric = 3 [json_name = "metric"];
                        message NexthopDatas {
                           message NexthopData {
                              string ipv6_addr = 1 [json_name = "ipv6-addr"];
                              string if_name = 2 [json_name = "if-name"];
                              bool direct = 3 [json_name = "direct"];
                              string avoid_microloop_stack = 4 [json_name = "avoid-microloop-stack"];
                              string bak_if_name = 5 [json_name = "bak-if-name"];
                              string bak_next_ipv6_addr = 6 [json_name = "bak-next-ipv6-addr"];
                              enum BackupType {
                                 BackupType_NONE = 0;
                                 BackupType_LINKX_PROTECT = 2;
                                 BackupType_LINKX_NODEX_PROTECT = 6;
                              };
                              BackupType backup_type = 7 [json_name = "backup-type"];
                              string backup_sid_stack = 8 [json_name = "backup-sid-stack"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 4 [json_name = "nexthop-datas"];
                     }
                     repeated AbrRouting abr_routing = 1 [json_name = "abr-routing"];
                  }
                  AbrRoutings abr_routings = 55 [json_name = "abr-routings"];
                  message AsbrRoutings {
                     message AsbrRouting {
                        string router_id = 1 [json_name = "router-id"];
                        string area_id = 2 [json_name = "area-id"];
                        uint32 metric = 3 [json_name = "metric"];
                        enum PathType {
                           PathType_UNKOWN = 0;
                           PathType_INTRAX_AREA = 1;
                           PathType_TRANSIT = 2;
                           PathType_STUB = 3;
                           PathType_INTERX_AREA = 4;
                           PathType_DIRECT = 5;
                           PathType_TYPEX_1X_EXTERNAL = 7;
                           PathType_TYPEX_2X_EXTERNAL = 8;
                        };
                        PathType path_type = 4 [json_name = "path-type"];
                        message NexthopDatas {
                           message NexthopData {
                              string ipv6_addr = 1 [json_name = "ipv6-addr"];
                              string if_name = 2 [json_name = "if-name"];
                              bool direct = 3 [json_name = "direct"];
                              string avoid_microloop_stack = 4 [json_name = "avoid-microloop-stack"];
                              string bak_if_name = 5 [json_name = "bak-if-name"];
                              string bak_next_ipv6_addr = 6 [json_name = "bak-next-ipv6-addr"];
                              enum BackupType {
                                 BackupType_NONE = 0;
                                 BackupType_LINKX_PROTECT = 2;
                                 BackupType_LINKX_NODEX_PROTECT = 6;
                              };
                              BackupType backup_type = 7 [json_name = "backup-type"];
                              string backup_sid_stack = 8 [json_name = "backup-sid-stack"];
                           }
                           repeated NexthopData nexthop_data = 1 [json_name = "nexthop-data"];
                        }
                        NexthopDatas nexthop_datas = 5 [json_name = "nexthop-datas"];
                     }
                     repeated AsbrRouting asbr_routing = 1 [json_name = "asbr-routing"];
                  }
                  AsbrRoutings asbr_routings = 56 [json_name = "asbr-routings"];
               }
               repeated Site site = 1 [json_name = "site"];
            }
            Sites sites = 1 [json_name = "sites"];
            message Gtsm {
               uint32 hops = 1 [json_name = "hops"];
            }
            Gtsm gtsm = 2 [json_name = "gtsm"];
         }
         Ospfv3 ospfv3 = 27 [json_name = "ospfv3"];
         message Ipv6Policys {
            message Ipv6Policy {
               string ipv6_prefix = 1 [json_name = "ipv6-prefix"];
               uint32 ipv6_prefix_length = 2 [json_name = "ipv6-prefix-length"];
               uint32 prefix_precedence = 3 [json_name = "prefix-precedence"];
               uint32 prefix_label = 4 [json_name = "prefix-label"];
               bool default_flag = 5 [json_name = "default-flag"];
            }
            repeated Ipv6Policy ipv6_policy = 1 [json_name = "ipv6-policy"];
         }
         Ipv6Policys ipv6_policys = 28 [json_name = "ipv6-policys"];
         message Parameter {
            string identifier = 1 [json_name = "identifier"];
            uint32 vn_id = 2 [json_name = "vn-id"];
         }
         Parameter parameter = 29 [json_name = "parameter"];
         message IcmpSourceaddr {
            string if_name = 1 [json_name = "if-name"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_PORTX_UNREACHABLE = 1;
               Type_TTLX_EXCEEDED = 2;
               Type_ALLX_TRACERT = 3;
            };
            Type type = 2 [json_name = "type"];
         }
         IcmpSourceaddr icmp_sourceaddr = 30 [json_name = "icmp-sourceaddr"];
         message Icmp6SourceAddress {
            string if_name = 1 [json_name = "if-name"];
            enum PktType {
               INVALID_ENUM_VALUE_PktType = 0;
               PktType_PORTX_UNREACHABLE = 1;
               PktType_HOPLIMITX_EXCEEDED = 2;
               PktType_ALLX_TRACERT = 3;
            };
            PktType pkt_type = 2 [json_name = "pkt-type"];
         }
         Icmp6SourceAddress icmp6_source_address = 31 [json_name = "icmp6-source-address"];
         message Ripng {
            message Processs {
               message Process {
                  uint32 id = 1 [json_name = "id"];
                  string description = 2 [json_name = "description"];
                  enum CheckZero {
                     CheckZero_DISABLE = 0;
                     CheckZero_ENABLE = 1;
                  };
                  CheckZero check_zero = 3 [json_name = "check-zero"];
                  uint32 maximum_load_balancing = 4 [json_name = "maximum-load-balancing"];
                  uint32 default_cost = 5 [json_name = "default-cost"];
                  message ImportRoutes {
                     message ImportRoute {
                        enum Protocol {
                           INVALID_ENUM_VALUE_Protocol = 0;
                           Protocol_DIRECT = 1;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_BGP = 6;
                           Protocol_OSPFV3 = 7;
                           Protocol_RIPNG = 8;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                        uint32 process_id = 2 [json_name = "process-id"];
                        enum PermitIbpg {
                           PermitIbpg_DISABLE = 0;
                           PermitIbpg_ENABLE = 1;
                        };
                        PermitIbpg permit_ibpg = 3 [json_name = "permit-ibpg"];
                        message PolicyType_RoutePolicy {
                           string route_policy = 1 [json_name = "route-policy"];
                        }
                        message PolicyType_RouteFilter {
                           string route_filter = 1 [json_name = "route-filter"];
                        }
                        oneof PolicyType {
                           PolicyType_RoutePolicy policy_type_route_policy = 4 [json_name = "route-policy"];
                           PolicyType_RouteFilter policy_type_route_filter = 5 [json_name = "route-filter"];
                        }
                        message CostType_Cost {
                           uint32 cost10 = 1 [json_name = "cost"];
                        }
                        message CostType_InheritCost {
                           enum InheritCost10 {
                              InheritCost10_DISABLE = 0;
                              InheritCost10_ENABLE = 1;
                           };
                           InheritCost10 inherit_cost = 1 [json_name = "inherit-cost"];
                        }
                        oneof CostType {
                           CostType_Cost cost_type_cost = 6 [json_name = "cost"];
                           CostType_InheritCost cost_type_inherit_cost = 7 [json_name = "inherit-cost"];
                        }
                     }
                     repeated ImportRoute import_route = 1 [json_name = "import-route"];
                  }
                  ImportRoutes import_routes = 6 [json_name = "import-routes"];
                  message Timer {
                     uint32 garbage = 1 [json_name = "garbage"];
                     uint32 periodic = 2 [json_name = "periodic"];
                     uint32 age = 3 [json_name = "age"];
                     uint32 suppress = 4 [json_name = "suppress"];
                  }
                  Timer timer = 7 [json_name = "timer"];
                  message Preference {
                     uint32 value = 1 [json_name = "value"];
                     message PolicyType_RoutePolicy {
                        string route_policy = 1 [json_name = "route-policy"];
                     }
                     message PolicyType_RouteFilter {
                        string route_filter = 1 [json_name = "route-filter"];
                     }
                     oneof PolicyType {
                        PolicyType_RoutePolicy policy_type_route_policy = 2 [json_name = "route-policy"];
                        PolicyType_RouteFilter policy_type_route_filter = 3 [json_name = "route-filter"];
                     }
                  }
                  Preference preference = 8 [json_name = "preference"];
                  message Interfaces {
                     message Interface {
                        string name = 1 [json_name = "name"];
                        enum Input {
                           Input_DISABLE = 0;
                           Input_ENABLE = 1;
                        };
                        Input input = 2 [json_name = "input"];
                        enum Output {
                           Output_DISABLE = 0;
                           Output_ENABLE = 1;
                        };
                        Output output = 3 [json_name = "output"];
                        enum SplitHorizon {
                           SplitHorizon_DISABLE = 0;
                           SplitHorizon_ENABLE = 1;
                        };
                        SplitHorizon split_horizon = 4 [json_name = "split-horizon"];
                        enum PoisonReverse {
                           PoisonReverse_DISABLE = 0;
                           PoisonReverse_ENABLE = 1;
                        };
                        PoisonReverse poison_reverse = 5 [json_name = "poison-reverse"];
                        uint32 pkt_transmit_interval = 6 [json_name = "pkt-transmit-interval"];
                        uint32 pkt_transmit_number = 7 [json_name = "pkt-transmit-number"];
                        enum DefaultRouteType {
                           INVALID_ENUM_VALUE_DefaultRouteType = 0;
                           DefaultRouteType_ONLY = 1;
                           DefaultRouteType_ORIGINATE = 2;
                           DefaultRouteType_NONE = 4;
                        };
                        DefaultRouteType default_route_type = 8 [json_name = "default-route-type"];
                        uint32 default_route_cost = 9 [json_name = "default-route-cost"];
                        uint32 default_route_tag = 10 [json_name = "default-route-tag"];
                        message Metricin {
                           uint32 value = 1 [json_name = "value"];
                        }
                        Metricin metricin = 11 [json_name = "metricin"];
                        message Metricout {
                           uint32 value = 1 [json_name = "value"];
                           message PolicyType_IpPrefix {
                              string ip_prefix = 1 [json_name = "ip-prefix"];
                           }
                           message PolicyType_AclNumber {
                              string acl_number = 1 [json_name = "acl-number"];
                           }
                           message PolicyType_AclName {
                              string acl_name = 1 [json_name = "acl-name"];
                           }
                           oneof PolicyType {
                              PolicyType_IpPrefix policy_type_ip_prefix = 2 [json_name = "ip-prefix"];
                              PolicyType_AclNumber policy_type_acl_number = 3 [json_name = "acl-number"];
                              PolicyType_AclName policy_type_acl_name = 4 [json_name = "acl-name"];
                           }
                        }
                        Metricout metricout = 12 [json_name = "metricout"];
                        message Summarys {
                           message Summary {
                              string address = 1 [json_name = "address"];
                              uint32 network_mask = 2 [json_name = "network-mask"];
                              enum AvoidFeedback {
                                 AvoidFeedback_DISABLE = 0;
                                 AvoidFeedback_ENABLE = 1;
                              };
                              AvoidFeedback avoid_feedback = 3 [json_name = "avoid-feedback"];
                           }
                           repeated Summary summary = 1 [json_name = "summary"];
                        }
                        Summarys summarys = 13 [json_name = "summarys"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 9 [json_name = "interfaces"];
                  message NeighborInfos {
                     message NeighborInfo {
                        string address = 1 [json_name = "address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        uint32 active_routes_number = 3 [json_name = "active-routes-number"];
                        uint32 holddown_routes_number = 4 [json_name = "holddown-routes-number"];
                        uint32 garbage_routes_number = 5 [json_name = "garbage-routes-number"];
                     }
                     repeated NeighborInfo neighbor_info = 1 [json_name = "neighbor-info"];
                  }
                  NeighborInfos neighbor_infos = 10 [json_name = "neighbor-infos"];
                  message Routes {
                     message Route {
                        string peer_address = 1 [json_name = "peer-address"];
                        string interface_name = 2 [json_name = "interface-name"];
                        string destination = 3 [json_name = "destination"];
                        uint32 mask_length = 4 [json_name = "mask-length"];
                        string nexthop = 5 [json_name = "nexthop"];
                        uint32 cost = 6 [json_name = "cost"];
                        uint32 tag = 7 [json_name = "tag"];
                        string flags = 8 [json_name = "flags"];
                        uint32 state_time = 9 [json_name = "state-time"];
                     }
                     repeated Route route = 1 [json_name = "route"];
                  }
                  Routes routes = 11 [json_name = "routes"];
                  message InterfacePacketsStatisticss {
                     message InterfacePacketsStatistics {
                        string interface_name = 1 [json_name = "interface-name"];
                        string ip_address = 2 [json_name = "ip-address"];
                        uint32 periodic_updates_sent_last_minutes = 3 [json_name = "periodic-updates-sent-last-minutes"];
                        uint32 periodic_updates_sent_last_five_minutes = 4 [json_name = "periodic-updates-sent-last-five-minutes"];
                        uint32 periodic_updates_sent_total = 5 [json_name = "periodic-updates-sent-total"];
                        uint32 triggered_updates_sent_last_minutes = 6 [json_name = "triggered-updates-sent-last-minutes"];
                        uint32 triggered_updates_sent_last_five_minutes = 7 [json_name = "triggered-updates-sent-last-five-minutes"];
                        uint32 triggered_updates_sent_total = 8 [json_name = "triggered-updates-sent-total"];
                        uint32 response_packets_sent_last_minutes = 9 [json_name = "response-packets-sent-last-minutes"];
                        uint32 response_packets_sent_last_five_minutes = 10 [json_name = "response-packets-sent-last-five-minutes"];
                        uint32 response_packets_sent_total = 11 [json_name = "response-packets-sent-total"];
                        uint32 response_packets_received_last_minutes = 12 [json_name = "response-packets-received-last-minutes"];
                        uint32 response_packets_received_last_five_minutes = 13 [json_name = "response-packets-received-last-five-minutes"];
                        uint32 response_packets_received_total = 14 [json_name = "response-packets-received-total"];
                        uint32 response_packets_ignored_last_minutes = 15 [json_name = "response-packets-ignored-last-minutes"];
                        uint32 response_packets_ignored_last_five_minutes = 16 [json_name = "response-packets-ignored-last-five-minutes"];
                        uint32 response_packets_ignored_total = 17 [json_name = "response-packets-ignored-total"];
                        uint32 request_packets_sent_last_minutes = 18 [json_name = "request-packets-sent-last-minutes"];
                        uint32 request_packets_sent_last_five_minutes = 19 [json_name = "request-packets-sent-last-five-minutes"];
                        uint32 request_packets_sent_total = 20 [json_name = "request-packets-sent-total"];
                        uint32 request_packets_received_last_minutes = 21 [json_name = "request-packets-received-last-minutes"];
                        uint32 request_packets_received_last_five_minutes = 22 [json_name = "request-packets-received-last-five-minutes"];
                        uint32 request_packets_received_total = 23 [json_name = "request-packets-received-total"];
                        uint32 request_packets_ignored_last_minutes = 24 [json_name = "request-packets-ignored-last-minutes"];
                        uint32 request_packets_ignored_last_five_minutes = 25 [json_name = "request-packets-ignored-last-five-minutes"];
                        uint32 request_packets_ignored_total = 26 [json_name = "request-packets-ignored-total"];
                        uint32 bad_packets_received_last_minutes = 27 [json_name = "bad-packets-received-last-minutes"];
                        uint32 bad_packets_received_last_five_minutes = 28 [json_name = "bad-packets-received-last-five-minutes"];
                        uint32 bad_packets_received_total = 29 [json_name = "bad-packets-received-total"];
                        uint32 routes_received_last_minutes = 30 [json_name = "routes-received-last-minutes"];
                        uint32 routes_received_last_five_minutes = 31 [json_name = "routes-received-last-five-minutes"];
                        uint32 routes_received_total = 32 [json_name = "routes-received-total"];
                        uint32 routes_sent_last_minutes = 33 [json_name = "routes-sent-last-minutes"];
                        uint32 routes_sent_last_five_minutes = 34 [json_name = "routes-sent-last-five-minutes"];
                        uint32 routes_sent_total = 35 [json_name = "routes-sent-total"];
                        uint32 bad_routes_received_last_minutes = 36 [json_name = "bad-routes-received-last-minutes"];
                        uint32 bad_routes_received_last_five_minutes = 37 [json_name = "bad-routes-received-last-five-minutes"];
                        uint32 bad_routes_received_total = 38 [json_name = "bad-routes-received-total"];
                        uint32 authentication_failed_packets_last_minutes = 39 [json_name = "authentication-failed-packets-last-minutes"];
                        uint32 authentication_failed_packets_last_five_minutes = 40 [json_name = "authentication-failed-packets-last-five-minutes"];
                        uint32 authentication_failed_packets_total = 41 [json_name = "authentication-failed-packets-total"];
                        uint32 sent_failed_packets_last_minutes = 42 [json_name = "sent-failed-packets-last-minutes"];
                        uint32 sent_failed_packets_last_five_minutes = 43 [json_name = "sent-failed-packets-last-five-minutes"];
                        uint32 sent_failed_packets_total = 44 [json_name = "sent-failed-packets-total"];
                     }
                     repeated InterfacePacketsStatistics interface_packets_statistics = 1 [json_name = "interface-packets-statistics"];
                  }
                  InterfacePacketsStatisticss interface_packets_statisticss = 12 [json_name = "interface-packets-statisticss"];
                  message Statistics {
                     uint32 routes_in_database = 1 [json_name = "routes-in-database"];
                     uint32 interfaces_enabled = 2 [json_name = "interfaces-enabled"];
                     uint32 trigger_updates_sent = 3 [json_name = "trigger-updates-sent"];
                     uint32 periodic_updates_sent = 4 [json_name = "periodic-updates-sent"];
                  }
                  Statistics statistics = 13 [json_name = "statistics"];
               }
               repeated Process process = 1 [json_name = "process"];
            }
            Processs processs = 1 [json_name = "processs"];
         }
         Ripng ripng = 32 [json_name = "ripng"];
         message VaccessInterfaces {
            message VaccessInterface {
               string name = 1 [json_name = "name"];
            }
            repeated VaccessInterface vaccess_interface = 1 [json_name = "vaccess-interface"];
         }
         VaccessInterfaces vaccess_interfaces = 33 [json_name = "vaccess-interfaces"];
         message Qos {
            message TrafficPolicyVxlans {
               message TrafficPolicyVxlan {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_LINK = 1;
                  };
                  Layer layer = 3 [json_name = "layer"];
               }
               repeated TrafficPolicyVxlan traffic_policy_vxlan = 1 [json_name = "traffic-policy-vxlan"];
            }
            TrafficPolicyVxlans traffic_policy_vxlans = 1 [json_name = "traffic-policy-vxlans"];
         }
         Qos qos = 34 [json_name = "qos"];
         message QosL3Vpn {
            message PolicyApplys {
               message PolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
               }
               repeated PolicyApply policy_apply = 1 [json_name = "policy-apply"];
            }
            PolicyApplys policy_applys = 1 [json_name = "policy-applys"];
            message VxlanCarDisables {
               message VxlanCarDisable {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum Exclude {
                     Exclude_NOX_EXCLUDE = 0;
                     Exclude_EXCLUDE = 1;
                  };
                  Exclude exclude = 2 [json_name = "exclude"];
               }
               repeated VxlanCarDisable vxlan_car_disable = 1 [json_name = "vxlan-car-disable"];
            }
            VxlanCarDisables vxlan_car_disables = 2 [json_name = "vxlan-car-disables"];
            message VxlanPhb {
               string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
            }
            VxlanPhb vxlan_phb = 3 [json_name = "vxlan-phb"];
            message VxlanModeTrusts {
               message VxlanModeTrust {
                  enum TrustType {
                     TrustType_UPSTREAM = 0;
                     TrustType_X_8021P = 1;
                  };
                  TrustType trust_type = 1 [json_name = "trust-type"];
                  string ds_name = 2 [json_name = "ds-name"];
               }
               repeated VxlanModeTrust vxlan_mode_trust = 1 [json_name = "vxlan-mode-trust"];
            }
            VxlanModeTrusts vxlan_mode_trusts = 4 [json_name = "vxlan-mode-trusts"];
            message PolicyMultiApplys {
               message PolicyMultiApply {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated PolicyMultiApply policy_multi_apply = 1 [json_name = "policy-multi-apply"];
            }
            PolicyMultiApplys policy_multi_applys = 5 [json_name = "policy-multi-applys"];
         }
         QosL3Vpn qos_l3vpn = 35 [json_name = "qos-l3vpn"];
         message Gre {
            repeated string bind_src_interface_names = 1 [json_name = "bind-src-interface-names"];
         }
         Gre gre = 36 [json_name = "gre"];
         message Rpki {
            message Sessions {
               message Session {
                  string remote_address = 1 [json_name = "remote-address"];
                  uint32 tcp_port = 2 [json_name = "tcp-port"];
                  uint32 aging_time = 3 [json_name = "aging-time"];
                  uint32 refresh_time = 4 [json_name = "refresh-time"];
                  message TcpAuthenticationType_Password {
                     string password_text = 1 [json_name = "password-text"];
                  }
                  message TcpAuthenticationType_KeyChain {
                     string key_chain_name = 1 [json_name = "key-chain-name"];
                  }
                  oneof TcpAuthenticationType {
                     TcpAuthenticationType_Password tcp_authentication_type_password = 5 [json_name = "password"];
                     TcpAuthenticationType_KeyChain tcp_authentication_type_key_chain = 6 [json_name = "key-chain"];
                  }
                  string ssl_policy = 7 [json_name = "ssl-policy"];
                  string local_if_name = 8 [json_name = "local-if-name"];
                  string local_if_address = 9 [json_name = "local-if-address"];
               }
               repeated Session session = 1 [json_name = "session"];
            }
            Sessions sessions = 1 [json_name = "sessions"];
         }
         Rpki rpki = 37 [json_name = "rpki"];
         message Bmp {
            message Sessions {
               message Session {
                  string remote_address = 1 [json_name = "remote-address"];
                  string name = 2 [json_name = "name"];
                  string ssl_policy_name = 3 [json_name = "ssl-policy-name"];
                  string interface_name = 4 [json_name = "interface-name"];
                  string interface_address = 5 [json_name = "interface-address"];
                  uint32 tcp_port = 6 [json_name = "tcp-port"];
                  message TcpAuthenticationType_Password {
                     string password_text = 1 [json_name = "password-text"];
                  }
                  message TcpAuthenticationType_KeyChain {
                     string key_chain_name = 1 [json_name = "key-chain-name"];
                  }
                  oneof TcpAuthenticationType {
                     TcpAuthenticationType_Password tcp_authentication_type_password = 7 [json_name = "password"];
                     TcpAuthenticationType_KeyChain tcp_authentication_type_key_chain = 8 [json_name = "key-chain"];
                  }
                  message MonitorAllVpn {
                     message RouteModes {
                        message RouteMode {
                           enum AddressFamily {
                              INVALID_ENUM_VALUE_AddressFamily = 0;
                              AddressFamily_IPV4UNI = 1;
                              AddressFamily_IPV4LABELUNI = 4;
                              AddressFamily_IPV6UNI = 5;
                           };
                           AddressFamily address_family = 1 [json_name = "address-family"];
                           enum AdjRibMode {
                              AdjRibMode_RIBIN = 0;
                              AdjRibMode_RIBOUT = 1;
                           };
                           AdjRibMode adj_rib_mode = 2 [json_name = "adj-rib-mode"];
                           enum PolicyMode {
                              PolicyMode_NULL = 0;
                              PolicyMode_PREX_POLICY = 1;
                              PolicyMode_POSTX_POLICY = 2;
                           };
                           PolicyMode policy_mode = 3 [json_name = "policy-mode"];
                        }
                        repeated RouteMode route_mode = 1 [json_name = "route-mode"];
                     }
                     RouteModes route_modes = 1 [json_name = "route-modes"];
                  }
                  MonitorAllVpn monitor_all_vpn = 9 [json_name = "monitor-all-vpn"];
                  message MonitorVpns {
                     message MonitorVpn {
                        string bgp_vpn_name = 1 [json_name = "bgp-vpn-name"];
                        message RouteModes {
                           message RouteMode {
                              enum AddressFamily {
                                 INVALID_ENUM_VALUE_AddressFamily = 0;
                                 AddressFamily_IPV4UNI = 1;
                                 AddressFamily_IPV4VPN = 3;
                                 AddressFamily_IPV4LABELUNI = 4;
                                 AddressFamily_IPV6UNI = 5;
                                 AddressFamily_IPV6VPN = 6;
                                 AddressFamily_IPV4FLOW = 7;
                                 AddressFamily_IPV6FLOW = 15;
                              };
                              AddressFamily address_family = 1 [json_name = "address-family"];
                              enum AdjRibMode {
                                 AdjRibMode_RIBIN = 0;
                                 AdjRibMode_RIBOUT = 1;
                                 AdjRibMode_LOCRIB = 2;
                              };
                              AdjRibMode adj_rib_mode = 2 [json_name = "adj-rib-mode"];
                              enum PolicyMode {
                                 PolicyMode_NULL = 0;
                                 PolicyMode_PREX_POLICY = 1;
                                 PolicyMode_POSTX_POLICY = 2;
                              };
                              PolicyMode policy_mode = 3 [json_name = "policy-mode"];
                              bool add_path = 4 [json_name = "add-path"];
                              bool report_route_identifier = 5 [json_name = "report-route-identifier"];
                              message Ipv4Unicast {
                                 bool path_marking = 1 [json_name = "path-marking"];
                                 bool all = 2 [json_name = "all"];
                              }
                              Ipv4Unicast ipv4_unicast = 6 [json_name = "ipv4-unicast"];
                              message Ipv6Unicast {
                                 bool path_marking = 1 [json_name = "path-marking"];
                                 bool all = 2 [json_name = "all"];
                              }
                              Ipv6Unicast ipv6_unicast = 7 [json_name = "ipv6-unicast"];
                              message Ipv4Vpn {
                                 bool path_marking = 1 [json_name = "path-marking"];
                                 bool all = 2 [json_name = "all"];
                              }
                              Ipv4Vpn ipv4_vpn = 8 [json_name = "ipv4-vpn"];
                              message Ipv6Vpn {
                                 bool path_marking = 1 [json_name = "path-marking"];
                                 bool all = 2 [json_name = "all"];
                              }
                              Ipv6Vpn ipv6_vpn = 9 [json_name = "ipv6-vpn"];
                              message Ipv4Labeluni {
                                 bool path_marking = 1 [json_name = "path-marking"];
                                 bool all = 2 [json_name = "all"];
                              }
                              Ipv4Labeluni ipv4_labeluni = 10 [json_name = "ipv4-labeluni"];
                              message Ipv4Flow {
                                 bool report_route_identifier = 1 [json_name = "report-route-identifier"];
                              }
                              Ipv4Flow ipv4_flow = 11 [json_name = "ipv4-flow"];
                              message Ipv6Flow {
                                 bool report_route_identifier = 1 [json_name = "report-route-identifier"];
                              }
                              Ipv6Flow ipv6_flow = 12 [json_name = "ipv6-flow"];
                           }
                           repeated RouteMode route_mode = 1 [json_name = "route-mode"];
                        }
                        RouteModes route_modes = 2 [json_name = "route-modes"];
                     }
                     repeated MonitorVpn monitor_vpn = 1 [json_name = "monitor-vpn"];
                  }
                  MonitorVpns monitor_vpns = 10 [json_name = "monitor-vpns"];
                  message MonitorPeers {
                     message MonitorPeer {
                        string bgp_vpn_name = 1 [json_name = "bgp-vpn-name"];
                        string address = 2 [json_name = "address"];
                        message RouteModes {
                           message RouteMode {
                              enum AddressFamily {
                                 INVALID_ENUM_VALUE_AddressFamily = 0;
                                 AddressFamily_IPV4UNI = 1;
                                 AddressFamily_IPV4VPN = 3;
                                 AddressFamily_IPV4LABELUNI = 4;
                                 AddressFamily_IPV6UNI = 5;
                                 AddressFamily_IPV6VPN = 6;
                              };
                              AddressFamily address_family = 1 [json_name = "address-family"];
                              enum AdjRibMode {
                                 AdjRibMode_RIBIN = 0;
                                 AdjRibMode_RIBOUT = 1;
                              };
                              AdjRibMode adj_rib_mode = 2 [json_name = "adj-rib-mode"];
                              enum PolicyMode {
                                 INVALID_ENUM_VALUE_PolicyMode = 0;
                                 PolicyMode_PREX_POLICY = 1;
                                 PolicyMode_POSTX_POLICY = 2;
                              };
                              PolicyMode policy_mode = 3 [json_name = "policy-mode"];
                           }
                           repeated RouteMode route_mode = 1 [json_name = "route-mode"];
                        }
                        RouteModes route_modes = 3 [json_name = "route-modes"];
                     }
                     repeated MonitorPeer monitor_peer = 1 [json_name = "monitor-peer"];
                  }
                  MonitorPeers monitor_peers = 11 [json_name = "monitor-peers"];
               }
               repeated Session session = 1 [json_name = "session"];
            }
            Sessions sessions = 1 [json_name = "sessions"];
         }
         Bmp bmp = 38 [json_name = "bmp"];
         message IfitLearning {
            enum FlowType {
               INVALID_ENUM_VALUE_FlowType = 0;
               FlowType_BIDIRECTION = 1;
               FlowType_UNIDIRECTION = 2;
            };
            FlowType flow_type = 1 [json_name = "flow-type"];
            uint32 interval = 2 [json_name = "interval"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 3 [json_name = "measure-mode"];
            enum LearningMode {
               INVALID_ENUM_VALUE_LearningMode = 0;
               LearningMode_SIPX_MASKX_DIPX_EXACT = 1;
               LearningMode_SIPX_MASKX_DIPX_MASK = 2;
               LearningMode_SIPX_EXACTX_DIPX_EXACT = 3;
               LearningMode_SIPX_EXACTX_DIPX_MASK = 4;
            };
            LearningMode learning_mode = 4 [json_name = "learning-mode"];
            bool per_packet_delay_measure = 5 [json_name = "per-packet-delay-measure"];
            message BindLearningInterface {
               message LearningInterface_AllInterfaces {
                  message AllInterfaces7 {
                     bool all = 1 [json_name = "all"];
                     string group_name = 2 [json_name = "group-name"];
                  }
                  AllInterfaces7 all_interfaces = 1 [json_name = "all-interfaces"];
               }
               message LearningInterface_SpecifiedInterface {
                  message SpecifiedInterfaces {
                     message SpecifiedInterface8 {
                        string interface_name = 1 [json_name = "interface-name"];
                        string group_name = 2 [json_name = "group-name"];
                     }
                     repeated SpecifiedInterface8 specified_interface = 1 [json_name = "specified-interface"];
                  }
                  SpecifiedInterfaces specified_interfaces = 1 [json_name = "specified-interfaces"];
               }
               oneof LearningInterface {
                  LearningInterface_AllInterfaces learning_interface_all_interfaces = 1 [json_name = "all-interfaces"];
                  LearningInterface_SpecifiedInterface learning_interface_specified_interface = 2 [json_name = "specified-interface"];
               }
            }
            BindLearningInterface bind_learning_interface = 6 [json_name = "bind-learning-interface"];
            enum MappingColorFlag {
               INVALID_ENUM_VALUE_MappingColorFlag = 0;
               MappingColorFlag_KEEP = 1;
               MappingColorFlag_CLEAR = 2;
            };
            MappingColorFlag mapping_color_flag = 7 [json_name = "mapping-color-flag"];
         }
         IfitLearning ifit_learning = 39 [json_name = "ifit-learning"];
         message DhcpRelayVpn {
            bool enable = 1 [json_name = "enable"];
            uint32 hop_limit = 2 [json_name = "hop-limit"];
            enum ServerPolicy {
               ServerPolicy_LOADX_BALANCE = 0;
               ServerPolicy_BROADCAST = 1;
            };
            ServerPolicy server_policy = 3 [json_name = "server-policy"];
            message ServerAddresses {
               message ServerAddress {
                  string server_ip = 1 [json_name = "server-ip"];
               }
               repeated ServerAddress server_address = 1 [json_name = "server-address"];
            }
            ServerAddresses server_addresses = 4 [json_name = "server-addresses"];
         }
         DhcpRelayVpn dhcp_relay_vpn = 40 [json_name = "dhcp-relay-vpn"];
         message VlinkVpns {
            message VlinkVpn {
               enum AddressFamily {
                  AddressFamily_IPV4UNI = 0;
                  AddressFamily_IPV6UNI = 1;
               };
               AddressFamily address_family = 1 [json_name = "address-family"];
               message RouteConfiguration_RoutePolicy {
                  string route_policy_name = 1 [json_name = "route-policy-name"];
               }
               message RouteConfiguration_RouteFilter {
                  string route_filter_name = 1 [json_name = "route-filter-name"];
               }
               oneof RouteConfiguration {
                  RouteConfiguration_RoutePolicy route_configuration_route_policy = 2 [json_name = "route-policy"];
                  RouteConfiguration_RouteFilter route_configuration_route_filter = 3 [json_name = "route-filter"];
               }
            }
            repeated VlinkVpn vlink_vpn = 1 [json_name = "vlink-vpn"];
         }
         VlinkVpns vlink_vpns = 41 [json_name = "vlink-vpns"];
         message MulticastForward {
            message MulticastFastReRouters {
               message MulticastFastReRouter {
                  string source_address = 1 [json_name = "source-address"];
                  string group_address = 2 [json_name = "group-address"];
                  string mask = 3 [json_name = "mask"];
                  enum Status {
                     INVALID_ENUM_VALUE_Status = 0;
                     Status_ONE = 1;
                     Status_TWO = 2;
                  };
                  Status status = 4 [json_name = "status"];
               }
               repeated MulticastFastReRouter multicast_fast_re_router = 1 [json_name = "multicast-fast-re-router"];
            }
            MulticastFastReRouters multicast_fast_re_routers = 1 [json_name = "multicast-fast-re-routers"];
         }
         MulticastForward multicast_forward = 42 [json_name = "multicast-forward"];
         message FlexAlgoDefines {
            message FlexAlgoDefine {
               uint32 flex_algo_id = 1 [json_name = "flex-algo-id"];
               enum MetricType {
                  MetricType_IGP = 0;
                  MetricType_LINKX_DELAY = 1;
                  MetricType_TE = 2;
               };
               MetricType metric_type = 2 [json_name = "metric-type"];
               uint32 priority = 3 [json_name = "priority"];
               message ExtendedAdminGroup {
                  message FlexAlgoAffinityInclude_IncludeAll {
                     message IncludeAllAffinitys {
                        message IncludeAllAffinity {
                           string name = 1 [json_name = "name"];
                        }
                        repeated IncludeAllAffinity include_all_affinity = 1 [json_name = "include-all-affinity"];
                     }
                     IncludeAllAffinitys include_all_affinitys = 1 [json_name = "include-all-affinitys"];
                  }
                  message FlexAlgoAffinityInclude_IncludeAny {
                     message IncludeAnyAffinitys {
                        message IncludeAnyAffinity {
                           string name = 1 [json_name = "name"];
                        }
                        repeated IncludeAnyAffinity include_any_affinity = 1 [json_name = "include-any-affinity"];
                     }
                     IncludeAnyAffinitys include_any_affinitys = 1 [json_name = "include-any-affinitys"];
                  }
                  oneof FlexAlgoAffinityInclude {
                     FlexAlgoAffinityInclude_IncludeAll flex_algo_affinity_include_include_all = 1 [json_name = "include-all"];
                     FlexAlgoAffinityInclude_IncludeAny flex_algo_affinity_include_include_any = 2 [json_name = "include-any"];
                  }
                  message ExcludeAffinitys {
                     message ExcludeAffinity {
                        string name = 1 [json_name = "name"];
                     }
                     repeated ExcludeAffinity exclude_affinity = 1 [json_name = "exclude-affinity"];
                  }
                  ExcludeAffinitys exclude_affinitys = 3 [json_name = "exclude-affinitys"];
               }
               ExtendedAdminGroup extended_admin_group = 4 [json_name = "extended-admin-group"];
               message ExtendedConstraints {
                  uint32 exclude_max_link_loss = 1 [json_name = "exclude-max-link-loss"];
               }
               ExtendedConstraints extended_constraints = 5 [json_name = "extended-constraints"];
            }
            repeated FlexAlgoDefine flex_algo_define = 1 [json_name = "flex-algo-define"];
         }
         FlexAlgoDefines flex_algo_defines = 43 [json_name = "flex-algo-defines"];
         message FlexAlgoColorMapping {
            message FlexAlgoColorMaps {
               message FlexAlgoColorMap {
                  uint32 color_index = 1 [json_name = "color-index"];
                  uint32 flex_algo_id = 2 [json_name = "flex-algo-id"];
               }
               repeated FlexAlgoColorMap flex_algo_color_map = 1 [json_name = "flex-algo-color-map"];
            }
            FlexAlgoColorMaps flex_algo_color_maps = 1 [json_name = "flex-algo-color-maps"];
         }
         FlexAlgoColorMapping flex_algo_color_mapping = 44 [json_name = "flex-algo-color-mapping"];
         message TrafficStatistics {
            uint64 average_received_bytes = 1 [json_name = "average-received-bytes"];
            uint64 average_send_bytes = 2 [json_name = "average-send-bytes"];
            uint64 average_received_packets = 3 [json_name = "average-received-packets"];
            uint64 average_send_packets = 4 [json_name = "average-send-packets"];
            uint64 total_received_bytes = 5 [json_name = "total-received-bytes"];
            uint64 total_send_bytes = 6 [json_name = "total-send-bytes"];
            uint64 total_received_packets = 7 [json_name = "total-received-packets"];
            uint64 total_send_packets = 8 [json_name = "total-send-packets"];
            uint64 total_received_unicast_packets = 9 [json_name = "total-received-unicast-packets"];
            uint64 total_send_unicast_packets = 10 [json_name = "total-send-unicast-packets"];
            uint64 total_received_multicast_packets = 11 [json_name = "total-received-multicast-packets"];
            uint64 total_send_multicast_packets = 12 [json_name = "total-send-multicast-packets"];
            uint64 total_received_broadcast_packets = 13 [json_name = "total-received-broadcast-packets"];
            uint64 total_send_broadcast_packets = 14 [json_name = "total-send-broadcast-packets"];
            string reset_traffic_time = 15 [json_name = "reset-traffic-time"];
            uint32 reset_traffic_number = 16 [json_name = "reset-traffic-number"];
         }
         TrafficStatistics traffic_statistics = 45 [json_name = "traffic-statistics"];
         message Apn {
            message ApnIpv6Isolation {
               message ApnIdIsolationPolicys {
                  message ApnIdIsolationPolicy {
                     enum Direction {
                        INVALID_ENUM_VALUE_Direction = 0;
                        Direction_INBOUND = 1;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string isolation_policy_name = 2 [json_name = "isolation-policy-name"];
                  }
                  repeated ApnIdIsolationPolicy apn_id_isolation_policy = 1 [json_name = "apn-id-isolation-policy"];
               }
               ApnIdIsolationPolicys apn_id_isolation_policys = 1 [json_name = "apn-id-isolation-policys"];
            }
            ApnIpv6Isolation apn_ipv6_isolation = 1 [json_name = "apn-ipv6-isolation"];
         }
         Apn apn = 46 [json_name = "apn"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 1 [json_name = "instances"];
   message Global {
      string cfg_router_id = 1 [json_name = "cfg-router-id"];
      bool as_notation_plain = 2 [json_name = "as-notation-plain"];
      string route_distinguisher_auto_ip = 3 [json_name = "route-distinguisher-auto-ip"];
      uint32 vpn_instance_limit = 4 [json_name = "vpn-instance-limit"];
   }
   Global global = 2 [json_name = "global"];
}


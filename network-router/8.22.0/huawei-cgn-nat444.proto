syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-19 12:00:06
// ProtoYang-version 1
// module huawei-cgn-nat444
// revision 2022-10-15
// revision 2022-10-13
// revision 2022-09-22
// revision 2022-06-17
// revision 2022-03-09
// revision 2022-01-29
// revision 2021-11-05
// revision 2021-10-11
// revision 2021-07-31
// namespace urn:huawei:yang:huawei-cgn-nat444

package huawei_cgn_nat444;

message CgnNat444 {
   message NatInstances {
      message NatInstance {
         string instance_name = 1 [json_name = "instance-name"];
         uint32 instance_id = 2 [json_name = "instance-id"];
         message Algs {
            message Alg {
               enum Protocol {
                  INVALID_ENUM_VALUE_Protocol = 0;
                  Protocol_FTP = 1;
                  Protocol_RTSP = 2;
                  Protocol_PPTP = 4;
                  Protocol_SIP = 8;
                  Protocol_DNS = 16;
               };
               Protocol protocol = 1 [json_name = "protocol"];
               uint32 rate_threshold = 2 [json_name = "rate-threshold"];
               bool separate_translation = 3 [json_name = "separate-translation"];
            }
            repeated Alg alg = 1 [json_name = "alg"];
         }
         Algs algs = 3 [json_name = "algs"];
         message Log {
            message Hosts {
               message Host {
                  string host_ip = 1 [json_name = "host-ip"];
                  uint32 host_port = 2 [json_name = "host-port"];
                  string vpn_name = 3 [json_name = "vpn-name"];
                  string source_ip = 4 [json_name = "source-ip"];
                  uint32 source_port = 5 [json_name = "source-port"];
                  string inside_vpn_name = 6 [json_name = "inside-vpn-name"];
                  string host_name = 7 [json_name = "host-name"];
                  bool secondary = 8 [json_name = "secondary"];
               }
               repeated Host host = 1 [json_name = "host"];
            }
            Hosts hosts = 1 [json_name = "hosts"];
            message SendMode {
               enum Mode {
                  Mode_POLLING = 0;
                  Mode_CONCURRENT = 1;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            SendMode send_mode = 2 [json_name = "send-mode"];
            message SessionLog {
               bool enable = 1 [json_name = "enable"];
               enum PrimaryLogType {
                  INVALID_ENUM_VALUE_PrimaryLogType = 0;
                  PrimaryLogType_ELOG = 1;
                  PrimaryLogType_SYSLOG = 2;
                  PrimaryLogType_NETSTREAM = 3;
               };
               PrimaryLogType primary_log_type = 2 [json_name = "primary-log-type"];
               enum SecondaryLogType {
                  INVALID_ENUM_VALUE_SecondaryLogType = 0;
                  SecondaryLogType_ELOG = 1;
                  SecondaryLogType_SYSLOG = 2;
                  SecondaryLogType_NETSTREAM = 3;
               };
               SecondaryLogType secondary_log_type = 3 [json_name = "secondary-log-type"];
            }
            SessionLog session_log = 3 [json_name = "session-log"];
            message UserLog {
               bool enable = 1 [json_name = "enable"];
               enum PrimaryLogType {
                  INVALID_ENUM_VALUE_PrimaryLogType = 0;
                  PrimaryLogType_SYSLOG = 2;
                  PrimaryLogType_NETSTREAM = 3;
               };
               PrimaryLogType primary_log_type = 2 [json_name = "primary-log-type"];
               enum SecondaryLogType {
                  INVALID_ENUM_VALUE_SecondaryLogType = 0;
                  SecondaryLogType_SYSLOG = 2;
                  SecondaryLogType_NETSTREAM = 3;
               };
               SecondaryLogType secondary_log_type = 3 [json_name = "secondary-log-type"];
            }
            UserLog user_log = 4 [json_name = "user-log"];
         }
         Log log = 4 [json_name = "log"];
         message BindServiceInstanceGroup {
            string name = 1 [json_name = "name"];
         }
         BindServiceInstanceGroup bind_service_instance_group = 5 [json_name = "bind-service-instance-group"];
         message NatServer {
            message Attribute {
               bool using_address_group_ip = 1 [json_name = "using-address-group-ip"];
            }
            Attribute attribute = 1 [json_name = "attribute"];
         }
         NatServer nat_server = 6 [json_name = "nat-server"];
         message PortRange {
            uint32 initial_number = 1 [json_name = "initial-number"];
            uint32 extended_number = 2 [json_name = "extended-number"];
            uint32 extended_times = 3 [json_name = "extended-times"];
         }
         PortRange port_range = 7 [json_name = "port-range"];
         message FilterMode {
            enum Mode {
               Mode_SYMMETRIC = 0;
               Mode_FULLX_CONE = 1;
            };
            Mode mode = 1 [json_name = "mode"];
         }
         FilterMode filter_mode = 8 [json_name = "filter-mode"];
         message InterChassisDistributing {
            string ip_address = 1 [json_name = "ip-address"];
            uint32 mask_length = 2 [json_name = "mask-length"];
            string vpn_name = 3 [json_name = "vpn-name"];
         }
         InterChassisDistributing inter_chassis_distributing = 9 [json_name = "inter-chassis-distributing"];
         message FastForwarding {
            bool statistics_enable = 1 [json_name = "statistics-enable"];
         }
         FastForwarding fast_forwarding = 10 [json_name = "fast-forwarding"];
         message AddressGroups {
            message AddressGroup {
               string group_name = 1 [json_name = "group-name"];
               uint32 group_id = 2 [json_name = "group-id"];
               bool no_pat = 3 [json_name = "no-pat"];
               string vpn_name = 4 [json_name = "vpn-name"];
               message Address_AddressSegment {
                  string start_address = 1 [json_name = "start-address"];
                  message End_Address {
                     string end_address = 1 [json_name = "end-address"];
                  }
                  message End_Mask {
                     uint32 mask_length = 1 [json_name = "mask-length"];
                  }
                  oneof End {
                     End_Address end_address = 2 [json_name = "address"];
                     End_Mask end_mask = 3 [json_name = "mask"];
                  }
               }
               message Address_EasyIp {
                  string interface = 1 [json_name = "interface"];
               }
               message Address_BindIpPool {
                  string ip_pool = 1 [json_name = "ip-pool"];
               }
               message Address_MultiSections {
                  message Sections {
                     message Section {
                        uint32 section_id = 1 [json_name = "section-id"];
                        message Address_AddressSegment {
                           string start_address = 1 [json_name = "start-address"];
                           message End_Address {
                              string end_address = 1 [json_name = "end-address"];
                           }
                           message End_Mask {
                              uint32 mask_length = 1 [json_name = "mask-length"];
                           }
                           oneof End {
                              End_Address end_address = 2 [json_name = "address"];
                              End_Mask end_mask = 3 [json_name = "mask"];
                           }
                        }
                        message Address_EasyIp {
                           string interface = 1 [json_name = "interface"];
                        }
                        oneof Address {
                           Address_AddressSegment address_address_segment = 2 [json_name = "address-segment"];
                           Address_EasyIp address_easy_ip = 3 [json_name = "easy-ip"];
                        }
                     }
                     repeated Section section = 1 [json_name = "section"];
                  }
                  Sections sections = 1 [json_name = "sections"];
               }
               oneof Address {
                  Address_AddressSegment address_address_segment = 5 [json_name = "address-segment"];
                  Address_EasyIp address_easy_ip = 6 [json_name = "easy-ip"];
                  Address_BindIpPool address_bind_ip_pool = 7 [json_name = "bind-ip-pool"];
                  Address_MultiSections address_multi_sections = 8 [json_name = "multi-sections"];
               }
            }
            repeated AddressGroup address_group = 1 [json_name = "address-group"];
         }
         AddressGroups address_groups = 11 [json_name = "address-groups"];
         message NatTranslate {
            message RuleType_AclRule {
               message BindAcls {
                  message BindAcl {
                     string acl_number = 1 [json_name = "acl-number"];
                     string address_group_name = 2 [json_name = "address-group-name"];
                  }
                  repeated BindAcl bind_acl = 1 [json_name = "bind-acl"];
               }
               BindAcls bind_acls = 1 [json_name = "bind-acls"];
            }
            message RuleType_AnyRule {
               message AddressGroup {
                  string address_group_name = 1 [json_name = "address-group-name"];
               }
               AddressGroup address_group = 1 [json_name = "address-group"];
            }
            oneof RuleType {
               RuleType_AclRule rule_type_acl_rule = 1 [json_name = "acl-rule"];
               RuleType_AnyRule rule_type_any_rule = 2 [json_name = "any-rule"];
            }
         }
         NatTranslate nat_translate = 12 [json_name = "nat-translate"];
         message Pcp {
            message PcpEnable {
               bool enable = 1 [json_name = "enable"];
            }
            PcpEnable pcp_enable = 1 [json_name = "pcp-enable"];
            message PcpPreferFailure {
               bool ignore = 1 [json_name = "ignore"];
            }
            PcpPreferFailure pcp_prefer_failure = 2 [json_name = "pcp-prefer-failure"];
            message PcpServer {
               message Ipv4Server {
                  string ipv4_address = 1 [json_name = "ipv4-address"];
                  uint32 mask_length = 2 [json_name = "mask-length"];
               }
               Ipv4Server ipv4_server = 1 [json_name = "ipv4-server"];
            }
            PcpServer pcp_server = 3 [json_name = "pcp-server"];
            message PortReservation {
               uint32 start_port = 1 [json_name = "start-port"];
               uint32 end_port = 2 [json_name = "end-port"];
               bool using_well_known_port = 3 [json_name = "using-well-known-port"];
            }
            PortReservation port_reservation = 4 [json_name = "port-reservation"];
         }
         Pcp pcp = 13 [json_name = "pcp"];
         message StatisticsEnable {
            bool port_usage = 1 [json_name = "port-usage"];
            bool session_usage = 2 [json_name = "session-usage"];
            bool address_pool_usage = 3 [json_name = "address-pool-usage"];
            message UsageStatisticsEnable {
               bool port_usage = 1 [json_name = "port-usage"];
               bool session_usage = 2 [json_name = "session-usage"];
               bool address_pool_usage = 3 [json_name = "address-pool-usage"];
            }
            UsageStatisticsEnable usage_statistics_enable = 4 [json_name = "usage-statistics-enable"];
            message FastForwarding {
               bool statistics_enable = 1 [json_name = "statistics-enable"];
            }
            FastForwarding fast_forwarding = 5 [json_name = "fast-forwarding"];
         }
         StatisticsEnable statistics_enable = 14 [json_name = "statistics-enable"];
         message PortReuse {
            bool enable = 1 [json_name = "enable"];
         }
         PortReuse port_reuse = 15 [json_name = "port-reuse"];
      }
      repeated NatInstance nat_instance = 1 [json_name = "nat-instance"];
   }
   NatInstances nat_instances = 1 [json_name = "nat-instances"];
}


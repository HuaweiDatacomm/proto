syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-22 16:15:48
// ProtoYang-version 1
// module huawei-pki
// revision 2022-10-21
// revision 2022-09-23
// revision 2022-09-22
// revision 2022-09-14
// revision 2022-09-05
// revision 2022-08-26
// revision 2022-07-30
// revision 2022-06-21
// revision 2022-06-17
// revision 2022-06-01
// revision 2022-05-26
// revision 2022-05-21
// revision 2022-04-18
// revision 2022-03-09
// revision 2022-02-09
// revision 2022-01-18
// revision 2021-06-02
// revision 2021-04-08
// revision 2021-01-06
// namespace urn:huawei:yang:huawei-pki

package huawei_pki;

message Pki {
   message Entitys {
      message Entity {
         string name = 1 [json_name = "name"];
         string common_name = 2 [json_name = "common-name"];
         string fqdn = 3 [json_name = "fqdn"];
         string department = 4 [json_name = "department"];
         string organization = 5 [json_name = "organization"];
         string locality = 6 [json_name = "locality"];
         string state = 7 [json_name = "state"];
         string country = 8 [json_name = "country"];
         string email = 9 [json_name = "email"];
         message Address_IpAddress {
            string ip_address = 1 [json_name = "ip-address"];
         }
         message Address_InterfaceAddress {
            message InterfaceAddress5 {
               string interface_name = 1 [json_name = "interface-name"];
               enum IpVersion {
                  IpVersion_UNKNOWN = 0;
                  IpVersion_IPV4 = 1;
                  IpVersion_IPV6 = 2;
               };
               IpVersion ip_version = 2 [json_name = "ip-version"];
            }
            InterfaceAddress5 interface_address = 1 [json_name = "interface-address"];
            string interface_name = 2 [json_name = "interface-name"];
            enum IpVersion {
               IpVersion_UNKNOWN = 0;
               IpVersion_IPV4 = 1;
               IpVersion_IPV6 = 2;
            };
            IpVersion ip_version = 3 [json_name = "ip-version"];
         }
         oneof Address {
            Address_IpAddress address_ip_address = 10 [json_name = "ip-address"];
            Address_InterfaceAddress address_interface_address = 11 [json_name = "interface-address"];
         }
         message GeneralName_CommonName {
            string common_name = 1 [json_name = "common-name"];
         }
         message GeneralName_EsnFlag {
            bool esn_flag = 1 [json_name = "esn-flag"];
         }
         oneof GeneralName {
            GeneralName_CommonName general_name_common_name = 12 [json_name = "common-name"];
            GeneralName_EsnFlag general_name_esn_flag = 13 [json_name = "esn-flag"];
         }
      }
      repeated Entity entity = 1 [json_name = "entity"];
   }
   Entitys entitys = 1 [json_name = "entitys"];
   message CmpSessions {
      message CmpSession {
         string name = 1 [json_name = "name"];
         string entity = 2 [json_name = "entity"];
         string ca_name = 3 [json_name = "ca-name"];
         string url = 4 [json_name = "url"];
         message KeyPair {
            string name = 1 [json_name = "name"];
            bool regenerate = 2 [json_name = "regenerate"];
            uint32 key_size = 3 [json_name = "key-size"];
         }
         KeyPair key_pair = 5 [json_name = "key-pair"];
         message AuthenticationCode {
            string reference_value = 1 [json_name = "reference-value"];
            string secret_value = 2 [json_name = "secret-value"];
         }
         AuthenticationCode authentication_code = 6 [json_name = "authentication-code"];
         bool auto_update = 7 [json_name = "auto-update"];
         uint32 expire_time = 8 [json_name = "expire-time"];
         string authentication_cert = 9 [json_name = "authentication-cert"];
         string verification_cert = 10 [json_name = "verification-cert"];
         enum AuthenticationMethod {
            AuthenticationMethod_MESSAGEX_CODE = 0;
            AuthenticationMethod_SIGNATURE = 1;
         };
         AuthenticationMethod authentication_method = 11 [json_name = "authentication-method"];
         message SourceAddress_SourceIp {
            string source_ip = 1 [json_name = "source-ip"];
         }
         message SourceAddress_SourceInterface {
            string source_interface = 1 [json_name = "source-interface"];
         }
         oneof SourceAddress {
            SourceAddress_SourceIp source_address_source_ip = 12 [json_name = "source-ip"];
            SourceAddress_SourceInterface source_address_source_interface = 13 [json_name = "source-interface"];
         }
         string vpn_instance = 14 [json_name = "vpn-instance"];
         message ServerUrl {
            string url = 1 [json_name = "url"];
            bool ascii_enable = 2 [json_name = "ascii-enable"];
         }
         ServerUrl server_url = 15 [json_name = "server-url"];
         string domain_name = 16 [json_name = "domain-name"];
      }
      repeated CmpSession cmp_session = 1 [json_name = "cmp-session"];
   }
   CmpSessions cmp_sessions = 2 [json_name = "cmp-sessions"];
   message Domains {
      message Domain {
         string name = 1 [json_name = "name"];
         string entity_name = 2 [json_name = "entity-name"];
         string entity = 3 [json_name = "entity"];
         string cmp_session = 4 [json_name = "cmp-session"];
         enum DigestAlgorithm {
            DigestAlgorithm_SHAX_256 = 0;
            DigestAlgorithm_SHAX_384 = 1;
            DigestAlgorithm_SHAX_512 = 2;
            DigestAlgorithm_MD5 = 3;
            DigestAlgorithm_SM3 = 4;
            DigestAlgorithm_SHA1 = 5;
         };
         DigestAlgorithm digest_algorithm = 5 [json_name = "digest-algorithm"];
         message KeyPair {
            string name = 1 [json_name = "name"];
            enum Type {
               Type_RSA = 0;
               Type_SM2 = 1;
               Type_ECC = 2;
            };
            Type type = 2 [json_name = "type"];
         }
         KeyPair key_pair = 6 [json_name = "key-pair"];
         message CrlUpdate {
            bool auto_update = 1 [json_name = "auto-update"];
            uint32 period = 2 [json_name = "period"];
            message Service_Ldap {
               message LdapServices {
                  message LdapService {
                     string server_address = 1 [json_name = "server-address"];
                     uint32 server_port = 2 [json_name = "server-port"];
                     string source_address = 3 [json_name = "source-address"];
                     string vpn_instance = 4 [json_name = "vpn-instance"];
                     uint32 version = 5 [json_name = "version"];
                     string user = 6 [json_name = "user"];
                     string password = 7 [json_name = "password"];
                  }
                  repeated LdapService ldap_service = 1 [json_name = "ldap-service"];
               }
               LdapServices ldap_services = 1 [json_name = "ldap-services"];
            }
            message Service_Http {
               message HttpServices {
                  message HttpService {
                     string url = 1 [json_name = "url"];
                     string source_address = 2 [json_name = "source-address"];
                     string vpn_instance = 3 [json_name = "vpn-instance"];
                  }
                  repeated HttpService http_service = 1 [json_name = "http-service"];
               }
               HttpServices http_services = 1 [json_name = "http-services"];
            }
            oneof Service {
               Service_Ldap service_ldap = 3 [json_name = "ldap"];
               Service_Http service_http = 4 [json_name = "http"];
            }
            enum UpdateType {
               UpdateType_HTTP = 0;
               UpdateType_LDAP = 1;
            };
            UpdateType update_type = 5 [json_name = "update-type"];
            message HttpServices {
               message HttpService {
                  string url = 1 [json_name = "url"];
                  string source_address = 2 [json_name = "source-address"];
                  string vpn_instance = 3 [json_name = "vpn-instance"];
               }
               repeated HttpService http_service = 1 [json_name = "http-service"];
            }
            HttpServices http_services = 6 [json_name = "http-services"];
            message LdapServices {
               message LdapService {
                  string server_address = 1 [json_name = "server-address"];
                  uint32 server_port = 2 [json_name = "server-port"];
                  string source_address = 3 [json_name = "source-address"];
                  string vpn_instance = 4 [json_name = "vpn-instance"];
                  uint32 version = 5 [json_name = "version"];
                  string user_name = 6 [json_name = "user-name"];
                  string password = 7 [json_name = "password"];
               }
               repeated LdapService ldap_service = 1 [json_name = "ldap-service"];
            }
            LdapServices ldap_services = 7 [json_name = "ldap-services"];
         }
         CrlUpdate crl_update = 7 [json_name = "crl-update"];
         enum KeyUsage {
            INVALID_ENUM_VALUE_KeyUsage = 0;
            KeyUsage_SIGNATURE = 1;
            KeyUsage_ENCIPHERMENT = 2;
         };
         KeyUsage key_usage = 8 [json_name = "key-usage"];
         enum ValidateMethod {
            ValidateMethod_NONE = 0;
            ValidateMethod_CRL = 1;
            ValidateMethod_OCSP = 2;
            ValidateMethod_CRLX_NONE = 3;
         };
         ValidateMethod validate_method = 9 [json_name = "validate-method"];
      }
      repeated Domain domain = 1 [json_name = "domain"];
   }
   Domains domains = 3 [json_name = "domains"];
   message CertificateInfos {
      message CertificateInfo {
         enum FileType {
            FileType_CA = 0;
            FileType_LOCAL = 1;
            FileType_DEFAULTX_CA = 2;
            FileType_DEFAULTX_LOCAL = 3;
            FileType_CRL = 4;
            FileType_OCSP = 5;
         };
         FileType file_type = 1 [json_name = "file-type"];
         string domain_name = 2 [json_name = "domain-name"];
         string file_name = 3 [json_name = "file-name"];
         message Certificates {
            message Certificate {
               string serial_number = 1 [json_name = "serial-number"];
               string version = 2 [json_name = "version"];
               string issuer = 3 [json_name = "issuer"];
               string subject = 4 [json_name = "subject"];
               string start_time = 5 [json_name = "start-time"];
               string end_time = 6 [json_name = "end-time"];
               string signature_algo = 7 [json_name = "signature-algo"];
               string fingerprint = 8 [json_name = "fingerprint"];
               string not_before = 9 [json_name = "not-before"];
               string not_after = 10 [json_name = "not-after"];
               string signature_algorithm = 11 [json_name = "signature-algorithm"];
               enum KeyPairType {
                  KeyPairType_RSA = 0;
                  KeyPairType_SM2 = 1;
                  KeyPairType_ECC = 2;
               };
               KeyPairType key_pair_type = 12 [json_name = "key-pair-type"];
               uint32 key_size = 13 [json_name = "key-size"];
               enum CurveType {
                  CurveType_PRIME256V1 = 0;
                  CurveType_EC192WAPI = 1;
               };
               CurveType curve_type = 14 [json_name = "curve-type"];
            }
            repeated Certificate certificate = 1 [json_name = "certificate"];
         }
         Certificates certificates = 4 [json_name = "certificates"];
         enum Type {
            Type_CA = 0;
            Type_LOCAL = 1;
            Type_DEFAULTX_CA = 2;
            Type_DEFAULTX_LOCAL = 3;
         };
         Type type = 5 [json_name = "type"];
         string name = 6 [json_name = "name"];
         message Certificate {
            string serial_number = 1 [json_name = "serial-number"];
            string version = 2 [json_name = "version"];
            string issuer = 3 [json_name = "issuer"];
            string subject = 4 [json_name = "subject"];
            string not_before = 5 [json_name = "not-before"];
            string not_after = 6 [json_name = "not-after"];
            string signature_algorithm = 7 [json_name = "signature-algorithm"];
            string fingerprint = 8 [json_name = "fingerprint"];
            enum KeyPairType {
               KeyPairType_RSA = 0;
               KeyPairType_SM2 = 1;
               KeyPairType_ECC = 2;
            };
            KeyPairType key_pair_type = 9 [json_name = "key-pair-type"];
            uint32 key_size = 10 [json_name = "key-size"];
            enum CurveType {
               CurveType_PRIME256V1 = 0;
               CurveType_EC192WAPI = 1;
            };
            CurveType curve_type = 11 [json_name = "curve-type"];
         }
         Certificate certificate = 7 [json_name = "certificate"];
      }
      repeated CertificateInfo certificate_info = 1 [json_name = "certificate-info"];
   }
   CertificateInfos certificate_infos = 4 [json_name = "certificate-infos"];
   message PublicKeyInfos {
      message PublicKeyInfo {
         string domain_name = 1 [json_name = "domain-name"];
         enum KeyAlgoType {
            KeyAlgoType_RSA = 0;
            KeyAlgoType_SM2 = 1;
         };
         KeyAlgoType key_algo_type = 2 [json_name = "key-algo-type"];
         string modulus_bits = 3 [json_name = "modulus-bits"];
         string key_code = 4 [json_name = "key-code"];
         string name = 5 [json_name = "name"];
         uint32 key_size = 6 [json_name = "key-size"];
         enum EllipticCurve {
            EllipticCurve_PRIME256V1 = 0;
         };
         EllipticCurve elliptic_curve = 7 [json_name = "elliptic-curve"];
      }
      repeated PublicKeyInfo public_key_info = 1 [json_name = "public-key-info"];
   }
   PublicKeyInfos public_key_infos = 5 [json_name = "public-key-infos"];
   message DomainInfos {
      message DomainInfo {
         string domain_name = 1 [json_name = "domain-name"];
         enum DomainStatus {
            DomainStatus_ACTIVATED = 0;
            DomainStatus_INACTIVE = 1;
         };
         DomainStatus domain_status = 2 [json_name = "domain-status"];
         string entity_name = 3 [json_name = "entity-name"];
         string local_certificate_name = 4 [json_name = "local-certificate-name"];
         repeated string ca_certificate_name = 5 [json_name = "ca-certificate-name"];
         repeated string crl_name = 6 [json_name = "crl-name"];
      }
      repeated DomainInfo domain_info = 1 [json_name = "domain-info"];
   }
   DomainInfos domain_infos = 6 [json_name = "domain-infos"];
   message KeyPairInfos {
      message KeyPairInfo {
         string name = 1 [json_name = "name"];
         enum Type {
            Type_RSA = 0;
            Type_SM2 = 1;
            Type_ECC = 2;
         };
         Type type = 2 [json_name = "type"];
         uint32 key_size = 3 [json_name = "key-size"];
         enum CurveType {
            CurveType_PRIME256V1 = 0;
            CurveType_EC192WAPI = 1;
         };
         CurveType curve_type = 4 [json_name = "curve-type"];
      }
      repeated KeyPairInfo key_pair_info = 1 [json_name = "key-pair-info"];
   }
   KeyPairInfos key_pair_infos = 7 [json_name = "key-pair-infos"];
   message CrlInfos {
      message CrlInfo {
         string domain_name = 1 [json_name = "domain-name"];
         string name = 2 [json_name = "name"];
         message Crl {
            string version = 1 [json_name = "version"];
            string issuer = 2 [json_name = "issuer"];
            string last_update = 3 [json_name = "last-update"];
            string next_update = 4 [json_name = "next-update"];
            string signature_algorithm = 5 [json_name = "signature-algorithm"];
         }
         Crl crl = 3 [json_name = "crl"];
      }
      repeated CrlInfo crl_info = 1 [json_name = "crl-info"];
   }
   CrlInfos crl_infos = 8 [json_name = "crl-infos"];
   message Global {
      message CertificateCheck {
         enum ValidateMethod {
            ValidateMethod_NONE = 0;
            ValidateMethod_CRL = 1;
            ValidateMethod_OCSP = 2;
            ValidateMethod_CRLX_NONE = 3;
         };
         ValidateMethod validate_method = 1 [json_name = "validate-method"];
         uint32 expiration_check_interval = 2 [json_name = "expiration-check-interval"];
         uint32 expiration_prewarning_day = 3 [json_name = "expiration-prewarning-day"];
      }
      CertificateCheck certificate_check = 1 [json_name = "certificate-check"];
      message LoadCertificate {
         bool default_ca = 1 [json_name = "default-ca"];
         bool default_local = 2 [json_name = "default-local"];
      }
      LoadCertificate load_certificate = 2 [json_name = "load-certificate"];
   }
   Global global = 9 [json_name = "global"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-15 19:15:21
// ProtoYang-version 1
// module huawei-microsegmentation
// revision 2022-09-29
// revision 2022-09-10
// revision 2022-06-16
// namespace urn:huawei:yang:huawei-microsegmentation

package huawei_microsegmentation;

message Microsegmentation {
   message Global {
      bool enable = 1 [json_name = "enable"];
      enum UnknownEpgAction {
         INVALID_ENUM_VALUE_UnknownEpgAction = 0;
         UnknownEpgAction_DENY = 1;
         UnknownEpgAction_PERMIT = 2;
      };
      UnknownEpgAction unknown_epg_action = 2 [json_name = "unknown-epg-action"];
      enum DefaultEpgAction {
         INVALID_ENUM_VALUE_DefaultEpgAction = 0;
         DefaultEpgAction_DENY = 1;
         DefaultEpgAction_PERMIT = 2;
      };
      DefaultEpgAction default_epg_action = 3 [json_name = "default-epg-action"];
      enum SameEpgAction {
         SameEpgAction_NONE = 0;
         SameEpgAction_DENY = 1;
         SameEpgAction_PERMIT = 2;
      };
      SameEpgAction same_epg_action = 4 [json_name = "same-epg-action"];
   }
   Global global = 1 [json_name = "global"];
   message EndpointGroups {
      message EndpointGroup {
         uint32 segment_id = 1 [json_name = "segment-id"];
         string segment_name = 2 [json_name = "segment-name"];
         string description = 3 [json_name = "description"];
         enum IntraEpgBehavior {
            IntraEpgBehavior_NONE = 0;
            IntraEpgBehavior_DENY = 1;
            IntraEpgBehavior_PERMIT = 2;
         };
         IntraEpgBehavior intra_epg_behavior = 4 [json_name = "intra-epg-behavior"];
         bool statistics_enable = 5 [json_name = "statistics-enable"];
         message Statistics {
            message Statistic {
               string slot_id = 1 [json_name = "slot-id"];
               uint64 source_packets = 2 [json_name = "source-packets"];
               uint64 destination_packets = 3 [json_name = "destination-packets"];
            }
            repeated Statistic statistic = 1 [json_name = "statistic"];
         }
         Statistics statistics = 6 [json_name = "statistics"];
         message IpMembers {
            message IpMember {
               string ip_address = 1 [json_name = "ip-address"];
               uint32 prefix_len = 2 [json_name = "prefix-len"];
               string vpn_name = 3 [json_name = "vpn-name"];
               message Statistics {
                  message Statistic {
                     string slot_id = 1 [json_name = "slot-id"];
                     uint64 source_packets = 2 [json_name = "source-packets"];
                     uint64 destination_packets = 3 [json_name = "destination-packets"];
                  }
                  repeated Statistic statistic = 1 [json_name = "statistic"];
               }
               Statistics statistics = 4 [json_name = "statistics"];
               message States {
                  message State {
                     string slot_id = 1 [json_name = "slot-id"];
                     enum State8 {
                        State8_SUCCESS = 0;
                        State8_FAIL = 1;
                        State8_ROLLX_BACK = 2;
                        State8_PROCESSING = 3;
                     };
                     State8 state8 = 2 [json_name = "state"];
                  }
                  repeated State state = 1 [json_name = "state"];
               }
               States states = 5 [json_name = "states"];
            }
            repeated IpMember ip_member = 1 [json_name = "ip-member"];
         }
         IpMembers ip_members = 7 [json_name = "ip-members"];
         message Ipv6Members {
            message Ipv6Member {
               string ipv6_address = 1 [json_name = "ipv6-address"];
               uint32 prefix_len = 2 [json_name = "prefix-len"];
               string vpn_name = 3 [json_name = "vpn-name"];
               message Statistics {
                  message Statistic {
                     string slot_id = 1 [json_name = "slot-id"];
                     uint64 source_packets = 2 [json_name = "source-packets"];
                     uint64 destination_packets = 3 [json_name = "destination-packets"];
                  }
                  repeated Statistic statistic = 1 [json_name = "statistic"];
               }
               Statistics statistics = 4 [json_name = "statistics"];
               message States {
                  message State {
                     string slot_id = 1 [json_name = "slot-id"];
                     enum State8 {
                        State8_SUCCESS = 0;
                        State8_FAIL = 1;
                        State8_ROLLX_BACK = 2;
                        State8_PROCESSING = 3;
                     };
                     State8 state8 = 2 [json_name = "state"];
                  }
                  repeated State state = 1 [json_name = "state"];
               }
               States states = 5 [json_name = "states"];
            }
            repeated Ipv6Member ipv6_member = 1 [json_name = "ipv6-member"];
         }
         Ipv6Members ipv6_members = 8 [json_name = "ipv6-members"];
      }
      repeated EndpointGroup endpoint_group = 1 [json_name = "endpoint-group"];
   }
   EndpointGroups endpoint_groups = 2 [json_name = "endpoint-groups"];
   message SegmentClassifiers {
      message SegmentClassifier {
         string classifier_name = 1 [json_name = "classifier-name"];
         message Rules {
            message Rule {
               uint32 priority = 1 [json_name = "priority"];
               uint32 source_segment_id = 2 [json_name = "source-segment-id"];
               uint32 destination_segment_id = 3 [json_name = "destination-segment-id"];
               enum Action {
                  INVALID_ENUM_VALUE_Action = 0;
                  Action_DENY = 1;
                  Action_PERMIT = 2;
               };
               Action action = 4 [json_name = "action"];
               uint32 protocol = 5 [json_name = "protocol"];
               uint32 source_port_begin = 6 [json_name = "source-port-begin"];
               uint32 source_port_end = 7 [json_name = "source-port-end"];
               uint32 destination_port_begin = 8 [json_name = "destination-port-begin"];
               uint32 destination_port_end = 9 [json_name = "destination-port-end"];
            }
            repeated Rule rule = 1 [json_name = "rule"];
         }
         Rules rules = 2 [json_name = "rules"];
      }
      repeated SegmentClassifier segment_classifier = 1 [json_name = "segment-classifier"];
   }
   SegmentClassifiers segment_classifiers = 3 [json_name = "segment-classifiers"];
   message SegmentBehaviors {
      message SegmentBehavior {
         string behavior_name = 1 [json_name = "behavior-name"];
         bool statistics_enable = 2 [json_name = "statistics-enable"];
      }
      repeated SegmentBehavior segment_behavior = 1 [json_name = "segment-behavior"];
   }
   SegmentBehaviors segment_behaviors = 4 [json_name = "segment-behaviors"];
   message SegmentPolicys {
      message SegmentPolicy {
         string policy_name = 1 [json_name = "policy-name"];
         message ClassifierBehaviorCombinations {
            message ClassifierBehaviorCombination {
               string classifier_name = 1 [json_name = "classifier-name"];
               string behavior_name = 2 [json_name = "behavior-name"];
               uint32 precedence = 3 [json_name = "precedence"];
            }
            repeated ClassifierBehaviorCombination classifier_behavior_combination = 1 [json_name = "classifier-behavior-combination"];
         }
         ClassifierBehaviorCombinations classifier_behavior_combinations = 2 [json_name = "classifier-behavior-combinations"];
      }
      repeated SegmentPolicy segment_policy = 1 [json_name = "segment-policy"];
   }
   SegmentPolicys segment_policys = 5 [json_name = "segment-policys"];
   message ApplyGlobalPolicys {
      message ApplyGlobalPolicy {
         string policy_name = 1 [json_name = "policy-name"];
         message Statistics {
            message Statistic {
               string slot_id = 1 [json_name = "slot-id"];
               uint64 mached_packets = 2 [json_name = "mached-packets"];
               uint64 mached_bytes = 3 [json_name = "mached-bytes"];
               uint64 passed_packets = 4 [json_name = "passed-packets"];
               uint64 dropped_packets = 5 [json_name = "dropped-packets"];
               uint64 passed_bytes = 6 [json_name = "passed-bytes"];
               uint64 dropped_bytes = 7 [json_name = "dropped-bytes"];
            }
            repeated Statistic statistic = 1 [json_name = "statistic"];
         }
         Statistics statistics = 2 [json_name = "statistics"];
         message Classifiers {
            message Classifier {
               string classifier_name = 1 [json_name = "classifier-name"];
               message Statistics {
                  message Statistic {
                     string slot_id = 1 [json_name = "slot-id"];
                     uint64 mached_packets = 2 [json_name = "mached-packets"];
                     uint64 mached_bytes = 3 [json_name = "mached-bytes"];
                     uint64 passed_packets = 4 [json_name = "passed-packets"];
                     uint64 dropped_packets = 5 [json_name = "dropped-packets"];
                     uint64 passed_bytes = 6 [json_name = "passed-bytes"];
                     uint64 dropped_bytes = 7 [json_name = "dropped-bytes"];
                  }
                  repeated Statistic statistic = 1 [json_name = "statistic"];
               }
               Statistics statistics = 2 [json_name = "statistics"];
               message Rules {
                  message Rule {
                     uint32 priority = 1 [json_name = "priority"];
                     message Statistics {
                        message Statistic {
                           string slot_id = 1 [json_name = "slot-id"];
                           uint64 passed_packets = 2 [json_name = "passed-packets"];
                           uint64 dropped_packets = 3 [json_name = "dropped-packets"];
                           uint64 passed_bytes = 4 [json_name = "passed-bytes"];
                           uint64 dropped_bytes = 5 [json_name = "dropped-bytes"];
                        }
                        repeated Statistic statistic = 1 [json_name = "statistic"];
                     }
                     Statistics statistics = 2 [json_name = "statistics"];
                     message States {
                        message State {
                           string slot_id = 1 [json_name = "slot-id"];
                           enum State10 {
                              State10_SUCCESS = 0;
                              State10_FAIL = 1;
                              State10_ROLLX_BACK = 2;
                              State10_PROCESSING = 3;
                           };
                           State10 state10 = 2 [json_name = "state"];
                        }
                        repeated State state = 1 [json_name = "state"];
                     }
                     States states = 3 [json_name = "states"];
                  }
                  repeated Rule rule = 1 [json_name = "rule"];
               }
               Rules rules = 3 [json_name = "rules"];
            }
            repeated Classifier classifier = 1 [json_name = "classifier"];
         }
         Classifiers classifiers = 3 [json_name = "classifiers"];
      }
      repeated ApplyGlobalPolicy apply_global_policy = 1 [json_name = "apply-global-policy"];
   }
   ApplyGlobalPolicys apply_global_policys = 6 [json_name = "apply-global-policys"];
   message Resources {
      message Resource {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 chip_id = 2 [json_name = "chip-id"];
         uint32 tcam_block_total = 3 [json_name = "tcam-block-total"];
         uint32 tcam_block_used = 4 [json_name = "tcam-block-used"];
         uint32 tcam_block_limit = 5 [json_name = "tcam-block-limit"];
         uint32 tcam_block_free = 6 [json_name = "tcam-block-free"];
         uint32 epg_used = 7 [json_name = "epg-used"];
         uint32 epg_free = 8 [json_name = "epg-free"];
         uint32 epg_member_used = 9 [json_name = "epg-member-used"];
         uint32 epg_member_free = 10 [json_name = "epg-member-free"];
         uint32 gbp_rule_used = 11 [json_name = "gbp-rule-used"];
         uint32 gbp_rule_free = 12 [json_name = "gbp-rule-free"];
      }
      repeated Resource resource = 1 [json_name = "resource"];
   }
   Resources resources = 7 [json_name = "resources"];
   message TotalSegmentStatistics {
      message TotalSegmentStatistic {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 segment_id = 2 [json_name = "segment-id"];
         uint64 total_source_packets = 3 [json_name = "total-source-packets"];
         uint64 total_destination_packets = 4 [json_name = "total-destination-packets"];
      }
      repeated TotalSegmentStatistic total_segment_statistic = 1 [json_name = "total-segment-statistic"];
   }
   TotalSegmentStatistics total_segment_statistics = 8 [json_name = "total-segment-statistics"];
   message Ipv4MemberStatistics {
      message Ipv4MemberStatistic {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 segment_id = 2 [json_name = "segment-id"];
         string ip_address = 3 [json_name = "ip-address"];
         uint32 ip_mask_length = 4 [json_name = "ip-mask-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         uint64 source_packets = 6 [json_name = "source-packets"];
         uint64 destination_packets = 7 [json_name = "destination-packets"];
      }
      repeated Ipv4MemberStatistic ipv4_member_statistic = 1 [json_name = "ipv4-member-statistic"];
   }
   Ipv4MemberStatistics ipv4_member_statistics = 9 [json_name = "ipv4-member-statistics"];
   message Ipv4MemberStates {
      message Ipv4MemberState {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 segment_id = 2 [json_name = "segment-id"];
         string ip_address = 3 [json_name = "ip-address"];
         uint32 ip_mask_length = 4 [json_name = "ip-mask-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         enum State {
            State_SUCCESS = 0;
            State_FAIL = 1;
            State_ROLLX_BACK = 2;
            State_PROCESSING = 3;
         };
         State state = 6 [json_name = "state"];
      }
      repeated Ipv4MemberState ipv4_member_state = 1 [json_name = "ipv4-member-state"];
   }
   Ipv4MemberStates ipv4_member_states = 10 [json_name = "ipv4-member-states"];
   message Ipv6MemberStatistics {
      message Ipv6MemberStatistic {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 segment_id = 2 [json_name = "segment-id"];
         string ipv6_address = 3 [json_name = "ipv6-address"];
         uint32 ipv6_mask_length = 4 [json_name = "ipv6-mask-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         uint64 source_packets = 6 [json_name = "source-packets"];
         uint64 destination_packets = 7 [json_name = "destination-packets"];
      }
      repeated Ipv6MemberStatistic ipv6_member_statistic = 1 [json_name = "ipv6-member-statistic"];
   }
   Ipv6MemberStatistics ipv6_member_statistics = 11 [json_name = "ipv6-member-statistics"];
   message Ipv6MemberStates {
      message Ipv6MemberState {
         string slot_id = 1 [json_name = "slot-id"];
         uint32 segment_id = 2 [json_name = "segment-id"];
         string ipv6_address = 3 [json_name = "ipv6-address"];
         uint32 ipv6_mask_length = 4 [json_name = "ipv6-mask-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         enum State {
            State_SUCCESS = 0;
            State_FAIL = 1;
            State_ROLLX_BACK = 2;
            State_PROCESSING = 3;
         };
         State state = 6 [json_name = "state"];
      }
      repeated Ipv6MemberState ipv6_member_state = 1 [json_name = "ipv6-member-state"];
   }
   Ipv6MemberStates ipv6_member_states = 12 [json_name = "ipv6-member-states"];
   message SegmentPolicyStatistics {
      message SegmentPolicyStatistic {
         string slot_id = 1 [json_name = "slot-id"];
         string policy_name = 2 [json_name = "policy-name"];
         uint64 mached_packets = 3 [json_name = "mached-packets"];
         uint64 mached_bytes = 4 [json_name = "mached-bytes"];
         uint64 passed_packets = 5 [json_name = "passed-packets"];
         uint64 passed_bytes = 6 [json_name = "passed-bytes"];
         uint64 dropped_packets = 7 [json_name = "dropped-packets"];
         uint64 dropped_bytes = 8 [json_name = "dropped-bytes"];
      }
      repeated SegmentPolicyStatistic segment_policy_statistic = 1 [json_name = "segment-policy-statistic"];
   }
   SegmentPolicyStatistics segment_policy_statistics = 13 [json_name = "segment-policy-statistics"];
   message ClassifierBasedStatistics {
      message ClassifierBasedStatistic {
         string slot_id = 1 [json_name = "slot-id"];
         string policy_name = 2 [json_name = "policy-name"];
         string classifier_name = 3 [json_name = "classifier-name"];
         uint64 mached_packets = 4 [json_name = "mached-packets"];
         uint64 mached_bytes = 5 [json_name = "mached-bytes"];
         uint64 passed_packets = 6 [json_name = "passed-packets"];
         uint64 passed_bytes = 7 [json_name = "passed-bytes"];
         uint64 dropped_packets = 8 [json_name = "dropped-packets"];
         uint64 dropped_bytes = 9 [json_name = "dropped-bytes"];
      }
      repeated ClassifierBasedStatistic classifier_based_statistic = 1 [json_name = "classifier-based-statistic"];
   }
   ClassifierBasedStatistics classifier_based_statistics = 14 [json_name = "classifier-based-statistics"];
   message RuleBasedStatisticStates {
      message RuleBasedStatisticState {
         string slot_id = 1 [json_name = "slot-id"];
         string policy_name = 2 [json_name = "policy-name"];
         string classifier_name = 3 [json_name = "classifier-name"];
         uint32 rule_priority = 4 [json_name = "rule-priority"];
         uint64 passed_packets = 5 [json_name = "passed-packets"];
         uint64 passed_bytes = 6 [json_name = "passed-bytes"];
         uint64 dropped_packets = 7 [json_name = "dropped-packets"];
         uint64 dropped_bytes = 8 [json_name = "dropped-bytes"];
      }
      repeated RuleBasedStatisticState rule_based_statistic_state = 1 [json_name = "rule-based-statistic-state"];
   }
   RuleBasedStatisticStates rule_based_statistic_states = 15 [json_name = "rule-based-statistic-states"];
   message TrafficSegmentPolicyStates {
      message TrafficSegmentPolicyState {
         string slot_id = 1 [json_name = "slot-id"];
         string policy_name = 2 [json_name = "policy-name"];
         string classifier_name = 3 [json_name = "classifier-name"];
         uint32 rule_priority = 4 [json_name = "rule-priority"];
         enum State {
            State_SUCCESS = 0;
            State_FAIL = 1;
            State_ROLLX_BACK = 2;
            State_PROCESSING = 3;
         };
         State state = 5 [json_name = "state"];
      }
      repeated TrafficSegmentPolicyState traffic_segment_policy_state = 1 [json_name = "traffic-segment-policy-state"];
   }
   TrafficSegmentPolicyStates traffic_segment_policy_states = 16 [json_name = "traffic-segment-policy-states"];
}


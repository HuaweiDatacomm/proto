syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-twamp-responder
// revision 2020-03-14
// revision 2019-12-27
// revision 2019-05-05
// namespace urn:huawei:yang:huawei-twamp-responder

package huawei_twamp_responder;

message TwampResponder {
   message Server {
      uint32 tcp_port = 1 [json_name = "tcp-port"];
      uint32 ctrl_session_timeout = 2 [json_name = "ctrl-session-timeout"];
      string acl_identity = 4 [json_name = "acl-identity"];
      message Mode {
         message Mode4_ListeningAll {
            bool listening_all = 1 [json_name = "listening-all"];
         }
         message Mode4_ListeningAddress {
            message ServerAddresses {
               message ServerAddress {
                  string address = 1 [json_name = "address"];
               }
               repeated ServerAddress server_address = 1 [json_name = "server-address"];
            }
            ServerAddresses server_addresses = 1 [json_name = "server-addresses"];
         }
         oneof Mode4 {
            Mode4_ListeningAll mode_listening_all = 1 [json_name = "listening-all"];
            Mode4_ListeningAddress mode_listening_address = 2 [json_name = "listening-address"];
         }
      }
      Mode mode = 5 [json_name = "mode"];
      message ControlSessions {
         message ControlSession {
            uint32 ctl_session_id = 1 [json_name = "ctl-session-id"];
            string ni_name = 2 [json_name = "ni-name"];
            string client_ipv4_addr = 3 [json_name = "client-ipv4-addr"];
            uint32 client_port = 4 [json_name = "client-port"];
            string server_ipv4_addr = 5 [json_name = "server-ipv4-addr"];
            uint32 server_port = 6 [json_name = "server-port"];
            uint32 inactivity_time = 7 [json_name = "inactivity-time"];
            enum State {
               State_INITIAL = 0;
               State_CONNECTING = 1;
               State_ESTABLISHED = 2;
               State_INACTIVE = 3;
               State_ACTIVE = 4;
               State_UNKNOWN = 5;
            };
            State state = 8 [json_name = "state"];
            enum Mode {
               Mode_UNAUTHENTICATED = 0;
               Mode_AUTHENTICATED = 1;
               Mode_ENCRYPTED = 2;
               Mode_UNKNOWN = 3;
            };
            Mode mode = 9 [json_name = "mode"];
            string created_time = 10 [json_name = "created-time"];
            uint32 test_session_number = 11 [json_name = "test-session-number"];
            uint32 test_session_completed_number = 12 [json_name = "test-session-completed-number"];
            uint32 test_session_aborted_number = 13 [json_name = "test-session-aborted-number"];
         }
         repeated ControlSession control_session = 1 [json_name = "control-session"];
      }
      ControlSessions control_sessions = 6 [json_name = "control-sessions"];
      message Vpn_VpnAll {
         bool all_vpn = 1 [json_name = "all-vpn"];
      }
      message Vpn_VpnInstance {
         string vrf_name = 1 [json_name = "vrf-name"];
      }
      oneof Vpn {
         Vpn_VpnAll vpn_vpn_all = 7 [json_name = "vpn-all"];
         Vpn_VpnInstance vpn_vpn_instance = 8 [json_name = "vpn-instance"];
      }
   }
   Server server = 1 [json_name = "server"];
   message Reflector {
      uint32 test_session_timeout = 1 [json_name = "test-session-timeout"];
      message TestSessions {
         message TestSession {
            uint32 id = 1 [json_name = "id"];
            string ni_name = 2 [json_name = "ni-name"];
            string ref_ipv4_addr = 3 [json_name = "ref-ipv4-addr"];
            uint32 ref_port = 4 [json_name = "ref-port"];
            string sender_ipv4_addr = 5 [json_name = "sender-ipv4-addr"];
            uint32 sender_port = 6 [json_name = "sender-port"];
            enum Mode {
               Mode_UNAUTHENTICATED = 0;
               Mode_AUTHENTICATED = 1;
               Mode_ENCRYPTED = 2;
               Mode_UNKNOWN = 3;
            };
            Mode mode = 7 [json_name = "mode"];
            enum State {
               State_INACTIVE = 0;
               State_ACTIVE = 1;
               State_UNKNOWN = 2;
            };
            State state = 8 [json_name = "state"];
            string session_id = 9 [json_name = "session-id"];
            uint32 dscp_value = 10 [json_name = "dscp-value"];
            uint32 padding_length = 11 [json_name = "padding-length"];
            uint32 ctl_session_id = 12 [json_name = "ctl-session-id"];
            string created_time = 13 [json_name = "created-time"];
            string start_time = 14 [json_name = "start-time"];
            string last_stop_time = 15 [json_name = "last-stop-time"];
            uint32 seq_number = 16 [json_name = "seq-number"];
            uint32 tx_test_number = 17 [json_name = "tx-test-number"];
            uint32 rx_test_number = 18 [json_name = "rx-test-number"];
            uint32 test_discard_number = 19 [json_name = "test-discard-number"];
         }
         repeated TestSession test_session = 1 [json_name = "test-session"];
      }
      TestSessions test_sessions = 2 [json_name = "test-sessions"];
   }
   Reflector reflector = 2 [json_name = "reflector"];
   message Responder {
      message TestSessions {
         message TestSession {
            uint32 session_id = 1 [json_name = "session-id"];
            string source_ip = 2 [json_name = "source-ip"];
            string dest_ip = 3 [json_name = "dest-ip"];
            uint32 source_port = 4 [json_name = "source-port"];
            uint32 dest_port = 5 [json_name = "dest-port"];
            bool anti_loop = 6 [json_name = "anti-loop"];
            string vrf_name = 7 [json_name = "vrf-name"];
            string if_name = 8 [json_name = "if-name"];
            string description = 9 [json_name = "description"];
            string link_bundle_if = 10 [json_name = "link-bundle-if"];
            message SessionDetail {
               enum State {
                  State_INITIAL = 0;
                  State_INACTIVE = 1;
                  State_ACTIVE = 2;
                  State_INCONSISTENT = 3;
               };
               State state = 1 [json_name = "state"];
               message MemberInterfaceInfos {
                  message MemberInterfaceInfo {
                     string member_if = 1 [json_name = "member-if"];
                     enum State {
                        State_INITIAL = 0;
                        State_INACTIVE = 1;
                        State_ACTIVE = 2;
                        State_INCONSISTENT = 3;
                     };
                     State state = 2 [json_name = "state"];
                  }
                  repeated MemberInterfaceInfo member_interface_info = 1 [json_name = "member-interface-info"];
               }
               MemberInterfaceInfos member_interface_infos = 2 [json_name = "member-interface-infos"];
            }
            SessionDetail session_detail = 11 [json_name = "session-detail"];
         }
         repeated TestSession test_session = 1 [json_name = "test-session"];
      }
      TestSessions test_sessions = 1 [json_name = "test-sessions"];
   }
   Responder responder = 3 [json_name = "responder"];
   message SessionStatistic {
      string server_start_time = 1 [json_name = "server-start-time"];
      uint32 ctrl_session_number = 2 [json_name = "ctrl-session-number"];
      uint32 ctrl_session_rejected_number = 3 [json_name = "ctrl-session-rejected-number"];
      uint32 test_session_number = 4 [json_name = "test-session-number"];
      uint32 test_session_completed_number = 5 [json_name = "test-session-completed-number"];
      uint32 test_session_aborted_number = 6 [json_name = "test-session-aborted-number"];
      uint64 tx_test_number = 7 [json_name = "tx-test-number"];
      uint64 rx_test_number = 8 [json_name = "rx-test-number"];
   }
   SessionStatistic session_statistic = 4 [json_name = "session-statistic"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-loopdetect
// revision 2020-03-06
// revision 2019-04-08
// namespace urn:huawei:yang:huawei-loopdetect

package huawei_loopdetect;

message Loopdetect {
   message AlDTriggerInfos {
      message AlDTriggerInfo {
         string domainName = 1;
         string domainType = 2;
         string ifName = 3;
         string loopEnd = 4;
         string time = 5;
         string vplsType = 6;
      }
      repeated AlDTriggerInfo alDTriggerInfo = 1;
   }
   AlDTriggerInfos alDTriggerInfos = 1;
   message AlDTriggers {
      message AlDTrigger {
         uint32 cevid = 1;
         string ifName = 2;
         string l2instancename = 3;
         uint32 pevid = 4;
         string time = 5;
      }
      repeated AlDTrigger alDTrigger = 1;
   }
   AlDTriggers alDTriggers = 2;
   message AlDetects {
      message AlDetect {
         string ifName = 1;
      }
      repeated AlDetect alDetect = 1;
   }
   AlDetects alDetects = 3;
   message LBDetectBlockPorts {
      message LBDetectBlockPort {
         string ifName = 1;
      }
      repeated LBDetectBlockPort lBDetectBlockPort = 1;
   }
   LBDetectBlockPorts lBDetectBlockPorts = 4;
   message LBDetects {
      message LBDetect {
         string ifName = 1;
         uint32 loopbackDetectWTR = 2;
      }
      repeated LBDetect lBDetect = 1;
   }
   LBDetects lBDetects = 5;
   message LDetects {
      message LDetect {
         enum BlockTimeType {
            BlockTimeType_NORMBLOCKTIME = 0;
            BlockTimeType_NOTYPE = 1;
            BlockTimeType_PERPBLOCKTIME = 2;
         };
         BlockTimeType blockTimeType = 1;
         message Dot1QDetectVlans {
            message Dot1QDetectVlan {
               uint32 highvid = 1;
               uint32 lowvid = 2;
            }
            repeated Dot1QDetectVlan dot1qDetectVlan = 1;
         }
         Dot1QDetectVlans dot1qDetectVlans = 2;
         string identifier = 3;
         string ifName = 4;
         uint32 loopDetectBlockPack = 5;
         uint32 loopDetectPack = 6;
         uint32 loopDetectPri = 7;
         bool loopDetectTri = 8;
         uint32 loopDetectWTR = 9;
         uint32 normBlockTime = 10;
         bool onlyAlarm = 11;
         message QinqDetectVlans {
            message QinqDetectVlan {
               uint32 highcevid = 1;
               uint32 lowcevid = 2;
               uint32 pevid = 3;
            }
            repeated QinqDetectVlan qinqDetectVlan = 1;
         }
         QinqDetectVlans qinqDetectVlans = 12;
      }
      repeated LDetect lDetect = 1;
   }
   LDetects lDetects = 6;
   message LdtBlockPorts {
      message LdtBlockPort {
         uint32 cevid = 1;
         string ifName = 2;
         uint32 pevid = 3;
      }
      repeated LdtBlockPort ldtBlockPort = 1;
   }
   LdtBlockPorts ldtBlockPorts = 7;
   message LdtMacClears {
      message LdtMacClear {
         string ifName = 1;
      }
      repeated LdtMacClear ldtMacClear = 1;
   }
   LdtMacClears ldtMacClears = 8;
   message LoopDetectGloabl {
      uint32 alDBoxMinPortUpTime = 1;
      uint32 alDBoxMinSlotUpTime = 2;
      enum AlDGlobalEnable {
         AlDGlobalEnable_DISABLE = 0;
         AlDGlobalEnable_ENABLE = 1;
      };
      AlDGlobalEnable alDGlobalEnable = 3;
      uint32 alDMinPortUpTime = 4;
      uint32 alDMinSlotUpTime = 5;
      enum LDGloablEnable {
         LDGloablEnable_DISABLE = 0;
         LDGloablEnable_ENABLE = 1;
      };
      LDGloablEnable lDGloablEnable = 6;
      enum LooseEnable {
         LooseEnable_DISABLE = 0;
         LooseEnable_ENABLE = 1;
      };
      LooseEnable looseEnable = 7;
      string looseIdentifier = 8;
   }
   LoopDetectGloabl loopDetectGloabl = 9;
   message LoopDetectSlaveBlocks {
      message LoopDetectSlaveBlock {
         uint32 cevid = 1;
         string ifName = 2;
         uint32 pevid = 3;
      }
      repeated LoopDetectSlaveBlock loopDetectSlaveBlock = 1;
   }
   LoopDetectSlaveBlocks loopDetectSlaveBlocks = 10;
   message LoopDetects {
      message LoopDetect {
         string ifName = 1;
      }
      repeated LoopDetect loopDetect = 1;
   }
   LoopDetects loopDetects = 11;
   message LoopbackDetects {
      message LoopbackDetect {
         string ifName = 1;
      }
      repeated LoopbackDetect loopbackDetect = 1;
   }
   LoopbackDetects loopbackDetects = 12;
   message LdetectGlobal {
      string loose_identifier = 1 [json_name = "loose-identifier"];
      bool loose_enable = 2 [json_name = "loose-enable"];
   }
   LdetectGlobal ldetect_global = 13 [json_name = "ldetect-global"];
   message TriggerDetect {
      message Global {
         bool enable = 1 [json_name = "enable"];
         uint32 min_slot_up_time = 2 [json_name = "min-slot-up-time"];
         uint32 min_port_up_time = 3 [json_name = "min-port-up-time"];
      }
      Global global = 1 [json_name = "global"];
      message QueryTriggerDowns {
         message QueryTriggerDown {
            string if_name = 1 [json_name = "if-name"];
            string l2vpn_name = 2 [json_name = "l2vpn-name"];
            uint32 pe_vid = 3 [json_name = "pe-vid"];
            uint32 ce_vid = 4 [json_name = "ce-vid"];
            string time = 5 [json_name = "time"];
         }
         repeated QueryTriggerDown query_trigger_down = 1 [json_name = "query-trigger-down"];
      }
      QueryTriggerDowns query_trigger_downs = 2 [json_name = "query-trigger-downs"];
      message QueryTriggers {
         message QueryTrigger {
            string if_name = 1 [json_name = "if-name"];
            enum DomainType {
               DomainType_VLL = 0;
               DomainType_VSI = 1;
            };
            DomainType domain_type = 2 [json_name = "domain-type"];
            string domain_name_or_id = 3 [json_name = "domain-name-or-id"];
            enum InstanceType {
               InstanceType_AC = 0;
               InstanceType_PW = 1;
            };
            InstanceType instance_type = 4 [json_name = "instance-type"];
            string time = 5 [json_name = "time"];
            string loop_end = 6 [json_name = "loop-end"];
         }
         repeated QueryTrigger query_trigger = 1 [json_name = "query-trigger"];
      }
      QueryTriggers query_triggers = 3 [json_name = "query-triggers"];
   }
   TriggerDetect trigger_detect = 14 [json_name = "trigger-detect"];
   message LoopDetect2 {
      message QueryBlocks {
         message QueryBlock {
            string if_name = 1 [json_name = "if-name"];
         }
         repeated QueryBlock query_block = 1 [json_name = "query-block"];
      }
      QueryBlocks query_blocks = 1 [json_name = "query-blocks"];
      message QueryBlockPorts {
         message QueryBlockPort {
            string if_name = 1 [json_name = "if-name"];
            uint32 pe_vid = 2 [json_name = "pe-vid"];
            uint32 ce_vid = 3 [json_name = "ce-vid"];
            enum Role {
               Role_MASTER = 0;
               Role_SLAVE = 1;
            };
            Role role = 4 [json_name = "role"];
         }
         repeated QueryBlockPort query_block_port = 1 [json_name = "query-block-port"];
      }
      QueryBlockPorts query_block_ports = 2 [json_name = "query-block-ports"];
   }
   LoopDetect2 loop_detect = 15 [json_name = "loop-detect"];
   message LoopbackDetect {
      uint32 transmit_interval = 1 [json_name = "transmit-interval"];
      string untagged_packet_mac_address = 2 [json_name = "untagged-packet-mac-address"];
      message AutoDetect {
         bool enable = 1 [json_name = "enable"];
         enum Action {
            INVALID_ENUM_VALUE_Action = 0;
            Action_SHUTDOWN = 1;
            Action_ALARM = 2;
            Action_BLOCK = 3;
            Action_NOLEARN = 4;
            Action_QUITVLAN = 5;
         };
         Action action = 2 [json_name = "action"];
      }
      AutoDetect auto_detect = 3 [json_name = "auto-detect"];
      message QueryBlocks {
         message QueryBlock {
            string if_name = 1 [json_name = "if-name"];
         }
         repeated QueryBlock query_block = 1 [json_name = "query-block"];
      }
      QueryBlocks query_blocks = 4 [json_name = "query-blocks"];
   }
   LoopbackDetect loopback_detect = 16 [json_name = "loopback-detect"];
}
message HwAutoLoopDetectTriggerDown {
   string IfName = 1;
   uint32 VlanId = 2;
   string vsi_name = 3;
}
message HwAutoLoopDetectUnTriggerDown {
   string IfName = 1;
   uint32 VlanId = 2;
   string vsi_name = 3;
}
message HwLoopDetectBlocked {
   uint32 IfIndex = 1;
   string IfName = 2;
}
message HwLoopDetectUnBlocked {
   uint32 IfIndex = 1;
   string IfName = 2;
}
message HwLoopDetectWithoutBlock {
   uint32 IfIndex = 1;
   string IfName = 2;
}
message HwLoopDetectWithoutBlockResume {
   uint32 IfIndex = 1;
   string IfName = 2;
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-09 18:19:35
// ProtoYang-version 1
// module huawei-bras-dhcp-server
// revision 2022-08-26
// revision 2019-10-17
// revision 2019-04-01
// namespace urn:huawei:yang:huawei-bras-dhcp-server

package huawei_bras_dhcp_server;

message BrasDhcpServer {
   message DhcpServers {
      message DhcpServer {
         string ip_address = 1 [json_name = "ip-address"];
         string vpn_instance = 2 [json_name = "vpn-instance"];
         uint32 dead_count = 3 [json_name = "dead-count"];
         uint32 timeout = 4 [json_name = "timeout"];
         uint32 dead_time = 5 [json_name = "dead-time"];
         uint32 nak_count = 6 [json_name = "nak-count"];
         message Statistics {
            uint32 send_packets = 1 [json_name = "send-packets"];
            uint32 receive_packets = 2 [json_name = "receive-packets"];
            uint32 error_packets = 3 [json_name = "error-packets"];
            uint32 limit_number = 4 [json_name = "limit-number"];
            uint32 timeout_packets = 5 [json_name = "timeout-packets"];
            string latest_send_time = 6 [json_name = "latest-send-time"];
            string lastest_receive_time = 7 [json_name = "lastest-receive-time"];
            uint32 discover_packets = 8 [json_name = "discover-packets"];
            uint32 request_packets = 9 [json_name = "request-packets"];
            uint32 decline_packets = 10 [json_name = "decline-packets"];
            uint32 release_packets = 11 [json_name = "release-packets"];
            uint32 inform_packets = 12 [json_name = "inform-packets"];
            uint32 offer_packets = 13 [json_name = "offer-packets"];
            uint32 ack_packets = 14 [json_name = "ack-packets"];
            uint32 nak_packets = 15 [json_name = "nak-packets"];
            uint32 bootp_requset_packets = 16 [json_name = "bootp-requset-packets"];
            uint32 bootp_ack_packets = 17 [json_name = "bootp-ack-packets"];
            uint32 force_renew_packets = 18 [json_name = "force-renew-packets"];
         }
         Statistics statistics = 7 [json_name = "statistics"];
         message State {
            enum Status {
               Status_DOWN = 0;
               Status_UP = 1;
            };
            Status status = 1 [json_name = "status"];
         }
         State state = 8 [json_name = "state"];
      }
      repeated DhcpServer dhcp_server = 1 [json_name = "dhcp-server"];
   }
   DhcpServers dhcp_servers = 1 [json_name = "dhcp-servers"];
   message DhcpServerGroups {
      message DhcpServerGroup {
         string name = 1 [json_name = "name"];
         string remote_backup_service_name = 2 [json_name = "remote-backup-service-name"];
         message BindServers {
            message BindServer {
               string ip_address = 1 [json_name = "ip-address"];
               string vpn_instance = 2 [json_name = "vpn-instance"];
               uint32 weight = 3 [json_name = "weight"];
            }
            repeated BindServer bind_server = 1 [json_name = "bind-server"];
         }
         BindServers bind_servers = 3 [json_name = "bind-servers"];
         message Giaddr {
            bool forward_rui_slave = 1 [json_name = "forward-rui-slave"];
            message Giaddr5_IfName {
               string if_name = 1 [json_name = "if-name"];
            }
            message Giaddr5_IpAddress {
               string ip_address = 1 [json_name = "ip-address"];
               string vpn_instance = 2 [json_name = "vpn-instance"];
            }
            oneof Giaddr5 {
               Giaddr5_IfName giaddr_if_name = 2 [json_name = "if-name"];
               Giaddr5_IpAddress giaddr_ip_address = 3 [json_name = "ip-address"];
            }
         }
         Giaddr giaddr = 4 [json_name = "giaddr"];
         message ServerAlgorithm {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_MASTERX_BACKUP = 1;
               Type_LOADINGX_SHARE = 2;
               Type_POLLING = 3;
            };
            Type type = 1 [json_name = "type"];
            bool loose_check = 2 [json_name = "loose-check"];
         }
         ServerAlgorithm server_algorithm = 5 [json_name = "server-algorithm"];
         message ServerForward {
            bool rebind_forward = 1 [json_name = "rebind-forward"];
         }
         ServerForward server_forward = 6 [json_name = "server-forward"];
         message ServerSource {
            message Config_GatewayMode {
               bool gateway_mode = 1 [json_name = "gateway-mode"];
            }
            message Config_IfName {
               string if_name = 1 [json_name = "if-name"];
            }
            oneof Config {
               Config_GatewayMode config_gateway_mode = 1 [json_name = "gateway-mode"];
               Config_IfName config_if_name = 2 [json_name = "if-name"];
            }
         }
         ServerSource server_source = 7 [json_name = "server-source"];
         message ReleaseAgent {
            bool enable = 1 [json_name = "enable"];
         }
         ReleaseAgent release_agent = 8 [json_name = "release-agent"];
         message RetransmitRequestThroughPacket {
            bool enable = 1 [json_name = "enable"];
         }
         RetransmitRequestThroughPacket retransmit_request_through_packet = 9 [json_name = "retransmit-request-through-packet"];
      }
      repeated DhcpServerGroup dhcp_server_group = 1 [json_name = "dhcp-server-group"];
   }
   DhcpServerGroups dhcp_server_groups = 2 [json_name = "dhcp-server-groups"];
   message ServerGlobalProperty {
      uint32 dead_count = 1 [json_name = "dead-count"];
      uint32 timeout = 2 [json_name = "timeout"];
      uint32 dead_time = 3 [json_name = "dead-time"];
      uint32 nak_count = 4 [json_name = "nak-count"];
   }
   ServerGlobalProperty server_global_property = 3 [json_name = "server-global-property"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-rsa
// revision 2019-06-01
// namespace urn:huawei:yang:huawei-rsa

package huawei_rsa;

message Rsa {
   message RsaGlobalCfg {
      int32 maxKeyPair = 1;
   }
   RsaGlobalCfg rsaGlobalCfg = 1;
   message RsaKeyPairCfgs {
      message RsaKeyPairCfg {
         string hostKeyCode = 1;
         string keyPairLabel = 2;
         uint32 keySize = 3;
      }
      repeated RsaKeyPairCfg rsaKeyPairCfg = 1;
   }
   RsaKeyPairCfgs rsaKeyPairCfgs = 2;
   message RsaLocalKeys {
      message RsaLocalKey {
         string hostKeyCode = 1;
         string hostKeyName = 2;
         string hostKeyOpenSSH = 3;
         string hostKeyPEM = 4;
         string hostKeySSH1 = 5;
         uint32 keySize = 6;
         string serverKeyCode = 7;
         string serverKeyName = 8;
      }
      RsaLocalKey rsaLocalKey = 1;
   }
   RsaLocalKeys rsaLocalKeys = 3;
   message RsaPeerKeys {
      message RsaPeerKey {
         enum EncodeInType {
            EncodeInType_DER = 0;
            EncodeInType_OPENSSH = 1;
            EncodeInType_PEM = 2;
         };
         EncodeInType encodeInType = 1;
         string keyCode = 2;
         string keyName = 3;
      }
      repeated RsaPeerKey rsaPeerKey = 1;
   }
   RsaPeerKeys rsaPeerKeys = 4;
   message LocalKey {
      uint32 key_size = 1 [json_name = "key-size"];
      string host_key_name = 2 [json_name = "host-key-name"];
      string host_key_code = 3 [json_name = "host-key-code"];
      string host_key_ssh1 = 4 [json_name = "host-key-ssh1"];
      string host_key_pem = 5 [json_name = "host-key-pem"];
      string host_key_openssh = 6 [json_name = "host-key-openssh"];
      string server_key_name = 7 [json_name = "server-key-name"];
      string server_key_code = 8 [json_name = "server-key-code"];
   }
   LocalKey local_key = 5 [json_name = "local-key"];
   message PeerKeys {
      message PeerKey {
         string key_name = 1 [json_name = "key-name"];
         string key_code = 2 [json_name = "key-code"];
         enum EncodeType {
            EncodeType_DER = 0;
            EncodeType_PEM = 1;
            EncodeType_OPENSSH = 2;
         };
         EncodeType encode_type = 3 [json_name = "encode-type"];
      }
      repeated PeerKey peer_key = 1 [json_name = "peer-key"];
   }
   PeerKeys peer_keys = 6 [json_name = "peer-keys"];
   message KeyPairs {
      message KeyPair {
         string key_pair_label = 1 [json_name = "key-pair-label"];
         uint32 key_size = 2 [json_name = "key-size"];
         string host_key_code = 3 [json_name = "host-key-code"];
      }
      repeated KeyPair key_pair = 1 [json_name = "key-pair"];
   }
   KeyPairs key_pairs = 7 [json_name = "key-pairs"];
   message RsaGlobal {
      int32 max_key_pair = 1 [json_name = "max-key-pair"];
   }
   RsaGlobal rsa_global = 8 [json_name = "rsa-global"];
}


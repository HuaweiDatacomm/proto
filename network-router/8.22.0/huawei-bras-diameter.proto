syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-06 17:22:19
// ProtoYang-version 1
// module huawei-bras-diameter
// revision 2022-09-05
// revision 2019-03-23
// namespace urn:huawei:yang:huawei-bras-diameter

package huawei_bras_diameter;

message BrasDiameter {
   message Diameter {
      message ClientEntitys {
         message ClientEntity {
            string local_name = 1 [json_name = "local-name"];
            string host_name = 2 [json_name = "host-name"];
            string realm_name = 3 [json_name = "realm-name"];
            string product_name = 4 [json_name = "product-name"];
            string interface_name = 5 [json_name = "interface-name"];
            message LocalDetail {
               uint32 local_index = 1 [json_name = "local-index"];
               string ipv4_address = 2 [json_name = "ipv4-address"];
               string ipv6_address = 3 [json_name = "ipv6-address"];
            }
            LocalDetail local_detail = 6 [json_name = "local-detail"];
         }
         repeated ClientEntity client_entity = 1 [json_name = "client-entity"];
      }
      ClientEntitys client_entitys = 1 [json_name = "client-entitys"];
      message ServerEntitys {
         message ServerEntity {
            string peer_name = 1 [json_name = "peer-name"];
            uint32 port = 2 [json_name = "port"];
            string host_name = 3 [json_name = "host-name"];
            string realm_name = 4 [json_name = "realm-name"];
            string vpn_instance = 5 [json_name = "vpn-instance"];
            message ServerIpAddress_Ipv4 {
               string server_ipv4_address = 1 [json_name = "server-ipv4-address"];
            }
            message ServerIpAddress_Ipv6 {
               string server_ipv6_address = 1 [json_name = "server-ipv6-address"];
            }
            oneof ServerIpAddress {
               ServerIpAddress_Ipv4 server_ip_address_ipv4 = 6 [json_name = "ipv4"];
               ServerIpAddress_Ipv6 server_ip_address_ipv6 = 7 [json_name = "ipv6"];
            }
            message PeerDetail {
               uint32 peer_index = 1 [json_name = "peer-index"];
            }
            PeerDetail peer_detail = 8 [json_name = "peer-detail"];
         }
         repeated ServerEntity server_entity = 1 [json_name = "server-entity"];
      }
      ServerEntitys server_entitys = 2 [json_name = "server-entitys"];
      message ServerGroups {
         message ServerGroup {
            string name = 1 [json_name = "name"];
            message Links {
               message Link {
                  string local_name = 1 [json_name = "local-name"];
                  string peer_name = 2 [json_name = "peer-name"];
                  uint32 local_port = 3 [json_name = "local-port"];
                  uint32 weight = 4 [json_name = "weight"];
               }
               repeated Link link = 1 [json_name = "link"];
            }
            Links links = 2 [json_name = "links"];
            message EdsgPredefinedRuleCaseSensitive {
               bool case_sensitive_enable = 1 [json_name = "case-sensitive-enable"];
            }
            EdsgPredefinedRuleCaseSensitive edsg_predefined_rule_case_sensitive = 3 [json_name = "edsg-predefined-rule-case-sensitive"];
            message NoSendCcriWithoutSubscriptionId {
               bool no_send_ccri = 1 [json_name = "no-send-ccri"];
            }
            NoSendCcriWithoutSubscriptionId no_send_ccri_without_subscription_id = 4 [json_name = "no-send-ccri-without-subscription-id"];
            message GroupDetail {
               uint32 index = 1 [json_name = "index"];
               enum CurrentState {
                  CurrentState_INX_ACTIVE = 0;
                  CurrentState_ACTIVE = 1;
                  CurrentState_WAITX_ACTIVE = 2;
               };
               CurrentState current_state = 2 [json_name = "current-state"];
               uint32 reference_number = 3 [json_name = "reference-number"];
               uint32 connection_group_number = 4 [json_name = "connection-group-number"];
               uint32 total_connection_number = 5 [json_name = "total-connection-number"];
               message ConnectionGroups {
                  message ConnectionGroup {
                     string local_name = 1 [json_name = "local-name"];
                     string peer_name = 2 [json_name = "peer-name"];
                     uint32 index = 3 [json_name = "index"];
                     message Connections {
                        message Connection {
                           uint32 local_port = 1 [json_name = "local-port"];
                           uint32 index = 2 [json_name = "index"];
                           string link_state = 3 [json_name = "link-state"];
                        }
                        repeated Connection connection = 1 [json_name = "connection"];
                     }
                     Connections connections = 4 [json_name = "connections"];
                  }
                  repeated ConnectionGroup connection_group = 1 [json_name = "connection-group"];
               }
               ConnectionGroups connection_groups = 6 [json_name = "connection-groups"];
            }
            GroupDetail group_detail = 5 [json_name = "group-detail"];
         }
         repeated ServerGroup server_group = 1 [json_name = "server-group"];
      }
      ServerGroups server_groups = 3 [json_name = "server-groups"];
      message UsageReportOfEventTrigger {
         enum Version {
            INVALID_ENUM_VALUE_Version = 0;
            Version_R940 = 26;
            Version_R970 = 33;
         };
         Version version = 1 [json_name = "version"];
      }
      UsageReportOfEventTrigger usage_report_of_event_trigger = 4 [json_name = "usage-report-of-event-trigger"];
      message DwrRetransmitTime {
         uint32 retransmit = 1 [json_name = "retransmit"];
         uint32 timeout = 2 [json_name = "timeout"];
      }
      DwrRetransmitTime dwr_retransmit_time = 5 [json_name = "dwr-retransmit-time"];
      message GxSupportEdsg {
         bool support_edsg = 1 [json_name = "support-edsg"];
      }
      GxSupportEdsg gx_support_edsg = 6 [json_name = "gx-support-edsg"];
      message CcriRetransmitTimes {
         uint32 retransmit_times = 1 [json_name = "retransmit-times"];
      }
      CcriRetransmitTimes ccri_retransmit_times = 7 [json_name = "ccri-retransmit-times"];
      message CcriRetransmitRound {
         uint32 round_number = 1 [json_name = "round-number"];
         uint32 round_timeout = 2 [json_name = "round-timeout"];
      }
      CcriRetransmitRound ccri_retransmit_round = 8 [json_name = "ccri-retransmit-round"];
      message ReportDownstreamTraffic {
         bool enable_flag = 1 [json_name = "enable-flag"];
      }
      ReportDownstreamTraffic report_downstream_traffic = 9 [json_name = "report-downstream-traffic"];
      message SubscriptionId {
         message IncludeAttributes {
            message IncludeAttribute {
               enum AttributeType {
                  INVALID_ENUM_VALUE_AttributeType = 0;
                  AttributeType_MACX_ADDRESS = 1;
                  AttributeType_USERNAME = 2;
                  AttributeType_CIRCUITX_ID = 3;
               };
               AttributeType attribute_type = 1 [json_name = "attribute-type"];
               string seperator = 2 [json_name = "seperator"];
               string mac_address_seperator = 3 [json_name = "mac-address-seperator"];
            }
            repeated IncludeAttribute include_attribute = 1 [json_name = "include-attribute"];
         }
         IncludeAttributes include_attributes = 1 [json_name = "include-attributes"];
      }
      SubscriptionId subscription_id = 10 [json_name = "subscription-id"];
      message DictionaryMethod {
         enum Method {
            Method_XML = 0;
            Method_STANDARD = 1;
         };
         Method method = 1 [json_name = "method"];
      }
      DictionaryMethod dictionary_method = 11 [json_name = "dictionary-method"];
      message Avp {
         message EventTrigger {
            bool ignore_usage_report = 1 [json_name = "ignore-usage-report"];
         }
         EventTrigger event_trigger = 1 [json_name = "event-trigger"];
         message MonitorKey {
            enum ParseMode {
               ParseMode_INTEGER = 0;
               ParseMode_STRING = 1;
            };
            ParseMode parse_mode = 1 [json_name = "parse-mode"];
         }
         MonitorKey monitor_key = 2 [json_name = "monitor-key"];
      }
      Avp avp = 12 [json_name = "avp"];
   }
   Diameter diameter = 1 [json_name = "diameter"];
}


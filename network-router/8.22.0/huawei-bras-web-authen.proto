syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-bras-web-authen
// revision 2020-03-17
// revision 2020-02-22
// revision 2019-12-27
// revision 2019-11-11
// revision 2019-04-16
// namespace urn:huawei:yang:huawei-bras-web-authen

package huawei_bras_web_authen;

message BrasWebAuthen {
   message Global {
      message WebAuthenServer {
         bool enable = 1 [json_name = "enable"];
         uint32 listening_port = 2 [json_name = "listening-port"];
         bool reply_message = 3 [json_name = "reply-message"];
         enum Version {
            Version_VERSION1 = 0;
            Version_VERSION2 = 1;
            Version_VERSION3 = 2;
         };
         Version version = 4 [json_name = "version"];
         string interface_name = 5 [json_name = "interface-name"];
         bool from_destination_ip = 6 [json_name = "from-destination-ip"];
      }
      WebAuthenServer web_authen_server = 1 [json_name = "web-authen-server"];
      message ResponseCode {
         bool error_code_enable = 1 [json_name = "error-code-enable"];
      }
      ResponseCode response_code = 2 [json_name = "response-code"];
      message ResponseErrorId {
         bool enable = 1 [json_name = "enable"];
      }
      ResponseErrorId response_error_id = 3 [json_name = "response-error-id"];
      message DnsRedirectResponse {
         uint32 ttl = 1 [json_name = "ttl"];
      }
      DnsRedirectResponse dns_redirect_response = 4 [json_name = "dns-redirect-response"];
      message LogoutAccountStopping {
         bool enable = 1 [json_name = "enable"];
      }
      LogoutAccountStopping logout_account_stopping = 5 [json_name = "logout-account-stopping"];
      message QuerySequence {
         enum UserMac {
            INVALID_ENUM_VALUE_UserMac = 0;
            UserMac_FIRST = 1;
            UserMac_SECOND = 2;
            UserMac_THIRD = 3;
            UserMac_FOURTH = 4;
         };
         UserMac user_mac = 1 [json_name = "user-mac"];
         enum UserIp {
            INVALID_ENUM_VALUE_UserIp = 0;
            UserIp_FIRST = 1;
            UserIp_SECOND = 2;
            UserIp_THIRD = 3;
            UserIp_FOURTH = 4;
         };
         UserIp user_ip = 2 [json_name = "user-ip"];
         enum UserName {
            INVALID_ENUM_VALUE_UserName = 0;
            UserName_FIRST = 1;
            UserName_SECOND = 2;
            UserName_THIRD = 3;
            UserName_FOURTH = 4;
         };
         UserName user_name = 3 [json_name = "user-name"];
         enum UserAccountId {
            INVALID_ENUM_VALUE_UserAccountId = 0;
            UserAccountId_FIRST = 1;
            UserAccountId_SECOND = 2;
            UserAccountId_THIRD = 3;
            UserAccountId_FOURTH = 4;
         };
         UserAccountId user_account_id = 4 [json_name = "user-account-id"];
      }
      QuerySequence query_sequence = 6 [json_name = "query-sequence"];
      message WhitelistSessionCar {
         bool enable = 1 [json_name = "enable"];
         uint32 cir = 2 [json_name = "cir"];
         uint32 cbs = 3 [json_name = "cbs"];
         uint32 pir = 4 [json_name = "pir"];
         uint32 pbs = 5 [json_name = "pbs"];
      }
      WhitelistSessionCar whitelist_session_car = 7 [json_name = "whitelist-session-car"];
      message PacketDscp {
         uint32 value = 1 [json_name = "value"];
      }
      PacketDscp packet_dscp = 8 [json_name = "packet-dscp"];
      message SourceIp {
         bool ipv4_all = 1 [json_name = "ipv4-all"];
         bool ipv6_all = 2 [json_name = "ipv6-all"];
         message SpecifyIpv4S {
            message SpecifyIpv4 {
               string ipv4_address = 1 [json_name = "ipv4-address"];
               string vpn_name = 2 [json_name = "vpn-name"];
            }
            repeated SpecifyIpv4 specify_ipv4 = 1 [json_name = "specify-ipv4"];
         }
         SpecifyIpv4S specify_ipv4s = 3 [json_name = "specify-ipv4s"];
         message SpecifyIpv6S {
            message SpecifyIpv6 {
               string ipv6_address = 1 [json_name = "ipv6-address"];
               string vpn_name = 2 [json_name = "vpn-name"];
            }
            repeated SpecifyIpv6 specify_ipv6 = 1 [json_name = "specify-ipv6"];
         }
         SpecifyIpv6S specify_ipv6s = 4 [json_name = "specify-ipv6s"];
      }
      SourceIp source_ip = 9 [json_name = "source-ip"];
      message HttpsRedirect {
         bool enable = 1 [json_name = "enable"];
      }
      HttpsRedirect https_redirect = 10 [json_name = "https-redirect"];
   }
   Global global = 1 [json_name = "global"];
   message IpServers {
      message IpServer {
         string ip = 1 [json_name = "ip"];
         string vpn_name = 2 [json_name = "vpn-name"];
         enum PasswordType {
            INVALID_ENUM_VALUE_PasswordType = 0;
            PasswordType_SIMPLE = 1;
            PasswordType_CIPHER = 2;
         };
         PasswordType password_type = 3 [json_name = "password-type"];
         string password = 4 [json_name = "password"];
         bool nas_ip = 5 [json_name = "nas-ip"];
         uint32 port_number = 6 [json_name = "port-number"];
         bool all = 7 [json_name = "all"];
         uint32 detect_time = 8 [json_name = "detect-time"];
         enum UserQuery {
            INVALID_ENUM_VALUE_UserQuery = 0;
            UserQuery_EXCLUDEX_PREX_DOMAIN = 1;
            UserQuery_VERSION1 = 2;
         };
         UserQuery user_query = 9 [json_name = "user-query"];
         enum ServerState {
            INVALID_ENUM_VALUE_ServerState = 0;
            ServerState_UP = 1;
            ServerState_DOWN = 2;
         };
         ServerState server_state = 10 [json_name = "server-state"];
      }
      repeated IpServer ip_server = 1 [json_name = "ip-server"];
   }
   IpServers ip_servers = 2 [json_name = "ip-servers"];
}


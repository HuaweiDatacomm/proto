syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-21 17:42:08
// ProtoYang-version 1
// module huawei-driver
// revision 2022-10-09
// revision 2022-08-09
// revision 2022-08-05
// revision 2022-07-22
// revision 2022-07-20
// revision 2022-07-18
// revision 2022-07-13
// revision 2022-07-06
// revision 2022-07-04
// revision 2022-06-17
// revision 2022-06-14
// revision 2022-06-01
// revision 2022-05-27
// revision 2022-03-31
// revision 2022-03-17
// revision 2022-02-28
// revision 2021-12-30
// revision 2021-12-10
// revision 2021-12-01
// revision 2021-11-18
// revision 2021-11-08
// revision 2021-10-14
// revision 2021-05-06
// revision 2021-04-09
// revision 2021-03-02
// revision 2020-09-07
// revision 2020-08-04
// revision 2020-07-13
// revision 2020-04-02
// namespace urn:huawei:yang:huawei-driver

package huawei_driver;

message HwBoardFail {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   uint32 EntityType = 5;
   string Reason = 6;
}
message HwBoardFailResume {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   uint32 EntityType = 5;
   string Reason = 6;
}
message HwBoardInvalid {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   uint32 EntityType = 5;
   string Reason = 6;
}
message HwBoardInvalidResume {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   uint32 EntityType = 5;
   string Reason = 6;
}
message HwEntityInvalid {
   uint32 BaseTrapEventType = 1;
   uint32 BaseTrapSeverity = 2;
   uint32 EntContainedIn = 3;
   string EntPhysicalName = 4;
   uint32 EntityPhysicalIndex = 5;
   uint32 ProbableCause = 6;
   string ReasonDescription = 7;
   string RelativeResource = 8;
}
message HwEntityResume {
   uint32 BaseTrapEventType = 1;
   uint32 BaseTrapSeverity = 2;
   uint32 EntContainedIn = 3;
   string EntPhysicalName = 4;
   uint32 EntityPhysicalIndex = 5;
   uint32 ProbableCause = 6;
   string ReasonDescription = 7;
   string RelativeResource = 8;
}
message HwOpticalInvalid {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   string ReasonDescription = 5;
}
message HwOpticalInvalidResume {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   string ReasonDescription = 5;
}
message HwRATEOFTRAFFICResume {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   string Reason = 5;
}
message HwRATEOFTRAFFICRising {
   uint32 EntPhysicalIndex = 1;
   string EntPhysicalName = 2;
   uint32 EntityPhysicalIndex = 3;
   uint32 EntityTrapFaultID = 4;
   string Reason = 5;
}
message Driver {
   message GlobalAttribute {
      uint32 board_power_on_delay = 1 [json_name = "board-power-on-delay"];
      uint32 card_power_on_delay = 2 [json_name = "card-power-on-delay"];
      enum DustproofCheck {
         DustproofCheck_NO = 0;
         DustproofCheck_YES = 1;
      };
      DustproofCheck dustproof_check = 3 [json_name = "dustproof-check"];
      enum EnergyMode {
         EnergyMode_BASIC = 0;
         EnergyMode_STANDARD = 1;
         EnergyMode_DEEP = 2;
         EnergyMode_OPTIMAL = 3;
         EnergyMode_NOTX_SUPPORT = 4;
      };
      EnergyMode energy_mode = 4 [json_name = "energy-mode"];
      enum EnergySavingPm {
         EnergySavingPm_DISABLE = 0;
         EnergySavingPm_ENABLE = 1;
      };
      EnergySavingPm energy_saving_pm = 5 [json_name = "energy-saving-pm"];
      enum EntityFaultBoardIsolate {
         EntityFaultBoardIsolate_DISABLE = 0;
         EntityFaultBoardIsolate_ENABLE = 1;
      };
      EntityFaultBoardIsolate entity_fault_board_isolate = 6 [json_name = "entity-fault-board-isolate"];
      enum EntityFaultCardIsolate {
         EntityFaultCardIsolate_DISABLE = 0;
         EntityFaultCardIsolate_ENABLE = 1;
      };
      EntityFaultCardIsolate entity_fault_card_isolate = 7 [json_name = "entity-fault-card-isolate"];
      enum FaultStrategy {
         FaultStrategy_RESET = 0;
         FaultStrategy_ISOLATE = 1;
      };
      FaultStrategy fault_strategy = 8 [json_name = "fault-strategy"];
      enum HighTempSwitch {
         HighTempSwitch_NO = 0;
         HighTempSwitch_YES = 1;
      };
      HighTempSwitch high_temp_switch = 9 [json_name = "high-temp-switch"];
      enum InterfaceMatchCheck {
         InterfaceMatchCheck_DISABLE = 0;
         InterfaceMatchCheck_ENABLE = 1;
      };
      InterfaceMatchCheck interface_match_check = 10 [json_name = "interface-match-check"];
      uint32 least_sfu_number = 11 [json_name = "least-sfu-number"];
      enum OfflineFunction {
         OfflineFunction_ENABLE = 0;
         OfflineFunction_DISABLE = 1;
      };
      OfflineFunction offline_function = 12 [json_name = "offline-function"];
      enum OptionalEntityFaultIsolate {
         OptionalEntityFaultIsolate_DISABLE = 0;
         OptionalEntityFaultIsolate_ENABLE = 1;
      };
      OptionalEntityFaultIsolate optional_entity_fault_isolate = 13 [json_name = "optional-entity-fault-isolate"];
      enum PicReloadCycle {
         INVALID_ENUM_VALUE_PicReloadCycle = 0;
         PicReloadCycle_X_5MIN = 5;
         PicReloadCycle_X_15MIN = 15;
         PicReloadCycle_X_30MIN = 30;
         PicReloadCycle_X_60MIN = 60;
         PicReloadCycle_X_1440MIN = 1440;
      };
      PicReloadCycle pic_reload_cycle = 14 [json_name = "pic-reload-cycle"];
      enum SamplingPeriod {
         INVALID_ENUM_VALUE_SamplingPeriod = 0;
         SamplingPeriod_FIFTEENX_MINUTES = 1;
         SamplingPeriod_THIRTYX_MINUTES = 2;
         SamplingPeriod_ONEX_HOUR = 3;
         SamplingPeriod_ONEX_DAY = 4;
         SamplingPeriod_ONEX_WEEK = 5;
         SamplingPeriod_ONEX_MONTH = 6;
      };
      SamplingPeriod sampling_period = 15 [json_name = "sampling-period"];
      enum SfuSwitchMode {
         SfuSwitchMode_DISABLE = 0;
         SfuSwitchMode_ENABLE = 1;
      };
      SfuSwitchMode sfu_switch_mode = 16 [json_name = "sfu-switch-mode"];
      string system_mac_address = 17 [json_name = "system-mac-address"];
      uint32 system_mac_number = 18 [json_name = "system-mac-number"];
      enum SystemTrap {
         INVALID_ENUM_VALUE_SystemTrap = 0;
         SystemTrap_BASEX_TRAP = 1;
         SystemTrap_DCX_TRAP = 2;
         SystemTrap_ENTITYX_TRAP = 4;
      };
      SystemTrap system_trap = 19 [json_name = "system-trap"];
      enum TempQueryMode {
         TempQueryMode_DEFAULT = 0;
         TempQueryMode_BRIEF = 1;
      };
      TempQueryMode temp_query_mode = 20 [json_name = "temp-query-mode"];
      enum VltQueryMode {
         VltQueryMode_DEFAULT = 0;
         VltQueryMode_BRIEF = 1;
      };
      VltQueryMode vlt_query_mode = 21 [json_name = "vlt-query-mode"];
      enum CurForwardMode {
         INVALID_ENUM_VALUE_CurForwardMode = 0;
         CurForwardMode_COMPATIBLE = 1;
         CurForwardMode_ENHANCE = 2;
      };
      CurForwardMode cur_forward_mode = 22 [json_name = "cur-forward-mode"];
      enum NextForwardMode {
         INVALID_ENUM_VALUE_NextForwardMode = 0;
         NextForwardMode_COMPATIBLE = 1;
         NextForwardMode_ENHANCE = 2;
      };
      NextForwardMode next_forward_mode = 23 [json_name = "next-forward-mode"];
      enum CurWorkMode {
         INVALID_ENUM_VALUE_CurWorkMode = 0;
         CurWorkMode_REDUNDANT = 1;
         CurWorkMode_NONX_REDUNDANT = 2;
      };
      CurWorkMode cur_work_mode = 24 [json_name = "cur-work-mode"];
      enum NextWorkMode {
         INVALID_ENUM_VALUE_NextWorkMode = 0;
         NextWorkMode_REDUNDANT = 1;
         NextWorkMode_NONX_REDUNDANT = 2;
      };
      NextWorkMode next_work_mode = 25 [json_name = "next-work-mode"];
      enum WarmBackupStates {
         WarmBackupStates_OFF = 0;
         WarmBackupStates_ON = 1;
      };
      WarmBackupStates warm_backup_states = 26 [json_name = "warm-backup-states"];
      enum WarmBackupMode {
         WarmBackupMode_DISABLE = 0;
         WarmBackupMode_ENABLE = 1;
      };
      WarmBackupMode warm_backup_mode = 27 [json_name = "warm-backup-mode"];
      enum CurDeviceWorkMode {
         CurDeviceWorkMode_BASEX_FUNCTION = 0;
         CurDeviceWorkMode_PTNX_IOTX_MODE = 1;
      };
      CurDeviceWorkMode cur_device_work_mode = 28 [json_name = "cur-device-work-mode"];
      enum NextDeviceWorkMode {
         NextDeviceWorkMode_BASEX_FUNCTION = 0;
         NextDeviceWorkMode_PTNX_IOTX_MODE = 1;
      };
      NextDeviceWorkMode next_device_work_mode = 29 [json_name = "next-device-work-mode"];
      enum CurSystemMode {
         CurSystemMode_CLASSIC = 0;
         CurSystemMode_LS = 1;
      };
      CurSystemMode cur_system_mode = 30 [json_name = "cur-system-mode"];
      enum NextSystemMode {
         NextSystemMode_CLASSIC = 0;
         NextSystemMode_LS = 1;
      };
      NextSystemMode next_system_mode = 31 [json_name = "next-system-mode"];
      enum AutoUpgradeModel {
         AutoUpgradeModel_OPEN = 0;
         AutoUpgradeModel_CLOSE = 1;
      };
      AutoUpgradeModel auto_upgrade_model = 32 [json_name = "auto-upgrade-model"];
      uint32 chassis_last_change_time = 33 [json_name = "chassis-last-change-time"];
      uint32 cur_chassis_number = 34 [json_name = "cur-chassis-number"];
      uint32 max_chassis_number = 35 [json_name = "max-chassis-number"];
      string power_consumption = 36 [json_name = "power-consumption"];
      enum SplitResume {
         INVALID_ENUM_VALUE_SplitResume = 0;
         SplitResume_SLAVEX_RESET = 1;
         SplitResume_FASTX_PREEMPTION = 2;
      };
      SplitResume split_resume = 37 [json_name = "split-resume"];
      string switch_port_mode = 38 [json_name = "switch-port-mode"];
      string system_service_type = 39 [json_name = "system-service-type"];
      enum UsbUartStatus {
         UsbUartStatus_OPEN = 0;
         UsbUartStatus_CLOSED = 1;
         UsbUartStatus_NOTX_SUPPORT = 2;
      };
      UsbUartStatus usb_uart_status = 40 [json_name = "usb-uart-status"];
      string cur_system_mac_address = 41 [json_name = "cur-system-mac-address"];
      enum BoardChannelCheckStatus {
         INVALID_ENUM_VALUE_BoardChannelCheckStatus = 0;
         BoardChannelCheckStatus_ENABLE = 1;
         BoardChannelCheckStatus_DISABLE = 2;
      };
      BoardChannelCheckStatus board_channel_check_status = 42 [json_name = "board-channel-check-status"];
      enum EnergySavingPmStatus {
         EnergySavingPmStatus_DISABLE = 0;
         EnergySavingPmStatus_ENABLE = 1;
      };
      EnergySavingPmStatus energy_saving_pm_status = 43 [json_name = "energy-saving-pm-status"];
      message Global {
         uint32 hold_off_timer = 1 [json_name = "hold-off-timer"];
         uint32 hold_up_timer = 2 [json_name = "hold-up-timer"];
         uint32 up_hold_time = 3 [json_name = "up-hold-time"];
         uint32 down_hold_time = 4 [json_name = "down-hold-time"];
         bool crc_enable = 5 [json_name = "crc-enable"];
         bool symbol_enable = 6 [json_name = "symbol-enable"];
         bool input_enable = 7 [json_name = "input-enable"];
         bool output_enable = 8 [json_name = "output-enable"];
         bool sdh_enable = 9 [json_name = "sdh-enable"];
         bool bip8_sd_enable = 10 [json_name = "bip8-sd-enable"];
         bool badbytes_enable = 11 [json_name = "badbytes-enable"];
         bool optical_enable = 12 [json_name = "optical-enable"];
         bool tx_pause_enable = 13 [json_name = "tx-pause-enable"];
         bool loopback_clear = 14 [json_name = "loopback-clear"];
         uint32 loopback_clear_period = 15 [json_name = "loopback-clear-period"];
         bool port_down_laser_shut_log_enable = 16 [json_name = "port-down-laser-shut-log-enable"];
         bool optical_certified_alarm = 17 [json_name = "optical-certified-alarm"];
         bool optical_certified_down = 18 [json_name = "optical-certified-down"];
         bool non_certified_optical_status_alarm = 19 [json_name = "non-certified-optical-status-alarm"];
         enum OpticalAlarmStdEnable {
            OpticalAlarmStdEnable_DISABLED = 0;
            OpticalAlarmStdEnable_ENABLED = 1;
         };
         OpticalAlarmStdEnable optical_alarm_std_enable = 20 [json_name = "optical-alarm-std-enable"];
         enum PortBandwidthType {
            PortBandwidthType_DATAX_LINK = 0;
            PortBandwidthType_PHYSICAL = 1;
         };
         PortBandwidthType port_bandwidth_type = 21 [json_name = "port-bandwidth-type"];
         enum DriverMode {
            DriverMode_DEFAULT = 0;
            DriverMode_LOWER = 1;
            DriverMode_HIGHER = 2;
         };
         DriverMode driver_mode = 22 [json_name = "driver-mode"];
         enum LinkFlapProtection {
            LinkFlapProtection_ENABLE = 0;
            LinkFlapProtection_DISABLE = 1;
         };
         LinkFlapProtection link_flap_protection = 23 [json_name = "link-flap-protection"];
         enum SpeedDowngrade {
            SpeedDowngrade_DISABLE = 0;
            SpeedDowngrade_ENABLE = 1;
         };
         SpeedDowngrade speed_downgrade = 24 [json_name = "speed-downgrade"];
         bool cpos_mix_service_mode_enable = 25 [json_name = "cpos-mix-service-mode-enable"];
         enum HighFrequencyUpdate {
            HighFrequencyUpdate_ENABLE = 0;
            HighFrequencyUpdate_DISABLE = 1;
         };
         HighFrequencyUpdate high_frequency_update = 26 [json_name = "high-frequency-update"];
         message SinkPmMeasurement {
            uint32 interval = 1 [json_name = "interval"];
         }
         SinkPmMeasurement sink_pm_measurement = 27 [json_name = "sink-pm-measurement"];
         message SourcePmMeasurement {
            uint32 interval = 1 [json_name = "interval"];
         }
         SourcePmMeasurement source_pm_measurement = 28 [json_name = "source-pm-measurement"];
         bool fall_flow_change_enable = 29 [json_name = "fall-flow-change-enable"];
         uint32 fall_flow_change_remain_time = 30 [json_name = "fall-flow-change-remain-time"];
         bool shutdown_inactive_port = 31 [json_name = "shutdown-inactive-port"];
      }
      Global global = 44 [json_name = "global"];
      enum DcnManagementPlaneLockStatus {
         DcnManagementPlaneLockStatus_LOCKED = 0;
         DcnManagementPlaneLockStatus_UNLOCKED = 1;
      };
      DcnManagementPlaneLockStatus dcn_management_plane_lock_status = 45 [json_name = "dcn-management-plane-lock-status"];
      enum CurDcnPlaneMode {
         CurDcnPlaneMode_DCNX_CONTROLX_PLANE = 0;
         CurDcnPlaneMode_DCNX_MANAGEMENTX_PLANE = 1;
      };
      CurDcnPlaneMode cur_dcn_plane_mode = 46 [json_name = "cur-dcn-plane-mode"];
      enum NextDcnPlaneMode {
         NextDcnPlaneMode_DCNX_CONTROLX_PLANE = 0;
         NextDcnPlaneMode_DCNX_MANAGEMENTX_PLANE = 1;
      };
      NextDcnPlaneMode next_dcn_plane_mode = 47 [json_name = "next-dcn-plane-mode"];
      enum ServiceForwardAbility {
         ServiceForwardAbility_DEFAULT = 0;
         ServiceForwardAbility_X_480G = 1;
         ServiceForwardAbility_X_1T = 2;
      };
      ServiceForwardAbility service_forward_ability = 48 [json_name = "service-forward-ability"];
      enum CurSystemWorkMode {
         CurSystemWorkMode_PX_SERIES = 0;
         CurSystemWorkMode_XX_SERIES = 1;
         CurSystemWorkMode_EX_SERIES = 2;
      };
      CurSystemWorkMode cur_system_work_mode = 49 [json_name = "cur-system-work-mode"];
      enum NextSystemWorkMode {
         NextSystemWorkMode_PX_SERIES = 0;
         NextSystemWorkMode_XX_SERIES = 1;
         NextSystemWorkMode_EX_SERIES = 2;
      };
      NextSystemWorkMode next_system_work_mode = 50 [json_name = "next-system-work-mode"];
      message SysmacSwitchTime_SwitchDelayTime {
         uint32 switch_delay_time = 1 [json_name = "switch-delay-time"];
      }
      message SysmacSwitchTime_SwitchImmediately {
         bool switch_immediately = 1 [json_name = "switch-immediately"];
      }
      oneof SysmacSwitchTime {
         SysmacSwitchTime_SwitchDelayTime sysmac_switch_time_switch_delay_time = 51 [json_name = "switch-delay-time"];
         SysmacSwitchTime_SwitchImmediately sysmac_switch_time_switch_immediately = 52 [json_name = "switch-immediately"];
      }
      enum FactoryConfigurationButtonSwitch {
         FactoryConfigurationButtonSwitch_DISABLE = 0;
         FactoryConfigurationButtonSwitch_ENABLE = 1;
      };
      FactoryConfigurationButtonSwitch factory_configuration_button_switch = 53 [json_name = "factory-configuration-button-switch"];
   }
   GlobalAttribute global_attribute = 1 [json_name = "global-attribute"];
   message IoInspectStates {
      message IoInspectState {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         enum States {
            States_CLOSE = 0;
            States_OPEN = 1;
            States_NA = 2;
         };
         States states = 3 [json_name = "states"];
         enum DefaultStates {
            DefaultStates_CLOSE = 0;
            DefaultStates_OPEN = 1;
            DefaultStates_NA = 2;
         };
         DefaultStates default_states = 4 [json_name = "default-states"];
         string alarm_name = 5 [json_name = "alarm-name"];
         enum AlarmStatus {
            AlarmStatus_ABNORMAL = 0;
            AlarmStatus_NORMAL = 1;
         };
         AlarmStatus alarm_status = 6 [json_name = "alarm-status"];
      }
      repeated IoInspectState io_inspect_state = 1 [json_name = "io-inspect-state"];
   }
   IoInspectStates io_inspect_states = 2 [json_name = "io-inspect-states"];
   message IoInspectAttributes {
      message IoInspectAttribute {
         string position = 1 [json_name = "position"];
         uint32 index = 2 [json_name = "index"];
         enum DefaultStates {
            DefaultStates_CLOSE = 0;
            DefaultStates_OPEN = 1;
         };
         DefaultStates default_states = 3 [json_name = "default-states"];
         string alarm_name = 4 [json_name = "alarm-name"];
      }
      repeated IoInspectAttribute io_inspect_attribute = 1 [json_name = "io-inspect-attribute"];
   }
   IoInspectAttributes io_inspect_attributes = 3 [json_name = "io-inspect-attributes"];
   message Temperatures {
      message Temperature {
         string position = 1 [json_name = "position"];
         uint32 i2c = 2 [json_name = "i2c"];
         string address = 3 [json_name = "address"];
         uint32 channel = 4 [json_name = "channel"];
         uint32 minor = 5 [json_name = "minor"];
         uint32 major = 6 [json_name = "major"];
         uint32 fatal = 7 [json_name = "fatal"];
         int32 fan_tmax = 8 [json_name = "fan-tmax"];
         int32 fan_tmin = 9 [json_name = "fan-tmin"];
         string pcb_name = 10 [json_name = "pcb-name"];
         uint32 entity_index = 11 [json_name = "entity-index"];
         enum State {
            State_NORMAL = 0;
            State_MINOR = 1;
            State_MAJOR = 2;
            State_FATAL = 3;
            State_UNKNOWN = 4;
            State_UNSUPPORTED = 5;
         };
         State state = 12 [json_name = "state"];
         int32 current_temperature = 13 [json_name = "current-temperature"];
         int32 minor_alarm_threshold = 14 [json_name = "minor-alarm-threshold"];
         int32 major_alarm_threshold = 15 [json_name = "major-alarm-threshold"];
         int32 fatal_alarm_threshold = 16 [json_name = "fatal-alarm-threshold"];
         int32 fan_tmax_states = 17 [json_name = "fan-tmax-states"];
         int32 fan_tmin_states = 18 [json_name = "fan-tmin-states"];
      }
      repeated Temperature temperature = 1 [json_name = "temperature"];
   }
   Temperatures temperatures = 4 [json_name = "temperatures"];
   message Voltageinfos {
      message Voltageinfo {
         string position = 1 [json_name = "position"];
         uint32 i2c = 2 [json_name = "i2c"];
         string address = 3 [json_name = "address"];
         uint32 channel = 4 [json_name = "channel"];
         uint32 major_voltage_threshold_low = 5 [json_name = "major-voltage-threshold-low"];
         uint32 major_voltage_threshold_high = 6 [json_name = "major-voltage-threshold-high"];
         uint32 fatal_voltage_threshold_low = 7 [json_name = "fatal-voltage-threshold-low"];
         uint32 fatal_voltage_threshold_high = 8 [json_name = "fatal-voltage-threshold-high"];
         string pcb_name = 9 [json_name = "pcb-name"];
         uint32 entity_index = 10 [json_name = "entity-index"];
         enum State {
            State_NORMAL = 0;
            State_MINOR = 1;
            State_MAJOR = 2;
            State_FATAL = 3;
            State_UNKNOWN = 4;
            State_UNSUPPORTED = 5;
         };
         State state = 11 [json_name = "state"];
         string current_voltage = 12 [json_name = "current-voltage"];
         string required_voltage = 13 [json_name = "required-voltage"];
         string major_low_threshold = 14 [json_name = "major-low-threshold"];
         string low_threshold = 15 [json_name = "low-threshold"];
         string major_high_threshold = 16 [json_name = "major-high-threshold"];
         string high_threshold = 17 [json_name = "high-threshold"];
         string voltage_ratio = 18 [json_name = "voltage-ratio"];
      }
      repeated Voltageinfo voltageinfo = 1 [json_name = "voltageinfo"];
   }
   Voltageinfos voltageinfos = 5 [json_name = "voltageinfos"];
   message ElectricCurrentInfos {
      message ElectricCurrentInfo {
         string position = 1 [json_name = "position"];
         uint32 i2c = 2 [json_name = "i2c"];
         string address = 3 [json_name = "address"];
         uint32 channel = 4 [json_name = "channel"];
         string pcb_name = 5 [json_name = "pcb-name"];
         enum State {
            State_NORMAL = 0;
            State_MINOR = 1;
            State_MAJOR = 2;
            State_FATAL = 3;
            State_UNKNOWN = 4;
            State_UNSUPPORTED = 5;
         };
         State state = 6 [json_name = "state"];
         string current = 7 [json_name = "current"];
         string required_current = 8 [json_name = "required-current"];
         string fatal_low_threshold = 9 [json_name = "fatal-low-threshold"];
         string fatal_high_threshold = 10 [json_name = "fatal-high-threshold"];
         string major_low_threshold = 11 [json_name = "major-low-threshold"];
         string major_high_threshold = 12 [json_name = "major-high-threshold"];
      }
      repeated ElectricCurrentInfo electric_current_info = 1 [json_name = "electric-current-info"];
   }
   ElectricCurrentInfos electric_current_infos = 6 [json_name = "electric-current-infos"];
   message InterfaceMatchCheckStates {
      message InterfaceMatchCheckState {
         string position = 1 [json_name = "position"];
         enum Object {
            INVALID_ENUM_VALUE_Object = 0;
            Object_BOARD = 1;
            Object_CARD = 2;
         };
         Object object = 2 [json_name = "object"];
      }
      repeated InterfaceMatchCheckState interface_match_check_state = 1 [json_name = "interface-match-check-state"];
   }
   InterfaceMatchCheckStates interface_match_check_states = 7 [json_name = "interface-match-check-states"];
   message AreaEnergyinfos {
      message AreaEnergyinfo {
         string chassis_position = 1 [json_name = "chassis-position"];
         uint32 area_id = 2 [json_name = "area-id"];
         string area_rated_power = 3 [json_name = "area-rated-power"];
         string area_assigned_power = 4 [json_name = "area-assigned-power"];
         string area_used_power = 5 [json_name = "area-used-power"];
         string area_left_power = 6 [json_name = "area-left-power"];
         message BoardEnergys {
            message BoardEnergy {
               string position = 1 [json_name = "position"];
               uint32 entity_index = 2 [json_name = "entity-index"];
               string pcb_name = 3 [json_name = "pcb-name"];
               string voltage_value = 4 [json_name = "voltage-value"];
               string electrical_value = 5 [json_name = "electrical-value"];
               string current_power = 6 [json_name = "current-power"];
               string rated_power = 7 [json_name = "rated-power"];
               string power_threshold = 8 [json_name = "power-threshold"];
               string efficiency = 9 [json_name = "efficiency"];
               string average_power = 10 [json_name = "average-power"];
               string saved_power = 11 [json_name = "saved-power"];
            }
            repeated BoardEnergy board_energy = 1 [json_name = "board-energy"];
         }
         BoardEnergys board_energys = 7 [json_name = "board-energys"];
         string area_real_power = 8 [json_name = "area-real-power"];
         string area_power_mode = 9 [json_name = "area-power-mode"];
         string area_average_power = 10 [json_name = "area-average-power"];
         string others_power = 11 [json_name = "others-power"];
      }
      repeated AreaEnergyinfo area_energyinfo = 1 [json_name = "area-energyinfo"];
   }
   AreaEnergyinfos area_energyinfos = 8 [json_name = "area-energyinfos"];
   message BoardPowers {
      message BoardPower {
         string position = 1 [json_name = "position"];
         uint32 entity_index = 2 [json_name = "entity-index"];
         string pcb_name = 3 [json_name = "pcb-name"];
         string voltage_value = 4 [json_name = "voltage-value"];
         string electrical_value = 5 [json_name = "electrical-value"];
         string current_power = 6 [json_name = "current-power"];
         string rated_power = 7 [json_name = "rated-power"];
         string power_threshold = 8 [json_name = "power-threshold"];
         string efficiency = 9 [json_name = "efficiency"];
      }
      repeated BoardPower board_power = 1 [json_name = "board-power"];
   }
   BoardPowers board_powers = 9 [json_name = "board-powers"];
   message ElectronicLabels {
      message ElectronicLabel {
         enum EntityClass {
            EntityClass_OTHER = 0;
            EntityClass_CHASSIS = 1;
            EntityClass_CONTAINER = 2;
            EntityClass_BOARD = 3;
            EntityClass_MPUX_MODULE = 4;
            EntityClass_LPUX_MODULE = 5;
            EntityClass_SFUX_MODULE = 6;
            EntityClass_CLOCKX_MODULE = 7;
            EntityClass_CARD = 8;
            EntityClass_FLEXIBLECARDX_MODULE = 9;
            EntityClass_PORT = 10;
            EntityClass_FAN = 16;
            EntityClass_POWERSUPPLY = 17;
            EntityClass_PPX_MODULE = 4108;
            EntityClass_SWFX_MODULE = 4109;
            EntityClass_ECUX_MODULE = 4110;
            EntityClass_ICUX_MODULE = 4111;
            EntityClass_LFE = 4162;
            EntityClass_CFX_MODULE = 4170;
            EntityClass_LCD = 4181;
            EntityClass_PEM = 5006;
            EntityClass_CMUX_MODULE = 5010;
            EntityClass_TSU = 5012;
            EntityClass_PMU = 5031;
            EntityClass_PM = 5032;
            EntityClass_PDU = 5086;
            EntityClass_DMU = 5087;
            EntityClass_DACS = 5088;
         };
         EntityClass entity_class = 1 [json_name = "entity-class"];
         string position = 2 [json_name = "position"];
         uint32 entity_serial_number = 3 [json_name = "entity-serial-number"];
         uint32 entity_index = 4 [json_name = "entity-index"];
         string entity_bomid = 5 [json_name = "entity-bomid"];
         string barcode = 6 [json_name = "barcode"];
         string bom_english_desc = 7 [json_name = "bom-english-desc"];
         string bom_local_desc = 8 [json_name = "bom-local-desc"];
         string manufacturer_name = 9 [json_name = "manufacturer-name"];
         string manufacturer_date = 10 [json_name = "manufacturer-date"];
         string manufacturer_code = 11 [json_name = "manufacturer-code"];
         string board_type = 12 [json_name = "board-type"];
         string entity_asset_id = 13 [json_name = "entity-asset-id"];
         string entity_clei_code = 14 [json_name = "entity-clei-code"];
         string entity_update_log = 15 [json_name = "entity-update-log"];
         string archives_info_version = 16 [json_name = "archives-info-version"];
         string entity_open_bomid = 17 [json_name = "entity-open-bomid"];
         string entity_issue_number = 18 [json_name = "entity-issue-number"];
         string entity_model = 19 [json_name = "entity-model"];
         string entity_elabel_version = 20 [json_name = "entity-elabel-version"];
         string entity_elabel_extend = 21 [json_name = "entity-elabel-extend"];
         string silk_screen = 22 [json_name = "silk-screen"];
      }
      repeated ElectronicLabel electronic_label = 1 [json_name = "electronic-label"];
   }
   ElectronicLabels electronic_labels = 10 [json_name = "electronic-labels"];
   message Mbusnodes {
      message Mbusnode {
         string slot_id = 1 [json_name = "slot-id"];
         string register = 2 [json_name = "register"];
         string board_type = 3 [json_name = "board-type"];
         uint32 eeprom_number = 4 [json_name = "eeprom-number"];
         uint32 temperature_monitor_number = 5 [json_name = "temperature-monitor-number"];
         uint32 voltage_monitor_number = 6 [json_name = "voltage-monitor-number"];
      }
      repeated Mbusnode mbusnode = 1 [json_name = "mbusnode"];
   }
   Mbusnodes mbusnodes = 11 [json_name = "mbusnodes"];
   message CheckRunningSoftwareSafes {
      message CheckRunningSoftwareSafe {
         string position = 1 [json_name = "position"];
         enum Item {
            Item_BIOS = 0;
            Item_BOOTLOAD = 1;
         };
         Item item = 2 [json_name = "item"];
         string board_type = 3 [json_name = "board-type"];
         string pkgsha256hash = 4 [json_name = "pkgsha256hash"];
         string runsha256hash = 5 [json_name = "runsha256hash"];
         enum Result {
            Result_FAIL = 0;
            Result_PASS = 1;
            Result_NOTX_SUPPORT = 2;
         };
         Result result = 6 [json_name = "result"];
      }
      repeated CheckRunningSoftwareSafe check_running_software_safe = 1 [json_name = "check-running-software-safe"];
   }
   CheckRunningSoftwareSafes check_running_software_safes = 12 [json_name = "check-running-software-safes"];
   message Bootinfos {
      message Bootinfo {
         string position = 1 [json_name = "position"];
         string board_type = 2 [json_name = "board-type"];
         string rot = 3 [json_name = "rot"];
      }
      repeated Bootinfo bootinfo = 1 [json_name = "bootinfo"];
   }
   Bootinfos bootinfos = 13 [json_name = "bootinfos"];
   message MultiChassisAttributes {
      message MultiChassisAttribute {
         uint32 current_chassis_id = 1 [json_name = "current-chassis-id"];
         uint32 next_chassis_id = 2 [json_name = "next-chassis-id"];
         enum ChassisType {
            ChassisType_CCC = 0;
            ChassisType_CLC = 1;
         };
         ChassisType chassis_type = 3 [json_name = "chassis-type"];
      }
      repeated MultiChassisAttribute multi_chassis_attribute = 1 [json_name = "multi-chassis-attribute"];
   }
   MultiChassisAttributes multi_chassis_attributes = 14 [json_name = "multi-chassis-attributes"];
   message ChassisRunModes {
      message ChassisRunMode {
         string chassis_id = 1 [json_name = "chassis-id"];
         enum CurrentRunMode {
            INVALID_ENUM_VALUE_CurrentRunMode = 0;
            CurrentRunMode_SINGLE = 1;
            CurrentRunMode_CCCX_0 = 2;
            CurrentRunMode_CCCX_1 = 3;
            CurrentRunMode_CCCX_2 = 4;
            CurrentRunMode_VIRTUALX_CLUSTERX_CHASSIS = 6;
         };
         CurrentRunMode current_run_mode = 2 [json_name = "current-run-mode"];
         enum NextRunMode {
            INVALID_ENUM_VALUE_NextRunMode = 0;
            NextRunMode_SINGLE = 1;
            NextRunMode_CCCX_0 = 2;
            NextRunMode_CCCX_1 = 3;
            NextRunMode_CCCX_2 = 4;
            NextRunMode_VIRTUALX_CLUSTERX_CHASSIS = 6;
         };
         NextRunMode next_run_mode = 3 [json_name = "next-run-mode"];
         string current_run_cluster = 4 [json_name = "current-run-cluster"];
         string next_run_cluster = 5 [json_name = "next-run-cluster"];
      }
      repeated ChassisRunMode chassis_run_mode = 1 [json_name = "chassis-run-mode"];
   }
   ChassisRunModes chassis_run_modes = 15 [json_name = "chassis-run-modes"];
   message Stratum3Clocks {
      message Stratum3Clock {
         string slot_id = 1 [json_name = "slot-id"];
         string board_device_type = 2 [json_name = "board-device-type"];
         enum ClockType {
            ClockType_SYNX_CLOCK = 0;
            ClockType_LINEX_CLOCK = 1;
         };
         ClockType clock_type = 3 [json_name = "clock-type"];
         string clock_slot_id = 4 [json_name = "clock-slot-id"];
         enum SwitchMode {
            SwitchMode_FORCEX_CHOICE = 0;
            SwitchMode_AUTOX_CHOICE = 1;
         };
         SwitchMode switch_mode = 5 [json_name = "switch-mode"];
      }
      repeated Stratum3Clock stratum_3_clock = 1 [json_name = "stratum-3-clock"];
   }
   Stratum3Clocks stratum_3_clocks = 16 [json_name = "stratum-3-clocks"];
   message SystemSyncClocks {
      message SystemSyncClock {
         string slot_id = 1 [json_name = "slot-id"];
         string board_device_type = 2 [json_name = "board-device-type"];
         enum ClockType {
            ClockType_SYNX_CLOCK = 0;
            ClockType_LINEX_CLOCK = 1;
         };
         ClockType clock_type = 3 [json_name = "clock-type"];
         string clock_slot_id = 4 [json_name = "clock-slot-id"];
         enum SwitchMode {
            SwitchMode_FORCEX_CHOICE = 0;
            SwitchMode_AUTOX_CHOICE = 1;
         };
         SwitchMode switch_mode = 5 [json_name = "switch-mode"];
         enum LockState {
            LockState_LOCKED = 0;
            LockState_UNLOCKED = 1;
         };
         LockState lock_state = 6 [json_name = "lock-state"];
      }
      repeated SystemSyncClock system_sync_clock = 1 [json_name = "system-sync-clock"];
   }
   SystemSyncClocks system_sync_clocks = 17 [json_name = "system-sync-clocks"];
   message RollbackAttribute {
      string rollback_soft_pack = 1 [json_name = "rollback-soft-pack"];
      string rollback_patch_file = 2 [json_name = "rollback-patch-file"];
      string rollback_config_file = 3 [json_name = "rollback-config-file"];
      string rollback_paf_file = 4 [json_name = "rollback-paf-file"];
      string rollback_result = 5 [json_name = "rollback-result"];
      string rollback_remain_time = 6 [json_name = "rollback-remain-time"];
      repeated string rollback_feature_pkg_file = 7 [json_name = "rollback-feature-pkg-file"];
   }
   RollbackAttribute rollback_attribute = 18 [json_name = "rollback-attribute"];
   message SlaveDefaults {
      message SlaveDefault {
         string chassis_id = 1 [json_name = "chassis-id"];
         string slot_id = 2 [json_name = "slot-id"];
         string slave_default = 3 [json_name = "slave-default"];
      }
      repeated SlaveDefault slave_default = 1 [json_name = "slave-default"];
   }
   SlaveDefaults slave_defaults = 19 [json_name = "slave-defaults"];
   message InnerLinks {
      message InnerLink {
         enum LinkType {
            LinkType_OTHER = 0;
            LinkType_CONTROLX_CHANNEL = 1;
            LinkType_MONITORX_CHANNEL = 2;
            LinkType_FORWARDX_CHANNEL = 3;
         };
         LinkType link_type = 1 [json_name = "link-type"];
         string left_chassis_position = 2 [json_name = "left-chassis-position"];
         string right_chassis_position = 3 [json_name = "right-chassis-position"];
         string link_name = 4 [json_name = "link-name"];
         string link_index = 5 [json_name = "link-index"];
         enum LeftChassisType {
            LeftChassisType_OTHER = 0;
            LeftChassisType_CENTRALX_CHASSIS = 1;
            LeftChassisType_LINEX_CHASSIS = 2;
         };
         LeftChassisType left_chassis_type = 6 [json_name = "left-chassis-type"];
         enum RightChassisType {
            RightChassisType_OTHER = 0;
            RightChassisType_CENTRALX_CHASSIS = 1;
            RightChassisType_LINEX_CHASSIS = 2;
         };
         RightChassisType right_chassis_type = 7 [json_name = "right-chassis-type"];
         enum OperationState {
            OperationState_NORMAL = 0;
            OperationState_PARTIALX_FAULT = 1;
            OperationState_FAULT = 2;
         };
         OperationState operation_state = 8 [json_name = "operation-state"];
         enum AlarmState {
            AlarmState_NORMAL = 0;
            AlarmState_PARTIALX_FAULT = 1;
            AlarmState_FAULT = 2;
         };
         AlarmState alarm_state = 9 [json_name = "alarm-state"];
         message PhysicalInnerLinks {
            message PhysicalInnerLink {
               string physical_link_name = 1 [json_name = "physical-link-name"];
               string left_port_name = 2 [json_name = "left-port-name"];
               string right_port_name = 3 [json_name = "right-port-name"];
               enum OperationStatus {
                  OperationStatus_NORMAL = 0;
                  OperationStatus_PARTIALX_FAULT = 1;
                  OperationStatus_FAULT = 2;
               };
               OperationStatus operation_status = 4 [json_name = "operation-status"];
               uint32 repair_id = 5 [json_name = "repair-id"];
               string repair_description = 6 [json_name = "repair-description"];
               message CheckPoints {
                  message CheckPoint {
                     uint32 index = 1 [json_name = "index"];
                     string entity_name = 2 [json_name = "entity-name"];
                     enum EntityClass {
                        EntityClass_OTHER = 0;
                        EntityClass_CHASSIS = 1;
                        EntityClass_CONTAINER = 2;
                        EntityClass_BOARD = 3;
                        EntityClass_MPUX_MODULE = 4;
                        EntityClass_LPUX_MODULE = 5;
                        EntityClass_SFUX_MODULE = 6;
                        EntityClass_CLOCKX_MODULE = 7;
                        EntityClass_CARD = 8;
                        EntityClass_FLEXIBLECARDX_MODULE = 9;
                        EntityClass_PORT = 10;
                        EntityClass_FAN = 16;
                        EntityClass_POWERSUPPLY = 17;
                        EntityClass_PPX_MODULE = 4108;
                        EntityClass_SWFX_MODULE = 4109;
                        EntityClass_ECUX_MODULE = 4110;
                        EntityClass_ICUX_MODULE = 4111;
                        EntityClass_LFE = 4162;
                        EntityClass_CFX_MODULE = 4170;
                        EntityClass_LCD = 4181;
                        EntityClass_PEM = 5006;
                        EntityClass_CMUX_MODULE = 5010;
                        EntityClass_TSU = 5012;
                        EntityClass_PMU = 5031;
                        EntityClass_PM = 5032;
                        EntityClass_PDU = 5086;
                        EntityClass_DMU = 5087;
                        EntityClass_DACS = 5088;
                     };
                     EntityClass entity_class = 3 [json_name = "entity-class"];
                     enum Status {
                        Status_NORMAL = 0;
                        Status_PARTIALX_FAULT = 1;
                        Status_FAULT = 2;
                     };
                     Status status = 4 [json_name = "status"];
                     uint32 reason_id = 5 [json_name = "reason-id"];
                     string reason_description = 6 [json_name = "reason-description"];
                     uint32 repair_id = 7 [json_name = "repair-id"];
                     string repair_description = 8 [json_name = "repair-description"];
                  }
                  repeated CheckPoint check_point = 1 [json_name = "check-point"];
               }
               CheckPoints check_points = 7 [json_name = "check-points"];
            }
            repeated PhysicalInnerLink physical_inner_link = 1 [json_name = "physical-inner-link"];
         }
         PhysicalInnerLinks physical_inner_links = 10 [json_name = "physical-inner-links"];
      }
      repeated InnerLink inner_link = 1 [json_name = "inner-link"];
   }
   InnerLinks inner_links = 20 [json_name = "inner-links"];
   message SlotStatistics {
      message SlotStatistic {
         string chassis_id = 1 [json_name = "chassis-id"];
         enum SlotType {
            INVALID_ENUM_VALUE_SlotType = 0;
            SlotType_ICU = 4111;
            SlotType_MPU = 4159;
            SlotType_LPU = 4160;
            SlotType_SFU = 4161;
            SlotType_FAN = 4163;
            SlotType_POWER = 4164;
            SlotType_CMU = 5009;
            SlotType_PMU = 5031;
            SlotType_IPU = 10248;
         };
         SlotType slot_type = 2 [json_name = "slot-type"];
         uint32 total_slot_number = 3 [json_name = "total-slot-number"];
         uint32 online_slot_number = 4 [json_name = "online-slot-number"];
      }
      repeated SlotStatistic slot_statistic = 1 [json_name = "slot-statistic"];
   }
   SlotStatistics slot_statistics = 21 [json_name = "slot-statistics"];
   message ClusterFiber {
      message ChassisFibers {
         message ChassisFiber {
            string chassis_id = 1 [json_name = "chassis-id"];
            uint32 fiber_length = 2 [json_name = "fiber-length"];
         }
         repeated ChassisFiber chassis_fiber = 1 [json_name = "chassis-fiber"];
      }
      ChassisFibers chassis_fibers = 1 [json_name = "chassis-fibers"];
      message ChassisFiberConnectedMode {
         enum CurrentFiberConnectMode {
            INVALID_ENUM_VALUE_CurrentFiberConnectMode = 0;
            CurrentFiberConnectMode_HALFX_FABRIC = 4;
            CurrentFiberConnectMode_FULLX_FABRIC = 5;
         };
         CurrentFiberConnectMode current_fiber_connect_mode = 1 [json_name = "current-fiber-connect-mode"];
         enum NextFiberConnectMode {
            INVALID_ENUM_VALUE_NextFiberConnectMode = 0;
            NextFiberConnectMode_HALFX_FABRIC = 4;
            NextFiberConnectMode_FULLX_FABRIC = 5;
         };
         NextFiberConnectMode next_fiber_connect_mode = 2 [json_name = "next-fiber-connect-mode"];
      }
      ChassisFiberConnectedMode chassis_fiber_connected_mode = 2 [json_name = "chassis-fiber-connected-mode"];
      message FabricFiberStatusErrors {
         message FabricFiberStatusError {
            string local_physical_port = 1 [json_name = "local-physical-port"];
            enum LocalPhysicalPortStatus {
               LocalPhysicalPortStatus_LOS = 0;
               LocalPhysicalPortStatus_MISMATCH = 1;
               LocalPhysicalPortStatus_OFF = 2;
            };
            LocalPhysicalPortStatus local_physical_port_status = 2 [json_name = "local-physical-port-status"];
            string remote_physical_port = 3 [json_name = "remote-physical-port"];
            enum RemotePhysicalPortStatus {
               RemotePhysicalPortStatus_LOS = 0;
               RemotePhysicalPortStatus_MISMATCH = 1;
               RemotePhysicalPortStatus_OFF = 2;
            };
            RemotePhysicalPortStatus remote_physical_port_status = 4 [json_name = "remote-physical-port-status"];
            uint32 fiber_actual_length = 5 [json_name = "fiber-actual-length"];
            uint32 fiber_config_length = 6 [json_name = "fiber-config-length"];
            string fiber_sequence_number = 7 [json_name = "fiber-sequence-number"];
            string bomid = 8 [json_name = "bomid"];
            string chassis_id = 9 [json_name = "chassis-id"];
         }
         repeated FabricFiberStatusError fabric_fiber_status_error = 1 [json_name = "fabric-fiber-status-error"];
      }
      FabricFiberStatusErrors fabric_fiber_status_errors = 3 [json_name = "fabric-fiber-status-errors"];
      message ActualFibers {
         message ActualFiber {
            string chassis_id = 1 [json_name = "chassis-id"];
            uint32 fiber_length = 2 [json_name = "fiber-length"];
         }
         repeated ActualFiber actual_fiber = 1 [json_name = "actual-fiber"];
      }
      ActualFibers actual_fibers = 4 [json_name = "actual-fibers"];
   }
   ClusterFiber cluster_fiber = 22 [json_name = "cluster-fiber"];
   message Temperature2S {
      message Temperature2 {
         string position = 1 [json_name = "position"];
         uint32 sensor_id = 2 [json_name = "sensor-id"];
         uint32 minor_threshold_percent = 3 [json_name = "minor-threshold-percent"];
         uint32 major_threshold_percent = 4 [json_name = "major-threshold-percent"];
         uint32 fatal_threshold_percent = 5 [json_name = "fatal-threshold-percent"];
         int32 fan_adjust_high_temperature = 6 [json_name = "fan-adjust-high-temperature"];
         int32 fan_adjust_low_temperature = 7 [json_name = "fan-adjust-low-temperature"];
         string pcb_name = 8 [json_name = "pcb-name"];
         string sensor_name = 9 [json_name = "sensor-name"];
         enum State {
            State_NORMAL = 0;
            State_MINOR = 1;
            State_MAJOR = 2;
            State_FATAL = 3;
            State_UNKNOWN = 4;
            State_UNSUPPORTED = 5;
         };
         State state = 10 [json_name = "state"];
         int32 current_temperature = 11 [json_name = "current-temperature"];
         int32 minor_threshold = 12 [json_name = "minor-threshold"];
         int32 major_threshold = 13 [json_name = "major-threshold"];
         int32 fatal_threshold = 14 [json_name = "fatal-threshold"];
         int32 low_threshold = 15 [json_name = "low-threshold"];
      }
      repeated Temperature2 temperature2 = 1 [json_name = "temperature2"];
   }
   Temperature2S temperature2s = 23 [json_name = "temperature2s"];
   message Voltages {
      message Voltage {
         string position = 1 [json_name = "position"];
         uint32 sensor_id = 2 [json_name = "sensor-id"];
         uint32 major_low_threshold_percent = 3 [json_name = "major-low-threshold-percent"];
         uint32 fatal_low_threshold_percent = 4 [json_name = "fatal-low-threshold-percent"];
         uint32 major_high_threshold_percent = 5 [json_name = "major-high-threshold-percent"];
         uint32 fatal_high_threshold_percent = 6 [json_name = "fatal-high-threshold-percent"];
         string pcb_name = 7 [json_name = "pcb-name"];
         string sensor_name = 8 [json_name = "sensor-name"];
         enum State {
            State_NORMAL = 0;
            State_MINOR = 1;
            State_MAJOR = 2;
            State_FATAL = 3;
            State_UNKNOWN = 4;
            State_UNSUPPORTED = 5;
         };
         State state = 9 [json_name = "state"];
         string current_voltage = 10 [json_name = "current-voltage"];
         string required_voltage = 11 [json_name = "required-voltage"];
         string major_low_threshold = 12 [json_name = "major-low-threshold"];
         string fatal_low_threshold = 13 [json_name = "fatal-low-threshold"];
         string major_high_threshold = 14 [json_name = "major-high-threshold"];
         string fatal_high_threshold = 15 [json_name = "fatal-high-threshold"];
         string ratio = 16 [json_name = "ratio"];
      }
      repeated Voltage voltage = 1 [json_name = "voltage"];
   }
   Voltages voltages = 24 [json_name = "voltages"];
   message DeviceHealthChecks {
      message DeviceHealthCheck {
         string item = 1 [json_name = "item"];
         string status = 2 [json_name = "status"];
         string reason = 3 [json_name = "reason"];
         string advice = 4 [json_name = "advice"];
      }
      repeated DeviceHealthCheck device_health_check = 1 [json_name = "device-health-check"];
   }
   DeviceHealthChecks device_health_checks = 25 [json_name = "device-health-checks"];
   message Leds {
      message Led {
         enum Class {
            Class_OTHER = 0;
            Class_CHASSIS = 1;
            Class_MPUMODULE = 4;
            Class_LPUMODULE = 5;
            Class_SFUMODULE = 6;
            Class_CLOCKMODULE = 7;
            Class_CARDMODULE = 9;
            Class_PORT = 10;
            Class_FAN = 16;
            Class_POWERSUPPLY = 17;
            Class_CONTAINER = 18;
            Class_PPMODULE = 4108;
            Class_SWFMODULE = 4109;
            Class_ECUMODULE = 4110;
            Class_ICUMODULE = 4111;
            Class_LFE = 4162;
            Class_CFMODULE = 4170;
            Class_LCD = 4181;
            Class_PEM = 5006;
            Class_CMUMODULE = 5010;
            Class_PIC = 5011;
            Class_TSU = 5012;
            Class_PMU = 5031;
            Class_PM = 5032;
         };
         Class class = 1 [json_name = "class"];
         string position = 2 [json_name = "position"];
         enum LedType {
            LedType_PWR = 0;
            LedType_MPU = 1;
            LedType_LPU = 2;
            LedType_SFU = 3;
            LedType_FAN = 4;
            LedType_SYS = 5;
            LedType_USB = 6;
            LedType_ICU = 7;
            LedType_CARD = 8;
         };
         LedType led_type = 3 [json_name = "led-type"];
         enum LedColor {
            LedColor_DIM = 0;
            LedColor_RED = 1;
            LedColor_GREEN = 2;
            LedColor_YELLOW = 3;
         };
         LedColor led_color = 4 [json_name = "led-color"];
         string blink_frequency = 5 [json_name = "blink-frequency"];
         uint32 duration = 6 [json_name = "duration"];
      }
      repeated Led led = 1 [json_name = "led"];
   }
   Leds leds = 26 [json_name = "leds"];
   message PowerGlobalAttribute {
      enum FullSupplyEnable {
         FullSupplyEnable_DISABLE = 0;
         FullSupplyEnable_ENABLE = 1;
      };
      FullSupplyEnable full_supply_enable = 1 [json_name = "full-supply-enable"];
   }
   PowerGlobalAttribute power_global_attribute = 27 [json_name = "power-global-attribute"];
   message FanAttributes {
      message FanAttribute {
         string position = 1 [json_name = "position"];
         enum Workmode {
            INVALID_ENUM_VALUE_Workmode = 0;
            Workmode_AUTO = 1;
            Workmode_MANUAL = 2;
            Workmode_SILENT = 4;
            Workmode_FULL = 5;
            Workmode_ANTIX_CORROSIVEX_MODE = 8;
            Workmode_MINIMUMX_PERCENT = 9;
            Workmode_DENOISE = 11;
         };
         Workmode workmode = 2 [json_name = "workmode"];
         uint32 speed = 3 [json_name = "speed"];
      }
      repeated FanAttribute fan_attribute = 1 [json_name = "fan-attribute"];
   }
   FanAttributes fan_attributes = 28 [json_name = "fan-attributes"];
}


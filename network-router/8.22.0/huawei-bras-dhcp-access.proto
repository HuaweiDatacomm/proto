syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-01-07 17:29:13
// ProtoYang-version 1
// module huawei-bras-dhcp-access
// revision 2021-12-29
// revision 2019-12-31
// revision 2019-12-20
// revision 2019-11-19
// revision 2019-10-26
// revision 2019-10-17
// revision 2019-04-03
// namespace urn:huawei:yang:huawei-bras-dhcp-access

package huawei_bras_dhcp_access;

message BrasDhcpAccess {
   message Global {
      message ServerAck {
         bool enable = 1 [json_name = "enable"];
      }
      ServerAck server_ack = 1 [json_name = "server-ack"];
      message ParseQosProfile {
         bool parse = 1 [json_name = "parse"];
         string separator = 2 [json_name = "separator"];
         uint32 segment = 3 [json_name = "segment"];
      }
      ParseQosProfile parse_qos_profile = 2 [json_name = "parse-qos-profile"];
      message RequestPacketCheck {
         bool enable = 1 [json_name = "enable"];
      }
      RequestPacketCheck request_packet_check = 3 [json_name = "request-packet-check"];
      message DhcpRequest {
         uint32 ttl = 1 [json_name = "ttl"];
      }
      DhcpRequest dhcp_request = 4 [json_name = "dhcp-request"];
      message RedirectDsDomain {
         uint32 option_code = 1 [json_name = "option-code"];
         string option_string_redirect = 2 [json_name = "option-string-redirect"];
      }
      RedirectDsDomain redirect_ds_domain = 5 [json_name = "redirect-ds-domain"];
      message ClientPacketCheck {
         bool strict = 1 [json_name = "strict"];
         bool layer2_ip_loose = 2 [json_name = "layer2-ip-loose"];
      }
      ClientPacketCheck client_packet_check = 6 [json_name = "client-packet-check"];
      message Option82Access {
         bool enable = 1 [json_name = "enable"];
      }
      Option82Access option82_access = 7 [json_name = "option82-access"];
      message ThroughPacket {
         bool enable = 1 [json_name = "enable"];
      }
      ThroughPacket through_packet = 8 [json_name = "through-packet"];
      message WaitRequest {
         uint32 time_value = 1 [json_name = "time-value"];
      }
      WaitRequest wait_request = 9 [json_name = "wait-request"];
      message ThroughNak {
         bool enable = 1 [json_name = "enable"];
      }
      ThroughNak through_nak = 10 [json_name = "through-nak"];
      message Option61Insert {
         bool enable = 1 [json_name = "enable"];
         enum HardwareType {
            INVALID_ENUM_VALUE_HardwareType = 0;
            HardwareType_ETHERNETX_10MB = 1;
         };
         HardwareType hardware_type = 2 [json_name = "hardware-type"];
      }
      Option61Insert option61_insert = 11 [json_name = "option61-insert"];
      message InvalidServerDetect {
         uint32 interval = 1 [json_name = "interval"];
      }
      InvalidServerDetect invalid_server_detect = 12 [json_name = "invalid-server-detect"];
      message Option82Location {
         bool enable = 1 [json_name = "enable"];
      }
      Option82Location option82_location = 13 [json_name = "option82-location"];
      message ReleasePacket {
         enum SourceIpType {
            SourceIpType_SUBSCRIBERX_IP = 0;
            SourceIpType_INTERFACEX_IP = 1;
         };
         SourceIpType source_ip_type = 1 [json_name = "source-ip-type"];
      }
      ReleasePacket release_packet = 14 [json_name = "release-packet"];
      message DiscoverSpeed {
         uint32 packet_value = 1 [json_name = "packet-value"];
         uint32 second_value = 2 [json_name = "second-value"];
      }
      DiscoverSpeed discover_speed = 15 [json_name = "discover-speed"];
      message GiaddrPacketDiscard {
         bool enable = 1 [json_name = "enable"];
      }
      GiaddrPacketDiscard giaddr_packet_discard = 16 [json_name = "giaddr-packet-discard"];
      message UserThreshold {
         uint32 slot_warning_value = 1 [json_name = "slot-warning-value"];
         uint32 entire_warning_value = 2 [json_name = "entire-warning-value"];
      }
      UserThreshold user_threshold = 17 [json_name = "user-threshold"];
      message LeaseEndTimeOrignal {
         bool enable = 1 [json_name = "enable"];
      }
      LeaseEndTimeOrignal lease_end_time_orignal = 18 [json_name = "lease-end-time-orignal"];
      message StrictCheckRequestServerIp {
         bool enable = 1 [json_name = "enable"];
      }
      StrictCheckRequestServerIp strict_check_request_server_ip = 19 [json_name = "strict-check-request-server-ip"];
      message DiscardReleasePacket {
         bool enable = 1 [json_name = "enable"];
      }
      DiscardReleasePacket discard_release_packet = 20 [json_name = "discard-release-packet"];
      message PppServerPacketCheck {
         bool loose_mode = 1 [json_name = "loose-mode"];
      }
      PppServerPacketCheck ppp_server_packet_check = 21 [json_name = "ppp-server-packet-check"];
      message ServerPacket {
         enum CheckMode {
            CheckMode_LOOSE = 0;
            CheckMode_STRICT = 1;
         };
         CheckMode check_mode = 1 [json_name = "check-mode"];
         bool loose_include_option3 = 2 [json_name = "loose-include-option3"];
      }
      ServerPacket server_packet = 22 [json_name = "server-packet"];
      message FrameIpNotInPoolRange {
         bool unnumbered_loopback_enable = 1 [json_name = "unnumbered-loopback-enable"];
         bool exclude_leasemanage_enable = 2 [json_name = "exclude-leasemanage-enable"];
      }
      FrameIpNotInPoolRange frame_ip_not_in_pool_range = 23 [json_name = "frame-ip-not-in-pool-range"];
      message ConflictIpOffline {
         bool online_user = 1 [json_name = "online-user"];
         bool include_new_user = 2 [json_name = "include-new-user"];
         bool new_user_include_frame_ip = 3 [json_name = "new-user-include-frame-ip"];
      }
      ConflictIpOffline conflict_ip_offline = 24 [json_name = "conflict-ip-offline"];
      message VendorClassOrOption60 {
         enum OptionType {
            OptionType_DHCPX_OPTION60 = 0;
            OptionType_VENDORX_CLASS = 1;
         };
         OptionType option_type = 1 [json_name = "option-type"];
         enum IncludeDomainType {
            IncludeDomainType_DOMAINX_INCLUDE = 0;
            IncludeDomainType_DOMAINX_PATIALX_INCLUDE = 1;
         };
         IncludeDomainType include_domain_type = 2 [json_name = "include-domain-type"];
         enum MatchType {
            MatchType_EXACTX_MATCH = 0;
            MatchType_PARTIALX_MATCH = 1;
         };
         MatchType match_type = 3 [json_name = "match-type"];
         bool encrypt_flag = 4 [json_name = "encrypt-flag"];
         message DecodeMode_Cn {
            bool cn5 = 1 [json_name = "cn"];
         }
         message DecodeMode_SelfDefine {
            uint32 offset = 1 [json_name = "offset"];
            message DecodeType_Option {
               uint32 length = 1 [json_name = "length"];
            }
            message DecodeType_SubOption {
               uint32 code = 1 [json_name = "code"];
               uint32 sub_offset = 2 [json_name = "sub-offset"];
               uint32 sub_length = 3 [json_name = "sub-length"];
            }
            oneof DecodeType {
               DecodeType_Option decode_type_option = 2 [json_name = "option"];
               DecodeType_SubOption decode_type_sub_option = 3 [json_name = "sub-option"];
            }
         }
         oneof DecodeMode {
            DecodeMode_Cn decode_mode_cn = 5 [json_name = "cn"];
            DecodeMode_SelfDefine decode_mode_self_define = 6 [json_name = "self-define"];
         }
      }
      VendorClassOrOption60 vendor_class_or_option60 = 25 [json_name = "vendor-class-or-option60"];
      message GiaddrPolicy {
         bool dhcp_layer2_giaddr_clear = 1 [json_name = "dhcp-layer2-giaddr-clear"];
      }
      GiaddrPolicy giaddr_policy = 26 [json_name = "giaddr-policy"];
      message WhitelistSessionCar {
         bool enable = 1 [json_name = "enable"];
         uint32 cir = 2 [json_name = "cir"];
         uint32 cbs = 3 [json_name = "cbs"];
         uint32 pir = 4 [json_name = "pir"];
         uint32 pbs = 5 [json_name = "pbs"];
      }
      WhitelistSessionCar whitelist_session_car = 27 [json_name = "whitelist-session-car"];
   }
   Global global = 1 [json_name = "global"];
   message RebindNoUserAction {
      message NakAction_KeepSilence {
         bool keep_silence = 1 [json_name = "keep-silence"];
      }
      message NakAction_ReplyServerIp {
         string reply_server_ip = 1 [json_name = "reply-server-ip"];
      }
      oneof NakAction {
         NakAction_KeepSilence nak_action_keep_silence = 1 [json_name = "keep-silence"];
         NakAction_ReplyServerIp nak_action_reply_server_ip = 2 [json_name = "reply-server-ip"];
      }
   }
   RebindNoUserAction rebind_no_user_action = 2 [json_name = "rebind-no-user-action"];
   message IpoeUserDelays {
      message IpoeUserDelay {
         string mac = 1 [json_name = "mac"];
         string ip_address = 2 [json_name = "ip-address"];
         uint32 vrfid = 3 [json_name = "vrfid"];
         uint32 detecting_delay_time = 4 [json_name = "detecting-delay-time"];
         uint32 timestamp = 5 [json_name = "timestamp"];
      }
      repeated IpoeUserDelay ipoe_user_delay = 1 [json_name = "ipoe-user-delay"];
   }
   IpoeUserDelays ipoe_user_delays = 3 [json_name = "ipoe-user-delays"];
   message DhcpAccessStatistics {
      uint32 client_send_packets = 1 [json_name = "client-send-packets"];
      uint32 received_discover_packets = 2 [json_name = "received-discover-packets"];
      uint32 received_request_packets = 3 [json_name = "received-request-packets"];
      uint32 bootp_request_packets = 4 [json_name = "bootp-request-packets"];
      uint32 select_request_packets = 5 [json_name = "select-request-packets"];
      uint32 reboot_request_packets = 6 [json_name = "reboot-request-packets"];
      uint32 renew_request_packets = 7 [json_name = "renew-request-packets"];
      uint32 rebind_request_packets = 8 [json_name = "rebind-request-packets"];
      uint32 received_decline_packets = 9 [json_name = "received-decline-packets"];
      uint32 received_release_packets = 10 [json_name = "received-release-packets"];
      uint32 received_inform_packets = 11 [json_name = "received-inform-packets"];
      uint32 server_send_packets = 12 [json_name = "server-send-packets"];
      uint32 received_offer_packets = 13 [json_name = "received-offer-packets"];
      uint32 received_ack_packets = 14 [json_name = "received-ack-packets"];
      uint32 received_nak_packets = 15 [json_name = "received-nak-packets"];
      uint32 received_forcerenew_packets = 16 [json_name = "received-forcerenew-packets"];
      uint32 forbidden_discover_packets = 17 [json_name = "forbidden-discover-packets"];
      uint32 forbidden_request_packets = 18 [json_name = "forbidden-request-packets"];
      uint32 client_option_errors = 19 [json_name = "client-option-errors"];
      uint32 client_hops_errors = 20 [json_name = "client-hops-errors"];
      uint32 client_hardware_type_errors = 21 [json_name = "client-hardware-type-errors"];
      uint32 client_length_errors = 22 [json_name = "client-length-errors"];
      uint32 client_mac_errors = 23 [json_name = "client-mac-errors"];
      uint32 client_null_mac_errors = 24 [json_name = "client-null-mac-errors"];
      uint32 client_sname_errors = 25 [json_name = "client-sname-errors"];
      uint32 client_boot_file_errors = 26 [json_name = "client-boot-file-errors"];
      uint32 server_option_errors = 27 [json_name = "server-option-errors"];
      uint32 access_limit_packets = 28 [json_name = "access-limit-packets"];
      uint32 invalid_server_ip_offer_packets = 29 [json_name = "invalid-server-ip-offer-packets"];
      uint32 invalid_server_ip_nak_packets = 30 [json_name = "invalid-server-ip-nak-packets"];
      uint32 invalid_server_ip_nak_new_packets = 31 [json_name = "invalid-server-ip-nak-new-packets"];
      uint32 server_hardware_type_errors = 32 [json_name = "server-hardware-type-errors"];
      uint32 server_length_errors = 33 [json_name = "server-length-errors"];
      uint32 server_mac_errors = 34 [json_name = "server-mac-errors"];
      uint32 server_sname_errors = 35 [json_name = "server-sname-errors"];
      uint32 server_bootfile_errors = 36 [json_name = "server-bootfile-errors"];
      uint32 confict_ip_offer_packets = 37 [json_name = "confict-ip-offer-packets"];
      uint32 confict_ip_ack_packets = 38 [json_name = "confict-ip-ack-packets"];
      uint32 sent_client_packets = 39 [json_name = "sent-client-packets"];
      uint32 sent_offer_packets = 40 [json_name = "sent-offer-packets"];
      uint32 sent_ack_packets = 41 [json_name = "sent-ack-packets"];
      uint32 sent_nak_packets = 42 [json_name = "sent-nak-packets"];
      uint32 sent_server_packets = 43 [json_name = "sent-server-packets"];
      uint32 sent_discover_packets = 44 [json_name = "sent-discover-packets"];
      uint32 sent_request_packets = 45 [json_name = "sent-request-packets"];
      uint32 sent_release_packets = 46 [json_name = "sent-release-packets"];
      uint32 sent_decline_packets = 47 [json_name = "sent-decline-packets"];
   }
   DhcpAccessStatistics dhcp_access_statistics = 4 [json_name = "dhcp-access-statistics"];
   message BgpOverIpoe {
      bool enable = 1 [json_name = "enable"];
   }
   BgpOverIpoe bgp_over_ipoe = 5 [json_name = "bgp-over-ipoe"];
   message IpoeSessionIds {
      message IpoeSessionId {
         uint32 session_id = 1 [json_name = "session-id"];
         string mac_address = 2 [json_name = "mac-address"];
         uint32 pevlan = 3 [json_name = "pevlan"];
         uint32 cevlan = 4 [json_name = "cevlan"];
         string interface = 5 [json_name = "interface"];
      }
      repeated IpoeSessionId ipoe_session_id = 1 [json_name = "ipoe-session-id"];
   }
   IpoeSessionIds ipoe_session_ids = 6 [json_name = "ipoe-session-ids"];
   message Upgrade {
      enum State {
         State_ENABLE = 0;
         State_DISABLE = 1;
      };
      State state = 1 [json_name = "state"];
      string lease_time = 2 [json_name = "lease-time"];
      string renew_time = 3 [json_name = "renew-time"];
      string rebind_time = 4 [json_name = "rebind-time"];
      uint32 new_user_count = 5 [json_name = "new-user-count"];
      uint32 old_user_count = 6 [json_name = "old-user-count"];
      uint32 infinite_user_count = 7 [json_name = "infinite-user-count"];
      string old_renew_interval_time = 8 [json_name = "old-renew-interval-time"];
   }
   Upgrade upgrade = 7 [json_name = "upgrade"];
   message CpUpgrades {
      message CpUpgrade {
         string upmng_instance = 1 [json_name = "upmng-instance"];
         enum State {
            State_ENABLE = 0;
            State_DISABLE = 1;
         };
         State state = 2 [json_name = "state"];
         string lease_time = 3 [json_name = "lease-time"];
         string renew_time = 4 [json_name = "renew-time"];
         string rebind_time = 5 [json_name = "rebind-time"];
         uint32 new_user_count = 6 [json_name = "new-user-count"];
         uint32 old_user_count = 7 [json_name = "old-user-count"];
         uint32 infinite_user_count = 8 [json_name = "infinite-user-count"];
         string old_renew_interval_time = 9 [json_name = "old-renew-interval-time"];
      }
      repeated CpUpgrade cp_upgrade = 1 [json_name = "cp-upgrade"];
   }
   CpUpgrades cp_upgrades = 8 [json_name = "cp-upgrades"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-10-21 10:31:16
// ProtoYang-version 1
// module huawei-dsa
// revision 2022-10-20
// revision 2019-05-01
// namespace urn:huawei:yang:huawei-dsa

package huawei_dsa;

message Dsa {
   message DsaGlobalCfg {
      int32 maxKeyPair = 1;
   }
   DsaGlobalCfg dsaGlobalCfg = 1;
   message DsaKeyPairCfgs {
      message DsaKeyPairCfg {
         string hostKeyCode = 1;
         string keyPairLabel = 2;
         enum KeySize {
            KeySize_X_2048 = 0;
         };
         KeySize keySize = 3;
      }
      repeated DsaKeyPairCfg dsaKeyPairCfg = 1;
   }
   DsaKeyPairCfgs dsaKeyPairCfgs = 2;
   message DsaLocalKeys {
      message DsaLocalKey {
         string hostKeyCode = 1;
         string hostKeyName = 2;
         string hostKeyOpenSSH = 3;
         string hostKeyPEM = 4;
         enum KeySize {
            KeySize_X_2048 = 0;
         };
         KeySize keySize = 5;
      }
      DsaLocalKey dsaLocalKey = 1;
   }
   DsaLocalKeys dsaLocalKeys = 3;
   message DsaPeerKeys {
      message DsaPeerKey {
         enum EncodeInType {
            EncodeInType_DER = 0;
            EncodeInType_OPENSSH = 1;
            EncodeInType_PEM = 2;
         };
         EncodeInType encodeInType = 1;
         string keyCode = 2;
         string keyName = 3;
      }
      repeated DsaPeerKey dsaPeerKey = 1;
   }
   DsaPeerKeys dsaPeerKeys = 4;
   message LocalKeys {
      message LocalKey {
         uint32 key_size = 1 [json_name = "key-size"];
         string host_key_name = 2 [json_name = "host-key-name"];
         string host_key_code = 3 [json_name = "host-key-code"];
         string host_key_pem = 4 [json_name = "host-key-pem"];
         string host_key_openssh = 5 [json_name = "host-key-openssh"];
      }
      LocalKey local_key = 1 [json_name = "local-key"];
   }
   LocalKeys local_keys = 5 [json_name = "local-keys"];
   message PeerKeys {
      message PeerKey {
         string key_name = 1 [json_name = "key-name"];
         string key_code = 2 [json_name = "key-code"];
         enum EncodingType {
            EncodingType_DER = 0;
            EncodingType_PEM = 1;
            EncodingType_OPENSSH = 2;
         };
         EncodingType encoding_type = 3 [json_name = "encoding-type"];
      }
      repeated PeerKey peer_key = 1 [json_name = "peer-key"];
   }
   PeerKeys peer_keys = 6 [json_name = "peer-keys"];
   message KeyPairs {
      message KeyPair {
         string key_pair_label = 1 [json_name = "key-pair-label"];
         enum KeySize {
            INVALID_ENUM_VALUE_KeySize = 0;
            KeySize_X_2048 = 2048;
         };
         KeySize key_size = 2 [json_name = "key-size"];
         string host_key_code = 3 [json_name = "host-key-code"];
      }
      repeated KeyPair key_pair = 1 [json_name = "key-pair"];
   }
   KeyPairs key_pairs = 7 [json_name = "key-pairs"];
   message DsaGlobal {
      int32 max_key_pair = 1 [json_name = "max-key-pair"];
   }
   DsaGlobal dsa_global = 8 [json_name = "dsa-global"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-19 14:35:27
// ProtoYang-version 1
// module openconfig-network-instance
// revision 2019-06-11
// revision 2019-05-14
// revision 2019-04-16
// revision 2019-02-03
// revision 2018-11-21
// revision 2018-08-11
// revision 2018-06-22
// revision 2018-06-05
// revision 2018-02-19
// revision 2017-12-13
// revision 2017-08-24
// revision 2017-02-28
// revision 2017-01-26
// revision 2017-01-13
// revision 2016-12-15
// revision 2016-11-10
// revision 2016-10-12
// revision 2016-09-28
// revision 2016-08-11
// revision 2016-07-08
// revision 2016-03-29
// revision 2015-10-18
// namespace http://openconfig.net/yang/network-instance

package openconfig_network_instance;

message NetworkInstances {
   message NetworkInstance {
      string name = 1 [json_name = "name"];
      message Fdb {
         message Config {
            bool mac_learning = 1 [json_name = "mac-learning"];
            uint32 mac_aging_time = 2 [json_name = "mac-aging-time"];
            uint32 maximum_entries = 3 [json_name = "maximum-entries"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            bool mac_learning = 1 [json_name = "mac-learning"];
            uint32 mac_aging_time = 2 [json_name = "mac-aging-time"];
            uint32 maximum_entries = 3 [json_name = "maximum-entries"];
         }
         State state = 2 [json_name = "state"];
         message MacTable {
            message Entries {
               message Entry {
                  string mac_address = 1 [json_name = "mac-address"];
                  uint32 vlan = 2 [json_name = "vlan"];
                  message Config {
                     string mac_address = 1 [json_name = "mac-address"];
                     uint32 vlan = 2 [json_name = "vlan"];
                  }
                  Config config = 3 [json_name = "config"];
                  message State {
                     string mac_address = 1 [json_name = "mac-address"];
                     uint32 vlan = 2 [json_name = "vlan"];
                     uint64 age = 3 [json_name = "age"];
                     enum EntryType {
                        EntryType_STATIC = 0;
                        EntryType_DYNAMIC = 1;
                     };
                     EntryType entry_type = 4 [json_name = "entry-type"];
                  }
                  State state = 4 [json_name = "state"];
                  message Interface {
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 1 [json_name = "interface-ref"];
                  }
                  Interface interface = 5 [json_name = "interface"];
               }
               repeated Entry entry = 1 [json_name = "entry"];
            }
            Entries entries = 1 [json_name = "entries"];
         }
         MacTable mac_table = 3 [json_name = "mac-table"];
      }
      Fdb fdb = 2 [json_name = "fdb"];
      message Config {
         string name = 1 [json_name = "name"];
         string type = 2 [json_name = "type"];
         bool enabled = 3 [json_name = "enabled"];
         string description = 4 [json_name = "description"];
         string router_id = 5 [json_name = "router-id"];
         string route_distinguisher = 6 [json_name = "route-distinguisher"];
         repeated string enabled_address_families = 7 [json_name = "enabled-address-families"];
         uint32 mtu = 8 [json_name = "mtu"];
      }
      Config config = 3 [json_name = "config"];
      message State {
         string name = 1 [json_name = "name"];
         string type = 2 [json_name = "type"];
         bool enabled = 3 [json_name = "enabled"];
         string description = 4 [json_name = "description"];
         string router_id = 5 [json_name = "router-id"];
         string route_distinguisher = 6 [json_name = "route-distinguisher"];
         repeated string enabled_address_families = 7 [json_name = "enabled-address-families"];
         uint32 mtu = 8 [json_name = "mtu"];
      }
      State state = 4 [json_name = "state"];
      message Encapsulation {
         message Config {
            string encapsulation_type = 1 [json_name = "encapsulation-type"];
            string label_allocation_mode = 2 [json_name = "label-allocation-mode"];
            bool control_word = 3 [json_name = "control-word"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            string encapsulation_type = 1 [json_name = "encapsulation-type"];
            string label_allocation_mode = 2 [json_name = "label-allocation-mode"];
            bool control_word = 3 [json_name = "control-word"];
         }
         State state = 2 [json_name = "state"];
      }
      Encapsulation encapsulation = 5 [json_name = "encapsulation"];
      message InterInstancePolicies {
         message ApplyPolicy {
            message Config {
               repeated string import_policy = 1 [json_name = "import-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               repeated string import_policy = 1 [json_name = "import-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
               repeated string export_policy = 3 [json_name = "export-policy"];
               enum DefaultExportPolicy {
                  DefaultExportPolicy_ACCEPT_ROUTE = 0;
                  DefaultExportPolicy_REJECT_ROUTE = 1;
               };
               DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
            }
            State state = 2 [json_name = "state"];
         }
         ApplyPolicy apply_policy = 1 [json_name = "apply-policy"];
      }
      InterInstancePolicies inter_instance_policies = 6 [json_name = "inter-instance-policies"];
      message TableConnections {
         message TableConnection {
            string src_protocol = 1 [json_name = "src-protocol"];
            string dst_protocol = 2 [json_name = "dst-protocol"];
            string address_family = 3 [json_name = "address-family"];
            message Config {
               string src_protocol = 1 [json_name = "src-protocol"];
               string address_family = 2 [json_name = "address-family"];
               string dst_protocol = 3 [json_name = "dst-protocol"];
               repeated string import_policy = 4 [json_name = "import-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 5 [json_name = "default-import-policy"];
            }
            Config config = 4 [json_name = "config"];
            message State {
               string src_protocol = 1 [json_name = "src-protocol"];
               string address_family = 2 [json_name = "address-family"];
               string dst_protocol = 3 [json_name = "dst-protocol"];
               repeated string import_policy = 4 [json_name = "import-policy"];
               enum DefaultImportPolicy {
                  DefaultImportPolicy_ACCEPT_ROUTE = 0;
                  DefaultImportPolicy_REJECT_ROUTE = 1;
               };
               DefaultImportPolicy default_import_policy = 5 [json_name = "default-import-policy"];
            }
            State state = 5 [json_name = "state"];
         }
         repeated TableConnection table_connection = 1 [json_name = "table-connection"];
      }
      TableConnections table_connections = 7 [json_name = "table-connections"];
      message Interfaces {
         message Interface {
            string id = 1 [json_name = "id"];
            message Config {
               string id = 1 [json_name = "id"];
               string interface6 = 2 [json_name = "interface"];
               uint32 subinterface = 3 [json_name = "subinterface"];
               repeated string associated_address_families = 4 [json_name = "associated-address-families"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string id = 1 [json_name = "id"];
               string interface6 = 2 [json_name = "interface"];
               uint32 subinterface = 3 [json_name = "subinterface"];
               repeated string associated_address_families = 4 [json_name = "associated-address-families"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated Interface interface = 1 [json_name = "interface"];
      }
      Interfaces interfaces = 8 [json_name = "interfaces"];
      message RouteLimits {
         message RouteLimit {
            string afi = 1 [json_name = "afi"];
            message Config {
               string afi = 1 [json_name = "afi"];
               uint32 maximum = 2 [json_name = "maximum"];
               bool warning_only = 3 [json_name = "warning-only"];
               uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string afi = 1 [json_name = "afi"];
               uint32 maximum = 2 [json_name = "maximum"];
               bool warning_only = 3 [json_name = "warning-only"];
               uint32 alarm_threshold = 4 [json_name = "alarm-threshold"];
               bool threshold_exceeded = 5 [json_name = "threshold-exceeded"];
               uint32 installed_routes = 6 [json_name = "installed-routes"];
            }
            State state = 3 [json_name = "state"];
         }
         repeated RouteLimit route_limit = 1 [json_name = "route-limit"];
      }
      RouteLimits route_limits = 9 [json_name = "route-limits"];
      message Tables {
         message Table {
            string protocol = 1 [json_name = "protocol"];
            string address_family = 2 [json_name = "address-family"];
            message Config {
               string protocol = 1 [json_name = "protocol"];
               string address_family = 2 [json_name = "address-family"];
            }
            Config config = 3 [json_name = "config"];
            message State {
               string protocol = 1 [json_name = "protocol"];
               string address_family = 2 [json_name = "address-family"];
            }
            State state = 4 [json_name = "state"];
         }
         repeated Table table = 1 [json_name = "table"];
      }
      Tables tables = 10 [json_name = "tables"];
      message ConnectionPoints {
         message ConnectionPoint {
            string connection_point_id = 1 [json_name = "connection-point-id"];
            message Config {
               string connection_point_id = 1 [json_name = "connection-point-id"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               string connection_point_id = 1 [json_name = "connection-point-id"];
            }
            State state = 3 [json_name = "state"];
            message Endpoints {
               message Endpoint {
                  string endpoint_id = 1 [json_name = "endpoint-id"];
                  message Config {
                     string endpoint_id = 1 [json_name = "endpoint-id"];
                     uint32 precedence = 2 [json_name = "precedence"];
                     string type = 3 [json_name = "type"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string endpoint_id = 1 [json_name = "endpoint-id"];
                     uint32 precedence = 2 [json_name = "precedence"];
                     string type = 3 [json_name = "type"];
                     bool active = 4 [json_name = "active"];
                  }
                  State state = 3 [json_name = "state"];
                  message Local {
                     message Config {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                        uint32 site_id = 3 [json_name = "site-id"];
                        uint32 site_label_block_offset = 4 [json_name = "site-label-block-offset"];
                        uint32 site_label_block_size = 5 [json_name = "site-label-block-size"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                        uint32 site_id = 3 [json_name = "site-id"];
                        uint32 site_label_block_offset = 4 [json_name = "site-label-block-offset"];
                        uint32 site_label_block_size = 5 [json_name = "site-label-block-size"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Local local = 4 [json_name = "local"];
                  message Remote {
                     message Config {
                        string remote_system = 1 [json_name = "remote-system"];
                        uint32 virtual_circuit_identifier = 2 [json_name = "virtual-circuit-identifier"];
                        uint32 site_id = 3 [json_name = "site-id"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string remote_system = 1 [json_name = "remote-system"];
                        uint32 virtual_circuit_identifier = 2 [json_name = "virtual-circuit-identifier"];
                        uint32 site_id = 3 [json_name = "site-id"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Remote remote = 5 [json_name = "remote"];
               }
               repeated Endpoint endpoint = 1 [json_name = "endpoint"];
            }
            Endpoints endpoints = 4 [json_name = "endpoints"];
         }
         repeated ConnectionPoint connection_point = 1 [json_name = "connection-point"];
      }
      ConnectionPoints connection_points = 11 [json_name = "connection-points"];
      message Mpls {
         message Global {
            message Config {
               string null_label = 1 [json_name = "null-label"];
               bool ttl_propagation = 2 [json_name = "ttl-propagation"];
               string pw_encapsulation = 3 [json_name = "pw-encapsulation"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string null_label = 1 [json_name = "null-label"];
               bool ttl_propagation = 2 [json_name = "ttl-propagation"];
               string pw_encapsulation = 3 [json_name = "pw-encapsulation"];
            }
            State state = 2 [json_name = "state"];
            message InterfaceAttributes {
               message Interface {
                  string interface_id = 1 [json_name = "interface-id"];
                  message Config {
                     string interface_id = 1 [json_name = "interface-id"];
                     bool mpls_enabled = 2 [json_name = "mpls-enabled"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string interface_id = 1 [json_name = "interface-id"];
                     bool mpls_enabled = 2 [json_name = "mpls-enabled"];
                  }
                  State state = 3 [json_name = "state"];
                  message InterfaceRef {
                     message Config {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface = 2 [json_name = "subinterface"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
               }
               repeated Interface interface = 1 [json_name = "interface"];
            }
            InterfaceAttributes interface_attributes = 3 [json_name = "interface-attributes"];
            message ReservedLabelBlocks {
               message ReservedLabelBlock {
                  string local_id = 1 [json_name = "local-id"];
                  message Config {
                     string local_id = 1 [json_name = "local-id"];
                     string lower_bound = 2 [json_name = "lower-bound"];
                     string upper_bound = 3 [json_name = "upper-bound"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string local_id = 1 [json_name = "local-id"];
                     string lower_bound = 2 [json_name = "lower-bound"];
                     string upper_bound = 3 [json_name = "upper-bound"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated ReservedLabelBlock reserved_label_block = 1 [json_name = "reserved-label-block"];
            }
            ReservedLabelBlocks reserved_label_blocks = 4 [json_name = "reserved-label-blocks"];
         }
         Global global = 1 [json_name = "global"];
         message TeGlobalAttributes {
            message Srlgs {
               message Srlg {
                  string name = 1 [json_name = "name"];
                  message Config {
                     string name = 1 [json_name = "name"];
                     uint32 value = 2 [json_name = "value"];
                     uint32 cost = 3 [json_name = "cost"];
                     enum FloodingType {
                        FloodingType_FLOODED_SRLG = 0;
                        FloodingType_STATIC_SRLG = 1;
                     };
                     FloodingType flooding_type = 4 [json_name = "flooding-type"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                     uint32 value = 2 [json_name = "value"];
                     uint32 cost = 3 [json_name = "cost"];
                     enum FloodingType {
                        FloodingType_FLOODED_SRLG = 0;
                        FloodingType_STATIC_SRLG = 1;
                     };
                     FloodingType flooding_type = 4 [json_name = "flooding-type"];
                  }
                  State state = 3 [json_name = "state"];
                  message StaticSrlgMembers {
                     message MembersList {
                        string from_address = 1 [json_name = "from-address"];
                        message Config {
                           string from_address = 1 [json_name = "from-address"];
                           string to_address = 2 [json_name = "to-address"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string from_address = 1 [json_name = "from-address"];
                           string to_address = 2 [json_name = "to-address"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated MembersList members_list = 1 [json_name = "members-list"];
                  }
                  StaticSrlgMembers static_srlg_members = 4 [json_name = "static-srlg-members"];
               }
               repeated Srlg srlg = 1 [json_name = "srlg"];
            }
            Srlgs srlgs = 1 [json_name = "srlgs"];
            message MplsAdminGroups {
               message AdminGroup {
                  string admin_group_name = 1 [json_name = "admin-group-name"];
                  message Config {
                     string admin_group_name = 1 [json_name = "admin-group-name"];
                     uint32 bit_position = 2 [json_name = "bit-position"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string admin_group_name = 1 [json_name = "admin-group-name"];
                     uint32 bit_position = 2 [json_name = "bit-position"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated AdminGroup admin_group = 1 [json_name = "admin-group"];
            }
            MplsAdminGroups mpls_admin_groups = 2 [json_name = "mpls-admin-groups"];
            message TeLspTimers {
               message Config {
                  uint32 install_delay = 1 [json_name = "install-delay"];
                  uint32 cleanup_delay = 2 [json_name = "cleanup-delay"];
                  uint32 reoptimize_timer = 3 [json_name = "reoptimize-timer"];
               }
               Config config = 1 [json_name = "config"];
               message State {
                  uint32 install_delay = 1 [json_name = "install-delay"];
                  uint32 cleanup_delay = 2 [json_name = "cleanup-delay"];
                  uint32 reoptimize_timer = 3 [json_name = "reoptimize-timer"];
               }
               State state = 2 [json_name = "state"];
            }
            TeLspTimers te_lsp_timers = 3 [json_name = "te-lsp-timers"];
         }
         TeGlobalAttributes te_global_attributes = 2 [json_name = "te-global-attributes"];
         message TeInterfaceAttributes {
            message Interface {
               string interface_id = 1 [json_name = "interface-id"];
               message Config {
                  string interface_id = 1 [json_name = "interface-id"];
                  uint32 te_metric = 2 [json_name = "te-metric"];
                  repeated string srlg_membership = 3 [json_name = "srlg-membership"];
                  repeated string admin_group = 4 [json_name = "admin-group"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string interface_id = 1 [json_name = "interface-id"];
                  uint32 te_metric = 2 [json_name = "te-metric"];
                  repeated string srlg_membership = 3 [json_name = "srlg-membership"];
                  repeated string admin_group = 4 [json_name = "admin-group"];
               }
               State state = 3 [json_name = "state"];
               message InterfaceRef {
                  message Config {
                     string interface8 = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string interface8 = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  State state = 2 [json_name = "state"];
               }
               InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
               message IgpFloodingBandwidth {
                  message Config {
                     enum ThresholdType {
                        ThresholdType_DELTA = 0;
                        ThresholdType_THRESHOLD_CROSSED = 1;
                     };
                     ThresholdType threshold_type = 1 [json_name = "threshold-type"];
                     uint32 delta_percentage = 2 [json_name = "delta-percentage"];
                     enum ThresholdSpecification {
                        ThresholdSpecification_MIRRORED_UP_DOWN = 0;
                        ThresholdSpecification_SEPARATE_UP_DOWN = 1;
                     };
                     ThresholdSpecification threshold_specification = 3 [json_name = "threshold-specification"];
                     repeated uint32 up_thresholds = 4 [json_name = "up-thresholds"];
                     repeated uint32 down_thresholds = 5 [json_name = "down-thresholds"];
                     repeated uint32 up_down_thresholds = 6 [json_name = "up-down-thresholds"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum ThresholdType {
                        ThresholdType_DELTA = 0;
                        ThresholdType_THRESHOLD_CROSSED = 1;
                     };
                     ThresholdType threshold_type = 1 [json_name = "threshold-type"];
                     uint32 delta_percentage = 2 [json_name = "delta-percentage"];
                     enum ThresholdSpecification {
                        ThresholdSpecification_MIRRORED_UP_DOWN = 0;
                        ThresholdSpecification_SEPARATE_UP_DOWN = 1;
                     };
                     ThresholdSpecification threshold_specification = 3 [json_name = "threshold-specification"];
                     repeated uint32 up_thresholds = 4 [json_name = "up-thresholds"];
                     repeated uint32 down_thresholds = 5 [json_name = "down-thresholds"];
                     repeated uint32 up_down_thresholds = 6 [json_name = "up-down-thresholds"];
                  }
                  State state = 2 [json_name = "state"];
               }
               IgpFloodingBandwidth igp_flooding_bandwidth = 5 [json_name = "igp-flooding-bandwidth"];
            }
            repeated Interface interface = 1 [json_name = "interface"];
         }
         TeInterfaceAttributes te_interface_attributes = 3 [json_name = "te-interface-attributes"];
         message SignalingProtocols {
            message RsvpTe {
               message Sessions {
                  message Session {
                     uint64 local_index = 1 [json_name = "local-index"];
                     message RecordRouteObjects {
                        message RecordRouteObject {
                           uint32 index = 1 [json_name = "index"];
                           message State {
                              uint32 index = 1 [json_name = "index"];
                              string address = 2 [json_name = "address"];
                              string reported_label = 3 [json_name = "reported-label"];
                              uint32 reported_flags = 4 [json_name = "reported-flags"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        repeated RecordRouteObject record_route_object = 1 [json_name = "record-route-object"];
                     }
                     RecordRouteObjects record_route_objects = 2 [json_name = "record-route-objects"];
                     message ExplicitRouteObjects {
                        message ExplicitRouteObject {
                           uint64 index = 1 [json_name = "index"];
                           message State {
                              uint64 index = 1 [json_name = "index"];
                              bool loose = 2 [json_name = "loose"];
                              enum Type {
                                 Type_IPV4 = 0;
                                 Type_IPV6 = 1;
                                 Type_ASN = 2;
                                 Type_ASN4 = 3;
                                 Type_LABEL = 4;
                                 Type_UNNUMBERED_INTERFACE = 5;
                              };
                              Type type = 3 [json_name = "type"];
                              string ip_prefix = 4 [json_name = "ip-prefix"];
                              uint32 asn = 5 [json_name = "asn"];
                              string label = 6 [json_name = "label"];
                              uint32 interface_id = 7 [json_name = "interface-id"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        repeated ExplicitRouteObject explicit_route_object = 1 [json_name = "explicit-route-object"];
                     }
                     ExplicitRouteObjects explicit_route_objects = 3 [json_name = "explicit-route-objects"];
                     message State {
                        uint64 local_index = 1 [json_name = "local-index"];
                        string source_address = 2 [json_name = "source-address"];
                        string destination_address = 3 [json_name = "destination-address"];
                        uint32 tunnel_id = 4 [json_name = "tunnel-id"];
                        uint32 lsp_id = 5 [json_name = "lsp-id"];
                        string session_name = 6 [json_name = "session-name"];
                        enum Status {
                           Status_UP = 0;
                           Status_DOWN = 1;
                        };
                        Status status = 7 [json_name = "status"];
                        string type = 8 [json_name = "type"];
                        string protection_requested = 9 [json_name = "protection-requested"];
                        string label_in = 10 [json_name = "label-in"];
                        string label_out = 11 [json_name = "label-out"];
                        message SenderTspec {
                           bytes rate = 1 [json_name = "rate"];
                           bytes size = 2 [json_name = "size"];
                           string peak_data_rate = 3 [json_name = "peak-data-rate"];
                        }
                        SenderTspec sender_tspec = 12 [json_name = "sender-tspec"];
                     }
                     State state = 4 [json_name = "state"];
                  }
                  repeated Session session = 1 [json_name = "session"];
               }
               Sessions sessions = 1 [json_name = "sessions"];
               message Neighbors {
                  message Neighbor {
                     string address = 1 [json_name = "address"];
                     message State {
                        string address = 1 [json_name = "address"];
                        string detected_interface = 2 [json_name = "detected-interface"];
                        enum NeighborStatus {
                           NeighborStatus_UP = 0;
                           NeighborStatus_DOWN = 1;
                        };
                        NeighborStatus neighbor_status = 3 [json_name = "neighbor-status"];
                        bool refresh_reduction = 4 [json_name = "refresh-reduction"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
               message Global {
                  message GracefulRestart {
                     message Config {
                        bool enable = 1 [json_name = "enable"];
                        uint32 restart_time = 2 [json_name = "restart-time"];
                        uint32 recovery_time = 3 [json_name = "recovery-time"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enable = 1 [json_name = "enable"];
                        uint32 restart_time = 2 [json_name = "restart-time"];
                        uint32 recovery_time = 3 [json_name = "recovery-time"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  GracefulRestart graceful_restart = 1 [json_name = "graceful-restart"];
                  message SoftPreemption {
                     message Config {
                        bool enable = 1 [json_name = "enable"];
                        uint32 soft_preemption_timeout = 2 [json_name = "soft-preemption-timeout"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enable = 1 [json_name = "enable"];
                        uint32 soft_preemption_timeout = 2 [json_name = "soft-preemption-timeout"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  SoftPreemption soft_preemption = 2 [json_name = "soft-preemption"];
                  message Hellos {
                     message Config {
                        uint32 hello_interval = 1 [json_name = "hello-interval"];
                        bool refresh_reduction = 2 [json_name = "refresh-reduction"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 hello_interval = 1 [json_name = "hello-interval"];
                        bool refresh_reduction = 2 [json_name = "refresh-reduction"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Hellos hellos = 3 [json_name = "hellos"];
                  message State {
                     message Counters {
                        uint64 path_timeouts = 1 [json_name = "path-timeouts"];
                        uint64 reservation_timeouts = 2 [json_name = "reservation-timeouts"];
                        uint64 rate_limited_messages = 3 [json_name = "rate-limited-messages"];
                        uint64 in_path_messages = 4 [json_name = "in-path-messages"];
                        uint64 in_path_error_messages = 5 [json_name = "in-path-error-messages"];
                        uint64 in_path_tear_messages = 6 [json_name = "in-path-tear-messages"];
                        uint64 in_reservation_messages = 7 [json_name = "in-reservation-messages"];
                        uint64 in_reservation_error_messages = 8 [json_name = "in-reservation-error-messages"];
                        uint64 in_reservation_tear_messages = 9 [json_name = "in-reservation-tear-messages"];
                        uint64 in_hello_messages = 10 [json_name = "in-hello-messages"];
                        uint64 in_srefresh_messages = 11 [json_name = "in-srefresh-messages"];
                        uint64 in_ack_messages = 12 [json_name = "in-ack-messages"];
                        uint64 out_path_messages = 13 [json_name = "out-path-messages"];
                        uint64 out_path_error_messages = 14 [json_name = "out-path-error-messages"];
                        uint64 out_path_tear_messages = 15 [json_name = "out-path-tear-messages"];
                        uint64 out_reservation_messages = 16 [json_name = "out-reservation-messages"];
                        uint64 out_reservation_error_messages = 17 [json_name = "out-reservation-error-messages"];
                        uint64 out_reservation_tear_messages = 18 [json_name = "out-reservation-tear-messages"];
                        uint64 out_hello_messages = 19 [json_name = "out-hello-messages"];
                        uint64 out_srefresh_messages = 20 [json_name = "out-srefresh-messages"];
                        uint64 out_ack_messages = 21 [json_name = "out-ack-messages"];
                        message Errors {
                           uint64 authentication_fail = 1 [json_name = "authentication-fail"];
                           uint64 bad_checksum = 2 [json_name = "bad-checksum"];
                           uint64 bad_packet_format = 3 [json_name = "bad-packet-format"];
                           uint64 bad_packet_length = 4 [json_name = "bad-packet-length"];
                           uint64 out_of_order = 5 [json_name = "out-of-order"];
                           uint64 received_nack = 6 [json_name = "received-nack"];
                           uint64 transmit_failure = 7 [json_name = "transmit-failure"];
                           uint64 transmit_queue_full = 8 [json_name = "transmit-queue-full"];
                           uint64 unknown_ack = 9 [json_name = "unknown-ack"];
                           uint64 unknown_nack = 10 [json_name = "unknown-nack"];
                        }
                        Errors errors = 22 [json_name = "errors"];
                     }
                     Counters counters = 1 [json_name = "counters"];
                  }
                  State state = 4 [json_name = "state"];
               }
               Global global = 3 [json_name = "global"];
               message InterfaceAttributes {
                  message Interface {
                     string interface_id = 1 [json_name = "interface-id"];
                     message Config {
                        string interface_id = 1 [json_name = "interface-id"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        uint64 max_link_bandwidth = 1 [json_name = "max-link-bandwidth"];
                        string interface_id = 2 [json_name = "interface-id"];
                        message Counters {
                           uint64 in_path_messages = 1 [json_name = "in-path-messages"];
                           uint64 in_path_error_messages = 2 [json_name = "in-path-error-messages"];
                           uint64 in_path_tear_messages = 3 [json_name = "in-path-tear-messages"];
                           uint64 in_reservation_messages = 4 [json_name = "in-reservation-messages"];
                           uint64 in_reservation_error_messages = 5 [json_name = "in-reservation-error-messages"];
                           uint64 in_reservation_tear_messages = 6 [json_name = "in-reservation-tear-messages"];
                           uint64 in_hello_messages = 7 [json_name = "in-hello-messages"];
                           uint64 in_srefresh_messages = 8 [json_name = "in-srefresh-messages"];
                           uint64 in_ack_messages = 9 [json_name = "in-ack-messages"];
                           uint64 out_path_messages = 10 [json_name = "out-path-messages"];
                           uint64 out_path_error_messages = 11 [json_name = "out-path-error-messages"];
                           uint64 out_path_tear_messages = 12 [json_name = "out-path-tear-messages"];
                           uint64 out_reservation_messages = 13 [json_name = "out-reservation-messages"];
                           uint64 out_reservation_error_messages = 14 [json_name = "out-reservation-error-messages"];
                           uint64 out_reservation_tear_messages = 15 [json_name = "out-reservation-tear-messages"];
                           uint64 out_hello_messages = 16 [json_name = "out-hello-messages"];
                           uint64 out_srefresh_messages = 17 [json_name = "out-srefresh-messages"];
                           uint64 out_ack_messages = 18 [json_name = "out-ack-messages"];
                           uint64 rate_limited_messages = 19 [json_name = "rate-limited-messages"];
                           message Errors {
                              uint64 authentication_fail = 1 [json_name = "authentication-fail"];
                              uint64 bad_checksum = 2 [json_name = "bad-checksum"];
                              uint64 bad_packet_format = 3 [json_name = "bad-packet-format"];
                              uint64 bad_packet_length = 4 [json_name = "bad-packet-length"];
                              uint64 out_of_order = 5 [json_name = "out-of-order"];
                              uint64 received_nack = 6 [json_name = "received-nack"];
                              uint64 transmit_failure = 7 [json_name = "transmit-failure"];
                              uint64 transmit_queue_full = 8 [json_name = "transmit-queue-full"];
                              uint64 unknown_ack = 9 [json_name = "unknown-ack"];
                              uint64 unknown_nack = 10 [json_name = "unknown-nack"];
                           }
                           Errors errors = 20 [json_name = "errors"];
                        }
                        Counters counters = 3 [json_name = "counters"];
                     }
                     State state = 3 [json_name = "state"];
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
                     message BandwidthReservations {
                        message BandwidthReservation {
                           string priority = 1 [json_name = "priority"];
                           message State {
                              string priority = 1 [json_name = "priority"];
                              uint64 available_bandwidth = 2 [json_name = "available-bandwidth"];
                              uint64 reserved_bandwidth = 3 [json_name = "reserved-bandwidth"];
                              uint64 active_reservations_count = 4 [json_name = "active-reservations-count"];
                              uint64 highwater_mark = 5 [json_name = "highwater-mark"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        repeated BandwidthReservation bandwidth_reservation = 1 [json_name = "bandwidth-reservation"];
                     }
                     BandwidthReservations bandwidth_reservations = 5 [json_name = "bandwidth-reservations"];
                     message Hellos {
                        message Config {
                           uint32 hello_interval = 1 [json_name = "hello-interval"];
                           bool refresh_reduction = 2 [json_name = "refresh-reduction"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 hello_interval = 1 [json_name = "hello-interval"];
                           bool refresh_reduction = 2 [json_name = "refresh-reduction"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Hellos hellos = 6 [json_name = "hellos"];
                     message Authentication {
                        message Config {
                           bool enable = 1 [json_name = "enable"];
                           string authentication_key = 2 [json_name = "authentication-key"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enable = 1 [json_name = "enable"];
                           string authentication_key = 2 [json_name = "authentication-key"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Authentication authentication = 7 [json_name = "authentication"];
                     message Subscription {
                        message Config {
                           uint32 subscription10 = 1 [json_name = "subscription"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 subscription10 = 1 [json_name = "subscription"];
                           uint64 calculated_absolute_subscription_bw = 2 [json_name = "calculated-absolute-subscription-bw"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Subscription subscription = 8 [json_name = "subscription"];
                     message Protection {
                        message Config {
                           string link_protection_style_requested = 1 [json_name = "link-protection-style-requested"];
                           uint32 bypass_optimize_interval = 2 [json_name = "bypass-optimize-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string link_protection_style_requested = 1 [json_name = "link-protection-style-requested"];
                           uint32 bypass_optimize_interval = 2 [json_name = "bypass-optimize-interval"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Protection protection = 9 [json_name = "protection"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               InterfaceAttributes interface_attributes = 4 [json_name = "interface-attributes"];
            }
            RsvpTe rsvp_te = 1 [json_name = "rsvp-te"];
            message Ldp {
               message Global {
                  message Config {
                     string lsr_id = 1 [json_name = "lsr-id"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string lsr_id = 1 [json_name = "lsr-id"];
                  }
                  State state = 2 [json_name = "state"];
                  message GracefulRestart {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 reconnect_time = 2 [json_name = "reconnect-time"];
                        uint32 recovery_time = 3 [json_name = "recovery-time"];
                        uint32 forwarding_holdtime = 4 [json_name = "forwarding-holdtime"];
                        bool helper_enable = 5 [json_name = "helper-enable"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 reconnect_time = 2 [json_name = "reconnect-time"];
                        uint32 recovery_time = 3 [json_name = "recovery-time"];
                        uint32 forwarding_holdtime = 4 [json_name = "forwarding-holdtime"];
                        bool helper_enable = 5 [json_name = "helper-enable"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  GracefulRestart graceful_restart = 3 [json_name = "graceful-restart"];
                  message Authentication {
                     message Config {
                        bool enable = 1 [json_name = "enable"];
                        string authentication_key = 2 [json_name = "authentication-key"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enable = 1 [json_name = "enable"];
                        string authentication_key = 2 [json_name = "authentication-key"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Authentication authentication = 4 [json_name = "authentication"];
               }
               Global global = 1 [json_name = "global"];
               message InterfaceAttributes {
                  message Config {
                     uint32 hello_holdtime = 1 [json_name = "hello-holdtime"];
                     uint32 hello_interval = 2 [json_name = "hello-interval"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 hello_holdtime = 1 [json_name = "hello-holdtime"];
                     uint32 hello_interval = 2 [json_name = "hello-interval"];
                  }
                  State state = 2 [json_name = "state"];
                  message Interfaces {
                     message Interface {
                        string interface_id = 1 [json_name = "interface-id"];
                        message Config {
                           string interface_id = 1 [json_name = "interface-id"];
                           uint32 hello_holdtime = 2 [json_name = "hello-holdtime"];
                           uint32 hello_interval = 3 [json_name = "hello-interval"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string interface_id = 1 [json_name = "interface-id"];
                           uint32 hello_holdtime = 2 [json_name = "hello-holdtime"];
                           uint32 hello_interval = 3 [json_name = "hello-interval"];
                           message Counters {
                           }
                           Counters counters = 4 [json_name = "counters"];
                        }
                        State state = 3 [json_name = "state"];
                        message InterfaceRef {
                           message Config {
                              string interface11 = 1 [json_name = "interface"];
                              uint32 subinterface = 2 [json_name = "subinterface"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string interface11 = 1 [json_name = "interface"];
                              uint32 subinterface = 2 [json_name = "subinterface"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
                        message AddressFamilies {
                           message AddressFamily {
                              enum AfiName {
                                 AfiName_IPV4 = 0;
                                 AfiName_IPV6 = 1;
                              };
                              AfiName afi_name = 1 [json_name = "afi-name"];
                              message Config {
                                 enum AfiName {
                                    AfiName_IPV4 = 0;
                                    AfiName_IPV6 = 1;
                                 };
                                 AfiName afi_name = 1 [json_name = "afi-name"];
                                 bool enabled = 2 [json_name = "enabled"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 enum AfiName {
                                    AfiName_IPV4 = 0;
                                    AfiName_IPV6 = 1;
                                 };
                                 AfiName afi_name = 1 [json_name = "afi-name"];
                                 bool enabled = 2 [json_name = "enabled"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           repeated AddressFamily address_family = 1 [json_name = "address-family"];
                        }
                        AddressFamilies address_families = 5 [json_name = "address-families"];
                     }
                     repeated Interface interface = 1 [json_name = "interface"];
                  }
                  Interfaces interfaces = 3 [json_name = "interfaces"];
               }
               InterfaceAttributes interface_attributes = 2 [json_name = "interface-attributes"];
               message Targeted {
                  message Config {
                     uint32 hello_holdtime = 1 [json_name = "hello-holdtime"];
                     uint32 hello_interval = 2 [json_name = "hello-interval"];
                     bool hello_accept = 3 [json_name = "hello-accept"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 hello_holdtime = 1 [json_name = "hello-holdtime"];
                     uint32 hello_interval = 2 [json_name = "hello-interval"];
                     bool hello_accept = 3 [json_name = "hello-accept"];
                  }
                  State state = 2 [json_name = "state"];
                  message AddressFamilies {
                     message AddressFamily {
                        enum AfiName {
                           AfiName_IPV4 = 0;
                           AfiName_IPV6 = 1;
                        };
                        AfiName afi_name = 1 [json_name = "afi-name"];
                        message Config {
                           enum AfiName {
                              AfiName_IPV4 = 0;
                              AfiName_IPV6 = 1;
                           };
                           AfiName afi_name = 1 [json_name = "afi-name"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           enum AfiName {
                              AfiName_IPV4 = 0;
                              AfiName_IPV6 = 1;
                           };
                           AfiName afi_name = 1 [json_name = "afi-name"];
                        }
                        State state = 3 [json_name = "state"];
                        message Targets {
                           message Target {
                              string remote_address = 1 [json_name = "remote-address"];
                              message Config {
                                 string remote_address = 1 [json_name = "remote-address"];
                                 string local_address = 2 [json_name = "local-address"];
                                 bool enabled = 3 [json_name = "enabled"];
                                 uint32 hello_holdtime = 4 [json_name = "hello-holdtime"];
                                 uint32 hello_interval = 5 [json_name = "hello-interval"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 string remote_address = 1 [json_name = "remote-address"];
                                 string local_address = 2 [json_name = "local-address"];
                                 bool enabled = 3 [json_name = "enabled"];
                                 uint32 hello_holdtime = 4 [json_name = "hello-holdtime"];
                                 uint32 hello_interval = 5 [json_name = "hello-interval"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           repeated Target target = 1 [json_name = "target"];
                        }
                        Targets targets = 4 [json_name = "targets"];
                     }
                     repeated AddressFamily address_family = 1 [json_name = "address-family"];
                  }
                  AddressFamilies address_families = 3 [json_name = "address-families"];
               }
               Targeted targeted = 3 [json_name = "targeted"];
               message Neighbors {
                  message Neighbor {
                     string lsr_id = 1 [json_name = "lsr-id"];
                     uint32 label_space_id = 2 [json_name = "label-space-id"];
                     message Config {
                        string lsr_id = 1 [json_name = "lsr-id"];
                        uint32 label_space_id = 2 [json_name = "label-space-id"];
                     }
                     Config config = 3 [json_name = "config"];
                     message State {
                        string lsr_id = 1 [json_name = "lsr-id"];
                        uint32 label_space_id = 2 [json_name = "label-space-id"];
                     }
                     State state = 4 [json_name = "state"];
                     message HelloAdjacencies {
                        message HelloAdjacency {
                           string remote_address = 1 [json_name = "remote-address"];
                           string local_address = 2 [json_name = "local-address"];
                           message State {
                              string remote_address = 1 [json_name = "remote-address"];
                              string local_address = 2 [json_name = "local-address"];
                              enum AdjacencyType {
                                 AdjacencyType_LINK = 0;
                                 AdjacencyType_TARGETED = 1;
                              };
                              AdjacencyType adjacency_type = 3 [json_name = "adjacency-type"];
                              uint64 last_clear = 4 [json_name = "last-clear"];
                              uint64 hello_received = 5 [json_name = "hello-received"];
                              uint64 hello_dropped = 6 [json_name = "hello-dropped"];
                           }
                           State state = 3 [json_name = "state"];
                           message InterfaceRef {
                              message State {
                                 string interface = 1 [json_name = "interface"];
                                 uint32 subinterface = 2 [json_name = "subinterface"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
                           message HelloHoldtime {
                              message State {
                                 uint32 adjacent = 1 [json_name = "adjacent"];
                                 uint32 negotiated = 2 [json_name = "negotiated"];
                                 uint64 hello_expiration = 3 [json_name = "hello-expiration"];
                                 uint64 next_hello = 4 [json_name = "next-hello"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           HelloHoldtime hello_holdtime = 5 [json_name = "hello-holdtime"];
                        }
                        repeated HelloAdjacency hello_adjacency = 1 [json_name = "hello-adjacency"];
                     }
                     HelloAdjacencies hello_adjacencies = 5 [json_name = "hello-adjacencies"];
                     message Authentication {
                        message Config {
                           bool enable = 1 [json_name = "enable"];
                           string authentication_key = 2 [json_name = "authentication-key"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enable = 1 [json_name = "enable"];
                           string authentication_key = 2 [json_name = "authentication-key"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Authentication authentication = 6 [json_name = "authentication"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 4 [json_name = "neighbors"];
            }
            Ldp ldp = 2 [json_name = "ldp"];
            message SegmentRouting {
               message AggregateSidCounters {
                  message AggregateSidCounter {
                     string mpls_label = 1 [json_name = "mpls-label"];
                     message State {
                        string mpls_label = 1 [json_name = "mpls-label"];
                        uint64 in_pkts = 2 [json_name = "in-pkts"];
                        uint64 in_octets = 3 [json_name = "in-octets"];
                        uint64 out_pkts = 4 [json_name = "out-pkts"];
                        uint64 out_octets = 5 [json_name = "out-octets"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  repeated AggregateSidCounter aggregate_sid_counter = 1 [json_name = "aggregate-sid-counter"];
               }
               AggregateSidCounters aggregate_sid_counters = 1 [json_name = "aggregate-sid-counters"];
               message Interfaces {
                  message Interface {
                     string interface_id = 1 [json_name = "interface-id"];
                     message Config {
                        string interface_id = 1 [json_name = "interface-id"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string interface_id = 1 [json_name = "interface-id"];
                        uint64 in_pkts = 2 [json_name = "in-pkts"];
                        uint64 in_octets = 3 [json_name = "in-octets"];
                        uint64 out_pkts = 4 [json_name = "out-pkts"];
                        uint64 out_octets = 5 [json_name = "out-octets"];
                     }
                     State state = 3 [json_name = "state"];
                     message SidCounters {
                        message SidCounter {
                           string mpls_label = 1 [json_name = "mpls-label"];
                           message State {
                              string mpls_label = 1 [json_name = "mpls-label"];
                              uint64 in_pkts = 2 [json_name = "in-pkts"];
                              uint64 in_octets = 3 [json_name = "in-octets"];
                              uint64 out_pkts = 4 [json_name = "out-pkts"];
                              uint64 out_octets = 5 [json_name = "out-octets"];
                           }
                           State state = 2 [json_name = "state"];
                           message ForwardingClasses {
                              message ForwardingClass {
                                 uint32 exp = 1 [json_name = "exp"];
                                 message State {
                                    uint32 exp = 1 [json_name = "exp"];
                                    uint64 in_pkts = 2 [json_name = "in-pkts"];
                                    uint64 in_octets = 3 [json_name = "in-octets"];
                                    uint64 out_pkts = 4 [json_name = "out-pkts"];
                                    uint64 out_octets = 5 [json_name = "out-octets"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              repeated ForwardingClass forwarding_class = 1 [json_name = "forwarding-class"];
                           }
                           ForwardingClasses forwarding_classes = 3 [json_name = "forwarding-classes"];
                        }
                        repeated SidCounter sid_counter = 1 [json_name = "sid-counter"];
                     }
                     SidCounters sid_counters = 4 [json_name = "sid-counters"];
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 5 [json_name = "interface-ref"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
            }
            SegmentRouting segment_routing = 3 [json_name = "segment-routing"];
         }
         SignalingProtocols signaling_protocols = 4 [json_name = "signaling-protocols"];
         message Lsps {
            message ConstrainedPath {
               message NamedExplicitPaths {
                  message NamedExplicitPath {
                     string name = 1 [json_name = "name"];
                     message Config {
                        string name = 1 [json_name = "name"];
                        enum SidSelectionMode {
                           SidSelectionMode_ADJ_SID_ONLY = 0;
                           SidSelectionMode_MIXED_MODE = 1;
                        };
                        SidSelectionMode sid_selection_mode = 2 [json_name = "sid-selection-mode"];
                        bool sid_protection_required = 3 [json_name = "sid-protection-required"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string name = 1 [json_name = "name"];
                        enum SidSelectionMode {
                           SidSelectionMode_ADJ_SID_ONLY = 0;
                           SidSelectionMode_MIXED_MODE = 1;
                        };
                        SidSelectionMode sid_selection_mode = 2 [json_name = "sid-selection-mode"];
                        bool sid_protection_required = 3 [json_name = "sid-protection-required"];
                     }
                     State state = 3 [json_name = "state"];
                     message ExplicitRouteObjects {
                        message ExplicitRouteObject {
                           uint32 index = 1 [json_name = "index"];
                           message Config {
                              string address = 1 [json_name = "address"];
                              enum HopType {
                                 HopType_LOOSE = 0;
                                 HopType_STRICT = 1;
                              };
                              HopType hop_type = 2 [json_name = "hop-type"];
                              uint32 index = 3 [json_name = "index"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string address = 1 [json_name = "address"];
                              enum HopType {
                                 HopType_LOOSE = 0;
                                 HopType_STRICT = 1;
                              };
                              HopType hop_type = 2 [json_name = "hop-type"];
                              uint32 index = 3 [json_name = "index"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        repeated ExplicitRouteObject explicit_route_object = 1 [json_name = "explicit-route-object"];
                     }
                     ExplicitRouteObjects explicit_route_objects = 4 [json_name = "explicit-route-objects"];
                  }
                  repeated NamedExplicitPath named_explicit_path = 1 [json_name = "named-explicit-path"];
               }
               NamedExplicitPaths named_explicit_paths = 1 [json_name = "named-explicit-paths"];
               message Tunnels {
                  message Tunnel {
                     string name = 1 [json_name = "name"];
                     message Config {
                        string name = 1 [json_name = "name"];
                        string type = 2 [json_name = "type"];
                        string signaling_protocol = 3 [json_name = "signaling-protocol"];
                        string description = 4 [json_name = "description"];
                        string admin_status = 5 [json_name = "admin-status"];
                        uint32 preference = 6 [json_name = "preference"];
                        string metric_type = 7 [json_name = "metric-type"];
                        int32 metric = 8 [json_name = "metric"];
                        bool shortcut_eligible = 9 [json_name = "shortcut-eligible"];
                        string protection_style_requested = 10 [json_name = "protection-style-requested"];
                        uint32 reoptimize_timer = 11 [json_name = "reoptimize-timer"];
                        string source = 12 [json_name = "source"];
                        bool soft_preemption = 13 [json_name = "soft-preemption"];
                        uint32 setup_priority = 14 [json_name = "setup-priority"];
                        uint32 hold_priority = 15 [json_name = "hold-priority"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string name = 1 [json_name = "name"];
                        string type = 2 [json_name = "type"];
                        string signaling_protocol = 3 [json_name = "signaling-protocol"];
                        string description = 4 [json_name = "description"];
                        string admin_status = 5 [json_name = "admin-status"];
                        uint32 preference = 6 [json_name = "preference"];
                        string metric_type = 7 [json_name = "metric-type"];
                        int32 metric = 8 [json_name = "metric"];
                        bool shortcut_eligible = 9 [json_name = "shortcut-eligible"];
                        string protection_style_requested = 10 [json_name = "protection-style-requested"];
                        uint32 reoptimize_timer = 11 [json_name = "reoptimize-timer"];
                        string source = 12 [json_name = "source"];
                        bool soft_preemption = 13 [json_name = "soft-preemption"];
                        uint32 setup_priority = 14 [json_name = "setup-priority"];
                        uint32 hold_priority = 15 [json_name = "hold-priority"];
                        string oper_status = 16 [json_name = "oper-status"];
                        string role = 17 [json_name = "role"];
                        bool auto_generated = 18 [json_name = "auto-generated"];
                        message Counters {
                           uint64 bytes = 1 [json_name = "bytes"];
                           uint64 packets = 2 [json_name = "packets"];
                           uint64 path_changes = 3 [json_name = "path-changes"];
                           uint64 state_changes = 4 [json_name = "state-changes"];
                           uint64 online_time = 5 [json_name = "online-time"];
                           uint64 current_path_time = 6 [json_name = "current-path-time"];
                           uint64 next_reoptimization_time = 7 [json_name = "next-reoptimization-time"];
                        }
                        Counters counters = 19 [json_name = "counters"];
                     }
                     State state = 3 [json_name = "state"];
                     message Bandwidth {
                        message Config {
                           enum SpecificationType {
                              SpecificationType_SPECIFIED = 0;
                              SpecificationType_AUTO = 1;
                           };
                           SpecificationType specification_type = 1 [json_name = "specification-type"];
                           uint64 set_bandwidth = 2 [json_name = "set-bandwidth"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           enum SpecificationType {
                              SpecificationType_SPECIFIED = 0;
                              SpecificationType_AUTO = 1;
                           };
                           SpecificationType specification_type = 1 [json_name = "specification-type"];
                           uint64 set_bandwidth = 2 [json_name = "set-bandwidth"];
                           uint64 signaled_bandwidth = 3 [json_name = "signaled-bandwidth"];
                        }
                        State state = 2 [json_name = "state"];
                        message AutoBandwidth {
                           message Config {
                              bool enabled = 1 [json_name = "enabled"];
                              uint64 min_bw = 2 [json_name = "min-bw"];
                              uint64 max_bw = 3 [json_name = "max-bw"];
                              uint32 adjust_interval = 4 [json_name = "adjust-interval"];
                              uint32 adjust_threshold = 5 [json_name = "adjust-threshold"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool enabled = 1 [json_name = "enabled"];
                              uint64 min_bw = 2 [json_name = "min-bw"];
                              uint64 max_bw = 3 [json_name = "max-bw"];
                              uint32 adjust_interval = 4 [json_name = "adjust-interval"];
                              uint32 adjust_threshold = 5 [json_name = "adjust-threshold"];
                              uint64 interval_high_bw = 6 [json_name = "interval-high-bw"];
                           }
                           State state = 2 [json_name = "state"];
                           message Overflow {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                                 uint32 overflow_threshold = 2 [json_name = "overflow-threshold"];
                                 uint32 trigger_event_count = 3 [json_name = "trigger-event-count"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                                 uint32 overflow_threshold = 2 [json_name = "overflow-threshold"];
                                 uint32 trigger_event_count = 3 [json_name = "trigger-event-count"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Overflow overflow = 3 [json_name = "overflow"];
                           message Underflow {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                                 uint32 underflow_threshold = 2 [json_name = "underflow-threshold"];
                                 uint32 trigger_event_count = 3 [json_name = "trigger-event-count"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                                 uint32 underflow_threshold = 2 [json_name = "underflow-threshold"];
                                 uint32 trigger_event_count = 3 [json_name = "trigger-event-count"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Underflow underflow = 4 [json_name = "underflow"];
                        }
                        AutoBandwidth auto_bandwidth = 3 [json_name = "auto-bandwidth"];
                     }
                     Bandwidth bandwidth = 4 [json_name = "bandwidth"];
                     message P2PTunnelAttributes {
                        message Config {
                           string destination = 1 [json_name = "destination"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string destination = 1 [json_name = "destination"];
                        }
                        State state = 2 [json_name = "state"];
                        message P2PPrimaryPath {
                           message P2PPrimaryPath10 {
                              string name = 1 [json_name = "name"];
                              message Config {
                                 string name = 1 [json_name = "name"];
                                 string path_computation_method = 2 [json_name = "path-computation-method"];
                                 bool use_cspf = 3 [json_name = "use-cspf"];
                                 string path_computation_server = 4 [json_name = "path-computation-server"];
                                 enum CspfTiebreaker {
                                    CspfTiebreaker_RANDOM = 0;
                                    CspfTiebreaker_LEAST_FILL = 1;
                                    CspfTiebreaker_MOST_FILL = 2;
                                 };
                                 CspfTiebreaker cspf_tiebreaker = 5 [json_name = "cspf-tiebreaker"];
                                 string explicit_path_name = 6 [json_name = "explicit-path-name"];
                                 uint32 preference = 7 [json_name = "preference"];
                                 uint32 setup_priority = 8 [json_name = "setup-priority"];
                                 uint32 hold_priority = 9 [json_name = "hold-priority"];
                                 uint32 retry_timer = 10 [json_name = "retry-timer"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 string name = 1 [json_name = "name"];
                                 string path_computation_method = 2 [json_name = "path-computation-method"];
                                 bool use_cspf = 3 [json_name = "use-cspf"];
                                 enum CspfTiebreaker {
                                    CspfTiebreaker_RANDOM = 0;
                                    CspfTiebreaker_LEAST_FILL = 1;
                                    CspfTiebreaker_MOST_FILL = 2;
                                 };
                                 CspfTiebreaker cspf_tiebreaker = 4 [json_name = "cspf-tiebreaker"];
                                 string path_computation_server = 5 [json_name = "path-computation-server"];
                                 string explicit_path_name = 6 [json_name = "explicit-path-name"];
                                 uint32 preference = 7 [json_name = "preference"];
                                 uint32 setup_priority = 8 [json_name = "setup-priority"];
                                 uint32 hold_priority = 9 [json_name = "hold-priority"];
                                 uint32 retry_timer = 10 [json_name = "retry-timer"];
                                 repeated uint64 associated_rsvp_sessions = 11 [json_name = "associated-rsvp-sessions"];
                                 uint64 spf_metric = 12 [json_name = "spf-metric"];
                                 uint64 cspf_metric = 13 [json_name = "cspf-metric"];
                              }
                              State state = 3 [json_name = "state"];
                              message CandidateSecondaryPaths {
                                 message CandidateSecondaryPath {
                                    string secondary_path = 1 [json_name = "secondary-path"];
                                    message Config {
                                       string secondary_path = 1 [json_name = "secondary-path"];
                                       uint32 priority = 2 [json_name = "priority"];
                                    }
                                    Config config = 2 [json_name = "config"];
                                    message State {
                                       string secondary_path = 1 [json_name = "secondary-path"];
                                       uint32 priority = 2 [json_name = "priority"];
                                       bool active = 3 [json_name = "active"];
                                    }
                                    State state = 3 [json_name = "state"];
                                 }
                                 repeated CandidateSecondaryPath candidate_secondary_path = 1 [json_name = "candidate-secondary-path"];
                              }
                              CandidateSecondaryPaths candidate_secondary_paths = 4 [json_name = "candidate-secondary-paths"];
                              message AdminGroups {
                                 message Config {
                                    repeated string exclude_group = 1 [json_name = "exclude-group"];
                                    repeated string include_all_group = 2 [json_name = "include-all-group"];
                                    repeated string include_any_group = 3 [json_name = "include-any-group"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    repeated string exclude_group = 1 [json_name = "exclude-group"];
                                    repeated string include_all_group = 2 [json_name = "include-all-group"];
                                    repeated string include_any_group = 3 [json_name = "include-any-group"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              AdminGroups admin_groups = 5 [json_name = "admin-groups"];
                           }
                           repeated P2PPrimaryPath10 p2p_primary_path = 1 [json_name = "p2p-primary-path"];
                        }
                        P2PPrimaryPath p2p_primary_path = 3 [json_name = "p2p-primary-path"];
                        message P2PSecondaryPaths {
                           message P2PSecondaryPath {
                              string name = 1 [json_name = "name"];
                              message Config {
                                 string name = 1 [json_name = "name"];
                                 string path_computation_method = 2 [json_name = "path-computation-method"];
                                 bool use_cspf = 3 [json_name = "use-cspf"];
                                 enum CspfTiebreaker {
                                    CspfTiebreaker_RANDOM = 0;
                                    CspfTiebreaker_LEAST_FILL = 1;
                                    CspfTiebreaker_MOST_FILL = 2;
                                 };
                                 CspfTiebreaker cspf_tiebreaker = 4 [json_name = "cspf-tiebreaker"];
                                 string path_computation_server = 5 [json_name = "path-computation-server"];
                                 string explicit_path_name = 6 [json_name = "explicit-path-name"];
                                 uint32 preference = 7 [json_name = "preference"];
                                 uint32 setup_priority = 8 [json_name = "setup-priority"];
                                 uint32 hold_priority = 9 [json_name = "hold-priority"];
                                 uint32 retry_timer = 10 [json_name = "retry-timer"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 string name = 1 [json_name = "name"];
                                 string path_computation_method = 2 [json_name = "path-computation-method"];
                                 bool use_cspf = 3 [json_name = "use-cspf"];
                                 enum CspfTiebreaker {
                                    CspfTiebreaker_RANDOM = 0;
                                    CspfTiebreaker_LEAST_FILL = 1;
                                    CspfTiebreaker_MOST_FILL = 2;
                                 };
                                 CspfTiebreaker cspf_tiebreaker = 4 [json_name = "cspf-tiebreaker"];
                                 string path_computation_server = 5 [json_name = "path-computation-server"];
                                 string explicit_path_name = 6 [json_name = "explicit-path-name"];
                                 uint32 preference = 7 [json_name = "preference"];
                                 uint32 setup_priority = 8 [json_name = "setup-priority"];
                                 uint32 hold_priority = 9 [json_name = "hold-priority"];
                                 uint32 retry_timer = 10 [json_name = "retry-timer"];
                                 repeated uint64 associated_rsvp_sessions = 11 [json_name = "associated-rsvp-sessions"];
                                 uint64 spf_metric = 12 [json_name = "spf-metric"];
                                 uint64 cspf_metric = 13 [json_name = "cspf-metric"];
                              }
                              State state = 3 [json_name = "state"];
                              message AdminGroups {
                                 message Config {
                                    repeated string exclude_group = 1 [json_name = "exclude-group"];
                                    repeated string include_all_group = 2 [json_name = "include-all-group"];
                                    repeated string include_any_group = 3 [json_name = "include-any-group"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    repeated string exclude_group = 1 [json_name = "exclude-group"];
                                    repeated string include_all_group = 2 [json_name = "include-all-group"];
                                    repeated string include_any_group = 3 [json_name = "include-any-group"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              AdminGroups admin_groups = 4 [json_name = "admin-groups"];
                           }
                           repeated P2PSecondaryPath p2p_secondary_path = 1 [json_name = "p2p-secondary-path"];
                        }
                        P2PSecondaryPaths p2p_secondary_paths = 4 [json_name = "p2p-secondary-paths"];
                     }
                     P2PTunnelAttributes p2p_tunnel_attributes = 5 [json_name = "p2p-tunnel-attributes"];
                  }
                  repeated Tunnel tunnel = 1 [json_name = "tunnel"];
               }
               Tunnels tunnels = 2 [json_name = "tunnels"];
            }
            ConstrainedPath constrained_path = 1 [json_name = "constrained-path"];
            message UnconstrainedPath {
               message PathSetupProtocol {
                  message Ldp {
                  }
                  Ldp ldp = 1 [json_name = "ldp"];
               }
               PathSetupProtocol path_setup_protocol = 1 [json_name = "path-setup-protocol"];
            }
            UnconstrainedPath unconstrained_path = 2 [json_name = "unconstrained-path"];
            message StaticLsps {
               message StaticLsp {
                  string name = 1 [json_name = "name"];
                  message Config {
                     string name = 1 [json_name = "name"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string name = 1 [json_name = "name"];
                  }
                  State state = 3 [json_name = "state"];
                  message Ingress {
                     message Config {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ingress ingress = 4 [json_name = "ingress"];
                  message Transit {
                     message Config {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Transit transit = 5 [json_name = "transit"];
                  message Egress {
                     message Config {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string next_hop = 1 [json_name = "next-hop"];
                        string incoming_label = 2 [json_name = "incoming-label"];
                        string push_label = 3 [json_name = "push-label"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Egress egress = 6 [json_name = "egress"];
               }
               repeated StaticLsp static_lsp = 1 [json_name = "static-lsp"];
            }
            StaticLsps static_lsps = 3 [json_name = "static-lsps"];
         }
         Lsps lsps = 5 [json_name = "lsps"];
      }
      Mpls mpls = 12 [json_name = "mpls"];
      message SegmentRouting {
         message Srgbs {
            message Srgb {
               string local_id = 1 [json_name = "local-id"];
               message Config {
                  string local_id = 1 [json_name = "local-id"];
                  enum DataplaneType {
                     DataplaneType_MPLS = 0;
                     DataplaneType_IPV6 = 1;
                  };
                  DataplaneType dataplane_type = 2 [json_name = "dataplane-type"];
                  repeated string mpls_label_blocks = 3 [json_name = "mpls-label-blocks"];
                  repeated string ipv6_prefixes = 4 [json_name = "ipv6-prefixes"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string local_id = 1 [json_name = "local-id"];
                  enum DataplaneType {
                     DataplaneType_MPLS = 0;
                     DataplaneType_IPV6 = 1;
                  };
                  DataplaneType dataplane_type = 2 [json_name = "dataplane-type"];
                  repeated string mpls_label_blocks = 3 [json_name = "mpls-label-blocks"];
                  repeated string ipv6_prefixes = 4 [json_name = "ipv6-prefixes"];
                  uint32 size = 5 [json_name = "size"];
                  uint32 used = 6 [json_name = "used"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Srgb srgb = 1 [json_name = "srgb"];
         }
         Srgbs srgbs = 1 [json_name = "srgbs"];
         message Srlbs {
            message Srlb {
               string local_id = 1 [json_name = "local-id"];
               message Config {
                  string local_id = 1 [json_name = "local-id"];
                  enum DataplaneType {
                     DataplaneType_MPLS = 0;
                     DataplaneType_IPV6 = 1;
                  };
                  DataplaneType dataplane_type = 2 [json_name = "dataplane-type"];
                  string mpls_label_block = 3 [json_name = "mpls-label-block"];
                  string ipv6_prefix = 4 [json_name = "ipv6-prefix"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string local_id = 1 [json_name = "local-id"];
                  enum DataplaneType {
                     DataplaneType_MPLS = 0;
                     DataplaneType_IPV6 = 1;
                  };
                  DataplaneType dataplane_type = 2 [json_name = "dataplane-type"];
                  string mpls_label_block = 3 [json_name = "mpls-label-block"];
                  string ipv6_prefix = 4 [json_name = "ipv6-prefix"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Srlb srlb = 1 [json_name = "srlb"];
         }
         Srlbs srlbs = 2 [json_name = "srlbs"];
      }
      SegmentRouting segment_routing = 13 [json_name = "segment-routing"];
      message Vlans {
         message Vlan {
            uint32 vlan_id = 1 [json_name = "vlan-id"];
            message Config {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
               string name = 2 [json_name = "name"];
               enum Status {
                  Status_ACTIVE = 0;
                  Status_SUSPENDED = 1;
               };
               Status status = 3 [json_name = "status"];
            }
            Config config = 2 [json_name = "config"];
            message State {
               uint32 vlan_id = 1 [json_name = "vlan-id"];
               string name = 2 [json_name = "name"];
               enum Status {
                  Status_ACTIVE = 0;
                  Status_SUSPENDED = 1;
               };
               Status status = 3 [json_name = "status"];
            }
            State state = 3 [json_name = "state"];
            message Members {
               message Member {
                  message State {
                     string interface = 1 [json_name = "interface"];
                  }
                  State state = 1 [json_name = "state"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 4 [json_name = "members"];
         }
         repeated Vlan vlan = 1 [json_name = "vlan"];
      }
      Vlans vlans = 14 [json_name = "vlans"];
      message PolicyForwarding {
         message Policies {
            message Policy {
               string policy_id = 1 [json_name = "policy-id"];
               message Config {
                  string policy_id = 1 [json_name = "policy-id"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string policy_id = 1 [json_name = "policy-id"];
               }
               State state = 3 [json_name = "state"];
               message Rules {
                  message Rule {
                     uint32 sequence_id = 1 [json_name = "sequence-id"];
                     message Config {
                        uint32 sequence_id = 1 [json_name = "sequence-id"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        uint32 sequence_id = 1 [json_name = "sequence-id"];
                        uint64 matched_pkts = 2 [json_name = "matched-pkts"];
                        uint64 matched_octets = 3 [json_name = "matched-octets"];
                     }
                     State state = 3 [json_name = "state"];
                     message L2 {
                        message Config {
                           string source_mac = 1 [json_name = "source-mac"];
                           string source_mac_mask = 2 [json_name = "source-mac-mask"];
                           string destination_mac = 3 [json_name = "destination-mac"];
                           string destination_mac_mask = 4 [json_name = "destination-mac-mask"];
                           string ethertype = 5 [json_name = "ethertype"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string source_mac = 1 [json_name = "source-mac"];
                           string source_mac_mask = 2 [json_name = "source-mac-mask"];
                           string destination_mac = 3 [json_name = "destination-mac"];
                           string destination_mac_mask = 4 [json_name = "destination-mac-mask"];
                           string ethertype = 5 [json_name = "ethertype"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     L2 l2 = 4 [json_name = "l2"];
                     message Ipv4 {
                        message Config {
                           string source_address = 1 [json_name = "source-address"];
                           string destination_address = 2 [json_name = "destination-address"];
                           uint32 dscp = 3 [json_name = "dscp"];
                           string protocol = 4 [json_name = "protocol"];
                           uint32 hop_limit = 5 [json_name = "hop-limit"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string source_address = 1 [json_name = "source-address"];
                           string destination_address = 2 [json_name = "destination-address"];
                           uint32 dscp = 3 [json_name = "dscp"];
                           string protocol = 4 [json_name = "protocol"];
                           uint32 hop_limit = 5 [json_name = "hop-limit"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Ipv4 ipv4 = 5 [json_name = "ipv4"];
                     message Ipv6 {
                        message Config {
                           string source_address = 1 [json_name = "source-address"];
                           uint32 source_flow_label = 2 [json_name = "source-flow-label"];
                           string destination_address = 3 [json_name = "destination-address"];
                           uint32 destination_flow_label = 4 [json_name = "destination-flow-label"];
                           uint32 dscp = 5 [json_name = "dscp"];
                           string protocol = 6 [json_name = "protocol"];
                           uint32 hop_limit = 7 [json_name = "hop-limit"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string source_address = 1 [json_name = "source-address"];
                           uint32 source_flow_label = 2 [json_name = "source-flow-label"];
                           string destination_address = 3 [json_name = "destination-address"];
                           uint32 destination_flow_label = 4 [json_name = "destination-flow-label"];
                           uint32 dscp = 5 [json_name = "dscp"];
                           string protocol = 6 [json_name = "protocol"];
                           uint32 hop_limit = 7 [json_name = "hop-limit"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Ipv6 ipv6 = 6 [json_name = "ipv6"];
                     message Transport {
                        message Config {
                           string source_port = 1 [json_name = "source-port"];
                           string destination_port = 2 [json_name = "destination-port"];
                           repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string source_port = 1 [json_name = "source-port"];
                           string destination_port = 2 [json_name = "destination-port"];
                           repeated string tcp_flags = 3 [json_name = "tcp-flags"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Transport transport = 7 [json_name = "transport"];
                     message Action {
                        message Config {
                           bool discard = 1 [json_name = "discard"];
                           bool decapsulate_gre = 2 [json_name = "decapsulate-gre"];
                           string network_instance = 3 [json_name = "network-instance"];
                           string path_selection_group = 4 [json_name = "path-selection-group"];
                           string next_hop = 5 [json_name = "next-hop"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool discard = 1 [json_name = "discard"];
                           bool decapsulate_gre = 2 [json_name = "decapsulate-gre"];
                           string network_instance = 3 [json_name = "network-instance"];
                           string path_selection_group = 4 [json_name = "path-selection-group"];
                           string next_hop = 5 [json_name = "next-hop"];
                        }
                        State state = 2 [json_name = "state"];
                        message EncapsulateGre {
                           message Config {
                              string identifying_prefix = 1 [json_name = "identifying-prefix"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string identifying_prefix = 1 [json_name = "identifying-prefix"];
                           }
                           State state = 2 [json_name = "state"];
                           message Targets {
                              message Target {
                                 string id = 1 [json_name = "id"];
                                 message Config {
                                    string id = 1 [json_name = "id"];
                                    string source = 2 [json_name = "source"];
                                    string destination = 3 [json_name = "destination"];
                                    uint32 ip_ttl = 4 [json_name = "ip-ttl"];
                                 }
                                 Config config = 2 [json_name = "config"];
                                 message State {
                                    string id = 1 [json_name = "id"];
                                    string source = 2 [json_name = "source"];
                                    string destination = 3 [json_name = "destination"];
                                    uint32 ip_ttl = 4 [json_name = "ip-ttl"];
                                 }
                                 State state = 3 [json_name = "state"];
                              }
                              repeated Target target = 1 [json_name = "target"];
                           }
                           Targets targets = 3 [json_name = "targets"];
                        }
                        EncapsulateGre encapsulate_gre = 3 [json_name = "encapsulate-gre"];
                     }
                     Action action = 8 [json_name = "action"];
                  }
                  repeated Rule rule = 1 [json_name = "rule"];
               }
               Rules rules = 4 [json_name = "rules"];
            }
            repeated Policy policy = 1 [json_name = "policy"];
         }
         Policies policies = 1 [json_name = "policies"];
         message Interfaces {
            message Interface {
               string interface_id = 1 [json_name = "interface-id"];
               message Config {
                  string interface_id = 1 [json_name = "interface-id"];
                  string apply_forwarding_policy = 2 [json_name = "apply-forwarding-policy"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string interface_id = 1 [json_name = "interface-id"];
                  string apply_forwarding_policy = 2 [json_name = "apply-forwarding-policy"];
               }
               State state = 3 [json_name = "state"];
               message InterfaceRef {
                  message Config {
                     string interface8 = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string interface8 = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  State state = 2 [json_name = "state"];
               }
               InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
            }
            repeated Interface interface = 1 [json_name = "interface"];
         }
         Interfaces interfaces = 2 [json_name = "interfaces"];
         message PathSelectionGroups {
            message PathSelectionGroup {
               string group_id = 1 [json_name = "group-id"];
               message Config {
                  string group_id = 1 [json_name = "group-id"];
                  repeated string mpls_lsp = 2 [json_name = "mpls-lsp"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string group_id = 1 [json_name = "group-id"];
                  repeated string mpls_lsp = 2 [json_name = "mpls-lsp"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated PathSelectionGroup path_selection_group = 1 [json_name = "path-selection-group"];
         }
         PathSelectionGroups path_selection_groups = 3 [json_name = "path-selection-groups"];
      }
      PolicyForwarding policy_forwarding = 15 [json_name = "policy-forwarding"];
      message Afts {
         message Ipv4Unicast {
            message Ipv4Entry {
               string prefix = 1 [json_name = "prefix"];
               message Config {
                  string prefix = 1 [json_name = "prefix"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string prefix = 1 [json_name = "prefix"];
                  uint64 packets_forwarded = 2 [json_name = "packets-forwarded"];
                  uint64 octets_forwarded = 3 [json_name = "octets-forwarded"];
                  uint64 next_hop_group = 4 [json_name = "next-hop-group"];
                  string origin_protocol = 5 [json_name = "origin-protocol"];
                  string lsp_name = 6 [json_name = "lsp-name"];
                  enum DecapsulateHeader {
                     DecapsulateHeader_GRE = 0;
                     DecapsulateHeader_IPV4 = 1;
                     DecapsulateHeader_IPV6 = 2;
                     DecapsulateHeader_MPLS = 3;
                  };
                  DecapsulateHeader decapsulate_header = 7 [json_name = "decapsulate-header"];
                  string origin_network_instance = 8 [json_name = "origin-network-instance"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Ipv4Entry ipv4_entry = 1 [json_name = "ipv4-entry"];
         }
         Ipv4Unicast ipv4_unicast = 1 [json_name = "ipv4-unicast"];
         message Ipv6Unicast {
            message Ipv6Entry {
               string prefix = 1 [json_name = "prefix"];
               message Config {
                  string prefix = 1 [json_name = "prefix"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string prefix = 1 [json_name = "prefix"];
                  uint64 packets_forwarded = 2 [json_name = "packets-forwarded"];
                  uint64 octets_forwarded = 3 [json_name = "octets-forwarded"];
                  uint64 next_hop_group = 4 [json_name = "next-hop-group"];
                  string origin_protocol = 5 [json_name = "origin-protocol"];
                  string lsp_name = 6 [json_name = "lsp-name"];
                  enum DecapsulateHeader {
                     DecapsulateHeader_GRE = 0;
                     DecapsulateHeader_IPV4 = 1;
                     DecapsulateHeader_IPV6 = 2;
                     DecapsulateHeader_MPLS = 3;
                  };
                  DecapsulateHeader decapsulate_header = 7 [json_name = "decapsulate-header"];
                  string origin_network_instance = 8 [json_name = "origin-network-instance"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated Ipv6Entry ipv6_entry = 1 [json_name = "ipv6-entry"];
         }
         Ipv6Unicast ipv6_unicast = 2 [json_name = "ipv6-unicast"];
         message PolicyForwarding {
            message PolicyForwardingEntry {
               uint64 index = 1 [json_name = "index"];
               message Config {
                  uint64 index = 1 [json_name = "index"];
                  string ip_prefix = 2 [json_name = "ip-prefix"];
                  string mac_address = 3 [json_name = "mac-address"];
                  string mpls_label = 4 [json_name = "mpls-label"];
                  uint32 mpls_tc = 5 [json_name = "mpls-tc"];
                  uint32 ip_dscp = 6 [json_name = "ip-dscp"];
                  string ip_protocol = 7 [json_name = "ip-protocol"];
                  uint32 l4_src_port = 8 [json_name = "l4-src-port"];
                  uint32 l4_dst_port = 9 [json_name = "l4-dst-port"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  uint64 index = 1 [json_name = "index"];
                  string ip_prefix = 2 [json_name = "ip-prefix"];
                  string mac_address = 3 [json_name = "mac-address"];
                  string mpls_label = 4 [json_name = "mpls-label"];
                  uint32 mpls_tc = 5 [json_name = "mpls-tc"];
                  uint32 ip_dscp = 6 [json_name = "ip-dscp"];
                  string ip_protocol = 7 [json_name = "ip-protocol"];
                  uint32 l4_src_port = 8 [json_name = "l4-src-port"];
                  uint32 l4_dst_port = 9 [json_name = "l4-dst-port"];
                  uint64 packets_forwarded = 10 [json_name = "packets-forwarded"];
                  uint64 octets_forwarded = 11 [json_name = "octets-forwarded"];
                  uint64 next_hop_group = 12 [json_name = "next-hop-group"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated PolicyForwardingEntry policy_forwarding_entry = 1 [json_name = "policy-forwarding-entry"];
         }
         PolicyForwarding policy_forwarding = 3 [json_name = "policy-forwarding"];
         message Mpls {
            message LabelEntry {
               string label = 1 [json_name = "label"];
               message Config {
                  string label = 1 [json_name = "label"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string label = 1 [json_name = "label"];
                  uint64 packets_forwarded = 2 [json_name = "packets-forwarded"];
                  uint64 octets_forwarded = 3 [json_name = "octets-forwarded"];
                  uint64 next_hop_group = 4 [json_name = "next-hop-group"];
                  repeated string popped_mpls_label_stack = 5 [json_name = "popped-mpls-label-stack"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated LabelEntry label_entry = 1 [json_name = "label-entry"];
         }
         Mpls mpls = 4 [json_name = "mpls"];
         message Ethernet {
            message MacEntry {
               string mac_address = 1 [json_name = "mac-address"];
               message Config {
                  string mac_address = 1 [json_name = "mac-address"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string mac_address = 1 [json_name = "mac-address"];
                  uint64 packets_forwarded = 2 [json_name = "packets-forwarded"];
                  uint64 octets_forwarded = 3 [json_name = "octets-forwarded"];
                  uint64 next_hop_group = 4 [json_name = "next-hop-group"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated MacEntry mac_entry = 1 [json_name = "mac-entry"];
         }
         Ethernet ethernet = 5 [json_name = "ethernet"];
         message NextHopGroups {
            message NextHopGroup {
               uint64 id = 1 [json_name = "id"];
               message Config {
                  uint64 id = 1 [json_name = "id"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  uint64 id = 1 [json_name = "id"];
                  uint64 color = 2 [json_name = "color"];
                  uint64 backup_next_hop_group = 3 [json_name = "backup-next-hop-group"];
               }
               State state = 3 [json_name = "state"];
               message NextHops {
                  message NextHop {
                     uint64 index = 1 [json_name = "index"];
                     message Config {
                        uint64 index = 1 [json_name = "index"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        uint64 index = 1 [json_name = "index"];
                        uint64 weight = 2 [json_name = "weight"];
                     }
                     State state = 3 [json_name = "state"];
                  }
                  repeated NextHop next_hop = 1 [json_name = "next-hop"];
               }
               NextHops next_hops = 4 [json_name = "next-hops"];
               message Conditional {
                  message Condition {
                     uint64 id = 1 [json_name = "id"];
                     message Config {
                        uint64 id = 1 [json_name = "id"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        uint64 id = 1 [json_name = "id"];
                        repeated uint32 dscp = 2 [json_name = "dscp"];
                        uint64 next_hop_group = 3 [json_name = "next-hop-group"];
                     }
                     State state = 3 [json_name = "state"];
                     message InputInterfaces {
                        message InputInterface {
                           string id = 1 [json_name = "id"];
                           message Config {
                              string id = 1 [json_name = "id"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string id = 1 [json_name = "id"];
                              string interface = 2 [json_name = "interface"];
                              uint32 subinterface = 3 [json_name = "subinterface"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        repeated InputInterface input_interface = 1 [json_name = "input-interface"];
                     }
                     InputInterfaces input_interfaces = 4 [json_name = "input-interfaces"];
                  }
                  repeated Condition condition = 1 [json_name = "condition"];
               }
               Conditional conditional = 5 [json_name = "conditional"];
            }
            repeated NextHopGroup next_hop_group = 1 [json_name = "next-hop-group"];
         }
         NextHopGroups next_hop_groups = 6 [json_name = "next-hop-groups"];
         message NextHops {
            message NextHop {
               uint64 index = 1 [json_name = "index"];
               message Config {
                  uint64 index = 1 [json_name = "index"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  uint64 index = 1 [json_name = "index"];
                  string ip_address = 2 [json_name = "ip-address"];
                  string mac_address = 3 [json_name = "mac-address"];
                  repeated string pushed_mpls_label_stack = 4 [json_name = "pushed-mpls-label-stack"];
                  enum EncapsulateHeader {
                     EncapsulateHeader_GRE = 0;
                     EncapsulateHeader_IPV4 = 1;
                     EncapsulateHeader_IPV6 = 2;
                     EncapsulateHeader_MPLS = 3;
                  };
                  EncapsulateHeader encapsulate_header = 5 [json_name = "encapsulate-header"];
                  string origin_protocol = 6 [json_name = "origin-protocol"];
                  string lsp_name = 7 [json_name = "lsp-name"];
               }
               State state = 3 [json_name = "state"];
               message InterfaceRef {
                  message Config {
                     string interface = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string interface = 1 [json_name = "interface"];
                     uint32 subinterface = 2 [json_name = "subinterface"];
                  }
                  State state = 2 [json_name = "state"];
               }
               InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
            }
            repeated NextHop next_hop = 1 [json_name = "next-hop"];
         }
         NextHops next_hops = 7 [json_name = "next-hops"];
      }
      Afts afts = 16 [json_name = "afts"];
      message Protocols {
         message Protocol {
            string identifier = 1 [json_name = "identifier"];
            string name = 2 [json_name = "name"];
            message Config {
               string identifier = 1 [json_name = "identifier"];
               string name = 2 [json_name = "name"];
               bool enabled = 3 [json_name = "enabled"];
               uint32 default_metric = 4 [json_name = "default-metric"];
            }
            Config config = 3 [json_name = "config"];
            message State {
               string identifier = 1 [json_name = "identifier"];
               string name = 2 [json_name = "name"];
               bool enabled = 3 [json_name = "enabled"];
               uint32 default_metric = 4 [json_name = "default-metric"];
            }
            State state = 4 [json_name = "state"];
            message StaticRoutes {
               message Static {
                  string prefix = 1 [json_name = "prefix"];
                  message Config {
                     string prefix = 1 [json_name = "prefix"];
                     string set_tag = 2 [json_name = "set-tag"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string prefix = 1 [json_name = "prefix"];
                     string set_tag = 2 [json_name = "set-tag"];
                  }
                  State state = 3 [json_name = "state"];
                  message NextHops {
                     message NextHop {
                        string index = 1 [json_name = "index"];
                        message Config {
                           string index = 1 [json_name = "index"];
                           string next_hop = 2 [json_name = "next-hop"];
                           uint32 metric = 3 [json_name = "metric"];
                           bool recurse = 4 [json_name = "recurse"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string index = 1 [json_name = "index"];
                           string next_hop = 2 [json_name = "next-hop"];
                           uint32 metric = 3 [json_name = "metric"];
                           bool recurse = 4 [json_name = "recurse"];
                        }
                        State state = 3 [json_name = "state"];
                        message InterfaceRef {
                           message Config {
                              string interface = 1 [json_name = "interface"];
                              uint32 subinterface = 2 [json_name = "subinterface"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string interface = 1 [json_name = "interface"];
                              uint32 subinterface = 2 [json_name = "subinterface"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
                     }
                     repeated NextHop next_hop = 1 [json_name = "next-hop"];
                  }
                  NextHops next_hops = 4 [json_name = "next-hops"];
               }
               repeated Static static = 1 [json_name = "static"];
            }
            StaticRoutes static_routes = 5 [json_name = "static-routes"];
            message LocalAggregates {
               message Aggregate {
                  string prefix = 1 [json_name = "prefix"];
                  message Config {
                     string prefix = 1 [json_name = "prefix"];
                     bool discard = 2 [json_name = "discard"];
                     string set_tag = 3 [json_name = "set-tag"];
                  }
                  Config config = 2 [json_name = "config"];
                  message State {
                     string prefix = 1 [json_name = "prefix"];
                     bool discard = 2 [json_name = "discard"];
                     string set_tag = 3 [json_name = "set-tag"];
                  }
                  State state = 3 [json_name = "state"];
               }
               repeated Aggregate aggregate = 1 [json_name = "aggregate"];
            }
            LocalAggregates local_aggregates = 6 [json_name = "local-aggregates"];
            message Bgp {
               message Global {
                  message Config {
                     uint32 as = 1 [json_name = "as"];
                     string router_id = 2 [json_name = "router-id"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 as = 1 [json_name = "as"];
                     string router_id = 2 [json_name = "router-id"];
                     uint32 total_paths = 3 [json_name = "total-paths"];
                     uint32 total_prefixes = 4 [json_name = "total-prefixes"];
                  }
                  State state = 2 [json_name = "state"];
                  message DefaultRouteDistance {
                     message Config {
                        uint32 external_route_distance = 1 [json_name = "external-route-distance"];
                        uint32 internal_route_distance = 2 [json_name = "internal-route-distance"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 external_route_distance = 1 [json_name = "external-route-distance"];
                        uint32 internal_route_distance = 2 [json_name = "internal-route-distance"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  DefaultRouteDistance default_route_distance = 3 [json_name = "default-route-distance"];
                  message Confederation {
                     message Config {
                        uint32 identifier = 1 [json_name = "identifier"];
                        repeated uint32 member_as = 2 [json_name = "member-as"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 identifier = 1 [json_name = "identifier"];
                        repeated uint32 member_as = 2 [json_name = "member-as"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Confederation confederation = 4 [json_name = "confederation"];
                  message GracefulRestart {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 restart_time = 2 [json_name = "restart-time"];
                        Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                        bool helper_only = 4 [json_name = "helper-only"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 restart_time = 2 [json_name = "restart-time"];
                        Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                        bool helper_only = 4 [json_name = "helper-only"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  GracefulRestart graceful_restart = 5 [json_name = "graceful-restart"];
                  message UseMultiplePaths {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                     }
                     State state = 2 [json_name = "state"];
                     message Ebgp {
                        message Config {
                           bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                           uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                           uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Ebgp ebgp = 3 [json_name = "ebgp"];
                     message Ibgp {
                        message Config {
                           uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Ibgp ibgp = 4 [json_name = "ibgp"];
                  }
                  UseMultiplePaths use_multiple_paths = 6 [json_name = "use-multiple-paths"];
                  message RouteSelectionOptions {
                     message Config {
                        bool always_compare_med = 1 [json_name = "always-compare-med"];
                        bool ignore_as_path_length = 2 [json_name = "ignore-as-path-length"];
                        bool external_compare_router_id = 3 [json_name = "external-compare-router-id"];
                        bool advertise_inactive_routes = 4 [json_name = "advertise-inactive-routes"];
                        bool enable_aigp = 5 [json_name = "enable-aigp"];
                        bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool always_compare_med = 1 [json_name = "always-compare-med"];
                        bool ignore_as_path_length = 2 [json_name = "ignore-as-path-length"];
                        bool external_compare_router_id = 3 [json_name = "external-compare-router-id"];
                        bool advertise_inactive_routes = 4 [json_name = "advertise-inactive-routes"];
                        bool enable_aigp = 5 [json_name = "enable-aigp"];
                        bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  RouteSelectionOptions route_selection_options = 7 [json_name = "route-selection-options"];
                  message AfiSafis {
                     message AfiSafi {
                        string afi_safi_name = 1 [json_name = "afi-safi-name"];
                        message Config {
                           string afi_safi_name = 1 [json_name = "afi-safi-name"];
                           bool enabled = 2 [json_name = "enabled"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string afi_safi_name = 1 [json_name = "afi-safi-name"];
                           bool enabled = 2 [json_name = "enabled"];
                           uint32 total_paths = 3 [json_name = "total-paths"];
                           uint32 total_prefixes = 4 [json_name = "total-prefixes"];
                        }
                        State state = 3 [json_name = "state"];
                        message GracefulRestart {
                           message Config {
                              bool enabled = 1 [json_name = "enabled"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool enabled = 1 [json_name = "enabled"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        GracefulRestart graceful_restart = 4 [json_name = "graceful-restart"];
                        message RouteSelectionOptions {
                           message Config {
                              bool always_compare_med = 1 [json_name = "always-compare-med"];
                              bool ignore_as_path_length = 2 [json_name = "ignore-as-path-length"];
                              bool external_compare_router_id = 3 [json_name = "external-compare-router-id"];
                              bool advertise_inactive_routes = 4 [json_name = "advertise-inactive-routes"];
                              bool enable_aigp = 5 [json_name = "enable-aigp"];
                              bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool always_compare_med = 1 [json_name = "always-compare-med"];
                              bool ignore_as_path_length = 2 [json_name = "ignore-as-path-length"];
                              bool external_compare_router_id = 3 [json_name = "external-compare-router-id"];
                              bool advertise_inactive_routes = 4 [json_name = "advertise-inactive-routes"];
                              bool enable_aigp = 5 [json_name = "enable-aigp"];
                              bool ignore_next_hop_igp_metric = 6 [json_name = "ignore-next-hop-igp-metric"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        RouteSelectionOptions route_selection_options = 5 [json_name = "route-selection-options"];
                        message UseMultiplePaths {
                           message Config {
                              bool enabled = 1 [json_name = "enabled"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool enabled = 1 [json_name = "enabled"];
                           }
                           State state = 2 [json_name = "state"];
                           message Ebgp {
                              message Config {
                                 bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                 uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                 uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Ebgp ebgp = 3 [json_name = "ebgp"];
                           message Ibgp {
                              message Config {
                                 uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Ibgp ibgp = 4 [json_name = "ibgp"];
                        }
                        UseMultiplePaths use_multiple_paths = 6 [json_name = "use-multiple-paths"];
                        message AddPaths {
                           message Config {
                              bool receive = 1 [json_name = "receive"];
                              bool send = 2 [json_name = "send"];
                              uint32 send_max = 3 [json_name = "send-max"];
                              string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool receive = 1 [json_name = "receive"];
                              bool send = 2 [json_name = "send"];
                              uint32 send_max = 3 [json_name = "send-max"];
                              string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        AddPaths add_paths = 7 [json_name = "add-paths"];
                        message Ipv4Unicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           message Config {
                              bool send_default_route = 1 [json_name = "send-default-route"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              bool send_default_route = 1 [json_name = "send-default-route"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        Ipv4Unicast ipv4_unicast = 8 [json_name = "ipv4-unicast"];
                        message Ipv6Unicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           message Config {
                              bool send_default_route = 1 [json_name = "send-default-route"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              bool send_default_route = 1 [json_name = "send-default-route"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        Ipv6Unicast ipv6_unicast = 9 [json_name = "ipv6-unicast"];
                        message Ipv4LabeledUnicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        Ipv4LabeledUnicast ipv4_labeled_unicast = 10 [json_name = "ipv4-labeled-unicast"];
                        message Ipv6LabeledUnicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        Ipv6LabeledUnicast ipv6_labeled_unicast = 11 [json_name = "ipv6-labeled-unicast"];
                        message L3VpnIpv4Unicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L3VpnIpv4Unicast l3vpn_ipv4_unicast = 12 [json_name = "l3vpn-ipv4-unicast"];
                        message L3VpnIpv6Unicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L3VpnIpv6Unicast l3vpn_ipv6_unicast = 13 [json_name = "l3vpn-ipv6-unicast"];
                        message L3VpnIpv4Multicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L3VpnIpv4Multicast l3vpn_ipv4_multicast = 14 [json_name = "l3vpn-ipv4-multicast"];
                        message L3VpnIpv6Multicast {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L3VpnIpv6Multicast l3vpn_ipv6_multicast = 15 [json_name = "l3vpn-ipv6-multicast"];
                        message L2VpnVpls {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L2VpnVpls l2vpn_vpls = 16 [json_name = "l2vpn-vpls"];
                        message L2VpnEvpn {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        L2VpnEvpn l2vpn_evpn = 17 [json_name = "l2vpn-evpn"];
                        message SrtePolicyIpv4 {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        SrtePolicyIpv4 srte_policy_ipv4 = 18 [json_name = "srte-policy-ipv4"];
                        message SrtePolicyIpv6 {
                           message PrefixLimit {
                              message Config {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                 bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                 uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                 Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                        }
                        SrtePolicyIpv6 srte_policy_ipv6 = 19 [json_name = "srte-policy-ipv6"];
                     }
                     repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
                  }
                  AfiSafis afi_safis = 8 [json_name = "afi-safis"];
                  message DynamicNeighborPrefixes {
                     message DynamicNeighborPrefix {
                        string prefix = 1 [json_name = "prefix"];
                        message Config {
                           string prefix = 1 [json_name = "prefix"];
                           string peer_group = 2 [json_name = "peer-group"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string prefix = 1 [json_name = "prefix"];
                           string peer_group = 2 [json_name = "peer-group"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated DynamicNeighborPrefix dynamic_neighbor_prefix = 1 [json_name = "dynamic-neighbor-prefix"];
                  }
                  DynamicNeighborPrefixes dynamic_neighbor_prefixes = 9 [json_name = "dynamic-neighbor-prefixes"];
               }
               Global global = 1 [json_name = "global"];
               message Neighbors {
                  message Neighbor {
                     string neighbor_address = 1 [json_name = "neighbor-address"];
                     message Config {
                        string peer_group = 1 [json_name = "peer-group"];
                        string neighbor_address = 2 [json_name = "neighbor-address"];
                        bool enabled = 3 [json_name = "enabled"];
                        uint32 peer_as = 4 [json_name = "peer-as"];
                        uint32 local_as = 5 [json_name = "local-as"];
                        enum PeerType {
                           PeerType_INTERNAL = 0;
                           PeerType_EXTERNAL = 1;
                        };
                        PeerType peer_type = 6 [json_name = "peer-type"];
                        string auth_password = 7 [json_name = "auth-password"];
                        string remove_private_as = 8 [json_name = "remove-private-as"];
                        bool route_flap_damping = 9 [json_name = "route-flap-damping"];
                        enum SendCommunity {
                           SendCommunity_STANDARD = 0;
                           SendCommunity_EXTENDED = 1;
                           SendCommunity_BOTH = 2;
                           SendCommunity_NONE = 3;
                        };
                        SendCommunity send_community = 10 [json_name = "send-community"];
                        string description = 11 [json_name = "description"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string peer_group = 1 [json_name = "peer-group"];
                        string neighbor_address = 2 [json_name = "neighbor-address"];
                        bool enabled = 3 [json_name = "enabled"];
                        uint32 peer_as = 4 [json_name = "peer-as"];
                        uint32 local_as = 5 [json_name = "local-as"];
                        enum PeerType {
                           PeerType_INTERNAL = 0;
                           PeerType_EXTERNAL = 1;
                        };
                        PeerType peer_type = 6 [json_name = "peer-type"];
                        string auth_password = 7 [json_name = "auth-password"];
                        string remove_private_as = 8 [json_name = "remove-private-as"];
                        bool route_flap_damping = 9 [json_name = "route-flap-damping"];
                        enum SendCommunity {
                           SendCommunity_STANDARD = 0;
                           SendCommunity_EXTENDED = 1;
                           SendCommunity_BOTH = 2;
                           SendCommunity_NONE = 3;
                        };
                        SendCommunity send_community = 10 [json_name = "send-community"];
                        string description = 11 [json_name = "description"];
                        enum SessionState {
                           SessionState_IDLE = 0;
                           SessionState_CONNECT = 1;
                           SessionState_ACTIVE = 2;
                           SessionState_OPENSENT = 3;
                           SessionState_OPENCONFIRM = 4;
                           SessionState_ESTABLISHED = 5;
                        };
                        SessionState session_state = 12 [json_name = "session-state"];
                        uint64 last_established = 13 [json_name = "last-established"];
                        uint64 established_transitions = 14 [json_name = "established-transitions"];
                        repeated string supported_capabilities = 15 [json_name = "supported-capabilities"];
                        message Messages {
                           message Sent {
                              uint64 UPDATE = 1 [json_name = "UPDATE"];
                              uint64 NOTIFICATION = 2 [json_name = "NOTIFICATION"];
                              uint64 last_notification_time = 3 [json_name = "last-notification-time"];
                              string last_notification_error_code = 4 [json_name = "last-notification-error-code"];
                              string last_notification_error_subcode = 5 [json_name = "last-notification-error-subcode"];
                           }
                           Sent sent = 1 [json_name = "sent"];
                           message Received {
                              uint64 UPDATE = 1 [json_name = "UPDATE"];
                              uint64 NOTIFICATION = 2 [json_name = "NOTIFICATION"];
                              uint64 last_notification_time = 3 [json_name = "last-notification-time"];
                              string last_notification_error_code = 4 [json_name = "last-notification-error-code"];
                              string last_notification_error_subcode = 5 [json_name = "last-notification-error-subcode"];
                           }
                           Received received = 2 [json_name = "received"];
                        }
                        Messages messages = 16 [json_name = "messages"];
                        message Queues {
                           uint32 input = 1 [json_name = "input"];
                           uint32 output = 2 [json_name = "output"];
                        }
                        Queues queues = 17 [json_name = "queues"];
                        bool dynamically_configured = 18 [json_name = "dynamically-configured"];
                     }
                     State state = 3 [json_name = "state"];
                     message Timers {
                        message Config {
                           Decimal64 connect_retry = 1 [json_name = "connect-retry"];
                           Decimal64 hold_time = 2 [json_name = "hold-time"];
                           Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
                           Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           Decimal64 connect_retry = 1 [json_name = "connect-retry"];
                           Decimal64 hold_time = 2 [json_name = "hold-time"];
                           Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
                           Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
                           Decimal64 negotiated_hold_time = 5 [json_name = "negotiated-hold-time"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Timers timers = 4 [json_name = "timers"];
                     message Transport {
                        message Config {
                           uint32 tcp_mss = 1 [json_name = "tcp-mss"];
                           bool mtu_discovery = 2 [json_name = "mtu-discovery"];
                           bool passive_mode = 3 [json_name = "passive-mode"];
                           string local_address = 4 [json_name = "local-address"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 tcp_mss = 1 [json_name = "tcp-mss"];
                           bool mtu_discovery = 2 [json_name = "mtu-discovery"];
                           bool passive_mode = 3 [json_name = "passive-mode"];
                           string local_address = 4 [json_name = "local-address"];
                           uint32 local_port = 5 [json_name = "local-port"];
                           string remote_address = 6 [json_name = "remote-address"];
                           uint32 remote_port = 7 [json_name = "remote-port"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Transport transport = 5 [json_name = "transport"];
                     message ErrorHandling {
                        message Config {
                           bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
                           uint32 erroneous_update_messages = 2 [json_name = "erroneous-update-messages"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     ErrorHandling error_handling = 6 [json_name = "error-handling"];
                     message GracefulRestart {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 restart_time = 2 [json_name = "restart-time"];
                           Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                           bool helper_only = 4 [json_name = "helper-only"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 restart_time = 2 [json_name = "restart-time"];
                           Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                           bool helper_only = 4 [json_name = "helper-only"];
                           uint32 peer_restart_time = 5 [json_name = "peer-restart-time"];
                           bool peer_restarting = 6 [json_name = "peer-restarting"];
                           bool local_restarting = 7 [json_name = "local-restarting"];
                           enum Mode {
                              Mode_HELPER_ONLY = 0;
                              Mode_BILATERAL = 1;
                              Mode_REMOTE_HELPER = 2;
                           };
                           Mode mode = 8 [json_name = "mode"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     GracefulRestart graceful_restart = 7 [json_name = "graceful-restart"];
                     message LoggingOptions {
                        message Config {
                           bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     LoggingOptions logging_options = 8 [json_name = "logging-options"];
                     message EbgpMultihop {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     EbgpMultihop ebgp_multihop = 9 [json_name = "ebgp-multihop"];
                     message RouteReflector {
                        message Config {
                           string route_reflector_cluster_id = 1 [json_name = "route-reflector-cluster-id"];
                           bool route_reflector_client = 2 [json_name = "route-reflector-client"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string route_reflector_cluster_id = 1 [json_name = "route-reflector-cluster-id"];
                           bool route_reflector_client = 2 [json_name = "route-reflector-client"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     RouteReflector route_reflector = 10 [json_name = "route-reflector"];
                     message AsPathOptions {
                        message Config {
                           uint32 allow_own_as = 1 [json_name = "allow-own-as"];
                           bool replace_peer_as = 2 [json_name = "replace-peer-as"];
                           bool disable_peer_as_filter = 3 [json_name = "disable-peer-as-filter"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 allow_own_as = 1 [json_name = "allow-own-as"];
                           bool replace_peer_as = 2 [json_name = "replace-peer-as"];
                           bool disable_peer_as_filter = 3 [json_name = "disable-peer-as-filter"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     AsPathOptions as_path_options = 11 [json_name = "as-path-options"];
                     message UseMultiplePaths {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        State state = 2 [json_name = "state"];
                        message Ebgp {
                           message Config {
                              bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Ebgp ebgp = 3 [json_name = "ebgp"];
                     }
                     UseMultiplePaths use_multiple_paths = 12 [json_name = "use-multiple-paths"];
                     message ApplyPolicy {
                        message Config {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                           repeated string export_policy = 3 [json_name = "export-policy"];
                           enum DefaultExportPolicy {
                              DefaultExportPolicy_ACCEPT_ROUTE = 0;
                              DefaultExportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                           repeated string export_policy = 3 [json_name = "export-policy"];
                           enum DefaultExportPolicy {
                              DefaultExportPolicy_ACCEPT_ROUTE = 0;
                              DefaultExportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     ApplyPolicy apply_policy = 13 [json_name = "apply-policy"];
                     message AfiSafis {
                        message AfiSafi {
                           string afi_safi_name = 1 [json_name = "afi-safi-name"];
                           message Config {
                              string afi_safi_name = 1 [json_name = "afi-safi-name"];
                              bool enabled = 2 [json_name = "enabled"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string afi_safi_name = 1 [json_name = "afi-safi-name"];
                              bool enabled = 2 [json_name = "enabled"];
                              bool active = 3 [json_name = "active"];
                              message Prefixes {
                                 uint32 received = 1 [json_name = "received"];
                                 uint32 received_pre_policy = 2 [json_name = "received-pre-policy"];
                                 uint32 sent = 3 [json_name = "sent"];
                                 uint32 installed = 4 [json_name = "installed"];
                              }
                              Prefixes prefixes = 4 [json_name = "prefixes"];
                           }
                           State state = 3 [json_name = "state"];
                           message GracefulRestart {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                                 bool received = 2 [json_name = "received"];
                                 bool advertised = 3 [json_name = "advertised"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           GracefulRestart graceful_restart = 4 [json_name = "graceful-restart"];
                           message AddPaths {
                              message Config {
                                 bool receive = 1 [json_name = "receive"];
                                 bool send = 2 [json_name = "send"];
                                 uint32 send_max = 3 [json_name = "send-max"];
                                 string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool receive = 1 [json_name = "receive"];
                                 bool send = 2 [json_name = "send"];
                                 uint32 send_max = 3 [json_name = "send-max"];
                                 string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           AddPaths add_paths = 5 [json_name = "add-paths"];
                           message ApplyPolicy {
                              message Config {
                                 repeated string import_policy = 1 [json_name = "import-policy"];
                                 enum DefaultImportPolicy {
                                    DefaultImportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultImportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                                 repeated string export_policy = 3 [json_name = "export-policy"];
                                 enum DefaultExportPolicy {
                                    DefaultExportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultExportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 repeated string import_policy = 1 [json_name = "import-policy"];
                                 enum DefaultImportPolicy {
                                    DefaultImportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultImportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                                 repeated string export_policy = 3 [json_name = "export-policy"];
                                 enum DefaultExportPolicy {
                                    DefaultExportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultExportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           ApplyPolicy apply_policy = 6 [json_name = "apply-policy"];
                           message Ipv4Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                              message Config {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           Ipv4Unicast ipv4_unicast = 7 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                              message Config {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           Ipv6Unicast ipv6_unicast = 8 [json_name = "ipv6-unicast"];
                           message Ipv4LabeledUnicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           Ipv4LabeledUnicast ipv4_labeled_unicast = 9 [json_name = "ipv4-labeled-unicast"];
                           message Ipv6LabeledUnicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           Ipv6LabeledUnicast ipv6_labeled_unicast = 10 [json_name = "ipv6-labeled-unicast"];
                           message L3VpnIpv4Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv4Unicast l3vpn_ipv4_unicast = 11 [json_name = "l3vpn-ipv4-unicast"];
                           message L3VpnIpv6Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv6Unicast l3vpn_ipv6_unicast = 12 [json_name = "l3vpn-ipv6-unicast"];
                           message L3VpnIpv4Multicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv4Multicast l3vpn_ipv4_multicast = 13 [json_name = "l3vpn-ipv4-multicast"];
                           message L3VpnIpv6Multicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv6Multicast l3vpn_ipv6_multicast = 14 [json_name = "l3vpn-ipv6-multicast"];
                           message L2VpnVpls {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L2VpnVpls l2vpn_vpls = 15 [json_name = "l2vpn-vpls"];
                           message L2VpnEvpn {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L2VpnEvpn l2vpn_evpn = 16 [json_name = "l2vpn-evpn"];
                           message SrtePolicyIpv4 {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           SrtePolicyIpv4 srte_policy_ipv4 = 17 [json_name = "srte-policy-ipv4"];
                           message SrtePolicyIpv6 {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           SrtePolicyIpv6 srte_policy_ipv6 = 18 [json_name = "srte-policy-ipv6"];
                           message UseMultiplePaths {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              State state = 2 [json_name = "state"];
                              message Ebgp {
                                 message Config {
                                    bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              Ebgp ebgp = 3 [json_name = "ebgp"];
                           }
                           UseMultiplePaths use_multiple_paths = 19 [json_name = "use-multiple-paths"];
                        }
                        repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
                     }
                     AfiSafis afi_safis = 14 [json_name = "afi-safis"];
                     message EnableBfd {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     EnableBfd enable_bfd = 15 [json_name = "enable-bfd"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 2 [json_name = "neighbors"];
               message PeerGroups {
                  message PeerGroup {
                     string peer_group_name = 1 [json_name = "peer-group-name"];
                     message Config {
                        string peer_group_name = 1 [json_name = "peer-group-name"];
                        uint32 peer_as = 2 [json_name = "peer-as"];
                        uint32 local_as = 3 [json_name = "local-as"];
                        enum PeerType {
                           PeerType_INTERNAL = 0;
                           PeerType_EXTERNAL = 1;
                        };
                        PeerType peer_type = 4 [json_name = "peer-type"];
                        string auth_password = 5 [json_name = "auth-password"];
                        string remove_private_as = 6 [json_name = "remove-private-as"];
                        bool route_flap_damping = 7 [json_name = "route-flap-damping"];
                        enum SendCommunity {
                           SendCommunity_STANDARD = 0;
                           SendCommunity_EXTENDED = 1;
                           SendCommunity_BOTH = 2;
                           SendCommunity_NONE = 3;
                        };
                        SendCommunity send_community = 8 [json_name = "send-community"];
                        string description = 9 [json_name = "description"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string peer_group_name = 1 [json_name = "peer-group-name"];
                        uint32 peer_as = 2 [json_name = "peer-as"];
                        uint32 local_as = 3 [json_name = "local-as"];
                        enum PeerType {
                           PeerType_INTERNAL = 0;
                           PeerType_EXTERNAL = 1;
                        };
                        PeerType peer_type = 4 [json_name = "peer-type"];
                        string auth_password = 5 [json_name = "auth-password"];
                        string remove_private_as = 6 [json_name = "remove-private-as"];
                        bool route_flap_damping = 7 [json_name = "route-flap-damping"];
                        enum SendCommunity {
                           SendCommunity_STANDARD = 0;
                           SendCommunity_EXTENDED = 1;
                           SendCommunity_BOTH = 2;
                           SendCommunity_NONE = 3;
                        };
                        SendCommunity send_community = 8 [json_name = "send-community"];
                        string description = 9 [json_name = "description"];
                        uint32 total_paths = 10 [json_name = "total-paths"];
                        uint32 total_prefixes = 11 [json_name = "total-prefixes"];
                     }
                     State state = 3 [json_name = "state"];
                     message Timers {
                        message Config {
                           Decimal64 connect_retry = 1 [json_name = "connect-retry"];
                           Decimal64 hold_time = 2 [json_name = "hold-time"];
                           Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
                           Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           Decimal64 connect_retry = 1 [json_name = "connect-retry"];
                           Decimal64 hold_time = 2 [json_name = "hold-time"];
                           Decimal64 keepalive_interval = 3 [json_name = "keepalive-interval"];
                           Decimal64 minimum_advertisement_interval = 4 [json_name = "minimum-advertisement-interval"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Timers timers = 4 [json_name = "timers"];
                     message Transport {
                        message Config {
                           uint32 tcp_mss = 1 [json_name = "tcp-mss"];
                           bool mtu_discovery = 2 [json_name = "mtu-discovery"];
                           bool passive_mode = 3 [json_name = "passive-mode"];
                           string local_address = 4 [json_name = "local-address"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 tcp_mss = 1 [json_name = "tcp-mss"];
                           bool mtu_discovery = 2 [json_name = "mtu-discovery"];
                           bool passive_mode = 3 [json_name = "passive-mode"];
                           string local_address = 4 [json_name = "local-address"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Transport transport = 5 [json_name = "transport"];
                     message ErrorHandling {
                        message Config {
                           bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool treat_as_withdraw = 1 [json_name = "treat-as-withdraw"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     ErrorHandling error_handling = 6 [json_name = "error-handling"];
                     message GracefulRestart {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 restart_time = 2 [json_name = "restart-time"];
                           Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                           bool helper_only = 4 [json_name = "helper-only"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 restart_time = 2 [json_name = "restart-time"];
                           Decimal64 stale_routes_time = 3 [json_name = "stale-routes-time"];
                           bool helper_only = 4 [json_name = "helper-only"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     GracefulRestart graceful_restart = 7 [json_name = "graceful-restart"];
                     message LoggingOptions {
                        message Config {
                           bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool log_neighbor_state_changes = 1 [json_name = "log-neighbor-state-changes"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     LoggingOptions logging_options = 8 [json_name = "logging-options"];
                     message EbgpMultihop {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 multihop_ttl = 2 [json_name = "multihop-ttl"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     EbgpMultihop ebgp_multihop = 9 [json_name = "ebgp-multihop"];
                     message RouteReflector {
                        message Config {
                           string route_reflector_cluster_id = 1 [json_name = "route-reflector-cluster-id"];
                           bool route_reflector_client = 2 [json_name = "route-reflector-client"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string route_reflector_cluster_id = 1 [json_name = "route-reflector-cluster-id"];
                           bool route_reflector_client = 2 [json_name = "route-reflector-client"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     RouteReflector route_reflector = 10 [json_name = "route-reflector"];
                     message AsPathOptions {
                        message Config {
                           uint32 allow_own_as = 1 [json_name = "allow-own-as"];
                           bool replace_peer_as = 2 [json_name = "replace-peer-as"];
                           bool disable_peer_as_filter = 3 [json_name = "disable-peer-as-filter"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 allow_own_as = 1 [json_name = "allow-own-as"];
                           bool replace_peer_as = 2 [json_name = "replace-peer-as"];
                           bool disable_peer_as_filter = 3 [json_name = "disable-peer-as-filter"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     AsPathOptions as_path_options = 11 [json_name = "as-path-options"];
                     message UseMultiplePaths {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        State state = 2 [json_name = "state"];
                        message Ebgp {
                           message Config {
                              bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                              uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                              uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Ebgp ebgp = 3 [json_name = "ebgp"];
                        message Ibgp {
                           message Config {
                              uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Ibgp ibgp = 4 [json_name = "ibgp"];
                     }
                     UseMultiplePaths use_multiple_paths = 12 [json_name = "use-multiple-paths"];
                     message ApplyPolicy {
                        message Config {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                           repeated string export_policy = 3 [json_name = "export-policy"];
                           enum DefaultExportPolicy {
                              DefaultExportPolicy_ACCEPT_ROUTE = 0;
                              DefaultExportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                           repeated string export_policy = 3 [json_name = "export-policy"];
                           enum DefaultExportPolicy {
                              DefaultExportPolicy_ACCEPT_ROUTE = 0;
                              DefaultExportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     ApplyPolicy apply_policy = 13 [json_name = "apply-policy"];
                     message AfiSafis {
                        message AfiSafi {
                           string afi_safi_name = 1 [json_name = "afi-safi-name"];
                           message Config {
                              string afi_safi_name = 1 [json_name = "afi-safi-name"];
                              bool enabled = 2 [json_name = "enabled"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string afi_safi_name = 1 [json_name = "afi-safi-name"];
                              bool enabled = 2 [json_name = "enabled"];
                           }
                           State state = 3 [json_name = "state"];
                           message GracefulRestart {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           GracefulRestart graceful_restart = 4 [json_name = "graceful-restart"];
                           message AddPaths {
                              message Config {
                                 bool receive = 1 [json_name = "receive"];
                                 bool send = 2 [json_name = "send"];
                                 uint32 send_max = 3 [json_name = "send-max"];
                                 string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool receive = 1 [json_name = "receive"];
                                 bool send = 2 [json_name = "send"];
                                 uint32 send_max = 3 [json_name = "send-max"];
                                 string eligible_prefix_policy = 4 [json_name = "eligible-prefix-policy"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           AddPaths add_paths = 5 [json_name = "add-paths"];
                           message UseMultiplePaths {
                              message Config {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool enabled = 1 [json_name = "enabled"];
                              }
                              State state = 2 [json_name = "state"];
                              message Ebgp {
                                 message Config {
                                    bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                    uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    bool allow_multiple_as = 1 [json_name = "allow-multiple-as"];
                                    uint32 maximum_paths = 2 [json_name = "maximum-paths"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              Ebgp ebgp = 3 [json_name = "ebgp"];
                              message Ibgp {
                                 message Config {
                                    uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 maximum_paths = 1 [json_name = "maximum-paths"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              Ibgp ibgp = 4 [json_name = "ibgp"];
                           }
                           UseMultiplePaths use_multiple_paths = 6 [json_name = "use-multiple-paths"];
                           message ApplyPolicy {
                              message Config {
                                 repeated string import_policy = 1 [json_name = "import-policy"];
                                 enum DefaultImportPolicy {
                                    DefaultImportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultImportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                                 repeated string export_policy = 3 [json_name = "export-policy"];
                                 enum DefaultExportPolicy {
                                    DefaultExportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultExportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 repeated string import_policy = 1 [json_name = "import-policy"];
                                 enum DefaultImportPolicy {
                                    DefaultImportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultImportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                                 repeated string export_policy = 3 [json_name = "export-policy"];
                                 enum DefaultExportPolicy {
                                    DefaultExportPolicy_ACCEPT_ROUTE = 0;
                                    DefaultExportPolicy_REJECT_ROUTE = 1;
                                 };
                                 DefaultExportPolicy default_export_policy = 4 [json_name = "default-export-policy"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           ApplyPolicy apply_policy = 7 [json_name = "apply-policy"];
                           message Ipv4Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                              message Config {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           Ipv4Unicast ipv4_unicast = 8 [json_name = "ipv4-unicast"];
                           message Ipv6Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                              message Config {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 bool send_default_route = 1 [json_name = "send-default-route"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           Ipv6Unicast ipv6_unicast = 9 [json_name = "ipv6-unicast"];
                           message Ipv4LabeledUnicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           Ipv4LabeledUnicast ipv4_labeled_unicast = 10 [json_name = "ipv4-labeled-unicast"];
                           message Ipv6LabeledUnicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           Ipv6LabeledUnicast ipv6_labeled_unicast = 11 [json_name = "ipv6-labeled-unicast"];
                           message L3VpnIpv4Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv4Unicast l3vpn_ipv4_unicast = 12 [json_name = "l3vpn-ipv4-unicast"];
                           message L3VpnIpv6Unicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv6Unicast l3vpn_ipv6_unicast = 13 [json_name = "l3vpn-ipv6-unicast"];
                           message L3VpnIpv4Multicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv4Multicast l3vpn_ipv4_multicast = 14 [json_name = "l3vpn-ipv4-multicast"];
                           message L3VpnIpv6Multicast {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L3VpnIpv6Multicast l3vpn_ipv6_multicast = 15 [json_name = "l3vpn-ipv6-multicast"];
                           message L2VpnVpls {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L2VpnVpls l2vpn_vpls = 16 [json_name = "l2vpn-vpls"];
                           message L2VpnEvpn {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           L2VpnEvpn l2vpn_evpn = 17 [json_name = "l2vpn-evpn"];
                           message SrtePolicyIpv4 {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           SrtePolicyIpv4 srte_policy_ipv4 = 18 [json_name = "srte-policy-ipv4"];
                           message SrtePolicyIpv6 {
                              message PrefixLimit {
                                 message Config {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    uint32 max_prefixes = 1 [json_name = "max-prefixes"];
                                    bool prevent_teardown = 2 [json_name = "prevent-teardown"];
                                    uint32 warning_threshold_pct = 3 [json_name = "warning-threshold-pct"];
                                    Decimal64 restart_timer = 4 [json_name = "restart-timer"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              PrefixLimit prefix_limit = 1 [json_name = "prefix-limit"];
                           }
                           SrtePolicyIpv6 srte_policy_ipv6 = 19 [json_name = "srte-policy-ipv6"];
                        }
                        repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
                     }
                     AfiSafis afi_safis = 14 [json_name = "afi-safis"];
                     message EnableBfd {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     EnableBfd enable_bfd = 15 [json_name = "enable-bfd"];
                  }
                  repeated PeerGroup peer_group = 1 [json_name = "peer-group"];
               }
               PeerGroups peer_groups = 3 [json_name = "peer-groups"];
               message Rib {
                  message AttrSets {
                     message AttrSet {
                        uint64 index = 1 [json_name = "index"];
                        message State {
                           uint64 index = 1 [json_name = "index"];
                           enum Origin {
                              Origin_IGP = 0;
                              Origin_EGP = 1;
                              Origin_INCOMPLETE = 2;
                           };
                           Origin origin = 2 [json_name = "origin"];
                           bool atomic_aggregate = 3 [json_name = "atomic-aggregate"];
                           string next_hop = 4 [json_name = "next-hop"];
                           uint32 med = 5 [json_name = "med"];
                           uint32 local_pref = 6 [json_name = "local-pref"];
                           string originator_id = 7 [json_name = "originator-id"];
                           repeated string cluster_list = 8 [json_name = "cluster-list"];
                           uint64 aigp = 9 [json_name = "aigp"];
                        }
                        State state = 2 [json_name = "state"];
                        message Aggregator {
                           message State {
                              uint32 as = 1 [json_name = "as"];
                              uint32 as4 = 2 [json_name = "as4"];
                              string address = 3 [json_name = "address"];
                           }
                           State state = 1 [json_name = "state"];
                        }
                        Aggregator aggregator = 3 [json_name = "aggregator"];
                        message AsPath {
                           message AsSegment {
                              message State {
                                 enum Type {
                                    Type_AS_SEQ = 0;
                                    Type_AS_SET = 1;
                                    Type_AS_CONFED_SEQUENCE = 2;
                                    Type_AS_CONFED_SET = 3;
                                 };
                                 Type type = 1 [json_name = "type"];
                                 repeated uint32 member = 2 [json_name = "member"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           repeated AsSegment as_segment = 1 [json_name = "as-segment"];
                        }
                        AsPath as_path = 4 [json_name = "as-path"];
                        message As4Path {
                           message As4Segment {
                              message State {
                                 enum Type {
                                    Type_AS_SEQ = 0;
                                    Type_AS_SET = 1;
                                    Type_AS_CONFED_SEQUENCE = 2;
                                    Type_AS_CONFED_SET = 3;
                                 };
                                 Type type = 1 [json_name = "type"];
                                 repeated uint32 member = 2 [json_name = "member"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           repeated As4Segment as4_segment = 1 [json_name = "as4-segment"];
                        }
                        As4Path as4_path = 5 [json_name = "as4-path"];
                        message TunnelEncapsulation {
                           message Tunnels {
                              message Tunnel {
                                 string type = 1 [json_name = "type"];
                                 message State {
                                    string type = 1 [json_name = "type"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message Subtlvs {
                                    message Subtlv {
                                       string type = 1 [json_name = "type"];
                                       message State {
                                          string type = 1 [json_name = "type"];
                                          repeated uint32 colors = 2 [json_name = "colors"];
                                          uint32 preference = 3 [json_name = "preference"];
                                          string binding_sid = 4 [json_name = "binding-sid"];
                                       }
                                       State state = 2 [json_name = "state"];
                                       message RemoteEndpoints {
                                          message RemoteEndpoint {
                                             string endpoint = 1 [json_name = "endpoint"];
                                             message State {
                                                uint32 as = 1 [json_name = "as"];
                                                string endpoint = 2 [json_name = "endpoint"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated RemoteEndpoint remote_endpoint = 1 [json_name = "remote-endpoint"];
                                       }
                                       RemoteEndpoints remote_endpoints = 3 [json_name = "remote-endpoints"];
                                       message SegmentLists {
                                          message SegmentList {
                                             uint64 instance_id = 1 [json_name = "instance-id"];
                                             message State {
                                                uint64 instance_id = 1 [json_name = "instance-id"];
                                                uint32 weight = 2 [json_name = "weight"];
                                             }
                                             State state = 2 [json_name = "state"];
                                             message Segments {
                                                message Segment {
                                                   uint64 index = 1 [json_name = "index"];
                                                   message State {
                                                      uint64 index = 1 [json_name = "index"];
                                                      enum Type {
                                                         INVALID_ENUM_VALUE_Type = 0;
                                                         Type_MPLS_SID = 1;
                                                         Type_IPV6_SID = 2;
                                                         Type_IPV4_NODE_ADDRESS = 3;
                                                         Type_IPV6_NODE_ADDRESS = 4;
                                                         Type_IPV4_LOCAL_INTF_ID = 5;
                                                         Type_IPV4_LOCAL_REMOTE_ADDR = 6;
                                                         Type_IPV6_LOCAL_INTF_ID = 7;
                                                         Type_IPV6_LOCAL_REMOTE_ADDR = 8;
                                                      };
                                                      Type type = 2 [json_name = "type"];
                                                      string sid = 3 [json_name = "sid"];
                                                      uint32 mpls_tc = 4 [json_name = "mpls-tc"];
                                                      bool mpls_bos = 5 [json_name = "mpls-bos"];
                                                      uint32 mpls_ttl = 6 [json_name = "mpls-ttl"];
                                                      string remote_ipv4_address = 7 [json_name = "remote-ipv4-address"];
                                                      string local_ipv4_address = 8 [json_name = "local-ipv4-address"];
                                                      string remote_ipv6_address = 9 [json_name = "remote-ipv6-address"];
                                                      string local_ipv6_address = 10 [json_name = "local-ipv6-address"];
                                                      uint32 local_interface_id = 11 [json_name = "local-interface-id"];
                                                   }
                                                   State state = 2 [json_name = "state"];
                                                }
                                                repeated Segment segment = 1 [json_name = "segment"];
                                             }
                                             Segments segments = 3 [json_name = "segments"];
                                          }
                                          repeated SegmentList segment_list = 1 [json_name = "segment-list"];
                                       }
                                       SegmentLists segment_lists = 4 [json_name = "segment-lists"];
                                    }
                                    repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                 }
                                 Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                              }
                              repeated Tunnel tunnel = 1 [json_name = "tunnel"];
                           }
                           Tunnels tunnels = 1 [json_name = "tunnels"];
                        }
                        TunnelEncapsulation tunnel_encapsulation = 6 [json_name = "tunnel-encapsulation"];
                     }
                     repeated AttrSet attr_set = 1 [json_name = "attr-set"];
                  }
                  AttrSets attr_sets = 1 [json_name = "attr-sets"];
                  message Communities {
                     message Community {
                        uint64 index = 1 [json_name = "index"];
                        message State {
                           uint64 index = 1 [json_name = "index"];
                           repeated string community10 = 2 [json_name = "community"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     repeated Community community = 1 [json_name = "community"];
                  }
                  Communities communities = 2 [json_name = "communities"];
                  message ExtCommunities {
                     message ExtCommunity {
                        uint64 index = 1 [json_name = "index"];
                        message State {
                           uint64 index = 1 [json_name = "index"];
                           repeated string ext_community = 2 [json_name = "ext-community"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     repeated ExtCommunity ext_community = 1 [json_name = "ext-community"];
                  }
                  ExtCommunities ext_communities = 3 [json_name = "ext-communities"];
                  message AfiSafis {
                     message AfiSafi {
                        string afi_safi_name = 1 [json_name = "afi-safi-name"];
                        message State {
                           string afi_safi_name = 1 [json_name = "afi-safi-name"];
                        }
                        State state = 2 [json_name = "state"];
                        message Ipv4Unicast {
                           message LocRib {
                              message State {
                              }
                              State state = 1 [json_name = "state"];
                              message Routes {
                                 message Route {
                                    string prefix = 1 [json_name = "prefix"];
                                    string origin = 2 [json_name = "origin"];
                                    uint32 path_id = 3 [json_name = "path-id"];
                                    message State {
                                       string prefix = 1 [json_name = "prefix"];
                                       string origin = 2 [json_name = "origin"];
                                       uint32 path_id = 3 [json_name = "path-id"];
                                       uint64 attr_index = 4 [json_name = "attr-index"];
                                       uint64 community_index = 5 [json_name = "community-index"];
                                       uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                       uint64 last_modified = 7 [json_name = "last-modified"];
                                       bool valid_route = 8 [json_name = "valid-route"];
                                       string invalid_reason = 9 [json_name = "invalid-reason"];
                                    }
                                    State state = 4 [json_name = "state"];
                                    message UnknownAttributes {
                                       message UnknownAttribute {
                                          uint32 attr_type = 1 [json_name = "attr-type"];
                                          message State {
                                             bool optional = 1 [json_name = "optional"];
                                             bool transitive = 2 [json_name = "transitive"];
                                             bool partial = 3 [json_name = "partial"];
                                             bool extended = 4 [json_name = "extended"];
                                             uint32 attr_type = 5 [json_name = "attr-type"];
                                             uint32 attr_len = 6 [json_name = "attr-len"];
                                             bytes attr_value = 7 [json_name = "attr-value"];
                                          }
                                          State state = 2 [json_name = "state"];
                                       }
                                       repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                    }
                                    UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                 }
                                 repeated Route route = 1 [json_name = "route"];
                              }
                              Routes routes = 2 [json_name = "routes"];
                           }
                           LocRib loc_rib = 1 [json_name = "loc-rib"];
                           message Neighbors {
                              message Neighbor {
                                 string neighbor_address = 1 [json_name = "neighbor-address"];
                                 message State {
                                    string neighbor_address = 1 [json_name = "neighbor-address"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message AdjRibInPre {
                                    message State {
                                    }
                                    State state = 1 [json_name = "state"];
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 2 [json_name = "routes"];
                                 }
                                 AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                                 message AdjRibInPost {
                                    message State {
                                    }
                                    State state = 1 [json_name = "state"];
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                             bool best_path = 9 [json_name = "best-path"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 2 [json_name = "routes"];
                                 }
                                 AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                                 message AdjRibOutPre {
                                    message State {
                                    }
                                    State state = 1 [json_name = "state"];
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 2 [json_name = "routes"];
                                 }
                                 AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                                 message AdjRibOutPost {
                                    message State {
                                    }
                                    State state = 1 [json_name = "state"];
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 2 [json_name = "routes"];
                                 }
                                 AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                              }
                              repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                           }
                           Neighbors neighbors = 2 [json_name = "neighbors"];
                        }
                        Ipv4Unicast ipv4_unicast = 3 [json_name = "ipv4-unicast"];
                        message Ipv6Unicast {
                           message LocRib {
                              message State {
                              }
                              State state = 1 [json_name = "state"];
                              message Routes {
                                 message Route {
                                    string prefix = 1 [json_name = "prefix"];
                                    string origin = 2 [json_name = "origin"];
                                    uint32 path_id = 3 [json_name = "path-id"];
                                    message State {
                                       string prefix = 1 [json_name = "prefix"];
                                       string origin = 2 [json_name = "origin"];
                                       uint32 path_id = 3 [json_name = "path-id"];
                                       uint64 attr_index = 4 [json_name = "attr-index"];
                                       uint64 community_index = 5 [json_name = "community-index"];
                                       uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                       uint64 last_modified = 7 [json_name = "last-modified"];
                                       bool valid_route = 8 [json_name = "valid-route"];
                                       string invalid_reason = 9 [json_name = "invalid-reason"];
                                    }
                                    State state = 4 [json_name = "state"];
                                    message UnknownAttributes {
                                       message UnknownAttribute {
                                          uint32 attr_type = 1 [json_name = "attr-type"];
                                          message State {
                                             bool optional = 1 [json_name = "optional"];
                                             bool transitive = 2 [json_name = "transitive"];
                                             bool partial = 3 [json_name = "partial"];
                                             bool extended = 4 [json_name = "extended"];
                                             uint32 attr_type = 5 [json_name = "attr-type"];
                                             uint32 attr_len = 6 [json_name = "attr-len"];
                                             bytes attr_value = 7 [json_name = "attr-value"];
                                          }
                                          State state = 2 [json_name = "state"];
                                       }
                                       repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                    }
                                    UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                 }
                                 repeated Route route = 1 [json_name = "route"];
                              }
                              Routes routes = 2 [json_name = "routes"];
                           }
                           LocRib loc_rib = 1 [json_name = "loc-rib"];
                           message Neighbors {
                              message Neighbor {
                                 string neighbor_address = 1 [json_name = "neighbor-address"];
                                 message State {
                                    string neighbor_address = 1 [json_name = "neighbor-address"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message AdjRibInPre {
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                                 message AdjRibInPost {
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                             bool best_path = 9 [json_name = "best-path"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                                 message AdjRibOutPre {
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                                 message AdjRibOutPost {
                                    message Routes {
                                       message Route {
                                          string prefix = 1 [json_name = "prefix"];
                                          uint32 path_id = 2 [json_name = "path-id"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             uint32 path_id = 2 [json_name = "path-id"];
                                             uint64 attr_index = 3 [json_name = "attr-index"];
                                             uint64 community_index = 4 [json_name = "community-index"];
                                             uint64 ext_community_index = 5 [json_name = "ext-community-index"];
                                             uint64 last_modified = 6 [json_name = "last-modified"];
                                             bool valid_route = 7 [json_name = "valid-route"];
                                             string invalid_reason = 8 [json_name = "invalid-reason"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 4 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                              }
                              repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                           }
                           Neighbors neighbors = 2 [json_name = "neighbors"];
                        }
                        Ipv6Unicast ipv6_unicast = 4 [json_name = "ipv6-unicast"];
                        message Ipv4SrtePolicy {
                           message LocRib {
                              message Routes {
                                 message Route {
                                    uint32 path_id = 1 [json_name = "path-id"];
                                    string endpoint = 2 [json_name = "endpoint"];
                                    uint32 color = 3 [json_name = "color"];
                                    message State {
                                       uint32 path_id = 1 [json_name = "path-id"];
                                       string endpoint = 2 [json_name = "endpoint"];
                                       uint32 color = 3 [json_name = "color"];
                                       uint64 attr_index = 4 [json_name = "attr-index"];
                                       uint64 community_index = 5 [json_name = "community-index"];
                                       uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                       uint64 last_modified = 7 [json_name = "last-modified"];
                                       bool valid_route = 8 [json_name = "valid-route"];
                                       string invalid_reason = 9 [json_name = "invalid-reason"];
                                    }
                                    State state = 4 [json_name = "state"];
                                    message UnknownAttributes {
                                       message UnknownAttribute {
                                          uint32 attr_type = 1 [json_name = "attr-type"];
                                          message State {
                                             bool optional = 1 [json_name = "optional"];
                                             bool transitive = 2 [json_name = "transitive"];
                                             bool partial = 3 [json_name = "partial"];
                                             bool extended = 4 [json_name = "extended"];
                                             uint32 attr_type = 5 [json_name = "attr-type"];
                                             uint32 attr_len = 6 [json_name = "attr-len"];
                                             bytes attr_value = 7 [json_name = "attr-value"];
                                          }
                                          State state = 2 [json_name = "state"];
                                       }
                                       repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                    }
                                    UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                 }
                                 repeated Route route = 1 [json_name = "route"];
                              }
                              Routes routes = 1 [json_name = "routes"];
                           }
                           LocRib loc_rib = 1 [json_name = "loc-rib"];
                           message Neighbors {
                              message Neighbor {
                                 string neighbor_address = 1 [json_name = "neighbor-address"];
                                 message State {
                                    string neighbor_address = 1 [json_name = "neighbor-address"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message AdjRibInPre {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                                 message AdjRibInPost {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                             bool best_path = 10 [json_name = "best-path"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                                 message AdjRibOutPre {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                                 message AdjRibOutPost {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                              }
                              repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                           }
                           Neighbors neighbors = 2 [json_name = "neighbors"];
                        }
                        Ipv4SrtePolicy ipv4_srte_policy = 5 [json_name = "ipv4-srte-policy"];
                        message Ipv6SrtePolicy {
                           message LocRib {
                              message Routes {
                                 message Route {
                                    uint32 path_id = 1 [json_name = "path-id"];
                                    string endpoint = 2 [json_name = "endpoint"];
                                    uint32 color = 3 [json_name = "color"];
                                    message State {
                                       uint32 path_id = 1 [json_name = "path-id"];
                                       string endpoint = 2 [json_name = "endpoint"];
                                       uint32 color = 3 [json_name = "color"];
                                       uint64 attr_index = 4 [json_name = "attr-index"];
                                       uint64 community_index = 5 [json_name = "community-index"];
                                       uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                       uint64 last_modified = 7 [json_name = "last-modified"];
                                       bool valid_route = 8 [json_name = "valid-route"];
                                       string invalid_reason = 9 [json_name = "invalid-reason"];
                                    }
                                    State state = 4 [json_name = "state"];
                                    message UnknownAttributes {
                                       message UnknownAttribute {
                                          uint32 attr_type = 1 [json_name = "attr-type"];
                                          message State {
                                             bool optional = 1 [json_name = "optional"];
                                             bool transitive = 2 [json_name = "transitive"];
                                             bool partial = 3 [json_name = "partial"];
                                             bool extended = 4 [json_name = "extended"];
                                             uint32 attr_type = 5 [json_name = "attr-type"];
                                             uint32 attr_len = 6 [json_name = "attr-len"];
                                             bytes attr_value = 7 [json_name = "attr-value"];
                                          }
                                          State state = 2 [json_name = "state"];
                                       }
                                       repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                    }
                                    UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                 }
                                 repeated Route route = 1 [json_name = "route"];
                              }
                              Routes routes = 1 [json_name = "routes"];
                           }
                           LocRib loc_rib = 1 [json_name = "loc-rib"];
                           message Neighbors {
                              message Neighbor {
                                 string neighbor_address = 1 [json_name = "neighbor-address"];
                                 message State {
                                    string neighbor_address = 1 [json_name = "neighbor-address"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message AdjRibInPre {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPre adj_rib_in_pre = 3 [json_name = "adj-rib-in-pre"];
                                 message AdjRibInPost {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                             bool best_path = 10 [json_name = "best-path"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibInPost adj_rib_in_post = 4 [json_name = "adj-rib-in-post"];
                                 message AdjRibOutPre {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPre adj_rib_out_pre = 5 [json_name = "adj-rib-out-pre"];
                                 message AdjRibOutPost {
                                    message Routes {
                                       message Route {
                                          uint32 path_id = 1 [json_name = "path-id"];
                                          string endpoint = 2 [json_name = "endpoint"];
                                          uint32 color = 3 [json_name = "color"];
                                          message State {
                                             uint32 path_id = 1 [json_name = "path-id"];
                                             string endpoint = 2 [json_name = "endpoint"];
                                             uint32 color = 3 [json_name = "color"];
                                             uint64 attr_index = 4 [json_name = "attr-index"];
                                             uint64 community_index = 5 [json_name = "community-index"];
                                             uint64 ext_community_index = 6 [json_name = "ext-community-index"];
                                             uint64 last_modified = 7 [json_name = "last-modified"];
                                             bool valid_route = 8 [json_name = "valid-route"];
                                             string invalid_reason = 9 [json_name = "invalid-reason"];
                                          }
                                          State state = 4 [json_name = "state"];
                                          message UnknownAttributes {
                                             message UnknownAttribute {
                                                uint32 attr_type = 1 [json_name = "attr-type"];
                                                message State {
                                                   bool optional = 1 [json_name = "optional"];
                                                   bool transitive = 2 [json_name = "transitive"];
                                                   bool partial = 3 [json_name = "partial"];
                                                   bool extended = 4 [json_name = "extended"];
                                                   uint32 attr_type = 5 [json_name = "attr-type"];
                                                   uint32 attr_len = 6 [json_name = "attr-len"];
                                                   bytes attr_value = 7 [json_name = "attr-value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UnknownAttribute unknown_attribute = 1 [json_name = "unknown-attribute"];
                                          }
                                          UnknownAttributes unknown_attributes = 5 [json_name = "unknown-attributes"];
                                       }
                                       repeated Route route = 1 [json_name = "route"];
                                    }
                                    Routes routes = 1 [json_name = "routes"];
                                 }
                                 AdjRibOutPost adj_rib_out_post = 6 [json_name = "adj-rib-out-post"];
                              }
                              repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                           }
                           Neighbors neighbors = 2 [json_name = "neighbors"];
                        }
                        Ipv6SrtePolicy ipv6_srte_policy = 6 [json_name = "ipv6-srte-policy"];
                     }
                     repeated AfiSafi afi_safi = 1 [json_name = "afi-safi"];
                  }
                  AfiSafis afi_safis = 4 [json_name = "afi-safis"];
               }
               Rib rib = 4 [json_name = "rib"];
            }
            Bgp bgp = 7 [json_name = "bgp"];
            message Ospfv2 {
               message Global {
                  message Config {
                     string router_id = 1 [json_name = "router-id"];
                     enum SummaryRouteCostMode {
                        SummaryRouteCostMode_RFC1583_COMPATIBLE = 0;
                        SummaryRouteCostMode_RFC2328_COMPATIBLE = 1;
                     };
                     SummaryRouteCostMode summary_route_cost_mode = 2 [json_name = "summary-route-cost-mode"];
                     bool igp_shortcuts = 3 [json_name = "igp-shortcuts"];
                     bool log_adjacency_changes = 4 [json_name = "log-adjacency-changes"];
                     bool hide_transit_only_networks = 5 [json_name = "hide-transit-only-networks"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     string router_id = 1 [json_name = "router-id"];
                     enum SummaryRouteCostMode {
                        SummaryRouteCostMode_RFC1583_COMPATIBLE = 0;
                        SummaryRouteCostMode_RFC2328_COMPATIBLE = 1;
                     };
                     SummaryRouteCostMode summary_route_cost_mode = 2 [json_name = "summary-route-cost-mode"];
                     bool igp_shortcuts = 3 [json_name = "igp-shortcuts"];
                     bool log_adjacency_changes = 4 [json_name = "log-adjacency-changes"];
                     bool hide_transit_only_networks = 5 [json_name = "hide-transit-only-networks"];
                  }
                  State state = 2 [json_name = "state"];
                  message Timers {
                     message Spf {
                        message Config {
                           uint32 initial_delay = 1 [json_name = "initial-delay"];
                           uint32 maximum_delay = 2 [json_name = "maximum-delay"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 initial_delay = 1 [json_name = "initial-delay"];
                           uint32 maximum_delay = 2 [json_name = "maximum-delay"];
                           enum TimerType {
                              TimerType_LINEAR_BACKOFF = 0;
                              TimerType_EXPONENTIAL_BACKOFF = 1;
                           };
                           TimerType timer_type = 3 [json_name = "timer-type"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Spf spf = 1 [json_name = "spf"];
                     message MaxMetric {
                        message Config {
                           bool set = 1 [json_name = "set"];
                           uint64 timeout = 2 [json_name = "timeout"];
                           repeated string include = 3 [json_name = "include"];
                           repeated string trigger = 4 [json_name = "trigger"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool set = 1 [json_name = "set"];
                           uint64 timeout = 2 [json_name = "timeout"];
                           repeated string include = 3 [json_name = "include"];
                           repeated string trigger = 4 [json_name = "trigger"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     MaxMetric max_metric = 2 [json_name = "max-metric"];
                     message LsaGeneration {
                        message Config {
                           uint32 initial_delay = 1 [json_name = "initial-delay"];
                           uint32 maximum_delay = 2 [json_name = "maximum-delay"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 initial_delay = 1 [json_name = "initial-delay"];
                           uint32 maximum_delay = 2 [json_name = "maximum-delay"];
                           enum TimerType {
                              TimerType_LINEAR_BACKOFF = 0;
                              TimerType_EXPONENTIAL_BACKOFF = 1;
                           };
                           TimerType timer_type = 3 [json_name = "timer-type"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     LsaGeneration lsa_generation = 3 [json_name = "lsa-generation"];
                  }
                  Timers timers = 3 [json_name = "timers"];
                  message GracefulRestart {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        bool helper_only = 2 [json_name = "helper-only"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        bool helper_only = 2 [json_name = "helper-only"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  GracefulRestart graceful_restart = 4 [json_name = "graceful-restart"];
                  message Mpls {
                     message Config {
                        bool traffic_engineering_extensions = 1 [json_name = "traffic-engineering-extensions"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool traffic_engineering_extensions = 1 [json_name = "traffic-engineering-extensions"];
                     }
                     State state = 2 [json_name = "state"];
                     message IgpLdpSync {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     IgpLdpSync igp_ldp_sync = 3 [json_name = "igp-ldp-sync"];
                  }
                  Mpls mpls = 5 [json_name = "mpls"];
                  message InterAreaPropagationPolicies {
                     message InterAreaPropagationPolicy {
                        string src_area = 1 [json_name = "src-area"];
                        string dst_area = 2 [json_name = "dst-area"];
                        message Config {
                           string src_area = 1 [json_name = "src-area"];
                           string dst_area = 2 [json_name = "dst-area"];
                           repeated string import_policy = 3 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 4 [json_name = "default-import-policy"];
                        }
                        Config config = 3 [json_name = "config"];
                        message State {
                           string src_area = 1 [json_name = "src-area"];
                           string dst_area = 2 [json_name = "dst-area"];
                           repeated string import_policy = 3 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 4 [json_name = "default-import-policy"];
                        }
                        State state = 4 [json_name = "state"];
                     }
                     repeated InterAreaPropagationPolicy inter_area_propagation_policy = 1 [json_name = "inter-area-propagation-policy"];
                  }
                  InterAreaPropagationPolicies inter_area_propagation_policies = 6 [json_name = "inter-area-propagation-policies"];
               }
               Global global = 1 [json_name = "global"];
               message Areas {
                  message Area {
                     string identifier = 1 [json_name = "identifier"];
                     message Config {
                        string identifier = 1 [json_name = "identifier"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string identifier = 1 [json_name = "identifier"];
                     }
                     State state = 3 [json_name = "state"];
                     message Mpls {
                        message Config {
                           bool traffic_engineering_enabled = 1 [json_name = "traffic-engineering-enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool traffic_engineering_enabled = 1 [json_name = "traffic-engineering-enabled"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Mpls mpls = 4 [json_name = "mpls"];
                     message Lsdb {
                        message State {
                           string identifier = 1 [json_name = "identifier"];
                        }
                        State state = 1 [json_name = "state"];
                        message LsaTypes {
                           message LsaType {
                              string type = 1 [json_name = "type"];
                              message State {
                                 string type = 1 [json_name = "type"];
                              }
                              State state = 2 [json_name = "state"];
                              message Lsas {
                                 message Lsa {
                                    string link_state_id = 1 [json_name = "link-state-id"];
                                    message State {
                                       string link_state_id = 1 [json_name = "link-state-id"];
                                       string advertising_router = 2 [json_name = "advertising-router"];
                                       int32 sequence_number = 3 [json_name = "sequence-number"];
                                       uint32 checksum = 4 [json_name = "checksum"];
                                       uint32 age = 5 [json_name = "age"];
                                    }
                                    State state = 2 [json_name = "state"];
                                    message RouterLsa {
                                       message State {
                                          string type = 1 [json_name = "type"];
                                          string link_id = 2 [json_name = "link-id"];
                                          string link_data = 3 [json_name = "link-data"];
                                          uint32 metric = 4 [json_name = "metric"];
                                          uint32 number_links = 5 [json_name = "number-links"];
                                          uint32 number_tos_metrics = 6 [json_name = "number-tos-metrics"];
                                       }
                                       State state = 1 [json_name = "state"];
                                       message TypesOfService {
                                          message TypeOfService {
                                             uint32 tos = 1 [json_name = "tos"];
                                             message State {
                                                uint32 tos = 1 [json_name = "tos"];
                                                uint32 metric = 2 [json_name = "metric"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated TypeOfService type_of_service = 1 [json_name = "type-of-service"];
                                       }
                                       TypesOfService types_of_service = 2 [json_name = "types-of-service"];
                                    }
                                    RouterLsa router_lsa = 3 [json_name = "router-lsa"];
                                    message NetworkLsa {
                                       message State {
                                          uint32 network_mask = 1 [json_name = "network-mask"];
                                          repeated string attached_router = 2 [json_name = "attached-router"];
                                       }
                                       State state = 1 [json_name = "state"];
                                    }
                                    NetworkLsa network_lsa = 4 [json_name = "network-lsa"];
                                    message SummaryLsa {
                                       message State {
                                          uint32 network_mask = 1 [json_name = "network-mask"];
                                       }
                                       State state = 1 [json_name = "state"];
                                       message TypesOfService {
                                          message TypeOfService {
                                             uint32 tos = 1 [json_name = "tos"];
                                             message State {
                                                uint32 tos = 1 [json_name = "tos"];
                                                uint32 metric = 2 [json_name = "metric"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated TypeOfService type_of_service = 1 [json_name = "type-of-service"];
                                       }
                                       TypesOfService types_of_service = 2 [json_name = "types-of-service"];
                                    }
                                    SummaryLsa summary_lsa = 5 [json_name = "summary-lsa"];
                                    message AsExternalLsa {
                                       message State {
                                          uint32 mask = 1 [json_name = "mask"];
                                          enum MetricType {
                                             MetricType_TYPE_1 = 0;
                                             MetricType_TYPE_2 = 1;
                                          };
                                          MetricType metric_type = 2 [json_name = "metric-type"];
                                          uint32 metric = 3 [json_name = "metric"];
                                          string forwarding_address = 4 [json_name = "forwarding-address"];
                                          uint32 external_route_tag = 5 [json_name = "external-route-tag"];
                                       }
                                       State state = 1 [json_name = "state"];
                                       message TypesOfService {
                                          message TypeOfService {
                                             uint32 tos = 1 [json_name = "tos"];
                                             message State {
                                                string forwarding_address = 1 [json_name = "forwarding-address"];
                                                uint32 external_route_tag = 2 [json_name = "external-route-tag"];
                                                uint32 tos = 3 [json_name = "tos"];
                                                uint32 metric = 4 [json_name = "metric"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated TypeOfService type_of_service = 1 [json_name = "type-of-service"];
                                       }
                                       TypesOfService types_of_service = 2 [json_name = "types-of-service"];
                                    }
                                    AsExternalLsa as_external_lsa = 6 [json_name = "as-external-lsa"];
                                    message NssaExternalLsa {
                                       message State {
                                          uint32 mask = 1 [json_name = "mask"];
                                          enum MetricType {
                                             MetricType_TYPE_1 = 0;
                                             MetricType_TYPE_2 = 1;
                                          };
                                          MetricType metric_type = 2 [json_name = "metric-type"];
                                          uint32 metric = 3 [json_name = "metric"];
                                          string forwarding_address = 4 [json_name = "forwarding-address"];
                                          uint32 external_route_tag = 5 [json_name = "external-route-tag"];
                                          bool propagate = 6 [json_name = "propagate"];
                                       }
                                       State state = 1 [json_name = "state"];
                                       message TypesOfService {
                                          message TypeOfService {
                                             uint32 tos = 1 [json_name = "tos"];
                                             message State {
                                                string forwarding_address = 1 [json_name = "forwarding-address"];
                                                uint32 external_route_tag = 2 [json_name = "external-route-tag"];
                                                uint32 tos = 3 [json_name = "tos"];
                                                uint32 metric = 4 [json_name = "metric"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated TypeOfService type_of_service = 1 [json_name = "type-of-service"];
                                       }
                                       TypesOfService types_of_service = 2 [json_name = "types-of-service"];
                                    }
                                    NssaExternalLsa nssa_external_lsa = 7 [json_name = "nssa-external-lsa"];
                                    message OpaqueLsa {
                                       message State {
                                          enum Scope {
                                             Scope_LINK = 0;
                                             Scope_AREA = 1;
                                             Scope_AS = 2;
                                          };
                                          Scope scope = 1 [json_name = "scope"];
                                          string type = 2 [json_name = "type"];
                                       }
                                       State state = 1 [json_name = "state"];
                                       message TrafficEngineering {
                                          message Tlvs {
                                             message Tlv {
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message UnknownTlv {
                                                   message State {
                                                      uint32 type = 1 [json_name = "type"];
                                                      uint32 length = 2 [json_name = "length"];
                                                      bytes value = 3 [json_name = "value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                UnknownTlv unknown_tlv = 2 [json_name = "unknown-tlv"];
                                                message RouterAddress {
                                                   message State {
                                                      string address = 1 [json_name = "address"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                RouterAddress router_address = 3 [json_name = "router-address"];
                                                message Link {
                                                   message SubTlvs {
                                                      message SubTlv {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 unknown_type = 2 [json_name = "unknown-type"];
                                                            bytes unknown_value = 3 [json_name = "unknown-value"];
                                                            enum LinkType {
                                                               LinkType_POINT_TO_POINT = 0;
                                                               LinkType_MULTI_ACCESS = 1;
                                                               LinkType_UNKNOWN = 2;
                                                            };
                                                            LinkType link_type = 4 [json_name = "link-type"];
                                                            string link_id = 5 [json_name = "link-id"];
                                                            repeated string local_ip_address = 6 [json_name = "local-ip-address"];
                                                            repeated string remote_ip_address = 7 [json_name = "remote-ip-address"];
                                                            uint32 metric = 8 [json_name = "metric"];
                                                            bytes maximum_bandwidth = 9 [json_name = "maximum-bandwidth"];
                                                            bytes maximum_reservable_bandwidth = 10 [json_name = "maximum-reservable-bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                         message UnknownSubtlv {
                                                            message State {
                                                               uint32 type = 1 [json_name = "type"];
                                                               uint32 length = 2 [json_name = "length"];
                                                               bytes value = 3 [json_name = "value"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         UnknownSubtlv unknown_subtlv = 2 [json_name = "unknown-subtlv"];
                                                         message UnreservedBandwidths {
                                                            message UnreservedBandwidth {
                                                               uint32 priority = 1 [json_name = "priority"];
                                                               message State {
                                                                  uint32 priority = 1 [json_name = "priority"];
                                                                  bytes unreserved_bandwidth = 2 [json_name = "unreserved-bandwidth"];
                                                               }
                                                               State state = 2 [json_name = "state"];
                                                            }
                                                            repeated UnreservedBandwidth unreserved_bandwidth = 1 [json_name = "unreserved-bandwidth"];
                                                         }
                                                         UnreservedBandwidths unreserved_bandwidths = 3 [json_name = "unreserved-bandwidths"];
                                                         message AdministrativeGroups {
                                                            message AdminGroup {
                                                               uint32 bit_index = 1 [json_name = "bit-index"];
                                                               message State {
                                                                  uint32 bit_index = 1 [json_name = "bit-index"];
                                                                  bool set = 2 [json_name = "set"];
                                                               }
                                                               State state = 2 [json_name = "state"];
                                                            }
                                                            repeated AdminGroup admin_group = 1 [json_name = "admin-group"];
                                                         }
                                                         AdministrativeGroups administrative_groups = 4 [json_name = "administrative-groups"];
                                                      }
                                                      repeated SubTlv sub_tlv = 1 [json_name = "sub-tlv"];
                                                   }
                                                   SubTlvs sub_tlvs = 1 [json_name = "sub-tlvs"];
                                                }
                                                Link link = 4 [json_name = "link"];
                                                message NodeAttribute {
                                                   message SubTlvs {
                                                      message SubTlv {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            repeated string local_ipv4_addresses = 2 [json_name = "local-ipv4-addresses"];
                                                            repeated string local_ipv6_addresses = 3 [json_name = "local-ipv6-addresses"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                         message UnknownSubtlv {
                                                            message State {
                                                               uint32 type = 1 [json_name = "type"];
                                                               uint32 length = 2 [json_name = "length"];
                                                               bytes value = 3 [json_name = "value"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         UnknownSubtlv unknown_subtlv = 2 [json_name = "unknown-subtlv"];
                                                      }
                                                      repeated SubTlv sub_tlv = 1 [json_name = "sub-tlv"];
                                                   }
                                                   SubTlvs sub_tlvs = 1 [json_name = "sub-tlvs"];
                                                }
                                                NodeAttribute node_attribute = 5 [json_name = "node-attribute"];
                                             }
                                             repeated Tlv tlv = 1 [json_name = "tlv"];
                                          }
                                          Tlvs tlvs = 1 [json_name = "tlvs"];
                                       }
                                       TrafficEngineering traffic_engineering = 2 [json_name = "traffic-engineering"];
                                       message GraceLsa {
                                          message Tlvs {
                                             message Tlv {
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                   uint32 period = 2 [json_name = "period"];
                                                   enum Reason {
                                                      Reason_UNKNOWN = 0;
                                                      Reason_SOFTWARE_RESTART = 1;
                                                      Reason_SOFTWARE_RELOAD_UPGRADE = 2;
                                                      Reason_CONTROL_PROCESSOR_SWITCH = 3;
                                                   };
                                                   Reason reason = 3 [json_name = "reason"];
                                                   string ip_interface_address = 4 [json_name = "ip-interface-address"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message UnknownTlv {
                                                   message State {
                                                      uint32 type = 1 [json_name = "type"];
                                                      uint32 length = 2 [json_name = "length"];
                                                      bytes value = 3 [json_name = "value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                UnknownTlv unknown_tlv = 2 [json_name = "unknown-tlv"];
                                             }
                                             repeated Tlv tlv = 1 [json_name = "tlv"];
                                          }
                                          Tlvs tlvs = 1 [json_name = "tlvs"];
                                       }
                                       GraceLsa grace_lsa = 3 [json_name = "grace-lsa"];
                                       message RouterInformation {
                                          message Tlvs {
                                             message Tlv {
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message UnknownTlv {
                                                   message State {
                                                      uint32 type = 1 [json_name = "type"];
                                                      uint32 length = 2 [json_name = "length"];
                                                      bytes value = 3 [json_name = "value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                UnknownTlv unknown_tlv = 2 [json_name = "unknown-tlv"];
                                                message InformationalCapabilities {
                                                   message State {
                                                      bool graceful_restart_capable = 1 [json_name = "graceful-restart-capable"];
                                                      bool graceful_restart_helper = 2 [json_name = "graceful-restart-helper"];
                                                      bool stub_router = 3 [json_name = "stub-router"];
                                                      bool traffic_engineering = 4 [json_name = "traffic-engineering"];
                                                      bool point_to_point_over_lan = 5 [json_name = "point-to-point-over-lan"];
                                                      bool experimental_te = 6 [json_name = "experimental-te"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                InformationalCapabilities informational_capabilities = 3 [json_name = "informational-capabilities"];
                                                message NodeAdministrativeTags {
                                                   message State {
                                                      repeated uint32 administrative_tags = 1 [json_name = "administrative-tags"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                NodeAdministrativeTags node_administrative_tags = 4 [json_name = "node-administrative-tags"];
                                                message SegmentRoutingAlgorithm {
                                                   message State {
                                                      repeated string supported_algorithms = 1 [json_name = "supported-algorithms"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                SegmentRoutingAlgorithm segment_routing_algorithm = 5 [json_name = "segment-routing-algorithm"];
                                                message SegmentRoutingSidLabelRange {
                                                   message Tlvs18 {
                                                      message Tlv19 {
                                                         message UnknownTlv {
                                                            message State {
                                                               uint32 type = 1 [json_name = "type"];
                                                               uint32 length = 2 [json_name = "length"];
                                                               bytes value = 3 [json_name = "value"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         UnknownTlv unknown_tlv = 1 [json_name = "unknown-tlv"];
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 range_size = 2 [json_name = "range-size"];
                                                         }
                                                         State state = 2 [json_name = "state"];
                                                         message SidLabel {
                                                            message State {
                                                               enum EntryType {
                                                                  EntryType_LABEL = 0;
                                                                  EntryType_SID = 1;
                                                               };
                                                               EntryType entry_type = 1 [json_name = "entry-type"];
                                                               uint32 first_value = 2 [json_name = "first-value"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         SidLabel sid_label = 3 [json_name = "sid-label"];
                                                      }
                                                      repeated Tlv19 tlv19 = 1 [json_name = "tlv"];
                                                   }
                                                   Tlvs18 tlvs18 = 1 [json_name = "tlvs"];
                                                }
                                                SegmentRoutingSidLabelRange segment_routing_sid_label_range = 6 [json_name = "segment-routing-sid-label-range"];
                                             }
                                             repeated Tlv tlv = 1 [json_name = "tlv"];
                                          }
                                          Tlvs tlvs = 1 [json_name = "tlvs"];
                                       }
                                       RouterInformation router_information = 4 [json_name = "router-information"];
                                       message ExtendedPrefix {
                                          message State {
                                             enum RouteType {
                                                RouteType_UNSPECIFIED = 0;
                                                RouteType_INTRA_AREA = 1;
                                                RouteType_INTER_AREA = 3;
                                                RouteType_AS_EXTERNAL = 5;
                                                RouteType_NSSA_EXTERNAL = 7;
                                             };
                                             RouteType route_type = 1 [json_name = "route-type"];
                                             uint32 prefix_length = 2 [json_name = "prefix-length"];
                                             enum AddressFamily {
                                                AddressFamily_IPV4_UNICAST = 0;
                                             };
                                             AddressFamily address_family = 3 [json_name = "address-family"];
                                             bool attached = 4 [json_name = "attached"];
                                             bool node = 5 [json_name = "node"];
                                             string prefix = 6 [json_name = "prefix"];
                                          }
                                          State state = 1 [json_name = "state"];
                                          message Tlvs {
                                             message Tlv {
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message ExtendedPrefixRange {
                                                   message State {
                                                      uint32 prefix_length = 1 [json_name = "prefix-length"];
                                                      enum AddressFamily {
                                                         AddressFamily_IPV4_UNICAST = 0;
                                                      };
                                                      AddressFamily address_family = 2 [json_name = "address-family"];
                                                      uint32 range_size = 3 [json_name = "range-size"];
                                                      bool inter_area = 4 [json_name = "inter-area"];
                                                      string prefix = 5 [json_name = "prefix"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                ExtendedPrefixRange extended_prefix_range = 2 [json_name = "extended-prefix-range"];
                                                message PrefixSid {
                                                   message State {
                                                      bool no_php = 1 [json_name = "no-php"];
                                                      bool mapping_server = 2 [json_name = "mapping-server"];
                                                      bool explicit_null = 3 [json_name = "explicit-null"];
                                                      enum SidValueType {
                                                         SidValueType_ABSOLUTE = 0;
                                                         SidValueType_INDEX = 1;
                                                      };
                                                      SidValueType sid_value_type = 4 [json_name = "sid-value-type"];
                                                      enum SidScope {
                                                         SidScope_LOCAL = 0;
                                                         SidScope_GLOBAL = 1;
                                                      };
                                                      SidScope sid_scope = 5 [json_name = "sid-scope"];
                                                      uint32 multi_topology_identifier = 6 [json_name = "multi-topology-identifier"];
                                                      uint32 algorithm = 7 [json_name = "algorithm"];
                                                      uint32 sid_value = 8 [json_name = "sid-value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                PrefixSid prefix_sid = 3 [json_name = "prefix-sid"];
                                                message SidLabelBinding {
                                                   message State {
                                                      bool mirroring = 1 [json_name = "mirroring"];
                                                      uint32 multi_topology_identifier = 2 [json_name = "multi-topology-identifier"];
                                                      uint32 weight = 3 [json_name = "weight"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                   message Tlvs18 {
                                                      message Tlv19 {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                         message SidLabelBinding20 {
                                                            message State {
                                                               enum SidType {
                                                                  SidType_LABEL = 0;
                                                                  SidType_SID = 1;
                                                               };
                                                               SidType sid_type = 1 [json_name = "sid-type"];
                                                               uint32 sid_value = 2 [json_name = "sid-value"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         SidLabelBinding20 sid_label_binding = 2 [json_name = "sid-label-binding"];
                                                         message EroMetric {
                                                            message State {
                                                               uint32 metric = 1 [json_name = "metric"];
                                                            }
                                                            State state = 1 [json_name = "state"];
                                                         }
                                                         EroMetric ero_metric = 3 [json_name = "ero-metric"];
                                                         message EroPath {
                                                            message Segments {
                                                               message Segment {
                                                                  message State {
                                                                     string type = 1 [json_name = "type"];
                                                                     bool loose = 2 [json_name = "loose"];
                                                                  }
                                                                  State state = 1 [json_name = "state"];
                                                                  message Ipv4Segment {
                                                                     message State {
                                                                        string address = 1 [json_name = "address"];
                                                                     }
                                                                     State state = 1 [json_name = "state"];
                                                                  }
                                                                  Ipv4Segment ipv4_segment = 2 [json_name = "ipv4-segment"];
                                                                  message UnnumberedHop {
                                                                     message State {
                                                                        string router_id = 1 [json_name = "router-id"];
                                                                        uint32 interface_id = 2 [json_name = "interface-id"];
                                                                     }
                                                                     State state = 1 [json_name = "state"];
                                                                  }
                                                                  UnnumberedHop unnumbered_hop = 3 [json_name = "unnumbered-hop"];
                                                               }
                                                               repeated Segment segment = 1 [json_name = "segment"];
                                                            }
                                                            Segments segments = 1 [json_name = "segments"];
                                                         }
                                                         EroPath ero_path = 4 [json_name = "ero-path"];
                                                      }
                                                      repeated Tlv19 tlv19 = 1 [json_name = "tlv"];
                                                   }
                                                   Tlvs18 tlvs18 = 2 [json_name = "tlvs"];
                                                }
                                                SidLabelBinding sid_label_binding = 4 [json_name = "sid-label-binding"];
                                                message UnknownTlv {
                                                   message State {
                                                      uint32 type = 1 [json_name = "type"];
                                                      uint32 length = 2 [json_name = "length"];
                                                      bytes value = 3 [json_name = "value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                UnknownTlv unknown_tlv = 5 [json_name = "unknown-tlv"];
                                             }
                                             repeated Tlv tlv = 1 [json_name = "tlv"];
                                          }
                                          Tlvs tlvs = 2 [json_name = "tlvs"];
                                       }
                                       ExtendedPrefix extended_prefix = 5 [json_name = "extended-prefix"];
                                       message ExtendedLink {
                                          message State {
                                             string link_type = 1 [json_name = "link-type"];
                                             string link_id = 2 [json_name = "link-id"];
                                             string link_data = 3 [json_name = "link-data"];
                                          }
                                          State state = 1 [json_name = "state"];
                                          message Tlvs {
                                             message Tlv {
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message UnknownTlv {
                                                   message State {
                                                      uint32 type = 1 [json_name = "type"];
                                                      uint32 length = 2 [json_name = "length"];
                                                      bytes value = 3 [json_name = "value"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                UnknownTlv unknown_tlv = 2 [json_name = "unknown-tlv"];
                                                message AdjacencySid {
                                                   message State {
                                                      bool backup = 1 [json_name = "backup"];
                                                      bool group = 2 [json_name = "group"];
                                                      enum SidType {
                                                         SidType_LABEL = 0;
                                                         SidType_SID = 1;
                                                      };
                                                      SidType sid_type = 3 [json_name = "sid-type"];
                                                      uint32 sid_value = 4 [json_name = "sid-value"];
                                                      uint32 weight = 5 [json_name = "weight"];
                                                      uint32 multi_topology_identifier = 6 [json_name = "multi-topology-identifier"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                AdjacencySid adjacency_sid = 3 [json_name = "adjacency-sid"];
                                             }
                                             repeated Tlv tlv = 1 [json_name = "tlv"];
                                          }
                                          Tlvs tlvs = 2 [json_name = "tlvs"];
                                       }
                                       ExtendedLink extended_link = 6 [json_name = "extended-link"];
                                       message UnknownTlv {
                                          message State {
                                             uint32 type = 1 [json_name = "type"];
                                             uint32 length = 2 [json_name = "length"];
                                             bytes value = 3 [json_name = "value"];
                                          }
                                          State state = 1 [json_name = "state"];
                                       }
                                       UnknownTlv unknown_tlv = 7 [json_name = "unknown-tlv"];
                                    }
                                    OpaqueLsa opaque_lsa = 8 [json_name = "opaque-lsa"];
                                 }
                                 repeated Lsa lsa = 1 [json_name = "lsa"];
                              }
                              Lsas lsas = 3 [json_name = "lsas"];
                           }
                           repeated LsaType lsa_type = 1 [json_name = "lsa-type"];
                        }
                        LsaTypes lsa_types = 2 [json_name = "lsa-types"];
                     }
                     Lsdb lsdb = 5 [json_name = "lsdb"];
                     message Interfaces {
                        message Interface {
                           string id = 1 [json_name = "id"];
                           message Config {
                              string id = 1 [json_name = "id"];
                              string network_type = 2 [json_name = "network-type"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool multi_area_adjacency_primary = 4 [json_name = "multi-area-adjacency-primary"];
                              string authentication_type = 5 [json_name = "authentication-type"];
                              uint32 metric = 6 [json_name = "metric"];
                              bool passive = 7 [json_name = "passive"];
                              bool hide_network = 8 [json_name = "hide-network"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string id = 1 [json_name = "id"];
                              string network_type = 2 [json_name = "network-type"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool multi_area_adjacency_primary = 4 [json_name = "multi-area-adjacency-primary"];
                              string authentication_type = 5 [json_name = "authentication-type"];
                              uint32 metric = 6 [json_name = "metric"];
                              bool passive = 7 [json_name = "passive"];
                              bool hide_network = 8 [json_name = "hide-network"];
                           }
                           State state = 3 [json_name = "state"];
                           message InterfaceRef {
                              message Config {
                                 string interface12 = 1 [json_name = "interface"];
                                 uint32 subinterface = 2 [json_name = "subinterface"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 string interface12 = 1 [json_name = "interface"];
                                 uint32 subinterface = 2 [json_name = "subinterface"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
                           message Timers {
                              message Config {
                                 uint32 dead_interval = 1 [json_name = "dead-interval"];
                                 uint32 hello_interval = 2 [json_name = "hello-interval"];
                                 uint32 retransmission_interval = 3 [json_name = "retransmission-interval"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 dead_interval = 1 [json_name = "dead-interval"];
                                 uint32 hello_interval = 2 [json_name = "hello-interval"];
                                 uint32 retransmission_interval = 3 [json_name = "retransmission-interval"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Timers timers = 5 [json_name = "timers"];
                           message Mpls {
                              message Config {
                                 uint32 traffic_engineering_metric = 1 [json_name = "traffic-engineering-metric"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 traffic_engineering_metric = 1 [json_name = "traffic-engineering-metric"];
                              }
                              State state = 2 [json_name = "state"];
                              message IgpLdpSync {
                                 message Config {
                                    bool enabled = 1 [json_name = "enabled"];
                                    uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    bool enabled = 1 [json_name = "enabled"];
                                    uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                                    bool synchronized = 3 [json_name = "synchronized"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              IgpLdpSync igp_ldp_sync = 3 [json_name = "igp-ldp-sync"];
                           }
                           Mpls mpls = 6 [json_name = "mpls"];
                           message LsaFilter {
                              message Config {
                                 bool all = 1 [json_name = "all"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool all = 1 [json_name = "all"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           LsaFilter lsa_filter = 7 [json_name = "lsa-filter"];
                           message Neighbors {
                              message Neighbor {
                                 string router_id = 1 [json_name = "router-id"];
                                 message Config {
                                    string router_id = 1 [json_name = "router-id"];
                                    uint32 metric = 2 [json_name = "metric"];
                                 }
                                 Config config = 2 [json_name = "config"];
                                 message State {
                                    string router_id = 1 [json_name = "router-id"];
                                    uint32 metric = 2 [json_name = "metric"];
                                    uint32 priority = 3 [json_name = "priority"];
                                    uint64 dead_time = 4 [json_name = "dead-time"];
                                    string designated_router = 5 [json_name = "designated-router"];
                                    string backup_designated_router = 6 [json_name = "backup-designated-router"];
                                    string optional_capabilities = 7 [json_name = "optional-capabilities"];
                                    uint64 last_established_time = 8 [json_name = "last-established-time"];
                                    string adjacency_state = 9 [json_name = "adjacency-state"];
                                    uint32 state_changes = 10 [json_name = "state-changes"];
                                    uint32 retranmission_queue_length = 11 [json_name = "retranmission-queue-length"];
                                 }
                                 State state = 3 [json_name = "state"];
                              }
                              repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                           }
                           Neighbors neighbors = 8 [json_name = "neighbors"];
                        }
                        repeated Interface interface = 1 [json_name = "interface"];
                     }
                     Interfaces interfaces = 6 [json_name = "interfaces"];
                     message VirtualLinks {
                        message VirtualLink {
                           string remote_router_id = 1 [json_name = "remote-router-id"];
                           message Config {
                              string remote_router_id = 1 [json_name = "remote-router-id"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string remote_router_id = 1 [json_name = "remote-router-id"];
                              uint32 priority = 2 [json_name = "priority"];
                              uint64 dead_time = 3 [json_name = "dead-time"];
                              string designated_router = 4 [json_name = "designated-router"];
                              string backup_designated_router = 5 [json_name = "backup-designated-router"];
                              string optional_capabilities = 6 [json_name = "optional-capabilities"];
                              uint64 last_established_time = 7 [json_name = "last-established-time"];
                              string adjacency_state = 8 [json_name = "adjacency-state"];
                              uint32 state_changes = 9 [json_name = "state-changes"];
                              uint32 retranmission_queue_length = 10 [json_name = "retranmission-queue-length"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        repeated VirtualLink virtual_link = 1 [json_name = "virtual-link"];
                     }
                     VirtualLinks virtual_links = 7 [json_name = "virtual-links"];
                  }
                  repeated Area area = 1 [json_name = "area"];
               }
               Areas areas = 2 [json_name = "areas"];
            }
            Ospfv2 ospfv2 = 8 [json_name = "ospfv2"];
            message Isis {
               message Global {
                  message Config {
                     bool authentication_check = 1 [json_name = "authentication-check"];
                     string instance = 2 [json_name = "instance"];
                     repeated string net = 3 [json_name = "net"];
                     uint32 maximum_area_addresses = 4 [json_name = "maximum-area-addresses"];
                     enum LevelCapability {
                        LevelCapability_LEVEL_1 = 0;
                        LevelCapability_LEVEL_2 = 1;
                        LevelCapability_LEVEL_1_2 = 2;
                     };
                     LevelCapability level_capability = 5 [json_name = "level-capability"];
                     uint32 max_ecmp_paths = 6 [json_name = "max-ecmp-paths"];
                     bool poi_tlv = 7 [json_name = "poi-tlv"];
                     bool iid_tlv = 8 [json_name = "iid-tlv"];
                     bool fast_flooding = 9 [json_name = "fast-flooding"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool authentication_check = 1 [json_name = "authentication-check"];
                     string instance = 2 [json_name = "instance"];
                     repeated string net = 3 [json_name = "net"];
                     uint32 maximum_area_addresses = 4 [json_name = "maximum-area-addresses"];
                     enum LevelCapability {
                        LevelCapability_LEVEL_1 = 0;
                        LevelCapability_LEVEL_2 = 1;
                        LevelCapability_LEVEL_1_2 = 2;
                     };
                     LevelCapability level_capability = 5 [json_name = "level-capability"];
                     uint32 max_ecmp_paths = 6 [json_name = "max-ecmp-paths"];
                     bool poi_tlv = 7 [json_name = "poi-tlv"];
                     bool iid_tlv = 8 [json_name = "iid-tlv"];
                     bool fast_flooding = 9 [json_name = "fast-flooding"];
                  }
                  State state = 2 [json_name = "state"];
                  message LspBit {
                     message OverloadBit {
                        message Config {
                           bool set_bit = 1 [json_name = "set-bit"];
                           bool set_bit_on_boot = 2 [json_name = "set-bit-on-boot"];
                           bool advertise_high_metric = 3 [json_name = "advertise-high-metric"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool set_bit = 1 [json_name = "set-bit"];
                           bool set_bit_on_boot = 2 [json_name = "set-bit-on-boot"];
                           bool advertise_high_metric = 3 [json_name = "advertise-high-metric"];
                        }
                        State state = 2 [json_name = "state"];
                        message ResetTriggers {
                           message ResetTrigger {
                              string reset_trigger = 1 [json_name = "reset-trigger"];
                              message Config {
                                 string reset_trigger = 1 [json_name = "reset-trigger"];
                                 uint32 delay = 2 [json_name = "delay"];
                              }
                              Config config = 2 [json_name = "config"];
                              message State {
                                 string reset_trigger = 1 [json_name = "reset-trigger"];
                                 uint32 delay = 2 [json_name = "delay"];
                              }
                              State state = 3 [json_name = "state"];
                           }
                           repeated ResetTrigger reset_trigger = 1 [json_name = "reset-trigger"];
                        }
                        ResetTriggers reset_triggers = 3 [json_name = "reset-triggers"];
                     }
                     OverloadBit overload_bit = 1 [json_name = "overload-bit"];
                     message AttachedBit {
                        message Config {
                           bool ignore_bit = 1 [json_name = "ignore-bit"];
                           bool suppress_bit = 2 [json_name = "suppress-bit"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool ignore_bit = 1 [json_name = "ignore-bit"];
                           bool suppress_bit = 2 [json_name = "suppress-bit"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     AttachedBit attached_bit = 2 [json_name = "attached-bit"];
                  }
                  LspBit lsp_bit = 3 [json_name = "lsp-bit"];
                  message ReferenceBandwidth {
                     message Config {
                        uint32 reference_bandwidth = 1 [json_name = "reference-bandwidth"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 reference_bandwidth = 1 [json_name = "reference-bandwidth"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  ReferenceBandwidth reference_bandwidth = 4 [json_name = "reference-bandwidth"];
                  message Nsr {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Nsr nsr = 5 [json_name = "nsr"];
                  message GracefulRestart {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        bool helper_only = 2 [json_name = "helper-only"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        bool helper_only = 2 [json_name = "helper-only"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  GracefulRestart graceful_restart = 6 [json_name = "graceful-restart"];
                  message Timers {
                     message Config {
                        uint32 lsp_lifetime_interval = 1 [json_name = "lsp-lifetime-interval"];
                        uint32 lsp_refresh_interval = 2 [json_name = "lsp-refresh-interval"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 lsp_lifetime_interval = 1 [json_name = "lsp-lifetime-interval"];
                        uint32 lsp_refresh_interval = 2 [json_name = "lsp-refresh-interval"];
                     }
                     State state = 2 [json_name = "state"];
                     message Spf {
                        message Config {
                           uint64 spf_hold_interval = 1 [json_name = "spf-hold-interval"];
                           uint64 spf_first_interval = 2 [json_name = "spf-first-interval"];
                           uint64 spf_second_interval = 3 [json_name = "spf-second-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint64 spf_hold_interval = 1 [json_name = "spf-hold-interval"];
                           uint64 spf_first_interval = 2 [json_name = "spf-first-interval"];
                           uint64 spf_second_interval = 3 [json_name = "spf-second-interval"];
                           enum AdaptiveTimer {
                              AdaptiveTimer_LINEAR = 0;
                              AdaptiveTimer_EXPONENTIAL = 1;
                           };
                           AdaptiveTimer adaptive_timer = 4 [json_name = "adaptive-timer"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Spf spf = 3 [json_name = "spf"];
                     message LspGeneration {
                        message Config {
                           uint64 lsp_max_wait_interval = 1 [json_name = "lsp-max-wait-interval"];
                           uint64 lsp_first_wait_interval = 2 [json_name = "lsp-first-wait-interval"];
                           uint64 lsp_second_wait_interval = 3 [json_name = "lsp-second-wait-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint64 lsp_max_wait_interval = 1 [json_name = "lsp-max-wait-interval"];
                           uint64 lsp_first_wait_interval = 2 [json_name = "lsp-first-wait-interval"];
                           uint64 lsp_second_wait_interval = 3 [json_name = "lsp-second-wait-interval"];
                           enum AdaptiveTimer {
                              AdaptiveTimer_LINEAR = 0;
                              AdaptiveTimer_EXPONENTIAL = 1;
                           };
                           AdaptiveTimer adaptive_timer = 4 [json_name = "adaptive-timer"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     LspGeneration lsp_generation = 4 [json_name = "lsp-generation"];
                  }
                  Timers timers = 7 [json_name = "timers"];
                  message Transport {
                     message Config {
                        uint32 lsp_mtu_size = 1 [json_name = "lsp-mtu-size"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        uint32 lsp_mtu_size = 1 [json_name = "lsp-mtu-size"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Transport transport = 8 [json_name = "transport"];
                  message Mpls {
                     message IgpLdpSync {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           uint32 post_session_up_delay = 2 [json_name = "post-session-up-delay"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     IgpLdpSync igp_ldp_sync = 1 [json_name = "igp-ldp-sync"];
                  }
                  Mpls mpls = 9 [json_name = "mpls"];
                  message IgpShortcuts {
                     message Afi {
                        string afi_name = 1 [json_name = "afi-name"];
                        message Config {
                           string afi_name = 1 [json_name = "afi-name"];
                           repeated string nh_type = 2 [json_name = "nh-type"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string afi_name = 1 [json_name = "afi-name"];
                           repeated string nh_type = 2 [json_name = "nh-type"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated Afi afi = 1 [json_name = "afi"];
                  }
                  IgpShortcuts igp_shortcuts = 10 [json_name = "igp-shortcuts"];
                  message AfiSafi {
                     message Af {
                        string afi_name = 1 [json_name = "afi-name"];
                        string safi_name = 2 [json_name = "safi-name"];
                        message Config {
                           string afi_name = 1 [json_name = "afi-name"];
                           string safi_name = 2 [json_name = "safi-name"];
                           uint32 metric = 3 [json_name = "metric"];
                           bool enabled = 4 [json_name = "enabled"];
                        }
                        Config config = 3 [json_name = "config"];
                        message State {
                           string afi_name = 1 [json_name = "afi-name"];
                           string safi_name = 2 [json_name = "safi-name"];
                           uint32 metric = 3 [json_name = "metric"];
                           bool enabled = 4 [json_name = "enabled"];
                        }
                        State state = 4 [json_name = "state"];
                        message MultiTopology {
                           message Config {
                              string afi_name = 1 [json_name = "afi-name"];
                              string safi_name = 2 [json_name = "safi-name"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string afi_name = 1 [json_name = "afi-name"];
                              string safi_name = 2 [json_name = "safi-name"];
                              bool enabled = 3 [json_name = "enabled"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        MultiTopology multi_topology = 5 [json_name = "multi-topology"];
                     }
                     repeated Af af = 1 [json_name = "af"];
                  }
                  AfiSafi afi_safi = 11 [json_name = "afi-safi"];
                  message SegmentRouting {
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        string srgb = 2 [json_name = "srgb"];
                        string srlb = 3 [json_name = "srlb"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        string srgb = 2 [json_name = "srgb"];
                        string srlb = 3 [json_name = "srlb"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  SegmentRouting segment_routing = 12 [json_name = "segment-routing"];
                  message InterLevelPropagationPolicies {
                     message Level1ToLevel2 {
                        message Config {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Level1ToLevel2 level1_to_level2 = 1 [json_name = "level1-to-level2"];
                     message Level2ToLevel1 {
                        message Config {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           repeated string import_policy = 1 [json_name = "import-policy"];
                           enum DefaultImportPolicy {
                              DefaultImportPolicy_ACCEPT_ROUTE = 0;
                              DefaultImportPolicy_REJECT_ROUTE = 1;
                           };
                           DefaultImportPolicy default_import_policy = 2 [json_name = "default-import-policy"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Level2ToLevel1 level2_to_level1 = 2 [json_name = "level2-to-level1"];
                  }
                  InterLevelPropagationPolicies inter_level_propagation_policies = 13 [json_name = "inter-level-propagation-policies"];
               }
               Global global = 1 [json_name = "global"];
               message Levels {
                  message Level {
                     uint32 level_number = 1 [json_name = "level-number"];
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 level_number = 2 [json_name = "level-number"];
                        enum MetricStyle {
                           MetricStyle_NARROW_METRIC = 0;
                           MetricStyle_WIDE_METRIC = 1;
                        };
                        MetricStyle metric_style = 3 [json_name = "metric-style"];
                        bool authentication_check = 4 [json_name = "authentication-check"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        uint32 level_number = 2 [json_name = "level-number"];
                        enum MetricStyle {
                           MetricStyle_NARROW_METRIC = 0;
                           MetricStyle_WIDE_METRIC = 1;
                        };
                        MetricStyle metric_style = 3 [json_name = "metric-style"];
                        bool authentication_check = 4 [json_name = "authentication-check"];
                     }
                     State state = 3 [json_name = "state"];
                     message SystemLevelCounters {
                        message State {
                           uint32 corrupted_lsps = 1 [json_name = "corrupted-lsps"];
                           uint32 database_overloads = 2 [json_name = "database-overloads"];
                           uint32 manual_address_drop_from_areas = 3 [json_name = "manual-address-drop-from-areas"];
                           uint32 exceed_max_seq_nums = 4 [json_name = "exceed-max-seq-nums"];
                           uint32 seq_num_skips = 5 [json_name = "seq-num-skips"];
                           uint32 own_lsp_purges = 6 [json_name = "own-lsp-purges"];
                           uint32 id_len_mismatch = 7 [json_name = "id-len-mismatch"];
                           uint32 part_changes = 8 [json_name = "part-changes"];
                           uint32 max_area_address_mismatches = 9 [json_name = "max-area-address-mismatches"];
                           uint32 auth_fails = 10 [json_name = "auth-fails"];
                           uint32 spf_runs = 11 [json_name = "spf-runs"];
                           uint32 auth_type_fails = 12 [json_name = "auth-type-fails"];
                           uint32 lsp_errors = 13 [json_name = "lsp-errors"];
                        }
                        State state = 1 [json_name = "state"];
                     }
                     SystemLevelCounters system_level_counters = 4 [json_name = "system-level-counters"];
                     message LinkStateDatabase {
                        message Lsp {
                           string lsp_id = 1 [json_name = "lsp-id"];
                           message State {
                              string lsp_id = 1 [json_name = "lsp-id"];
                              uint32 maximum_area_addresses = 2 [json_name = "maximum-area-addresses"];
                              uint32 version = 3 [json_name = "version"];
                              uint32 version2 = 4 [json_name = "version2"];
                              uint32 id_length = 5 [json_name = "id-length"];
                              enum PduType {
                                 PduType_LEVEL_1 = 0;
                                 PduType_LEVEL_2 = 1;
                              };
                              PduType pdu_type = 6 [json_name = "pdu-type"];
                              uint32 remaining_lifetime = 7 [json_name = "remaining-lifetime"];
                              uint32 sequence_number = 8 [json_name = "sequence-number"];
                              uint32 checksum = 9 [json_name = "checksum"];
                              uint32 pdu_length = 10 [json_name = "pdu-length"];
                              enum Flags {
                                 Flags_PARTITION_REPAIR = 0;
                                 Flags_ATTACHED_ERROR = 1;
                                 Flags_ATTACHED_EXPENSE = 2;
                                 Flags_ATTACHED_DELAY = 3;
                                 Flags_ATTACHED_DEFAULT = 4;
                                 Flags_OVERLOAD = 5;
                              };
                              repeated Flags flags = 11 [json_name = "flags"];
                              uint32 is_type = 12 [json_name = "is-type"];
                           }
                           State state = 2 [json_name = "state"];
                           message Tlvs {
                              message Tlv {
                                 string type = 1 [json_name = "type"];
                                 message State {
                                    string type = 1 [json_name = "type"];
                                 }
                                 State state = 2 [json_name = "state"];
                                 message AreaAddress {
                                    message State {
                                       repeated string address = 1 [json_name = "address"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 AreaAddress area_address = 3 [json_name = "area-address"];
                                 message LspBufferSize {
                                    message State {
                                       uint32 size = 1 [json_name = "size"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 LspBufferSize lsp_buffer_size = 4 [json_name = "lsp-buffer-size"];
                                 message Nlpid {
                                    message State {
                                       enum Nlpid14 {
                                          Nlpid14_IPV4 = 0;
                                          Nlpid14_IPV6 = 1;
                                       };
                                       repeated Nlpid14 nlpid14 = 1 [json_name = "nlpid"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Nlpid nlpid = 5 [json_name = "nlpid"];
                                 message Hostname {
                                    message State {
                                       repeated string hostname14 = 1 [json_name = "hostname"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Hostname hostname = 6 [json_name = "hostname"];
                                 message Ipv4InterfaceAddresses {
                                    message State {
                                       repeated string address = 1 [json_name = "address"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Ipv4InterfaceAddresses ipv4_interface_addresses = 7 [json_name = "ipv4-interface-addresses"];
                                 message Ipv6InterfaceAddresses {
                                    message State {
                                       repeated string address = 1 [json_name = "address"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Ipv6InterfaceAddresses ipv6_interface_addresses = 8 [json_name = "ipv6-interface-addresses"];
                                 message Ipv4TeRouterId {
                                    message State {
                                       repeated string router_id = 1 [json_name = "router-id"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Ipv4TeRouterId ipv4_te_router_id = 9 [json_name = "ipv4-te-router-id"];
                                 message Ipv6TeRouterId {
                                    message State {
                                       repeated string router_id = 1 [json_name = "router-id"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Ipv6TeRouterId ipv6_te_router_id = 10 [json_name = "ipv6-te-router-id"];
                                 message InstanceIds {
                                    message InstanceId {
                                       uint32 instance_id = 1 [json_name = "instance-id"];
                                       message State {
                                          uint32 instance_id = 1 [json_name = "instance-id"];
                                          repeated uint32 topology_id = 2 [json_name = "topology-id"];
                                       }
                                       State state = 2 [json_name = "state"];
                                    }
                                    repeated InstanceId instance_id = 1 [json_name = "instance-id"];
                                 }
                                 InstanceIds instance_ids = 11 [json_name = "instance-ids"];
                                 message Ipv4Srlgs {
                                    message Ipv4Srlg {
                                       uint32 instance_number = 1 [json_name = "instance-number"];
                                       message State {
                                          uint32 instance_number = 1 [json_name = "instance-number"];
                                          string system_id = 2 [json_name = "system-id"];
                                          uint32 psn_number = 3 [json_name = "psn-number"];
                                          enum Flags {
                                             Flags_NUMBERED = 0;
                                          };
                                          repeated Flags flags = 4 [json_name = "flags"];
                                          string ipv4_interface_address = 5 [json_name = "ipv4-interface-address"];
                                          string ipv4_neighbor_address = 6 [json_name = "ipv4-neighbor-address"];
                                          repeated uint32 srlg_value = 7 [json_name = "srlg-value"];
                                       }
                                       State state = 2 [json_name = "state"];
                                    }
                                    repeated Ipv4Srlg ipv4_srlg = 1 [json_name = "ipv4-srlg"];
                                 }
                                 Ipv4Srlgs ipv4_srlgs = 12 [json_name = "ipv4-srlgs"];
                                 message Ipv6Srlgs {
                                    message Ipv6Srlg {
                                       uint32 instance_number = 1 [json_name = "instance-number"];
                                       message State {
                                          uint32 instance_number = 1 [json_name = "instance-number"];
                                          string system_id = 2 [json_name = "system-id"];
                                          uint32 psn_number = 3 [json_name = "psn-number"];
                                          enum Flags {
                                             Flags_NA = 0;
                                          };
                                          repeated Flags flags = 4 [json_name = "flags"];
                                          string ipv6_interface_address = 5 [json_name = "ipv6-interface-address"];
                                          string ipv6_neighbor_address = 6 [json_name = "ipv6-neighbor-address"];
                                          repeated uint32 srlg_value = 7 [json_name = "srlg-value"];
                                       }
                                       State state = 2 [json_name = "state"];
                                    }
                                    repeated Ipv6Srlg ipv6_srlg = 1 [json_name = "ipv6-srlg"];
                                 }
                                 Ipv6Srlgs ipv6_srlgs = 13 [json_name = "ipv6-srlgs"];
                                 message PurgeOi {
                                    message State {
                                       uint32 system_id_count = 1 [json_name = "system-id-count"];
                                       string source_system_id = 2 [json_name = "source-system-id"];
                                       string received_system_id = 3 [json_name = "received-system-id"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 PurgeOi purge_oi = 14 [json_name = "purge-oi"];
                                 message RouterCapabilities {
                                    message Capability {
                                       uint32 instance_number = 1 [json_name = "instance-number"];
                                       message State {
                                          uint32 instance_number = 1 [json_name = "instance-number"];
                                          string router_id = 2 [json_name = "router-id"];
                                          enum Flags {
                                             Flags_FLOOD = 0;
                                             Flags_DOWN = 1;
                                          };
                                          repeated Flags flags = 3 [json_name = "flags"];
                                       }
                                       State state = 2 [json_name = "state"];
                                       message Subtlvs {
                                          message Subtlv {
                                             string type = 1 [json_name = "type"];
                                             message State {
                                                string type = 1 [json_name = "type"];
                                             }
                                             State state = 2 [json_name = "state"];
                                             message SegmentRoutingAlgorithms {
                                                message State {
                                                   enum Algorithm {
                                                      Algorithm_SPF = 0;
                                                      Algorithm_STRICT_SPF = 1;
                                                   };
                                                   repeated Algorithm algorithm = 1 [json_name = "algorithm"];
                                                }
                                                State state = 1 [json_name = "state"];
                                             }
                                             SegmentRoutingAlgorithms segment_routing_algorithms = 3 [json_name = "segment-routing-algorithms"];
                                             message SegmentRoutingCapability {
                                                message State {
                                                   enum Flags {
                                                      Flags_IPV4_MPLS = 0;
                                                      Flags_IPV6_MPLS = 1;
                                                      Flags_IPV6_SR = 2;
                                                   };
                                                   repeated Flags flags = 1 [json_name = "flags"];
                                                }
                                                State state = 1 [json_name = "state"];
                                                message SrgbDescriptors {
                                                   message SrgbDescriptor {
                                                      uint32 range = 1 [json_name = "range"];
                                                      message State {
                                                         uint32 range = 1 [json_name = "range"];
                                                         string label = 2 [json_name = "label"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated SrgbDescriptor srgb_descriptor = 1 [json_name = "srgb-descriptor"];
                                                }
                                                SrgbDescriptors srgb_descriptors = 2 [json_name = "srgb-descriptors"];
                                             }
                                             SegmentRoutingCapability segment_routing_capability = 4 [json_name = "segment-routing-capability"];
                                          }
                                          repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                       }
                                       Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                       message UndefinedSubtlvs {
                                          message UndefinedSubtlv {
                                             uint32 type = 1 [json_name = "type"];
                                             message State {
                                                uint32 type = 1 [json_name = "type"];
                                                uint32 length = 2 [json_name = "length"];
                                                bytes value = 3 [json_name = "value"];
                                             }
                                             State state = 2 [json_name = "state"];
                                          }
                                          repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                       }
                                       UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                    }
                                    repeated Capability capability = 1 [json_name = "capability"];
                                 }
                                 RouterCapabilities router_capabilities = 15 [json_name = "router-capabilities"];
                                 message IsReachability {
                                    message Neighbors {
                                       message Neighbor {
                                          string system_id = 1 [json_name = "system-id"];
                                          message State {
                                             string system_id = 1 [json_name = "system-id"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message DefaultMetric {
                                             message State {
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                };
                                                Flags flags = 1 [json_name = "flags"];
                                                uint32 metric = 2 [json_name = "metric"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DefaultMetric default_metric = 3 [json_name = "default-metric"];
                                          message DelayMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DelayMetric delay_metric = 4 [json_name = "delay-metric"];
                                          message ExpenseMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ExpenseMetric expense_metric = 5 [json_name = "expense-metric"];
                                          message ErrorMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ErrorMetric error_metric = 6 [json_name = "error-metric"];
                                       }
                                       repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                                    }
                                    Neighbors neighbors = 1 [json_name = "neighbors"];
                                 }
                                 IsReachability is_reachability = 16 [json_name = "is-reachability"];
                                 message Ipv4InternalReachability {
                                    message Prefixes {
                                       message Prefix {
                                          string prefix15 = 1 [json_name = "prefix"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             string prefix16 = 2 [json_name = "prefix"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message DefaultMetric {
                                             message State {
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                };
                                                Flags flags = 1 [json_name = "flags"];
                                                uint32 metric = 2 [json_name = "metric"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DefaultMetric default_metric = 3 [json_name = "default-metric"];
                                          message DelayMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DelayMetric delay_metric = 4 [json_name = "delay-metric"];
                                          message ExpenseMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ExpenseMetric expense_metric = 5 [json_name = "expense-metric"];
                                          message ErrorMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ErrorMetric error_metric = 6 [json_name = "error-metric"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 Ipv4InternalReachability ipv4_internal_reachability = 17 [json_name = "ipv4-internal-reachability"];
                                 message Ipv4ExternalReachability {
                                    message Prefixes {
                                       message Prefix {
                                          string prefix15 = 1 [json_name = "prefix"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             string prefix16 = 2 [json_name = "prefix"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message DefaultMetric {
                                             message State {
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                };
                                                Flags flags = 1 [json_name = "flags"];
                                                uint32 metric = 2 [json_name = "metric"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DefaultMetric default_metric = 3 [json_name = "default-metric"];
                                          message DelayMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          DelayMetric delay_metric = 4 [json_name = "delay-metric"];
                                          message ExpenseMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ExpenseMetric expense_metric = 5 [json_name = "expense-metric"];
                                          message ErrorMetric {
                                             message State {
                                                uint32 metric = 1 [json_name = "metric"];
                                                enum Flags {
                                                   Flags_INTERNAL = 0;
                                                   Flags_UNSUPPORTED = 1;
                                                };
                                                repeated Flags flags = 2 [json_name = "flags"];
                                             }
                                             State state = 1 [json_name = "state"];
                                          }
                                          ErrorMetric error_metric = 6 [json_name = "error-metric"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 Ipv4ExternalReachability ipv4_external_reachability = 18 [json_name = "ipv4-external-reachability"];
                                 message Authentication {
                                    message State {
                                       enum CryptoType {
                                          CryptoType_HMAC_MD5 = 0;
                                          CryptoType_CLEARTEXT = 1;
                                       };
                                       CryptoType crypto_type = 1 [json_name = "crypto-type"];
                                       string authentication_key = 2 [json_name = "authentication-key"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 Authentication authentication = 19 [json_name = "authentication"];
                                 message ExtendedIsReachability {
                                    message Neighbors {
                                       message Neighbor {
                                          string system_id = 1 [json_name = "system-id"];
                                          message State {
                                             string system_id = 1 [json_name = "system-id"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message Instances {
                                             message Instance {
                                                uint64 id = 1 [json_name = "id"];
                                                message State {
                                                   uint64 id = 1 [json_name = "id"];
                                                   uint32 metric = 2 [json_name = "metric"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Subtlvs {
                                                   message Subtlv {
                                                      string type = 1 [json_name = "type"];
                                                      message State {
                                                         string type = 1 [json_name = "type"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                      message AdminGroup {
                                                         message State {
                                                            repeated uint32 admin_group = 1 [json_name = "admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AdminGroup admin_group = 3 [json_name = "admin-group"];
                                                      message LinkId {
                                                         message State {
                                                            uint32 local = 1 [json_name = "local"];
                                                            uint32 remote = 2 [json_name = "remote"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkId link_id = 4 [json_name = "link-id"];
                                                      message Ipv4InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4InterfaceAddress ipv4_interface_address = 5 [json_name = "ipv4-interface-address"];
                                                      message Ipv4NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4NeighborAddress ipv4_neighbor_address = 6 [json_name = "ipv4-neighbor-address"];
                                                      message MaxLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxLinkBandwidth max_link_bandwidth = 7 [json_name = "max-link-bandwidth"];
                                                      message MaxReservableLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxReservableLinkBandwidth max_reservable_link_bandwidth = 8 [json_name = "max-reservable-link-bandwidth"];
                                                      message UnreservedBandwidth {
                                                         message SetupPriority {
                                                            uint32 priority = 1 [json_name = "priority"];
                                                            message State {
                                                               uint32 priority = 1 [json_name = "priority"];
                                                               bytes bandwidth = 2 [json_name = "bandwidth"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated SetupPriority setup_priority = 1 [json_name = "setup-priority"];
                                                      }
                                                      UnreservedBandwidth unreserved_bandwidth = 9 [json_name = "unreserved-bandwidth"];
                                                      message Ipv6InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6InterfaceAddress ipv6_interface_address = 10 [json_name = "ipv6-interface-address"];
                                                      message Ipv6NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6NeighborAddress ipv6_neighbor_address = 11 [json_name = "ipv6-neighbor-address"];
                                                      message ExtendedAdminGroup {
                                                         message State {
                                                            repeated uint32 extended_admin_group = 1 [json_name = "extended-admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ExtendedAdminGroup extended_admin_group = 12 [json_name = "extended-admin-group"];
                                                      message TeDefaultMetric {
                                                         message State {
                                                            uint32 metric = 1 [json_name = "metric"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      TeDefaultMetric te_default_metric = 13 [json_name = "te-default-metric"];
                                                      message LinkAttributes {
                                                         message State {
                                                            enum LocalProtection {
                                                               LocalProtection_LOCAL_PROTECTION = 0;
                                                               LocalProtection_LINK_EXCLUDED = 1;
                                                            };
                                                            repeated LocalProtection local_protection = 1 [json_name = "local-protection"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkAttributes link_attributes = 14 [json_name = "link-attributes"];
                                                      message LinkProtectionType {
                                                         message State {
                                                            enum Type {
                                                               Type_EXTRA_TRAFFIC = 0;
                                                               Type_UNPROTECTED = 1;
                                                               Type_SHARED = 2;
                                                               Type_ONE_ONE = 3;
                                                               Type_PLUS_ONE = 4;
                                                               Type_ENHANCED = 5;
                                                            };
                                                            repeated Type type = 1 [json_name = "type"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkProtectionType link_protection_type = 15 [json_name = "link-protection-type"];
                                                      message BandwidthConstraints {
                                                         message BandwidthConstraint {
                                                            uint32 model_id = 1 [json_name = "model-id"];
                                                            message State {
                                                               uint32 model_id = 1 [json_name = "model-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                            message Constraints {
                                                               message Constraint {
                                                                  uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                  message State {
                                                                     uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                     bytes bandwidth = 2 [json_name = "bandwidth"];
                                                                  }
                                                                  State state = 2 [json_name = "state"];
                                                               }
                                                               repeated Constraint constraint = 1 [json_name = "constraint"];
                                                            }
                                                            Constraints constraints = 3 [json_name = "constraints"];
                                                         }
                                                         repeated BandwidthConstraint bandwidth_constraint = 1 [json_name = "bandwidth-constraint"];
                                                      }
                                                      BandwidthConstraints bandwidth_constraints = 16 [json_name = "bandwidth-constraints"];
                                                      message UnconstrainedLsp {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 count = 2 [json_name = "count"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UnconstrainedLsp unconstrained_lsp = 17 [json_name = "unconstrained-lsp"];
                                                      message AdjacencySids {
                                                         message AdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated AdjacencySid adjacency_sid = 1 [json_name = "adjacency-sid"];
                                                      }
                                                      AdjacencySids adjacency_sids = 18 [json_name = "adjacency-sids"];
                                                      message LanAdjacencySids {
                                                         message LanAdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                               string neighbor_id = 4 [json_name = "neighbor-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated LanAdjacencySid lan_adjacency_sid = 1 [json_name = "lan-adjacency-sid"];
                                                      }
                                                      LanAdjacencySids lan_adjacency_sids = 19 [json_name = "lan-adjacency-sids"];
                                                      message LinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 delay = 2 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelay link_delay = 20 [json_name = "link-delay"];
                                                      message MinMaxLinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 min_delay = 2 [json_name = "min-delay"];
                                                            uint32 max_delay = 3 [json_name = "max-delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MinMaxLinkDelay min_max_link_delay = 21 [json_name = "min-max-link-delay"];
                                                      message LinkDelayVariation {
                                                         message State {
                                                            uint32 delay = 1 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelayVariation link_delay_variation = 22 [json_name = "link-delay-variation"];
                                                      message LinkLoss {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 link_loss = 2 [json_name = "link-loss"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkLoss link_loss = 23 [json_name = "link-loss"];
                                                      message ResidualBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ResidualBandwidth residual_bandwidth = 24 [json_name = "residual-bandwidth"];
                                                      message AvailableBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AvailableBandwidth available_bandwidth = 25 [json_name = "available-bandwidth"];
                                                      message UtilizedBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UtilizedBandwidth utilized_bandwidth = 26 [json_name = "utilized-bandwidth"];
                                                   }
                                                   repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                                }
                                                Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                                message UndefinedSubtlvs {
                                                   message UndefinedSubtlv {
                                                      uint32 type = 1 [json_name = "type"];
                                                      message State {
                                                         uint32 type = 1 [json_name = "type"];
                                                         uint32 length = 2 [json_name = "length"];
                                                         bytes value = 3 [json_name = "value"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                                }
                                                UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                             }
                                             repeated Instance instance = 1 [json_name = "instance"];
                                          }
                                          Instances instances = 3 [json_name = "instances"];
                                       }
                                       repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                                    }
                                    Neighbors neighbors = 1 [json_name = "neighbors"];
                                 }
                                 ExtendedIsReachability extended_is_reachability = 20 [json_name = "extended-is-reachability"];
                                 message ExtendedIpv4Reachability {
                                    message Prefixes {
                                       message Prefix {
                                          string prefix15 = 1 [json_name = "prefix"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             bool s_bit = 2 [json_name = "s-bit"];
                                             string prefix16 = 3 [json_name = "prefix"];
                                             uint32 metric = 4 [json_name = "metric"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message Subtlvs {
                                             message Subtlv {
                                                string type = 1 [json_name = "type"];
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Tag {
                                                   message State {
                                                      repeated uint32 tag32 = 1 [json_name = "tag32"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag tag = 3 [json_name = "tag"];
                                                message Tag64 {
                                                   message State {
                                                      repeated uint64 tag6419 = 1 [json_name = "tag64"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag64 tag64 = 4 [json_name = "tag64"];
                                                message Flags {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      enum Flags19 {
                                                         Flags19_EXTERNAL_FLAG = 0;
                                                         Flags19_READVERTISEMENT_FLAG = 1;
                                                         Flags19_NODE_FLAG = 2;
                                                      };
                                                      repeated Flags19 flags19 = 2 [json_name = "flags"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Flags flags = 5 [json_name = "flags"];
                                                message Ipv4SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv4SourceRouterId ipv4_source_router_id = 6 [json_name = "ipv4-source-router-id"];
                                                message Ipv6SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv6SourceRouterId ipv6_source_router_id = 7 [json_name = "ipv6-source-router-id"];
                                                message PrefixSids {
                                                   message PrefixSid {
                                                      uint32 value = 1 [json_name = "value"];
                                                      message State {
                                                         uint32 value = 1 [json_name = "value"];
                                                         enum Flags {
                                                            Flags_READVERTISEMENT = 0;
                                                            Flags_NODE = 1;
                                                            Flags_NO_PHP = 2;
                                                            Flags_EXPLICIT_NULL = 3;
                                                            Flags_VALUE = 4;
                                                            Flags_LOCAL = 5;
                                                         };
                                                         repeated Flags flags = 2 [json_name = "flags"];
                                                         uint32 algorithm = 3 [json_name = "algorithm"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                                                }
                                                PrefixSids prefix_sids = 8 [json_name = "prefix-sids"];
                                             }
                                             repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                          }
                                          Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                          message UndefinedSubtlvs {
                                             message UndefinedSubtlv {
                                                uint32 type = 1 [json_name = "type"];
                                                message State {
                                                   uint32 type = 1 [json_name = "type"];
                                                   uint32 length = 2 [json_name = "length"];
                                                   bytes value = 3 [json_name = "value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                          }
                                          UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 ExtendedIpv4Reachability extended_ipv4_reachability = 21 [json_name = "extended-ipv4-reachability"];
                                 message Ipv6Reachability {
                                    message Prefixes {
                                       message Prefix {
                                          string prefix15 = 1 [json_name = "prefix"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             bool x_bit = 2 [json_name = "x-bit"];
                                             bool s_bit = 3 [json_name = "s-bit"];
                                             string prefix16 = 4 [json_name = "prefix"];
                                             uint32 metric = 5 [json_name = "metric"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message Subtlvs {
                                             message Subtlv {
                                                string type = 1 [json_name = "type"];
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Tag {
                                                   message State {
                                                      repeated uint32 tag32 = 1 [json_name = "tag32"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag tag = 3 [json_name = "tag"];
                                                message Tag64 {
                                                   message State {
                                                      repeated uint64 tag6419 = 1 [json_name = "tag64"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag64 tag64 = 4 [json_name = "tag64"];
                                                message Flags {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      enum Flags19 {
                                                         Flags19_EXTERNAL_FLAG = 0;
                                                         Flags19_READVERTISEMENT_FLAG = 1;
                                                         Flags19_NODE_FLAG = 2;
                                                      };
                                                      repeated Flags19 flags19 = 2 [json_name = "flags"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Flags flags = 5 [json_name = "flags"];
                                                message Ipv4SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv4SourceRouterId ipv4_source_router_id = 6 [json_name = "ipv4-source-router-id"];
                                                message Ipv6SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv6SourceRouterId ipv6_source_router_id = 7 [json_name = "ipv6-source-router-id"];
                                                message PrefixSids {
                                                   message PrefixSid {
                                                      uint32 value = 1 [json_name = "value"];
                                                      message State {
                                                         uint32 value = 1 [json_name = "value"];
                                                         enum Flags {
                                                            Flags_READVERTISEMENT = 0;
                                                            Flags_NODE = 1;
                                                            Flags_NO_PHP = 2;
                                                            Flags_EXPLICIT_NULL = 3;
                                                            Flags_VALUE = 4;
                                                            Flags_LOCAL = 5;
                                                         };
                                                         repeated Flags flags = 2 [json_name = "flags"];
                                                         uint32 algorithm = 3 [json_name = "algorithm"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                                                }
                                                PrefixSids prefix_sids = 8 [json_name = "prefix-sids"];
                                             }
                                             repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                          }
                                          Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                          message UndefinedSubtlvs {
                                             message UndefinedSubtlv {
                                                uint32 type = 1 [json_name = "type"];
                                                message State {
                                                   uint32 type = 1 [json_name = "type"];
                                                   uint32 length = 2 [json_name = "length"];
                                                   bytes value = 3 [json_name = "value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                          }
                                          UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 Ipv6Reachability ipv6_reachability = 22 [json_name = "ipv6-reachability"];
                                 message MultiTopology {
                                    message Topologies {
                                       message Topology {
                                          uint32 mt_id = 1 [json_name = "mt-id"];
                                          message State {
                                             uint32 mt_id = 1 [json_name = "mt-id"];
                                             enum Attributes {
                                                Attributes_OVERLOAD = 0;
                                                Attributes_ATTACHED = 1;
                                             };
                                             Attributes attributes = 2 [json_name = "attributes"];
                                          }
                                          State state = 2 [json_name = "state"];
                                       }
                                       repeated Topology topology = 1 [json_name = "topology"];
                                    }
                                    Topologies topologies = 1 [json_name = "topologies"];
                                 }
                                 MultiTopology multi_topology = 23 [json_name = "multi-topology"];
                                 message IsisNeighborAttribute {
                                    message Neighbors {
                                       message Neighbor {
                                          string system_id = 1 [json_name = "system-id"];
                                          message State {
                                             string system_id = 1 [json_name = "system-id"];
                                          }
                                          State state = 2 [json_name = "state"];
                                          message Instances {
                                             message Instance {
                                                uint64 id = 1 [json_name = "id"];
                                                message State {
                                                   uint64 id = 1 [json_name = "id"];
                                                   uint32 metric = 2 [json_name = "metric"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Subtlvs {
                                                   message Subtlv {
                                                      string type = 1 [json_name = "type"];
                                                      message State {
                                                         string type = 1 [json_name = "type"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                      message AdminGroup {
                                                         message State {
                                                            repeated uint32 admin_group = 1 [json_name = "admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AdminGroup admin_group = 3 [json_name = "admin-group"];
                                                      message LinkId {
                                                         message State {
                                                            uint32 local = 1 [json_name = "local"];
                                                            uint32 remote = 2 [json_name = "remote"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkId link_id = 4 [json_name = "link-id"];
                                                      message Ipv4InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4InterfaceAddress ipv4_interface_address = 5 [json_name = "ipv4-interface-address"];
                                                      message Ipv4NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4NeighborAddress ipv4_neighbor_address = 6 [json_name = "ipv4-neighbor-address"];
                                                      message MaxLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxLinkBandwidth max_link_bandwidth = 7 [json_name = "max-link-bandwidth"];
                                                      message MaxReservableLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxReservableLinkBandwidth max_reservable_link_bandwidth = 8 [json_name = "max-reservable-link-bandwidth"];
                                                      message UnreservedBandwidth {
                                                         message SetupPriority {
                                                            uint32 priority = 1 [json_name = "priority"];
                                                            message State {
                                                               uint32 priority = 1 [json_name = "priority"];
                                                               bytes bandwidth = 2 [json_name = "bandwidth"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated SetupPriority setup_priority = 1 [json_name = "setup-priority"];
                                                      }
                                                      UnreservedBandwidth unreserved_bandwidth = 9 [json_name = "unreserved-bandwidth"];
                                                      message Ipv6InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6InterfaceAddress ipv6_interface_address = 10 [json_name = "ipv6-interface-address"];
                                                      message Ipv6NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6NeighborAddress ipv6_neighbor_address = 11 [json_name = "ipv6-neighbor-address"];
                                                      message ExtendedAdminGroup {
                                                         message State {
                                                            repeated uint32 extended_admin_group = 1 [json_name = "extended-admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ExtendedAdminGroup extended_admin_group = 12 [json_name = "extended-admin-group"];
                                                      message TeDefaultMetric {
                                                         message State {
                                                            uint32 metric = 1 [json_name = "metric"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      TeDefaultMetric te_default_metric = 13 [json_name = "te-default-metric"];
                                                      message LinkAttributes {
                                                         message State {
                                                            enum LocalProtection {
                                                               LocalProtection_LOCAL_PROTECTION = 0;
                                                               LocalProtection_LINK_EXCLUDED = 1;
                                                            };
                                                            repeated LocalProtection local_protection = 1 [json_name = "local-protection"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkAttributes link_attributes = 14 [json_name = "link-attributes"];
                                                      message LinkProtectionType {
                                                         message State {
                                                            enum Type {
                                                               Type_EXTRA_TRAFFIC = 0;
                                                               Type_UNPROTECTED = 1;
                                                               Type_SHARED = 2;
                                                               Type_ONE_ONE = 3;
                                                               Type_PLUS_ONE = 4;
                                                               Type_ENHANCED = 5;
                                                            };
                                                            repeated Type type = 1 [json_name = "type"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkProtectionType link_protection_type = 15 [json_name = "link-protection-type"];
                                                      message BandwidthConstraints {
                                                         message BandwidthConstraint {
                                                            uint32 model_id = 1 [json_name = "model-id"];
                                                            message State {
                                                               uint32 model_id = 1 [json_name = "model-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                            message Constraints {
                                                               message Constraint {
                                                                  uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                  message State {
                                                                     uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                     bytes bandwidth = 2 [json_name = "bandwidth"];
                                                                  }
                                                                  State state = 2 [json_name = "state"];
                                                               }
                                                               repeated Constraint constraint = 1 [json_name = "constraint"];
                                                            }
                                                            Constraints constraints = 3 [json_name = "constraints"];
                                                         }
                                                         repeated BandwidthConstraint bandwidth_constraint = 1 [json_name = "bandwidth-constraint"];
                                                      }
                                                      BandwidthConstraints bandwidth_constraints = 16 [json_name = "bandwidth-constraints"];
                                                      message UnconstrainedLsp {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 count = 2 [json_name = "count"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UnconstrainedLsp unconstrained_lsp = 17 [json_name = "unconstrained-lsp"];
                                                      message AdjacencySids {
                                                         message AdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated AdjacencySid adjacency_sid = 1 [json_name = "adjacency-sid"];
                                                      }
                                                      AdjacencySids adjacency_sids = 18 [json_name = "adjacency-sids"];
                                                      message LanAdjacencySids {
                                                         message LanAdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                               string neighbor_id = 4 [json_name = "neighbor-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated LanAdjacencySid lan_adjacency_sid = 1 [json_name = "lan-adjacency-sid"];
                                                      }
                                                      LanAdjacencySids lan_adjacency_sids = 19 [json_name = "lan-adjacency-sids"];
                                                      message LinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 delay = 2 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelay link_delay = 20 [json_name = "link-delay"];
                                                      message MinMaxLinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 min_delay = 2 [json_name = "min-delay"];
                                                            uint32 max_delay = 3 [json_name = "max-delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MinMaxLinkDelay min_max_link_delay = 21 [json_name = "min-max-link-delay"];
                                                      message LinkDelayVariation {
                                                         message State {
                                                            uint32 delay = 1 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelayVariation link_delay_variation = 22 [json_name = "link-delay-variation"];
                                                      message LinkLoss {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 link_loss = 2 [json_name = "link-loss"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkLoss link_loss = 23 [json_name = "link-loss"];
                                                      message ResidualBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ResidualBandwidth residual_bandwidth = 24 [json_name = "residual-bandwidth"];
                                                      message AvailableBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AvailableBandwidth available_bandwidth = 25 [json_name = "available-bandwidth"];
                                                      message UtilizedBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UtilizedBandwidth utilized_bandwidth = 26 [json_name = "utilized-bandwidth"];
                                                   }
                                                   repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                                }
                                                Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                                message UndefinedSubtlvs {
                                                   message UndefinedSubtlv {
                                                      uint32 type = 1 [json_name = "type"];
                                                      message State {
                                                         uint32 type = 1 [json_name = "type"];
                                                         uint32 length = 2 [json_name = "length"];
                                                         bytes value = 3 [json_name = "value"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                                }
                                                UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                             }
                                             repeated Instance instance = 1 [json_name = "instance"];
                                          }
                                          Instances instances = 3 [json_name = "instances"];
                                       }
                                       repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                                    }
                                    Neighbors neighbors = 1 [json_name = "neighbors"];
                                 }
                                 IsisNeighborAttribute isis_neighbor_attribute = 24 [json_name = "isis-neighbor-attribute"];
                                 message IsAliasId {
                                    message State {
                                       string alias_id = 1 [json_name = "alias-id"];
                                    }
                                    State state = 1 [json_name = "state"];
                                 }
                                 IsAliasId is_alias_id = 25 [json_name = "is-alias-id"];
                                 message MtIsn {
                                    message Neighbors {
                                       message Neighbor {
                                          uint32 mt_id = 1 [json_name = "mt-id"];
                                          string system_id = 2 [json_name = "system-id"];
                                          message State {
                                             uint32 mt_id = 1 [json_name = "mt-id"];
                                             string system_id = 2 [json_name = "system-id"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message Instances {
                                             message Instance {
                                                uint64 id = 1 [json_name = "id"];
                                                message State {
                                                   uint32 metric = 1 [json_name = "metric"];
                                                   uint64 id = 2 [json_name = "id"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Subtlvs {
                                                   message Subtlv {
                                                      string type = 1 [json_name = "type"];
                                                      message State {
                                                         string type = 1 [json_name = "type"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                      message AdminGroup {
                                                         message State {
                                                            repeated uint32 admin_group = 1 [json_name = "admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AdminGroup admin_group = 3 [json_name = "admin-group"];
                                                      message LinkId {
                                                         message State {
                                                            uint32 local = 1 [json_name = "local"];
                                                            uint32 remote = 2 [json_name = "remote"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkId link_id = 4 [json_name = "link-id"];
                                                      message Ipv4InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4InterfaceAddress ipv4_interface_address = 5 [json_name = "ipv4-interface-address"];
                                                      message Ipv4NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4NeighborAddress ipv4_neighbor_address = 6 [json_name = "ipv4-neighbor-address"];
                                                      message MaxLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxLinkBandwidth max_link_bandwidth = 7 [json_name = "max-link-bandwidth"];
                                                      message MaxReservableLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxReservableLinkBandwidth max_reservable_link_bandwidth = 8 [json_name = "max-reservable-link-bandwidth"];
                                                      message UnreservedBandwidth {
                                                         message SetupPriority {
                                                            uint32 priority = 1 [json_name = "priority"];
                                                            message State {
                                                               uint32 priority = 1 [json_name = "priority"];
                                                               bytes bandwidth = 2 [json_name = "bandwidth"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated SetupPriority setup_priority = 1 [json_name = "setup-priority"];
                                                      }
                                                      UnreservedBandwidth unreserved_bandwidth = 9 [json_name = "unreserved-bandwidth"];
                                                      message Ipv6InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6InterfaceAddress ipv6_interface_address = 10 [json_name = "ipv6-interface-address"];
                                                      message Ipv6NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6NeighborAddress ipv6_neighbor_address = 11 [json_name = "ipv6-neighbor-address"];
                                                      message ExtendedAdminGroup {
                                                         message State {
                                                            repeated uint32 extended_admin_group = 1 [json_name = "extended-admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ExtendedAdminGroup extended_admin_group = 12 [json_name = "extended-admin-group"];
                                                      message TeDefaultMetric {
                                                         message State {
                                                            uint32 metric = 1 [json_name = "metric"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      TeDefaultMetric te_default_metric = 13 [json_name = "te-default-metric"];
                                                      message LinkAttributes {
                                                         message State {
                                                            enum LocalProtection {
                                                               LocalProtection_LOCAL_PROTECTION = 0;
                                                               LocalProtection_LINK_EXCLUDED = 1;
                                                            };
                                                            repeated LocalProtection local_protection = 1 [json_name = "local-protection"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkAttributes link_attributes = 14 [json_name = "link-attributes"];
                                                      message LinkProtectionType {
                                                         message State {
                                                            enum Type {
                                                               Type_EXTRA_TRAFFIC = 0;
                                                               Type_UNPROTECTED = 1;
                                                               Type_SHARED = 2;
                                                               Type_ONE_ONE = 3;
                                                               Type_PLUS_ONE = 4;
                                                               Type_ENHANCED = 5;
                                                            };
                                                            repeated Type type = 1 [json_name = "type"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkProtectionType link_protection_type = 15 [json_name = "link-protection-type"];
                                                      message BandwidthConstraints {
                                                         message BandwidthConstraint {
                                                            uint32 model_id = 1 [json_name = "model-id"];
                                                            message State {
                                                               uint32 model_id = 1 [json_name = "model-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                            message Constraints {
                                                               message Constraint {
                                                                  uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                  message State {
                                                                     uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                     bytes bandwidth = 2 [json_name = "bandwidth"];
                                                                  }
                                                                  State state = 2 [json_name = "state"];
                                                               }
                                                               repeated Constraint constraint = 1 [json_name = "constraint"];
                                                            }
                                                            Constraints constraints = 3 [json_name = "constraints"];
                                                         }
                                                         repeated BandwidthConstraint bandwidth_constraint = 1 [json_name = "bandwidth-constraint"];
                                                      }
                                                      BandwidthConstraints bandwidth_constraints = 16 [json_name = "bandwidth-constraints"];
                                                      message UnconstrainedLsp {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 count = 2 [json_name = "count"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UnconstrainedLsp unconstrained_lsp = 17 [json_name = "unconstrained-lsp"];
                                                      message AdjacencySids {
                                                         message AdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated AdjacencySid adjacency_sid = 1 [json_name = "adjacency-sid"];
                                                      }
                                                      AdjacencySids adjacency_sids = 18 [json_name = "adjacency-sids"];
                                                      message LanAdjacencySids {
                                                         message LanAdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                               string neighbor_id = 4 [json_name = "neighbor-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated LanAdjacencySid lan_adjacency_sid = 1 [json_name = "lan-adjacency-sid"];
                                                      }
                                                      LanAdjacencySids lan_adjacency_sids = 19 [json_name = "lan-adjacency-sids"];
                                                      message LinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 delay = 2 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelay link_delay = 20 [json_name = "link-delay"];
                                                      message MinMaxLinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 min_delay = 2 [json_name = "min-delay"];
                                                            uint32 max_delay = 3 [json_name = "max-delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MinMaxLinkDelay min_max_link_delay = 21 [json_name = "min-max-link-delay"];
                                                      message LinkDelayVariation {
                                                         message State {
                                                            uint32 delay = 1 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelayVariation link_delay_variation = 22 [json_name = "link-delay-variation"];
                                                      message LinkLoss {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 link_loss = 2 [json_name = "link-loss"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkLoss link_loss = 23 [json_name = "link-loss"];
                                                      message ResidualBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ResidualBandwidth residual_bandwidth = 24 [json_name = "residual-bandwidth"];
                                                      message AvailableBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AvailableBandwidth available_bandwidth = 25 [json_name = "available-bandwidth"];
                                                      message UtilizedBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UtilizedBandwidth utilized_bandwidth = 26 [json_name = "utilized-bandwidth"];
                                                   }
                                                   repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                                }
                                                Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                                message UndefinedSubtlvs {
                                                   message UndefinedSubtlv {
                                                      uint32 type = 1 [json_name = "type"];
                                                      message State {
                                                         uint32 type = 1 [json_name = "type"];
                                                         uint32 length = 2 [json_name = "length"];
                                                         bytes value = 3 [json_name = "value"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                                }
                                                UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                             }
                                             repeated Instance instance = 1 [json_name = "instance"];
                                          }
                                          Instances instances = 4 [json_name = "instances"];
                                       }
                                       repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                                    }
                                    Neighbors neighbors = 1 [json_name = "neighbors"];
                                 }
                                 MtIsn mt_isn = 26 [json_name = "mt-isn"];
                                 message MtIsisNeighborAttribute {
                                    message Neighbors {
                                       message Neighbor {
                                          uint32 mt_id = 1 [json_name = "mt-id"];
                                          string system_id = 2 [json_name = "system-id"];
                                          message State {
                                             uint32 mt_id = 1 [json_name = "mt-id"];
                                             string system_id = 2 [json_name = "system-id"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message Instances {
                                             message Instance {
                                                uint64 id = 1 [json_name = "id"];
                                                message State {
                                                   uint32 metric = 1 [json_name = "metric"];
                                                   uint64 id = 2 [json_name = "id"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Subtlvs {
                                                   message Subtlv {
                                                      string type = 1 [json_name = "type"];
                                                      message State {
                                                         string type = 1 [json_name = "type"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                      message AdminGroup {
                                                         message State {
                                                            repeated uint32 admin_group = 1 [json_name = "admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AdminGroup admin_group = 3 [json_name = "admin-group"];
                                                      message LinkId {
                                                         message State {
                                                            uint32 local = 1 [json_name = "local"];
                                                            uint32 remote = 2 [json_name = "remote"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkId link_id = 4 [json_name = "link-id"];
                                                      message Ipv4InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4InterfaceAddress ipv4_interface_address = 5 [json_name = "ipv4-interface-address"];
                                                      message Ipv4NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv4NeighborAddress ipv4_neighbor_address = 6 [json_name = "ipv4-neighbor-address"];
                                                      message MaxLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxLinkBandwidth max_link_bandwidth = 7 [json_name = "max-link-bandwidth"];
                                                      message MaxReservableLinkBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MaxReservableLinkBandwidth max_reservable_link_bandwidth = 8 [json_name = "max-reservable-link-bandwidth"];
                                                      message UnreservedBandwidth {
                                                         message SetupPriority {
                                                            uint32 priority = 1 [json_name = "priority"];
                                                            message State {
                                                               uint32 priority = 1 [json_name = "priority"];
                                                               bytes bandwidth = 2 [json_name = "bandwidth"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated SetupPriority setup_priority = 1 [json_name = "setup-priority"];
                                                      }
                                                      UnreservedBandwidth unreserved_bandwidth = 9 [json_name = "unreserved-bandwidth"];
                                                      message Ipv6InterfaceAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6InterfaceAddress ipv6_interface_address = 10 [json_name = "ipv6-interface-address"];
                                                      message Ipv6NeighborAddress {
                                                         message State {
                                                            repeated string address = 1 [json_name = "address"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      Ipv6NeighborAddress ipv6_neighbor_address = 11 [json_name = "ipv6-neighbor-address"];
                                                      message ExtendedAdminGroup {
                                                         message State {
                                                            repeated uint32 extended_admin_group = 1 [json_name = "extended-admin-group"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ExtendedAdminGroup extended_admin_group = 12 [json_name = "extended-admin-group"];
                                                      message TeDefaultMetric {
                                                         message State {
                                                            uint32 metric = 1 [json_name = "metric"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      TeDefaultMetric te_default_metric = 13 [json_name = "te-default-metric"];
                                                      message LinkAttributes {
                                                         message State {
                                                            enum LocalProtection {
                                                               LocalProtection_LOCAL_PROTECTION = 0;
                                                               LocalProtection_LINK_EXCLUDED = 1;
                                                            };
                                                            repeated LocalProtection local_protection = 1 [json_name = "local-protection"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkAttributes link_attributes = 14 [json_name = "link-attributes"];
                                                      message LinkProtectionType {
                                                         message State {
                                                            enum Type {
                                                               Type_EXTRA_TRAFFIC = 0;
                                                               Type_UNPROTECTED = 1;
                                                               Type_SHARED = 2;
                                                               Type_ONE_ONE = 3;
                                                               Type_PLUS_ONE = 4;
                                                               Type_ENHANCED = 5;
                                                            };
                                                            repeated Type type = 1 [json_name = "type"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkProtectionType link_protection_type = 15 [json_name = "link-protection-type"];
                                                      message BandwidthConstraints {
                                                         message BandwidthConstraint {
                                                            uint32 model_id = 1 [json_name = "model-id"];
                                                            message State {
                                                               uint32 model_id = 1 [json_name = "model-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                            message Constraints {
                                                               message Constraint {
                                                                  uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                  message State {
                                                                     uint32 constraint_id = 1 [json_name = "constraint-id"];
                                                                     bytes bandwidth = 2 [json_name = "bandwidth"];
                                                                  }
                                                                  State state = 2 [json_name = "state"];
                                                               }
                                                               repeated Constraint constraint = 1 [json_name = "constraint"];
                                                            }
                                                            Constraints constraints = 3 [json_name = "constraints"];
                                                         }
                                                         repeated BandwidthConstraint bandwidth_constraint = 1 [json_name = "bandwidth-constraint"];
                                                      }
                                                      BandwidthConstraints bandwidth_constraints = 16 [json_name = "bandwidth-constraints"];
                                                      message UnconstrainedLsp {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            uint32 count = 2 [json_name = "count"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UnconstrainedLsp unconstrained_lsp = 17 [json_name = "unconstrained-lsp"];
                                                      message AdjacencySids {
                                                         message AdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated AdjacencySid adjacency_sid = 1 [json_name = "adjacency-sid"];
                                                      }
                                                      AdjacencySids adjacency_sids = 18 [json_name = "adjacency-sids"];
                                                      message LanAdjacencySids {
                                                         message LanAdjacencySid {
                                                            uint32 value = 1 [json_name = "value"];
                                                            message State {
                                                               uint32 value = 1 [json_name = "value"];
                                                               enum Flags {
                                                                  Flags_ADDRESS_FAMILY = 0;
                                                                  Flags_BACKUP = 1;
                                                                  Flags_VALUE = 2;
                                                                  Flags_LOCAL = 3;
                                                                  Flags_SET = 4;
                                                               };
                                                               repeated Flags flags = 2 [json_name = "flags"];
                                                               uint32 weight = 3 [json_name = "weight"];
                                                               string neighbor_id = 4 [json_name = "neighbor-id"];
                                                            }
                                                            State state = 2 [json_name = "state"];
                                                         }
                                                         repeated LanAdjacencySid lan_adjacency_sid = 1 [json_name = "lan-adjacency-sid"];
                                                      }
                                                      LanAdjacencySids lan_adjacency_sids = 19 [json_name = "lan-adjacency-sids"];
                                                      message LinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 delay = 2 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelay link_delay = 20 [json_name = "link-delay"];
                                                      message MinMaxLinkDelay {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 min_delay = 2 [json_name = "min-delay"];
                                                            uint32 max_delay = 3 [json_name = "max-delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      MinMaxLinkDelay min_max_link_delay = 21 [json_name = "min-max-link-delay"];
                                                      message LinkDelayVariation {
                                                         message State {
                                                            uint32 delay = 1 [json_name = "delay"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkDelayVariation link_delay_variation = 22 [json_name = "link-delay-variation"];
                                                      message LinkLoss {
                                                         message State {
                                                            bool a_bit = 1 [json_name = "a-bit"];
                                                            uint32 link_loss = 2 [json_name = "link-loss"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      LinkLoss link_loss = 23 [json_name = "link-loss"];
                                                      message ResidualBandwidth {
                                                         message State {
                                                            bytes bandwidth = 1 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      ResidualBandwidth residual_bandwidth = 24 [json_name = "residual-bandwidth"];
                                                      message AvailableBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      AvailableBandwidth available_bandwidth = 25 [json_name = "available-bandwidth"];
                                                      message UtilizedBandwidth {
                                                         message State {
                                                            string type = 1 [json_name = "type"];
                                                            bytes bandwidth = 2 [json_name = "bandwidth"];
                                                         }
                                                         State state = 1 [json_name = "state"];
                                                      }
                                                      UtilizedBandwidth utilized_bandwidth = 26 [json_name = "utilized-bandwidth"];
                                                   }
                                                   repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                                }
                                                Subtlvs subtlvs = 3 [json_name = "subtlvs"];
                                                message UndefinedSubtlvs {
                                                   message UndefinedSubtlv {
                                                      uint32 type = 1 [json_name = "type"];
                                                      message State {
                                                         uint32 type = 1 [json_name = "type"];
                                                         uint32 length = 2 [json_name = "length"];
                                                         bytes value = 3 [json_name = "value"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                                }
                                                UndefinedSubtlvs undefined_subtlvs = 4 [json_name = "undefined-subtlvs"];
                                             }
                                             repeated Instance instance = 1 [json_name = "instance"];
                                          }
                                          Instances instances = 4 [json_name = "instances"];
                                       }
                                       repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                                    }
                                    Neighbors neighbors = 1 [json_name = "neighbors"];
                                 }
                                 MtIsisNeighborAttribute mt_isis_neighbor_attribute = 27 [json_name = "mt-isis-neighbor-attribute"];
                                 message MtIpv4Reachability {
                                    message Prefixes {
                                       message Prefix {
                                          uint32 mt_id = 1 [json_name = "mt-id"];
                                          string prefix15 = 2 [json_name = "prefix"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             bool s_bit = 2 [json_name = "s-bit"];
                                             string prefix16 = 3 [json_name = "prefix"];
                                             uint32 metric = 4 [json_name = "metric"];
                                             uint32 mt_id = 5 [json_name = "mt-id"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message Subtlvs {
                                             message Subtlv {
                                                string type = 1 [json_name = "type"];
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Tag {
                                                   message State {
                                                      repeated uint32 tag32 = 1 [json_name = "tag32"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag tag = 3 [json_name = "tag"];
                                                message Tag64 {
                                                   message State {
                                                      repeated uint64 tag6419 = 1 [json_name = "tag64"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag64 tag64 = 4 [json_name = "tag64"];
                                                message Flags {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      enum Flags19 {
                                                         Flags19_EXTERNAL_FLAG = 0;
                                                         Flags19_READVERTISEMENT_FLAG = 1;
                                                         Flags19_NODE_FLAG = 2;
                                                      };
                                                      repeated Flags19 flags19 = 2 [json_name = "flags"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Flags flags = 5 [json_name = "flags"];
                                                message Ipv4SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv4SourceRouterId ipv4_source_router_id = 6 [json_name = "ipv4-source-router-id"];
                                                message Ipv6SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv6SourceRouterId ipv6_source_router_id = 7 [json_name = "ipv6-source-router-id"];
                                                message PrefixSids {
                                                   message PrefixSid {
                                                      uint32 value = 1 [json_name = "value"];
                                                      message State {
                                                         uint32 value = 1 [json_name = "value"];
                                                         enum Flags {
                                                            Flags_READVERTISEMENT = 0;
                                                            Flags_NODE = 1;
                                                            Flags_NO_PHP = 2;
                                                            Flags_EXPLICIT_NULL = 3;
                                                            Flags_VALUE = 4;
                                                            Flags_LOCAL = 5;
                                                         };
                                                         repeated Flags flags = 2 [json_name = "flags"];
                                                         uint32 algorithm = 3 [json_name = "algorithm"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                                                }
                                                PrefixSids prefix_sids = 8 [json_name = "prefix-sids"];
                                             }
                                             repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                          }
                                          Subtlvs subtlvs = 4 [json_name = "subtlvs"];
                                          message UndefinedSubtlvs {
                                             message UndefinedSubtlv {
                                                uint32 type = 1 [json_name = "type"];
                                                message State {
                                                   uint32 type = 1 [json_name = "type"];
                                                   uint32 length = 2 [json_name = "length"];
                                                   bytes value = 3 [json_name = "value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                          }
                                          UndefinedSubtlvs undefined_subtlvs = 5 [json_name = "undefined-subtlvs"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 MtIpv4Reachability mt_ipv4_reachability = 28 [json_name = "mt-ipv4-reachability"];
                                 message MtIpv6Reachability {
                                    message Prefixes {
                                       message Prefix {
                                          string prefix15 = 1 [json_name = "prefix"];
                                          uint32 mt_id = 2 [json_name = "mt-id"];
                                          message State {
                                             bool up_down = 1 [json_name = "up-down"];
                                             bool x_bit = 2 [json_name = "x-bit"];
                                             bool s_bit = 3 [json_name = "s-bit"];
                                             string prefix16 = 4 [json_name = "prefix"];
                                             uint32 metric = 5 [json_name = "metric"];
                                             uint32 mt_id = 6 [json_name = "mt-id"];
                                          }
                                          State state = 3 [json_name = "state"];
                                          message Subtlvs {
                                             message Subtlv {
                                                string type = 1 [json_name = "type"];
                                                message State {
                                                   string type = 1 [json_name = "type"];
                                                }
                                                State state = 2 [json_name = "state"];
                                                message Tag {
                                                   message State {
                                                      repeated uint32 tag32 = 1 [json_name = "tag32"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag tag = 3 [json_name = "tag"];
                                                message Tag64 {
                                                   message State {
                                                      repeated uint64 tag6419 = 1 [json_name = "tag64"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Tag64 tag64 = 4 [json_name = "tag64"];
                                                message Flags {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      enum Flags19 {
                                                         Flags19_EXTERNAL_FLAG = 0;
                                                         Flags19_READVERTISEMENT_FLAG = 1;
                                                         Flags19_NODE_FLAG = 2;
                                                      };
                                                      repeated Flags19 flags19 = 2 [json_name = "flags"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Flags flags = 5 [json_name = "flags"];
                                                message Ipv4SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv4SourceRouterId ipv4_source_router_id = 6 [json_name = "ipv4-source-router-id"];
                                                message Ipv6SourceRouterId {
                                                   message State {
                                                      string type = 1 [json_name = "type"];
                                                      string router_id = 2 [json_name = "router-id"];
                                                   }
                                                   State state = 1 [json_name = "state"];
                                                }
                                                Ipv6SourceRouterId ipv6_source_router_id = 7 [json_name = "ipv6-source-router-id"];
                                                message PrefixSids {
                                                   message PrefixSid {
                                                      uint32 value = 1 [json_name = "value"];
                                                      message State {
                                                         uint32 value = 1 [json_name = "value"];
                                                         enum Flags {
                                                            Flags_READVERTISEMENT = 0;
                                                            Flags_NODE = 1;
                                                            Flags_NO_PHP = 2;
                                                            Flags_EXPLICIT_NULL = 3;
                                                            Flags_VALUE = 4;
                                                            Flags_LOCAL = 5;
                                                         };
                                                         repeated Flags flags = 2 [json_name = "flags"];
                                                         uint32 algorithm = 3 [json_name = "algorithm"];
                                                      }
                                                      State state = 2 [json_name = "state"];
                                                   }
                                                   repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                                                }
                                                PrefixSids prefix_sids = 8 [json_name = "prefix-sids"];
                                             }
                                             repeated Subtlv subtlv = 1 [json_name = "subtlv"];
                                          }
                                          Subtlvs subtlvs = 4 [json_name = "subtlvs"];
                                          message UndefinedSubtlvs {
                                             message UndefinedSubtlv {
                                                uint32 type = 1 [json_name = "type"];
                                                message State {
                                                   uint32 type = 1 [json_name = "type"];
                                                   uint32 length = 2 [json_name = "length"];
                                                   bytes value = 3 [json_name = "value"];
                                                }
                                                State state = 2 [json_name = "state"];
                                             }
                                             repeated UndefinedSubtlv undefined_subtlv = 1 [json_name = "undefined-subtlv"];
                                          }
                                          UndefinedSubtlvs undefined_subtlvs = 5 [json_name = "undefined-subtlvs"];
                                       }
                                       repeated Prefix prefix = 1 [json_name = "prefix"];
                                    }
                                    Prefixes prefixes = 1 [json_name = "prefixes"];
                                 }
                                 MtIpv6Reachability mt_ipv6_reachability = 29 [json_name = "mt-ipv6-reachability"];
                              }
                              repeated Tlv tlv = 1 [json_name = "tlv"];
                           }
                           Tlvs tlvs = 3 [json_name = "tlvs"];
                           message UndefinedTlvs {
                              message UndefinedTlv {
                                 uint32 type = 1 [json_name = "type"];
                                 message State {
                                    uint32 type = 1 [json_name = "type"];
                                    uint32 length = 2 [json_name = "length"];
                                    bytes value = 3 [json_name = "value"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              repeated UndefinedTlv undefined_tlv = 1 [json_name = "undefined-tlv"];
                           }
                           UndefinedTlvs undefined_tlvs = 4 [json_name = "undefined-tlvs"];
                        }
                        repeated Lsp lsp = 1 [json_name = "lsp"];
                     }
                     LinkStateDatabase link_state_database = 5 [json_name = "link-state-database"];
                     message TrafficEngineering {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                           string ipv4_router_id = 2 [json_name = "ipv4-router-id"];
                           string ipv6_router_id = 3 [json_name = "ipv6-router-id"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                           string ipv4_router_id = 2 [json_name = "ipv4-router-id"];
                           string ipv6_router_id = 3 [json_name = "ipv6-router-id"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     TrafficEngineering traffic_engineering = 6 [json_name = "traffic-engineering"];
                     message RoutePreference {
                        message Config {
                           uint32 external_route_preference = 1 [json_name = "external-route-preference"];
                           uint32 internal_route_preference = 2 [json_name = "internal-route-preference"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 external_route_preference = 1 [json_name = "external-route-preference"];
                           uint32 internal_route_preference = 2 [json_name = "internal-route-preference"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     RoutePreference route_preference = 7 [json_name = "route-preference"];
                     message Authentication {
                        message Config {
                           bool csnp_authentication = 1 [json_name = "csnp-authentication"];
                           bool psnp_authentication = 2 [json_name = "psnp-authentication"];
                           bool lsp_authentication = 3 [json_name = "lsp-authentication"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool csnp_authentication = 1 [json_name = "csnp-authentication"];
                           bool psnp_authentication = 2 [json_name = "psnp-authentication"];
                           bool lsp_authentication = 3 [json_name = "lsp-authentication"];
                        }
                        State state = 2 [json_name = "state"];
                        message Key {
                           message Config {
                              string auth_password = 1 [json_name = "auth-password"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string auth_password = 1 [json_name = "auth-password"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Key key = 3 [json_name = "key"];
                        message Keychain {
                        }
                        Keychain keychain = 4 [json_name = "keychain"];
                     }
                     Authentication authentication = 8 [json_name = "authentication"];
                  }
                  repeated Level level = 1 [json_name = "level"];
               }
               Levels levels = 2 [json_name = "levels"];
               message Interfaces {
                  message Interface {
                     string interface_id = 1 [json_name = "interface-id"];
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        string interface_id = 2 [json_name = "interface-id"];
                        bool passive = 3 [json_name = "passive"];
                        enum HelloPadding {
                           HelloPadding_STRICT = 0;
                           HelloPadding_LOOSE = 1;
                           HelloPadding_ADAPTIVE = 2;
                           HelloPadding_DISABLE = 3;
                        };
                        HelloPadding hello_padding = 4 [json_name = "hello-padding"];
                        enum CircuitType {
                           CircuitType_POINT_TO_POINT = 0;
                           CircuitType_BROADCAST = 1;
                        };
                        CircuitType circuit_type = 5 [json_name = "circuit-type"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        string interface_id = 2 [json_name = "interface-id"];
                        bool passive = 3 [json_name = "passive"];
                        enum HelloPadding {
                           HelloPadding_STRICT = 0;
                           HelloPadding_LOOSE = 1;
                           HelloPadding_ADAPTIVE = 2;
                           HelloPadding_DISABLE = 3;
                        };
                        HelloPadding hello_padding = 4 [json_name = "hello-padding"];
                        enum CircuitType {
                           CircuitType_POINT_TO_POINT = 0;
                           CircuitType_BROADCAST = 1;
                        };
                        CircuitType circuit_type = 5 [json_name = "circuit-type"];
                     }
                     State state = 3 [json_name = "state"];
                     message CircuitCounters {
                        message State {
                           uint32 adj_changes = 1 [json_name = "adj-changes"];
                           uint32 init_fails = 2 [json_name = "init-fails"];
                           uint32 rejected_adj = 3 [json_name = "rejected-adj"];
                           uint32 id_field_len_mismatches = 4 [json_name = "id-field-len-mismatches"];
                           uint32 max_area_address_mismatches = 5 [json_name = "max-area-address-mismatches"];
                           uint32 auth_type_fails = 6 [json_name = "auth-type-fails"];
                           uint32 auth_fails = 7 [json_name = "auth-fails"];
                           uint32 lan_dis_changes = 8 [json_name = "lan-dis-changes"];
                           uint32 adj_number = 9 [json_name = "adj-number"];
                        }
                        State state = 1 [json_name = "state"];
                     }
                     CircuitCounters circuit_counters = 4 [json_name = "circuit-counters"];
                     message Authentication {
                        message Config {
                           bool hello_authentication = 1 [json_name = "hello-authentication"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool hello_authentication = 1 [json_name = "hello-authentication"];
                        }
                        State state = 2 [json_name = "state"];
                        message Key {
                           message Config {
                              string auth_password = 1 [json_name = "auth-password"];
                           }
                           Config config = 1 [json_name = "config"];
                           message State {
                              string auth_password = 1 [json_name = "auth-password"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        Key key = 3 [json_name = "key"];
                        message Keychain {
                        }
                        Keychain keychain = 4 [json_name = "keychain"];
                     }
                     Authentication authentication = 5 [json_name = "authentication"];
                     message AfiSafi {
                        message Af {
                           string afi_name = 1 [json_name = "afi-name"];
                           string safi_name = 2 [json_name = "safi-name"];
                           message Config {
                              string afi_name = 1 [json_name = "afi-name"];
                              string safi_name = 2 [json_name = "safi-name"];
                              bool enabled = 3 [json_name = "enabled"];
                           }
                           Config config = 3 [json_name = "config"];
                           message State {
                              string afi_name = 1 [json_name = "afi-name"];
                              string safi_name = 2 [json_name = "safi-name"];
                              bool enabled = 3 [json_name = "enabled"];
                           }
                           State state = 4 [json_name = "state"];
                        }
                        repeated Af af = 1 [json_name = "af"];
                     }
                     AfiSafi afi_safi = 6 [json_name = "afi-safi"];
                     message Levels {
                        message Level {
                           uint32 level_number = 1 [json_name = "level-number"];
                           message Config {
                              uint32 level_number = 1 [json_name = "level-number"];
                              bool passive = 2 [json_name = "passive"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool enabled = 4 [json_name = "enabled"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              uint32 level_number = 1 [json_name = "level-number"];
                              bool passive = 2 [json_name = "passive"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool enabled = 4 [json_name = "enabled"];
                           }
                           State state = 3 [json_name = "state"];
                           message PacketCounters {
                              message Lsp {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Lsp lsp = 1 [json_name = "lsp"];
                              message Iih {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Iih iih = 2 [json_name = "iih"];
                              message Ish {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Ish ish = 3 [json_name = "ish"];
                              message Esh {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Esh esh = 4 [json_name = "esh"];
                              message Psnp {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Psnp psnp = 5 [json_name = "psnp"];
                              message Csnp {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Csnp csnp = 6 [json_name = "csnp"];
                              message Unknown {
                                 message State {
                                    uint32 received = 1 [json_name = "received"];
                                    uint32 processed = 2 [json_name = "processed"];
                                    uint32 dropped = 3 [json_name = "dropped"];
                                    uint32 sent = 4 [json_name = "sent"];
                                    uint32 retransmit = 5 [json_name = "retransmit"];
                                 }
                                 State state = 1 [json_name = "state"];
                              }
                              Unknown unknown = 7 [json_name = "unknown"];
                           }
                           PacketCounters packet_counters = 4 [json_name = "packet-counters"];
                           message Adjacencies {
                              message Adjacency {
                                 string system_id = 1 [json_name = "system-id"];
                                 message State {
                                    string system_id = 1 [json_name = "system-id"];
                                    string neighbor_ipv4_address = 2 [json_name = "neighbor-ipv4-address"];
                                    string neighbor_ipv6_address = 3 [json_name = "neighbor-ipv6-address"];
                                    string neighbor_snpa = 4 [json_name = "neighbor-snpa"];
                                    uint32 local_extended_circuit_id = 5 [json_name = "local-extended-circuit-id"];
                                    uint32 neighbor_extended_circuit_id = 6 [json_name = "neighbor-extended-circuit-id"];
                                    uint32 priority = 7 [json_name = "priority"];
                                    string dis_system_id = 8 [json_name = "dis-system-id"];
                                    enum NeighborCircuitType {
                                       NeighborCircuitType_LEVEL_1 = 0;
                                       NeighborCircuitType_LEVEL_2 = 1;
                                       NeighborCircuitType_LEVEL_1_2 = 2;
                                    };
                                    NeighborCircuitType neighbor_circuit_type = 9 [json_name = "neighbor-circuit-type"];
                                    enum AdjacencyType {
                                       AdjacencyType_LEVEL_1 = 0;
                                       AdjacencyType_LEVEL_2 = 1;
                                       AdjacencyType_LEVEL_1_2 = 2;
                                    };
                                    AdjacencyType adjacency_type = 10 [json_name = "adjacency-type"];
                                    enum AdjacencyState {
                                       AdjacencyState_UP = 0;
                                       AdjacencyState_DOWN = 1;
                                       AdjacencyState_INIT = 2;
                                       AdjacencyState_FAILED = 3;
                                    };
                                    AdjacencyState adjacency_state = 11 [json_name = "adjacency-state"];
                                    uint32 remaining_hold_time = 12 [json_name = "remaining-hold-time"];
                                    uint32 up_time = 13 [json_name = "up-time"];
                                    bool multi_topology = 14 [json_name = "multi-topology"];
                                    repeated string topology = 15 [json_name = "topology"];
                                    bool restart_support = 16 [json_name = "restart-support"];
                                    bool restart_suppress = 17 [json_name = "restart-suppress"];
                                    bool restart_status = 18 [json_name = "restart-status"];
                                    repeated string area_address = 19 [json_name = "area-address"];
                                    enum Nlpid {
                                       Nlpid_IPV4 = 0;
                                       Nlpid_IPV6 = 1;
                                    };
                                    repeated Nlpid nlpid = 20 [json_name = "nlpid"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              repeated Adjacency adjacency = 1 [json_name = "adjacency"];
                           }
                           Adjacencies adjacencies = 5 [json_name = "adjacencies"];
                           message Timers {
                              message Config {
                                 uint32 hello_interval = 1 [json_name = "hello-interval"];
                                 uint32 hello_multiplier = 2 [json_name = "hello-multiplier"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 uint32 hello_interval = 1 [json_name = "hello-interval"];
                                 uint32 hello_multiplier = 2 [json_name = "hello-multiplier"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           Timers timers = 6 [json_name = "timers"];
                           message AfiSafi {
                              message Af {
                                 string afi_name = 1 [json_name = "afi-name"];
                                 string safi_name = 2 [json_name = "safi-name"];
                                 message Config {
                                    string afi_name = 1 [json_name = "afi-name"];
                                    string safi_name = 2 [json_name = "safi-name"];
                                    uint32 metric = 3 [json_name = "metric"];
                                    bool enabled = 4 [json_name = "enabled"];
                                 }
                                 Config config = 3 [json_name = "config"];
                                 message State {
                                    string afi_name = 1 [json_name = "afi-name"];
                                    string safi_name = 2 [json_name = "safi-name"];
                                    uint32 metric = 3 [json_name = "metric"];
                                    bool enabled = 4 [json_name = "enabled"];
                                 }
                                 State state = 4 [json_name = "state"];
                                 message SegmentRouting {
                                    message PrefixSids {
                                       message PrefixSid {
                                          string prefix = 1 [json_name = "prefix"];
                                          message Config {
                                             string prefix = 1 [json_name = "prefix"];
                                             string sid_id = 2 [json_name = "sid-id"];
                                             enum LabelOptions {
                                                LabelOptions_NO_PHP = 0;
                                                LabelOptions_EXPLICIT_NULL = 1;
                                             };
                                             LabelOptions label_options = 3 [json_name = "label-options"];
                                          }
                                          Config config = 2 [json_name = "config"];
                                          message State {
                                             string prefix = 1 [json_name = "prefix"];
                                             string sid_id = 2 [json_name = "sid-id"];
                                             enum LabelOptions {
                                                LabelOptions_NO_PHP = 0;
                                                LabelOptions_EXPLICIT_NULL = 1;
                                             };
                                             LabelOptions label_options = 3 [json_name = "label-options"];
                                          }
                                          State state = 3 [json_name = "state"];
                                       }
                                       repeated PrefixSid prefix_sid = 1 [json_name = "prefix-sid"];
                                    }
                                    PrefixSids prefix_sids = 1 [json_name = "prefix-sids"];
                                    message AdjacencySids {
                                       message AdjacencySid {
                                          string sid_id = 1 [json_name = "sid-id"];
                                          string neighbor = 2 [json_name = "neighbor"];
                                          message Config {
                                             string sid_id = 1 [json_name = "sid-id"];
                                             bool protection_eligible = 2 [json_name = "protection-eligible"];
                                             bool group = 3 [json_name = "group"];
                                             string neighbor = 4 [json_name = "neighbor"];
                                          }
                                          Config config = 3 [json_name = "config"];
                                          message State {
                                             string sid_id = 1 [json_name = "sid-id"];
                                             bool protection_eligible = 2 [json_name = "protection-eligible"];
                                             bool group = 3 [json_name = "group"];
                                             string neighbor = 4 [json_name = "neighbor"];
                                             string allocated_dynamic_local = 5 [json_name = "allocated-dynamic-local"];
                                          }
                                          State state = 4 [json_name = "state"];
                                       }
                                       repeated AdjacencySid adjacency_sid = 1 [json_name = "adjacency-sid"];
                                    }
                                    AdjacencySids adjacency_sids = 2 [json_name = "adjacency-sids"];
                                 }
                                 SegmentRouting segment_routing = 5 [json_name = "segment-routing"];
                              }
                              repeated Af af = 1 [json_name = "af"];
                           }
                           AfiSafi afi_safi = 7 [json_name = "afi-safi"];
                           message HelloAuthentication {
                              message Config {
                                 bool hello_authentication = 1 [json_name = "hello-authentication"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 bool hello_authentication = 1 [json_name = "hello-authentication"];
                              }
                              State state = 2 [json_name = "state"];
                              message Key {
                                 message Config {
                                    string auth_password = 1 [json_name = "auth-password"];
                                 }
                                 Config config = 1 [json_name = "config"];
                                 message State {
                                    string auth_password = 1 [json_name = "auth-password"];
                                 }
                                 State state = 2 [json_name = "state"];
                              }
                              Key key = 3 [json_name = "key"];
                              message Keychain {
                              }
                              Keychain keychain = 4 [json_name = "keychain"];
                           }
                           HelloAuthentication hello_authentication = 8 [json_name = "hello-authentication"];
                        }
                        repeated Level level = 1 [json_name = "level"];
                     }
                     Levels levels = 7 [json_name = "levels"];
                     message Timers {
                        message Config {
                           uint32 csnp_interval = 1 [json_name = "csnp-interval"];
                           uint64 lsp_pacing_interval = 2 [json_name = "lsp-pacing-interval"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           uint32 csnp_interval = 1 [json_name = "csnp-interval"];
                           uint64 lsp_pacing_interval = 2 [json_name = "lsp-pacing-interval"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Timers timers = 8 [json_name = "timers"];
                     message Bfd {
                        message Config {
                           bool bfd_tlv = 1 [json_name = "bfd-tlv"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool bfd_tlv = 1 [json_name = "bfd-tlv"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     Bfd bfd = 9 [json_name = "bfd"];
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 10 [json_name = "interface-ref"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 3 [json_name = "interfaces"];
            }
            Isis isis = 9 [json_name = "isis"];
            message Pim {
               message Global {
                  message Ssm {
                     message Config {
                        string ssm_ranges = 1 [json_name = "ssm-ranges"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string ssm_ranges = 1 [json_name = "ssm-ranges"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  Ssm ssm = 1 [json_name = "ssm"];
                  message RendezvousPoints {
                     message RendezvousPoint {
                        string address = 1 [json_name = "address"];
                        message Config {
                           string address = 1 [json_name = "address"];
                           string multicast_groups = 2 [json_name = "multicast-groups"];
                        }
                        Config config = 2 [json_name = "config"];
                        message State {
                           string address = 1 [json_name = "address"];
                           string multicast_groups = 2 [json_name = "multicast-groups"];
                        }
                        State state = 3 [json_name = "state"];
                     }
                     repeated RendezvousPoint rendezvous_point = 1 [json_name = "rendezvous-point"];
                  }
                  RendezvousPoints rendezvous_points = 2 [json_name = "rendezvous-points"];
                  message State {
                     uint32 neighbor_count = 1 [json_name = "neighbor-count"];
                     message Counters {
                        uint32 hello_messages = 1 [json_name = "hello-messages"];
                        uint32 join_prune_messages = 2 [json_name = "join-prune-messages"];
                        uint32 bootstrap_messages = 3 [json_name = "bootstrap-messages"];
                     }
                     Counters counters = 2 [json_name = "counters"];
                     uint32 maximum_groups = 3 [json_name = "maximum-groups"];
                  }
                  State state = 3 [json_name = "state"];
                  message SourcesJoined {
                     message Source {
                        string address = 1 [json_name = "address"];
                        message State {
                           string address = 1 [json_name = "address"];
                           string group = 2 [json_name = "group"];
                           string upstream_interface_id = 3 [json_name = "upstream-interface-id"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     repeated Source source = 1 [json_name = "source"];
                  }
                  SourcesJoined sources_joined = 4 [json_name = "sources-joined"];
                  message Config {
                     uint32 maximum_groups = 1 [json_name = "maximum-groups"];
                  }
                  Config config = 5 [json_name = "config"];
               }
               Global global = 1 [json_name = "global"];
               message Interfaces {
                  message Interface {
                     string interface_id = 1 [json_name = "interface-id"];
                     message Config {
                        bool enabled = 1 [json_name = "enabled"];
                        string interface_id = 2 [json_name = "interface-id"];
                        string mode = 3 [json_name = "mode"];
                        bool bsr_border = 4 [json_name = "bsr-border"];
                        bool border_router = 5 [json_name = "border-router"];
                        uint32 dr_priority = 6 [json_name = "dr-priority"];
                        uint32 join_prune_interval = 7 [json_name = "join-prune-interval"];
                        uint32 hello_interval = 8 [json_name = "hello-interval"];
                        uint32 dead_timer = 9 [json_name = "dead-timer"];
                        uint32 maximum_groups = 10 [json_name = "maximum-groups"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        bool enabled = 1 [json_name = "enabled"];
                        string interface_id = 2 [json_name = "interface-id"];
                        string mode = 3 [json_name = "mode"];
                        bool bsr_border = 4 [json_name = "bsr-border"];
                        bool border_router = 5 [json_name = "border-router"];
                        uint32 dr_priority = 6 [json_name = "dr-priority"];
                        uint32 join_prune_interval = 7 [json_name = "join-prune-interval"];
                        uint32 hello_interval = 8 [json_name = "hello-interval"];
                        uint32 dead_timer = 9 [json_name = "dead-timer"];
                        message Counters {
                           uint32 hello_messages = 1 [json_name = "hello-messages"];
                           uint32 join_prune_messages = 2 [json_name = "join-prune-messages"];
                           uint32 bootstrap_messages = 3 [json_name = "bootstrap-messages"];
                        }
                        Counters counters = 10 [json_name = "counters"];
                        uint32 maximum_groups = 11 [json_name = "maximum-groups"];
                     }
                     State state = 3 [json_name = "state"];
                     message Neighbors {
                        message Neighbor {
                           string neighbor_address = 1 [json_name = "neighbor-address"];
                           message State {
                              string neighbor_address = 1 [json_name = "neighbor-address"];
                              string dr_address = 2 [json_name = "dr-address"];
                              uint64 neighbor_established = 3 [json_name = "neighbor-established"];
                              uint64 neighbor_expires = 4 [json_name = "neighbor-expires"];
                              string mode = 5 [json_name = "mode"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        repeated Neighbor neighbor = 1 [json_name = "neighbor"];
                     }
                     Neighbors neighbors = 4 [json_name = "neighbors"];
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 5 [json_name = "interface-ref"];
                     message EnableBfd {
                        message Config {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           bool enabled = 1 [json_name = "enabled"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     EnableBfd enable_bfd = 6 [json_name = "enable-bfd"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
            }
            Pim pim = 10 [json_name = "pim"];
            message Igmp {
               message Global {
                  message Ssm {
                     message Mappings {
                        message Mapping {
                           string source = 1 [json_name = "source"];
                           message Config {
                              string source = 1 [json_name = "source"];
                              string ssm_ranges = 2 [json_name = "ssm-ranges"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string source = 1 [json_name = "source"];
                              string ssm_ranges = 2 [json_name = "ssm-ranges"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        repeated Mapping mapping = 1 [json_name = "mapping"];
                     }
                     Mappings mappings = 1 [json_name = "mappings"];
                  }
                  Ssm ssm = 1 [json_name = "ssm"];
               }
               Global global = 1 [json_name = "global"];
               message Interfaces {
                  message Interface {
                     string interface_id = 1 [json_name = "interface-id"];
                     message Config {
                        string interface_id = 1 [json_name = "interface-id"];
                        bool enabled = 2 [json_name = "enabled"];
                        uint32 version = 3 [json_name = "version"];
                        uint32 query_interval = 4 [json_name = "query-interval"];
                        string filter_prefixes = 5 [json_name = "filter-prefixes"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        uint64 query_expires = 1 [json_name = "query-expires"];
                        string interface_id = 2 [json_name = "interface-id"];
                        bool enabled = 3 [json_name = "enabled"];
                        uint32 version = 4 [json_name = "version"];
                        uint32 query_interval = 5 [json_name = "query-interval"];
                        string filter_prefixes = 6 [json_name = "filter-prefixes"];
                     }
                     State state = 3 [json_name = "state"];
                     message Counters {
                        message Queries {
                           message Sent {
                              message State {
                                 uint32 v1 = 1 [json_name = "v1"];
                                 uint32 v2 = 2 [json_name = "v2"];
                                 uint32 v3 = 3 [json_name = "v3"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           Sent sent = 1 [json_name = "sent"];
                           message Received {
                              message State {
                                 uint32 v1 = 1 [json_name = "v1"];
                                 uint32 v2 = 2 [json_name = "v2"];
                                 uint32 v3 = 3 [json_name = "v3"];
                              }
                              State state = 1 [json_name = "state"];
                           }
                           Received received = 2 [json_name = "received"];
                        }
                        Queries queries = 1 [json_name = "queries"];
                        message Reports {
                           message State {
                              uint32 v1 = 1 [json_name = "v1"];
                              uint32 v2 = 2 [json_name = "v2"];
                              uint32 v3 = 3 [json_name = "v3"];
                           }
                           State state = 1 [json_name = "state"];
                        }
                        Reports reports = 2 [json_name = "reports"];
                     }
                     Counters counters = 4 [json_name = "counters"];
                     message MembershipGroups {
                        message Group {
                           string group10 = 1 [json_name = "group"];
                           message State {
                              string group11 = 1 [json_name = "group"];
                              string source = 2 [json_name = "source"];
                              string reporter = 3 [json_name = "reporter"];
                           }
                           State state = 2 [json_name = "state"];
                        }
                        repeated Group group = 1 [json_name = "group"];
                     }
                     MembershipGroups membership_groups = 5 [json_name = "membership-groups"];
                     message InterfaceRef {
                        message Config {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        Config config = 1 [json_name = "config"];
                        message State {
                           string interface10 = 1 [json_name = "interface"];
                           uint32 subinterface = 2 [json_name = "subinterface"];
                        }
                        State state = 2 [json_name = "state"];
                     }
                     InterfaceRef interface_ref = 6 [json_name = "interface-ref"];
                     message StaticMembershipGroups {
                        message StaticGroups {
                           string static_group = 1 [json_name = "static-group"];
                           message Config {
                              string static_group = 1 [json_name = "static-group"];
                              string source = 2 [json_name = "source"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              string static_group = 1 [json_name = "static-group"];
                              string source = 2 [json_name = "source"];
                           }
                           State state = 3 [json_name = "state"];
                        }
                        repeated StaticGroups static_groups = 1 [json_name = "static-groups"];
                     }
                     StaticMembershipGroups static_membership_groups = 7 [json_name = "static-membership-groups"];
                  }
                  repeated Interface interface = 1 [json_name = "interface"];
               }
               Interfaces interfaces = 2 [json_name = "interfaces"];
            }
            Igmp igmp = 11 [json_name = "igmp"];
         }
         repeated Protocol protocol = 1 [json_name = "protocol"];
      }
      Protocols protocols = 17 [json_name = "protocols"];
   }
   repeated NetworkInstance network_instance = 1 [json_name = "network-instance"];
}
message Decimal64 {
   int64 value = 1 [json_name = "value"];
   uint32 fraction_digits = 2 [json_name = "fraction-digits"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-08-29 10:52:32
// ProtoYang-version 1
// module huawei-wlan-security-profile
// revision 2022-08-19
// revision 2022-07-15
// revision 2022-06-15
// revision 2022-04-08
// namespace urn:huawei:yang:huawei-wlan-security-profile

package huawei_wlan_security_profile;

message WlanSecurityProfile {
   message SecurityProfiles {
      message SecurityProfile {
         string profile_name = 1 [json_name = "profile-name"];
         message Policy_Open {
            bool open_policy = 1 [json_name = "open-policy"];
         }
         message Policy_Wpa {
            message WpaParameter {
               enum WpaType {
                  WpaType_WPA = 0;
                  WpaType_WPA2 = 1;
                  WpaType_WPAX_WPA2 = 2;
                  WpaType_WPA3 = 3;
                  WpaType_WPA2X_WPA3 = 4;
               };
               WpaType wpa_type = 1 [json_name = "wpa-type"];
               message AuthenticationMethod_Psk {
                  message PskInfo {
                     message PskType_Hex {
                        bool hex_type = 1 [json_name = "hex-type"];
                     }
                     message PskType_PassPhrase {
                        bool pass_phrase_type = 1 [json_name = "pass-phrase-type"];
                     }
                     oneof PskType {
                        PskType_Hex psk_type_hex = 1 [json_name = "hex"];
                        PskType_PassPhrase psk_type_pass_phrase = 2 [json_name = "pass-phrase"];
                     }
                     string psk8 = 3 [json_name = "psk"];
                  }
                  PskInfo psk_info = 1 [json_name = "psk-info"];
                  enum Passtype {
                     Passtype_HEX = 0;
                     Passtype_PASSX_PHRASE = 1;
                  };
                  Passtype passtype = 2 [json_name = "passtype"];
                  string psk7 = 3 [json_name = "psk"];
                  enum PassType {
                     PassType_HEX = 0;
                     PassType_PASSX_PHRASE = 1;
                  };
                  PassType pass_type = 4 [json_name = "pass-type"];
               }
               message AuthenticationMethod_Dot1X {
                  bool dot1x_method = 1 [json_name = "dot1x-method"];
               }
               message AuthenticationMethod_Ppsk {
                  bool ppsk_method = 1 [json_name = "ppsk-method"];
               }
               oneof AuthenticationMethod {
                  AuthenticationMethod_Psk authentication_method_psk = 2 [json_name = "psk"];
                  AuthenticationMethod_Dot1X authentication_method_dot1x = 3 [json_name = "dot1x"];
                  AuthenticationMethod_Ppsk authentication_method_ppsk = 5 [json_name = "ppsk"];
               }
               enum EncrptionMethod {
                  EncrptionMethod_TKIP = 0;
                  EncrptionMethod_AES = 1;
                  EncrptionMethod_AESX_TKIP = 2;
                  EncrptionMethod_TKIPX_AES = 3;
                  EncrptionMethod_AESGCM256 = 4;
               };
               EncrptionMethod encrption_method = 4 [json_name = "encrption-method"];
            }
            WpaParameter wpa_parameter = 1 [json_name = "wpa-parameter"];
         }
         message Policy_EnhancedOpen {
            bool enhanced_open_flag = 1 [json_name = "enhanced-open-flag"];
            string transition_ssid = 2 [json_name = "transition-ssid"];
         }
         message Policy_Wapi {
            message WapiParameter {
               message AuthenticationMethod_Psk {
                  message PskInfo {
                     enum PassType {
                        PassType_HEX = 0;
                        PassType_PASSX_PHRASE = 1;
                     };
                     PassType pass_type = 1 [json_name = "pass-type"];
                     string psk8 = 2 [json_name = "psk"];
                  }
                  PskInfo psk_info = 1 [json_name = "psk-info"];
               }
               message AuthenticationMethod_Cert {
                  bool cert_method = 1 [json_name = "cert-method"];
               }
               oneof AuthenticationMethod {
                  AuthenticationMethod_Psk authentication_method_psk = 1 [json_name = "psk"];
                  AuthenticationMethod_Cert authentication_method_cert = 2 [json_name = "cert"];
               }
               uint32 sa_timeout = 3 [json_name = "sa-timeout"];
               uint32 bk_threshold = 4 [json_name = "bk-threshold"];
               uint32 bk_update_interval = 5 [json_name = "bk-update-interval"];
               string asu_ip = 6 [json_name = "asu-ip"];
               string pki_realm = 7 [json_name = "pki-realm"];
               enum UskKeyUpdate {
                  UskKeyUpdate_DISABLED = 0;
                  UskKeyUpdate_TIMEX_BASED = 1;
               };
               UskKeyUpdate usk_key_update = 8 [json_name = "usk-key-update"];
               uint32 usk_update_interval = 9 [json_name = "usk-update-interval"];
               uint32 usk_retrans_count = 10 [json_name = "usk-retrans-count"];
               enum MskKeyUpdate {
                  MskKeyUpdate_DISABLED = 0;
                  MskKeyUpdate_TIMEX_BASED = 1;
               };
               MskKeyUpdate msk_key_update = 11 [json_name = "msk-key-update"];
               uint32 msk_update_interval = 12 [json_name = "msk-update-interval"];
               uint32 msk_retrans_count = 13 [json_name = "msk-retrans-count"];
            }
            WapiParameter wapi_parameter = 1 [json_name = "wapi-parameter"];
         }
         oneof Policy {
            Policy_Open policy_open = 2 [json_name = "open"];
            Policy_Wpa policy_wpa = 3 [json_name = "wpa"];
            Policy_EnhancedOpen policy_enhanced_open = 4 [json_name = "enhanced-open"];
            Policy_Wapi policy_wapi = 5 [json_name = "wapi"];
         }
         enum Pmf {
            Pmf_OPTIONAL = 0;
            Pmf_MANDATORY = 1;
         };
         Pmf pmf = 6 [json_name = "pmf"];
         enum WpaPtkUpdate {
            WpaPtkUpdate_DISABLED = 0;
            WpaPtkUpdate_ENABLE = 1;
         };
         WpaPtkUpdate wpa_ptk_update = 7 [json_name = "wpa-ptk-update"];
         uint32 wpa_ptk_update_interval = 8 [json_name = "wpa-ptk-update-interval"];
      }
      repeated SecurityProfile security_profile = 1 [json_name = "security-profile"];
   }
   SecurityProfiles security_profiles = 1 [json_name = "security-profiles"];
}


syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-tty
// revision 2020-03-02
// namespace urn:huawei:yang:huawei-tty

package huawei_tty;

message Tty {
   message LineCfgs {
      message LineCfg {
         string acl4OutBound = 1;
         string acl4OutNum = 2;
         string acl6OutBound = 3;
         string acl6OutNum = 4;
         enum AuthMode {
            AuthMode_AAA = 0;
            AuthMode_INIT = 1;
            AuthMode_NONE = 2;
            AuthMode_PASSWORD = 3;
         };
         AuthMode authMode = 5;
         string authPassword = 6;
         enum DataBits {
            DataBits_X_5 = 0;
            DataBits_X_6 = 1;
            DataBits_X_7 = 2;
            DataBits_X_8 = 3;
         };
         DataBits dataBits = 7;
         enum FlowControl {
            FlowControl_HARDWARE = 0;
            FlowControl_NONE = 1;
            FlowControl_SOFTWARE = 2;
         };
         FlowControl flowControl = 8;
         uint32 historyCmdSize = 9;
         uint32 idleTimeOutMin = 10;
         uint32 idleTimeOutSec = 11;
         bool isShutdown = 12;
         uint32 lineIndex = 13;
         enum Parity {
            Parity_EVEN = 0;
            Parity_MARK = 1;
            Parity_NONE = 2;
            Parity_ODD = 3;
            Parity_SPACE = 4;
         };
         Parity parity = 14;
         uint32 privilegeLevel = 15;
         uint32 scrLength = 16;
         uint32 scrWidth = 17;
         bool shellEnable = 18;
         uint64 speed = 19;
         enum StopBits {
            StopBits_X_1 = 0;
            StopBits_X_1X_5 = 1;
            StopBits_X_2 = 2;
         };
         StopBits stopBits = 20;
         uint32 uiNumber = 21;
      }
      repeated LineCfg lineCfg = 1;
   }
   LineCfgs lineCfgs = 1;
   message TtyAuxCfgs {
      message TtyAuxCfg {
         uint32 lineIndex = 1;
         bool reDirectV4Enable = 2;
         bool reDirectV6Enable = 3;
      }
      repeated TtyAuxCfg ttyAuxCfg = 1;
   }
   TtyAuxCfgs ttyAuxCfgs = 2;
   message UserInterfaces {
      message UserInterface {
         string actual_privileage = 1 [json_name = "actual-privileage"];
         enum AuthMode {
            INVALID_ENUM_VALUE_AuthMode = 0;
            AuthMode_NONE = 1;
            AuthMode_PASSWORD = 2;
            AuthMode_AAA = 3;
            AuthMode_INIT = 4;
         };
         AuthMode auth_mode = 2 [json_name = "auth-mode"];
         enum ConnectStatus {
            INVALID_ENUM_VALUE_ConnectStatus = 0;
            ConnectStatus_YES = 1;
            ConnectStatus_NO = 2;
         };
         ConnectStatus connect_status = 3 [json_name = "connect-status"];
         uint32 line_index = 4 [json_name = "line-index"];
         enum LineType {
            INVALID_ENUM_VALUE_LineType = 0;
            LineType_CON = 1;
            LineType_AUX = 2;
            LineType_TTY = 3;
            LineType_VTY = 4;
            LineType_LTT = 5;
            LineType_NCA = 6;
            LineType_RPC = 8;
         };
         LineType line_type = 5 [json_name = "line-type"];
         string modem_status = 6 [json_name = "modem-status"];
         uint32 privileage = 7 [json_name = "privileage"];
         uint32 relative_index = 8 [json_name = "relative-index"];
         string speed = 9 [json_name = "speed"];
         string uiLocation = 10;
         string location = 11 [json_name = "location"];
      }
      repeated UserInterface user_interface = 1 [json_name = "user-interface"];
   }
   UserInterfaces user_interfaces = 3 [json_name = "user-interfaces"];
   message Console {
      uint32 idle_time_out_min = 1 [json_name = "idle-time-out-min"];
      uint32 idle_time_out_sec = 2 [json_name = "idle-time-out-sec"];
      enum AuthMode {
         INVALID_ENUM_VALUE_AuthMode = 0;
         AuthMode_NONE = 1;
         AuthMode_PASSWORD = 2;
         AuthMode_AAA = 3;
         AuthMode_INIT = 4;
      };
      AuthMode auth_mode = 3 [json_name = "auth-mode"];
      string auth_password = 4 [json_name = "auth-password"];
      uint32 privilege_level = 5 [json_name = "privilege-level"];
      uint32 history_cmd_size = 6 [json_name = "history-cmd-size"];
      uint32 screen_length = 7 [json_name = "screen-length"];
      enum ShellEnable {
         ShellEnable_FALSE = 0;
         ShellEnable_TRUE = 1;
      };
      ShellEnable shell_enable = 8 [json_name = "shell-enable"];
      uint64 speed = 9 [json_name = "speed"];
      enum FlowControl {
         INVALID_ENUM_VALUE_FlowControl = 0;
         FlowControl_NONE = 1;
         FlowControl_SOFTWARE = 2;
         FlowControl_HARDWARE = 3;
      };
      FlowControl flow_control = 10 [json_name = "flow-control"];
      enum StopBits {
         INVALID_ENUM_VALUE_StopBits = 0;
         StopBits_X_1 = 1;
         StopBits_X_1X_5 = 2;
         StopBits_X_2 = 3;
      };
      StopBits stop_bits = 11 [json_name = "stop-bits"];
      enum DataBits {
         INVALID_ENUM_VALUE_DataBits = 0;
         DataBits_X_5 = 1;
         DataBits_X_6 = 2;
         DataBits_X_7 = 3;
         DataBits_X_8 = 4;
      };
      DataBits data_bits = 12 [json_name = "data-bits"];
      enum Parity {
         INVALID_ENUM_VALUE_Parity = 0;
         Parity_NONE = 1;
         Parity_ODD = 2;
         Parity_EVEN = 3;
         Parity_MARK = 4;
         Parity_SPACE = 5;
      };
      Parity parity = 13 [json_name = "parity"];
      enum ShutdownEnble {
         ShutdownEnble_FALSE = 0;
         ShutdownEnble_TRUE = 1;
      };
      ShutdownEnble shutdown_enble = 14 [json_name = "shutdown-enble"];
   }
   Console console = 4 [json_name = "console"];
   message Aux {
      uint32 idle_time_out_min = 1 [json_name = "idle-time-out-min"];
      uint32 idle_time_out_sec = 2 [json_name = "idle-time-out-sec"];
      enum AuthMode {
         INVALID_ENUM_VALUE_AuthMode = 0;
         AuthMode_NONE = 1;
         AuthMode_PASSWORD = 2;
         AuthMode_AAA = 3;
         AuthMode_INIT = 4;
      };
      AuthMode auth_mode = 3 [json_name = "auth-mode"];
      string auth_password = 4 [json_name = "auth-password"];
      uint32 privilege_level = 5 [json_name = "privilege-level"];
      uint32 history_cmd_size = 6 [json_name = "history-cmd-size"];
      uint32 screen_length = 7 [json_name = "screen-length"];
      enum ShellEnable {
         ShellEnable_FALSE = 0;
         ShellEnable_TRUE = 1;
      };
      ShellEnable shell_enable = 8 [json_name = "shell-enable"];
      uint64 speed = 9 [json_name = "speed"];
      enum FlowControl {
         INVALID_ENUM_VALUE_FlowControl = 0;
         FlowControl_NONE = 1;
         FlowControl_SOFTWARE = 2;
         FlowControl_HARDWARE = 3;
      };
      FlowControl flow_control = 10 [json_name = "flow-control"];
      enum StopBits {
         INVALID_ENUM_VALUE_StopBits = 0;
         StopBits_X_1 = 1;
         StopBits_X_1X_5 = 2;
         StopBits_X_2 = 3;
      };
      StopBits stop_bits = 11 [json_name = "stop-bits"];
      enum DataBits {
         INVALID_ENUM_VALUE_DataBits = 0;
         DataBits_X_5 = 1;
         DataBits_X_6 = 2;
         DataBits_X_7 = 3;
         DataBits_X_8 = 4;
      };
      DataBits data_bits = 12 [json_name = "data-bits"];
      enum Parity {
         INVALID_ENUM_VALUE_Parity = 0;
         Parity_NONE = 1;
         Parity_ODD = 2;
         Parity_EVEN = 3;
         Parity_MARK = 4;
         Parity_SPACE = 5;
      };
      Parity parity = 13 [json_name = "parity"];
      string acl4_outbound = 14 [json_name = "acl4-outbound"];
      string acl6_outbound = 15 [json_name = "acl6-outbound"];
      string acl4_outbound_num = 16 [json_name = "acl4-outbound-num"];
      string acl6_outbound_num = 17 [json_name = "acl6-outbound-num"];
   }
   Aux aux = 5 [json_name = "aux"];
}
message HwUserLogin {
   string AuthType = 1;
   string UserChannel = 2;
   string UserIP = 3;
   uint32 UserIndex = 4;
   string UserName = 5;
   string VpnInstanceName = 6;
}
message HwUserLoginFail {
   string AuthType = 1;
   string UserChannel = 2;
   string UserIP = 3;
   uint32 UserIndex = 4;
   string UserName = 5;
   string VpnInstanceName = 6;
}
message HwUserLogout {
   string AuthType = 1;
   string UserChannel = 2;
   string UserIP = 3;
   uint32 UserIndex = 4;
   string UserName = 5;
   string VpnInstanceName = 6;
}
message HwUserSshLogin {
   string AuthType = 1;
   string UserChannel = 2;
   string UserIP = 3;
   uint32 UserIndex = 4;
   string UserName = 5;
   string VpnInstanceName = 6;
}
message HwUserSshLogout {
   string AuthType = 1;
   string UserChannel = 2;
   string UserIP = 3;
   uint32 UserIndex = 4;
   string UserName = 5;
   string VpnInstanceName = 6;
}
message HwVtyNumExceed {
   uint32 MaxUserNum = 1;
}


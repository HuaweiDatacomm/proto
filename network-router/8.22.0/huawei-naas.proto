syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-08-10 14:46:55
// ProtoYang-version 1
// module huawei-naas
// revision 2022-07-07
// revision 2022-05-28
// revision 2022-05-16
// namespace urn:huawei:yang:huawei-naas

package huawei_naas;

message Naas {
   message AdminGateway {
      string name = 1 [json_name = "name"];
      message Global {
         uint32 initial_load_balance_number = 1 [json_name = "initial-load-balance-number"];
         uint32 bandwidth_redundancy = 2 [json_name = "bandwidth-redundancy"];
         uint32 node_max_tenant_number = 3 [json_name = "node-max-tenant-number"];
      }
      Global global = 2 [json_name = "global"];
      message NetworkDescriptor {
         message NetworkTopo {
            message NetworkFunctionDescriptors {
               message NetworkFunctionDescriptor {
                  enum FunctionType {
                     INVALID_ENUM_VALUE_FunctionType = 0;
                     FunctionType_IP = 1;
                     FunctionType_SEC = 2;
                     FunctionType_DNS = 3;
                  };
                  FunctionType function_type = 1 [json_name = "function-type"];
                  enum RootServiceFunctionType {
                     INVALID_ENUM_VALUE_RootServiceFunctionType = 0;
                     RootServiceFunctionType_SVCMX_LS = 1;
                     RootServiceFunctionType_FMESHX_LS = 2;
                     RootServiceFunctionType_OBJMX_LS = 3;
                     RootServiceFunctionType_HA = 4;
                     RootServiceFunctionType_OBJMX_GS = 5;
                     RootServiceFunctionType_OMS = 6;
                     RootServiceFunctionType_MNT = 7;
                     RootServiceFunctionType_SRO = 8;
                     RootServiceFunctionType_SVCMX_GS = 9;
                     RootServiceFunctionType_VIRMX_GS = 10;
                     RootServiceFunctionType_DIRECTORX_IP = 11;
                     RootServiceFunctionType_FORWARDERX_IP = 12;
                     RootServiceFunctionType_FORWARDERX_SEC = 13;
                     RootServiceFunctionType_DIRECTORX_DNS = 14;
                  };
                  RootServiceFunctionType root_service_function_type = 2 [json_name = "root-service-function-type"];
                  enum ServiceFunctionTypes {
                     INVALID_ENUM_VALUE_ServiceFunctionTypes = 0;
                     ServiceFunctionTypes_SVCMX_LS = 1;
                     ServiceFunctionTypes_FMESHX_LS = 2;
                     ServiceFunctionTypes_OBJMX_LS = 3;
                     ServiceFunctionTypes_HA = 4;
                     ServiceFunctionTypes_OBJMX_GS = 5;
                     ServiceFunctionTypes_OMS = 6;
                     ServiceFunctionTypes_MNT = 7;
                     ServiceFunctionTypes_SRO = 8;
                     ServiceFunctionTypes_SVCMX_GS = 9;
                     ServiceFunctionTypes_VIRMX_GS = 10;
                     ServiceFunctionTypes_DIRECTORX_IP = 11;
                     ServiceFunctionTypes_FORWARDERX_IP = 12;
                     ServiceFunctionTypes_FORWARDERX_SEC = 13;
                     ServiceFunctionTypes_DIRECTORX_DNS = 14;
                  };
                  repeated ServiceFunctionTypes service_function_types = 3 [json_name = "service-function-types"];
               }
               repeated NetworkFunctionDescriptor network_function_descriptor = 1 [json_name = "network-function-descriptor"];
            }
            NetworkFunctionDescriptors network_function_descriptors = 1 [json_name = "network-function-descriptors"];
         }
         NetworkTopo network_topo = 1 [json_name = "network-topo"];
         message ServiceSoftware {
            message ServiceDescriptors {
               message ServiceDescriptor {
                  enum ServiceType {
                     INVALID_ENUM_VALUE_ServiceType = 0;
                     ServiceType_NSC = 1;
                     ServiceType_OMS = 2;
                     ServiceType_SRM = 3;
                     ServiceType_MIDDLEWARE = 4;
                     ServiceType_DIRECTORX_IP = 5;
                     ServiceType_FORWARDERX_IP = 6;
                     ServiceType_FORWARDERX_SEC = 7;
                     ServiceType_DIRECTORX_DNS = 8;
                  };
                  ServiceType service_type = 1 [json_name = "service-type"];
                  enum ServiceFunctionTypes {
                     INVALID_ENUM_VALUE_ServiceFunctionTypes = 0;
                     ServiceFunctionTypes_SVCMX_LS = 1;
                     ServiceFunctionTypes_FMESHX_LS = 2;
                     ServiceFunctionTypes_OBJMX_LS = 3;
                     ServiceFunctionTypes_HA = 4;
                     ServiceFunctionTypes_OBJMX_GS = 5;
                     ServiceFunctionTypes_OMS = 6;
                     ServiceFunctionTypes_MNT = 7;
                     ServiceFunctionTypes_SRO = 8;
                     ServiceFunctionTypes_SVCMX_GS = 9;
                     ServiceFunctionTypes_VIRMX_GS = 10;
                     ServiceFunctionTypes_DIRECTORX_IP = 11;
                     ServiceFunctionTypes_FORWARDERX_IP = 12;
                     ServiceFunctionTypes_FORWARDERX_SEC = 13;
                     ServiceFunctionTypes_DIRECTORX_DNS = 14;
                  };
                  repeated ServiceFunctionTypes service_function_types = 2 [json_name = "service-function-types"];
               }
               repeated ServiceDescriptor service_descriptor = 1 [json_name = "service-descriptor"];
            }
            ServiceDescriptors service_descriptors = 1 [json_name = "service-descriptors"];
         }
         ServiceSoftware service_software = 2 [json_name = "service-software"];
         message ResourcePool {
            message HostUnitDescriptors {
               message HostUnitDescriptor {
                  string name = 1 [json_name = "name"];
                  message Spec {
                     uint32 vpn_number = 1 [json_name = "vpn-number"];
                     uint32 bandwidth = 2 [json_name = "bandwidth"];
                  }
                  Spec spec = 2 [json_name = "spec"];
               }
               repeated HostUnitDescriptor host_unit_descriptor = 1 [json_name = "host-unit-descriptor"];
            }
            HostUnitDescriptors host_unit_descriptors = 1 [json_name = "host-unit-descriptors"];
         }
         ResourcePool resource_pool = 3 [json_name = "resource-pool"];
      }
      NetworkDescriptor network_descriptor = 3 [json_name = "network-descriptor"];
      message Networks {
         message Network {
            string name = 1 [json_name = "name"];
            enum Status {
               INVALID_ENUM_VALUE_Status = 0;
               Status_CREATING = 1;
               Status_READY = 2;
               Status_UNKNOWN = 3;
               Status_ERROR = 4;
            };
            Status status = 2 [json_name = "status"];
            message NetworkTopo {
               message NetworkFunctions {
                  message NetworkFunction {
                     string function_name = 1 [json_name = "function-name"];
                     enum FunctionType {
                        INVALID_ENUM_VALUE_FunctionType = 0;
                        FunctionType_IP = 1;
                        FunctionType_SEC = 2;
                        FunctionType_DNS = 3;
                     };
                     FunctionType function_type = 2 [json_name = "function-type"];
                     message Interfaces {
                        message Interface {
                           string interface_name = 1 [json_name = "interface-name"];
                           enum DataType {
                              INVALID_ENUM_VALUE_DataType = 0;
                              DataType_INTRAX_DATA = 1;
                              DataType_OUTX_DATA = 2;
                           };
                           DataType data_type = 2 [json_name = "data-type"];
                           string subnet_name = 3 [json_name = "subnet-name"];
                        }
                        repeated Interface interface = 1 [json_name = "interface"];
                     }
                     Interfaces interfaces = 3 [json_name = "interfaces"];
                  }
                  repeated NetworkFunction network_function = 1 [json_name = "network-function"];
               }
               NetworkFunctions network_functions = 1 [json_name = "network-functions"];
               message Links {
                  message Link {
                     string link_name = 1 [json_name = "link-name"];
                     string local_name = 2 [json_name = "local-name"];
                     string local_interface = 3 [json_name = "local-interface"];
                     string peer_name = 4 [json_name = "peer-name"];
                     string peer_interface = 5 [json_name = "peer-interface"];
                  }
                  repeated Link link = 1 [json_name = "link"];
               }
               Links links = 2 [json_name = "links"];
            }
            NetworkTopo network_topo = 3 [json_name = "network-topo"];
            message ServiceSoftware {
               message Services {
                  message Service {
                     uint32 service_id = 1 [json_name = "service-id"];
                     enum ServiceType {
                        INVALID_ENUM_VALUE_ServiceType = 0;
                        ServiceType_NSC = 1;
                        ServiceType_OMS = 2;
                        ServiceType_SRM = 3;
                        ServiceType_MIDDLEWARE = 4;
                        ServiceType_DIRECTORX_IP = 5;
                        ServiceType_FORWARDERX_IP = 6;
                        ServiceType_FORWARDERX_SEC = 7;
                        ServiceType_DIRECTORX_DNS = 8;
                     };
                     ServiceType service_type = 2 [json_name = "service-type"];
                     string patch_name = 3 [json_name = "patch-name"];
                     string patch_version = 4 [json_name = "patch-version"];
                     string patch_zip_name = 5 [json_name = "patch-zip-name"];
                     message ServiceFunctions {
                        message ServiceFunction {
                           uint32 function_id = 1 [json_name = "function-id"];
                           enum FunctionType {
                              INVALID_ENUM_VALUE_FunctionType = 0;
                              FunctionType_SVCMX_LS = 1;
                              FunctionType_FMESHX_LS = 2;
                              FunctionType_OBJMX_LS = 3;
                              FunctionType_HA = 4;
                              FunctionType_OBJMX_GS = 5;
                              FunctionType_OMS = 6;
                              FunctionType_MNT = 7;
                              FunctionType_SRO = 8;
                              FunctionType_SVCMX_GS = 9;
                              FunctionType_VIRMX_GS = 10;
                              FunctionType_DIRECTORX_IP = 11;
                              FunctionType_FORWARDERX_IP = 12;
                              FunctionType_FORWARDERX_SEC = 13;
                              FunctionType_DIRECTORX_DNS = 14;
                           };
                           FunctionType function_type = 2 [json_name = "function-type"];
                           string network_function = 3 [json_name = "network-function"];
                        }
                        repeated ServiceFunction service_function = 1 [json_name = "service-function"];
                     }
                     ServiceFunctions service_functions = 6 [json_name = "service-functions"];
                     message ServiceUnits {
                        message ServiceUnit {
                           uint32 service_unit_id = 1 [json_name = "service-unit-id"];
                           uint32 ha_node_id = 2 [json_name = "ha-node-id"];
                           uint32 vpu_id = 3 [json_name = "vpu-id"];
                           message Status {
                              enum SoftwareState {
                                 SoftwareState_WAITING = 0;
                                 SoftwareState_RUNNING = 1;
                                 SoftwareState_TERMINATED = 2;
                              };
                              SoftwareState software_state = 1 [json_name = "software-state"];
                              bool service_ready = 2 [json_name = "service-ready"];
                              string reason = 3 [json_name = "reason"];
                              string message = 4 [json_name = "message"];
                              string last_state_transit_time = 5 [json_name = "last-state-transit-time"];
                              uint32 restart_count = 6 [json_name = "restart-count"];
                              enum HaRole {
                                 HaRole_UNX_ARBITRIATED = 0;
                                 HaRole_MASTER = 1;
                                 HaRole_SLAVE = 2;
                              };
                              HaRole ha_role = 7 [json_name = "ha-role"];
                           }
                           Status status = 4 [json_name = "status"];
                           message PatchStatus {
                              bool deployed = 1 [json_name = "deployed"];
                           }
                           PatchStatus patch_status = 5 [json_name = "patch-status"];
                        }
                        repeated ServiceUnit service_unit = 1 [json_name = "service-unit"];
                     }
                     ServiceUnits service_units = 7 [json_name = "service-units"];
                  }
                  repeated Service service = 1 [json_name = "service"];
               }
               Services services = 1 [json_name = "services"];
            }
            ServiceSoftware service_software = 4 [json_name = "service-software"];
            message Infrastructure {
               message Vms {
                  message Vm {
                     uint32 id = 1 [json_name = "id"];
                     string name = 2 [json_name = "name"];
                     string vm_type = 3 [json_name = "vm-type"];
                     uint32 host_unit_id = 4 [json_name = "host-unit-id"];
                     uint32 vcpu_number = 5 [json_name = "vcpu-number"];
                     uint32 memory = 6 [json_name = "memory"];
                     uint32 storage = 7 [json_name = "storage"];
                     string image_name = 8 [json_name = "image-name"];
                     string spec_name = 9 [json_name = "spec-name"];
                     string tag = 10 [json_name = "tag"];
                     string anti_affinity_group = 11 [json_name = "anti-affinity-group"];
                     uint32 vnic_number = 12 [json_name = "vnic-number"];
                     message Vnics {
                        message Vnic {
                           uint32 id = 1 [json_name = "id"];
                           uint32 vport_id = 2 [json_name = "vport-id"];
                           uint32 vnic_index = 3 [json_name = "vnic-index"];
                           enum PortPlane {
                              PortPlane_BASE = 0;
                              PortPlane_INNERX_MNG = 1;
                              PortPlane_OUTERX_MNG = 2;
                              PortPlane_INNERX_CTRL = 3;
                              PortPlane_INNERX_DATA = 4;
                              PortPlane_INTRAX_LINK = 5;
                              PortPlane_OUTERX_LINK = 6;
                           };
                           PortPlane port_plane = 4 [json_name = "port-plane"];
                           enum DriverType {
                              DriverType_VETH = 0;
                              DriverType_VETHX_PEER = 1;
                              DriverType_PHYX_DIRECT = 2;
                              DriverType_DPDKX_DIRECT = 3;
                              DriverType_VMXNET3 = 4;
                              DriverType_VIRTIO = 5;
                              DriverType_CHANNEL = 6;
                           };
                           DriverType driver_type = 5 [json_name = "driver-type"];
                           uint32 network_id = 6 [json_name = "network-id"];
                           string subnet_name = 7 [json_name = "subnet-name"];
                           string ip = 8 [json_name = "ip"];
                        }
                        repeated Vnic vnic = 1 [json_name = "vnic"];
                     }
                     Vnics vnics = 13 [json_name = "vnics"];
                     message VmStatus {
                        enum State {
                           State_UNKNOWN = 0;
                           State_ACTIVE = 1;
                           State_STOPPED = 2;
                           State_BUILDING = 3;
                           State_ERROR = 4;
                        };
                        State state = 1 [json_name = "state"];
                        string host = 2 [json_name = "host"];
                        string uuid = 3 [json_name = "uuid"];
                        uint32 cpu_usage = 4 [json_name = "cpu-usage"];
                        uint32 memory_usage = 5 [json_name = "memory-usage"];
                     }
                     VmStatus vm_status = 14 [json_name = "vm-status"];
                     message Ctnrs {
                        message Ctnr {
                           uint32 id = 1 [json_name = "id"];
                           string name = 2 [json_name = "name"];
                           uint32 resource_unit_id = 3 [json_name = "resource-unit-id"];
                           message Cnics {
                              message Cnic {
                                 uint32 id = 1 [json_name = "id"];
                                 string name = 2 [json_name = "name"];
                                 uint32 vport_id = 3 [json_name = "vport-id"];
                                 enum PortPlane {
                                    PortPlane_BASE = 0;
                                    PortPlane_INNERX_MNG = 1;
                                    PortPlane_OUTERX_MNG = 2;
                                    PortPlane_INNERX_CTRL = 3;
                                    PortPlane_INNERX_DATA = 4;
                                    PortPlane_INTRAX_LINK = 5;
                                    PortPlane_OUTERX_LINK = 6;
                                 };
                                 PortPlane port_plane = 4 [json_name = "port-plane"];
                                 enum DriverType {
                                    DriverType_VETH = 0;
                                    DriverType_VETHX_PEER = 1;
                                    DriverType_PHYX_DIRECT = 2;
                                    DriverType_DPDKX_DIRECT = 3;
                                    DriverType_VMXNET3 = 4;
                                    DriverType_VIRTIO = 5;
                                    DriverType_CHANNEL = 6;
                                 };
                                 DriverType driver_type = 5 [json_name = "driver-type"];
                                 string network_function_if = 6 [json_name = "network-function-if"];
                                 string ip = 7 [json_name = "ip"];
                              }
                              repeated Cnic cnic = 1 [json_name = "cnic"];
                           }
                           Cnics cnics = 4 [json_name = "cnics"];
                           message CtnrStatus {
                              enum State {
                                 State_UNKNOWN = 0;
                                 State_CREATED = 1;
                                 State_RUNNING = 2;
                                 State_PAUSED = 3;
                                 State_RESTARTING = 4;
                                 State_REMOVING = 5;
                                 State_EXITED = 6;
                                 State_DEAD = 7;
                              };
                              State state = 1 [json_name = "state"];
                              uint32 cpu_usage = 2 [json_name = "cpu-usage"];
                              uint32 memory_usage = 3 [json_name = "memory-usage"];
                           }
                           CtnrStatus ctnr_status = 5 [json_name = "ctnr-status"];
                        }
                        repeated Ctnr ctnr = 1 [json_name = "ctnr"];
                     }
                     Ctnrs ctnrs = 15 [json_name = "ctnrs"];
                  }
                  repeated Vm vm = 1 [json_name = "vm"];
               }
               Vms vms = 1 [json_name = "vms"];
               message Subnets {
                  message Subnet {
                     string name = 1 [json_name = "name"];
                     uint32 network_id = 2 [json_name = "network-id"];
                     enum PortPlane {
                        PortPlane_BASE = 0;
                        PortPlane_INNERX_MNG = 1;
                        PortPlane_OUTERX_MNG = 2;
                        PortPlane_INNERX_CTRL = 3;
                        PortPlane_INNERX_DATA = 4;
                        PortPlane_INTRAX_LINK = 5;
                        PortPlane_OUTERX_LINK = 6;
                     };
                     PortPlane port_plane = 3 [json_name = "port-plane"];
                     message CloudPlatform_Vmware {
                        string port_group = 1 [json_name = "port-group"];
                     }
                     message CloudPlatform_Openstack {
                        string subnet_uuid = 1 [json_name = "subnet-uuid"];
                     }
                     oneof CloudPlatform {
                        CloudPlatform_Vmware cloud_platform_vmware = 4 [json_name = "vmware"];
                        CloudPlatform_Openstack cloud_platform_openstack = 5 [json_name = "openstack"];
                     }
                     string segment = 6 [json_name = "segment"];
                     repeated string reserved_ips = 7 [json_name = "reserved-ips"];
                  }
                  repeated Subnet subnet = 1 [json_name = "subnet"];
               }
               Subnets subnets = 2 [json_name = "subnets"];
            }
            Infrastructure infrastructure = 5 [json_name = "infrastructure"];
            message ResourcePool {
               message PoolSpec {
                  message Scales {
                     message Scale {
                        string host_unit_type = 1 [json_name = "host-unit-type"];
                        uint32 number9 = 2 [json_name = "number"];
                        uint32 idle_number = 3 [json_name = "idle-number"];
                     }
                     repeated Scale scale = 1 [json_name = "scale"];
                  }
                  Scales scales = 1 [json_name = "scales"];
               }
               PoolSpec pool_spec = 1 [json_name = "pool-spec"];
               message Vpus {
                  message Vpu {
                     uint32 id = 1 [json_name = "id"];
                     string name = 2 [json_name = "name"];
                     enum Role {
                        Role_RU = 0;
                        Role_HU = 1;
                     };
                     Role role = 3 [json_name = "role"];
                     uint32 vcpu_number = 4 [json_name = "vcpu-number"];
                     uint32 memory = 5 [json_name = "memory"];
                     uint32 storage = 6 [json_name = "storage"];
                     string core_list = 7 [json_name = "core-list"];
                     string iso_core_list = 8 [json_name = "iso-core-list"];
                     string image_name = 9 [json_name = "image-name"];
                     uint32 parent_id = 10 [json_name = "parent-id"];
                     enum CloudResourceType {
                        CloudResourceType_CTNR = 0;
                        CloudResourceType_VM = 1;
                     };
                     CloudResourceType cloud_resource_type = 11 [json_name = "cloud-resource-type"];
                     uint32 vport_number = 12 [json_name = "vport-number"];
                     message Vports {
                        message Vport {
                           uint32 id = 1 [json_name = "id"];
                           string name = 2 [json_name = "name"];
                           enum PortPlane {
                              PortPlane_BASE = 0;
                              PortPlane_INNERX_MNG = 1;
                              PortPlane_OUTERX_MNG = 2;
                              PortPlane_INNERX_CTRL = 3;
                              PortPlane_INNERX_DATA = 4;
                              PortPlane_INTRAX_LINK = 5;
                              PortPlane_OUTERX_LINK = 6;
                           };
                           PortPlane port_plane = 3 [json_name = "port-plane"];
                           enum DriverType {
                              DriverType_VETH = 0;
                              DriverType_VETHX_PEER = 1;
                              DriverType_PHYX_DIRECT = 2;
                              DriverType_DPDKX_DIRECT = 3;
                              DriverType_VMXNET3 = 4;
                              DriverType_VIRTIO = 5;
                              DriverType_CHANNEL = 6;
                           };
                           DriverType driver_type = 4 [json_name = "driver-type"];
                           uint32 network_id = 5 [json_name = "network-id"];
                           uint32 port_index = 6 [json_name = "port-index"];
                           string logic_dev_name = 7 [json_name = "logic-dev-name"];
                           uint32 mtu = 8 [json_name = "mtu"];
                           uint32 peer_vport_id = 9 [json_name = "peer-vport-id"];
                           string network_function_if = 10 [json_name = "network-function-if"];
                           string ip = 11 [json_name = "ip"];
                           uint32 netmask = 12 [json_name = "netmask"];
                           string gateway = 13 [json_name = "gateway"];
                           string mac = 14 [json_name = "mac"];
                        }
                        repeated Vport vport = 1 [json_name = "vport"];
                     }
                     Vports vports = 13 [json_name = "vports"];
                  }
                  repeated Vpu vpu = 1 [json_name = "vpu"];
               }
               Vpus vpus = 2 [json_name = "vpus"];
               message VpuLayer {
                  message HostUnits {
                     message HostUnit {
                        uint32 id = 1 [json_name = "id"];
                        string name = 2 [json_name = "name"];
                        string type_name = 3 [json_name = "type-name"];
                        uint32 vpu_id = 4 [json_name = "vpu-id"];
                        message SpecStatistic {
                           uint32 total_vpn_number = 1 [json_name = "total-vpn-number"];
                           uint32 allocated_vpn_number = 2 [json_name = "allocated-vpn-number"];
                           uint32 total_bandwidth = 3 [json_name = "total-bandwidth"];
                           uint32 allocated_bandwidth = 4 [json_name = "allocated-bandwidth"];
                        }
                        SpecStatistic spec_statistic = 5 [json_name = "spec-statistic"];
                        message ResourceUnits {
                           message ResourceUnit {
                              uint32 id = 1 [json_name = "id"];
                              string name = 2 [json_name = "name"];
                              uint32 vpu_id = 3 [json_name = "vpu-id"];
                           }
                           repeated ResourceUnit resource_unit = 1 [json_name = "resource-unit"];
                        }
                        ResourceUnits resource_units = 6 [json_name = "resource-units"];
                     }
                     repeated HostUnit host_unit = 1 [json_name = "host-unit"];
                  }
                  HostUnits host_units = 1 [json_name = "host-units"];
               }
               VpuLayer vpu_layer = 3 [json_name = "vpu-layer"];
            }
            ResourcePool resource_pool = 6 [json_name = "resource-pool"];
            message ForwardMesh {
               message Planes {
                  message Plane {
                     enum PlaneType {
                        PlaneType_BASE = 0;
                        PlaneType_INNERX_MNG = 1;
                        PlaneType_OUTERX_MNG = 2;
                        PlaneType_INNERX_CTRL = 3;
                        PlaneType_INNERX_DATA = 4;
                        PlaneType_INTRAX_LINK = 5;
                        PlaneType_OUTERX_LINK = 6;
                     };
                     PlaneType plane_type = 1 [json_name = "plane-type"];
                     message ForwardUnits {
                        message ForwardUnit {
                           uint32 id = 1 [json_name = "id"];
                           uint32 service_unit_id = 2 [json_name = "service-unit-id"];
                           string underlay_port = 3 [json_name = "underlay-port"];
                           string underlay_ip = 4 [json_name = "underlay-ip"];
                           message Vxlan {
                              uint32 vxlan_id = 1 [json_name = "vxlan-id"];
                              uint32 vxlan_port = 2 [json_name = "vxlan-port"];
                           }
                           Vxlan vxlan = 5 [json_name = "vxlan"];
                           message ForwardIfs {
                              message ForwardIf {
                                 uint32 id = 1 [json_name = "id"];
                                 string service_unit_port_name = 2 [json_name = "service-unit-port-name"];
                                 string forward_unit_port_name = 3 [json_name = "forward-unit-port-name"];
                                 string ip = 4 [json_name = "ip"];
                                 string mac = 5 [json_name = "mac"];
                              }
                              repeated ForwardIf forward_if = 1 [json_name = "forward-if"];
                           }
                           ForwardIfs forward_ifs = 6 [json_name = "forward-ifs"];
                        }
                        repeated ForwardUnit forward_unit = 1 [json_name = "forward-unit"];
                     }
                     ForwardUnits forward_units = 2 [json_name = "forward-units"];
                     message ForwardIfLinks {
                        message ForwardIfLink {
                           uint32 id = 1 [json_name = "id"];
                           string net_function_link = 2 [json_name = "net-function-link"];
                           uint32 forward_if_src_id = 3 [json_name = "forward-if-src-id"];
                           uint32 forward_if_dst_id = 4 [json_name = "forward-if-dst-id"];
                        }
                        repeated ForwardIfLink forward_if_link = 1 [json_name = "forward-if-link"];
                     }
                     ForwardIfLinks forward_if_links = 3 [json_name = "forward-if-links"];
                     message ForwardUnitLinks {
                        message ForwardUnitLink {
                           uint32 id = 1 [json_name = "id"];
                           uint32 forward_unit_id_1 = 2 [json_name = "forward-unit-id-1"];
                           uint32 forward_unit_id_2 = 3 [json_name = "forward-unit-id-2"];
                        }
                        repeated ForwardUnitLink forward_unit_link = 1 [json_name = "forward-unit-link"];
                     }
                     ForwardUnitLinks forward_unit_links = 4 [json_name = "forward-unit-links"];
                  }
                  repeated Plane plane = 1 [json_name = "plane"];
               }
               Planes planes = 1 [json_name = "planes"];
            }
            ForwardMesh forward_mesh = 7 [json_name = "forward-mesh"];
         }
         repeated Network network = 1 [json_name = "network"];
      }
      Networks networks = 4 [json_name = "networks"];
      message AdminBusiness {
      }
      AdminBusiness admin_business = 5 [json_name = "admin-business"];
   }
   AdminGateway admin_gateway = 1 [json_name = "admin-gateway"];
   message TenantGateways {
      message TenantGateway {
         string name = 1 [json_name = "name"];
         uint32 tenant_id = 2 [json_name = "tenant-id"];
         string deploy_network = 3 [json_name = "deploy-network"];
         message Spec {
            bool exclusive_resource = 1 [json_name = "exclusive-resource"];
            uint32 vpn_number = 2 [json_name = "vpn-number"];
            uint32 bandwidth = 3 [json_name = "bandwidth"];
         }
         Spec spec = 4 [json_name = "spec"];
         message Deploys {
            message Deploy {
               uint32 service_id = 1 [json_name = "service-id"];
               enum ServiceType {
                  INVALID_ENUM_VALUE_ServiceType = 0;
                  ServiceType_NSC = 1;
                  ServiceType_OMS = 2;
                  ServiceType_SRM = 3;
                  ServiceType_MIDDLEWARE = 4;
                  ServiceType_DIRECTORX_IP = 5;
                  ServiceType_FORWARDERX_IP = 6;
                  ServiceType_FORWARDERX_SEC = 7;
                  ServiceType_DIRECTORX_DNS = 8;
               };
               ServiceType service_type = 2 [json_name = "service-type"];
               message HostUnits {
                  message HostUnit {
                     uint32 unit_id = 1 [json_name = "unit-id"];
                     string unit_name = 2 [json_name = "unit-name"];
                  }
                  repeated HostUnit host_unit = 1 [json_name = "host-unit"];
               }
               HostUnits host_units = 3 [json_name = "host-units"];
            }
            repeated Deploy deploy = 1 [json_name = "deploy"];
         }
         Deploys deploys = 5 [json_name = "deploys"];
         message TenantBusiness {
         }
         TenantBusiness tenant_business = 6 [json_name = "tenant-business"];
      }
      repeated TenantGateway tenant_gateway = 1 [json_name = "tenant-gateway"];
   }
   TenantGateways tenant_gateways = 2 [json_name = "tenant-gateways"];
}


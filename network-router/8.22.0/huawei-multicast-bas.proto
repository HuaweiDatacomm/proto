syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-03 16:01:26
// ProtoYang-version 1
// module huawei-multicast-bas
// revision 2020-03-16
// revision 2019-03-30
// namespace urn:huawei:yang:huawei-multicast-bas

package huawei_multicast_bas;

message MulticastBas {
   message BasUsers {
      message BasUser {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         uint32 user_id = 2 [json_name = "user-id"];
         string bas_interface = 3 [json_name = "bas-interface"];
         string vpn_intance = 4 [json_name = "vpn-intance"];
         string slot_id = 5 [json_name = "slot-id"];
         string user_ip = 6 [json_name = "user-ip"];
         enum UserType {
            UserType_LOCAL = 0;
            UserType_REMOTE = 1;
         };
         UserType user_type = 7 [json_name = "user-type"];
         string gateway_ip = 8 [json_name = "gateway-ip"];
         string user_mac = 9 [json_name = "user-mac"];
         bool is_eth_trunk = 10 [json_name = "is-eth-trunk"];
         uint32 max_program_list = 11 [json_name = "max-program-list"];
         message Groups {
            message Group {
               string group_address = 1 [json_name = "group-address"];
               uint32 create_time = 2 [json_name = "create-time"];
               uint32 expire_time = 3 [json_name = "expire-time"];
               enum GroupTimer {
                  GroupTimer_NOTX_EXIST = 0;
                  GroupTimer_EXIST = 1;
               };
               GroupTimer group_timer = 4 [json_name = "group-timer"];
               uint32 retran_count = 5 [json_name = "retran-count"];
               bool last_member_query = 6 [json_name = "last-member-query"];
               enum FilterMode {
                  FilterMode_INCLUDE = 0;
                  FilterMode_EXCLUDE = 1;
                  FilterMode_NA = 2;
               };
               FilterMode filter_mode = 7 [json_name = "filter-mode"];
               enum CompatMode {
                  INVALID_ENUM_VALUE_CompatMode = 0;
                  CompatMode_V1 = 1;
                  CompatMode_V2 = 2;
                  CompatMode_V3 = 3;
               };
               CompatMode compat_mode = 8 [json_name = "compat-mode"];
               enum V1HostTimer {
                  V1HostTimer_NOTX_EXIST = 0;
                  V1HostTimer_EXIST = 1;
               };
               V1HostTimer v1_host_timer = 9 [json_name = "v1-host-timer"];
               enum V2HostTimer {
                  V2HostTimer_NOTX_EXIST = 0;
                  V2HostTimer_EXIST = 1;
               };
               V2HostTimer v2_host_timer = 10 [json_name = "v2-host-timer"];
               bool source_last_member_query = 11 [json_name = "source-last-member-query"];
               enum LastMemberQueryTimer {
                  LastMemberQueryTimer_NOTX_EXIST = 0;
                  LastMemberQueryTimer_EXIST = 1;
               };
               LastMemberQueryTimer last_member_query_timer = 12 [json_name = "last-member-query-timer"];
               message Sources {
                  message Source {
                     string source_address = 1 [json_name = "source-address"];
                     uint32 create_time = 2 [json_name = "create-time"];
                     uint32 expire_time = 3 [json_name = "expire-time"];
                     enum SourceTimer {
                        SourceTimer_NOTX_EXIST = 0;
                        SourceTimer_EXIST = 1;
                     };
                     SourceTimer source_timer = 4 [json_name = "source-timer"];
                     uint32 retran_count = 5 [json_name = "retran-count"];
                     bool last_member_query = 6 [json_name = "last-member-query"];
                  }
                  repeated Source source = 1 [json_name = "source"];
               }
               Sources sources = 13 [json_name = "sources"];
            }
            repeated Group group = 1 [json_name = "group"];
         }
         Groups groups = 12 [json_name = "groups"];
         message IgmpMldStatistics {
            uint32 received_successful_v1_report_count = 1 [json_name = "received-successful-v1-report-count"];
            uint32 received_failure_v1_report_count = 2 [json_name = "received-failure-v1-report-count"];
            uint32 received_v1_done_packet_count = 3 [json_name = "received-v1-done-packet-count"];
            uint32 received_successful_v2_report_count = 4 [json_name = "received-successful-v2-report-count"];
            uint32 received_failure_v2_report_count = 5 [json_name = "received-failure-v2-report-count"];
            uint32 received_v2_leave_packet_count = 6 [json_name = "received-v2-leave-packet-count"];
            uint32 received_successful_v3_report_count = 7 [json_name = "received-successful-v3-report-count"];
            uint32 received_failure_v3_report_count = 8 [json_name = "received-failure-v3-report-count"];
            uint32 sent_query_packet_count = 9 [json_name = "sent-query-packet-count"];
            uint32 received_invalid_packet_count = 10 [json_name = "received-invalid-packet-count"];
         }
         IgmpMldStatistics igmp_mld_statistics = 13 [json_name = "igmp-mld-statistics"];
         message UserOrderPrograms {
            message UserOrderProgram {
               string group_address = 1 [json_name = "group-address"];
               string source_address = 2 [json_name = "source-address"];
               enum Type {
                  Type_DYNAMIC = 0;
                  Type_STATIC = 1;
               };
               Type type = 3 [json_name = "type"];
               enum StaticFlag {
                  StaticFlag_ACTIVE = 0;
                  StaticFlag_INACTIVE = 1;
               };
               StaticFlag static_flag = 4 [json_name = "static-flag"];
            }
            repeated UserOrderProgram user_order_program = 1 [json_name = "user-order-program"];
         }
         UserOrderPrograms user_order_programs = 14 [json_name = "user-order-programs"];
      }
      repeated BasUser bas_user = 1 [json_name = "bas-user"];
   }
   BasUsers bas_users = 1 [json_name = "bas-users"];
   message BasGroups {
      message BasGroup {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         string bas_interface = 2 [json_name = "bas-interface"];
         string vpn_instance = 3 [json_name = "vpn-instance"];
         uint32 user_id = 4 [json_name = "user-id"];
         string group_address = 5 [json_name = "group-address"];
         enum Type {
            Type_DYNAMIC = 0;
            Type_STATIC = 1;
         };
         Type type = 6 [json_name = "type"];
         string slot_id = 7 [json_name = "slot-id"];
         enum UserType {
            UserType_LOCAL = 0;
            UserType_REMOTE = 1;
         };
         UserType user_type = 8 [json_name = "user-type"];
         string user_ip = 9 [json_name = "user-ip"];
         string user_ipv6 = 10 [json_name = "user-ipv6"];
      }
      repeated BasGroup bas_group = 1 [json_name = "bas-group"];
   }
   BasGroups bas_groups = 2 [json_name = "bas-groups"];
   message BasPorts {
      message BasPort {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         string bas_interface = 2 [json_name = "bas-interface"];
         string vpn_instance = 3 [json_name = "vpn-instance"];
         message Groups {
            message Group {
               string group_address = 1 [json_name = "group-address"];
               string source_address = 2 [json_name = "source-address"];
               message Users {
                  message User {
                     uint32 id = 1 [json_name = "id"];
                     uint32 live_time = 2 [json_name = "live-time"];
                     enum FilterMode {
                        FilterMode_INCLUDE = 0;
                        FilterMode_EXCLUDE = 1;
                        FilterMode_NA = 2;
                     };
                     FilterMode filter_mode = 3 [json_name = "filter-mode"];
                     enum Flag {
                        Flag_STATIC = 0;
                        Flag_DYNAMIC = 1;
                        Flag_MAPPING = 2;
                        Flag_STATICX_DYNAMIC = 3;
                        Flag_STATICX_MAPPING = 4;
                        Flag_DYNAMICX_MAPPING = 5;
                        Flag_STATICX_DYNAMICX_MAPPING = 6;
                     };
                     Flag flag = 4 [json_name = "flag"];
                  }
                  repeated User user = 1 [json_name = "user"];
               }
               Users users = 3 [json_name = "users"];
            }
            repeated Group group = 1 [json_name = "group"];
         }
         Groups groups = 4 [json_name = "groups"];
      }
      repeated BasPort bas_port = 1 [json_name = "bas-port"];
   }
   BasPorts bas_ports = 3 [json_name = "bas-ports"];
}


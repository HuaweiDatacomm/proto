syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-09-09 17:46:43
// ProtoYang-version 1
// module huawei-mvpn
// revision 2021-08-05
// revision 2021-07-25
// revision 2021-03-30
// revision 2021-01-16
// revision 2020-12-17
// revision 2020-02-21
// revision 2020-02-04
// revision 2019-12-18
// revision 2019-11-20
// revision 2019-05-06
// namespace urn:huawei:yang:huawei-mvpn

package huawei_mvpn;

message Mvpn {
   message MvpnDefaultParameter {
      string autoDiscovery = 1;
      string extranetSleRpfRul = 2;
      uint32 holddownTime = 3;
      string logSGReuseFlag = 4;
      message NgMvpnCfg {
         bool ngmvpnPropagate = 1;
      }
      NgMvpnCfg ngMvpnCfg = 5;
      string shareGroup = 6;
      uint32 switchDelay = 7;
      string switchGroupPool = 8;
      string swtWithoutReg = 9;
      uint32 thresholdValue = 10;
      message TtlMvpnCfg {
         bool ttlPropagate = 1;
      }
      TtlMvpnCfg ttlMvpnCfg = 11;
   }
   MvpnDefaultParameter mvpnDefaultParameter = 1;
   message MvpnExtranetRpfs {
      message MvpnExtranetRpf {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string grpAddr = 2;
         uint32 grpAddrMaskLen = 3;
         string srcVrfName = 4;
         string vrfName = 5;
      }
      repeated MvpnExtranetRpf mvpnExtranetRpf = 1;
   }
   MvpnExtranetRpfs mvpnExtranetRpfs = 2;
   message MvpnFeatures {
      message MvpnFeature {
         string adImportPolicyName = 1;
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 2;
         enum AutoDiscoveryMode {
            AutoDiscoveryMode_MDT = 0;
            AutoDiscoveryMode_NONE = 1;
         };
         AutoDiscoveryMode autoDiscoveryMode = 3;
         enum ConfigType {
            ConfigType_MD = 0;
            ConfigType_NG = 1;
         };
         ConfigType configType = 4;
         string frrAclName = 5;
         string frrAclName6 = 6;
         string frrFlowBasedAclName = 7;
         string frrFlowBasedAclName6 = 8;
         bool interAreaSegEnable = 9;
         bool isCMulticastFrr = 10;
         bool isCompatibleDraft = 11;
         bool isExportMsdp = 12;
         bool isImportMsdp = 13;
         bool isInterAs = 14;
         bool isSenderSite = 15;
         bool isSwitchWithoutRegister = 16;
         message MulticastWtrCfg {
            uint32 wtr = 1;
         }
         MulticastWtrCfg multicastWtrCfg = 17;
         message MvpnControlMsgTables {
            message MvpnControlMsgTable {
               uint32 invalidMsgNum = 1;
               string msgType = 2;
               uint32 rcvdMsgNum = 3;
               uint32 sendMsgNum = 4;
            }
            repeated MvpnControlMsgTable mvpnControlMsgTable = 1;
         }
         MvpnControlMsgTables mvpnControlMsgTables = 18;
         message MvpnIpmsiTunnelCfgs {
            message MvpnIpmsiTunnelCfg {
               string teP2MPTemplate = 1;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 2;
            }
            repeated MvpnIpmsiTunnelCfg mvpnIpmsiTunnelCfg = 1;
         }
         MvpnIpmsiTunnelCfgs mvpnIpmsiTunnelCfgs = 19;
         message MvpnIpmsis {
            message MvpnIpmsi {
               string shareGrpAddr = 1;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 2;
            }
            MvpnIpmsi mvpnIpmsi = 1;
         }
         MvpnIpmsis mvpnIpmsis = 20;
         message MvpnNGSpmsis {
            message MvpnNGSpmsi {
               uint32 holdDownTimeOfSpmsi = 1;
               uint32 revertDelayTimeOfSpmsi = 2;
               uint32 switchDelayOfSpmsi = 3;
            }
            MvpnNGSpmsi mvpnNGSpmsi = 1;
         }
         MvpnNGSpmsis mvpnNGSpmsis = 21;
         message MvpnSpmsiTunnelCfgs {
            message MvpnSpmsiTunnelCfg {
               string groupAddr = 1;
               uint32 groupMaskLength = 2;
               bool isGrpWildCard = 3;
               bool isSrcWildCard = 4;
               string p2mpteTemplate = 5;
               string sourceAddr = 6;
               uint32 sourceMaskLength = 7;
               uint32 thresholdValue = 8;
               uint32 tnlLimit = 9;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 10;
            }
            repeated MvpnSpmsiTunnelCfg mvpnSpmsiTunnelCfg = 1;
         }
         MvpnSpmsiTunnelCfgs mvpnSpmsiTunnelCfgs = 22;
         message MvpnSpmsis {
            message MvpnSpmsi {
               string groupAclName = 1;
               string groupPoolAddr = 2;
               uint32 groupPoolMaskLength = 3;
               uint32 holdDownTime = 4;
               bool isSwitchGroupReuseLog = 5;
               uint32 switchDelayTime = 6;
               uint32 thresholdValue = 7;
               uint32 tunnelLimit = 8;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 9;
            }
            MvpnSpmsi mvpnSpmsi = 1;
         }
         MvpnSpmsis mvpnSpmsis = 23;
         message MvpnTunnelInterfaces {
            message MvpnTunnelInterface {
               bool isUnnumbered = 1;
               string mtlName = 2;
               uint32 mtlNum = 3;
               string mtunnelIfIpAddress = 4;
               uint32 mtunnelIfIpMaskLength = 5;
               string unnumberedIfName = 6;
            }
            repeated MvpnTunnelInterface mvpnTunnelInterface = 1;
         }
         MvpnTunnelInterfaces mvpnTunnelInterfaces = 24;
         message MvpnVpnTargets {
            message MvpnVpnTarget {
               enum RtType {
                  RtType_EXPORTX_EXTCOMMUNITY = 0;
                  RtType_IMPORTX_EXTCOMMUNITY = 1;
               };
               RtType rtType = 1;
               string vpnTarVal = 2;
            }
            repeated MvpnVpnTarget mvpnVpnTarget = 1;
         }
         MvpnVpnTargets mvpnVpnTargets = 25;
         uint32 rptPruneDelay = 26;
         enum RptSptMode {
            RptSptMode_NONE = 0;
            RptSptMode_RPTSPTMODE = 1;
            RptSptMode_SPTMODE = 2;
         };
         RptSptMode rptSptMode = 27;
         enum SignalingMode {
            SignalingMode_BGP = 0;
            SignalingMode_INVALID = 1;
         };
         SignalingMode signalingMode = 28;
         uint32 tnlDetectDelayOfSpmsi = 29;
         string vrfName = 30;
      }
      repeated MvpnFeature mvpnFeature = 1;
   }
   MvpnFeatures mvpnFeatures = 3;
   message MvpnGlobalCfgs {
      message MvpnGlobalCfg {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         bool isABRSegEnable = 2;
         string vrfName = 3;
         bool isExpLabEnable = 4;
      }
      repeated MvpnGlobalCfg mvpnGlobalCfg = 1;
   }
   MvpnGlobalCfgs mvpnGlobalCfgs = 4;
   message MvpnIDs {
      message MvpnID {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string mvpnID = 2;
         string vrfName = 3;
      }
      repeated MvpnID mvpnID = 1;
   }
   MvpnIDs mvpnIDs = 5;
   message MvpnIPMSIInfos {
      message MvpnIPMSIInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string ldpLspId = 2;
         string ldpRouteAddr = 3;
         message MvpnIPMSITnlInfos {
            message MvpnIPMSITnlInfo {
               string role = 1;
               string tunnelAddress = 2;
            }
            repeated MvpnIPMSITnlInfo mvpnIPMSITnlInfo = 1;
         }
         MvpnIPMSITnlInfos mvpnIPMSITnlInfos = 4;
         message MvpnSGInfos {
            message MvpnSGInfo {
               string grpAddress = 1;
               string srcAddress = 2;
            }
            repeated MvpnSGInfo mvpnSGInfo = 1;
         }
         MvpnSGInfos mvpnSGInfos = 5;
         string teExtendTunnelId = 6;
         string teP2MPId = 7;
         uint32 teTunnelId = 8;
         enum TunnelMode {
            TunnelMode_INVALID = 0;
            TunnelMode_MP2MPMLDP = 1;
            TunnelMode_P2MPMLDP = 2;
            TunnelMode_P2MPTE = 3;
            TunnelMode_PIMSM = 4;
            TunnelMode_PIMSSM = 5;
         };
         TunnelMode tunnelMode = 9;
         string vrfName = 10;
      }
      repeated MvpnIPMSIInfo mvpnIPMSIInfo = 1;
   }
   MvpnIPMSIInfos mvpnIPMSIInfos = 6;
   message MvpnSPMSIInfos {
      message MvpnSPMSIInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string ldpLspId = 2;
         string ldpRouteAddr = 3;
         message MvpnSPMSISGInfos {
            message MvpnSPMSISGInfo {
               string grpAddress = 1;
               string srcAddress = 2;
            }
            repeated MvpnSPMSISGInfo mvpnSPMSISGInfo = 1;
         }
         MvpnSPMSISGInfos mvpnSPMSISGInfos = 4;
         message MvpnSPMSITnlInfos {
            message MvpnSPMSITnlInfo {
               string role = 1;
               string tunnelAddress = 2;
            }
            repeated MvpnSPMSITnlInfo mvpnSPMSITnlInfo = 1;
         }
         MvpnSPMSITnlInfos mvpnSPMSITnlInfos = 5;
         string teExtendTunnelId = 6;
         string teP2MPId = 7;
         uint32 teTunnelId = 8;
         enum TunnelMode {
            TunnelMode_INVALID = 0;
            TunnelMode_MP2MPMLDP = 1;
            TunnelMode_P2MPMLDP = 2;
            TunnelMode_P2MPTE = 3;
            TunnelMode_PIMSM = 4;
            TunnelMode_PIMSSM = 5;
         };
         TunnelMode tunnelMode = 9;
         string vrfName = 10;
      }
      repeated MvpnSPMSIInfo mvpnSPMSIInfo = 1;
   }
   MvpnSPMSIInfos mvpnSPMSIInfos = 7;
   message MvpnSegIPMSIInfos {
      message MvpnSegIPMSIInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         message DownStreamInfos {
            message DownStreamInfo {
               string ldpLspId = 1;
               string ldpRouteAddr = 2;
               message MvpnSegIPDwTnlInfos {
                  message MvpnSegIPDwTnlInfo {
                     string role = 1;
                     string tunnelAddress = 2;
                  }
                  repeated MvpnSegIPDwTnlInfo mvpnSegIPDwTnlInfo = 1;
               }
               MvpnSegIPDwTnlInfos mvpnSegIPDwTnlInfos = 3;
               string policyName = 4;
               string teExtendTunnelId = 5;
               string teP2MPId = 6;
               uint32 teTunnelId = 7;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 8;
            }
            repeated DownStreamInfo downStreamInfo = 1;
         }
         DownStreamInfos downStreamInfos = 2;
         string origIP = 3;
         string rd = 4;
         message UpStreamInfo {
            string ldpLspId = 1;
            string ldpRouteAddr = 2;
            message MvpnSegIpUpTnlInfo {
               string role = 1;
               string tunnelAddress = 2;
            }
            repeated MvpnSegIpUpTnlInfo mvpnSegIpUpTnlInfo = 3;
            string teExtendTunnelId = 4;
            string teP2MPId = 5;
            uint32 teTunnelId = 6;
            enum TunnelMode {
               TunnelMode_INVALID = 0;
               TunnelMode_MP2MPMLDP = 1;
               TunnelMode_P2MPMLDP = 2;
               TunnelMode_P2MPTE = 3;
               TunnelMode_PIMSM = 4;
               TunnelMode_PIMSSM = 5;
            };
            TunnelMode tunnelMode = 7;
         }
         repeated UpStreamInfo upStreamInfo = 5;
      }
      repeated MvpnSegIPMSIInfo mvpnSegIPMSIInfo = 1;
   }
   MvpnSegIPMSIInfos mvpnSegIPMSIInfos = 8;
   message MvpnSegSPMSIInfos {
      message MvpnSegSPMSIInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string cg = 2;
         string cs = 3;
         message DownStreamInfos {
            message DownStreamInfo {
               string ldpLspId = 1;
               string ldpRouteAddr = 2;
               message MvpnSegSPDwTnlInfos {
                  message MvpnSegSPDwTnlInfo {
                     string role = 1;
                     string tunnelAddress = 2;
                  }
                  repeated MvpnSegSPDwTnlInfo mvpnSegSPDwTnlInfo = 1;
               }
               MvpnSegSPDwTnlInfos mvpnSegSPDwTnlInfos = 3;
               string policyName = 4;
               string teExtendTunnelId = 5;
               string teP2MPId = 6;
               uint32 teTunnelId = 7;
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_MP2MPMLDP = 1;
                  TunnelMode_P2MPMLDP = 2;
                  TunnelMode_P2MPTE = 3;
                  TunnelMode_PIMSM = 4;
                  TunnelMode_PIMSSM = 5;
               };
               TunnelMode tunnelMode = 8;
            }
            repeated DownStreamInfo downStreamInfo = 1;
         }
         DownStreamInfos downStreamInfos = 4;
         string origIP = 5;
         string rd = 6;
         message UpStreamInfo {
            string ldpLspId = 1;
            string ldpRouteAddr = 2;
            message MvpnSegSPUpTnlInfo {
               string role = 1;
               string tunnelAddress = 2;
            }
            repeated MvpnSegSPUpTnlInfo mvpnSegSPUpTnlInfo = 3;
            string teExtendTunnelId = 4;
            string teP2MPId = 5;
            uint32 teTunnelId = 6;
            enum TunnelMode {
               TunnelMode_INVALID = 0;
               TunnelMode_MP2MPMLDP = 1;
               TunnelMode_P2MPMLDP = 2;
               TunnelMode_P2MPTE = 3;
               TunnelMode_PIMSM = 4;
               TunnelMode_PIMSSM = 5;
            };
            TunnelMode tunnelMode = 7;
         }
         repeated UpStreamInfo upStreamInfo = 7;
      }
      repeated MvpnSegSPMSIInfo mvpnSegSPMSIInfo = 1;
   }
   MvpnSegSPMSIInfos mvpnSegSPMSIInfos = 9;
   message MvpnShareGrpInfos {
      message MvpnShareGrpInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string mtunnelAddress = 2;
         message MvpnShareGrpRemoteInfos {
            message MvpnShareGrpRemoteInfo {
               string peerAddress = 1;
               string shareGrpAddress = 2;
            }
            repeated MvpnShareGrpRemoteInfo mvpnShareGrpRemoteInfo = 1;
         }
         MvpnShareGrpRemoteInfos mvpnShareGrpRemoteInfos = 3;
         string shareGrpAddress = 4;
         string vrfName = 5;
      }
      repeated MvpnShareGrpInfo mvpnShareGrpInfo = 1;
   }
   MvpnShareGrpInfos mvpnShareGrpInfos = 10;
   message MvpnSourceInterfaces {
      message MvpnSourceInterface {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         string sourceInterfaceName = 2;
         string vrfName = 3;
      }
      repeated MvpnSourceInterface mvpnSourceInterface = 1;
   }
   MvpnSourceInterfaces mvpnSourceInterfaces = 11;
   message MvpnSwtGrpRecvInfos {
      message MvpnSwtGrpRecvInfo {
         uint32 activeCount = 1;
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 2;
         uint32 referenceCount = 3;
         message SenderInfos {
            message SenderInfo {
               uint32 senderActiveCnt = 1;
               string senderAddress = 2;
               message SwtSGInfos {
                  message SwtSGInfo {
                     uint32 expireTime = 1;
                     string grpAddress = 2;
                     bool isActive = 3;
                     string srcAddress = 4;
                  }
                  repeated SwtSGInfo swtSGInfo = 1;
               }
               SwtSGInfos swtSGInfos = 3;
            }
            repeated SenderInfo senderInfo = 1;
         }
         SenderInfos senderInfos = 4;
         string swtGrpAddress = 5;
         string vrfName = 6;
      }
      repeated MvpnSwtGrpRecvInfo mvpnSwtGrpRecvInfo = 1;
   }
   MvpnSwtGrpRecvInfos mvpnSwtGrpRecvInfos = 12;
   message MvpnSwtGrpSendInfos {
      message MvpnSwtGrpSendInfo {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         uint32 referenceCount = 2;
         message SgInfos {
            message SgInfo {
               string grpAddress = 1;
               string srcAddress = 2;
               uint32 swtTime = 3;
            }
            repeated SgInfo sgInfo = 1;
         }
         SgInfos sgInfos = 3;
         string swtGrpAddress = 4;
         string vrfName = 5;
      }
      repeated MvpnSwtGrpSendInfo mvpnSwtGrpSendInfo = 1;
   }
   MvpnSwtGrpSendInfos mvpnSwtGrpSendInfos = 13;
   message MvpnSwtInvPktInfos {
      message MvpnSwtInvPktInfo {
         string ifAddress = 1;
         string msgContent = 2;
         string msgType = 3;
         uint32 packetIndex = 4;
         uint32 packetLength = 5;
         string recvTime = 6;
      }
      repeated MvpnSwtInvPktInfo mvpnSwtInvPktInfo = 1;
   }
   MvpnSwtInvPktInfos mvpnSwtInvPktInfos = 14;
   message MvpnSwtInvPktStates {
      message MvpnSwtInvPktState {
         enum AddressFamily {
            AddressFamily_IPV4UNICAST = 0;
            AddressFamily_IPV6UNICAST = 1;
         };
         AddressFamily addressFamily = 1;
         uint32 mcastGrpAddress = 2;
         uint32 mcastSrcAddress = 3;
         uint32 msgType = 4;
         uint32 packetLength = 5;
         uint32 swtGrpAddress = 6;
         string vrfName = 7;
      }
      repeated MvpnSwtInvPktState mvpnSwtInvPktState = 1;
   }
   MvpnSwtInvPktStates mvpnSwtInvPktStates = 15;
   message MvpnpipeCfgs {
      message MvpnpipeCfg {
         enum Color {
            Color_GREEN = 0;
            Color_NA = 1;
            Color_RED = 2;
            Color_YELLOW = 3;
         };
         Color color = 1;
         string mTunnelName = 2;
         enum Mode {
            Mode_PIPE = 0;
            Mode_UNIFORM = 1;
         };
         Mode mode = 3;
         enum ServiceClass {
            ServiceClass_AF1 = 0;
            ServiceClass_AF2 = 1;
            ServiceClass_AF3 = 2;
            ServiceClass_AF4 = 3;
            ServiceClass_BE = 4;
            ServiceClass_CS6 = 5;
            ServiceClass_CS7 = 6;
            ServiceClass_EF = 7;
            ServiceClass_NA = 8;
         };
         ServiceClass serviceClass = 4;
      }
      repeated MvpnpipeCfg mvpnpipeCfg = 1;
   }
   MvpnpipeCfgs mvpnpipeCfgs = 16;
   message SlotMvpnCfgs {
      message SlotMvpnCfg {
         string position = 1;
      }
      repeated SlotMvpnCfg slotMvpnCfg = 1;
   }
   SlotMvpnCfgs slotMvpnCfgs = 17;
   message Globals {
      message Global {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         string mvpn_id = 2 [json_name = "mvpn-id"];
         bool enable_inter_area_segmented = 3 [json_name = "enable-inter-area-segmented"];
         bool apply_explicit_null_label = 4 [json_name = "apply-explicit-null-label"];
      }
      repeated Global global = 1 [json_name = "global"];
   }
   Globals globals = 18 [json_name = "globals"];
   message Ipv6UnderlayGlobals {
      message Ipv6UnderlayGlobal {
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 1 [json_name = "address-family"];
         string mvpn_id = 2 [json_name = "mvpn-id"];
      }
      repeated Ipv6UnderlayGlobal ipv6_underlay_global = 1 [json_name = "ipv6-underlay-global"];
   }
   Ipv6UnderlayGlobals ipv6_underlay_globals = 19 [json_name = "ipv6-underlay-globals"];
   message SegmentIpmsis {
      message SegmentIpmsi {
         string rd = 1 [json_name = "rd"];
         string origin_ip = 2 [json_name = "origin-ip"];
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 3 [json_name = "address-family"];
         message UpStream {
            enum TunnelMode {
               TunnelMode_INVALID = 0;
               TunnelMode_PIMX_SM = 1;
               TunnelMode_PIMX_SSM = 2;
               TunnelMode_P2MPX_TE = 3;
               TunnelMode_P2MPX_MLDP = 4;
               TunnelMode_MP2MPX_MLDP = 5;
               TunnelMode_VXLANX_STATIC = 6;
               TunnelMode_BIER = 7;
               TunnelMode_BIERX_IPV6 = 8;
            };
            TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
            message TunnelAttribute_RsvpTeP2Mp {
               string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
               uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
               string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
            }
            message TunnelAttribute_MldpP2Mp {
               string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
               string ldp_lsp_id = 2 [json_name = "ldp-lsp-id"];
            }
            oneof TunnelAttribute {
               TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 2 [json_name = "rsvp-te-p2mp"];
               TunnelAttribute_MldpP2Mp tunnel_attribute_mldp_p2mp = 3 [json_name = "mldp-p2mp"];
            }
            message Tunnels {
               message Tunnel {
                  string address = 1 [json_name = "address"];
                  string role = 2 [json_name = "role"];
               }
               repeated Tunnel tunnel = 1 [json_name = "tunnel"];
            }
            Tunnels tunnels = 4 [json_name = "tunnels"];
         }
         UpStream up_stream = 4 [json_name = "up-stream"];
         message DownStreams {
            message DownStream {
               uint32 tunnel_sequence = 1 [json_name = "tunnel-sequence"];
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_PIMX_SM = 1;
                  TunnelMode_PIMX_SSM = 2;
                  TunnelMode_P2MPX_TE = 3;
                  TunnelMode_P2MPX_MLDP = 4;
                  TunnelMode_MP2MPX_MLDP = 5;
                  TunnelMode_VXLANX_STATIC = 6;
                  TunnelMode_BIER = 7;
                  TunnelMode_BIERX_IPV6 = 8;
               };
               TunnelMode tunnel_mode = 2 [json_name = "tunnel-mode"];
               string policy_name = 3 [json_name = "policy-name"];
               message TunnelAttribute_RsvpTeP2Mp {
                  string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                  uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                  string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
               }
               message TunnelAttribute_MldpP2Mp {
                  string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                  string ldp_lsp_id = 2 [json_name = "ldp-lsp-id"];
               }
               oneof TunnelAttribute {
                  TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 4 [json_name = "rsvp-te-p2mp"];
                  TunnelAttribute_MldpP2Mp tunnel_attribute_mldp_p2mp = 5 [json_name = "mldp-p2mp"];
               }
               message Tunnels {
                  message Tunnel {
                     string address = 1 [json_name = "address"];
                     string role = 2 [json_name = "role"];
                  }
                  repeated Tunnel tunnel = 1 [json_name = "tunnel"];
               }
               Tunnels tunnels = 6 [json_name = "tunnels"];
            }
            repeated DownStream down_stream = 1 [json_name = "down-stream"];
         }
         DownStreams down_streams = 5 [json_name = "down-streams"];
      }
      repeated SegmentIpmsi segment_ipmsi = 1 [json_name = "segment-ipmsi"];
   }
   SegmentIpmsis segment_ipmsis = 20 [json_name = "segment-ipmsis"];
   message SegmentSpmsis {
      message SegmentSpmsi {
         string rd = 1 [json_name = "rd"];
         string origin_ip = 2 [json_name = "origin-ip"];
         enum AddressFamily {
            INVALID_ENUM_VALUE_AddressFamily = 0;
            AddressFamily_IPV4X_UNICAST = 1;
            AddressFamily_IPV6X_UNICAST = 2;
         };
         AddressFamily address_family = 3 [json_name = "address-family"];
         string source_addr = 4 [json_name = "source-addr"];
         string group_addr = 5 [json_name = "group-addr"];
         message UpStream {
            enum TunnelMode {
               TunnelMode_INVALID = 0;
               TunnelMode_PIMX_SM = 1;
               TunnelMode_PIMX_SSM = 2;
               TunnelMode_P2MPX_TE = 3;
               TunnelMode_P2MPX_MLDP = 4;
               TunnelMode_MP2MPX_MLDP = 5;
               TunnelMode_VXLANX_STATIC = 6;
               TunnelMode_BIER = 7;
               TunnelMode_BIERX_IPV6 = 8;
            };
            TunnelMode tunnel_mode = 1 [json_name = "tunnel-mode"];
            message TunnelAttribute_RsvpTeP2Mp {
               string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
               uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
               string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
            }
            message TunnelAttribute_MldpP2Mp {
               string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
               string ldp_lsp_id = 2 [json_name = "ldp-lsp-id"];
            }
            oneof TunnelAttribute {
               TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 2 [json_name = "rsvp-te-p2mp"];
               TunnelAttribute_MldpP2Mp tunnel_attribute_mldp_p2mp = 3 [json_name = "mldp-p2mp"];
            }
            message Tunnels {
               message Tunnel {
                  string tunnel_addr = 1 [json_name = "tunnel-addr"];
                  string role = 2 [json_name = "role"];
               }
               repeated Tunnel tunnel = 1 [json_name = "tunnel"];
            }
            Tunnels tunnels = 4 [json_name = "tunnels"];
         }
         UpStream up_stream = 6 [json_name = "up-stream"];
         message DownStreams {
            message DownStream {
               uint32 tunnel_sequence = 1 [json_name = "tunnel-sequence"];
               enum TunnelMode {
                  TunnelMode_INVALID = 0;
                  TunnelMode_PIMX_SM = 1;
                  TunnelMode_PIMX_SSM = 2;
                  TunnelMode_P2MPX_TE = 3;
                  TunnelMode_P2MPX_MLDP = 4;
                  TunnelMode_MP2MPX_MLDP = 5;
                  TunnelMode_VXLANX_STATIC = 6;
                  TunnelMode_BIER = 7;
                  TunnelMode_BIERX_IPV6 = 8;
               };
               TunnelMode tunnel_mode = 2 [json_name = "tunnel-mode"];
               string policy_name = 3 [json_name = "policy-name"];
               message TunnelAttribute_RsvpTeP2Mp {
                  string te_p2mp_id = 1 [json_name = "te-p2mp-id"];
                  uint32 te_tunnel_id = 2 [json_name = "te-tunnel-id"];
                  string te_extend_tunnel_id = 3 [json_name = "te-extend-tunnel-id"];
               }
               message TunnelAttribute_MldpP2Mp {
                  string ldp_route_addr = 1 [json_name = "ldp-route-addr"];
                  string ldp_lsp_id = 2 [json_name = "ldp-lsp-id"];
               }
               oneof TunnelAttribute {
                  TunnelAttribute_RsvpTeP2Mp tunnel_attribute_rsvp_te_p2mp = 4 [json_name = "rsvp-te-p2mp"];
                  TunnelAttribute_MldpP2Mp tunnel_attribute_mldp_p2mp = 5 [json_name = "mldp-p2mp"];
               }
               message Tunnels {
                  message Tunnel {
                     string address = 1 [json_name = "address"];
                     string role = 2 [json_name = "role"];
                  }
                  repeated Tunnel tunnel = 1 [json_name = "tunnel"];
               }
               Tunnels tunnels = 6 [json_name = "tunnels"];
            }
            repeated DownStream down_stream = 1 [json_name = "down-stream"];
         }
         DownStreams down_streams = 7 [json_name = "down-streams"];
      }
      repeated SegmentSpmsi segment_spmsi = 1 [json_name = "segment-spmsi"];
   }
   SegmentSpmsis segment_spmsis = 21 [json_name = "segment-spmsis"];
   message InvalidSwitchGroupPackets {
      message InvalidSwitchGroupPacket {
         string msg_type = 1 [json_name = "msg-type"];
         uint32 packet_index = 2 [json_name = "packet-index"];
         string if_address = 3 [json_name = "if-address"];
         string receive_time = 4 [json_name = "receive-time"];
         uint32 packet_length = 5 [json_name = "packet-length"];
         string msg_content = 6 [json_name = "msg-content"];
      }
      repeated InvalidSwitchGroupPacket invalid_switch_group_packet = 1 [json_name = "invalid-switch-group-packet"];
   }
   InvalidSwitchGroupPackets invalid_switch_group_packets = 22 [json_name = "invalid-switch-group-packets"];
   message RosenGlobal {
      message SourceInterface {
         string source_interface_name = 1 [json_name = "source-interface-name"];
      }
      SourceInterface source_interface = 1 [json_name = "source-interface"];
   }
   RosenGlobal rosen_global = 23 [json_name = "rosen-global"];
}


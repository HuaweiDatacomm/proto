syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-09-19 23:01:26
// ProtoYang-version 1
// module huawei-evpn
// revision 2022-09-19
// revision 2022-08-29
// revision 2022-08-19
// revision 2022-07-22
// revision 2022-07-19
// revision 2022-07-15
// revision 2022-07-11
// revision 2022-06-20
// revision 2022-06-06
// revision 2022-05-27
// revision 2022-05-07
// revision 2022-03-18
// revision 2022-02-15
// revision 2022-01-28
// revision 2022-01-21
// revision 2021-12-13
// revision 2021-12-08
// revision 2021-08-12
// revision 2020-05-04
// revision 2020-04-20
// revision 2019-03-22
// namespace urn:huawei:yang:huawei-evpn

package huawei_evpn;

message Evpn {
   message BasProcess {
      enum RedundancyMode {
         RedundancyMode_ALLX_ACTIVE = 0;
         RedundancyMode_SINGLEX_ACTIVE = 1;
      };
      RedundancyMode redundancy_mode = 1 [json_name = "redundancy-mode"];
      string source_address = 2 [json_name = "source-address"];
   }
   BasProcess bas_process = 1 [json_name = "bas-process"];
   message Site {
      enum DfElectionMode {
         DfElectionMode_PERX_VLAN = 0;
         DfElectionMode_PERX_INTERFACE = 1;
      };
      DfElectionMode df_election_mode = 1 [json_name = "df-election-mode"];
      enum VpwsDfElectionMode {
         INVALID_ENUM_VALUE_VpwsDfElectionMode = 0;
         VpwsDfElectionMode_PERX_SERVICEID = 1;
         VpwsDfElectionMode_PERX_INTERFACE = 2;
      };
      VpwsDfElectionMode vpws_df_election_mode = 2 [json_name = "vpws-df-election-mode"];
      bool ac_influnced_enable = 3 [json_name = "ac-influnced-enable"];
      enum AdPerEsSplit {
         AdPerEsSplit_DONTX_DIVIDEX_RT = 0;
         AdPerEsSplit_DIVIDEX_RT = 1;
      };
      AdPerEsSplit ad_per_es_split = 4 [json_name = "ad-per-es-split"];
      bool irb_reoriginated = 5 [json_name = "irb-reoriginated"];
      bool vlan_extend_private_enable = 6 [json_name = "vlan-extend-private-enable"];
      bool vlan_extend_redirect_enable = 7 [json_name = "vlan-extend-redirect-enable"];
      bool local_remote_frr_enable = 8 [json_name = "local-remote-frr-enable"];
      bool bypass_vxlan_enable = 9 [json_name = "bypass-vxlan-enable"];
      uint32 alm_threshold = 10 [json_name = "alm-threshold"];
      uint32 recovery_percentage = 11 [json_name = "recovery-percentage"];
      bool local_remote_vpws_frr_enable = 12 [json_name = "local-remote-vpws-frr-enable"];
      bool remote_vpws_frr_enable = 13 [json_name = "remote-vpws-frr-enable"];
      bool irb_split_group = 14 [json_name = "irb-split-group"];
      bool compatible = 15 [json_name = "compatible"];
      bool advertising_vxlan_tunnel_mac = 16 [json_name = "advertising-vxlan-tunnel-mac"];
      message MacDuplication {
         uint32 period = 1 [json_name = "period"];
         uint32 cycle = 2 [json_name = "cycle"];
         uint32 recycle = 3 [json_name = "recycle"];
      }
      MacDuplication mac_duplication = 17 [json_name = "mac-duplication"];
      message StaticEsis {
         message StaticEsi {
            string esi = 1 [json_name = "esi"];
            enum RedundancyMode {
               RedundancyMode_ALLX_ACTIVE = 0;
               RedundancyMode_SINGLEX_ACTIVE = 1;
               RedundancyMode_NONE = 255;
            };
            RedundancyMode redundancy_mode = 2 [json_name = "redundancy-mode"];
            enum DfElectionType {
               DfElectionType_DEFAULT = 0;
               DfElectionType_PREFERENCEX_BASED = 2;
            };
            DfElectionType df_election_type = 3 [json_name = "df-election-type"];
            uint32 preference = 4 [json_name = "preference"];
            bool non_revertive = 5 [json_name = "non-revertive"];
            bool df_election = 6 [json_name = "df-election"];
         }
         repeated StaticEsi static_esi = 1 [json_name = "static-esi"];
      }
      StaticEsis static_esis = 18 [json_name = "static-esis"];
      message DynamicEsis {
         message DynamicEsi {
            string esi_name = 1 [json_name = "esi-name"];
            enum RedundancyMode {
               RedundancyMode_ALLX_ACTIVE = 0;
               RedundancyMode_SINGLEX_ACTIVE = 1;
               RedundancyMode_NONE = 255;
            };
            RedundancyMode redundancy_mode = 2 [json_name = "redundancy-mode"];
            enum DfElectionType {
               DfElectionType_DEFAULT = 0;
               DfElectionType_PREFERENCEX_BASED = 2;
            };
            DfElectionType df_election_type = 3 [json_name = "df-election-type"];
            uint32 preference = 4 [json_name = "preference"];
            bool non_revertive = 5 [json_name = "non-revertive"];
         }
         repeated DynamicEsi dynamic_esi = 1 [json_name = "dynamic-esi"];
      }
      DynamicEsis dynamic_esis = 19 [json_name = "dynamic-esis"];
      bool advertise_suppressed_route = 20 [json_name = "advertise-suppressed-route"];
      bool routerid_extend_private_enable = 21 [json_name = "routerid-extend-private-enable"];
      bool mac_duplication_enable = 22 [json_name = "mac-duplication-enable"];
      bool nexthop_recursive_lookup_restrain = 23 [json_name = "nexthop-recursive-lookup-restrain"];
      bool adv_dci_local_rt_to_mpls = 24 [json_name = "adv-dci-local-rt-to-mpls"];
      bool l3_reoriginate_diff_split_grp = 25 [json_name = "l3-reoriginate-diff-split-grp"];
      bool reflect_same_split_group = 26 [json_name = "reflect-same-split-group"];
      message RouteControl {
         bool vpws_srv6_advertise_mpls = 1 [json_name = "vpws-srv6-advertise-mpls"];
         bool vpls_srv6_advertise_mpls = 2 [json_name = "vpls-srv6-advertise-mpls"];
         string tunnel_id = 3 [json_name = "tunnel-id"];
      }
      RouteControl route_control = 27 [json_name = "route-control"];
      message Attribute {
         uint32 migrate_delay_time = 1 [json_name = "migrate-delay-time"];
      }
      Attribute attribute = 28 [json_name = "attribute"];
   }
   Site site = 2 [json_name = "site"];
   message Instances {
      message Instance {
         string name = 1 [json_name = "name"];
         enum Type {
            Type_NORMAL = 0;
            Type_IX_EVPN = 1;
            Type_BX_EVPN = 2;
            Type_BDX_EVPN = 3;
            Type_VPWSX_EVPN = 4;
         };
         Type type = 2 [json_name = "type"];
         message NormalEvpn {
            string description = 1 [json_name = "description"];
            string rd = 2 [json_name = "rd"];
            string import_policy_name = 3 [json_name = "import-policy-name"];
            string export_policy_name = 4 [json_name = "export-policy-name"];
            enum LocalRemoteFrr {
               LocalRemoteFrr_DEFAULT = 0;
               LocalRemoteFrr_ENABLE = 1;
               LocalRemoteFrr_DISABLE = 2;
            };
            LocalRemoteFrr local_remote_frr = 5 [json_name = "local-remote-frr"];
            bool mac_balance_enable = 6 [json_name = "mac-balance-enable"];
            enum IsolateSpoken {
               IsolateSpoken_DEFAULT = 0;
               IsolateSpoken_ISOLATEFLAG = 4;
            };
            IsolateSpoken isolate_spoken = 7 [json_name = "isolate-spoken"];
            string export_acl_name_or_id = 8 [json_name = "export-acl-name-or-id"];
            string import_acl_name_or_id = 9 [json_name = "import-acl-name-or-id"];
            bool etree_enable = 10 [json_name = "etree-enable"];
            message Rts {
               message Rt {
                  enum VrfRtType {
                     INVALID_ENUM_VALUE_VrfRtType = 0;
                     VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                     VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                  };
                  VrfRtType vrf_rt_type = 1 [json_name = "vrf-rt-type"];
                  string vrf_rt_value = 2 [json_name = "vrf-rt-value"];
               }
               repeated Rt rt = 1 [json_name = "rt"];
            }
            Rts rts = 11 [json_name = "rts"];
            message MacDuplication {
               uint32 period = 1 [json_name = "period"];
               uint32 cycle = 2 [json_name = "cycle"];
               uint32 recycle = 3 [json_name = "recycle"];
               bool blackhole = 4 [json_name = "blackhole"];
               string acl_name_or_id = 5 [json_name = "acl-name-or-id"];
            }
            MacDuplication mac_duplication = 12 [json_name = "mac-duplication"];
            string tunnel_policy_name = 13 [json_name = "tunnel-policy-name"];
            bool control_word = 14 [json_name = "control-word"];
            message Pipe {
               bool split_mode = 1 [json_name = "split-mode"];
               enum PipeMode {
                  INVALID_ENUM_VALUE_PipeMode = 0;
                  PipeMode_PIPE = 1;
                  PipeMode_SHORTPIPE = 2;
                  PipeMode_UNIFORM = 3;
               };
               PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
               enum IngressPipeMode {
                  INVALID_ENUM_VALUE_IngressPipeMode = 0;
                  IngressPipeMode_PIPE = 1;
                  IngressPipeMode_SHORTPIPE = 2;
                  IngressPipeMode_UNIFORM = 3;
               };
               IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
               enum EgressPipeMode {
                  INVALID_ENUM_VALUE_EgressPipeMode = 0;
                  EgressPipeMode_PIPE = 1;
                  EgressPipeMode_SHORTPIPE = 2;
                  EgressPipeMode_UNIFORM = 3;
               };
               EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               enum Color {
                  Color_GREEN = 0;
                  Color_YELLOW = 1;
                  Color_RED = 2;
               };
               Color color = 6 [json_name = "color"];
               string domain_name = 7 [json_name = "domain-name"];
               enum TrustType {
                  TrustType_OUTPRI = 0;
                  TrustType_INPRI = 1;
                  TrustType_IPDSCP = 2;
               };
               TrustType trust_type = 8 [json_name = "trust-type"];
            }
            Pipe pipe = 15 [json_name = "pipe"];
            message ReserveIfSwitch {
               bool enable = 1 [json_name = "enable"];
            }
            ReserveIfSwitch reserve_if_switch = 16 [json_name = "reserve-if-switch"];
            message MacDuplicationInfos {
               message MacDuplicationInfo {
                  string mac_address = 1 [json_name = "mac-address"];
                  uint32 bd_id = 2 [json_name = "bd-id"];
                  uint32 bd_tag = 3 [json_name = "bd-tag"];
                  uint32 dampened_times = 4 [json_name = "dampened-times"];
                  bool suppress_flag = 5 [json_name = "suppress-flag"];
                  string last_source = 6 [json_name = "last-source"];
                  string peer_ip = 7 [json_name = "peer-ip"];
                  uint32 vc_id = 8 [json_name = "vc-id"];
                  enum VcType {
                     INVALID_ENUM_VALUE_VcType = 0;
                     VcType_VLAN = 4;
                     VcType_ETHERNET = 5;
                  };
                  VcType vc_type = 9 [json_name = "vc-type"];
                  string suppress_time = 10 [json_name = "suppress-time"];
               }
               repeated MacDuplicationInfo mac_duplication_info = 1 [json_name = "mac-duplication-info"];
            }
            MacDuplicationInfos mac_duplication_infos = 17 [json_name = "mac-duplication-infos"];
            bool nexthop_recursive_lookup_restrain = 18 [json_name = "nexthop-recursive-lookup-restrain"];
         }
         NormalEvpn normal_evpn = 3 [json_name = "normal-evpn"];
         message BdEvpn {
            string description = 1 [json_name = "description"];
            string rd = 2 [json_name = "rd"];
            string import_policy_name = 3 [json_name = "import-policy-name"];
            string export_policy_name = 4 [json_name = "export-policy-name"];
            enum LocalRemoteFrr {
               LocalRemoteFrr_DEFAULT = 0;
               LocalRemoteFrr_ENABLE = 1;
               LocalRemoteFrr_DISABLE = 2;
            };
            LocalRemoteFrr local_remote_frr = 5 [json_name = "local-remote-frr"];
            bool mac_balance_enable = 6 [json_name = "mac-balance-enable"];
            string export_acl_name_or_id = 7 [json_name = "export-acl-name-or-id"];
            string import_acl_name_or_id = 8 [json_name = "import-acl-name-or-id"];
            enum BypassVxlan {
               BypassVxlan_DEFAULT = 0;
               BypassVxlan_ENABLE = 1;
               BypassVxlan_DISABLE = 2;
            };
            BypassVxlan bypass_vxlan = 9 [json_name = "bypass-vxlan"];
            bool etree_enable = 10 [json_name = "etree-enable"];
            message Rts {
               message Rt {
                  enum VrfRtType {
                     INVALID_ENUM_VALUE_VrfRtType = 0;
                     VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                     VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                  };
                  VrfRtType vrf_rt_type = 1 [json_name = "vrf-rt-type"];
                  string vrf_rt_value = 2 [json_name = "vrf-rt-value"];
               }
               repeated Rt rt = 1 [json_name = "rt"];
            }
            Rts rts = 11 [json_name = "rts"];
            message MacDuplication {
               uint32 period = 1 [json_name = "period"];
               uint32 cycle = 2 [json_name = "cycle"];
               uint32 recycle = 3 [json_name = "recycle"];
               bool blackhole = 4 [json_name = "blackhole"];
               bool source_blackhole = 5 [json_name = "source-blackhole"];
               string acl_name_or_id = 6 [json_name = "acl-name-or-id"];
            }
            MacDuplication mac_duplication = 12 [json_name = "mac-duplication"];
            enum Srv6Mode {
               Srv6Mode_NULL = 0;
               Srv6Mode_BE = 1;
               Srv6Mode_TE = 2;
            };
            Srv6Mode srv6_mode = 13 [json_name = "srv6-mode"];
            bool down_switch = 14 [json_name = "down-switch"];
            message Locator {
               string locator = 1 [json_name = "locator"];
               string unicast_locator = 2 [json_name = "unicast-locator"];
               string srv6_locator = 3 [json_name = "srv6-locator"];
            }
            Locator locator = 15 [json_name = "locator"];
            string tunnel_policy_name = 16 [json_name = "tunnel-policy-name"];
            uint32 default_color = 17 [json_name = "default-color"];
            bool control_word = 18 [json_name = "control-word"];
            enum MacRouteAdvertise {
               MacRouteAdvertise_ENABLE = 0;
               MacRouteAdvertise_DISABLE = 1;
            };
            MacRouteAdvertise mac_route_advertise = 19 [json_name = "mac-route-advertise"];
            message InclusiveProviderTunnel {
               message Root {
                  bool data_switch_disable = 1 [json_name = "data-switch-disable"];
                  uint32 data_delay_time = 2 [json_name = "data-delay-time"];
                  message P2Mp {
                     string root_ip = 1 [json_name = "root-ip"];
                     string opaque_value = 2 [json_name = "opaque-value"];
                     enum State {
                        State_DEFAULT = 0;
                        State_DOWN = 1;
                        State_UP = 2;
                     };
                     State state = 3 [json_name = "state"];
                  }
                  P2Mp p2mp = 3 [json_name = "p2mp"];
               }
               Root root = 1 [json_name = "root"];
               message Leaf {
                  message UseNextHops {
                     message UseNextHop {
                        string root_ip = 1 [json_name = "root-ip"];
                     }
                     repeated UseNextHop use_next_hop = 1 [json_name = "use-next-hop"];
                  }
                  UseNextHops use_next_hops = 1 [json_name = "use-next-hops"];
                  string opaque_value = 2 [json_name = "opaque-value"];
                  enum State {
                     State_DEFAULT = 0;
                     State_DOWN = 1;
                     State_UP = 2;
                  };
                  State state = 3 [json_name = "state"];
               }
               Leaf leaf = 2 [json_name = "leaf"];
            }
            InclusiveProviderTunnel inclusive_provider_tunnel = 20 [json_name = "inclusive-provider-tunnel"];
            message Pipe {
               bool split_mode = 1 [json_name = "split-mode"];
               enum PipeMode {
                  INVALID_ENUM_VALUE_PipeMode = 0;
                  PipeMode_PIPE = 1;
                  PipeMode_SHORTPIPE = 2;
                  PipeMode_UNIFORM = 3;
               };
               PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
               enum IngressPipeMode {
                  INVALID_ENUM_VALUE_IngressPipeMode = 0;
                  IngressPipeMode_PIPE = 1;
                  IngressPipeMode_SHORTPIPE = 2;
                  IngressPipeMode_UNIFORM = 3;
               };
               IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
               enum EgressPipeMode {
                  INVALID_ENUM_VALUE_EgressPipeMode = 0;
                  EgressPipeMode_PIPE = 1;
                  EgressPipeMode_SHORTPIPE = 2;
                  EgressPipeMode_UNIFORM = 3;
               };
               EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               enum Color {
                  Color_GREEN = 0;
                  Color_YELLOW = 1;
                  Color_RED = 2;
               };
               Color color = 6 [json_name = "color"];
               string domain_name = 7 [json_name = "domain-name"];
               enum TrustType {
                  TrustType_OUTPRI = 0;
                  TrustType_INPRI = 1;
                  TrustType_IPDSCP = 2;
               };
               TrustType trust_type = 8 [json_name = "trust-type"];
            }
            Pipe pipe = 21 [json_name = "pipe"];
            enum ArpRouteGenerateMac {
               ArpRouteGenerateMac_ENABLE = 0;
               ArpRouteGenerateMac_DISABLE = 1;
            };
            ArpRouteGenerateMac arp_route_generate_mac = 22 [json_name = "arp-route-generate-mac"];
            enum MacOnlyRouteGenerate {
               MacOnlyRouteGenerate_ENABLE = 0;
               MacOnlyRouteGenerate_DISABLE = 1;
            };
            MacOnlyRouteGenerate mac_only_route_generate = 23 [json_name = "mac-only-route-generate"];
            bool mac_frr_keep = 24 [json_name = "mac-frr-keep"];
            message MacDuplicationInfos {
               message MacDuplicationInfo {
                  string mac_address = 1 [json_name = "mac-address"];
                  uint32 bd_id = 2 [json_name = "bd-id"];
                  uint32 bd_tag = 3 [json_name = "bd-tag"];
                  uint32 dampened_times = 4 [json_name = "dampened-times"];
                  bool suppress_flag = 5 [json_name = "suppress-flag"];
                  string last_source = 6 [json_name = "last-source"];
                  string peer_ip = 7 [json_name = "peer-ip"];
                  uint32 vc_id = 8 [json_name = "vc-id"];
                  enum VcType {
                     INVALID_ENUM_VALUE_VcType = 0;
                     VcType_VLAN = 4;
                     VcType_ETHERNET = 5;
                  };
                  VcType vc_type = 9 [json_name = "vc-type"];
                  string suppress_time = 10 [json_name = "suppress-time"];
               }
               repeated MacDuplicationInfo mac_duplication_info = 1 [json_name = "mac-duplication-info"];
            }
            MacDuplicationInfos mac_duplication_infos = 25 [json_name = "mac-duplication-infos"];
            bool nexthop_recursive_lookup_restrain = 26 [json_name = "nexthop-recursive-lookup-restrain"];
            uint32 timer_revert_delay = 27 [json_name = "timer-revert-delay"];
            bool sbfd_discriminator_advertise = 28 [json_name = "sbfd-discriminator-advertise"];
            enum NexthopPriority {
               INVALID_ENUM_VALUE_NexthopPriority = 0;
               NexthopPriority_IPV4 = 1;
               NexthopPriority_IPV6 = 2;
            };
            NexthopPriority nexthop_priority = 29 [json_name = "nexthop-priority"];
            bool soo_check = 30 [json_name = "soo-check"];
            message RouteControl {
               enum Srv6AdvertiseMpls {
                  Srv6AdvertiseMpls_DEFAULT = 0;
                  Srv6AdvertiseMpls_ENABLE = 1;
                  Srv6AdvertiseMpls_DISABLE = 2;
               };
               Srv6AdvertiseMpls srv6_advertise_mpls = 1 [json_name = "srv6-advertise-mpls"];
               bool nexthop_resolve_aigp = 2 [json_name = "nexthop-resolve-aigp"];
            }
            RouteControl route_control = 31 [json_name = "route-control"];
            message MacDuplicationStatistics {
               uint32 suppressed_num = 1 [json_name = "suppressed-num"];
            }
            MacDuplicationStatistics mac_duplication_statistics = 32 [json_name = "mac-duplication-statistics"];
            enum RemoteFrr {
               RemoteFrr_DEFAULT = 0;
               RemoteFrr_ENABLE = 1;
               RemoteFrr_DISABLE = 2;
            };
            RemoteFrr remote_frr = 33 [json_name = "remote-frr"];
            string mac_policy_name = 34 [json_name = "mac-policy-name"];
         }
         BdEvpn bd_evpn = 4 [json_name = "bd-evpn"];
         message VpwsEvpn {
            string description = 1 [json_name = "description"];
            string rd = 2 [json_name = "rd"];
            string import_policy_name = 3 [json_name = "import-policy-name"];
            string export_policy_name = 4 [json_name = "export-policy-name"];
            enum LocalRemoteFrr {
               LocalRemoteFrr_DEFAULT = 0;
               LocalRemoteFrr_ENABLE = 1;
               LocalRemoteFrr_DISABLE = 2;
            };
            LocalRemoteFrr local_remote_frr = 5 [json_name = "local-remote-frr"];
            enum RemoteFrr {
               RemoteFrr_DEFAULT = 0;
               RemoteFrr_ENABLE = 1;
               RemoteFrr_DISABLE = 2;
            };
            RemoteFrr remote_frr = 6 [json_name = "remote-frr"];
            string export_acl_name_or_id = 7 [json_name = "export-acl-name-or-id"];
            string import_acl_name_or_id = 8 [json_name = "import-acl-name-or-id"];
            uint32 timer_revert_delay = 9 [json_name = "timer-revert-delay"];
            enum Srv6Mode {
               Srv6Mode_NULL = 0;
               Srv6Mode_BE = 1;
               Srv6Mode_TE = 2;
            };
            Srv6Mode srv6_mode = 10 [json_name = "srv6-mode"];
            bool down_switch = 11 [json_name = "down-switch"];
            message Rts {
               message Rt {
                  enum VrfRtType {
                     INVALID_ENUM_VALUE_VrfRtType = 0;
                     VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                     VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                  };
                  VrfRtType vrf_rt_type = 1 [json_name = "vrf-rt-type"];
                  string vrf_rt_value = 2 [json_name = "vrf-rt-value"];
               }
               repeated Rt rt = 1 [json_name = "rt"];
            }
            Rts rts = 12 [json_name = "rts"];
            string tunnel_policy_name = 13 [json_name = "tunnel-policy-name"];
            uint32 default_color = 14 [json_name = "default-color"];
            bool nexthop_recursive_lookup_restrain = 15 [json_name = "nexthop-recursive-lookup-restrain"];
            enum NexthopPriority {
               INVALID_ENUM_VALUE_NexthopPriority = 0;
               NexthopPriority_IPV4 = 1;
               NexthopPriority_IPV6 = 2;
            };
            NexthopPriority nexthop_priority = 16 [json_name = "nexthop-priority"];
            bool sbfd_discriminator_advertise = 17 [json_name = "sbfd-discriminator-advertise"];
            bool soo_check = 18 [json_name = "soo-check"];
            message RouteControl {
               enum Srv6AdvertiseMpls {
                  Srv6AdvertiseMpls_DEFAULT = 0;
                  Srv6AdvertiseMpls_ENABLE = 1;
                  Srv6AdvertiseMpls_DISABLE = 2;
               };
               Srv6AdvertiseMpls srv6_advertise_mpls = 1 [json_name = "srv6-advertise-mpls"];
               bool nexthop_resolve_aigp = 2 [json_name = "nexthop-resolve-aigp"];
            }
            RouteControl route_control = 19 [json_name = "route-control"];
         }
         VpwsEvpn vpws_evpn = 5 [json_name = "vpws-evpn"];
         message MacLimit {
            message Rule {
               uint32 maximum = 1 [json_name = "maximum"];
               enum Action {
                  Action_MACX_UNCHANGED = 0;
                  Action_SIMPLYX_ALERT = 1;
                  Action_RELEARNX_UNCHANGED = 2;
               };
               Action action = 2 [json_name = "action"];
               uint32 current_mac_number = 3 [json_name = "current-mac-number"];
            }
            Rule rule = 1 [json_name = "rule"];
            message AlarmThreshold {
               uint32 lower = 1 [json_name = "lower"];
               uint32 upper = 2 [json_name = "upper"];
            }
            AlarmThreshold alarm_threshold = 2 [json_name = "alarm-threshold"];
         }
         MacLimit mac_limit = 6 [json_name = "mac-limit"];
         message BEvpn {
            string description = 1 [json_name = "description"];
            string rd = 2 [json_name = "rd"];
            string bmac = 3 [json_name = "bmac"];
            string tunnel_policy_name = 4 [json_name = "tunnel-policy-name"];
            message Rts {
               message Rt {
                  enum VrfRtType {
                     INVALID_ENUM_VALUE_VrfRtType = 0;
                     VrfRtType_EXPORTX_EXTCOMMUNITY = 2;
                     VrfRtType_IMPORTX_EXTCOMMUNITY = 3;
                  };
                  VrfRtType vrf_rt_type = 1 [json_name = "vrf-rt-type"];
                  string vrf_rt_value = 2 [json_name = "vrf-rt-value"];
               }
               repeated Rt rt = 1 [json_name = "rt"];
            }
            Rts rts = 5 [json_name = "rts"];
            bool nexthop_recursive_lookup_restrain = 6 [json_name = "nexthop-recursive-lookup-restrain"];
         }
         BEvpn b_evpn = 7 [json_name = "b-evpn"];
         message TunnelInfos {
            message TunnelInfo {
               enum Type {
                  Type_INVALID = 0;
                  Type_LDP = 1;
                  Type_BGP = 2;
                  Type_TE = 3;
                  Type_STATICX_LSP = 4;
                  Type_GRE = 5;
                  Type_UNI = 6;
                  Type_TNLX_GROUP = 7;
                  Type_SUBX_TE = 8;
                  Type_SUBX_GROUP = 9;
                  Type_X_6OVER4 = 10;
                  Type_X_6TO4 = 11;
                  Type_BGPX_LOCALX_IFNET = 12;
                  Type_LDP6 = 13;
                  Type_NVGRE = 15;
                  Type_P2MPX_LDP = 16;
                  Type_VXLAN = 23;
                  Type_IPSEC = 24;
                  Type_P2MPX_TE = 32;
                  Type_VXLANX_NVO3 = 39;
                  Type_GRE6 = 40;
                  Type_SRBEX_LSP = 41;
                  Type_VXLAN6X_NVO3 = 42;
                  Type_SRV6 = 43;
                  Type_X_4OVER6 = 44;
                  Type_X_6RD = 45;
                  Type_SRX_TE = 47;
                  Type_SRX_TEX_POLICY = 50;
                  Type_SRX_TEX_POLICYX_GROUP = 51;
                  Type_SRV6X_TEX_POLICY = 52;
                  Type_SRV6X_TEX_FLOWX_GROUP = 55;
                  Type_P2MPX_GRE = 64;
                  Type_FLEXX_ALGOX_LSP = 147;
               };
               Type type = 1 [json_name = "type"];
               string peer_ip = 2 [json_name = "peer-ip"];
               uint32 id = 3 [json_name = "id"];
               uint32 color = 4 [json_name = "color"];
               string name = 5 [json_name = "name"];
            }
            repeated TunnelInfo tunnel_info = 1 [json_name = "tunnel-info"];
         }
         TunnelInfos tunnel_infos = 8 [json_name = "tunnel-infos"];
         message Qos {
            message EvpnPolicyApplys {
               message EvpnPolicyApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string policy_name = 2 [json_name = "policy-name"];
               }
               repeated EvpnPolicyApply evpn_policy_apply = 1 [json_name = "evpn-policy-apply"];
            }
            EvpnPolicyApplys evpn_policy_applys = 1 [json_name = "evpn-policy-applys"];
         }
         Qos qos = 9 [json_name = "qos"];
         enum LabelPolicy {
            LabelPolicy_PERX_ROUTE = 0;
            LabelPolicy_PERX_INSTANCE = 1;
            LabelPolicy_PERX_NEXTHOP = 2;
            LabelPolicy_PERX_BRIDGEX_DOMAIN = 3;
         };
         LabelPolicy label_policy = 10 [json_name = "label-policy"];
         message IEvpn {
            string description = 1 [json_name = "description"];
            uint32 tag = 2 [json_name = "tag"];
            string b_evpn_name = 3 [json_name = "b-evpn-name"];
            string bmac = 4 [json_name = "bmac"];
         }
         IEvpn i_evpn = 11 [json_name = "i-evpn"];
         message MacRouteInfos {
            message MacRouteInfo {
               string prefix = 1 [json_name = "prefix"];
               message LabelStacks {
                  message LabelStack {
                     uint32 label_stack = 1 [json_name = "label-stack"];
                     uint32 level = 2 [json_name = "level"];
                     string type = 3 [json_name = "type"];
                     string label = 4 [json_name = "label"];
                     string out_interface = 5 [json_name = "out-interface"];
                  }
                  repeated LabelStack label_stack = 1 [json_name = "label-stack"];
               }
               LabelStacks label_stacks = 2 [json_name = "label-stacks"];
            }
            repeated MacRouteInfo mac_route_info = 1 [json_name = "mac-route-info"];
         }
         MacRouteInfos mac_route_infos = 12 [json_name = "mac-route-infos"];
         message PerInstanceLabel {
            uint32 unicast_label = 1 [json_name = "unicast-label"];
            uint32 bum_label = 2 [json_name = "bum-label"];
            uint32 bypass_label = 3 [json_name = "bypass-label"];
         }
         PerInstanceLabel per_instance_label = 13 [json_name = "per-instance-label"];
         message DfInfos {
            message DfInfo {
               string esi = 1 [json_name = "esi"];
               enum DfResult {
                  DfResult_BACKUP = 0;
                  DfResult_PRIMARY = 1;
                  DfResult_NONE = 2;
               };
               DfResult df_result = 2 [json_name = "df-result"];
               message PrefElecInfos {
                  message PrefElecInfo {
                     string origin_ip = 1 [json_name = "origin-ip"];
                     enum DfResult {
                        DfResult_BACKUP = 0;
                        DfResult_PRIMARY = 1;
                     };
                     DfResult df_result = 2 [json_name = "df-result"];
                     uint32 preference = 3 [json_name = "preference"];
                     uint32 dp = 4 [json_name = "dp"];
                     uint32 ac_df = 5 [json_name = "ac-df"];
                  }
                  repeated PrefElecInfo pref_elec_info = 1 [json_name = "pref-elec-info"];
               }
               PrefElecInfos pref_elec_infos = 3 [json_name = "pref-elec-infos"];
            }
            repeated DfInfo df_info = 1 [json_name = "df-info"];
         }
         DfInfos df_infos = 14 [json_name = "df-infos"];
         message DfTimerInfo {
            message EsiInfos {
               message EsiInfo {
                  string esi = 1 [json_name = "esi"];
                  enum TimerType {
                     INVALID_ENUM_VALUE_TimerType = 0;
                     TimerType_ESIDFTIMER = 1;
                     TimerType_IFDFTIMER = 2;
                     TimerType_ELINEDFTIMER = 6;
                     TimerType_PWDFTIMER = 7;
                  };
                  TimerType timer_type = 2 [json_name = "timer-type"];
                  enum TimerState {
                     TimerState_IDLE = 0;
                     TimerState_RUNNING = 1;
                  };
                  TimerState timer_state = 3 [json_name = "timer-state"];
                  uint32 time_left = 4 [json_name = "time-left"];
               }
               repeated EsiInfo esi_info = 1 [json_name = "esi-info"];
            }
            EsiInfos esi_infos = 1 [json_name = "esi-infos"];
            message InterfaceInfos {
               message InterfaceInfo {
                  string interface_name = 1 [json_name = "interface-name"];
                  uint32 bd_id = 2 [json_name = "bd-id"];
                  enum TimerType {
                     INVALID_ENUM_VALUE_TimerType = 0;
                     TimerType_ESIDFTIMER = 1;
                     TimerType_IFDFTIMER = 2;
                     TimerType_ELINEDFTIMER = 6;
                     TimerType_PWDFTIMER = 7;
                  };
                  TimerType timer_type = 3 [json_name = "timer-type"];
                  enum TimerState {
                     TimerState_IDLE = 0;
                     TimerState_RUNNING = 1;
                  };
                  TimerState timer_state = 4 [json_name = "timer-state"];
                  uint32 time_left = 5 [json_name = "time-left"];
               }
               repeated InterfaceInfo interface_info = 1 [json_name = "interface-info"];
            }
            InterfaceInfos interface_infos = 2 [json_name = "interface-infos"];
            message PwInfos {
               message PwInfo {
                  string peer_ip = 1 [json_name = "peer-ip"];
                  uint32 vc_id = 2 [json_name = "vc-id"];
                  enum VcType {
                     INVALID_ENUM_VALUE_VcType = 0;
                     VcType_VLAN = 4;
                     VcType_ETHERNET = 5;
                     VcType_UNSUPPORT = 255;
                  };
                  VcType vc_type = 3 [json_name = "vc-type"];
                  enum TimerType {
                     INVALID_ENUM_VALUE_TimerType = 0;
                     TimerType_ESIDFTIMER = 1;
                     TimerType_IFDFTIMER = 2;
                     TimerType_ELINEDFTIMER = 6;
                     TimerType_PWDFTIMER = 7;
                  };
                  TimerType timer_type = 4 [json_name = "timer-type"];
                  enum TimerState {
                     TimerState_IDLE = 0;
                     TimerState_RUNNING = 1;
                  };
                  TimerState timer_state = 5 [json_name = "timer-state"];
                  uint32 time_left = 6 [json_name = "time-left"];
               }
               repeated PwInfo pw_info = 1 [json_name = "pw-info"];
            }
            PwInfos pw_infos = 3 [json_name = "pw-infos"];
         }
         DfTimerInfo df_timer_info = 15 [json_name = "df-timer-info"];
         message EsiAdvance {
            message Locals {
               message Local {
                  string esi = 1 [json_name = "esi"];
                  enum Topology {
                     Topology_SHX_SA = 0;
                     Topology_MHX_SA = 1;
                     Topology_SHX_AA = 2;
                     Topology_MHX_AA = 3;
                     Topology_INCOMPLETE = 4;
                  };
                  Topology topology = 2 [json_name = "topology"];
               }
               repeated Local local = 1 [json_name = "local"];
            }
            Locals locals = 1 [json_name = "locals"];
            message Remotes {
               message Remote {
                  string esi = 1 [json_name = "esi"];
                  string remote_peer = 2 [json_name = "remote-peer"];
                  enum Topology {
                     Topology_SHX_SA = 0;
                     Topology_MHX_SA = 1;
                     Topology_SHX_AA = 2;
                     Topology_MHX_AA = 3;
                     Topology_INCOMPLETE = 4;
                  };
                  Topology topology = 3 [json_name = "topology"];
               }
               repeated Remote remote = 1 [json_name = "remote"];
            }
            Remotes remotes = 2 [json_name = "remotes"];
         }
         EsiAdvance esi_advance = 16 [json_name = "esi-advance"];
         message MacRoutes {
            message MacRoute {
               string prefix = 1 [json_name = "prefix"];
               string rd = 2 [json_name = "rd"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               enum SourceAddressFamily {
                  SourceAddressFamily_NULL = 0;
                  SourceAddressFamily_IPV4UNI = 1;
                  SourceAddressFamily_IPV4MULTI = 2;
                  SourceAddressFamily_IPV4VPN = 3;
                  SourceAddressFamily_IPV4LABELUNI = 4;
                  SourceAddressFamily_IPV6UNI = 5;
                  SourceAddressFamily_IPV6VPN = 6;
                  SourceAddressFamily_IPV4FLOW = 7;
                  SourceAddressFamily_L2VPNAD = 8;
                  SourceAddressFamily_EVPN = 9;
                  SourceAddressFamily_MVPN = 10;
                  SourceAddressFamily_VPNTARGET = 11;
                  SourceAddressFamily_IPV4VPNMCAST = 12;
                  SourceAddressFamily_LS = 13;
                  SourceAddressFamily_MDT = 14;
                  SourceAddressFamily_IPV6FLOW = 15;
                  SourceAddressFamily_MVPNV6 = 16;
                  SourceAddressFamily_VPNV4FLOW = 17;
                  SourceAddressFamily_VPNV6FLOW = 18;
                  SourceAddressFamily_RPD = 19;
                  SourceAddressFamily_IPV4SRPOLICY = 20;
                  SourceAddressFamily_IPV6SRPOLICY = 21;
               };
               SourceAddressFamily source_address_family = 5 [json_name = "source-address-family"];
               uint32 mpls_label1 = 6 [json_name = "mpls-label1"];
               uint32 mpls_label2 = 7 [json_name = "mpls-label2"];
               string frr_out_interface = 8 [json_name = "frr-out-interface"];
               string frr_nexthop = 9 [json_name = "frr-nexthop"];
               string frr_out_tunnel_name = 10 [json_name = "frr-out-tunnel-name"];
               string prefix_sid = 11 [json_name = "prefix-sid"];
               string bypass_prefix_sid = 12 [json_name = "bypass-prefix-sid"];
               string effect_nexthop = 13 [json_name = "effect-nexthop"];
               string redirect_out_interface = 14 [json_name = "redirect-out-interface"];
               string nexthop = 15 [json_name = "nexthop"];
               uint32 local_preference = 16 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 17 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 18 [json_name = "route-preference"];
               string route_worse_reason = 19 [json_name = "route-worse-reason"];
               string as_path = 20 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 21 [json_name = "origin"];
               uint32 med = 22 [json_name = "med"];
               string route_flag = 23 [json_name = "route-flag"];
               string advertised_peers = 24 [json_name = "advertised-peers"];
               uint32 route_duration_time = 25 [json_name = "route-duration-time"];
               string pmsi = 26 [json_name = "pmsi"];
               string other_attribute = 27 [json_name = "other-attribute"];
               string private_route = 28 [json_name = "private-route"];
               string outbound_interface = 29 [json_name = "outbound-interface"];
               string remote_route_id = 30 [json_name = "remote-route-id"];
               string community = 31 [json_name = "community"];
               string ext_community = 32 [json_name = "ext-community"];
               string ipv6_ext_community = 33 [json_name = "ipv6-ext-community"];
               string large_community = 34 [json_name = "large-community"];
               string cluster_list = 35 [json_name = "cluster-list"];
               string relay_nexthop = 36 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 37 [json_name = "relay-tunnel-name"];
               uint32 in_label = 38 [json_name = "in-label"];
               uint32 out_label = 39 [json_name = "out-label"];
               string originator = 40 [json_name = "originator"];
               message DirectPwInfo {
                  string peer_ip = 1 [json_name = "peer-ip"];
                  uint32 vc_id = 2 [json_name = "vc-id"];
                  enum VcType {
                     INVALID_ENUM_VALUE_VcType = 0;
                     VcType_VLAN = 4;
                     VcType_ETHERNET = 5;
                  };
                  VcType vc_type = 3 [json_name = "vc-type"];
               }
               DirectPwInfo direct_pw_info = 41 [json_name = "direct-pw-info"];
               uint32 relay_aigp = 42 [json_name = "relay-aigp"];
            }
            repeated MacRoute mac_route = 1 [json_name = "mac-route"];
         }
         MacRoutes mac_routes = 17 [json_name = "mac-routes"];
         message AdRoutes {
            message AdRoute {
               string prefix = 1 [json_name = "prefix"];
               string rd = 2 [json_name = "rd"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               string prefix_sid = 5 [json_name = "prefix-sid"];
               string bypass_prefix_sid = 6 [json_name = "bypass-prefix-sid"];
               string nexthop = 7 [json_name = "nexthop"];
               uint32 local_preference = 8 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 9 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 10 [json_name = "route-preference"];
               string route_worse_reason = 11 [json_name = "route-worse-reason"];
               string as_path = 12 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 13 [json_name = "origin"];
               uint32 med = 14 [json_name = "med"];
               string route_flag = 15 [json_name = "route-flag"];
               string advertised_peers = 16 [json_name = "advertised-peers"];
               uint32 route_duration_time = 17 [json_name = "route-duration-time"];
               string pmsi = 18 [json_name = "pmsi"];
               string other_attribute = 19 [json_name = "other-attribute"];
               string private_route = 20 [json_name = "private-route"];
               string outbound_interface = 21 [json_name = "outbound-interface"];
               string remote_route_id = 22 [json_name = "remote-route-id"];
               string community = 23 [json_name = "community"];
               string ext_community = 24 [json_name = "ext-community"];
               string ipv6_ext_community = 25 [json_name = "ipv6-ext-community"];
               string large_community = 26 [json_name = "large-community"];
               string cluster_list = 27 [json_name = "cluster-list"];
               string relay_nexthop = 28 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 29 [json_name = "relay-tunnel-name"];
               uint32 in_label = 30 [json_name = "in-label"];
               uint32 out_label = 31 [json_name = "out-label"];
               string originator = 32 [json_name = "originator"];
               uint32 relay_aigp = 33 [json_name = "relay-aigp"];
            }
            repeated AdRoute ad_route = 1 [json_name = "ad-route"];
         }
         AdRoutes ad_routes = 18 [json_name = "ad-routes"];
         message EsRoutes {
            message EsRoute {
               string prefix = 1 [json_name = "prefix"];
               string rd = 2 [json_name = "rd"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               string nexthop = 5 [json_name = "nexthop"];
               uint32 local_preference = 6 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 7 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 8 [json_name = "route-preference"];
               string route_worse_reason = 9 [json_name = "route-worse-reason"];
               string as_path = 10 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 11 [json_name = "origin"];
               uint32 med = 12 [json_name = "med"];
               string route_flag = 13 [json_name = "route-flag"];
               string advertised_peers = 14 [json_name = "advertised-peers"];
               uint32 route_duration_time = 15 [json_name = "route-duration-time"];
               string pmsi = 16 [json_name = "pmsi"];
               string other_attribute = 17 [json_name = "other-attribute"];
               string private_route = 18 [json_name = "private-route"];
               string outbound_interface = 19 [json_name = "outbound-interface"];
               string remote_route_id = 20 [json_name = "remote-route-id"];
               string community = 21 [json_name = "community"];
               string ext_community = 22 [json_name = "ext-community"];
               string ipv6_ext_community = 23 [json_name = "ipv6-ext-community"];
               string large_community = 24 [json_name = "large-community"];
               string cluster_list = 25 [json_name = "cluster-list"];
               string relay_nexthop = 26 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 27 [json_name = "relay-tunnel-name"];
               uint32 in_label = 28 [json_name = "in-label"];
               uint32 out_label = 29 [json_name = "out-label"];
               string originator = 30 [json_name = "originator"];
               uint32 relay_aigp = 31 [json_name = "relay-aigp"];
            }
            repeated EsRoute es_route = 1 [json_name = "es-route"];
         }
         EsRoutes es_routes = 19 [json_name = "es-routes"];
         message InclusiveRoutes {
            message InclusiveRoute {
               string prefix = 1 [json_name = "prefix"];
               string rd = 2 [json_name = "rd"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               string prefix_sid = 5 [json_name = "prefix-sid"];
               string nexthop = 6 [json_name = "nexthop"];
               uint32 local_preference = 7 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 8 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 9 [json_name = "route-preference"];
               string route_worse_reason = 10 [json_name = "route-worse-reason"];
               string as_path = 11 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 12 [json_name = "origin"];
               uint32 med = 13 [json_name = "med"];
               string route_flag = 14 [json_name = "route-flag"];
               string advertised_peers = 15 [json_name = "advertised-peers"];
               uint32 route_duration_time = 16 [json_name = "route-duration-time"];
               string pmsi = 17 [json_name = "pmsi"];
               string other_attribute = 18 [json_name = "other-attribute"];
               string private_route = 19 [json_name = "private-route"];
               string outbound_interface = 20 [json_name = "outbound-interface"];
               string remote_route_id = 21 [json_name = "remote-route-id"];
               string community = 22 [json_name = "community"];
               string ext_community = 23 [json_name = "ext-community"];
               string ipv6_ext_community = 24 [json_name = "ipv6-ext-community"];
               string large_community = 25 [json_name = "large-community"];
               string cluster_list = 26 [json_name = "cluster-list"];
               string relay_nexthop = 27 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 28 [json_name = "relay-tunnel-name"];
               uint32 in_label = 29 [json_name = "in-label"];
               uint32 out_label = 30 [json_name = "out-label"];
               string originator = 31 [json_name = "originator"];
               uint32 relay_aigp = 32 [json_name = "relay-aigp"];
            }
            repeated InclusiveRoute inclusive_route = 1 [json_name = "inclusive-route"];
         }
         InclusiveRoutes inclusive_routes = 20 [json_name = "inclusive-routes"];
         message SmetRoutes {
            message SmetRoute {
               string rd = 1 [json_name = "rd"];
               string prefix = 2 [json_name = "prefix"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               string nexthop = 5 [json_name = "nexthop"];
               uint32 local_preference = 6 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 7 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 8 [json_name = "route-preference"];
               string as_path = 9 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 10 [json_name = "origin"];
               uint32 med = 11 [json_name = "med"];
               string route_flag = 12 [json_name = "route-flag"];
               string route_worse_reason = 13 [json_name = "route-worse-reason"];
               string advertised_peers = 14 [json_name = "advertised-peers"];
               uint32 route_duration_time = 15 [json_name = "route-duration-time"];
               string ext_community = 16 [json_name = "ext-community"];
               string outbound_interface = 17 [json_name = "outbound-interface"];
               string originator = 18 [json_name = "originator"];
               string remote_route_id = 19 [json_name = "remote-route-id"];
               string relay_nexthop = 20 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 21 [json_name = "relay-tunnel-name"];
               uint32 in_label = 22 [json_name = "in-label"];
               uint32 out_label = 23 [json_name = "out-label"];
               string pmsi = 24 [json_name = "pmsi"];
               string other_attribute = 25 [json_name = "other-attribute"];
               string community = 26 [json_name = "community"];
               string large_community = 27 [json_name = "large-community"];
               string cluster_list = 28 [json_name = "cluster-list"];
               string adv_next_hop = 29 [json_name = "adv-next-hop"];
               string adv_dest_peer_ip = 30 [json_name = "adv-dest-peer-ip"];
               string flags = 31 [json_name = "flags"];
               string qos_info = 32 [json_name = "qos-info"];
            }
            repeated SmetRoute smet_route = 1 [json_name = "smet-route"];
         }
         SmetRoutes smet_routes = 21 [json_name = "smet-routes"];
         message JoinRoutes {
            message JoinRoute {
               string rd = 1 [json_name = "rd"];
               string prefix = 2 [json_name = "prefix"];
               string from = 3 [json_name = "from"];
               enum RouteTypeFlag {
                  RouteTypeFlag_IBGP = 0;
                  RouteTypeFlag_EBGP = 1;
                  RouteTypeFlag_NETWORK = 2;
                  RouteTypeFlag_IMPORTED = 3;
                  RouteTypeFlag_AUTOMATICALLYX_SUMMARIZED = 4;
                  RouteTypeFlag_SUMMARIZED = 5;
                  RouteTypeFlag_CPRI = 6;
                  RouteTypeFlag_LOCALX_GENERATE = 7;
                  RouteTypeFlag_SUPPRESSED = 8;
                  RouteTypeFlag_NHPX_EMPTY = 9;
                  RouteTypeFlag_NOX_ADV = 10;
                  RouteTypeFlag_LOCALX_CROSS = 11;
                  RouteTypeFlag_REMOTEX_CROSS = 12;
                  RouteTypeFlag_VDX_BGP = 13;
                  RouteTypeFlag_PATHX_LOCAL = 14;
                  RouteTypeFlag_PATHX_GATEWAY = 15;
                  RouteTypeFlag_POLICYX_NOX_PASS = 16;
                  RouteTypeFlag_SUPERNET = 17;
                  RouteTypeFlag_DAMPENED = 18;
                  RouteTypeFlag_HISTORY = 19;
                  RouteTypeFlag_SELECTED = 20;
                  RouteTypeFlag_BEST = 21;
                  RouteTypeFlag_BACKUP = 22;
                  RouteTypeFlag_ATTRX_CHANGE = 23;
                  RouteTypeFlag_NHLFEX_CREATED = 24;
                  RouteTypeFlag_ILMX_CREATED = 25;
                  RouteTypeFlag_NEXTHOPX_CHANGED = 26;
                  RouteTypeFlag_INVALID = 27;
                  RouteTypeFlag_SOURCEX_CHANGED = 28;
                  RouteTypeFlag_INX_SELECTEDX_QUEUE = 29;
                  RouteTypeFlag_EXITIFX_ERROR = 30;
                  RouteTypeFlag_GROUPX_HEAD = 31;
               };
               repeated RouteTypeFlag route_type_flag = 4 [json_name = "route-type-flag"];
               string nexthop = 5 [json_name = "nexthop"];
               uint32 local_preference = 6 [json_name = "local-preference"];
               uint32 protocol_preferred_value = 7 [json_name = "protocol-preferred-value"];
               uint32 route_preference = 8 [json_name = "route-preference"];
               string as_path = 9 [json_name = "as-path"];
               enum Origin {
                  INVALID_ENUM_VALUE_Origin = 0;
                  Origin_IGP = 1;
                  Origin_EGP = 2;
                  Origin_INCOMPLETE = 3;
               };
               Origin origin = 10 [json_name = "origin"];
               uint32 med = 11 [json_name = "med"];
               string route_flag = 12 [json_name = "route-flag"];
               string route_worse_reason = 13 [json_name = "route-worse-reason"];
               string advertised_peers = 14 [json_name = "advertised-peers"];
               uint32 route_duration_time = 15 [json_name = "route-duration-time"];
               string ext_community = 16 [json_name = "ext-community"];
               string outbound_interface = 17 [json_name = "outbound-interface"];
               string originator = 18 [json_name = "originator"];
               string remote_route_id = 19 [json_name = "remote-route-id"];
               string relay_nexthop = 20 [json_name = "relay-nexthop"];
               string relay_tunnel_name = 21 [json_name = "relay-tunnel-name"];
               uint32 in_label = 22 [json_name = "in-label"];
               uint32 out_label = 23 [json_name = "out-label"];
               string pmsi = 24 [json_name = "pmsi"];
               string other_attribute = 25 [json_name = "other-attribute"];
               string community = 26 [json_name = "community"];
               string large_community = 27 [json_name = "large-community"];
               string cluster_list = 28 [json_name = "cluster-list"];
               string adv_next_hop = 29 [json_name = "adv-next-hop"];
               string adv_dest_peer_ip = 30 [json_name = "adv-dest-peer-ip"];
               string flags = 31 [json_name = "flags"];
               string qos_info = 32 [json_name = "qos-info"];
            }
            repeated JoinRoute join_route = 1 [json_name = "join-route"];
         }
         JoinRoutes join_routes = 22 [json_name = "join-routes"];
         message InterfaceDfInfos {
            message InterfaceDfInfo {
               string esi = 1 [json_name = "esi"];
               string interface_name = 2 [json_name = "interface-name"];
               enum DfResult {
                  DfResult_BACKUP = 0;
                  DfResult_PRIMARY = 1;
                  DfResult_NONE = 2;
               };
               DfResult df_result = 3 [json_name = "df-result"];
               message PrefElecInfos {
                  message PrefElecInfo {
                     string origin_ip = 1 [json_name = "origin-ip"];
                     enum DfResult {
                        DfResult_BACKUP = 0;
                        DfResult_PRIMARY = 1;
                     };
                     DfResult df_result = 2 [json_name = "df-result"];
                     uint32 preference = 3 [json_name = "preference"];
                     uint32 dp = 4 [json_name = "dp"];
                     uint32 ac_df = 5 [json_name = "ac-df"];
                  }
                  repeated PrefElecInfo pref_elec_info = 1 [json_name = "pref-elec-info"];
               }
               PrefElecInfos pref_elec_infos = 4 [json_name = "pref-elec-infos"];
            }
            repeated InterfaceDfInfo interface_df_info = 1 [json_name = "interface-df-info"];
         }
         InterfaceDfInfos interface_df_infos = 23 [json_name = "interface-df-infos"];
         message PwDfInfos {
            message PwDfInfo {
               string esi = 1 [json_name = "esi"];
               string peer_ip = 2 [json_name = "peer-ip"];
               uint32 vc_id = 3 [json_name = "vc-id"];
               enum VcType {
                  INVALID_ENUM_VALUE_VcType = 0;
                  VcType_VLAN = 4;
                  VcType_ETHERNET = 5;
               };
               VcType vc_type = 4 [json_name = "vc-type"];
               enum DfResult {
                  DfResult_BACKUP = 0;
                  DfResult_PRIMARY = 1;
                  DfResult_NONE = 2;
               };
               DfResult df_result = 5 [json_name = "df-result"];
            }
            repeated PwDfInfo pw_df_info = 1 [json_name = "pw-df-info"];
         }
         PwDfInfos pw_df_infos = 24 [json_name = "pw-df-infos"];
         string effected_rd = 25 [json_name = "effected-rd"];
      }
      repeated Instance instance = 1 [json_name = "instance"];
   }
   Instances instances = 3 [json_name = "instances"];
   message RemoteSids {
      message RemoteSid {
         string remote_sid = 1 [json_name = "remote-sid"];
         string locator_sid = 2 [json_name = "locator-sid"];
         uint32 locator_mask_length = 3 [json_name = "locator-mask-length"];
         enum EvpnType {
            EvpnType_NORMAL = 0;
            EvpnType_IX_EVPN = 1;
            EvpnType_BX_EVPN = 2;
            EvpnType_BDX_EVPN = 3;
            EvpnType_VPWSX_EVPN = 4;
         };
         EvpnType evpn_type = 4 [json_name = "evpn-type"];
         string evpn_name = 5 [json_name = "evpn-name"];
         uint32 bd_id = 6 [json_name = "bd-id"];
         uint32 evpl_id = 7 [json_name = "evpl-id"];
      }
      repeated RemoteSid remote_sid = 1 [json_name = "remote-sid"];
   }
   RemoteSids remote_sids = 4 [json_name = "remote-sids"];
   message BaseProcess {
      enum RedundancyMode {
         RedundancyMode_ALLX_ACTIVE = 0;
         RedundancyMode_SINGLEX_ACTIVE = 1;
      };
      RedundancyMode redundancy_mode = 1 [json_name = "redundancy-mode"];
      string source_address = 2 [json_name = "source-address"];
      bool evpn_overlay = 3 [json_name = "evpn-overlay"];
      bool evpn_origin_igp = 4 [json_name = "evpn-origin-igp"];
      string auto_rd_ip = 5 [json_name = "auto-rd-ip"];
   }
   BaseProcess base_process = 5 [json_name = "base-process"];
   message System {
      message PortSelect {
         bool flag = 1 [json_name = "flag"];
      }
      PortSelect port_select = 1 [json_name = "port-select"];
      message SelfBoard {
         bool flag = 1 [json_name = "flag"];
      }
      SelfBoard self_board = 2 [json_name = "self-board"];
      message EvpnUdpPort {
         uint32 port_id = 1 [json_name = "port-id"];
      }
      EvpnUdpPort evpn_udp_port = 3 [json_name = "evpn-udp-port"];
   }
   System system = 6 [json_name = "system"];
   message DefaultParameter {
      enum AccessMode {
         AccessMode_VLAN = 0;
         AccessMode_PORT = 1;
      };
      AccessMode access_mode = 1 [json_name = "access-mode"];
      enum ServiceMode {
         ServiceMode_VLANX_AWARE = 0;
         ServiceMode_VLANX_UNAWARE = 1;
      };
      ServiceMode service_mode = 2 [json_name = "service-mode"];
      enum ApplyLabelMode {
         INVALID_ENUM_VALUE_ApplyLabelMode = 0;
         ApplyLabelMode_PERX_INSTANCE = 1;
      };
      ApplyLabelMode apply_label_mode = 3 [json_name = "apply-label-mode"];
   }
   DefaultParameter default_parameter = 7 [json_name = "default-parameter"];
   message RecoverTimers {
      message RecoverTimer {
         string name = 1 [json_name = "name"];
         enum Mode {
            Mode_IDLE = 0;
            Mode_RUNNING = 1;
         };
         Mode mode = 2 [json_name = "mode"];
         string begin_time = 3 [json_name = "begin-time"];
         string end_time = 4 [json_name = "end-time"];
         uint32 time_left = 5 [json_name = "time-left"];
      }
      repeated RecoverTimer recover_timer = 1 [json_name = "recover-timer"];
   }
   RecoverTimers recover_timers = 8 [json_name = "recover-timers"];
   message TrackPeerTimerInfos {
      message TrackPeerTimerInfo {
         string esi = 1 [json_name = "esi"];
         enum TimerType {
            TimerType_TRACKX_PEERX_TIMER = 0;
         };
         TimerType timer_type = 2 [json_name = "timer-type"];
         enum TimerState {
            TimerState_IDLE = 0;
            TimerState_RUNNING = 1;
         };
         TimerState timer_state = 3 [json_name = "timer-state"];
         uint32 time_left = 4 [json_name = "time-left"];
      }
      repeated TrackPeerTimerInfo track_peer_timer_info = 1 [json_name = "track-peer-timer-info"];
   }
   TrackPeerTimerInfos track_peer_timer_infos = 9 [json_name = "track-peer-timer-infos"];
   message StickyMacConflictionInfos {
      message StickyMacConflictionInfo {
         string mac_address = 1 [json_name = "mac-address"];
         uint32 bd_id = 2 [json_name = "bd-id"];
         uint32 vid = 3 [json_name = "vid"];
         string interface_name = 4 [json_name = "interface-name"];
         string peer_ip = 5 [json_name = "peer-ip"];
      }
      repeated StickyMacConflictionInfo sticky_mac_confliction_info = 1 [json_name = "sticky-mac-confliction-info"];
   }
   StickyMacConflictionInfos sticky_mac_confliction_infos = 10 [json_name = "sticky-mac-confliction-infos"];
   message GlobalSuppressedStatistics {
      uint32 suppressed_num_all = 1 [json_name = "suppressed-num-all"];
   }
   GlobalSuppressedStatistics global_suppressed_statistics = 11 [json_name = "global-suppressed-statistics"];
   message TrafficStatisticsDiscards {
      message TrafficStatisticsDiscard {
         string slot = 1 [json_name = "slot"];
         uint64 etree_unicastdrop_packets = 2 [json_name = "etree-unicastdrop-packets"];
         uint64 etree_bumdrop_packets = 3 [json_name = "etree-bumdrop-packets"];
         uint32 chip_number = 4 [json_name = "chip-number"];
      }
      repeated TrafficStatisticsDiscard traffic_statistics_discard = 1 [json_name = "traffic-statistics-discard"];
   }
   TrafficStatisticsDiscards traffic_statistics_discards = 12 [json_name = "traffic-statistics-discards"];
}


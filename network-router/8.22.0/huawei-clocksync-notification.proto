syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-07-27 15:56:47
// ProtoYang-version 1
// module huawei-clocksync-notification
// revision 2022-07-26
// revision 2020-03-14
// revision 2020-03-04
// revision 2020-01-16
// namespace urn:huawei:yang:huawei-clocksync-notification

package huawei_clocksync_notification;

message ClockCesAcrLockFail {
   uint32 slot = 1 [json_name = "slot"];
   uint32 card = 2 [json_name = "card"];
   uint32 domain = 3 [json_name = "domain"];
   enum LockState {
      LockState_UNLOCK = 0;
      LockState_LOCK = 1;
   };
   LockState lock_state = 4 [json_name = "lock-state"];
}
message ClockCesAcrLockFailResume {
   uint32 slot = 1 [json_name = "slot"];
   uint32 card = 2 [json_name = "card"];
   uint32 domain = 3 [json_name = "domain"];
   enum LockState {
      LockState_UNLOCK = 0;
      LockState_LOCK = 1;
   };
   LockState lock_state = 4 [json_name = "lock-state"];
}
message ClockClusterTopoFail {
   enum SyncType {
      INVALID_ENUM_VALUE_SyncType = 0;
      SyncType_FREQUENCY = 1;
      SyncType_TIME = 2;
   };
   SyncType sync_type = 1 [json_name = "sync-type"];
   enum TopoType {
      INVALID_ENUM_VALUE_TopoType = 0;
      TopoType_INLINK = 1;
      TopoType_EXTINJECT = 2;
   };
   TopoType topo_type = 2 [json_name = "topo-type"];
   enum TopoLinkType {
      INVALID_ENUM_VALUE_TopoLinkType = 0;
      TopoLinkType_BITS = 1;
      TopoLinkType_PORT = 2;
   };
   TopoLinkType topo_link_type = 3 [json_name = "topo-link-type"];
   enum TopoStatus {
      INVALID_ENUM_VALUE_TopoStatus = 0;
      TopoStatus_FAIL = 1;
      TopoStatus_SUCCESS = 2;
   };
   TopoStatus topo_status = 4 [json_name = "topo-status"];
}
message ClockClusterTopoFailResume {
   enum SyncType {
      INVALID_ENUM_VALUE_SyncType = 0;
      SyncType_FREQUENCY = 1;
      SyncType_TIME = 2;
   };
   SyncType sync_type = 1 [json_name = "sync-type"];
   enum TopoType {
      INVALID_ENUM_VALUE_TopoType = 0;
      TopoType_INLINK = 1;
      TopoType_EXTINJECT = 2;
   };
   TopoType topo_type = 2 [json_name = "topo-type"];
   enum TopoLinkType {
      INVALID_ENUM_VALUE_TopoLinkType = 0;
      TopoLinkType_BITS = 1;
      TopoLinkType_PORT = 2;
   };
   TopoLinkType topo_link_type = 3 [json_name = "topo-link-type"];
   enum TopoStatus {
      INVALID_ENUM_VALUE_TopoStatus = 0;
      TopoStatus_FAIL = 1;
      TopoStatus_SUCCESS = 2;
   };
   TopoStatus topo_status = 4 [json_name = "topo-status"];
}
message ClockFmSwitch {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 2 [json_name = "pll-id"];
}
message ClockFmSwitchResume {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 2 [json_name = "pll-id"];
}
message ClockNotInLockedMode {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   uint32 chassis_id = 2 [json_name = "chassis-id"];
   enum LockMode {
      LockMode_FREERUN = 0;
      LockMode_FASTLOCK = 1;
      LockMode_LOCK = 2;
      LockMode_HOLD = 3;
   };
   LockMode lock_mode = 3 [json_name = "lock-mode"];
}
message ClockInLockedMode {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   uint32 chassis_id = 2 [json_name = "chassis-id"];
   enum LockMode {
      LockMode_FREERUN = 0;
      LockMode_FASTLOCK = 1;
      LockMode_LOCK = 2;
      LockMode_HOLD = 3;
   };
   LockMode lock_mode = 3 [json_name = "lock-mode"];
}
message ClockPortNonSupport {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   uint32 ifindex = 2 [json_name = "ifindex"];
   string source_name = 3 [json_name = "source-name"];
}
message ClockPortNonSupportResume {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   uint32 ifindex = 2 [json_name = "ifindex"];
   string source_name = 3 [json_name = "source-name"];
}
message ClockSourceFailed {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 2 [json_name = "source-type-index"];
   uint32 source_index = 3 [json_name = "source-index"];
   uint32 chassis_id = 4 [json_name = "chassis-id"];
   string source_name = 5 [json_name = "source-name"];
   enum SourceState {
      SourceState_INITIAL = 0;
      SourceState_NORMAL = 1;
      SourceState_ABNORMAL = 2;
      SourceState_WTR = 3;
      SourceState_HOLDOFF = 4;
   };
   SourceState source_state = 6 [json_name = "source-state"];
}
message ClockSourceValid {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 2 [json_name = "source-type-index"];
   uint32 source_index = 3 [json_name = "source-index"];
   uint32 chassis_id = 4 [json_name = "chassis-id"];
   string source_name = 5 [json_name = "source-name"];
   enum SourceState {
      SourceState_INITIAL = 0;
      SourceState_NORMAL = 1;
      SourceState_ABNORMAL = 2;
      SourceState_WTR = 3;
      SourceState_HOLDOFF = 4;
   };
   SourceState source_state = 6 [json_name = "source-state"];
}
message ClockSourceFreqCheck {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 2 [json_name = "source-type-index"];
   uint32 source_index = 3 [json_name = "source-index"];
   uint32 chassis_id = 4 [json_name = "chassis-id"];
   enum Result {
      Result_ABNORMAL = 0;
      Result_NORMAL = 1;
   };
   Result result = 5 [json_name = "result"];
   string source_descr = 6 [json_name = "source-descr"];
}
message ClockSourceFreqCheckResume {
   uint32 chassis_index = 1 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 2 [json_name = "source-type-index"];
   uint32 source_index = 3 [json_name = "source-index"];
   uint32 chassis_id = 4 [json_name = "chassis-id"];
   enum Result {
      Result_ABNORMAL = 0;
      Result_NORMAL = 1;
   };
   Result result = 5 [json_name = "result"];
   string source_descr = 6 [json_name = "source-descr"];
}
message ClockSourceInputBelowThreshold {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 2 [json_name = "pll-id"];
   enum Threshold {
      Threshold_UNK = 0;
      Threshold_PRC = 2;
      Threshold_SSUA = 4;
      Threshold_SSUB = 8;
      Threshold_SEC = 11;
      Threshold_DNU = 15;
      Threshold_NONE = 16;
      Threshold_PRTC = 8194;
      Threshold_EPRTC = 8450;
      Threshold_ESEC = 8715;
      Threshold_EPRC = 8962;
   };
   Threshold threshold = 3 [json_name = "threshold"];
   uint32 attr_chassis_index = 4 [json_name = "attr-chassis-index"];
   enum Ssm {
      Ssm_UNK = 0;
      Ssm_PRC = 2;
      Ssm_SSUA = 4;
      Ssm_SSUB = 8;
      Ssm_SEC = 11;
      Ssm_DNU = 15;
      Ssm_NONE = 16;
      Ssm_PRTC = 8194;
      Ssm_EPRTC = 8450;
      Ssm_ESEC = 8715;
      Ssm_EPRC = 8962;
   };
   Ssm ssm = 5 [json_name = "ssm"];
   uint32 chassis_index = 6 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 7 [json_name = "source-type-index"];
   uint32 source_index = 8 [json_name = "source-index"];
}
message ClockSourceInputBelowThresholdResume {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 2 [json_name = "pll-id"];
   enum Threshold {
      Threshold_UNK = 0;
      Threshold_PRC = 2;
      Threshold_SSUA = 4;
      Threshold_SSUB = 8;
      Threshold_SEC = 11;
      Threshold_DNU = 15;
      Threshold_NONE = 16;
      Threshold_PRTC = 8194;
      Threshold_EPRTC = 8450;
      Threshold_ESEC = 8715;
      Threshold_EPRC = 8962;
   };
   Threshold threshold = 3 [json_name = "threshold"];
   uint32 attr_chassis_index = 4 [json_name = "attr-chassis-index"];
   enum Ssm {
      Ssm_UNK = 0;
      Ssm_PRC = 2;
      Ssm_SSUA = 4;
      Ssm_SSUB = 8;
      Ssm_SEC = 11;
      Ssm_DNU = 15;
      Ssm_NONE = 16;
      Ssm_PRTC = 8194;
      Ssm_EPRTC = 8450;
      Ssm_ESEC = 8715;
      Ssm_EPRC = 8962;
   };
   Ssm ssm = 5 [json_name = "ssm"];
   uint32 chassis_index = 6 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 7 [json_name = "source-type-index"];
   uint32 source_index = 8 [json_name = "source-index"];
}
message ClockSourceOutputBelowThreshold {
   uint32 attr_chassis_index = 1 [json_name = "attr-chassis-index"];
   uint32 chassis_id = 2 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 3 [json_name = "pll-id"];
   enum Threshold {
      Threshold_UNK = 0;
      Threshold_PRC = 2;
      Threshold_SSUA = 4;
      Threshold_SSUB = 8;
      Threshold_SEC = 11;
      Threshold_DNU = 15;
      Threshold_NONE = 16;
      Threshold_PRTC = 8194;
      Threshold_EPRTC = 8450;
      Threshold_ESEC = 8715;
      Threshold_EPRC = 8962;
   };
   Threshold threshold = 4 [json_name = "threshold"];
   enum Value {
      Value_UNK = 0;
      Value_PRC = 2;
      Value_SSUA = 4;
      Value_SSUB = 8;
      Value_SEC = 11;
      Value_DNU = 15;
      Value_NONE = 16;
      Value_PRTC = 8194;
      Value_EPRTC = 8450;
      Value_ESEC = 8715;
      Value_EPRC = 8962;
   };
   Value value = 5 [json_name = "value"];
   string source_name = 6 [json_name = "source-name"];
}
message ClockSourceOutputBelowThresholdResume {
   uint32 attr_chassis_index = 1 [json_name = "attr-chassis-index"];
   uint32 chassis_id = 2 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 3 [json_name = "pll-id"];
   enum Threshold {
      Threshold_UNK = 0;
      Threshold_PRC = 2;
      Threshold_SSUA = 4;
      Threshold_SSUB = 8;
      Threshold_SEC = 11;
      Threshold_DNU = 15;
      Threshold_NONE = 16;
      Threshold_PRTC = 8194;
      Threshold_EPRTC = 8450;
      Threshold_ESEC = 8715;
      Threshold_EPRC = 8962;
   };
   Threshold threshold = 4 [json_name = "threshold"];
   enum Value {
      Value_UNK = 0;
      Value_PRC = 2;
      Value_SSUA = 4;
      Value_SSUB = 8;
      Value_SEC = 11;
      Value_DNU = 15;
      Value_NONE = 16;
      Value_PRTC = 8194;
      Value_EPRTC = 8450;
      Value_ESEC = 8715;
      Value_EPRC = 8962;
   };
   Value value = 5 [json_name = "value"];
   string source_name = 6 [json_name = "source-name"];
}
message ClockSsmPktLos {
   string source_name = 1 [json_name = "source-name"];
}
message ClockSsmPktLosResume {
   string source_name = 1 [json_name = "source-name"];
}
message ClockSyncBad {
   int32 chassis_id = 1 [json_name = "chassis-id"];
}
message ClockSyncBadResume {
   int32 chassis_id = 1 [json_name = "chassis-id"];
}
message PtpAcrSyncBad {
   enum State {
      State_NORMAL = 0;
      State_ABNORMAL = 1;
   };
   State state = 1 [json_name = "state"];
}
message PtpAcrSyncBadResume {
   enum State {
      State_NORMAL = 0;
      State_ABNORMAL = 1;
   };
   State state = 1 [json_name = "state"];
}
message PtpExtTimePortLost {
   enum PortStatus {
      PortStatus_NORMAL = 0;
      PortStatus_PORTDOWN = 1;
   };
   PortStatus port_status = 1 [json_name = "port-status"];
   enum PortType {
      PortType_BITS0 = 0;
      PortType_BITS1 = 1;
      PortType_BITS2 = 2;
      PortType_BITS1SLOT4 = 1025;
      PortType_BITS1SLOT5 = 1281;
      PortType_BITS1SLOT6 = 1537;
      PortType_BITS1SLOT7 = 1793;
      PortType_BITS1SLOT8 = 2049;
      PortType_BITS1SLOT9 = 2305;
      PortType_BITS1SLOT10 = 2561;
      PortType_BITS1SLOT11 = 2817;
      PortType_BITS1SLOT12 = 3073;
      PortType_BITS1SLOT15 = 3841;
      PortType_BITS1SLOT16 = 4097;
      PortType_BITS1SLOT17 = 4353;
      PortType_BITS1SLOT18 = 4609;
      PortType_BITS1SLOT19 = 4865;
      PortType_BITS1SLOT20 = 5121;
      PortType_BITS1SLOT21 = 5377;
      PortType_BITS1SLOT22 = 5633;
      PortType_BITS1SLOT30 = 7681;
      PortType_BITS1SLOT31 = 7937;
   };
   PortType port_type = 2 [json_name = "port-type"];
}
message PtpExtTimePortLostResume {
   enum PortStatus {
      PortStatus_NORMAL = 0;
      PortStatus_PORTDOWN = 1;
   };
   PortStatus port_status = 1 [json_name = "port-status"];
   enum PortType {
      PortType_BITS0 = 0;
      PortType_BITS1 = 1;
      PortType_BITS2 = 2;
      PortType_BITS1SLOT4 = 1025;
      PortType_BITS1SLOT5 = 1281;
      PortType_BITS1SLOT6 = 1537;
      PortType_BITS1SLOT7 = 1793;
      PortType_BITS1SLOT8 = 2049;
      PortType_BITS1SLOT9 = 2305;
      PortType_BITS1SLOT10 = 2561;
      PortType_BITS1SLOT11 = 2817;
      PortType_BITS1SLOT12 = 3073;
      PortType_BITS1SLOT15 = 3841;
      PortType_BITS1SLOT16 = 4097;
      PortType_BITS1SLOT17 = 4353;
      PortType_BITS1SLOT18 = 4609;
      PortType_BITS1SLOT19 = 4865;
      PortType_BITS1SLOT20 = 5121;
      PortType_BITS1SLOT21 = 5377;
      PortType_BITS1SLOT22 = 5633;
      PortType_BITS1SLOT30 = 7681;
      PortType_BITS1SLOT31 = 7937;
   };
   PortType port_type = 2 [json_name = "port-type"];
}
message PtpFrequencyLockFail {
   enum LockStatus {
      LockStatus_UNLOCK = 0;
      LockStatus_LOCK = 1;
   };
   LockStatus lock_status = 1 [json_name = "lock-status"];
}
message PtpFrequencyLockResume {
   enum LockStatus {
      LockStatus_UNLOCK = 0;
      LockStatus_LOCK = 1;
   };
   LockStatus lock_status = 1 [json_name = "lock-status"];
}
message PtpPassiveMeasureOverflow {
   uint32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   uint32 change_value = 3 [json_name = "change-value"];
   enum ValueFlag {
      ValueFlag_NEGATIVE = 0;
      ValueFlag_POSITIVE = 1;
   };
   ValueFlag value_flag = 4 [json_name = "value-flag"];
   uint32 threshold = 5 [json_name = "threshold"];
}
message PtpPassiveMeasureOverflowResume {
   uint32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   uint32 change_value = 3 [json_name = "change-value"];
   enum ValueFlag {
      ValueFlag_NEGATIVE = 0;
      ValueFlag_POSITIVE = 1;
   };
   ValueFlag value_flag = 4 [json_name = "value-flag"];
   uint32 threshold = 5 [json_name = "threshold"];
}
message PtpPktLos {
   enum PktType {
      INVALID_ENUM_VALUE_PktType = 0;
      PktType_SYNC = 1;
      PktType_PDELAYX_RESP = 4;
      PktType_DELAYX_RESP = 6;
      PktType_ANNOUNCE = 8;
   };
   PktType pkt_type = 1 [json_name = "pkt-type"];
}
message PtpPktLosResume {
   enum PktType {
      INVALID_ENUM_VALUE_PktType = 0;
      PktType_SYNC = 1;
      PktType_PDELAYX_RESP = 4;
      PktType_DELAYX_RESP = 6;
      PktType_ANNOUNCE = 8;
   };
   PktType pkt_type = 1 [json_name = "pkt-type"];
}
message PtpPortNonSupport {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   uint32 ifindex = 2 [json_name = "ifindex"];
   string ifname = 3 [json_name = "ifname"];
}
message PtpPortNonSupportResume {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   uint32 ifindex = 2 [json_name = "ifindex"];
   string ifname = 3 [json_name = "ifname"];
}
message PtpRingFiberLengthChange {
   uint32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   uint32 change_value = 3 [json_name = "change-value"];
   enum ValueFlag {
      ValueFlag_NEGATIVE = 0;
      ValueFlag_POSITIVE = 1;
   };
   ValueFlag value_flag = 4 [json_name = "value-flag"];
}
message PtpRingFiberLengthChangeResume {
   uint32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   uint32 change_value = 3 [json_name = "change-value"];
   enum ValueFlag {
      ValueFlag_NEGATIVE = 0;
      ValueFlag_POSITIVE = 1;
   };
   ValueFlag value_flag = 4 [json_name = "value-flag"];
}
message PtpStandardTimeOffsetOver {
   uint32 offset = 1 [json_name = "offset"];
   uint32 threshold = 2 [json_name = "threshold"];
}
message PtpStandardTimeOffsetOverResume {
   uint32 offset = 1 [json_name = "offset"];
   uint32 threshold = 2 [json_name = "threshold"];
}
message PtpTimeLockFail {
   enum LockStatus {
      LockStatus_UNLOCK = 0;
      LockStatus_LOCK = 1;
   };
   LockStatus lock_status = 1 [json_name = "lock-status"];
}
message PtpTimeLockFailResume {
   enum LockStatus {
      LockStatus_UNLOCK = 0;
      LockStatus_LOCK = 1;
   };
   LockStatus lock_status = 1 [json_name = "lock-status"];
}
message PtpTimeOffsetSumOver {
   uint32 offset_sum = 1 [json_name = "offset-sum"];
   uint32 threshold = 2 [json_name = "threshold"];
}
message PtpTimeOffsetSumOverResume {
   uint32 offset_sum = 1 [json_name = "offset-sum"];
   uint32 threshold = 2 [json_name = "threshold"];
}
message PtpTimeSyncFaulty {
   enum SyncStatus {
      INVALID_ENUM_VALUE_SyncStatus = 0;
      SyncStatus_UNSYNC = 1;
      SyncStatus_SYNC = 2;
   };
   SyncStatus sync_status = 1 [json_name = "sync-status"];
}
message PtpTimeSyncResume {
   enum SyncStatus {
      INVALID_ENUM_VALUE_SyncStatus = 0;
      SyncStatus_UNSYNC = 1;
      SyncStatus_SYNC = 2;
   };
   SyncStatus sync_status = 1 [json_name = "sync-status"];
}
message ClockCesAcrMasterPwChange {
   uint32 slot = 1 [json_name = "slot"];
   uint32 card = 2 [json_name = "card"];
   uint32 domain = 3 [json_name = "domain"];
   string old_pw_name = 4 [json_name = "old-pw-name"];
   string pw_name = 5 [json_name = "pw-name"];
}
message ClockSourceStateChange {
   int32 chassis_id = 1 [json_name = "chassis-id"];
   string source_name = 2 [json_name = "source-name"];
   enum OldSourceState {
      OldSourceState_INITIAL = 0;
      OldSourceState_NORMAL = 1;
      OldSourceState_ABNORMAL = 2;
      OldSourceState_WTR = 3;
      OldSourceState_HOLDOFF = 4;
   };
   OldSourceState old_source_state = 3 [json_name = "old-source-state"];
   int32 chassis_index = 4 [json_name = "chassis-index"];
   enum SourceTypeIndex {
      INVALID_ENUM_VALUE_SourceTypeIndex = 0;
      SourceTypeIndex_BITS = 1;
      SourceTypeIndex_PTP = 2;
      SourceTypeIndex_INTERFACE = 3;
      SourceTypeIndex_CESACR = 4;
   };
   SourceTypeIndex source_type_index = 5 [json_name = "source-type-index"];
   uint32 source_index = 6 [json_name = "source-index"];
   enum SourceState {
      SourceState_INITIAL = 0;
      SourceState_NORMAL = 1;
      SourceState_ABNORMAL = 2;
      SourceState_WTR = 3;
      SourceState_HOLDOFF = 4;
   };
   SourceState source_state = 7 [json_name = "source-state"];
}
message ClockSourceSysClkLockModeChange {
   int32 chassis_id = 1 [json_name = "chassis-id"];
   uint32 old_lock_mode = 2 [json_name = "old-lock-mode"];
   int32 attr_chassis_index = 3 [json_name = "attr-chassis-index"];
   enum LockMode {
      LockMode_FREERUN = 0;
      LockMode_FASTLOCK = 1;
      LockMode_LOCK = 2;
      LockMode_HOLD = 3;
   };
   LockMode lock_mode = 4 [json_name = "lock-mode"];
}
message ClockGnssModelChange {
   int32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   enum Model {
      Model_NONE = 0;
      Model_GPS = 1;
      Model_GLONASS = 2;
      Model_BEIDOU = 3;
      Model_GPSX_GLONASS = 4;
      Model_GPSX_BEIDOU = 5;
   };
   Model model = 3 [json_name = "model"];
   enum OldModel {
      OldModel_NONE = 0;
      OldModel_GPS = 1;
      OldModel_GLONASS = 2;
      OldModel_BEIDOU = 3;
      OldModel_GPSX_GLONASS = 4;
      OldModel_GPSX_BEIDOU = 5;
   };
   OldModel old_model = 4 [json_name = "old-model"];
}
message ClockSourceSsmChange {
   uint32 chassis_id = 1 [json_name = "chassis-id"];
   string source_name = 2 [json_name = "source-name"];
   enum OldSsm {
      OldSsm_UNK = 0;
      OldSsm_PRC = 2;
      OldSsm_SSUA = 4;
      OldSsm_SSUB = 8;
      OldSsm_SEC = 11;
      OldSsm_DNU = 15;
      OldSsm_NONE = 16;
      OldSsm_INVAILD = 255;
      OldSsm_PRTC = 8194;
      OldSsm_EPRTC = 8450;
      OldSsm_ESEC = 8715;
      OldSsm_EPRC = 8962;
   };
   OldSsm old_ssm = 3 [json_name = "old-ssm"];
   enum Ssm {
      Ssm_UNK = 0;
      Ssm_PRC = 2;
      Ssm_SSUA = 4;
      Ssm_SSUB = 8;
      Ssm_SEC = 11;
      Ssm_DNU = 15;
      Ssm_NONE = 16;
      Ssm_INVAILD = 255;
      Ssm_PRTC = 8194;
      Ssm_EPRTC = 8450;
      Ssm_ESEC = 8715;
      Ssm_EPRC = 8962;
   };
   Ssm ssm = 4 [json_name = "ssm"];
}
message ClockSourceSwitch {
   int32 chassis_id = 1 [json_name = "chassis-id"];
   enum PllId {
      INVALID_ENUM_VALUE_PllId = 0;
      PllId_SYSTEM = 1;
      PllId_SYNC2M1 = 2;
      PllId_SYNC2M2 = 3;
   };
   PllId pll_id = 2 [json_name = "pll-id"];
   string old_source_name = 3 [json_name = "old-source-name"];
   string source_name = 4 [json_name = "source-name"];
   int32 chassis_index = 5 [json_name = "chassis-index"];
   enum SrcType {
      INVALID_ENUM_VALUE_SrcType = 0;
      SrcType_SYSTEM = 1;
      SrcType_SYNC2M1 = 2;
      SrcType_SYNC2M2 = 3;
   };
   SrcType src_type = 6 [json_name = "src-type"];
   enum SrcMode {
      SrcMode_AUTO = 0;
      SrcMode_MANUAL = 1;
      SrcMode_FORCE = 2;
   };
   SrcMode src_mode = 7 [json_name = "src-mode"];
}
message PtpAdaptivePtsfStateChange {
   int32 server_index = 1 [json_name = "server-index"];
   enum PtsfType {
      INVALID_ENUM_VALUE_PtsfType = 0;
      PtsfType_LOSSX_ANNOUNCE = 1;
      PtsfType_LOSSX_SYNCX_FOLLOWUP = 2;
      PtsfType_LOSSX_RESP = 3;
      PtsfType_UNUSABLE = 4;
   };
   PtsfType ptsf_type = 2 [json_name = "ptsf-type"];
   enum PtsfState {
      INVALID_ENUM_VALUE_PtsfState = 0;
      PtsfState_TRUE = 1;
      PtsfState_FALSE = 2;
   };
   PtsfState ptsf_state = 3 [json_name = "ptsf-state"];
}
message PtpClockSourceChange {
   string old_clock_id = 1 [json_name = "old-clock-id"];
   string clock_id = 2 [json_name = "clock-id"];
   uint32 ifindex = 3 [json_name = "ifindex"];
   int32 old_port_num = 4 [json_name = "old-port-num"];
   int32 port_num = 5 [json_name = "port-num"];
   string old_ifname = 6 [json_name = "old-ifname"];
   string ifname = 7 [json_name = "ifname"];
}
message PtpPassiveFiberLengthChange {
   int32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   int32 change_value = 3 [json_name = "change-value"];
   enum ValueFlag {
      ValueFlag_NEGATIVE = 0;
      ValueFlag_POSITIVE = 1;
   };
   ValueFlag value_flag = 4 [json_name = "value-flag"];
}
message PtpPortBmcInfoChange {
   int32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   string clock_id = 3 [json_name = "clock-id"];
   int32 port_num = 4 [json_name = "port-num"];
   int32 steps = 5 [json_name = "steps"];
   string master_clock_id = 6 [json_name = "master-clock-id"];
}
message PtpPortStateChange {
   int32 ifindex = 1 [json_name = "ifindex"];
   string ifname = 2 [json_name = "ifname"];
   enum PortState {
      INVALID_ENUM_VALUE_PortState = 0;
      PortState_MASTER = 1;
      PortState_SLAVE = 2;
      PortState_PASSIVE = 3;
      PortState_LISTENING = 4;
      PortState_FAULTY = 5;
      PortState_INITIALIZING = 6;
      PortState_PREMASTER = 7;
      PortState_DISABLED = 8;
      PortState_UNCALIBRATED = 9;
   };
   PortState port_state = 3 [json_name = "port-state"];
   enum OldPortState {
      INVALID_ENUM_VALUE_OldPortState = 0;
      OldPortState_MASTER = 1;
      OldPortState_SLAVE = 2;
      OldPortState_PASSIVE = 3;
      OldPortState_LISTENING = 4;
      OldPortState_FAULTY = 5;
      OldPortState_INITIALIZING = 6;
      OldPortState_PREMASTER = 7;
      OldPortState_DISABLED = 8;
      OldPortState_UNCALIBRATED = 9;
   };
   OldPortState old_port_state = 4 [json_name = "old-port-state"];
}
message PtpAdaptiveClientListChange {
   string client_ip_list = 1 [json_name = "client-ip-list"];
   enum ClientIpChangeFlag {
      ClientIpChangeFlag_ADDED = 0;
      ClientIpChangeFlag_DELETED = 1;
   };
   ClientIpChangeFlag client_ip_change_flag = 2 [json_name = "client-ip-change-flag"];
   uint32 client_index = 3 [json_name = "client-index"];
   uint32 client_id = 4 [json_name = "client-id"];
}
message PtpAdaptiveNegoInfoChange {
   enum ServerId {
      INVALID_ENUM_VALUE_ServerId = 0;
      ServerId_SERVER1 = 1;
      ServerId_SERVER2 = 2;
   };
   ServerId server_id = 1 [json_name = "server-id"];
   enum NegoState {
      NegoState_INIT = 0;
      NegoState_SUCCESS = 1;
      NegoState_ERROR = 2;
      NegoState_NONE = 3;
   };
   NegoState nego_state = 2 [json_name = "nego-state"];
   enum ErrorReason {
      ErrorReason_NONE = 0;
      ErrorReason_DELETEX_LINK = 1;
      ErrorReason_ANNOUNCEX_TIMEOUT = 2;
      ErrorReason_ANNOUNCEX_NEGOX_TIMEOUT = 3;
      ErrorReason_ANNOUNCEX_NEGOX_DENY = 4;
      ErrorReason_SYNCX_NEGOX_FAILED = 5;
      ErrorReason_SYNCX_NEGOX_TIMEOUT = 6;
      ErrorReason_DELAYRESPX_NEGOX_TIMEOUT = 7;
      ErrorReason_DELAYRESPX_NEGOX_DENY = 8;
      ErrorReason_IFX_NOTX_SUPPORT = 9;
      ErrorReason_SERVICEX_MODEX_NOTX_SUPPORT = 10;
      ErrorReason_ROUTEX_UNREACH = 11;
      ErrorReason_BMCX_FAILED = 12;
      ErrorReason_MASTERX_SYNCX_FAULT = 13;
   };
   ErrorReason error_reason = 3 [json_name = "error-reason"];
}
message PtpAdaptiveTraceSourceChange {
   enum OldTraceSource {
      OldTraceSource_LOCAL = 0;
      OldTraceSource_SERVER1 = 1;
      OldTraceSource_SERVER2 = 2;
   };
   OldTraceSource old_trace_source = 1 [json_name = "old-trace-source"];
   enum TraceSource {
      TraceSource_LOCAL = 0;
      TraceSource_SERVER1 = 1;
      TraceSource_SERVER2 = 2;
   };
   TraceSource trace_source = 2 [json_name = "trace-source"];
}
message PtpPdvLimitExceed {
   uint32 state = 1 [json_name = "state"];
}


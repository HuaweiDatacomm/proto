syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2022-08-12 11:51:42
// ProtoYang-version 1
// module openconfig-bfd
// revision 2021-06-16
// revision 2021-03-17
// revision 2020-05-08
// revision 2019-10-25
// revision 2019-06-02
// revision 2018-11-21
// revision 2017-10-19
// revision 2016-06-24
// namespace http://openconfig.net/yang/bfd

package openconfig_bfd;

message Bfd {
   message Interfaces {
      message Interface {
         string id = 1 [json_name = "id"];
         message Config {
            string id = 1 [json_name = "id"];
            bool enabled = 2 [json_name = "enabled"];
            string local_address = 3 [json_name = "local-address"];
            uint32 desired_minimum_tx_interval = 4 [json_name = "desired-minimum-tx-interval"];
            uint32 required_minimum_receive = 5 [json_name = "required-minimum-receive"];
            uint32 detection_multiplier = 6 [json_name = "detection-multiplier"];
            bool enable_per_member_link = 7 [json_name = "enable-per-member-link"];
         }
         Config config = 2 [json_name = "config"];
         message State {
            string id = 1 [json_name = "id"];
            bool enabled = 2 [json_name = "enabled"];
            string local_address = 3 [json_name = "local-address"];
            uint32 desired_minimum_tx_interval = 4 [json_name = "desired-minimum-tx-interval"];
            uint32 required_minimum_receive = 5 [json_name = "required-minimum-receive"];
            uint32 detection_multiplier = 6 [json_name = "detection-multiplier"];
            bool enable_per_member_link = 7 [json_name = "enable-per-member-link"];
         }
         State state = 3 [json_name = "state"];
         message InterfaceRef {
            message Config {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            Config config = 1 [json_name = "config"];
            message State {
               string interface6 = 1 [json_name = "interface"];
               uint32 subinterface = 2 [json_name = "subinterface"];
            }
            State state = 2 [json_name = "state"];
         }
         InterfaceRef interface_ref = 4 [json_name = "interface-ref"];
         message MicroBfdSessions {
            message MicroBfdSession {
               string member_interface = 1 [json_name = "member-interface"];
               message Config {
                  string local_address = 1 [json_name = "local-address"];
                  string remote_address = 2 [json_name = "remote-address"];
                  string member_interface = 3 [json_name = "member-interface"];
               }
               Config config = 2 [json_name = "config"];
               message State {
                  string local_address = 1 [json_name = "local-address"];
                  string remote_address = 2 [json_name = "remote-address"];
                  string member_interface = 3 [json_name = "member-interface"];
                  enum SessionState {
                     SessionState_UP = 0;
                     SessionState_DOWN = 1;
                     SessionState_ADMIN_DOWN = 2;
                     SessionState_INIT = 3;
                  };
                  SessionState session_state = 4 [json_name = "session-state"];
                  enum RemoteSessionState {
                     RemoteSessionState_UP = 0;
                     RemoteSessionState_DOWN = 1;
                     RemoteSessionState_ADMIN_DOWN = 2;
                     RemoteSessionState_INIT = 3;
                  };
                  RemoteSessionState remote_session_state = 5 [json_name = "remote-session-state"];
                  uint64 last_failure_time = 6 [json_name = "last-failure-time"];
                  uint64 failure_transitions = 7 [json_name = "failure-transitions"];
                  string local_discriminator = 8 [json_name = "local-discriminator"];
                  string remote_discriminator = 9 [json_name = "remote-discriminator"];
                  enum LocalDiagnosticCode {
                     LocalDiagnosticCode_NO_DIAGNOSTIC = 0;
                     LocalDiagnosticCode_DETECTION_TIMEOUT = 1;
                     LocalDiagnosticCode_ECHO_FAILED = 2;
                     LocalDiagnosticCode_FORWARDING_RESET = 3;
                     LocalDiagnosticCode_PATH_DOWN = 4;
                     LocalDiagnosticCode_CONCATENATED_PATH_DOWN = 5;
                     LocalDiagnosticCode_ADMIN_DOWN = 6;
                     LocalDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN = 7;
                  };
                  LocalDiagnosticCode local_diagnostic_code = 10 [json_name = "local-diagnostic-code"];
                  enum RemoteDiagnosticCode {
                     RemoteDiagnosticCode_NO_DIAGNOSTIC = 0;
                     RemoteDiagnosticCode_DETECTION_TIMEOUT = 1;
                     RemoteDiagnosticCode_ECHO_FAILED = 2;
                     RemoteDiagnosticCode_FORWARDING_RESET = 3;
                     RemoteDiagnosticCode_PATH_DOWN = 4;
                     RemoteDiagnosticCode_CONCATENATED_PATH_DOWN = 5;
                     RemoteDiagnosticCode_ADMIN_DOWN = 6;
                     RemoteDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN = 7;
                  };
                  RemoteDiagnosticCode remote_diagnostic_code = 11 [json_name = "remote-diagnostic-code"];
                  uint32 remote_minimum_receive_interval = 12 [json_name = "remote-minimum-receive-interval"];
                  bool demand_mode_requested = 13 [json_name = "demand-mode-requested"];
                  bool remote_authentication_enabled = 14 [json_name = "remote-authentication-enabled"];
                  bool remote_control_plane_independent = 15 [json_name = "remote-control-plane-independent"];
                  message Async {
                     uint64 last_packet_transmitted = 1 [json_name = "last-packet-transmitted"];
                     uint64 last_packet_received = 2 [json_name = "last-packet-received"];
                     uint64 transmitted_packets = 3 [json_name = "transmitted-packets"];
                     uint64 received_packets = 4 [json_name = "received-packets"];
                     uint64 up_transitions = 5 [json_name = "up-transitions"];
                  }
                  Async async = 16 [json_name = "async"];
               }
               State state = 3 [json_name = "state"];
            }
            repeated MicroBfdSession micro_bfd_session = 1 [json_name = "micro-bfd-session"];
         }
         MicroBfdSessions micro_bfd_sessions = 5 [json_name = "micro-bfd-sessions"];
         message Peers {
            message Peer {
               string local_discriminator = 1 [json_name = "local-discriminator"];
               message State {
                  string local_address = 1 [json_name = "local-address"];
                  string remote_address = 2 [json_name = "remote-address"];
                  repeated string subscribed_protocols = 3 [json_name = "subscribed-protocols"];
                  enum SessionState {
                     SessionState_UP = 0;
                     SessionState_DOWN = 1;
                     SessionState_ADMIN_DOWN = 2;
                     SessionState_INIT = 3;
                  };
                  SessionState session_state = 4 [json_name = "session-state"];
                  enum RemoteSessionState {
                     RemoteSessionState_UP = 0;
                     RemoteSessionState_DOWN = 1;
                     RemoteSessionState_ADMIN_DOWN = 2;
                     RemoteSessionState_INIT = 3;
                  };
                  RemoteSessionState remote_session_state = 5 [json_name = "remote-session-state"];
                  uint64 last_failure_time = 6 [json_name = "last-failure-time"];
                  uint64 failure_transitions = 7 [json_name = "failure-transitions"];
                  string local_discriminator = 8 [json_name = "local-discriminator"];
                  string remote_discriminator = 9 [json_name = "remote-discriminator"];
                  enum LocalDiagnosticCode {
                     LocalDiagnosticCode_NO_DIAGNOSTIC = 0;
                     LocalDiagnosticCode_DETECTION_TIMEOUT = 1;
                     LocalDiagnosticCode_ECHO_FAILED = 2;
                     LocalDiagnosticCode_FORWARDING_RESET = 3;
                     LocalDiagnosticCode_PATH_DOWN = 4;
                     LocalDiagnosticCode_CONCATENATED_PATH_DOWN = 5;
                     LocalDiagnosticCode_ADMIN_DOWN = 6;
                     LocalDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN = 7;
                  };
                  LocalDiagnosticCode local_diagnostic_code = 10 [json_name = "local-diagnostic-code"];
                  enum RemoteDiagnosticCode {
                     RemoteDiagnosticCode_NO_DIAGNOSTIC = 0;
                     RemoteDiagnosticCode_DETECTION_TIMEOUT = 1;
                     RemoteDiagnosticCode_ECHO_FAILED = 2;
                     RemoteDiagnosticCode_FORWARDING_RESET = 3;
                     RemoteDiagnosticCode_PATH_DOWN = 4;
                     RemoteDiagnosticCode_CONCATENATED_PATH_DOWN = 5;
                     RemoteDiagnosticCode_ADMIN_DOWN = 6;
                     RemoteDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN = 7;
                  };
                  RemoteDiagnosticCode remote_diagnostic_code = 11 [json_name = "remote-diagnostic-code"];
                  uint32 remote_minimum_receive_interval = 12 [json_name = "remote-minimum-receive-interval"];
                  bool demand_mode_requested = 13 [json_name = "demand-mode-requested"];
                  bool remote_authentication_enabled = 14 [json_name = "remote-authentication-enabled"];
                  bool remote_control_plane_independent = 15 [json_name = "remote-control-plane-independent"];
                  message Echo {
                     bool active = 1 [json_name = "active"];
                     uint64 last_packet_transmitted = 2 [json_name = "last-packet-transmitted"];
                     uint64 last_packet_received = 3 [json_name = "last-packet-received"];
                     uint64 transmitted_packets = 4 [json_name = "transmitted-packets"];
                     uint64 received_packets = 5 [json_name = "received-packets"];
                     uint64 up_transitions = 6 [json_name = "up-transitions"];
                  }
                  Echo echo = 16 [json_name = "echo"];
                  message Async {
                     uint64 last_packet_transmitted = 1 [json_name = "last-packet-transmitted"];
                     uint64 last_packet_received = 2 [json_name = "last-packet-received"];
                     uint64 transmitted_packets = 3 [json_name = "transmitted-packets"];
                     uint64 received_packets = 4 [json_name = "received-packets"];
                     uint64 up_transitions = 5 [json_name = "up-transitions"];
                  }
                  Async async = 17 [json_name = "async"];
               }
               State state = 2 [json_name = "state"];
            }
            repeated Peer peer = 1 [json_name = "peer"];
         }
         Peers peers = 6 [json_name = "peers"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 1 [json_name = "interfaces"];
}

